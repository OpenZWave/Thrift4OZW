--- ozw_types.h	2013-03-23 13:18:37.193467300 +0000
+++ ozw_types.h.patched_new	2013-03-23 13:17:32.961465443 +0000
@@ -7,6 +7,8 @@
 #ifndef ozw_TYPES_H
 #define ozw_TYPES_H
 
+using std::size_t;
+
 #include <Thrift.h>
 #include <TApplicationException.h>
 #include <protocol/TProtocol.h>
@@ -151,6 +153,21 @@
   int8_t _valueIndex;
   RemoteValueType::type _type;
 
+// ekarak: constructor from ValueID
+   RemoteValueID(ValueID vid) : 
+     _homeId ((int32_t) vid.GetHomeId()), 
+     _nodeId ((int8_t) vid.GetNodeId()), 
+     _genre  ((RemoteValueGenre::type) vid.GetGenre()),
+     _commandClassId((int8_t) vid.GetCommandClassId()), 
+     _instance ((int8_t) vid.GetInstance()), 
+     _valueIndex((int8_t) vid.GetIndex()),
+     _type ((RemoteValueType::type) vid.GetType()) { }
+     
+// ekarak: converter to ValueID
+   ValueID toValueID() const {
+     return ValueID((uint32)_homeId, (uint8)_nodeId, (ValueID::ValueGenre)_genre, (uint8)_commandClassId, (uint8)_instance, (uint8)_valueIndex, (ValueID::ValueType)_type);
+   }
+
   _RemoteValueID__isset __isset;
 
   void __set__homeId(const int32_t val) {
