//
// Autogenerated by Thrift Compiler (0.8.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//

if (typeof OpenZWave === 'undefined') {
  OpenZWave = {};
}
OpenZWave.RemoteValueGenre = {
'ValueGenre_Basic' : 0,
'ValueGenre_User' : 1,
'ValueGenre_Config' : 2,
'ValueGenre_System' : 3,
'ValueGenre_Count' : 4
};
OpenZWave.RemoteValueType = {
'ValueType_Bool' : 0,
'ValueType_Byte' : 1,
'ValueType_Decimal' : 2,
'ValueType_Int' : 3,
'ValueType_List' : 4,
'ValueType_Schedule' : 5,
'ValueType_Short' : 6,
'ValueType_String' : 7,
'ValueType_Button' : 8,
'ValueType_Raw' : 9
};
OpenZWave.DriverControllerCommand = {
'ControllerCommand_None' : 0,
'ControllerCommand_AddDevice' : 1,
'ControllerCommand_CreateNewPrimary' : 2,
'ControllerCommand_ReceiveConfiguration' : 3,
'ControllerCommand_RemoveDevice' : 4,
'ControllerCommand_RemoveFailedNode' : 5,
'ControllerCommand_HasNodeFailed' : 6,
'ControllerCommand_ReplaceFailedNode' : 7,
'ControllerCommand_TransferPrimaryRole' : 8,
'ControllerCommand_RequestNetworkUpdate' : 9,
'ControllerCommand_RequestNodeNeighborUpdate' : 10,
'ControllerCommand_AssignReturnRoute' : 11,
'ControllerCommand_DeleteAllReturnRoutes' : 12,
'ControllerCommand_SendNodeInformation' : 13,
'ControllerCommand_ReplicationSend' : 14,
'ControllerCommand_CreateButton' : 15,
'ControllerCommand_DeleteButton' : 16
};
OpenZWave.DriverControllerState = {
'ControllerState_Normal' : 0,
'ControllerState_Starting' : 1,
'ControllerState_Cancel' : 2,
'ControllerState_Error' : 3,
'ControllerState_Waiting' : 4,
'ControllerState_Sleeping' : 5,
'ControllerState_InProgress' : 6,
'ControllerState_Completed' : 7,
'ControllerState_Failed' : 8,
'ControllerState_NodeOK' : 9,
'ControllerState_NodeFailed' : 10
};
OpenZWave.DriverControllerError = {
'ControllerError_None' : 0,
'ControllerError_ButtonNotFound' : 1,
'ControllerError_NodeNotFound' : 2,
'ControllerError_NotBridge' : 3,
'ControllerError_NotSUC' : 4,
'ControllerError_NotSecondary' : 5,
'ControllerError_NotPrimary' : 6,
'ControllerError_IsPrimary' : 7,
'ControllerError_NotFound' : 8,
'ControllerError_Busy' : 9,
'ControllerError_Failed' : 10,
'ControllerError_Disabled' : 11,
'ControllerError_Overflow' : 12
};
OpenZWave.DriverControllerInterface = {
'ControllerInterface_Unknown' : 0,
'ControllerInterface_Serial' : 1,
'ControllerInterface_Hid' : 2
};
OpenZWave.RemoteValueID = function(args) {
  this._homeId = null;
  this._nodeId = null;
  this._genre = null;
  this._commandClassId = null;
  this._instance = null;
  this._valueIndex = null;
  this._type = null;
  if (args) {
    if (args._homeId !== undefined) {
      this._homeId = args._homeId;
    }
    if (args._nodeId !== undefined) {
      this._nodeId = args._nodeId;
    }
    if (args._genre !== undefined) {
      this._genre = args._genre;
    }
    if (args._commandClassId !== undefined) {
      this._commandClassId = args._commandClassId;
    }
    if (args._instance !== undefined) {
      this._instance = args._instance;
    }
    if (args._valueIndex !== undefined) {
      this._valueIndex = args._valueIndex;
    }
    if (args._type !== undefined) {
      this._type = args._type;
    }
  }
};
OpenZWave.RemoteValueID.prototype = {};
OpenZWave.RemoteValueID.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this._homeId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BYTE) {
        this._nodeId = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this._genre = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BYTE) {
        this._commandClassId = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BYTE) {
        this._instance = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BYTE) {
        this._valueIndex = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this._type = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteValueID.prototype.write = function(output) {
  output.writeStructBegin('RemoteValueID');
  if (this._homeId) {
    output.writeFieldBegin('_homeId', Thrift.Type.I32, 1);
    output.writeI32(this._homeId);
    output.writeFieldEnd();
  }
  if (this._nodeId) {
    output.writeFieldBegin('_nodeId', Thrift.Type.BYTE, 2);
    output.writeByte(this._nodeId);
    output.writeFieldEnd();
  }
  if (this._genre) {
    output.writeFieldBegin('_genre', Thrift.Type.I32, 3);
    output.writeI32(this._genre);
    output.writeFieldEnd();
  }
  if (this._commandClassId) {
    output.writeFieldBegin('_commandClassId', Thrift.Type.BYTE, 4);
    output.writeByte(this._commandClassId);
    output.writeFieldEnd();
  }
  if (this._instance) {
    output.writeFieldBegin('_instance', Thrift.Type.BYTE, 5);
    output.writeByte(this._instance);
    output.writeFieldEnd();
  }
  if (this._valueIndex) {
    output.writeFieldBegin('_valueIndex', Thrift.Type.BYTE, 6);
    output.writeByte(this._valueIndex);
    output.writeFieldEnd();
  }
  if (this._type) {
    output.writeFieldBegin('_type', Thrift.Type.I32, 7);
    output.writeI32(this._type);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.DriverData = function(args) {
  this.s_SOFCnt = null;
  this.s_ACKWaiting = null;
  this.s_readAborts = null;
  this.s_badChecksum = null;
  this.s_readCnt = null;
  this.s_writeCnt = null;
  this.s_CANCnt = null;
  this.s_NAKCnt = null;
  this.s_ACKCnt = null;
  this.s_OOFCnt = null;
  this.s_dropped = null;
  this.s_retries = null;
  this.s_controllerReadCnt = null;
  this.s_controllerWriteCnt = null;
  if (args) {
    if (args.s_SOFCnt !== undefined) {
      this.s_SOFCnt = args.s_SOFCnt;
    }
    if (args.s_ACKWaiting !== undefined) {
      this.s_ACKWaiting = args.s_ACKWaiting;
    }
    if (args.s_readAborts !== undefined) {
      this.s_readAborts = args.s_readAborts;
    }
    if (args.s_badChecksum !== undefined) {
      this.s_badChecksum = args.s_badChecksum;
    }
    if (args.s_readCnt !== undefined) {
      this.s_readCnt = args.s_readCnt;
    }
    if (args.s_writeCnt !== undefined) {
      this.s_writeCnt = args.s_writeCnt;
    }
    if (args.s_CANCnt !== undefined) {
      this.s_CANCnt = args.s_CANCnt;
    }
    if (args.s_NAKCnt !== undefined) {
      this.s_NAKCnt = args.s_NAKCnt;
    }
    if (args.s_ACKCnt !== undefined) {
      this.s_ACKCnt = args.s_ACKCnt;
    }
    if (args.s_OOFCnt !== undefined) {
      this.s_OOFCnt = args.s_OOFCnt;
    }
    if (args.s_dropped !== undefined) {
      this.s_dropped = args.s_dropped;
    }
    if (args.s_retries !== undefined) {
      this.s_retries = args.s_retries;
    }
    if (args.s_controllerReadCnt !== undefined) {
      this.s_controllerReadCnt = args.s_controllerReadCnt;
    }
    if (args.s_controllerWriteCnt !== undefined) {
      this.s_controllerWriteCnt = args.s_controllerWriteCnt;
    }
  }
};
OpenZWave.DriverData.prototype = {};
OpenZWave.DriverData.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.s_SOFCnt = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.s_ACKWaiting = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.s_readAborts = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.s_badChecksum = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.s_readCnt = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.s_writeCnt = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.s_CANCnt = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.s_NAKCnt = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I32) {
        this.s_ACKCnt = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I32) {
        this.s_OOFCnt = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I32) {
        this.s_dropped = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.I32) {
        this.s_retries = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.I32) {
        this.s_controllerReadCnt = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.I32) {
        this.s_controllerWriteCnt = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.DriverData.prototype.write = function(output) {
  output.writeStructBegin('DriverData');
  if (this.s_SOFCnt) {
    output.writeFieldBegin('s_SOFCnt', Thrift.Type.I32, 1);
    output.writeI32(this.s_SOFCnt);
    output.writeFieldEnd();
  }
  if (this.s_ACKWaiting) {
    output.writeFieldBegin('s_ACKWaiting', Thrift.Type.I32, 2);
    output.writeI32(this.s_ACKWaiting);
    output.writeFieldEnd();
  }
  if (this.s_readAborts) {
    output.writeFieldBegin('s_readAborts', Thrift.Type.I32, 3);
    output.writeI32(this.s_readAborts);
    output.writeFieldEnd();
  }
  if (this.s_badChecksum) {
    output.writeFieldBegin('s_badChecksum', Thrift.Type.I32, 4);
    output.writeI32(this.s_badChecksum);
    output.writeFieldEnd();
  }
  if (this.s_readCnt) {
    output.writeFieldBegin('s_readCnt', Thrift.Type.I32, 5);
    output.writeI32(this.s_readCnt);
    output.writeFieldEnd();
  }
  if (this.s_writeCnt) {
    output.writeFieldBegin('s_writeCnt', Thrift.Type.I32, 6);
    output.writeI32(this.s_writeCnt);
    output.writeFieldEnd();
  }
  if (this.s_CANCnt) {
    output.writeFieldBegin('s_CANCnt', Thrift.Type.I32, 7);
    output.writeI32(this.s_CANCnt);
    output.writeFieldEnd();
  }
  if (this.s_NAKCnt) {
    output.writeFieldBegin('s_NAKCnt', Thrift.Type.I32, 8);
    output.writeI32(this.s_NAKCnt);
    output.writeFieldEnd();
  }
  if (this.s_ACKCnt) {
    output.writeFieldBegin('s_ACKCnt', Thrift.Type.I32, 9);
    output.writeI32(this.s_ACKCnt);
    output.writeFieldEnd();
  }
  if (this.s_OOFCnt) {
    output.writeFieldBegin('s_OOFCnt', Thrift.Type.I32, 10);
    output.writeI32(this.s_OOFCnt);
    output.writeFieldEnd();
  }
  if (this.s_dropped) {
    output.writeFieldBegin('s_dropped', Thrift.Type.I32, 11);
    output.writeI32(this.s_dropped);
    output.writeFieldEnd();
  }
  if (this.s_retries) {
    output.writeFieldBegin('s_retries', Thrift.Type.I32, 12);
    output.writeI32(this.s_retries);
    output.writeFieldEnd();
  }
  if (this.s_controllerReadCnt) {
    output.writeFieldBegin('s_controllerReadCnt', Thrift.Type.I32, 13);
    output.writeI32(this.s_controllerReadCnt);
    output.writeFieldEnd();
  }
  if (this.s_controllerWriteCnt) {
    output.writeFieldBegin('s_controllerWriteCnt', Thrift.Type.I32, 14);
    output.writeI32(this.s_controllerWriteCnt);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.GetDriverStatisticsReturnStruct = function(args) {
  this._data = null;
  if (args) {
    if (args._data !== undefined) {
      this._data = args._data;
    }
  }
};
OpenZWave.GetDriverStatisticsReturnStruct.prototype = {};
OpenZWave.GetDriverStatisticsReturnStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this._data = new OpenZWave.DriverData();
        this._data.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.GetDriverStatisticsReturnStruct.prototype.write = function(output) {
  output.writeStructBegin('GetDriverStatisticsReturnStruct');
  if (this._data) {
    output.writeFieldBegin('_data', Thrift.Type.STRUCT, 1);
    this._data.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.CommandClassData = function(args) {
  this.m_commandClassId = null;
  this.m_sentCnt = null;
  this.m_receivedCnt = null;
  if (args) {
    if (args.m_commandClassId !== undefined) {
      this.m_commandClassId = args.m_commandClassId;
    }
    if (args.m_sentCnt !== undefined) {
      this.m_sentCnt = args.m_sentCnt;
    }
    if (args.m_receivedCnt !== undefined) {
      this.m_receivedCnt = args.m_receivedCnt;
    }
  }
};
OpenZWave.CommandClassData.prototype = {};
OpenZWave.CommandClassData.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BYTE) {
        this.m_commandClassId = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.m_sentCnt = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.m_receivedCnt = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.CommandClassData.prototype.write = function(output) {
  output.writeStructBegin('CommandClassData');
  if (this.m_commandClassId) {
    output.writeFieldBegin('m_commandClassId', Thrift.Type.BYTE, 1);
    output.writeByte(this.m_commandClassId);
    output.writeFieldEnd();
  }
  if (this.m_sentCnt) {
    output.writeFieldBegin('m_sentCnt', Thrift.Type.I32, 2);
    output.writeI32(this.m_sentCnt);
    output.writeFieldEnd();
  }
  if (this.m_receivedCnt) {
    output.writeFieldBegin('m_receivedCnt', Thrift.Type.I32, 3);
    output.writeI32(this.m_receivedCnt);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.NodeData = function(args) {
  this.m_sentCnt = null;
  this.m_sentFailed = null;
  this.m_retries = null;
  this.m_receivedCnt = null;
  this.m_receivedDups = null;
  this.m_rtt = null;
  this.m_sentTS = null;
  this.m_receivedTS = null;
  this.m_lastRTT = null;
  this.m_averageRTT = null;
  this.m_quality = null;
  this.m_lastReceivedMessage = null;
  this.m_ccData = null;
  if (args) {
    if (args.m_sentCnt !== undefined) {
      this.m_sentCnt = args.m_sentCnt;
    }
    if (args.m_sentFailed !== undefined) {
      this.m_sentFailed = args.m_sentFailed;
    }
    if (args.m_retries !== undefined) {
      this.m_retries = args.m_retries;
    }
    if (args.m_receivedCnt !== undefined) {
      this.m_receivedCnt = args.m_receivedCnt;
    }
    if (args.m_receivedDups !== undefined) {
      this.m_receivedDups = args.m_receivedDups;
    }
    if (args.m_rtt !== undefined) {
      this.m_rtt = args.m_rtt;
    }
    if (args.m_sentTS !== undefined) {
      this.m_sentTS = args.m_sentTS;
    }
    if (args.m_receivedTS !== undefined) {
      this.m_receivedTS = args.m_receivedTS;
    }
    if (args.m_lastRTT !== undefined) {
      this.m_lastRTT = args.m_lastRTT;
    }
    if (args.m_averageRTT !== undefined) {
      this.m_averageRTT = args.m_averageRTT;
    }
    if (args.m_quality !== undefined) {
      this.m_quality = args.m_quality;
    }
    if (args.m_lastReceivedMessage !== undefined) {
      this.m_lastReceivedMessage = args.m_lastReceivedMessage;
    }
    if (args.m_ccData !== undefined) {
      this.m_ccData = args.m_ccData;
    }
  }
};
OpenZWave.NodeData.prototype = {};
OpenZWave.NodeData.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.m_sentCnt = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.m_sentFailed = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.m_retries = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.m_receivedCnt = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.m_receivedDups = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.m_rtt = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.m_sentTS = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.m_receivedTS = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I32) {
        this.m_lastRTT = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I32) {
        this.m_averageRTT = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.BYTE) {
        this.m_quality = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.m_lastReceivedMessage = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readByte().value;
          this.m_lastReceivedMessage.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.LIST) {
        var _size7 = 0;
        var _rtmp311;
        this.m_ccData = [];
        var _etype10 = 0;
        _rtmp311 = input.readListBegin();
        _etype10 = _rtmp311.etype;
        _size7 = _rtmp311.size;
        for (var _i12 = 0; _i12 < _size7; ++_i12)
        {
          var elem13 = null;
          elem13 = new OpenZWave.CommandClassData();
          elem13.read(input);
          this.m_ccData.push(elem13);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.NodeData.prototype.write = function(output) {
  output.writeStructBegin('NodeData');
  if (this.m_sentCnt) {
    output.writeFieldBegin('m_sentCnt', Thrift.Type.I32, 1);
    output.writeI32(this.m_sentCnt);
    output.writeFieldEnd();
  }
  if (this.m_sentFailed) {
    output.writeFieldBegin('m_sentFailed', Thrift.Type.I32, 2);
    output.writeI32(this.m_sentFailed);
    output.writeFieldEnd();
  }
  if (this.m_retries) {
    output.writeFieldBegin('m_retries', Thrift.Type.I32, 3);
    output.writeI32(this.m_retries);
    output.writeFieldEnd();
  }
  if (this.m_receivedCnt) {
    output.writeFieldBegin('m_receivedCnt', Thrift.Type.I32, 4);
    output.writeI32(this.m_receivedCnt);
    output.writeFieldEnd();
  }
  if (this.m_receivedDups) {
    output.writeFieldBegin('m_receivedDups', Thrift.Type.I32, 5);
    output.writeI32(this.m_receivedDups);
    output.writeFieldEnd();
  }
  if (this.m_rtt) {
    output.writeFieldBegin('m_rtt', Thrift.Type.I32, 6);
    output.writeI32(this.m_rtt);
    output.writeFieldEnd();
  }
  if (this.m_sentTS) {
    output.writeFieldBegin('m_sentTS', Thrift.Type.STRING, 7);
    output.writeString(this.m_sentTS);
    output.writeFieldEnd();
  }
  if (this.m_receivedTS) {
    output.writeFieldBegin('m_receivedTS', Thrift.Type.STRING, 8);
    output.writeString(this.m_receivedTS);
    output.writeFieldEnd();
  }
  if (this.m_lastRTT) {
    output.writeFieldBegin('m_lastRTT', Thrift.Type.I32, 9);
    output.writeI32(this.m_lastRTT);
    output.writeFieldEnd();
  }
  if (this.m_averageRTT) {
    output.writeFieldBegin('m_averageRTT', Thrift.Type.I32, 10);
    output.writeI32(this.m_averageRTT);
    output.writeFieldEnd();
  }
  if (this.m_quality) {
    output.writeFieldBegin('m_quality', Thrift.Type.BYTE, 11);
    output.writeByte(this.m_quality);
    output.writeFieldEnd();
  }
  if (this.m_lastReceivedMessage) {
    output.writeFieldBegin('m_lastReceivedMessage', Thrift.Type.LIST, 12);
    output.writeListBegin(Thrift.Type.BYTE, this.m_lastReceivedMessage.length);
    for (var iter14 in this.m_lastReceivedMessage)
    {
      if (this.m_lastReceivedMessage.hasOwnProperty(iter14))
      {
        iter14 = this.m_lastReceivedMessage[iter14];
        output.writeByte(iter14);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.m_ccData) {
    output.writeFieldBegin('m_ccData', Thrift.Type.LIST, 13);
    output.writeListBegin(Thrift.Type.STRUCT, this.m_ccData.length);
    for (var iter15 in this.m_ccData)
    {
      if (this.m_ccData.hasOwnProperty(iter15))
      {
        iter15 = this.m_ccData[iter15];
        iter15.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.GetNodeStatisticsReturnStruct = function(args) {
  this._data = null;
  if (args) {
    if (args._data !== undefined) {
      this._data = args._data;
    }
  }
};
OpenZWave.GetNodeStatisticsReturnStruct.prototype = {};
OpenZWave.GetNodeStatisticsReturnStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this._data = new OpenZWave.NodeData();
        this._data.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.GetNodeStatisticsReturnStruct.prototype.write = function(output) {
  output.writeStructBegin('GetNodeStatisticsReturnStruct');
  if (this._data) {
    output.writeFieldBegin('_data', Thrift.Type.STRUCT, 1);
    this._data.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.GetSwitchPointReturnStruct = function(args) {
  this.retval = null;
  this.o_hours = null;
  this.o_minutes = null;
  this.o_setback = null;
  if (args) {
    if (args.retval !== undefined) {
      this.retval = args.retval;
    }
    if (args.o_hours !== undefined) {
      this.o_hours = args.o_hours;
    }
    if (args.o_minutes !== undefined) {
      this.o_minutes = args.o_minutes;
    }
    if (args.o_setback !== undefined) {
      this.o_setback = args.o_setback;
    }
  }
};
OpenZWave.GetSwitchPointReturnStruct.prototype = {};
OpenZWave.GetSwitchPointReturnStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.retval = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BYTE) {
        this.o_hours = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BYTE) {
        this.o_minutes = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BYTE) {
        this.o_setback = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.GetSwitchPointReturnStruct.prototype.write = function(output) {
  output.writeStructBegin('GetSwitchPointReturnStruct');
  if (this.retval) {
    output.writeFieldBegin('retval', Thrift.Type.BOOL, 1);
    output.writeBool(this.retval);
    output.writeFieldEnd();
  }
  if (this.o_hours) {
    output.writeFieldBegin('o_hours', Thrift.Type.BYTE, 2);
    output.writeByte(this.o_hours);
    output.writeFieldEnd();
  }
  if (this.o_minutes) {
    output.writeFieldBegin('o_minutes', Thrift.Type.BYTE, 3);
    output.writeByte(this.o_minutes);
    output.writeFieldEnd();
  }
  if (this.o_setback) {
    output.writeFieldBegin('o_setback', Thrift.Type.BYTE, 4);
    output.writeByte(this.o_setback);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.Bool_Bool = function(args) {
  this.retval = null;
  this.o_value = null;
  if (args) {
    if (args.retval !== undefined) {
      this.retval = args.retval;
    }
    if (args.o_value !== undefined) {
      this.o_value = args.o_value;
    }
  }
};
OpenZWave.Bool_Bool.prototype = {};
OpenZWave.Bool_Bool.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.retval = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.o_value = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.Bool_Bool.prototype.write = function(output) {
  output.writeStructBegin('Bool_Bool');
  if (this.retval) {
    output.writeFieldBegin('retval', Thrift.Type.BOOL, 1);
    output.writeBool(this.retval);
    output.writeFieldEnd();
  }
  if (this.o_value) {
    output.writeFieldBegin('o_value', Thrift.Type.BOOL, 2);
    output.writeBool(this.o_value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.Bool_UInt8 = function(args) {
  this.retval = null;
  this.o_value = null;
  if (args) {
    if (args.retval !== undefined) {
      this.retval = args.retval;
    }
    if (args.o_value !== undefined) {
      this.o_value = args.o_value;
    }
  }
};
OpenZWave.Bool_UInt8.prototype = {};
OpenZWave.Bool_UInt8.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.retval = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BYTE) {
        this.o_value = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.Bool_UInt8.prototype.write = function(output) {
  output.writeStructBegin('Bool_UInt8');
  if (this.retval) {
    output.writeFieldBegin('retval', Thrift.Type.BOOL, 1);
    output.writeBool(this.retval);
    output.writeFieldEnd();
  }
  if (this.o_value) {
    output.writeFieldBegin('o_value', Thrift.Type.BYTE, 2);
    output.writeByte(this.o_value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.Bool_Float = function(args) {
  this.retval = null;
  this.o_value = null;
  if (args) {
    if (args.retval !== undefined) {
      this.retval = args.retval;
    }
    if (args.o_value !== undefined) {
      this.o_value = args.o_value;
    }
  }
};
OpenZWave.Bool_Float.prototype = {};
OpenZWave.Bool_Float.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.retval = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.o_value = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.Bool_Float.prototype.write = function(output) {
  output.writeStructBegin('Bool_Float');
  if (this.retval) {
    output.writeFieldBegin('retval', Thrift.Type.BOOL, 1);
    output.writeBool(this.retval);
    output.writeFieldEnd();
  }
  if (this.o_value) {
    output.writeFieldBegin('o_value', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.o_value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.Bool_Int = function(args) {
  this.retval = null;
  this.o_value = null;
  if (args) {
    if (args.retval !== undefined) {
      this.retval = args.retval;
    }
    if (args.o_value !== undefined) {
      this.o_value = args.o_value;
    }
  }
};
OpenZWave.Bool_Int.prototype = {};
OpenZWave.Bool_Int.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.retval = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.o_value = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.Bool_Int.prototype.write = function(output) {
  output.writeStructBegin('Bool_Int');
  if (this.retval) {
    output.writeFieldBegin('retval', Thrift.Type.BOOL, 1);
    output.writeBool(this.retval);
    output.writeFieldEnd();
  }
  if (this.o_value) {
    output.writeFieldBegin('o_value', Thrift.Type.I32, 2);
    output.writeI32(this.o_value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.Bool_Int16 = function(args) {
  this.retval = null;
  this.o_value = null;
  if (args) {
    if (args.retval !== undefined) {
      this.retval = args.retval;
    }
    if (args.o_value !== undefined) {
      this.o_value = args.o_value;
    }
  }
};
OpenZWave.Bool_Int16.prototype = {};
OpenZWave.Bool_Int16.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.retval = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I16) {
        this.o_value = input.readI16().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.Bool_Int16.prototype.write = function(output) {
  output.writeStructBegin('Bool_Int16');
  if (this.retval) {
    output.writeFieldBegin('retval', Thrift.Type.BOOL, 1);
    output.writeBool(this.retval);
    output.writeFieldEnd();
  }
  if (this.o_value) {
    output.writeFieldBegin('o_value', Thrift.Type.I16, 2);
    output.writeI16(this.o_value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.Bool_String = function(args) {
  this.retval = null;
  this.o_value = null;
  if (args) {
    if (args.retval !== undefined) {
      this.retval = args.retval;
    }
    if (args.o_value !== undefined) {
      this.o_value = args.o_value;
    }
  }
};
OpenZWave.Bool_String.prototype = {};
OpenZWave.Bool_String.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.retval = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.o_value = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.Bool_String.prototype.write = function(output) {
  output.writeStructBegin('Bool_String');
  if (this.retval) {
    output.writeFieldBegin('retval', Thrift.Type.BOOL, 1);
    output.writeBool(this.retval);
    output.writeFieldEnd();
  }
  if (this.o_value) {
    output.writeFieldBegin('o_value', Thrift.Type.STRING, 2);
    output.writeString(this.o_value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.Bool_ListString = function(args) {
  this.retval = null;
  this.o_value = null;
  if (args) {
    if (args.retval !== undefined) {
      this.retval = args.retval;
    }
    if (args.o_value !== undefined) {
      this.o_value = args.o_value;
    }
  }
};
OpenZWave.Bool_ListString.prototype = {};
OpenZWave.Bool_ListString.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.retval = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size16 = 0;
        var _rtmp320;
        this.o_value = [];
        var _etype19 = 0;
        _rtmp320 = input.readListBegin();
        _etype19 = _rtmp320.etype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var elem22 = null;
          elem22 = input.readString().value;
          this.o_value.push(elem22);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.Bool_ListString.prototype.write = function(output) {
  output.writeStructBegin('Bool_ListString');
  if (this.retval) {
    output.writeFieldBegin('retval', Thrift.Type.BOOL, 1);
    output.writeBool(this.retval);
    output.writeFieldEnd();
  }
  if (this.o_value) {
    output.writeFieldBegin('o_value', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.o_value.length);
    for (var iter23 in this.o_value)
    {
      if (this.o_value.hasOwnProperty(iter23))
      {
        iter23 = this.o_value[iter23];
        output.writeString(iter23);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.ListUInt8_Byte = function(args) {
  this._value = null;
  this._length = null;
  if (args) {
    if (args._value !== undefined) {
      this._value = args._value;
    }
    if (args._length !== undefined) {
      this._length = args._length;
    }
  }
};
OpenZWave.ListUInt8_Byte.prototype = {};
OpenZWave.ListUInt8_Byte.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size24 = 0;
        var _rtmp328;
        this._value = [];
        var _etype27 = 0;
        _rtmp328 = input.readListBegin();
        _etype27 = _rtmp328.etype;
        _size24 = _rtmp328.size;
        for (var _i29 = 0; _i29 < _size24; ++_i29)
        {
          var elem30 = null;
          elem30 = input.readByte().value;
          this._value.push(elem30);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BYTE) {
        this._length = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.ListUInt8_Byte.prototype.write = function(output) {
  output.writeStructBegin('ListUInt8_Byte');
  if (this._value) {
    output.writeFieldBegin('_value', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.BYTE, this._value.length);
    for (var iter31 in this._value)
    {
      if (this._value.hasOwnProperty(iter31))
      {
        iter31 = this._value[iter31];
        output.writeByte(iter31);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this._length) {
    output.writeFieldBegin('_length', Thrift.Type.BYTE, 2);
    output.writeByte(this._length);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.UInt32_ListByte = function(args) {
  this.retval = null;
  this._nodeNeighbors = null;
  if (args) {
    if (args.retval !== undefined) {
      this.retval = args.retval;
    }
    if (args._nodeNeighbors !== undefined) {
      this._nodeNeighbors = args._nodeNeighbors;
    }
  }
};
OpenZWave.UInt32_ListByte.prototype = {};
OpenZWave.UInt32_ListByte.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.retval = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size32 = 0;
        var _rtmp336;
        this._nodeNeighbors = [];
        var _etype35 = 0;
        _rtmp336 = input.readListBegin();
        _etype35 = _rtmp336.etype;
        _size32 = _rtmp336.size;
        for (var _i37 = 0; _i37 < _size32; ++_i37)
        {
          var elem38 = null;
          elem38 = input.readByte().value;
          this._nodeNeighbors.push(elem38);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.UInt32_ListByte.prototype.write = function(output) {
  output.writeStructBegin('UInt32_ListByte');
  if (this.retval) {
    output.writeFieldBegin('retval', Thrift.Type.I32, 1);
    output.writeI32(this.retval);
    output.writeFieldEnd();
  }
  if (this._nodeNeighbors) {
    output.writeFieldBegin('_nodeNeighbors', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.BYTE, this._nodeNeighbors.length);
    for (var iter39 in this._nodeNeighbors)
    {
      if (this._nodeNeighbors.hasOwnProperty(iter39))
      {
        iter39 = this._nodeNeighbors[iter39];
        output.writeByte(iter39);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.Bool_GetNodeClassInformation = function(args) {
  this.retval = null;
  this._className = null;
  this._classVersion = null;
  if (args) {
    if (args.retval !== undefined) {
      this.retval = args.retval;
    }
    if (args._className !== undefined) {
      this._className = args._className;
    }
    if (args._classVersion !== undefined) {
      this._classVersion = args._classVersion;
    }
  }
};
OpenZWave.Bool_GetNodeClassInformation.prototype = {};
OpenZWave.Bool_GetNodeClassInformation.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.retval = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this._className = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BYTE) {
        this._classVersion = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.Bool_GetNodeClassInformation.prototype.write = function(output) {
  output.writeStructBegin('Bool_GetNodeClassInformation');
  if (this.retval) {
    output.writeFieldBegin('retval', Thrift.Type.BOOL, 1);
    output.writeBool(this.retval);
    output.writeFieldEnd();
  }
  if (this._className) {
    output.writeFieldBegin('_className', Thrift.Type.STRING, 2);
    output.writeString(this._className);
    output.writeFieldEnd();
  }
  if (this._classVersion) {
    output.writeFieldBegin('_classVersion', Thrift.Type.BYTE, 3);
    output.writeByte(this._classVersion);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.GetAssociationsReturnStruct = function(args) {
  this.retval = null;
  this.o_associations = null;
  if (args) {
    if (args.retval !== undefined) {
      this.retval = args.retval;
    }
    if (args.o_associations !== undefined) {
      this.o_associations = args.o_associations;
    }
  }
};
OpenZWave.GetAssociationsReturnStruct.prototype = {};
OpenZWave.GetAssociationsReturnStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.retval = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size40 = 0;
        var _rtmp344;
        this.o_associations = [];
        var _etype43 = 0;
        _rtmp344 = input.readListBegin();
        _etype43 = _rtmp344.etype;
        _size40 = _rtmp344.size;
        for (var _i45 = 0; _i45 < _size40; ++_i45)
        {
          var elem46 = null;
          elem46 = input.readByte().value;
          this.o_associations.push(elem46);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.GetAssociationsReturnStruct.prototype.write = function(output) {
  output.writeStructBegin('GetAssociationsReturnStruct');
  if (this.retval) {
    output.writeFieldBegin('retval', Thrift.Type.I32, 1);
    output.writeI32(this.retval);
    output.writeFieldEnd();
  }
  if (this.o_associations) {
    output.writeFieldBegin('o_associations', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.BYTE, this.o_associations.length);
    for (var iter47 in this.o_associations)
    {
      if (this.o_associations.hasOwnProperty(iter47))
      {
        iter47 = this.o_associations[iter47];
        output.writeByte(iter47);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.GetAllScenesReturnStruct = function(args) {
  this.retval = null;
  this._sceneIds = null;
  if (args) {
    if (args.retval !== undefined) {
      this.retval = args.retval;
    }
    if (args._sceneIds !== undefined) {
      this._sceneIds = args._sceneIds;
    }
  }
};
OpenZWave.GetAllScenesReturnStruct.prototype = {};
OpenZWave.GetAllScenesReturnStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BYTE) {
        this.retval = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size48 = 0;
        var _rtmp352;
        this._sceneIds = [];
        var _etype51 = 0;
        _rtmp352 = input.readListBegin();
        _etype51 = _rtmp352.etype;
        _size48 = _rtmp352.size;
        for (var _i53 = 0; _i53 < _size48; ++_i53)
        {
          var elem54 = null;
          elem54 = input.readByte().value;
          this._sceneIds.push(elem54);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.GetAllScenesReturnStruct.prototype.write = function(output) {
  output.writeStructBegin('GetAllScenesReturnStruct');
  if (this.retval) {
    output.writeFieldBegin('retval', Thrift.Type.BYTE, 1);
    output.writeByte(this.retval);
    output.writeFieldEnd();
  }
  if (this._sceneIds) {
    output.writeFieldBegin('_sceneIds', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.BYTE, this._sceneIds.length);
    for (var iter55 in this._sceneIds)
    {
      if (this._sceneIds.hasOwnProperty(iter55))
      {
        iter55 = this._sceneIds[iter55];
        output.writeByte(iter55);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.SceneGetValuesReturnStruct = function(args) {
  this.retval = null;
  this.o_value = null;
  if (args) {
    if (args.retval !== undefined) {
      this.retval = args.retval;
    }
    if (args.o_value !== undefined) {
      this.o_value = args.o_value;
    }
  }
};
OpenZWave.SceneGetValuesReturnStruct.prototype = {};
OpenZWave.SceneGetValuesReturnStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.retval = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size56 = 0;
        var _rtmp360;
        this.o_value = [];
        var _etype59 = 0;
        _rtmp360 = input.readListBegin();
        _etype59 = _rtmp360.etype;
        _size56 = _rtmp360.size;
        for (var _i61 = 0; _i61 < _size56; ++_i61)
        {
          var elem62 = null;
          elem62 = new OpenZWave.RemoteValueID();
          elem62.read(input);
          this.o_value.push(elem62);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.SceneGetValuesReturnStruct.prototype.write = function(output) {
  output.writeStructBegin('SceneGetValuesReturnStruct');
  if (this.retval) {
    output.writeFieldBegin('retval', Thrift.Type.I32, 1);
    output.writeI32(this.retval);
    output.writeFieldEnd();
  }
  if (this.o_value) {
    output.writeFieldBegin('o_value', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.o_value.length);
    for (var iter63 in this.o_value)
    {
      if (this.o_value.hasOwnProperty(iter63))
      {
        iter63 = this.o_value[iter63];
        iter63.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

