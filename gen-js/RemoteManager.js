//
// Autogenerated by Thrift Compiler (0.7.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

OpenZWave.RemoteManager_WriteConfig_args = function(args) {
  this._homeId = null;
  if (args) {
    if (args._homeId !== undefined) {
      this._homeId = args._homeId;
    }
  }
};
OpenZWave.RemoteManager_WriteConfig_args.prototype = {};
OpenZWave.RemoteManager_WriteConfig_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this._homeId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_WriteConfig_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_WriteConfig_args');
  if (this._homeId) {
    output.writeFieldBegin('_homeId', Thrift.Type.I32, 1);
    output.writeI32(this._homeId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_WriteConfig_result = function(args) {
};
OpenZWave.RemoteManager_WriteConfig_result.prototype = {};
OpenZWave.RemoteManager_WriteConfig_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_WriteConfig_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_WriteConfig_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_GetControllerNodeId_args = function(args) {
  this._homeId = null;
  if (args) {
    if (args._homeId !== undefined) {
      this._homeId = args._homeId;
    }
  }
};
OpenZWave.RemoteManager_GetControllerNodeId_args.prototype = {};
OpenZWave.RemoteManager_GetControllerNodeId_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this._homeId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_GetControllerNodeId_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_GetControllerNodeId_args');
  if (this._homeId) {
    output.writeFieldBegin('_homeId', Thrift.Type.I32, 1);
    output.writeI32(this._homeId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_GetControllerNodeId_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
OpenZWave.RemoteManager_GetControllerNodeId_result.prototype = {};
OpenZWave.RemoteManager_GetControllerNodeId_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BYTE) {
        this.success = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_GetControllerNodeId_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_GetControllerNodeId_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.BYTE, 0);
    output.writeByte(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_IsPrimaryController_args = function(args) {
  this._homeId = null;
  if (args) {
    if (args._homeId !== undefined) {
      this._homeId = args._homeId;
    }
  }
};
OpenZWave.RemoteManager_IsPrimaryController_args.prototype = {};
OpenZWave.RemoteManager_IsPrimaryController_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this._homeId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_IsPrimaryController_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_IsPrimaryController_args');
  if (this._homeId) {
    output.writeFieldBegin('_homeId', Thrift.Type.I32, 1);
    output.writeI32(this._homeId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_IsPrimaryController_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
OpenZWave.RemoteManager_IsPrimaryController_result.prototype = {};
OpenZWave.RemoteManager_IsPrimaryController_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_IsPrimaryController_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_IsPrimaryController_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_IsStaticUpdateController_args = function(args) {
  this._homeId = null;
  if (args) {
    if (args._homeId !== undefined) {
      this._homeId = args._homeId;
    }
  }
};
OpenZWave.RemoteManager_IsStaticUpdateController_args.prototype = {};
OpenZWave.RemoteManager_IsStaticUpdateController_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this._homeId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_IsStaticUpdateController_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_IsStaticUpdateController_args');
  if (this._homeId) {
    output.writeFieldBegin('_homeId', Thrift.Type.I32, 1);
    output.writeI32(this._homeId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_IsStaticUpdateController_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
OpenZWave.RemoteManager_IsStaticUpdateController_result.prototype = {};
OpenZWave.RemoteManager_IsStaticUpdateController_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_IsStaticUpdateController_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_IsStaticUpdateController_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_IsBridgeController_args = function(args) {
  this._homeId = null;
  if (args) {
    if (args._homeId !== undefined) {
      this._homeId = args._homeId;
    }
  }
};
OpenZWave.RemoteManager_IsBridgeController_args.prototype = {};
OpenZWave.RemoteManager_IsBridgeController_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this._homeId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_IsBridgeController_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_IsBridgeController_args');
  if (this._homeId) {
    output.writeFieldBegin('_homeId', Thrift.Type.I32, 1);
    output.writeI32(this._homeId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_IsBridgeController_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
OpenZWave.RemoteManager_IsBridgeController_result.prototype = {};
OpenZWave.RemoteManager_IsBridgeController_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_IsBridgeController_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_IsBridgeController_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_GetLibraryVersion_args = function(args) {
  this._homeId = null;
  if (args) {
    if (args._homeId !== undefined) {
      this._homeId = args._homeId;
    }
  }
};
OpenZWave.RemoteManager_GetLibraryVersion_args.prototype = {};
OpenZWave.RemoteManager_GetLibraryVersion_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this._homeId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_GetLibraryVersion_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_GetLibraryVersion_args');
  if (this._homeId) {
    output.writeFieldBegin('_homeId', Thrift.Type.I32, 1);
    output.writeI32(this._homeId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_GetLibraryVersion_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
OpenZWave.RemoteManager_GetLibraryVersion_result.prototype = {};
OpenZWave.RemoteManager_GetLibraryVersion_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_GetLibraryVersion_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_GetLibraryVersion_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_GetLibraryTypeName_args = function(args) {
  this._homeId = null;
  if (args) {
    if (args._homeId !== undefined) {
      this._homeId = args._homeId;
    }
  }
};
OpenZWave.RemoteManager_GetLibraryTypeName_args.prototype = {};
OpenZWave.RemoteManager_GetLibraryTypeName_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this._homeId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_GetLibraryTypeName_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_GetLibraryTypeName_args');
  if (this._homeId) {
    output.writeFieldBegin('_homeId', Thrift.Type.I32, 1);
    output.writeI32(this._homeId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_GetLibraryTypeName_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
OpenZWave.RemoteManager_GetLibraryTypeName_result.prototype = {};
OpenZWave.RemoteManager_GetLibraryTypeName_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_GetLibraryTypeName_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_GetLibraryTypeName_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_GetSendQueueCount_args = function(args) {
  this._homeId = null;
  if (args) {
    if (args._homeId !== undefined) {
      this._homeId = args._homeId;
    }
  }
};
OpenZWave.RemoteManager_GetSendQueueCount_args.prototype = {};
OpenZWave.RemoteManager_GetSendQueueCount_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this._homeId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_GetSendQueueCount_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_GetSendQueueCount_args');
  if (this._homeId) {
    output.writeFieldBegin('_homeId', Thrift.Type.I32, 1);
    output.writeI32(this._homeId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_GetSendQueueCount_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
OpenZWave.RemoteManager_GetSendQueueCount_result.prototype = {};
OpenZWave.RemoteManager_GetSendQueueCount_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_GetSendQueueCount_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_GetSendQueueCount_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_GetPollInterval_args = function(args) {
};
OpenZWave.RemoteManager_GetPollInterval_args.prototype = {};
OpenZWave.RemoteManager_GetPollInterval_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_GetPollInterval_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_GetPollInterval_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_GetPollInterval_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
OpenZWave.RemoteManager_GetPollInterval_result.prototype = {};
OpenZWave.RemoteManager_GetPollInterval_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_GetPollInterval_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_GetPollInterval_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_SetPollInterval_args = function(args) {
  this._seconds = null;
  if (args) {
    if (args._seconds !== undefined) {
      this._seconds = args._seconds;
    }
  }
};
OpenZWave.RemoteManager_SetPollInterval_args.prototype = {};
OpenZWave.RemoteManager_SetPollInterval_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this._seconds = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_SetPollInterval_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_SetPollInterval_args');
  if (this._seconds) {
    output.writeFieldBegin('_seconds', Thrift.Type.I32, 1);
    output.writeI32(this._seconds);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_SetPollInterval_result = function(args) {
};
OpenZWave.RemoteManager_SetPollInterval_result.prototype = {};
OpenZWave.RemoteManager_SetPollInterval_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_SetPollInterval_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_SetPollInterval_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_EnablePoll_args = function(args) {
  this._valueId = null;
  if (args) {
    if (args._valueId !== undefined) {
      this._valueId = args._valueId;
    }
  }
};
OpenZWave.RemoteManager_EnablePoll_args.prototype = {};
OpenZWave.RemoteManager_EnablePoll_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this._valueId = new OpenZWave.RemoteValueID();
        this._valueId.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_EnablePoll_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_EnablePoll_args');
  if (this._valueId) {
    output.writeFieldBegin('_valueId', Thrift.Type.STRUCT, 1);
    this._valueId.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_EnablePoll_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
OpenZWave.RemoteManager_EnablePoll_result.prototype = {};
OpenZWave.RemoteManager_EnablePoll_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_EnablePoll_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_EnablePoll_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_DisablePoll_args = function(args) {
  this._valueId = null;
  if (args) {
    if (args._valueId !== undefined) {
      this._valueId = args._valueId;
    }
  }
};
OpenZWave.RemoteManager_DisablePoll_args.prototype = {};
OpenZWave.RemoteManager_DisablePoll_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this._valueId = new OpenZWave.RemoteValueID();
        this._valueId.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_DisablePoll_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_DisablePoll_args');
  if (this._valueId) {
    output.writeFieldBegin('_valueId', Thrift.Type.STRUCT, 1);
    this._valueId.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_DisablePoll_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
OpenZWave.RemoteManager_DisablePoll_result.prototype = {};
OpenZWave.RemoteManager_DisablePoll_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_DisablePoll_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_DisablePoll_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_isPolled_args = function(args) {
  this._valueId = null;
  if (args) {
    if (args._valueId !== undefined) {
      this._valueId = args._valueId;
    }
  }
};
OpenZWave.RemoteManager_isPolled_args.prototype = {};
OpenZWave.RemoteManager_isPolled_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this._valueId = new OpenZWave.RemoteValueID();
        this._valueId.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_isPolled_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_isPolled_args');
  if (this._valueId) {
    output.writeFieldBegin('_valueId', Thrift.Type.STRUCT, 1);
    this._valueId.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_isPolled_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
OpenZWave.RemoteManager_isPolled_result.prototype = {};
OpenZWave.RemoteManager_isPolled_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_isPolled_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_isPolled_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_RefreshNodeInfo_args = function(args) {
  this._homeId = null;
  this._nodeId = null;
  if (args) {
    if (args._homeId !== undefined) {
      this._homeId = args._homeId;
    }
    if (args._nodeId !== undefined) {
      this._nodeId = args._nodeId;
    }
  }
};
OpenZWave.RemoteManager_RefreshNodeInfo_args.prototype = {};
OpenZWave.RemoteManager_RefreshNodeInfo_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this._homeId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BYTE) {
        this._nodeId = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_RefreshNodeInfo_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_RefreshNodeInfo_args');
  if (this._homeId) {
    output.writeFieldBegin('_homeId', Thrift.Type.I32, 1);
    output.writeI32(this._homeId);
    output.writeFieldEnd();
  }
  if (this._nodeId) {
    output.writeFieldBegin('_nodeId', Thrift.Type.BYTE, 2);
    output.writeByte(this._nodeId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_RefreshNodeInfo_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
OpenZWave.RemoteManager_RefreshNodeInfo_result.prototype = {};
OpenZWave.RemoteManager_RefreshNodeInfo_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_RefreshNodeInfo_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_RefreshNodeInfo_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_RequestNodeState_args = function(args) {
  this._homeId = null;
  this._nodeId = null;
  if (args) {
    if (args._homeId !== undefined) {
      this._homeId = args._homeId;
    }
    if (args._nodeId !== undefined) {
      this._nodeId = args._nodeId;
    }
  }
};
OpenZWave.RemoteManager_RequestNodeState_args.prototype = {};
OpenZWave.RemoteManager_RequestNodeState_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this._homeId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BYTE) {
        this._nodeId = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_RequestNodeState_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_RequestNodeState_args');
  if (this._homeId) {
    output.writeFieldBegin('_homeId', Thrift.Type.I32, 1);
    output.writeI32(this._homeId);
    output.writeFieldEnd();
  }
  if (this._nodeId) {
    output.writeFieldBegin('_nodeId', Thrift.Type.BYTE, 2);
    output.writeByte(this._nodeId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_RequestNodeState_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
OpenZWave.RemoteManager_RequestNodeState_result.prototype = {};
OpenZWave.RemoteManager_RequestNodeState_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_RequestNodeState_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_RequestNodeState_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_RequestNodeDynamic_args = function(args) {
  this._homeId = null;
  this._nodeId = null;
  if (args) {
    if (args._homeId !== undefined) {
      this._homeId = args._homeId;
    }
    if (args._nodeId !== undefined) {
      this._nodeId = args._nodeId;
    }
  }
};
OpenZWave.RemoteManager_RequestNodeDynamic_args.prototype = {};
OpenZWave.RemoteManager_RequestNodeDynamic_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this._homeId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BYTE) {
        this._nodeId = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_RequestNodeDynamic_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_RequestNodeDynamic_args');
  if (this._homeId) {
    output.writeFieldBegin('_homeId', Thrift.Type.I32, 1);
    output.writeI32(this._homeId);
    output.writeFieldEnd();
  }
  if (this._nodeId) {
    output.writeFieldBegin('_nodeId', Thrift.Type.BYTE, 2);
    output.writeByte(this._nodeId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_RequestNodeDynamic_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
OpenZWave.RemoteManager_RequestNodeDynamic_result.prototype = {};
OpenZWave.RemoteManager_RequestNodeDynamic_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_RequestNodeDynamic_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_RequestNodeDynamic_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_IsNodeListeningDevice_args = function(args) {
  this._homeId = null;
  this._nodeId = null;
  if (args) {
    if (args._homeId !== undefined) {
      this._homeId = args._homeId;
    }
    if (args._nodeId !== undefined) {
      this._nodeId = args._nodeId;
    }
  }
};
OpenZWave.RemoteManager_IsNodeListeningDevice_args.prototype = {};
OpenZWave.RemoteManager_IsNodeListeningDevice_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this._homeId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BYTE) {
        this._nodeId = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_IsNodeListeningDevice_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_IsNodeListeningDevice_args');
  if (this._homeId) {
    output.writeFieldBegin('_homeId', Thrift.Type.I32, 1);
    output.writeI32(this._homeId);
    output.writeFieldEnd();
  }
  if (this._nodeId) {
    output.writeFieldBegin('_nodeId', Thrift.Type.BYTE, 2);
    output.writeByte(this._nodeId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_IsNodeListeningDevice_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
OpenZWave.RemoteManager_IsNodeListeningDevice_result.prototype = {};
OpenZWave.RemoteManager_IsNodeListeningDevice_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_IsNodeListeningDevice_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_IsNodeListeningDevice_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_IsNodeFrequentListeningDevice_args = function(args) {
  this._homeId = null;
  this._nodeId = null;
  if (args) {
    if (args._homeId !== undefined) {
      this._homeId = args._homeId;
    }
    if (args._nodeId !== undefined) {
      this._nodeId = args._nodeId;
    }
  }
};
OpenZWave.RemoteManager_IsNodeFrequentListeningDevice_args.prototype = {};
OpenZWave.RemoteManager_IsNodeFrequentListeningDevice_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this._homeId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BYTE) {
        this._nodeId = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_IsNodeFrequentListeningDevice_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_IsNodeFrequentListeningDevice_args');
  if (this._homeId) {
    output.writeFieldBegin('_homeId', Thrift.Type.I32, 1);
    output.writeI32(this._homeId);
    output.writeFieldEnd();
  }
  if (this._nodeId) {
    output.writeFieldBegin('_nodeId', Thrift.Type.BYTE, 2);
    output.writeByte(this._nodeId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_IsNodeFrequentListeningDevice_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
OpenZWave.RemoteManager_IsNodeFrequentListeningDevice_result.prototype = {};
OpenZWave.RemoteManager_IsNodeFrequentListeningDevice_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_IsNodeFrequentListeningDevice_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_IsNodeFrequentListeningDevice_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_IsNodeBeamingDevice_args = function(args) {
  this._homeId = null;
  this._nodeId = null;
  if (args) {
    if (args._homeId !== undefined) {
      this._homeId = args._homeId;
    }
    if (args._nodeId !== undefined) {
      this._nodeId = args._nodeId;
    }
  }
};
OpenZWave.RemoteManager_IsNodeBeamingDevice_args.prototype = {};
OpenZWave.RemoteManager_IsNodeBeamingDevice_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this._homeId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BYTE) {
        this._nodeId = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_IsNodeBeamingDevice_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_IsNodeBeamingDevice_args');
  if (this._homeId) {
    output.writeFieldBegin('_homeId', Thrift.Type.I32, 1);
    output.writeI32(this._homeId);
    output.writeFieldEnd();
  }
  if (this._nodeId) {
    output.writeFieldBegin('_nodeId', Thrift.Type.BYTE, 2);
    output.writeByte(this._nodeId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_IsNodeBeamingDevice_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
OpenZWave.RemoteManager_IsNodeBeamingDevice_result.prototype = {};
OpenZWave.RemoteManager_IsNodeBeamingDevice_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_IsNodeBeamingDevice_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_IsNodeBeamingDevice_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_IsNodeRoutingDevice_args = function(args) {
  this._homeId = null;
  this._nodeId = null;
  if (args) {
    if (args._homeId !== undefined) {
      this._homeId = args._homeId;
    }
    if (args._nodeId !== undefined) {
      this._nodeId = args._nodeId;
    }
  }
};
OpenZWave.RemoteManager_IsNodeRoutingDevice_args.prototype = {};
OpenZWave.RemoteManager_IsNodeRoutingDevice_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this._homeId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BYTE) {
        this._nodeId = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_IsNodeRoutingDevice_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_IsNodeRoutingDevice_args');
  if (this._homeId) {
    output.writeFieldBegin('_homeId', Thrift.Type.I32, 1);
    output.writeI32(this._homeId);
    output.writeFieldEnd();
  }
  if (this._nodeId) {
    output.writeFieldBegin('_nodeId', Thrift.Type.BYTE, 2);
    output.writeByte(this._nodeId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_IsNodeRoutingDevice_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
OpenZWave.RemoteManager_IsNodeRoutingDevice_result.prototype = {};
OpenZWave.RemoteManager_IsNodeRoutingDevice_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_IsNodeRoutingDevice_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_IsNodeRoutingDevice_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_IsNodeSecurityDevice_args = function(args) {
  this._homeId = null;
  this._nodeId = null;
  if (args) {
    if (args._homeId !== undefined) {
      this._homeId = args._homeId;
    }
    if (args._nodeId !== undefined) {
      this._nodeId = args._nodeId;
    }
  }
};
OpenZWave.RemoteManager_IsNodeSecurityDevice_args.prototype = {};
OpenZWave.RemoteManager_IsNodeSecurityDevice_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this._homeId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BYTE) {
        this._nodeId = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_IsNodeSecurityDevice_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_IsNodeSecurityDevice_args');
  if (this._homeId) {
    output.writeFieldBegin('_homeId', Thrift.Type.I32, 1);
    output.writeI32(this._homeId);
    output.writeFieldEnd();
  }
  if (this._nodeId) {
    output.writeFieldBegin('_nodeId', Thrift.Type.BYTE, 2);
    output.writeByte(this._nodeId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_IsNodeSecurityDevice_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
OpenZWave.RemoteManager_IsNodeSecurityDevice_result.prototype = {};
OpenZWave.RemoteManager_IsNodeSecurityDevice_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_IsNodeSecurityDevice_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_IsNodeSecurityDevice_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_GetNodeMaxBaudRate_args = function(args) {
  this._homeId = null;
  this._nodeId = null;
  if (args) {
    if (args._homeId !== undefined) {
      this._homeId = args._homeId;
    }
    if (args._nodeId !== undefined) {
      this._nodeId = args._nodeId;
    }
  }
};
OpenZWave.RemoteManager_GetNodeMaxBaudRate_args.prototype = {};
OpenZWave.RemoteManager_GetNodeMaxBaudRate_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this._homeId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BYTE) {
        this._nodeId = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_GetNodeMaxBaudRate_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_GetNodeMaxBaudRate_args');
  if (this._homeId) {
    output.writeFieldBegin('_homeId', Thrift.Type.I32, 1);
    output.writeI32(this._homeId);
    output.writeFieldEnd();
  }
  if (this._nodeId) {
    output.writeFieldBegin('_nodeId', Thrift.Type.BYTE, 2);
    output.writeByte(this._nodeId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_GetNodeMaxBaudRate_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
OpenZWave.RemoteManager_GetNodeMaxBaudRate_result.prototype = {};
OpenZWave.RemoteManager_GetNodeMaxBaudRate_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_GetNodeMaxBaudRate_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_GetNodeMaxBaudRate_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_GetNodeVersion_args = function(args) {
  this._homeId = null;
  this._nodeId = null;
  if (args) {
    if (args._homeId !== undefined) {
      this._homeId = args._homeId;
    }
    if (args._nodeId !== undefined) {
      this._nodeId = args._nodeId;
    }
  }
};
OpenZWave.RemoteManager_GetNodeVersion_args.prototype = {};
OpenZWave.RemoteManager_GetNodeVersion_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this._homeId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BYTE) {
        this._nodeId = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_GetNodeVersion_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_GetNodeVersion_args');
  if (this._homeId) {
    output.writeFieldBegin('_homeId', Thrift.Type.I32, 1);
    output.writeI32(this._homeId);
    output.writeFieldEnd();
  }
  if (this._nodeId) {
    output.writeFieldBegin('_nodeId', Thrift.Type.BYTE, 2);
    output.writeByte(this._nodeId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_GetNodeVersion_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
OpenZWave.RemoteManager_GetNodeVersion_result.prototype = {};
OpenZWave.RemoteManager_GetNodeVersion_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BYTE) {
        this.success = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_GetNodeVersion_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_GetNodeVersion_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.BYTE, 0);
    output.writeByte(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_GetNodeBasic_args = function(args) {
  this._homeId = null;
  this._nodeId = null;
  if (args) {
    if (args._homeId !== undefined) {
      this._homeId = args._homeId;
    }
    if (args._nodeId !== undefined) {
      this._nodeId = args._nodeId;
    }
  }
};
OpenZWave.RemoteManager_GetNodeBasic_args.prototype = {};
OpenZWave.RemoteManager_GetNodeBasic_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this._homeId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BYTE) {
        this._nodeId = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_GetNodeBasic_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_GetNodeBasic_args');
  if (this._homeId) {
    output.writeFieldBegin('_homeId', Thrift.Type.I32, 1);
    output.writeI32(this._homeId);
    output.writeFieldEnd();
  }
  if (this._nodeId) {
    output.writeFieldBegin('_nodeId', Thrift.Type.BYTE, 2);
    output.writeByte(this._nodeId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_GetNodeBasic_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
OpenZWave.RemoteManager_GetNodeBasic_result.prototype = {};
OpenZWave.RemoteManager_GetNodeBasic_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BYTE) {
        this.success = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_GetNodeBasic_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_GetNodeBasic_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.BYTE, 0);
    output.writeByte(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_GetNodeGeneric_args = function(args) {
  this._homeId = null;
  this._nodeId = null;
  if (args) {
    if (args._homeId !== undefined) {
      this._homeId = args._homeId;
    }
    if (args._nodeId !== undefined) {
      this._nodeId = args._nodeId;
    }
  }
};
OpenZWave.RemoteManager_GetNodeGeneric_args.prototype = {};
OpenZWave.RemoteManager_GetNodeGeneric_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this._homeId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BYTE) {
        this._nodeId = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_GetNodeGeneric_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_GetNodeGeneric_args');
  if (this._homeId) {
    output.writeFieldBegin('_homeId', Thrift.Type.I32, 1);
    output.writeI32(this._homeId);
    output.writeFieldEnd();
  }
  if (this._nodeId) {
    output.writeFieldBegin('_nodeId', Thrift.Type.BYTE, 2);
    output.writeByte(this._nodeId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_GetNodeGeneric_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
OpenZWave.RemoteManager_GetNodeGeneric_result.prototype = {};
OpenZWave.RemoteManager_GetNodeGeneric_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BYTE) {
        this.success = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_GetNodeGeneric_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_GetNodeGeneric_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.BYTE, 0);
    output.writeByte(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_GetNodeSpecific_args = function(args) {
  this._homeId = null;
  this._nodeId = null;
  if (args) {
    if (args._homeId !== undefined) {
      this._homeId = args._homeId;
    }
    if (args._nodeId !== undefined) {
      this._nodeId = args._nodeId;
    }
  }
};
OpenZWave.RemoteManager_GetNodeSpecific_args.prototype = {};
OpenZWave.RemoteManager_GetNodeSpecific_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this._homeId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BYTE) {
        this._nodeId = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_GetNodeSpecific_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_GetNodeSpecific_args');
  if (this._homeId) {
    output.writeFieldBegin('_homeId', Thrift.Type.I32, 1);
    output.writeI32(this._homeId);
    output.writeFieldEnd();
  }
  if (this._nodeId) {
    output.writeFieldBegin('_nodeId', Thrift.Type.BYTE, 2);
    output.writeByte(this._nodeId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_GetNodeSpecific_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
OpenZWave.RemoteManager_GetNodeSpecific_result.prototype = {};
OpenZWave.RemoteManager_GetNodeSpecific_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BYTE) {
        this.success = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_GetNodeSpecific_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_GetNodeSpecific_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.BYTE, 0);
    output.writeByte(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_GetNodeType_args = function(args) {
  this._homeId = null;
  this._nodeId = null;
  if (args) {
    if (args._homeId !== undefined) {
      this._homeId = args._homeId;
    }
    if (args._nodeId !== undefined) {
      this._nodeId = args._nodeId;
    }
  }
};
OpenZWave.RemoteManager_GetNodeType_args.prototype = {};
OpenZWave.RemoteManager_GetNodeType_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this._homeId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BYTE) {
        this._nodeId = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_GetNodeType_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_GetNodeType_args');
  if (this._homeId) {
    output.writeFieldBegin('_homeId', Thrift.Type.I32, 1);
    output.writeI32(this._homeId);
    output.writeFieldEnd();
  }
  if (this._nodeId) {
    output.writeFieldBegin('_nodeId', Thrift.Type.BYTE, 2);
    output.writeByte(this._nodeId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_GetNodeType_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
OpenZWave.RemoteManager_GetNodeType_result.prototype = {};
OpenZWave.RemoteManager_GetNodeType_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_GetNodeType_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_GetNodeType_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_GetNodeNeighbors_args = function(args) {
  this._homeId = null;
  this._nodeId = null;
  if (args) {
    if (args._homeId !== undefined) {
      this._homeId = args._homeId;
    }
    if (args._nodeId !== undefined) {
      this._nodeId = args._nodeId;
    }
  }
};
OpenZWave.RemoteManager_GetNodeNeighbors_args.prototype = {};
OpenZWave.RemoteManager_GetNodeNeighbors_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this._homeId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BYTE) {
        this._nodeId = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_GetNodeNeighbors_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_GetNodeNeighbors_args');
  if (this._homeId) {
    output.writeFieldBegin('_homeId', Thrift.Type.I32, 1);
    output.writeI32(this._homeId);
    output.writeFieldEnd();
  }
  if (this._nodeId) {
    output.writeFieldBegin('_nodeId', Thrift.Type.BYTE, 2);
    output.writeByte(this._nodeId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_GetNodeNeighbors_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
OpenZWave.RemoteManager_GetNodeNeighbors_result.prototype = {};
OpenZWave.RemoteManager_GetNodeNeighbors_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new OpenZWave.UInt32_ListByte();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_GetNodeNeighbors_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_GetNodeNeighbors_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_GetNodeManufacturerName_args = function(args) {
  this._homeId = null;
  this._nodeId = null;
  if (args) {
    if (args._homeId !== undefined) {
      this._homeId = args._homeId;
    }
    if (args._nodeId !== undefined) {
      this._nodeId = args._nodeId;
    }
  }
};
OpenZWave.RemoteManager_GetNodeManufacturerName_args.prototype = {};
OpenZWave.RemoteManager_GetNodeManufacturerName_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this._homeId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BYTE) {
        this._nodeId = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_GetNodeManufacturerName_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_GetNodeManufacturerName_args');
  if (this._homeId) {
    output.writeFieldBegin('_homeId', Thrift.Type.I32, 1);
    output.writeI32(this._homeId);
    output.writeFieldEnd();
  }
  if (this._nodeId) {
    output.writeFieldBegin('_nodeId', Thrift.Type.BYTE, 2);
    output.writeByte(this._nodeId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_GetNodeManufacturerName_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
OpenZWave.RemoteManager_GetNodeManufacturerName_result.prototype = {};
OpenZWave.RemoteManager_GetNodeManufacturerName_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_GetNodeManufacturerName_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_GetNodeManufacturerName_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_GetNodeProductName_args = function(args) {
  this._homeId = null;
  this._nodeId = null;
  if (args) {
    if (args._homeId !== undefined) {
      this._homeId = args._homeId;
    }
    if (args._nodeId !== undefined) {
      this._nodeId = args._nodeId;
    }
  }
};
OpenZWave.RemoteManager_GetNodeProductName_args.prototype = {};
OpenZWave.RemoteManager_GetNodeProductName_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this._homeId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BYTE) {
        this._nodeId = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_GetNodeProductName_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_GetNodeProductName_args');
  if (this._homeId) {
    output.writeFieldBegin('_homeId', Thrift.Type.I32, 1);
    output.writeI32(this._homeId);
    output.writeFieldEnd();
  }
  if (this._nodeId) {
    output.writeFieldBegin('_nodeId', Thrift.Type.BYTE, 2);
    output.writeByte(this._nodeId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_GetNodeProductName_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
OpenZWave.RemoteManager_GetNodeProductName_result.prototype = {};
OpenZWave.RemoteManager_GetNodeProductName_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_GetNodeProductName_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_GetNodeProductName_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_GetNodeName_args = function(args) {
  this._homeId = null;
  this._nodeId = null;
  if (args) {
    if (args._homeId !== undefined) {
      this._homeId = args._homeId;
    }
    if (args._nodeId !== undefined) {
      this._nodeId = args._nodeId;
    }
  }
};
OpenZWave.RemoteManager_GetNodeName_args.prototype = {};
OpenZWave.RemoteManager_GetNodeName_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this._homeId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BYTE) {
        this._nodeId = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_GetNodeName_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_GetNodeName_args');
  if (this._homeId) {
    output.writeFieldBegin('_homeId', Thrift.Type.I32, 1);
    output.writeI32(this._homeId);
    output.writeFieldEnd();
  }
  if (this._nodeId) {
    output.writeFieldBegin('_nodeId', Thrift.Type.BYTE, 2);
    output.writeByte(this._nodeId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_GetNodeName_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
OpenZWave.RemoteManager_GetNodeName_result.prototype = {};
OpenZWave.RemoteManager_GetNodeName_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_GetNodeName_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_GetNodeName_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_GetNodeLocation_args = function(args) {
  this._homeId = null;
  this._nodeId = null;
  if (args) {
    if (args._homeId !== undefined) {
      this._homeId = args._homeId;
    }
    if (args._nodeId !== undefined) {
      this._nodeId = args._nodeId;
    }
  }
};
OpenZWave.RemoteManager_GetNodeLocation_args.prototype = {};
OpenZWave.RemoteManager_GetNodeLocation_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this._homeId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BYTE) {
        this._nodeId = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_GetNodeLocation_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_GetNodeLocation_args');
  if (this._homeId) {
    output.writeFieldBegin('_homeId', Thrift.Type.I32, 1);
    output.writeI32(this._homeId);
    output.writeFieldEnd();
  }
  if (this._nodeId) {
    output.writeFieldBegin('_nodeId', Thrift.Type.BYTE, 2);
    output.writeByte(this._nodeId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_GetNodeLocation_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
OpenZWave.RemoteManager_GetNodeLocation_result.prototype = {};
OpenZWave.RemoteManager_GetNodeLocation_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_GetNodeLocation_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_GetNodeLocation_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_GetNodeManufacturerId_args = function(args) {
  this._homeId = null;
  this._nodeId = null;
  if (args) {
    if (args._homeId !== undefined) {
      this._homeId = args._homeId;
    }
    if (args._nodeId !== undefined) {
      this._nodeId = args._nodeId;
    }
  }
};
OpenZWave.RemoteManager_GetNodeManufacturerId_args.prototype = {};
OpenZWave.RemoteManager_GetNodeManufacturerId_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this._homeId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BYTE) {
        this._nodeId = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_GetNodeManufacturerId_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_GetNodeManufacturerId_args');
  if (this._homeId) {
    output.writeFieldBegin('_homeId', Thrift.Type.I32, 1);
    output.writeI32(this._homeId);
    output.writeFieldEnd();
  }
  if (this._nodeId) {
    output.writeFieldBegin('_nodeId', Thrift.Type.BYTE, 2);
    output.writeByte(this._nodeId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_GetNodeManufacturerId_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
OpenZWave.RemoteManager_GetNodeManufacturerId_result.prototype = {};
OpenZWave.RemoteManager_GetNodeManufacturerId_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_GetNodeManufacturerId_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_GetNodeManufacturerId_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_GetNodeProductType_args = function(args) {
  this._homeId = null;
  this._nodeId = null;
  if (args) {
    if (args._homeId !== undefined) {
      this._homeId = args._homeId;
    }
    if (args._nodeId !== undefined) {
      this._nodeId = args._nodeId;
    }
  }
};
OpenZWave.RemoteManager_GetNodeProductType_args.prototype = {};
OpenZWave.RemoteManager_GetNodeProductType_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this._homeId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BYTE) {
        this._nodeId = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_GetNodeProductType_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_GetNodeProductType_args');
  if (this._homeId) {
    output.writeFieldBegin('_homeId', Thrift.Type.I32, 1);
    output.writeI32(this._homeId);
    output.writeFieldEnd();
  }
  if (this._nodeId) {
    output.writeFieldBegin('_nodeId', Thrift.Type.BYTE, 2);
    output.writeByte(this._nodeId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_GetNodeProductType_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
OpenZWave.RemoteManager_GetNodeProductType_result.prototype = {};
OpenZWave.RemoteManager_GetNodeProductType_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_GetNodeProductType_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_GetNodeProductType_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_GetNodeProductId_args = function(args) {
  this._homeId = null;
  this._nodeId = null;
  if (args) {
    if (args._homeId !== undefined) {
      this._homeId = args._homeId;
    }
    if (args._nodeId !== undefined) {
      this._nodeId = args._nodeId;
    }
  }
};
OpenZWave.RemoteManager_GetNodeProductId_args.prototype = {};
OpenZWave.RemoteManager_GetNodeProductId_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this._homeId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BYTE) {
        this._nodeId = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_GetNodeProductId_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_GetNodeProductId_args');
  if (this._homeId) {
    output.writeFieldBegin('_homeId', Thrift.Type.I32, 1);
    output.writeI32(this._homeId);
    output.writeFieldEnd();
  }
  if (this._nodeId) {
    output.writeFieldBegin('_nodeId', Thrift.Type.BYTE, 2);
    output.writeByte(this._nodeId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_GetNodeProductId_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
OpenZWave.RemoteManager_GetNodeProductId_result.prototype = {};
OpenZWave.RemoteManager_GetNodeProductId_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_GetNodeProductId_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_GetNodeProductId_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_SetNodeManufacturerName_args = function(args) {
  this._homeId = null;
  this._nodeId = null;
  this._manufacturerName = null;
  if (args) {
    if (args._homeId !== undefined) {
      this._homeId = args._homeId;
    }
    if (args._nodeId !== undefined) {
      this._nodeId = args._nodeId;
    }
    if (args._manufacturerName !== undefined) {
      this._manufacturerName = args._manufacturerName;
    }
  }
};
OpenZWave.RemoteManager_SetNodeManufacturerName_args.prototype = {};
OpenZWave.RemoteManager_SetNodeManufacturerName_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this._homeId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BYTE) {
        this._nodeId = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this._manufacturerName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_SetNodeManufacturerName_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_SetNodeManufacturerName_args');
  if (this._homeId) {
    output.writeFieldBegin('_homeId', Thrift.Type.I32, 1);
    output.writeI32(this._homeId);
    output.writeFieldEnd();
  }
  if (this._nodeId) {
    output.writeFieldBegin('_nodeId', Thrift.Type.BYTE, 2);
    output.writeByte(this._nodeId);
    output.writeFieldEnd();
  }
  if (this._manufacturerName) {
    output.writeFieldBegin('_manufacturerName', Thrift.Type.STRING, 3);
    output.writeString(this._manufacturerName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_SetNodeManufacturerName_result = function(args) {
};
OpenZWave.RemoteManager_SetNodeManufacturerName_result.prototype = {};
OpenZWave.RemoteManager_SetNodeManufacturerName_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_SetNodeManufacturerName_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_SetNodeManufacturerName_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_SetNodeProductName_args = function(args) {
  this._homeId = null;
  this._nodeId = null;
  this._productName = null;
  if (args) {
    if (args._homeId !== undefined) {
      this._homeId = args._homeId;
    }
    if (args._nodeId !== undefined) {
      this._nodeId = args._nodeId;
    }
    if (args._productName !== undefined) {
      this._productName = args._productName;
    }
  }
};
OpenZWave.RemoteManager_SetNodeProductName_args.prototype = {};
OpenZWave.RemoteManager_SetNodeProductName_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this._homeId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BYTE) {
        this._nodeId = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this._productName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_SetNodeProductName_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_SetNodeProductName_args');
  if (this._homeId) {
    output.writeFieldBegin('_homeId', Thrift.Type.I32, 1);
    output.writeI32(this._homeId);
    output.writeFieldEnd();
  }
  if (this._nodeId) {
    output.writeFieldBegin('_nodeId', Thrift.Type.BYTE, 2);
    output.writeByte(this._nodeId);
    output.writeFieldEnd();
  }
  if (this._productName) {
    output.writeFieldBegin('_productName', Thrift.Type.STRING, 3);
    output.writeString(this._productName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_SetNodeProductName_result = function(args) {
};
OpenZWave.RemoteManager_SetNodeProductName_result.prototype = {};
OpenZWave.RemoteManager_SetNodeProductName_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_SetNodeProductName_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_SetNodeProductName_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_SetNodeName_args = function(args) {
  this._homeId = null;
  this._nodeId = null;
  this._nodeName = null;
  if (args) {
    if (args._homeId !== undefined) {
      this._homeId = args._homeId;
    }
    if (args._nodeId !== undefined) {
      this._nodeId = args._nodeId;
    }
    if (args._nodeName !== undefined) {
      this._nodeName = args._nodeName;
    }
  }
};
OpenZWave.RemoteManager_SetNodeName_args.prototype = {};
OpenZWave.RemoteManager_SetNodeName_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this._homeId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BYTE) {
        this._nodeId = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this._nodeName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_SetNodeName_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_SetNodeName_args');
  if (this._homeId) {
    output.writeFieldBegin('_homeId', Thrift.Type.I32, 1);
    output.writeI32(this._homeId);
    output.writeFieldEnd();
  }
  if (this._nodeId) {
    output.writeFieldBegin('_nodeId', Thrift.Type.BYTE, 2);
    output.writeByte(this._nodeId);
    output.writeFieldEnd();
  }
  if (this._nodeName) {
    output.writeFieldBegin('_nodeName', Thrift.Type.STRING, 3);
    output.writeString(this._nodeName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_SetNodeName_result = function(args) {
};
OpenZWave.RemoteManager_SetNodeName_result.prototype = {};
OpenZWave.RemoteManager_SetNodeName_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_SetNodeName_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_SetNodeName_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_SetNodeLocation_args = function(args) {
  this._homeId = null;
  this._nodeId = null;
  this._location = null;
  if (args) {
    if (args._homeId !== undefined) {
      this._homeId = args._homeId;
    }
    if (args._nodeId !== undefined) {
      this._nodeId = args._nodeId;
    }
    if (args._location !== undefined) {
      this._location = args._location;
    }
  }
};
OpenZWave.RemoteManager_SetNodeLocation_args.prototype = {};
OpenZWave.RemoteManager_SetNodeLocation_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this._homeId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BYTE) {
        this._nodeId = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this._location = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_SetNodeLocation_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_SetNodeLocation_args');
  if (this._homeId) {
    output.writeFieldBegin('_homeId', Thrift.Type.I32, 1);
    output.writeI32(this._homeId);
    output.writeFieldEnd();
  }
  if (this._nodeId) {
    output.writeFieldBegin('_nodeId', Thrift.Type.BYTE, 2);
    output.writeByte(this._nodeId);
    output.writeFieldEnd();
  }
  if (this._location) {
    output.writeFieldBegin('_location', Thrift.Type.STRING, 3);
    output.writeString(this._location);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_SetNodeLocation_result = function(args) {
};
OpenZWave.RemoteManager_SetNodeLocation_result.prototype = {};
OpenZWave.RemoteManager_SetNodeLocation_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_SetNodeLocation_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_SetNodeLocation_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_SetNodeOn_args = function(args) {
  this._homeId = null;
  this._nodeId = null;
  if (args) {
    if (args._homeId !== undefined) {
      this._homeId = args._homeId;
    }
    if (args._nodeId !== undefined) {
      this._nodeId = args._nodeId;
    }
  }
};
OpenZWave.RemoteManager_SetNodeOn_args.prototype = {};
OpenZWave.RemoteManager_SetNodeOn_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this._homeId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BYTE) {
        this._nodeId = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_SetNodeOn_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_SetNodeOn_args');
  if (this._homeId) {
    output.writeFieldBegin('_homeId', Thrift.Type.I32, 1);
    output.writeI32(this._homeId);
    output.writeFieldEnd();
  }
  if (this._nodeId) {
    output.writeFieldBegin('_nodeId', Thrift.Type.BYTE, 2);
    output.writeByte(this._nodeId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_SetNodeOn_result = function(args) {
};
OpenZWave.RemoteManager_SetNodeOn_result.prototype = {};
OpenZWave.RemoteManager_SetNodeOn_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_SetNodeOn_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_SetNodeOn_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_SetNodeOff_args = function(args) {
  this._homeId = null;
  this._nodeId = null;
  if (args) {
    if (args._homeId !== undefined) {
      this._homeId = args._homeId;
    }
    if (args._nodeId !== undefined) {
      this._nodeId = args._nodeId;
    }
  }
};
OpenZWave.RemoteManager_SetNodeOff_args.prototype = {};
OpenZWave.RemoteManager_SetNodeOff_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this._homeId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BYTE) {
        this._nodeId = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_SetNodeOff_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_SetNodeOff_args');
  if (this._homeId) {
    output.writeFieldBegin('_homeId', Thrift.Type.I32, 1);
    output.writeI32(this._homeId);
    output.writeFieldEnd();
  }
  if (this._nodeId) {
    output.writeFieldBegin('_nodeId', Thrift.Type.BYTE, 2);
    output.writeByte(this._nodeId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_SetNodeOff_result = function(args) {
};
OpenZWave.RemoteManager_SetNodeOff_result.prototype = {};
OpenZWave.RemoteManager_SetNodeOff_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_SetNodeOff_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_SetNodeOff_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_SetNodeLevel_args = function(args) {
  this._homeId = null;
  this._nodeId = null;
  this._level = null;
  if (args) {
    if (args._homeId !== undefined) {
      this._homeId = args._homeId;
    }
    if (args._nodeId !== undefined) {
      this._nodeId = args._nodeId;
    }
    if (args._level !== undefined) {
      this._level = args._level;
    }
  }
};
OpenZWave.RemoteManager_SetNodeLevel_args.prototype = {};
OpenZWave.RemoteManager_SetNodeLevel_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this._homeId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BYTE) {
        this._nodeId = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BYTE) {
        this._level = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_SetNodeLevel_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_SetNodeLevel_args');
  if (this._homeId) {
    output.writeFieldBegin('_homeId', Thrift.Type.I32, 1);
    output.writeI32(this._homeId);
    output.writeFieldEnd();
  }
  if (this._nodeId) {
    output.writeFieldBegin('_nodeId', Thrift.Type.BYTE, 2);
    output.writeByte(this._nodeId);
    output.writeFieldEnd();
  }
  if (this._level) {
    output.writeFieldBegin('_level', Thrift.Type.BYTE, 3);
    output.writeByte(this._level);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_SetNodeLevel_result = function(args) {
};
OpenZWave.RemoteManager_SetNodeLevel_result.prototype = {};
OpenZWave.RemoteManager_SetNodeLevel_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_SetNodeLevel_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_SetNodeLevel_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_IsNodeInfoReceived_args = function(args) {
  this._homeId = null;
  this._nodeId = null;
  if (args) {
    if (args._homeId !== undefined) {
      this._homeId = args._homeId;
    }
    if (args._nodeId !== undefined) {
      this._nodeId = args._nodeId;
    }
  }
};
OpenZWave.RemoteManager_IsNodeInfoReceived_args.prototype = {};
OpenZWave.RemoteManager_IsNodeInfoReceived_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this._homeId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BYTE) {
        this._nodeId = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_IsNodeInfoReceived_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_IsNodeInfoReceived_args');
  if (this._homeId) {
    output.writeFieldBegin('_homeId', Thrift.Type.I32, 1);
    output.writeI32(this._homeId);
    output.writeFieldEnd();
  }
  if (this._nodeId) {
    output.writeFieldBegin('_nodeId', Thrift.Type.BYTE, 2);
    output.writeByte(this._nodeId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_IsNodeInfoReceived_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
OpenZWave.RemoteManager_IsNodeInfoReceived_result.prototype = {};
OpenZWave.RemoteManager_IsNodeInfoReceived_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_IsNodeInfoReceived_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_IsNodeInfoReceived_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_GetNodeClassInformation_args = function(args) {
  this._homeId = null;
  this._nodeId = null;
  this._commandClassId = null;
  if (args) {
    if (args._homeId !== undefined) {
      this._homeId = args._homeId;
    }
    if (args._nodeId !== undefined) {
      this._nodeId = args._nodeId;
    }
    if (args._commandClassId !== undefined) {
      this._commandClassId = args._commandClassId;
    }
  }
};
OpenZWave.RemoteManager_GetNodeClassInformation_args.prototype = {};
OpenZWave.RemoteManager_GetNodeClassInformation_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this._homeId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BYTE) {
        this._nodeId = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BYTE) {
        this._commandClassId = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_GetNodeClassInformation_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_GetNodeClassInformation_args');
  if (this._homeId) {
    output.writeFieldBegin('_homeId', Thrift.Type.I32, 1);
    output.writeI32(this._homeId);
    output.writeFieldEnd();
  }
  if (this._nodeId) {
    output.writeFieldBegin('_nodeId', Thrift.Type.BYTE, 2);
    output.writeByte(this._nodeId);
    output.writeFieldEnd();
  }
  if (this._commandClassId) {
    output.writeFieldBegin('_commandClassId', Thrift.Type.BYTE, 3);
    output.writeByte(this._commandClassId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_GetNodeClassInformation_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
OpenZWave.RemoteManager_GetNodeClassInformation_result.prototype = {};
OpenZWave.RemoteManager_GetNodeClassInformation_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new OpenZWave.Bool_GetNodeClassInformation();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_GetNodeClassInformation_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_GetNodeClassInformation_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_GetValueLabel_args = function(args) {
  this._id = null;
  if (args) {
    if (args._id !== undefined) {
      this._id = args._id;
    }
  }
};
OpenZWave.RemoteManager_GetValueLabel_args.prototype = {};
OpenZWave.RemoteManager_GetValueLabel_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this._id = new OpenZWave.RemoteValueID();
        this._id.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_GetValueLabel_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_GetValueLabel_args');
  if (this._id) {
    output.writeFieldBegin('_id', Thrift.Type.STRUCT, 1);
    this._id.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_GetValueLabel_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
OpenZWave.RemoteManager_GetValueLabel_result.prototype = {};
OpenZWave.RemoteManager_GetValueLabel_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_GetValueLabel_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_GetValueLabel_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_SetValueLabel_args = function(args) {
  this._id = null;
  this._value = null;
  if (args) {
    if (args._id !== undefined) {
      this._id = args._id;
    }
    if (args._value !== undefined) {
      this._value = args._value;
    }
  }
};
OpenZWave.RemoteManager_SetValueLabel_args.prototype = {};
OpenZWave.RemoteManager_SetValueLabel_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this._id = new OpenZWave.RemoteValueID();
        this._id.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this._value = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_SetValueLabel_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_SetValueLabel_args');
  if (this._id) {
    output.writeFieldBegin('_id', Thrift.Type.STRUCT, 1);
    this._id.write(output);
    output.writeFieldEnd();
  }
  if (this._value) {
    output.writeFieldBegin('_value', Thrift.Type.STRING, 2);
    output.writeString(this._value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_SetValueLabel_result = function(args) {
};
OpenZWave.RemoteManager_SetValueLabel_result.prototype = {};
OpenZWave.RemoteManager_SetValueLabel_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_SetValueLabel_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_SetValueLabel_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_GetValueUnits_args = function(args) {
  this._id = null;
  if (args) {
    if (args._id !== undefined) {
      this._id = args._id;
    }
  }
};
OpenZWave.RemoteManager_GetValueUnits_args.prototype = {};
OpenZWave.RemoteManager_GetValueUnits_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this._id = new OpenZWave.RemoteValueID();
        this._id.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_GetValueUnits_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_GetValueUnits_args');
  if (this._id) {
    output.writeFieldBegin('_id', Thrift.Type.STRUCT, 1);
    this._id.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_GetValueUnits_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
OpenZWave.RemoteManager_GetValueUnits_result.prototype = {};
OpenZWave.RemoteManager_GetValueUnits_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_GetValueUnits_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_GetValueUnits_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_SetValueUnits_args = function(args) {
  this._id = null;
  this._value = null;
  if (args) {
    if (args._id !== undefined) {
      this._id = args._id;
    }
    if (args._value !== undefined) {
      this._value = args._value;
    }
  }
};
OpenZWave.RemoteManager_SetValueUnits_args.prototype = {};
OpenZWave.RemoteManager_SetValueUnits_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this._id = new OpenZWave.RemoteValueID();
        this._id.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this._value = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_SetValueUnits_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_SetValueUnits_args');
  if (this._id) {
    output.writeFieldBegin('_id', Thrift.Type.STRUCT, 1);
    this._id.write(output);
    output.writeFieldEnd();
  }
  if (this._value) {
    output.writeFieldBegin('_value', Thrift.Type.STRING, 2);
    output.writeString(this._value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_SetValueUnits_result = function(args) {
};
OpenZWave.RemoteManager_SetValueUnits_result.prototype = {};
OpenZWave.RemoteManager_SetValueUnits_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_SetValueUnits_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_SetValueUnits_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_GetValueHelp_args = function(args) {
  this._id = null;
  if (args) {
    if (args._id !== undefined) {
      this._id = args._id;
    }
  }
};
OpenZWave.RemoteManager_GetValueHelp_args.prototype = {};
OpenZWave.RemoteManager_GetValueHelp_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this._id = new OpenZWave.RemoteValueID();
        this._id.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_GetValueHelp_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_GetValueHelp_args');
  if (this._id) {
    output.writeFieldBegin('_id', Thrift.Type.STRUCT, 1);
    this._id.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_GetValueHelp_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
OpenZWave.RemoteManager_GetValueHelp_result.prototype = {};
OpenZWave.RemoteManager_GetValueHelp_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_GetValueHelp_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_GetValueHelp_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_SetValueHelp_args = function(args) {
  this._id = null;
  this._value = null;
  if (args) {
    if (args._id !== undefined) {
      this._id = args._id;
    }
    if (args._value !== undefined) {
      this._value = args._value;
    }
  }
};
OpenZWave.RemoteManager_SetValueHelp_args.prototype = {};
OpenZWave.RemoteManager_SetValueHelp_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this._id = new OpenZWave.RemoteValueID();
        this._id.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this._value = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_SetValueHelp_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_SetValueHelp_args');
  if (this._id) {
    output.writeFieldBegin('_id', Thrift.Type.STRUCT, 1);
    this._id.write(output);
    output.writeFieldEnd();
  }
  if (this._value) {
    output.writeFieldBegin('_value', Thrift.Type.STRING, 2);
    output.writeString(this._value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_SetValueHelp_result = function(args) {
};
OpenZWave.RemoteManager_SetValueHelp_result.prototype = {};
OpenZWave.RemoteManager_SetValueHelp_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_SetValueHelp_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_SetValueHelp_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_GetValueMin_args = function(args) {
  this._id = null;
  if (args) {
    if (args._id !== undefined) {
      this._id = args._id;
    }
  }
};
OpenZWave.RemoteManager_GetValueMin_args.prototype = {};
OpenZWave.RemoteManager_GetValueMin_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this._id = new OpenZWave.RemoteValueID();
        this._id.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_GetValueMin_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_GetValueMin_args');
  if (this._id) {
    output.writeFieldBegin('_id', Thrift.Type.STRUCT, 1);
    this._id.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_GetValueMin_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
OpenZWave.RemoteManager_GetValueMin_result.prototype = {};
OpenZWave.RemoteManager_GetValueMin_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_GetValueMin_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_GetValueMin_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_GetValueMax_args = function(args) {
  this._id = null;
  if (args) {
    if (args._id !== undefined) {
      this._id = args._id;
    }
  }
};
OpenZWave.RemoteManager_GetValueMax_args.prototype = {};
OpenZWave.RemoteManager_GetValueMax_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this._id = new OpenZWave.RemoteValueID();
        this._id.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_GetValueMax_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_GetValueMax_args');
  if (this._id) {
    output.writeFieldBegin('_id', Thrift.Type.STRUCT, 1);
    this._id.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_GetValueMax_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
OpenZWave.RemoteManager_GetValueMax_result.prototype = {};
OpenZWave.RemoteManager_GetValueMax_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_GetValueMax_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_GetValueMax_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_IsValueReadOnly_args = function(args) {
  this._id = null;
  if (args) {
    if (args._id !== undefined) {
      this._id = args._id;
    }
  }
};
OpenZWave.RemoteManager_IsValueReadOnly_args.prototype = {};
OpenZWave.RemoteManager_IsValueReadOnly_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this._id = new OpenZWave.RemoteValueID();
        this._id.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_IsValueReadOnly_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_IsValueReadOnly_args');
  if (this._id) {
    output.writeFieldBegin('_id', Thrift.Type.STRUCT, 1);
    this._id.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_IsValueReadOnly_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
OpenZWave.RemoteManager_IsValueReadOnly_result.prototype = {};
OpenZWave.RemoteManager_IsValueReadOnly_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_IsValueReadOnly_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_IsValueReadOnly_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_IsValueWriteOnly_args = function(args) {
  this._id = null;
  if (args) {
    if (args._id !== undefined) {
      this._id = args._id;
    }
  }
};
OpenZWave.RemoteManager_IsValueWriteOnly_args.prototype = {};
OpenZWave.RemoteManager_IsValueWriteOnly_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this._id = new OpenZWave.RemoteValueID();
        this._id.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_IsValueWriteOnly_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_IsValueWriteOnly_args');
  if (this._id) {
    output.writeFieldBegin('_id', Thrift.Type.STRUCT, 1);
    this._id.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_IsValueWriteOnly_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
OpenZWave.RemoteManager_IsValueWriteOnly_result.prototype = {};
OpenZWave.RemoteManager_IsValueWriteOnly_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_IsValueWriteOnly_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_IsValueWriteOnly_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_IsValueSet_args = function(args) {
  this._id = null;
  if (args) {
    if (args._id !== undefined) {
      this._id = args._id;
    }
  }
};
OpenZWave.RemoteManager_IsValueSet_args.prototype = {};
OpenZWave.RemoteManager_IsValueSet_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this._id = new OpenZWave.RemoteValueID();
        this._id.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_IsValueSet_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_IsValueSet_args');
  if (this._id) {
    output.writeFieldBegin('_id', Thrift.Type.STRUCT, 1);
    this._id.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_IsValueSet_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
OpenZWave.RemoteManager_IsValueSet_result.prototype = {};
OpenZWave.RemoteManager_IsValueSet_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_IsValueSet_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_IsValueSet_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_GetValueAsBool_args = function(args) {
  this._id = null;
  if (args) {
    if (args._id !== undefined) {
      this._id = args._id;
    }
  }
};
OpenZWave.RemoteManager_GetValueAsBool_args.prototype = {};
OpenZWave.RemoteManager_GetValueAsBool_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this._id = new OpenZWave.RemoteValueID();
        this._id.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_GetValueAsBool_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_GetValueAsBool_args');
  if (this._id) {
    output.writeFieldBegin('_id', Thrift.Type.STRUCT, 1);
    this._id.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_GetValueAsBool_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
OpenZWave.RemoteManager_GetValueAsBool_result.prototype = {};
OpenZWave.RemoteManager_GetValueAsBool_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new OpenZWave.Bool_Bool();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_GetValueAsBool_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_GetValueAsBool_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_GetValueAsByte_args = function(args) {
  this._id = null;
  if (args) {
    if (args._id !== undefined) {
      this._id = args._id;
    }
  }
};
OpenZWave.RemoteManager_GetValueAsByte_args.prototype = {};
OpenZWave.RemoteManager_GetValueAsByte_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this._id = new OpenZWave.RemoteValueID();
        this._id.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_GetValueAsByte_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_GetValueAsByte_args');
  if (this._id) {
    output.writeFieldBegin('_id', Thrift.Type.STRUCT, 1);
    this._id.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_GetValueAsByte_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
OpenZWave.RemoteManager_GetValueAsByte_result.prototype = {};
OpenZWave.RemoteManager_GetValueAsByte_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new OpenZWave.Bool_UInt8();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_GetValueAsByte_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_GetValueAsByte_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_GetValueAsFloat_args = function(args) {
  this._id = null;
  if (args) {
    if (args._id !== undefined) {
      this._id = args._id;
    }
  }
};
OpenZWave.RemoteManager_GetValueAsFloat_args.prototype = {};
OpenZWave.RemoteManager_GetValueAsFloat_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this._id = new OpenZWave.RemoteValueID();
        this._id.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_GetValueAsFloat_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_GetValueAsFloat_args');
  if (this._id) {
    output.writeFieldBegin('_id', Thrift.Type.STRUCT, 1);
    this._id.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_GetValueAsFloat_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
OpenZWave.RemoteManager_GetValueAsFloat_result.prototype = {};
OpenZWave.RemoteManager_GetValueAsFloat_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new OpenZWave.Bool_Float();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_GetValueAsFloat_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_GetValueAsFloat_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_GetValueAsInt_args = function(args) {
  this._id = null;
  if (args) {
    if (args._id !== undefined) {
      this._id = args._id;
    }
  }
};
OpenZWave.RemoteManager_GetValueAsInt_args.prototype = {};
OpenZWave.RemoteManager_GetValueAsInt_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this._id = new OpenZWave.RemoteValueID();
        this._id.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_GetValueAsInt_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_GetValueAsInt_args');
  if (this._id) {
    output.writeFieldBegin('_id', Thrift.Type.STRUCT, 1);
    this._id.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_GetValueAsInt_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
OpenZWave.RemoteManager_GetValueAsInt_result.prototype = {};
OpenZWave.RemoteManager_GetValueAsInt_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new OpenZWave.Bool_Int();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_GetValueAsInt_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_GetValueAsInt_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_GetValueAsShort_args = function(args) {
  this._id = null;
  if (args) {
    if (args._id !== undefined) {
      this._id = args._id;
    }
  }
};
OpenZWave.RemoteManager_GetValueAsShort_args.prototype = {};
OpenZWave.RemoteManager_GetValueAsShort_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this._id = new OpenZWave.RemoteValueID();
        this._id.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_GetValueAsShort_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_GetValueAsShort_args');
  if (this._id) {
    output.writeFieldBegin('_id', Thrift.Type.STRUCT, 1);
    this._id.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_GetValueAsShort_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
OpenZWave.RemoteManager_GetValueAsShort_result.prototype = {};
OpenZWave.RemoteManager_GetValueAsShort_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new OpenZWave.Bool_Int16();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_GetValueAsShort_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_GetValueAsShort_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_GetValueAsString_args = function(args) {
  this._id = null;
  if (args) {
    if (args._id !== undefined) {
      this._id = args._id;
    }
  }
};
OpenZWave.RemoteManager_GetValueAsString_args.prototype = {};
OpenZWave.RemoteManager_GetValueAsString_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this._id = new OpenZWave.RemoteValueID();
        this._id.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_GetValueAsString_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_GetValueAsString_args');
  if (this._id) {
    output.writeFieldBegin('_id', Thrift.Type.STRUCT, 1);
    this._id.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_GetValueAsString_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
OpenZWave.RemoteManager_GetValueAsString_result.prototype = {};
OpenZWave.RemoteManager_GetValueAsString_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new OpenZWave.Bool_String();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_GetValueAsString_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_GetValueAsString_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_GetValueListSelection_String_args = function(args) {
  this._id = null;
  if (args) {
    if (args._id !== undefined) {
      this._id = args._id;
    }
  }
};
OpenZWave.RemoteManager_GetValueListSelection_String_args.prototype = {};
OpenZWave.RemoteManager_GetValueListSelection_String_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this._id = new OpenZWave.RemoteValueID();
        this._id.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_GetValueListSelection_String_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_GetValueListSelection_String_args');
  if (this._id) {
    output.writeFieldBegin('_id', Thrift.Type.STRUCT, 1);
    this._id.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_GetValueListSelection_String_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
OpenZWave.RemoteManager_GetValueListSelection_String_result.prototype = {};
OpenZWave.RemoteManager_GetValueListSelection_String_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new OpenZWave.Bool_String();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_GetValueListSelection_String_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_GetValueListSelection_String_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_GetValueListSelection_Int32_args = function(args) {
  this._id = null;
  if (args) {
    if (args._id !== undefined) {
      this._id = args._id;
    }
  }
};
OpenZWave.RemoteManager_GetValueListSelection_Int32_args.prototype = {};
OpenZWave.RemoteManager_GetValueListSelection_Int32_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this._id = new OpenZWave.RemoteValueID();
        this._id.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_GetValueListSelection_Int32_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_GetValueListSelection_Int32_args');
  if (this._id) {
    output.writeFieldBegin('_id', Thrift.Type.STRUCT, 1);
    this._id.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_GetValueListSelection_Int32_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
OpenZWave.RemoteManager_GetValueListSelection_Int32_result.prototype = {};
OpenZWave.RemoteManager_GetValueListSelection_Int32_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new OpenZWave.Bool_Int();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_GetValueListSelection_Int32_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_GetValueListSelection_Int32_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_GetValueListItems_args = function(args) {
  this._id = null;
  if (args) {
    if (args._id !== undefined) {
      this._id = args._id;
    }
  }
};
OpenZWave.RemoteManager_GetValueListItems_args.prototype = {};
OpenZWave.RemoteManager_GetValueListItems_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this._id = new OpenZWave.RemoteValueID();
        this._id.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_GetValueListItems_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_GetValueListItems_args');
  if (this._id) {
    output.writeFieldBegin('_id', Thrift.Type.STRUCT, 1);
    this._id.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_GetValueListItems_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
OpenZWave.RemoteManager_GetValueListItems_result.prototype = {};
OpenZWave.RemoteManager_GetValueListItems_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new OpenZWave.Bool_ListString();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_GetValueListItems_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_GetValueListItems_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_GetValueFloatPrecision_args = function(args) {
  this._id = null;
  if (args) {
    if (args._id !== undefined) {
      this._id = args._id;
    }
  }
};
OpenZWave.RemoteManager_GetValueFloatPrecision_args.prototype = {};
OpenZWave.RemoteManager_GetValueFloatPrecision_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this._id = new OpenZWave.RemoteValueID();
        this._id.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_GetValueFloatPrecision_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_GetValueFloatPrecision_args');
  if (this._id) {
    output.writeFieldBegin('_id', Thrift.Type.STRUCT, 1);
    this._id.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_GetValueFloatPrecision_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
OpenZWave.RemoteManager_GetValueFloatPrecision_result.prototype = {};
OpenZWave.RemoteManager_GetValueFloatPrecision_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new OpenZWave.Bool_UInt8();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_GetValueFloatPrecision_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_GetValueFloatPrecision_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_SetValue_Bool_args = function(args) {
  this._id = null;
  this._value = null;
  if (args) {
    if (args._id !== undefined) {
      this._id = args._id;
    }
    if (args._value !== undefined) {
      this._value = args._value;
    }
  }
};
OpenZWave.RemoteManager_SetValue_Bool_args.prototype = {};
OpenZWave.RemoteManager_SetValue_Bool_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this._id = new OpenZWave.RemoteValueID();
        this._id.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this._value = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_SetValue_Bool_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_SetValue_Bool_args');
  if (this._id) {
    output.writeFieldBegin('_id', Thrift.Type.STRUCT, 1);
    this._id.write(output);
    output.writeFieldEnd();
  }
  if (this._value) {
    output.writeFieldBegin('_value', Thrift.Type.BOOL, 2);
    output.writeBool(this._value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_SetValue_Bool_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
OpenZWave.RemoteManager_SetValue_Bool_result.prototype = {};
OpenZWave.RemoteManager_SetValue_Bool_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_SetValue_Bool_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_SetValue_Bool_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_SetValue_UInt8_args = function(args) {
  this._id = null;
  this._value = null;
  if (args) {
    if (args._id !== undefined) {
      this._id = args._id;
    }
    if (args._value !== undefined) {
      this._value = args._value;
    }
  }
};
OpenZWave.RemoteManager_SetValue_UInt8_args.prototype = {};
OpenZWave.RemoteManager_SetValue_UInt8_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this._id = new OpenZWave.RemoteValueID();
        this._id.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BYTE) {
        this._value = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_SetValue_UInt8_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_SetValue_UInt8_args');
  if (this._id) {
    output.writeFieldBegin('_id', Thrift.Type.STRUCT, 1);
    this._id.write(output);
    output.writeFieldEnd();
  }
  if (this._value) {
    output.writeFieldBegin('_value', Thrift.Type.BYTE, 2);
    output.writeByte(this._value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_SetValue_UInt8_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
OpenZWave.RemoteManager_SetValue_UInt8_result.prototype = {};
OpenZWave.RemoteManager_SetValue_UInt8_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_SetValue_UInt8_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_SetValue_UInt8_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_SetValue_Float_args = function(args) {
  this._id = null;
  this._value = null;
  if (args) {
    if (args._id !== undefined) {
      this._id = args._id;
    }
    if (args._value !== undefined) {
      this._value = args._value;
    }
  }
};
OpenZWave.RemoteManager_SetValue_Float_args.prototype = {};
OpenZWave.RemoteManager_SetValue_Float_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this._id = new OpenZWave.RemoteValueID();
        this._id.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this._value = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_SetValue_Float_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_SetValue_Float_args');
  if (this._id) {
    output.writeFieldBegin('_id', Thrift.Type.STRUCT, 1);
    this._id.write(output);
    output.writeFieldEnd();
  }
  if (this._value) {
    output.writeFieldBegin('_value', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this._value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_SetValue_Float_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
OpenZWave.RemoteManager_SetValue_Float_result.prototype = {};
OpenZWave.RemoteManager_SetValue_Float_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_SetValue_Float_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_SetValue_Float_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_SetValue_Int32_args = function(args) {
  this._id = null;
  this._value = null;
  if (args) {
    if (args._id !== undefined) {
      this._id = args._id;
    }
    if (args._value !== undefined) {
      this._value = args._value;
    }
  }
};
OpenZWave.RemoteManager_SetValue_Int32_args.prototype = {};
OpenZWave.RemoteManager_SetValue_Int32_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this._id = new OpenZWave.RemoteValueID();
        this._id.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this._value = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_SetValue_Int32_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_SetValue_Int32_args');
  if (this._id) {
    output.writeFieldBegin('_id', Thrift.Type.STRUCT, 1);
    this._id.write(output);
    output.writeFieldEnd();
  }
  if (this._value) {
    output.writeFieldBegin('_value', Thrift.Type.I32, 2);
    output.writeI32(this._value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_SetValue_Int32_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
OpenZWave.RemoteManager_SetValue_Int32_result.prototype = {};
OpenZWave.RemoteManager_SetValue_Int32_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_SetValue_Int32_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_SetValue_Int32_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_SetValue_Int16_args = function(args) {
  this._id = null;
  this._value = null;
  if (args) {
    if (args._id !== undefined) {
      this._id = args._id;
    }
    if (args._value !== undefined) {
      this._value = args._value;
    }
  }
};
OpenZWave.RemoteManager_SetValue_Int16_args.prototype = {};
OpenZWave.RemoteManager_SetValue_Int16_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this._id = new OpenZWave.RemoteValueID();
        this._id.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I16) {
        this._value = input.readI16().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_SetValue_Int16_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_SetValue_Int16_args');
  if (this._id) {
    output.writeFieldBegin('_id', Thrift.Type.STRUCT, 1);
    this._id.write(output);
    output.writeFieldEnd();
  }
  if (this._value) {
    output.writeFieldBegin('_value', Thrift.Type.I16, 2);
    output.writeI16(this._value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_SetValue_Int16_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
OpenZWave.RemoteManager_SetValue_Int16_result.prototype = {};
OpenZWave.RemoteManager_SetValue_Int16_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_SetValue_Int16_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_SetValue_Int16_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_SetValue_String_args = function(args) {
  this._id = null;
  this._value = null;
  if (args) {
    if (args._id !== undefined) {
      this._id = args._id;
    }
    if (args._value !== undefined) {
      this._value = args._value;
    }
  }
};
OpenZWave.RemoteManager_SetValue_String_args.prototype = {};
OpenZWave.RemoteManager_SetValue_String_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this._id = new OpenZWave.RemoteValueID();
        this._id.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this._value = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_SetValue_String_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_SetValue_String_args');
  if (this._id) {
    output.writeFieldBegin('_id', Thrift.Type.STRUCT, 1);
    this._id.write(output);
    output.writeFieldEnd();
  }
  if (this._value) {
    output.writeFieldBegin('_value', Thrift.Type.STRING, 2);
    output.writeString(this._value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_SetValue_String_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
OpenZWave.RemoteManager_SetValue_String_result.prototype = {};
OpenZWave.RemoteManager_SetValue_String_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_SetValue_String_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_SetValue_String_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_SetValueListSelection_args = function(args) {
  this._id = null;
  this._selectedItem = null;
  if (args) {
    if (args._id !== undefined) {
      this._id = args._id;
    }
    if (args._selectedItem !== undefined) {
      this._selectedItem = args._selectedItem;
    }
  }
};
OpenZWave.RemoteManager_SetValueListSelection_args.prototype = {};
OpenZWave.RemoteManager_SetValueListSelection_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this._id = new OpenZWave.RemoteValueID();
        this._id.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this._selectedItem = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_SetValueListSelection_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_SetValueListSelection_args');
  if (this._id) {
    output.writeFieldBegin('_id', Thrift.Type.STRUCT, 1);
    this._id.write(output);
    output.writeFieldEnd();
  }
  if (this._selectedItem) {
    output.writeFieldBegin('_selectedItem', Thrift.Type.STRING, 2);
    output.writeString(this._selectedItem);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_SetValueListSelection_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
OpenZWave.RemoteManager_SetValueListSelection_result.prototype = {};
OpenZWave.RemoteManager_SetValueListSelection_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_SetValueListSelection_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_SetValueListSelection_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_PressButton_args = function(args) {
  this._id = null;
  if (args) {
    if (args._id !== undefined) {
      this._id = args._id;
    }
  }
};
OpenZWave.RemoteManager_PressButton_args.prototype = {};
OpenZWave.RemoteManager_PressButton_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this._id = new OpenZWave.RemoteValueID();
        this._id.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_PressButton_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_PressButton_args');
  if (this._id) {
    output.writeFieldBegin('_id', Thrift.Type.STRUCT, 1);
    this._id.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_PressButton_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
OpenZWave.RemoteManager_PressButton_result.prototype = {};
OpenZWave.RemoteManager_PressButton_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_PressButton_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_PressButton_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_ReleaseButton_args = function(args) {
  this._id = null;
  if (args) {
    if (args._id !== undefined) {
      this._id = args._id;
    }
  }
};
OpenZWave.RemoteManager_ReleaseButton_args.prototype = {};
OpenZWave.RemoteManager_ReleaseButton_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this._id = new OpenZWave.RemoteValueID();
        this._id.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_ReleaseButton_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_ReleaseButton_args');
  if (this._id) {
    output.writeFieldBegin('_id', Thrift.Type.STRUCT, 1);
    this._id.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_ReleaseButton_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
OpenZWave.RemoteManager_ReleaseButton_result.prototype = {};
OpenZWave.RemoteManager_ReleaseButton_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_ReleaseButton_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_ReleaseButton_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_GetNumSwitchPoints_args = function(args) {
  this._id = null;
  if (args) {
    if (args._id !== undefined) {
      this._id = args._id;
    }
  }
};
OpenZWave.RemoteManager_GetNumSwitchPoints_args.prototype = {};
OpenZWave.RemoteManager_GetNumSwitchPoints_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this._id = new OpenZWave.RemoteValueID();
        this._id.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_GetNumSwitchPoints_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_GetNumSwitchPoints_args');
  if (this._id) {
    output.writeFieldBegin('_id', Thrift.Type.STRUCT, 1);
    this._id.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_GetNumSwitchPoints_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
OpenZWave.RemoteManager_GetNumSwitchPoints_result.prototype = {};
OpenZWave.RemoteManager_GetNumSwitchPoints_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BYTE) {
        this.success = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_GetNumSwitchPoints_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_GetNumSwitchPoints_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.BYTE, 0);
    output.writeByte(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_SetSwitchPoint_args = function(args) {
  this._id = null;
  this._hours = null;
  this._minutes = null;
  this._setback = null;
  if (args) {
    if (args._id !== undefined) {
      this._id = args._id;
    }
    if (args._hours !== undefined) {
      this._hours = args._hours;
    }
    if (args._minutes !== undefined) {
      this._minutes = args._minutes;
    }
    if (args._setback !== undefined) {
      this._setback = args._setback;
    }
  }
};
OpenZWave.RemoteManager_SetSwitchPoint_args.prototype = {};
OpenZWave.RemoteManager_SetSwitchPoint_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this._id = new OpenZWave.RemoteValueID();
        this._id.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BYTE) {
        this._hours = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BYTE) {
        this._minutes = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BYTE) {
        this._setback = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_SetSwitchPoint_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_SetSwitchPoint_args');
  if (this._id) {
    output.writeFieldBegin('_id', Thrift.Type.STRUCT, 1);
    this._id.write(output);
    output.writeFieldEnd();
  }
  if (this._hours) {
    output.writeFieldBegin('_hours', Thrift.Type.BYTE, 2);
    output.writeByte(this._hours);
    output.writeFieldEnd();
  }
  if (this._minutes) {
    output.writeFieldBegin('_minutes', Thrift.Type.BYTE, 3);
    output.writeByte(this._minutes);
    output.writeFieldEnd();
  }
  if (this._setback) {
    output.writeFieldBegin('_setback', Thrift.Type.BYTE, 4);
    output.writeByte(this._setback);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_SetSwitchPoint_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
OpenZWave.RemoteManager_SetSwitchPoint_result.prototype = {};
OpenZWave.RemoteManager_SetSwitchPoint_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_SetSwitchPoint_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_SetSwitchPoint_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_RemoveSwitchPoint_args = function(args) {
  this._id = null;
  this._hours = null;
  this._minutes = null;
  if (args) {
    if (args._id !== undefined) {
      this._id = args._id;
    }
    if (args._hours !== undefined) {
      this._hours = args._hours;
    }
    if (args._minutes !== undefined) {
      this._minutes = args._minutes;
    }
  }
};
OpenZWave.RemoteManager_RemoveSwitchPoint_args.prototype = {};
OpenZWave.RemoteManager_RemoveSwitchPoint_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this._id = new OpenZWave.RemoteValueID();
        this._id.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BYTE) {
        this._hours = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BYTE) {
        this._minutes = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_RemoveSwitchPoint_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_RemoveSwitchPoint_args');
  if (this._id) {
    output.writeFieldBegin('_id', Thrift.Type.STRUCT, 1);
    this._id.write(output);
    output.writeFieldEnd();
  }
  if (this._hours) {
    output.writeFieldBegin('_hours', Thrift.Type.BYTE, 2);
    output.writeByte(this._hours);
    output.writeFieldEnd();
  }
  if (this._minutes) {
    output.writeFieldBegin('_minutes', Thrift.Type.BYTE, 3);
    output.writeByte(this._minutes);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_RemoveSwitchPoint_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
OpenZWave.RemoteManager_RemoveSwitchPoint_result.prototype = {};
OpenZWave.RemoteManager_RemoveSwitchPoint_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_RemoveSwitchPoint_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_RemoveSwitchPoint_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_ClearSwitchPoints_args = function(args) {
  this._id = null;
  if (args) {
    if (args._id !== undefined) {
      this._id = args._id;
    }
  }
};
OpenZWave.RemoteManager_ClearSwitchPoints_args.prototype = {};
OpenZWave.RemoteManager_ClearSwitchPoints_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this._id = new OpenZWave.RemoteValueID();
        this._id.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_ClearSwitchPoints_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_ClearSwitchPoints_args');
  if (this._id) {
    output.writeFieldBegin('_id', Thrift.Type.STRUCT, 1);
    this._id.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_ClearSwitchPoints_result = function(args) {
};
OpenZWave.RemoteManager_ClearSwitchPoints_result.prototype = {};
OpenZWave.RemoteManager_ClearSwitchPoints_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_ClearSwitchPoints_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_ClearSwitchPoints_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_GetSwitchPoint_args = function(args) {
  this._id = null;
  this._idx = null;
  if (args) {
    if (args._id !== undefined) {
      this._id = args._id;
    }
    if (args._idx !== undefined) {
      this._idx = args._idx;
    }
  }
};
OpenZWave.RemoteManager_GetSwitchPoint_args.prototype = {};
OpenZWave.RemoteManager_GetSwitchPoint_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this._id = new OpenZWave.RemoteValueID();
        this._id.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BYTE) {
        this._idx = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_GetSwitchPoint_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_GetSwitchPoint_args');
  if (this._id) {
    output.writeFieldBegin('_id', Thrift.Type.STRUCT, 1);
    this._id.write(output);
    output.writeFieldEnd();
  }
  if (this._idx) {
    output.writeFieldBegin('_idx', Thrift.Type.BYTE, 2);
    output.writeByte(this._idx);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_GetSwitchPoint_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
OpenZWave.RemoteManager_GetSwitchPoint_result.prototype = {};
OpenZWave.RemoteManager_GetSwitchPoint_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new OpenZWave.GetSwitchPointReturnStruct();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_GetSwitchPoint_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_GetSwitchPoint_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_SwitchAllOn_args = function(args) {
  this._homeId = null;
  if (args) {
    if (args._homeId !== undefined) {
      this._homeId = args._homeId;
    }
  }
};
OpenZWave.RemoteManager_SwitchAllOn_args.prototype = {};
OpenZWave.RemoteManager_SwitchAllOn_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this._homeId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_SwitchAllOn_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_SwitchAllOn_args');
  if (this._homeId) {
    output.writeFieldBegin('_homeId', Thrift.Type.I32, 1);
    output.writeI32(this._homeId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_SwitchAllOn_result = function(args) {
};
OpenZWave.RemoteManager_SwitchAllOn_result.prototype = {};
OpenZWave.RemoteManager_SwitchAllOn_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_SwitchAllOn_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_SwitchAllOn_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_SwitchAllOff_args = function(args) {
  this._homeId = null;
  if (args) {
    if (args._homeId !== undefined) {
      this._homeId = args._homeId;
    }
  }
};
OpenZWave.RemoteManager_SwitchAllOff_args.prototype = {};
OpenZWave.RemoteManager_SwitchAllOff_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this._homeId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_SwitchAllOff_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_SwitchAllOff_args');
  if (this._homeId) {
    output.writeFieldBegin('_homeId', Thrift.Type.I32, 1);
    output.writeI32(this._homeId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_SwitchAllOff_result = function(args) {
};
OpenZWave.RemoteManager_SwitchAllOff_result.prototype = {};
OpenZWave.RemoteManager_SwitchAllOff_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_SwitchAllOff_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_SwitchAllOff_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_SetConfigParam_args = function(args) {
  this._homeId = null;
  this._nodeId = null;
  this._param = null;
  this._value = null;
  this._size = 2;
  if (args) {
    if (args._homeId !== undefined) {
      this._homeId = args._homeId;
    }
    if (args._nodeId !== undefined) {
      this._nodeId = args._nodeId;
    }
    if (args._param !== undefined) {
      this._param = args._param;
    }
    if (args._value !== undefined) {
      this._value = args._value;
    }
    if (args._size !== undefined) {
      this._size = args._size;
    }
  }
};
OpenZWave.RemoteManager_SetConfigParam_args.prototype = {};
OpenZWave.RemoteManager_SetConfigParam_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this._homeId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BYTE) {
        this._nodeId = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BYTE) {
        this._param = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this._value = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BYTE) {
        this._size = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_SetConfigParam_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_SetConfigParam_args');
  if (this._homeId) {
    output.writeFieldBegin('_homeId', Thrift.Type.I32, 1);
    output.writeI32(this._homeId);
    output.writeFieldEnd();
  }
  if (this._nodeId) {
    output.writeFieldBegin('_nodeId', Thrift.Type.BYTE, 2);
    output.writeByte(this._nodeId);
    output.writeFieldEnd();
  }
  if (this._param) {
    output.writeFieldBegin('_param', Thrift.Type.BYTE, 3);
    output.writeByte(this._param);
    output.writeFieldEnd();
  }
  if (this._value) {
    output.writeFieldBegin('_value', Thrift.Type.I32, 4);
    output.writeI32(this._value);
    output.writeFieldEnd();
  }
  if (this._size) {
    output.writeFieldBegin('_size', Thrift.Type.BYTE, 5);
    output.writeByte(this._size);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_SetConfigParam_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
OpenZWave.RemoteManager_SetConfigParam_result.prototype = {};
OpenZWave.RemoteManager_SetConfigParam_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_SetConfigParam_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_SetConfigParam_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_RequestConfigParam_args = function(args) {
  this._homeId = null;
  this._nodeId = null;
  this._param = null;
  if (args) {
    if (args._homeId !== undefined) {
      this._homeId = args._homeId;
    }
    if (args._nodeId !== undefined) {
      this._nodeId = args._nodeId;
    }
    if (args._param !== undefined) {
      this._param = args._param;
    }
  }
};
OpenZWave.RemoteManager_RequestConfigParam_args.prototype = {};
OpenZWave.RemoteManager_RequestConfigParam_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this._homeId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BYTE) {
        this._nodeId = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BYTE) {
        this._param = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_RequestConfigParam_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_RequestConfigParam_args');
  if (this._homeId) {
    output.writeFieldBegin('_homeId', Thrift.Type.I32, 1);
    output.writeI32(this._homeId);
    output.writeFieldEnd();
  }
  if (this._nodeId) {
    output.writeFieldBegin('_nodeId', Thrift.Type.BYTE, 2);
    output.writeByte(this._nodeId);
    output.writeFieldEnd();
  }
  if (this._param) {
    output.writeFieldBegin('_param', Thrift.Type.BYTE, 3);
    output.writeByte(this._param);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_RequestConfigParam_result = function(args) {
};
OpenZWave.RemoteManager_RequestConfigParam_result.prototype = {};
OpenZWave.RemoteManager_RequestConfigParam_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_RequestConfigParam_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_RequestConfigParam_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_RequestAllConfigParams_args = function(args) {
  this._homeId = null;
  this._nodeId = null;
  if (args) {
    if (args._homeId !== undefined) {
      this._homeId = args._homeId;
    }
    if (args._nodeId !== undefined) {
      this._nodeId = args._nodeId;
    }
  }
};
OpenZWave.RemoteManager_RequestAllConfigParams_args.prototype = {};
OpenZWave.RemoteManager_RequestAllConfigParams_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this._homeId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BYTE) {
        this._nodeId = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_RequestAllConfigParams_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_RequestAllConfigParams_args');
  if (this._homeId) {
    output.writeFieldBegin('_homeId', Thrift.Type.I32, 1);
    output.writeI32(this._homeId);
    output.writeFieldEnd();
  }
  if (this._nodeId) {
    output.writeFieldBegin('_nodeId', Thrift.Type.BYTE, 2);
    output.writeByte(this._nodeId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_RequestAllConfigParams_result = function(args) {
};
OpenZWave.RemoteManager_RequestAllConfigParams_result.prototype = {};
OpenZWave.RemoteManager_RequestAllConfigParams_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_RequestAllConfigParams_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_RequestAllConfigParams_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_GetNumGroups_args = function(args) {
  this._homeId = null;
  this._nodeId = null;
  if (args) {
    if (args._homeId !== undefined) {
      this._homeId = args._homeId;
    }
    if (args._nodeId !== undefined) {
      this._nodeId = args._nodeId;
    }
  }
};
OpenZWave.RemoteManager_GetNumGroups_args.prototype = {};
OpenZWave.RemoteManager_GetNumGroups_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this._homeId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BYTE) {
        this._nodeId = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_GetNumGroups_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_GetNumGroups_args');
  if (this._homeId) {
    output.writeFieldBegin('_homeId', Thrift.Type.I32, 1);
    output.writeI32(this._homeId);
    output.writeFieldEnd();
  }
  if (this._nodeId) {
    output.writeFieldBegin('_nodeId', Thrift.Type.BYTE, 2);
    output.writeByte(this._nodeId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_GetNumGroups_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
OpenZWave.RemoteManager_GetNumGroups_result.prototype = {};
OpenZWave.RemoteManager_GetNumGroups_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BYTE) {
        this.success = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_GetNumGroups_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_GetNumGroups_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.BYTE, 0);
    output.writeByte(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_GetAssociations_args = function(args) {
  this._homeId = null;
  this._nodeId = null;
  this._groupIdx = null;
  if (args) {
    if (args._homeId !== undefined) {
      this._homeId = args._homeId;
    }
    if (args._nodeId !== undefined) {
      this._nodeId = args._nodeId;
    }
    if (args._groupIdx !== undefined) {
      this._groupIdx = args._groupIdx;
    }
  }
};
OpenZWave.RemoteManager_GetAssociations_args.prototype = {};
OpenZWave.RemoteManager_GetAssociations_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this._homeId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BYTE) {
        this._nodeId = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BYTE) {
        this._groupIdx = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_GetAssociations_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_GetAssociations_args');
  if (this._homeId) {
    output.writeFieldBegin('_homeId', Thrift.Type.I32, 1);
    output.writeI32(this._homeId);
    output.writeFieldEnd();
  }
  if (this._nodeId) {
    output.writeFieldBegin('_nodeId', Thrift.Type.BYTE, 2);
    output.writeByte(this._nodeId);
    output.writeFieldEnd();
  }
  if (this._groupIdx) {
    output.writeFieldBegin('_groupIdx', Thrift.Type.BYTE, 3);
    output.writeByte(this._groupIdx);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_GetAssociations_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
OpenZWave.RemoteManager_GetAssociations_result.prototype = {};
OpenZWave.RemoteManager_GetAssociations_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new OpenZWave.GetAssociationsReturnStruct();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_GetAssociations_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_GetAssociations_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_GetMaxAssociations_args = function(args) {
  this._homeId = null;
  this._nodeId = null;
  this._groupIdx = null;
  if (args) {
    if (args._homeId !== undefined) {
      this._homeId = args._homeId;
    }
    if (args._nodeId !== undefined) {
      this._nodeId = args._nodeId;
    }
    if (args._groupIdx !== undefined) {
      this._groupIdx = args._groupIdx;
    }
  }
};
OpenZWave.RemoteManager_GetMaxAssociations_args.prototype = {};
OpenZWave.RemoteManager_GetMaxAssociations_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this._homeId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BYTE) {
        this._nodeId = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BYTE) {
        this._groupIdx = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_GetMaxAssociations_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_GetMaxAssociations_args');
  if (this._homeId) {
    output.writeFieldBegin('_homeId', Thrift.Type.I32, 1);
    output.writeI32(this._homeId);
    output.writeFieldEnd();
  }
  if (this._nodeId) {
    output.writeFieldBegin('_nodeId', Thrift.Type.BYTE, 2);
    output.writeByte(this._nodeId);
    output.writeFieldEnd();
  }
  if (this._groupIdx) {
    output.writeFieldBegin('_groupIdx', Thrift.Type.BYTE, 3);
    output.writeByte(this._groupIdx);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_GetMaxAssociations_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
OpenZWave.RemoteManager_GetMaxAssociations_result.prototype = {};
OpenZWave.RemoteManager_GetMaxAssociations_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BYTE) {
        this.success = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_GetMaxAssociations_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_GetMaxAssociations_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.BYTE, 0);
    output.writeByte(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_GetGroupLabel_args = function(args) {
  this._homeId = null;
  this._nodeId = null;
  this._groupIdx = null;
  if (args) {
    if (args._homeId !== undefined) {
      this._homeId = args._homeId;
    }
    if (args._nodeId !== undefined) {
      this._nodeId = args._nodeId;
    }
    if (args._groupIdx !== undefined) {
      this._groupIdx = args._groupIdx;
    }
  }
};
OpenZWave.RemoteManager_GetGroupLabel_args.prototype = {};
OpenZWave.RemoteManager_GetGroupLabel_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this._homeId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BYTE) {
        this._nodeId = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BYTE) {
        this._groupIdx = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_GetGroupLabel_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_GetGroupLabel_args');
  if (this._homeId) {
    output.writeFieldBegin('_homeId', Thrift.Type.I32, 1);
    output.writeI32(this._homeId);
    output.writeFieldEnd();
  }
  if (this._nodeId) {
    output.writeFieldBegin('_nodeId', Thrift.Type.BYTE, 2);
    output.writeByte(this._nodeId);
    output.writeFieldEnd();
  }
  if (this._groupIdx) {
    output.writeFieldBegin('_groupIdx', Thrift.Type.BYTE, 3);
    output.writeByte(this._groupIdx);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_GetGroupLabel_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
OpenZWave.RemoteManager_GetGroupLabel_result.prototype = {};
OpenZWave.RemoteManager_GetGroupLabel_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_GetGroupLabel_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_GetGroupLabel_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_AddAssociation_args = function(args) {
  this._homeId = null;
  this._nodeId = null;
  this._groupIdx = null;
  this._targetNodeId = null;
  if (args) {
    if (args._homeId !== undefined) {
      this._homeId = args._homeId;
    }
    if (args._nodeId !== undefined) {
      this._nodeId = args._nodeId;
    }
    if (args._groupIdx !== undefined) {
      this._groupIdx = args._groupIdx;
    }
    if (args._targetNodeId !== undefined) {
      this._targetNodeId = args._targetNodeId;
    }
  }
};
OpenZWave.RemoteManager_AddAssociation_args.prototype = {};
OpenZWave.RemoteManager_AddAssociation_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this._homeId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BYTE) {
        this._nodeId = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BYTE) {
        this._groupIdx = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BYTE) {
        this._targetNodeId = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_AddAssociation_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_AddAssociation_args');
  if (this._homeId) {
    output.writeFieldBegin('_homeId', Thrift.Type.I32, 1);
    output.writeI32(this._homeId);
    output.writeFieldEnd();
  }
  if (this._nodeId) {
    output.writeFieldBegin('_nodeId', Thrift.Type.BYTE, 2);
    output.writeByte(this._nodeId);
    output.writeFieldEnd();
  }
  if (this._groupIdx) {
    output.writeFieldBegin('_groupIdx', Thrift.Type.BYTE, 3);
    output.writeByte(this._groupIdx);
    output.writeFieldEnd();
  }
  if (this._targetNodeId) {
    output.writeFieldBegin('_targetNodeId', Thrift.Type.BYTE, 4);
    output.writeByte(this._targetNodeId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_AddAssociation_result = function(args) {
};
OpenZWave.RemoteManager_AddAssociation_result.prototype = {};
OpenZWave.RemoteManager_AddAssociation_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_AddAssociation_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_AddAssociation_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_RemoveAssociation_args = function(args) {
  this._homeId = null;
  this._nodeId = null;
  this._groupIdx = null;
  this._targetNodeId = null;
  if (args) {
    if (args._homeId !== undefined) {
      this._homeId = args._homeId;
    }
    if (args._nodeId !== undefined) {
      this._nodeId = args._nodeId;
    }
    if (args._groupIdx !== undefined) {
      this._groupIdx = args._groupIdx;
    }
    if (args._targetNodeId !== undefined) {
      this._targetNodeId = args._targetNodeId;
    }
  }
};
OpenZWave.RemoteManager_RemoveAssociation_args.prototype = {};
OpenZWave.RemoteManager_RemoveAssociation_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this._homeId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BYTE) {
        this._nodeId = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BYTE) {
        this._groupIdx = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BYTE) {
        this._targetNodeId = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_RemoveAssociation_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_RemoveAssociation_args');
  if (this._homeId) {
    output.writeFieldBegin('_homeId', Thrift.Type.I32, 1);
    output.writeI32(this._homeId);
    output.writeFieldEnd();
  }
  if (this._nodeId) {
    output.writeFieldBegin('_nodeId', Thrift.Type.BYTE, 2);
    output.writeByte(this._nodeId);
    output.writeFieldEnd();
  }
  if (this._groupIdx) {
    output.writeFieldBegin('_groupIdx', Thrift.Type.BYTE, 3);
    output.writeByte(this._groupIdx);
    output.writeFieldEnd();
  }
  if (this._targetNodeId) {
    output.writeFieldBegin('_targetNodeId', Thrift.Type.BYTE, 4);
    output.writeByte(this._targetNodeId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_RemoveAssociation_result = function(args) {
};
OpenZWave.RemoteManager_RemoveAssociation_result.prototype = {};
OpenZWave.RemoteManager_RemoveAssociation_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_RemoveAssociation_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_RemoveAssociation_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_ResetController_args = function(args) {
  this._homeId = null;
  if (args) {
    if (args._homeId !== undefined) {
      this._homeId = args._homeId;
    }
  }
};
OpenZWave.RemoteManager_ResetController_args.prototype = {};
OpenZWave.RemoteManager_ResetController_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this._homeId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_ResetController_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_ResetController_args');
  if (this._homeId) {
    output.writeFieldBegin('_homeId', Thrift.Type.I32, 1);
    output.writeI32(this._homeId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_ResetController_result = function(args) {
};
OpenZWave.RemoteManager_ResetController_result.prototype = {};
OpenZWave.RemoteManager_ResetController_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_ResetController_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_ResetController_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_SoftReset_args = function(args) {
  this._homeId = null;
  if (args) {
    if (args._homeId !== undefined) {
      this._homeId = args._homeId;
    }
  }
};
OpenZWave.RemoteManager_SoftReset_args.prototype = {};
OpenZWave.RemoteManager_SoftReset_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this._homeId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_SoftReset_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_SoftReset_args');
  if (this._homeId) {
    output.writeFieldBegin('_homeId', Thrift.Type.I32, 1);
    output.writeI32(this._homeId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_SoftReset_result = function(args) {
};
OpenZWave.RemoteManager_SoftReset_result.prototype = {};
OpenZWave.RemoteManager_SoftReset_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_SoftReset_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_SoftReset_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_BeginControllerCommand_args = function(args) {
  this._homeId = null;
  this._command = null;
  this._highPower = null;
  this._nodeId = null;
  this._arg = null;
  if (args) {
    if (args._homeId !== undefined) {
      this._homeId = args._homeId;
    }
    if (args._command !== undefined) {
      this._command = args._command;
    }
    if (args._highPower !== undefined) {
      this._highPower = args._highPower;
    }
    if (args._nodeId !== undefined) {
      this._nodeId = args._nodeId;
    }
    if (args._arg !== undefined) {
      this._arg = args._arg;
    }
  }
};
OpenZWave.RemoteManager_BeginControllerCommand_args.prototype = {};
OpenZWave.RemoteManager_BeginControllerCommand_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this._homeId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this._command = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this._highPower = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BYTE) {
        this._nodeId = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BYTE) {
        this._arg = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_BeginControllerCommand_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_BeginControllerCommand_args');
  if (this._homeId) {
    output.writeFieldBegin('_homeId', Thrift.Type.I32, 1);
    output.writeI32(this._homeId);
    output.writeFieldEnd();
  }
  if (this._command) {
    output.writeFieldBegin('_command', Thrift.Type.I32, 2);
    output.writeI32(this._command);
    output.writeFieldEnd();
  }
  if (this._highPower) {
    output.writeFieldBegin('_highPower', Thrift.Type.BOOL, 3);
    output.writeBool(this._highPower);
    output.writeFieldEnd();
  }
  if (this._nodeId) {
    output.writeFieldBegin('_nodeId', Thrift.Type.BYTE, 4);
    output.writeByte(this._nodeId);
    output.writeFieldEnd();
  }
  if (this._arg) {
    output.writeFieldBegin('_arg', Thrift.Type.BYTE, 5);
    output.writeByte(this._arg);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_BeginControllerCommand_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
OpenZWave.RemoteManager_BeginControllerCommand_result.prototype = {};
OpenZWave.RemoteManager_BeginControllerCommand_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_BeginControllerCommand_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_BeginControllerCommand_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_CancelControllerCommand_args = function(args) {
  this._homeId = null;
  if (args) {
    if (args._homeId !== undefined) {
      this._homeId = args._homeId;
    }
  }
};
OpenZWave.RemoteManager_CancelControllerCommand_args.prototype = {};
OpenZWave.RemoteManager_CancelControllerCommand_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this._homeId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_CancelControllerCommand_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_CancelControllerCommand_args');
  if (this._homeId) {
    output.writeFieldBegin('_homeId', Thrift.Type.I32, 1);
    output.writeI32(this._homeId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_CancelControllerCommand_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
OpenZWave.RemoteManager_CancelControllerCommand_result.prototype = {};
OpenZWave.RemoteManager_CancelControllerCommand_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_CancelControllerCommand_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_CancelControllerCommand_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_GetNumScenes_args = function(args) {
};
OpenZWave.RemoteManager_GetNumScenes_args.prototype = {};
OpenZWave.RemoteManager_GetNumScenes_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_GetNumScenes_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_GetNumScenes_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_GetNumScenes_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
OpenZWave.RemoteManager_GetNumScenes_result.prototype = {};
OpenZWave.RemoteManager_GetNumScenes_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BYTE) {
        this.success = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_GetNumScenes_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_GetNumScenes_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.BYTE, 0);
    output.writeByte(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_GetAllScenes_args = function(args) {
};
OpenZWave.RemoteManager_GetAllScenes_args.prototype = {};
OpenZWave.RemoteManager_GetAllScenes_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_GetAllScenes_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_GetAllScenes_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_GetAllScenes_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
OpenZWave.RemoteManager_GetAllScenes_result.prototype = {};
OpenZWave.RemoteManager_GetAllScenes_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new OpenZWave.GetAllScenesReturnStruct();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_GetAllScenes_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_GetAllScenes_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_CreateScene_args = function(args) {
};
OpenZWave.RemoteManager_CreateScene_args.prototype = {};
OpenZWave.RemoteManager_CreateScene_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_CreateScene_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_CreateScene_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_CreateScene_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
OpenZWave.RemoteManager_CreateScene_result.prototype = {};
OpenZWave.RemoteManager_CreateScene_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BYTE) {
        this.success = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_CreateScene_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_CreateScene_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.BYTE, 0);
    output.writeByte(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_RemoveScene_args = function(args) {
  this._sceneId = null;
  if (args) {
    if (args._sceneId !== undefined) {
      this._sceneId = args._sceneId;
    }
  }
};
OpenZWave.RemoteManager_RemoveScene_args.prototype = {};
OpenZWave.RemoteManager_RemoveScene_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BYTE) {
        this._sceneId = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_RemoveScene_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_RemoveScene_args');
  if (this._sceneId) {
    output.writeFieldBegin('_sceneId', Thrift.Type.BYTE, 1);
    output.writeByte(this._sceneId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_RemoveScene_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
OpenZWave.RemoteManager_RemoveScene_result.prototype = {};
OpenZWave.RemoteManager_RemoveScene_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_RemoveScene_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_RemoveScene_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_AddSceneValue_Bool_args = function(args) {
  this._sceneId = null;
  this._valueId = null;
  this._value = null;
  if (args) {
    if (args._sceneId !== undefined) {
      this._sceneId = args._sceneId;
    }
    if (args._valueId !== undefined) {
      this._valueId = args._valueId;
    }
    if (args._value !== undefined) {
      this._value = args._value;
    }
  }
};
OpenZWave.RemoteManager_AddSceneValue_Bool_args.prototype = {};
OpenZWave.RemoteManager_AddSceneValue_Bool_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BYTE) {
        this._sceneId = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this._valueId = new OpenZWave.RemoteValueID();
        this._valueId.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this._value = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_AddSceneValue_Bool_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_AddSceneValue_Bool_args');
  if (this._sceneId) {
    output.writeFieldBegin('_sceneId', Thrift.Type.BYTE, 1);
    output.writeByte(this._sceneId);
    output.writeFieldEnd();
  }
  if (this._valueId) {
    output.writeFieldBegin('_valueId', Thrift.Type.STRUCT, 2);
    this._valueId.write(output);
    output.writeFieldEnd();
  }
  if (this._value) {
    output.writeFieldBegin('_value', Thrift.Type.BOOL, 3);
    output.writeBool(this._value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_AddSceneValue_Bool_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
OpenZWave.RemoteManager_AddSceneValue_Bool_result.prototype = {};
OpenZWave.RemoteManager_AddSceneValue_Bool_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_AddSceneValue_Bool_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_AddSceneValue_Bool_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_AddSceneValue_Uint8_args = function(args) {
  this._sceneId = null;
  this._valueId = null;
  this._value = null;
  if (args) {
    if (args._sceneId !== undefined) {
      this._sceneId = args._sceneId;
    }
    if (args._valueId !== undefined) {
      this._valueId = args._valueId;
    }
    if (args._value !== undefined) {
      this._value = args._value;
    }
  }
};
OpenZWave.RemoteManager_AddSceneValue_Uint8_args.prototype = {};
OpenZWave.RemoteManager_AddSceneValue_Uint8_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BYTE) {
        this._sceneId = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this._valueId = new OpenZWave.RemoteValueID();
        this._valueId.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BYTE) {
        this._value = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_AddSceneValue_Uint8_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_AddSceneValue_Uint8_args');
  if (this._sceneId) {
    output.writeFieldBegin('_sceneId', Thrift.Type.BYTE, 1);
    output.writeByte(this._sceneId);
    output.writeFieldEnd();
  }
  if (this._valueId) {
    output.writeFieldBegin('_valueId', Thrift.Type.STRUCT, 2);
    this._valueId.write(output);
    output.writeFieldEnd();
  }
  if (this._value) {
    output.writeFieldBegin('_value', Thrift.Type.BYTE, 3);
    output.writeByte(this._value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_AddSceneValue_Uint8_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
OpenZWave.RemoteManager_AddSceneValue_Uint8_result.prototype = {};
OpenZWave.RemoteManager_AddSceneValue_Uint8_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_AddSceneValue_Uint8_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_AddSceneValue_Uint8_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_AddSceneValue_Float_args = function(args) {
  this._sceneId = null;
  this._valueId = null;
  this._value = null;
  if (args) {
    if (args._sceneId !== undefined) {
      this._sceneId = args._sceneId;
    }
    if (args._valueId !== undefined) {
      this._valueId = args._valueId;
    }
    if (args._value !== undefined) {
      this._value = args._value;
    }
  }
};
OpenZWave.RemoteManager_AddSceneValue_Float_args.prototype = {};
OpenZWave.RemoteManager_AddSceneValue_Float_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BYTE) {
        this._sceneId = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this._valueId = new OpenZWave.RemoteValueID();
        this._valueId.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.DOUBLE) {
        this._value = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_AddSceneValue_Float_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_AddSceneValue_Float_args');
  if (this._sceneId) {
    output.writeFieldBegin('_sceneId', Thrift.Type.BYTE, 1);
    output.writeByte(this._sceneId);
    output.writeFieldEnd();
  }
  if (this._valueId) {
    output.writeFieldBegin('_valueId', Thrift.Type.STRUCT, 2);
    this._valueId.write(output);
    output.writeFieldEnd();
  }
  if (this._value) {
    output.writeFieldBegin('_value', Thrift.Type.DOUBLE, 3);
    output.writeDouble(this._value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_AddSceneValue_Float_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
OpenZWave.RemoteManager_AddSceneValue_Float_result.prototype = {};
OpenZWave.RemoteManager_AddSceneValue_Float_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_AddSceneValue_Float_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_AddSceneValue_Float_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_AddSceneValue_Int32_args = function(args) {
  this._sceneId = null;
  this._valueId = null;
  this._value = null;
  if (args) {
    if (args._sceneId !== undefined) {
      this._sceneId = args._sceneId;
    }
    if (args._valueId !== undefined) {
      this._valueId = args._valueId;
    }
    if (args._value !== undefined) {
      this._value = args._value;
    }
  }
};
OpenZWave.RemoteManager_AddSceneValue_Int32_args.prototype = {};
OpenZWave.RemoteManager_AddSceneValue_Int32_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BYTE) {
        this._sceneId = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this._valueId = new OpenZWave.RemoteValueID();
        this._valueId.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this._value = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_AddSceneValue_Int32_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_AddSceneValue_Int32_args');
  if (this._sceneId) {
    output.writeFieldBegin('_sceneId', Thrift.Type.BYTE, 1);
    output.writeByte(this._sceneId);
    output.writeFieldEnd();
  }
  if (this._valueId) {
    output.writeFieldBegin('_valueId', Thrift.Type.STRUCT, 2);
    this._valueId.write(output);
    output.writeFieldEnd();
  }
  if (this._value) {
    output.writeFieldBegin('_value', Thrift.Type.I32, 3);
    output.writeI32(this._value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_AddSceneValue_Int32_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
OpenZWave.RemoteManager_AddSceneValue_Int32_result.prototype = {};
OpenZWave.RemoteManager_AddSceneValue_Int32_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_AddSceneValue_Int32_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_AddSceneValue_Int32_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_AddSceneValue_Int16_args = function(args) {
  this._sceneId = null;
  this._valueId = null;
  this._value = null;
  if (args) {
    if (args._sceneId !== undefined) {
      this._sceneId = args._sceneId;
    }
    if (args._valueId !== undefined) {
      this._valueId = args._valueId;
    }
    if (args._value !== undefined) {
      this._value = args._value;
    }
  }
};
OpenZWave.RemoteManager_AddSceneValue_Int16_args.prototype = {};
OpenZWave.RemoteManager_AddSceneValue_Int16_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BYTE) {
        this._sceneId = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this._valueId = new OpenZWave.RemoteValueID();
        this._valueId.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I16) {
        this._value = input.readI16().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_AddSceneValue_Int16_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_AddSceneValue_Int16_args');
  if (this._sceneId) {
    output.writeFieldBegin('_sceneId', Thrift.Type.BYTE, 1);
    output.writeByte(this._sceneId);
    output.writeFieldEnd();
  }
  if (this._valueId) {
    output.writeFieldBegin('_valueId', Thrift.Type.STRUCT, 2);
    this._valueId.write(output);
    output.writeFieldEnd();
  }
  if (this._value) {
    output.writeFieldBegin('_value', Thrift.Type.I16, 3);
    output.writeI16(this._value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_AddSceneValue_Int16_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
OpenZWave.RemoteManager_AddSceneValue_Int16_result.prototype = {};
OpenZWave.RemoteManager_AddSceneValue_Int16_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_AddSceneValue_Int16_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_AddSceneValue_Int16_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_AddSceneValue_String_args = function(args) {
  this._sceneId = null;
  this._valueId = null;
  this._value = null;
  if (args) {
    if (args._sceneId !== undefined) {
      this._sceneId = args._sceneId;
    }
    if (args._valueId !== undefined) {
      this._valueId = args._valueId;
    }
    if (args._value !== undefined) {
      this._value = args._value;
    }
  }
};
OpenZWave.RemoteManager_AddSceneValue_String_args.prototype = {};
OpenZWave.RemoteManager_AddSceneValue_String_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BYTE) {
        this._sceneId = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this._valueId = new OpenZWave.RemoteValueID();
        this._valueId.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this._value = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_AddSceneValue_String_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_AddSceneValue_String_args');
  if (this._sceneId) {
    output.writeFieldBegin('_sceneId', Thrift.Type.BYTE, 1);
    output.writeByte(this._sceneId);
    output.writeFieldEnd();
  }
  if (this._valueId) {
    output.writeFieldBegin('_valueId', Thrift.Type.STRUCT, 2);
    this._valueId.write(output);
    output.writeFieldEnd();
  }
  if (this._value) {
    output.writeFieldBegin('_value', Thrift.Type.STRING, 3);
    output.writeString(this._value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_AddSceneValue_String_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
OpenZWave.RemoteManager_AddSceneValue_String_result.prototype = {};
OpenZWave.RemoteManager_AddSceneValue_String_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_AddSceneValue_String_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_AddSceneValue_String_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_AddSceneValueListSelection_String_args = function(args) {
  this._sceneId = null;
  this._valueId = null;
  this._value = null;
  if (args) {
    if (args._sceneId !== undefined) {
      this._sceneId = args._sceneId;
    }
    if (args._valueId !== undefined) {
      this._valueId = args._valueId;
    }
    if (args._value !== undefined) {
      this._value = args._value;
    }
  }
};
OpenZWave.RemoteManager_AddSceneValueListSelection_String_args.prototype = {};
OpenZWave.RemoteManager_AddSceneValueListSelection_String_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BYTE) {
        this._sceneId = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this._valueId = new OpenZWave.RemoteValueID();
        this._valueId.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this._value = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_AddSceneValueListSelection_String_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_AddSceneValueListSelection_String_args');
  if (this._sceneId) {
    output.writeFieldBegin('_sceneId', Thrift.Type.BYTE, 1);
    output.writeByte(this._sceneId);
    output.writeFieldEnd();
  }
  if (this._valueId) {
    output.writeFieldBegin('_valueId', Thrift.Type.STRUCT, 2);
    this._valueId.write(output);
    output.writeFieldEnd();
  }
  if (this._value) {
    output.writeFieldBegin('_value', Thrift.Type.STRING, 3);
    output.writeString(this._value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_AddSceneValueListSelection_String_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
OpenZWave.RemoteManager_AddSceneValueListSelection_String_result.prototype = {};
OpenZWave.RemoteManager_AddSceneValueListSelection_String_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_AddSceneValueListSelection_String_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_AddSceneValueListSelection_String_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_AddSceneValueListSelection_Int32_args = function(args) {
  this._sceneId = null;
  this._valueId = null;
  this._value = null;
  if (args) {
    if (args._sceneId !== undefined) {
      this._sceneId = args._sceneId;
    }
    if (args._valueId !== undefined) {
      this._valueId = args._valueId;
    }
    if (args._value !== undefined) {
      this._value = args._value;
    }
  }
};
OpenZWave.RemoteManager_AddSceneValueListSelection_Int32_args.prototype = {};
OpenZWave.RemoteManager_AddSceneValueListSelection_Int32_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BYTE) {
        this._sceneId = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this._valueId = new OpenZWave.RemoteValueID();
        this._valueId.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this._value = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_AddSceneValueListSelection_Int32_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_AddSceneValueListSelection_Int32_args');
  if (this._sceneId) {
    output.writeFieldBegin('_sceneId', Thrift.Type.BYTE, 1);
    output.writeByte(this._sceneId);
    output.writeFieldEnd();
  }
  if (this._valueId) {
    output.writeFieldBegin('_valueId', Thrift.Type.STRUCT, 2);
    this._valueId.write(output);
    output.writeFieldEnd();
  }
  if (this._value) {
    output.writeFieldBegin('_value', Thrift.Type.I32, 3);
    output.writeI32(this._value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_AddSceneValueListSelection_Int32_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
OpenZWave.RemoteManager_AddSceneValueListSelection_Int32_result.prototype = {};
OpenZWave.RemoteManager_AddSceneValueListSelection_Int32_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_AddSceneValueListSelection_Int32_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_AddSceneValueListSelection_Int32_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_RemoveSceneValue_args = function(args) {
  this._sceneId = null;
  this._valueId = null;
  if (args) {
    if (args._sceneId !== undefined) {
      this._sceneId = args._sceneId;
    }
    if (args._valueId !== undefined) {
      this._valueId = args._valueId;
    }
  }
};
OpenZWave.RemoteManager_RemoveSceneValue_args.prototype = {};
OpenZWave.RemoteManager_RemoveSceneValue_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BYTE) {
        this._sceneId = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this._valueId = new OpenZWave.RemoteValueID();
        this._valueId.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_RemoveSceneValue_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_RemoveSceneValue_args');
  if (this._sceneId) {
    output.writeFieldBegin('_sceneId', Thrift.Type.BYTE, 1);
    output.writeByte(this._sceneId);
    output.writeFieldEnd();
  }
  if (this._valueId) {
    output.writeFieldBegin('_valueId', Thrift.Type.STRUCT, 2);
    this._valueId.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_RemoveSceneValue_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
OpenZWave.RemoteManager_RemoveSceneValue_result.prototype = {};
OpenZWave.RemoteManager_RemoveSceneValue_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_RemoveSceneValue_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_RemoveSceneValue_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_SceneGetValues_args = function(args) {
  this._sceneId = null;
  if (args) {
    if (args._sceneId !== undefined) {
      this._sceneId = args._sceneId;
    }
  }
};
OpenZWave.RemoteManager_SceneGetValues_args.prototype = {};
OpenZWave.RemoteManager_SceneGetValues_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BYTE) {
        this._sceneId = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_SceneGetValues_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_SceneGetValues_args');
  if (this._sceneId) {
    output.writeFieldBegin('_sceneId', Thrift.Type.BYTE, 1);
    output.writeByte(this._sceneId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_SceneGetValues_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
OpenZWave.RemoteManager_SceneGetValues_result.prototype = {};
OpenZWave.RemoteManager_SceneGetValues_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new OpenZWave.SceneGetValuesReturnStruct();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_SceneGetValues_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_SceneGetValues_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_SceneGetValueAsBool_args = function(args) {
  this._sceneId = null;
  this._valueId = null;
  if (args) {
    if (args._sceneId !== undefined) {
      this._sceneId = args._sceneId;
    }
    if (args._valueId !== undefined) {
      this._valueId = args._valueId;
    }
  }
};
OpenZWave.RemoteManager_SceneGetValueAsBool_args.prototype = {};
OpenZWave.RemoteManager_SceneGetValueAsBool_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BYTE) {
        this._sceneId = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this._valueId = new OpenZWave.RemoteValueID();
        this._valueId.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_SceneGetValueAsBool_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_SceneGetValueAsBool_args');
  if (this._sceneId) {
    output.writeFieldBegin('_sceneId', Thrift.Type.BYTE, 1);
    output.writeByte(this._sceneId);
    output.writeFieldEnd();
  }
  if (this._valueId) {
    output.writeFieldBegin('_valueId', Thrift.Type.STRUCT, 2);
    this._valueId.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_SceneGetValueAsBool_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
OpenZWave.RemoteManager_SceneGetValueAsBool_result.prototype = {};
OpenZWave.RemoteManager_SceneGetValueAsBool_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new OpenZWave.Bool_Bool();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_SceneGetValueAsBool_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_SceneGetValueAsBool_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_SceneGetValueAsByte_args = function(args) {
  this._sceneId = null;
  this._valueId = null;
  if (args) {
    if (args._sceneId !== undefined) {
      this._sceneId = args._sceneId;
    }
    if (args._valueId !== undefined) {
      this._valueId = args._valueId;
    }
  }
};
OpenZWave.RemoteManager_SceneGetValueAsByte_args.prototype = {};
OpenZWave.RemoteManager_SceneGetValueAsByte_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BYTE) {
        this._sceneId = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this._valueId = new OpenZWave.RemoteValueID();
        this._valueId.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_SceneGetValueAsByte_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_SceneGetValueAsByte_args');
  if (this._sceneId) {
    output.writeFieldBegin('_sceneId', Thrift.Type.BYTE, 1);
    output.writeByte(this._sceneId);
    output.writeFieldEnd();
  }
  if (this._valueId) {
    output.writeFieldBegin('_valueId', Thrift.Type.STRUCT, 2);
    this._valueId.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_SceneGetValueAsByte_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
OpenZWave.RemoteManager_SceneGetValueAsByte_result.prototype = {};
OpenZWave.RemoteManager_SceneGetValueAsByte_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new OpenZWave.Bool_UInt8();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_SceneGetValueAsByte_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_SceneGetValueAsByte_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_SceneGetValueAsFloat_args = function(args) {
  this._sceneId = null;
  this._valueId = null;
  if (args) {
    if (args._sceneId !== undefined) {
      this._sceneId = args._sceneId;
    }
    if (args._valueId !== undefined) {
      this._valueId = args._valueId;
    }
  }
};
OpenZWave.RemoteManager_SceneGetValueAsFloat_args.prototype = {};
OpenZWave.RemoteManager_SceneGetValueAsFloat_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BYTE) {
        this._sceneId = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this._valueId = new OpenZWave.RemoteValueID();
        this._valueId.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_SceneGetValueAsFloat_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_SceneGetValueAsFloat_args');
  if (this._sceneId) {
    output.writeFieldBegin('_sceneId', Thrift.Type.BYTE, 1);
    output.writeByte(this._sceneId);
    output.writeFieldEnd();
  }
  if (this._valueId) {
    output.writeFieldBegin('_valueId', Thrift.Type.STRUCT, 2);
    this._valueId.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_SceneGetValueAsFloat_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
OpenZWave.RemoteManager_SceneGetValueAsFloat_result.prototype = {};
OpenZWave.RemoteManager_SceneGetValueAsFloat_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new OpenZWave.Bool_Float();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_SceneGetValueAsFloat_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_SceneGetValueAsFloat_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_SceneGetValueAsInt_args = function(args) {
  this._sceneId = null;
  this._valueId = null;
  if (args) {
    if (args._sceneId !== undefined) {
      this._sceneId = args._sceneId;
    }
    if (args._valueId !== undefined) {
      this._valueId = args._valueId;
    }
  }
};
OpenZWave.RemoteManager_SceneGetValueAsInt_args.prototype = {};
OpenZWave.RemoteManager_SceneGetValueAsInt_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BYTE) {
        this._sceneId = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this._valueId = new OpenZWave.RemoteValueID();
        this._valueId.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_SceneGetValueAsInt_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_SceneGetValueAsInt_args');
  if (this._sceneId) {
    output.writeFieldBegin('_sceneId', Thrift.Type.BYTE, 1);
    output.writeByte(this._sceneId);
    output.writeFieldEnd();
  }
  if (this._valueId) {
    output.writeFieldBegin('_valueId', Thrift.Type.STRUCT, 2);
    this._valueId.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_SceneGetValueAsInt_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
OpenZWave.RemoteManager_SceneGetValueAsInt_result.prototype = {};
OpenZWave.RemoteManager_SceneGetValueAsInt_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new OpenZWave.Bool_Int();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_SceneGetValueAsInt_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_SceneGetValueAsInt_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_SceneGetValueAsShort_args = function(args) {
  this._sceneId = null;
  this._valueId = null;
  if (args) {
    if (args._sceneId !== undefined) {
      this._sceneId = args._sceneId;
    }
    if (args._valueId !== undefined) {
      this._valueId = args._valueId;
    }
  }
};
OpenZWave.RemoteManager_SceneGetValueAsShort_args.prototype = {};
OpenZWave.RemoteManager_SceneGetValueAsShort_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BYTE) {
        this._sceneId = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this._valueId = new OpenZWave.RemoteValueID();
        this._valueId.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_SceneGetValueAsShort_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_SceneGetValueAsShort_args');
  if (this._sceneId) {
    output.writeFieldBegin('_sceneId', Thrift.Type.BYTE, 1);
    output.writeByte(this._sceneId);
    output.writeFieldEnd();
  }
  if (this._valueId) {
    output.writeFieldBegin('_valueId', Thrift.Type.STRUCT, 2);
    this._valueId.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_SceneGetValueAsShort_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
OpenZWave.RemoteManager_SceneGetValueAsShort_result.prototype = {};
OpenZWave.RemoteManager_SceneGetValueAsShort_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new OpenZWave.Bool_Int16();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_SceneGetValueAsShort_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_SceneGetValueAsShort_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_SceneGetValueAsString_args = function(args) {
  this._sceneId = null;
  this._valueId = null;
  if (args) {
    if (args._sceneId !== undefined) {
      this._sceneId = args._sceneId;
    }
    if (args._valueId !== undefined) {
      this._valueId = args._valueId;
    }
  }
};
OpenZWave.RemoteManager_SceneGetValueAsString_args.prototype = {};
OpenZWave.RemoteManager_SceneGetValueAsString_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BYTE) {
        this._sceneId = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this._valueId = new OpenZWave.RemoteValueID();
        this._valueId.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_SceneGetValueAsString_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_SceneGetValueAsString_args');
  if (this._sceneId) {
    output.writeFieldBegin('_sceneId', Thrift.Type.BYTE, 1);
    output.writeByte(this._sceneId);
    output.writeFieldEnd();
  }
  if (this._valueId) {
    output.writeFieldBegin('_valueId', Thrift.Type.STRUCT, 2);
    this._valueId.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_SceneGetValueAsString_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
OpenZWave.RemoteManager_SceneGetValueAsString_result.prototype = {};
OpenZWave.RemoteManager_SceneGetValueAsString_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new OpenZWave.Bool_String();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_SceneGetValueAsString_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_SceneGetValueAsString_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_SceneGetValueListSelection_String_args = function(args) {
  this._sceneId = null;
  this._valueId = null;
  if (args) {
    if (args._sceneId !== undefined) {
      this._sceneId = args._sceneId;
    }
    if (args._valueId !== undefined) {
      this._valueId = args._valueId;
    }
  }
};
OpenZWave.RemoteManager_SceneGetValueListSelection_String_args.prototype = {};
OpenZWave.RemoteManager_SceneGetValueListSelection_String_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BYTE) {
        this._sceneId = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this._valueId = new OpenZWave.RemoteValueID();
        this._valueId.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_SceneGetValueListSelection_String_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_SceneGetValueListSelection_String_args');
  if (this._sceneId) {
    output.writeFieldBegin('_sceneId', Thrift.Type.BYTE, 1);
    output.writeByte(this._sceneId);
    output.writeFieldEnd();
  }
  if (this._valueId) {
    output.writeFieldBegin('_valueId', Thrift.Type.STRUCT, 2);
    this._valueId.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_SceneGetValueListSelection_String_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
OpenZWave.RemoteManager_SceneGetValueListSelection_String_result.prototype = {};
OpenZWave.RemoteManager_SceneGetValueListSelection_String_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new OpenZWave.Bool_String();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_SceneGetValueListSelection_String_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_SceneGetValueListSelection_String_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_SceneGetValueListSelection_Int32_args = function(args) {
  this._sceneId = null;
  this._valueId = null;
  if (args) {
    if (args._sceneId !== undefined) {
      this._sceneId = args._sceneId;
    }
    if (args._valueId !== undefined) {
      this._valueId = args._valueId;
    }
  }
};
OpenZWave.RemoteManager_SceneGetValueListSelection_Int32_args.prototype = {};
OpenZWave.RemoteManager_SceneGetValueListSelection_Int32_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BYTE) {
        this._sceneId = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this._valueId = new OpenZWave.RemoteValueID();
        this._valueId.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_SceneGetValueListSelection_Int32_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_SceneGetValueListSelection_Int32_args');
  if (this._sceneId) {
    output.writeFieldBegin('_sceneId', Thrift.Type.BYTE, 1);
    output.writeByte(this._sceneId);
    output.writeFieldEnd();
  }
  if (this._valueId) {
    output.writeFieldBegin('_valueId', Thrift.Type.STRUCT, 2);
    this._valueId.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_SceneGetValueListSelection_Int32_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
OpenZWave.RemoteManager_SceneGetValueListSelection_Int32_result.prototype = {};
OpenZWave.RemoteManager_SceneGetValueListSelection_Int32_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new OpenZWave.Bool_Int();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_SceneGetValueListSelection_Int32_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_SceneGetValueListSelection_Int32_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_SetSceneValue_Bool_args = function(args) {
  this._sceneId = null;
  this._valueId = null;
  this._value = null;
  if (args) {
    if (args._sceneId !== undefined) {
      this._sceneId = args._sceneId;
    }
    if (args._valueId !== undefined) {
      this._valueId = args._valueId;
    }
    if (args._value !== undefined) {
      this._value = args._value;
    }
  }
};
OpenZWave.RemoteManager_SetSceneValue_Bool_args.prototype = {};
OpenZWave.RemoteManager_SetSceneValue_Bool_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BYTE) {
        this._sceneId = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this._valueId = new OpenZWave.RemoteValueID();
        this._valueId.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this._value = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_SetSceneValue_Bool_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_SetSceneValue_Bool_args');
  if (this._sceneId) {
    output.writeFieldBegin('_sceneId', Thrift.Type.BYTE, 1);
    output.writeByte(this._sceneId);
    output.writeFieldEnd();
  }
  if (this._valueId) {
    output.writeFieldBegin('_valueId', Thrift.Type.STRUCT, 2);
    this._valueId.write(output);
    output.writeFieldEnd();
  }
  if (this._value) {
    output.writeFieldBegin('_value', Thrift.Type.BOOL, 3);
    output.writeBool(this._value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_SetSceneValue_Bool_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
OpenZWave.RemoteManager_SetSceneValue_Bool_result.prototype = {};
OpenZWave.RemoteManager_SetSceneValue_Bool_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_SetSceneValue_Bool_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_SetSceneValue_Bool_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_SetSceneValue_Uint8_args = function(args) {
  this._sceneId = null;
  this._valueId = null;
  this._value = null;
  if (args) {
    if (args._sceneId !== undefined) {
      this._sceneId = args._sceneId;
    }
    if (args._valueId !== undefined) {
      this._valueId = args._valueId;
    }
    if (args._value !== undefined) {
      this._value = args._value;
    }
  }
};
OpenZWave.RemoteManager_SetSceneValue_Uint8_args.prototype = {};
OpenZWave.RemoteManager_SetSceneValue_Uint8_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BYTE) {
        this._sceneId = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this._valueId = new OpenZWave.RemoteValueID();
        this._valueId.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BYTE) {
        this._value = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_SetSceneValue_Uint8_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_SetSceneValue_Uint8_args');
  if (this._sceneId) {
    output.writeFieldBegin('_sceneId', Thrift.Type.BYTE, 1);
    output.writeByte(this._sceneId);
    output.writeFieldEnd();
  }
  if (this._valueId) {
    output.writeFieldBegin('_valueId', Thrift.Type.STRUCT, 2);
    this._valueId.write(output);
    output.writeFieldEnd();
  }
  if (this._value) {
    output.writeFieldBegin('_value', Thrift.Type.BYTE, 3);
    output.writeByte(this._value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_SetSceneValue_Uint8_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
OpenZWave.RemoteManager_SetSceneValue_Uint8_result.prototype = {};
OpenZWave.RemoteManager_SetSceneValue_Uint8_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_SetSceneValue_Uint8_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_SetSceneValue_Uint8_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_SetSceneValue_Float_args = function(args) {
  this._sceneId = null;
  this._valueId = null;
  this._value = null;
  if (args) {
    if (args._sceneId !== undefined) {
      this._sceneId = args._sceneId;
    }
    if (args._valueId !== undefined) {
      this._valueId = args._valueId;
    }
    if (args._value !== undefined) {
      this._value = args._value;
    }
  }
};
OpenZWave.RemoteManager_SetSceneValue_Float_args.prototype = {};
OpenZWave.RemoteManager_SetSceneValue_Float_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BYTE) {
        this._sceneId = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this._valueId = new OpenZWave.RemoteValueID();
        this._valueId.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.DOUBLE) {
        this._value = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_SetSceneValue_Float_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_SetSceneValue_Float_args');
  if (this._sceneId) {
    output.writeFieldBegin('_sceneId', Thrift.Type.BYTE, 1);
    output.writeByte(this._sceneId);
    output.writeFieldEnd();
  }
  if (this._valueId) {
    output.writeFieldBegin('_valueId', Thrift.Type.STRUCT, 2);
    this._valueId.write(output);
    output.writeFieldEnd();
  }
  if (this._value) {
    output.writeFieldBegin('_value', Thrift.Type.DOUBLE, 3);
    output.writeDouble(this._value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_SetSceneValue_Float_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
OpenZWave.RemoteManager_SetSceneValue_Float_result.prototype = {};
OpenZWave.RemoteManager_SetSceneValue_Float_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_SetSceneValue_Float_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_SetSceneValue_Float_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_SetSceneValue_Int32_args = function(args) {
  this._sceneId = null;
  this._valueId = null;
  this._value = null;
  if (args) {
    if (args._sceneId !== undefined) {
      this._sceneId = args._sceneId;
    }
    if (args._valueId !== undefined) {
      this._valueId = args._valueId;
    }
    if (args._value !== undefined) {
      this._value = args._value;
    }
  }
};
OpenZWave.RemoteManager_SetSceneValue_Int32_args.prototype = {};
OpenZWave.RemoteManager_SetSceneValue_Int32_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BYTE) {
        this._sceneId = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this._valueId = new OpenZWave.RemoteValueID();
        this._valueId.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this._value = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_SetSceneValue_Int32_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_SetSceneValue_Int32_args');
  if (this._sceneId) {
    output.writeFieldBegin('_sceneId', Thrift.Type.BYTE, 1);
    output.writeByte(this._sceneId);
    output.writeFieldEnd();
  }
  if (this._valueId) {
    output.writeFieldBegin('_valueId', Thrift.Type.STRUCT, 2);
    this._valueId.write(output);
    output.writeFieldEnd();
  }
  if (this._value) {
    output.writeFieldBegin('_value', Thrift.Type.I32, 3);
    output.writeI32(this._value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_SetSceneValue_Int32_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
OpenZWave.RemoteManager_SetSceneValue_Int32_result.prototype = {};
OpenZWave.RemoteManager_SetSceneValue_Int32_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_SetSceneValue_Int32_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_SetSceneValue_Int32_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_SetSceneValue_Int16_args = function(args) {
  this._sceneId = null;
  this._valueId = null;
  this._value = null;
  if (args) {
    if (args._sceneId !== undefined) {
      this._sceneId = args._sceneId;
    }
    if (args._valueId !== undefined) {
      this._valueId = args._valueId;
    }
    if (args._value !== undefined) {
      this._value = args._value;
    }
  }
};
OpenZWave.RemoteManager_SetSceneValue_Int16_args.prototype = {};
OpenZWave.RemoteManager_SetSceneValue_Int16_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BYTE) {
        this._sceneId = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this._valueId = new OpenZWave.RemoteValueID();
        this._valueId.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I16) {
        this._value = input.readI16().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_SetSceneValue_Int16_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_SetSceneValue_Int16_args');
  if (this._sceneId) {
    output.writeFieldBegin('_sceneId', Thrift.Type.BYTE, 1);
    output.writeByte(this._sceneId);
    output.writeFieldEnd();
  }
  if (this._valueId) {
    output.writeFieldBegin('_valueId', Thrift.Type.STRUCT, 2);
    this._valueId.write(output);
    output.writeFieldEnd();
  }
  if (this._value) {
    output.writeFieldBegin('_value', Thrift.Type.I16, 3);
    output.writeI16(this._value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_SetSceneValue_Int16_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
OpenZWave.RemoteManager_SetSceneValue_Int16_result.prototype = {};
OpenZWave.RemoteManager_SetSceneValue_Int16_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_SetSceneValue_Int16_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_SetSceneValue_Int16_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_SetSceneValue_String_args = function(args) {
  this._sceneId = null;
  this._valueId = null;
  this._value = null;
  if (args) {
    if (args._sceneId !== undefined) {
      this._sceneId = args._sceneId;
    }
    if (args._valueId !== undefined) {
      this._valueId = args._valueId;
    }
    if (args._value !== undefined) {
      this._value = args._value;
    }
  }
};
OpenZWave.RemoteManager_SetSceneValue_String_args.prototype = {};
OpenZWave.RemoteManager_SetSceneValue_String_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BYTE) {
        this._sceneId = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this._valueId = new OpenZWave.RemoteValueID();
        this._valueId.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this._value = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_SetSceneValue_String_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_SetSceneValue_String_args');
  if (this._sceneId) {
    output.writeFieldBegin('_sceneId', Thrift.Type.BYTE, 1);
    output.writeByte(this._sceneId);
    output.writeFieldEnd();
  }
  if (this._valueId) {
    output.writeFieldBegin('_valueId', Thrift.Type.STRUCT, 2);
    this._valueId.write(output);
    output.writeFieldEnd();
  }
  if (this._value) {
    output.writeFieldBegin('_value', Thrift.Type.STRING, 3);
    output.writeString(this._value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_SetSceneValue_String_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
OpenZWave.RemoteManager_SetSceneValue_String_result.prototype = {};
OpenZWave.RemoteManager_SetSceneValue_String_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_SetSceneValue_String_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_SetSceneValue_String_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_SetSceneValueListSelection_String_args = function(args) {
  this._sceneId = null;
  this._valueId = null;
  this._value = null;
  if (args) {
    if (args._sceneId !== undefined) {
      this._sceneId = args._sceneId;
    }
    if (args._valueId !== undefined) {
      this._valueId = args._valueId;
    }
    if (args._value !== undefined) {
      this._value = args._value;
    }
  }
};
OpenZWave.RemoteManager_SetSceneValueListSelection_String_args.prototype = {};
OpenZWave.RemoteManager_SetSceneValueListSelection_String_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BYTE) {
        this._sceneId = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this._valueId = new OpenZWave.RemoteValueID();
        this._valueId.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this._value = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_SetSceneValueListSelection_String_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_SetSceneValueListSelection_String_args');
  if (this._sceneId) {
    output.writeFieldBegin('_sceneId', Thrift.Type.BYTE, 1);
    output.writeByte(this._sceneId);
    output.writeFieldEnd();
  }
  if (this._valueId) {
    output.writeFieldBegin('_valueId', Thrift.Type.STRUCT, 2);
    this._valueId.write(output);
    output.writeFieldEnd();
  }
  if (this._value) {
    output.writeFieldBegin('_value', Thrift.Type.STRING, 3);
    output.writeString(this._value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_SetSceneValueListSelection_String_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
OpenZWave.RemoteManager_SetSceneValueListSelection_String_result.prototype = {};
OpenZWave.RemoteManager_SetSceneValueListSelection_String_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_SetSceneValueListSelection_String_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_SetSceneValueListSelection_String_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_SetSceneValueListSelection_Int32_args = function(args) {
  this._sceneId = null;
  this._valueId = null;
  this._value = null;
  if (args) {
    if (args._sceneId !== undefined) {
      this._sceneId = args._sceneId;
    }
    if (args._valueId !== undefined) {
      this._valueId = args._valueId;
    }
    if (args._value !== undefined) {
      this._value = args._value;
    }
  }
};
OpenZWave.RemoteManager_SetSceneValueListSelection_Int32_args.prototype = {};
OpenZWave.RemoteManager_SetSceneValueListSelection_Int32_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BYTE) {
        this._sceneId = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this._valueId = new OpenZWave.RemoteValueID();
        this._valueId.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this._value = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_SetSceneValueListSelection_Int32_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_SetSceneValueListSelection_Int32_args');
  if (this._sceneId) {
    output.writeFieldBegin('_sceneId', Thrift.Type.BYTE, 1);
    output.writeByte(this._sceneId);
    output.writeFieldEnd();
  }
  if (this._valueId) {
    output.writeFieldBegin('_valueId', Thrift.Type.STRUCT, 2);
    this._valueId.write(output);
    output.writeFieldEnd();
  }
  if (this._value) {
    output.writeFieldBegin('_value', Thrift.Type.I32, 3);
    output.writeI32(this._value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_SetSceneValueListSelection_Int32_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
OpenZWave.RemoteManager_SetSceneValueListSelection_Int32_result.prototype = {};
OpenZWave.RemoteManager_SetSceneValueListSelection_Int32_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_SetSceneValueListSelection_Int32_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_SetSceneValueListSelection_Int32_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_GetSceneLabel_args = function(args) {
  this._sceneId = null;
  if (args) {
    if (args._sceneId !== undefined) {
      this._sceneId = args._sceneId;
    }
  }
};
OpenZWave.RemoteManager_GetSceneLabel_args.prototype = {};
OpenZWave.RemoteManager_GetSceneLabel_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BYTE) {
        this._sceneId = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_GetSceneLabel_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_GetSceneLabel_args');
  if (this._sceneId) {
    output.writeFieldBegin('_sceneId', Thrift.Type.BYTE, 1);
    output.writeByte(this._sceneId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_GetSceneLabel_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
OpenZWave.RemoteManager_GetSceneLabel_result.prototype = {};
OpenZWave.RemoteManager_GetSceneLabel_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_GetSceneLabel_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_GetSceneLabel_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_SetSceneLabel_args = function(args) {
  this._sceneId = null;
  this._value = null;
  if (args) {
    if (args._sceneId !== undefined) {
      this._sceneId = args._sceneId;
    }
    if (args._value !== undefined) {
      this._value = args._value;
    }
  }
};
OpenZWave.RemoteManager_SetSceneLabel_args.prototype = {};
OpenZWave.RemoteManager_SetSceneLabel_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BYTE) {
        this._sceneId = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this._value = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_SetSceneLabel_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_SetSceneLabel_args');
  if (this._sceneId) {
    output.writeFieldBegin('_sceneId', Thrift.Type.BYTE, 1);
    output.writeByte(this._sceneId);
    output.writeFieldEnd();
  }
  if (this._value) {
    output.writeFieldBegin('_value', Thrift.Type.STRING, 2);
    output.writeString(this._value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_SetSceneLabel_result = function(args) {
};
OpenZWave.RemoteManager_SetSceneLabel_result.prototype = {};
OpenZWave.RemoteManager_SetSceneLabel_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_SetSceneLabel_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_SetSceneLabel_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_SceneExists_args = function(args) {
  this._sceneId = null;
  if (args) {
    if (args._sceneId !== undefined) {
      this._sceneId = args._sceneId;
    }
  }
};
OpenZWave.RemoteManager_SceneExists_args.prototype = {};
OpenZWave.RemoteManager_SceneExists_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BYTE) {
        this._sceneId = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_SceneExists_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_SceneExists_args');
  if (this._sceneId) {
    output.writeFieldBegin('_sceneId', Thrift.Type.BYTE, 1);
    output.writeByte(this._sceneId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_SceneExists_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
OpenZWave.RemoteManager_SceneExists_result.prototype = {};
OpenZWave.RemoteManager_SceneExists_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_SceneExists_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_SceneExists_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_ActivateScene_args = function(args) {
  this._sceneId = null;
  if (args) {
    if (args._sceneId !== undefined) {
      this._sceneId = args._sceneId;
    }
  }
};
OpenZWave.RemoteManager_ActivateScene_args.prototype = {};
OpenZWave.RemoteManager_ActivateScene_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BYTE) {
        this._sceneId = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_ActivateScene_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_ActivateScene_args');
  if (this._sceneId) {
    output.writeFieldBegin('_sceneId', Thrift.Type.BYTE, 1);
    output.writeByte(this._sceneId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_ActivateScene_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
OpenZWave.RemoteManager_ActivateScene_result.prototype = {};
OpenZWave.RemoteManager_ActivateScene_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_ActivateScene_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_ActivateScene_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_GetDriverStatistics_args = function(args) {
  this._homeId = null;
  if (args) {
    if (args._homeId !== undefined) {
      this._homeId = args._homeId;
    }
  }
};
OpenZWave.RemoteManager_GetDriverStatistics_args.prototype = {};
OpenZWave.RemoteManager_GetDriverStatistics_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this._homeId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_GetDriverStatistics_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_GetDriverStatistics_args');
  if (this._homeId) {
    output.writeFieldBegin('_homeId', Thrift.Type.I32, 1);
    output.writeI32(this._homeId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_GetDriverStatistics_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
OpenZWave.RemoteManager_GetDriverStatistics_result.prototype = {};
OpenZWave.RemoteManager_GetDriverStatistics_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new OpenZWave.GetDriverStatisticsReturnStruct();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_GetDriverStatistics_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_GetDriverStatistics_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_SendAllValues_args = function(args) {
};
OpenZWave.RemoteManager_SendAllValues_args.prototype = {};
OpenZWave.RemoteManager_SendAllValues_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_SendAllValues_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_SendAllValues_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManager_SendAllValues_result = function(args) {
};
OpenZWave.RemoteManager_SendAllValues_result.prototype = {};
OpenZWave.RemoteManager_SendAllValues_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenZWave.RemoteManager_SendAllValues_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteManager_SendAllValues_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenZWave.RemoteManagerClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
OpenZWave.RemoteManagerClient.prototype = {};
OpenZWave.RemoteManagerClient.prototype.WriteConfig = function(_homeId) {
  this.send_WriteConfig(_homeId);
  this.recv_WriteConfig();
};

OpenZWave.RemoteManagerClient.prototype.send_WriteConfig = function(_homeId) {
  this.output.writeMessageBegin('WriteConfig', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenZWave.RemoteManager_WriteConfig_args();
  args._homeId = _homeId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

OpenZWave.RemoteManagerClient.prototype.recv_WriteConfig = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenZWave.RemoteManager_WriteConfig_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};
OpenZWave.RemoteManagerClient.prototype.GetControllerNodeId = function(_homeId) {
  this.send_GetControllerNodeId(_homeId);
  return this.recv_GetControllerNodeId();
};

OpenZWave.RemoteManagerClient.prototype.send_GetControllerNodeId = function(_homeId) {
  this.output.writeMessageBegin('GetControllerNodeId', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenZWave.RemoteManager_GetControllerNodeId_args();
  args._homeId = _homeId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

OpenZWave.RemoteManagerClient.prototype.recv_GetControllerNodeId = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenZWave.RemoteManager_GetControllerNodeId_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'GetControllerNodeId failed: unknown result';
};
OpenZWave.RemoteManagerClient.prototype.IsPrimaryController = function(_homeId) {
  this.send_IsPrimaryController(_homeId);
  return this.recv_IsPrimaryController();
};

OpenZWave.RemoteManagerClient.prototype.send_IsPrimaryController = function(_homeId) {
  this.output.writeMessageBegin('IsPrimaryController', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenZWave.RemoteManager_IsPrimaryController_args();
  args._homeId = _homeId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

OpenZWave.RemoteManagerClient.prototype.recv_IsPrimaryController = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenZWave.RemoteManager_IsPrimaryController_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'IsPrimaryController failed: unknown result';
};
OpenZWave.RemoteManagerClient.prototype.IsStaticUpdateController = function(_homeId) {
  this.send_IsStaticUpdateController(_homeId);
  return this.recv_IsStaticUpdateController();
};

OpenZWave.RemoteManagerClient.prototype.send_IsStaticUpdateController = function(_homeId) {
  this.output.writeMessageBegin('IsStaticUpdateController', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenZWave.RemoteManager_IsStaticUpdateController_args();
  args._homeId = _homeId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

OpenZWave.RemoteManagerClient.prototype.recv_IsStaticUpdateController = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenZWave.RemoteManager_IsStaticUpdateController_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'IsStaticUpdateController failed: unknown result';
};
OpenZWave.RemoteManagerClient.prototype.IsBridgeController = function(_homeId) {
  this.send_IsBridgeController(_homeId);
  return this.recv_IsBridgeController();
};

OpenZWave.RemoteManagerClient.prototype.send_IsBridgeController = function(_homeId) {
  this.output.writeMessageBegin('IsBridgeController', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenZWave.RemoteManager_IsBridgeController_args();
  args._homeId = _homeId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

OpenZWave.RemoteManagerClient.prototype.recv_IsBridgeController = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenZWave.RemoteManager_IsBridgeController_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'IsBridgeController failed: unknown result';
};
OpenZWave.RemoteManagerClient.prototype.GetLibraryVersion = function(_homeId) {
  this.send_GetLibraryVersion(_homeId);
  return this.recv_GetLibraryVersion();
};

OpenZWave.RemoteManagerClient.prototype.send_GetLibraryVersion = function(_homeId) {
  this.output.writeMessageBegin('GetLibraryVersion', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenZWave.RemoteManager_GetLibraryVersion_args();
  args._homeId = _homeId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

OpenZWave.RemoteManagerClient.prototype.recv_GetLibraryVersion = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenZWave.RemoteManager_GetLibraryVersion_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'GetLibraryVersion failed: unknown result';
};
OpenZWave.RemoteManagerClient.prototype.GetLibraryTypeName = function(_homeId) {
  this.send_GetLibraryTypeName(_homeId);
  return this.recv_GetLibraryTypeName();
};

OpenZWave.RemoteManagerClient.prototype.send_GetLibraryTypeName = function(_homeId) {
  this.output.writeMessageBegin('GetLibraryTypeName', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenZWave.RemoteManager_GetLibraryTypeName_args();
  args._homeId = _homeId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

OpenZWave.RemoteManagerClient.prototype.recv_GetLibraryTypeName = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenZWave.RemoteManager_GetLibraryTypeName_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'GetLibraryTypeName failed: unknown result';
};
OpenZWave.RemoteManagerClient.prototype.GetSendQueueCount = function(_homeId) {
  this.send_GetSendQueueCount(_homeId);
  return this.recv_GetSendQueueCount();
};

OpenZWave.RemoteManagerClient.prototype.send_GetSendQueueCount = function(_homeId) {
  this.output.writeMessageBegin('GetSendQueueCount', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenZWave.RemoteManager_GetSendQueueCount_args();
  args._homeId = _homeId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

OpenZWave.RemoteManagerClient.prototype.recv_GetSendQueueCount = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenZWave.RemoteManager_GetSendQueueCount_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'GetSendQueueCount failed: unknown result';
};
OpenZWave.RemoteManagerClient.prototype.GetPollInterval = function() {
  this.send_GetPollInterval();
  return this.recv_GetPollInterval();
};

OpenZWave.RemoteManagerClient.prototype.send_GetPollInterval = function() {
  this.output.writeMessageBegin('GetPollInterval', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenZWave.RemoteManager_GetPollInterval_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

OpenZWave.RemoteManagerClient.prototype.recv_GetPollInterval = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenZWave.RemoteManager_GetPollInterval_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'GetPollInterval failed: unknown result';
};
OpenZWave.RemoteManagerClient.prototype.SetPollInterval = function(_seconds) {
  this.send_SetPollInterval(_seconds);
  this.recv_SetPollInterval();
};

OpenZWave.RemoteManagerClient.prototype.send_SetPollInterval = function(_seconds) {
  this.output.writeMessageBegin('SetPollInterval', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenZWave.RemoteManager_SetPollInterval_args();
  args._seconds = _seconds;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

OpenZWave.RemoteManagerClient.prototype.recv_SetPollInterval = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenZWave.RemoteManager_SetPollInterval_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};
OpenZWave.RemoteManagerClient.prototype.EnablePoll = function(_valueId) {
  this.send_EnablePoll(_valueId);
  return this.recv_EnablePoll();
};

OpenZWave.RemoteManagerClient.prototype.send_EnablePoll = function(_valueId) {
  this.output.writeMessageBegin('EnablePoll', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenZWave.RemoteManager_EnablePoll_args();
  args._valueId = _valueId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

OpenZWave.RemoteManagerClient.prototype.recv_EnablePoll = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenZWave.RemoteManager_EnablePoll_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'EnablePoll failed: unknown result';
};
OpenZWave.RemoteManagerClient.prototype.DisablePoll = function(_valueId) {
  this.send_DisablePoll(_valueId);
  return this.recv_DisablePoll();
};

OpenZWave.RemoteManagerClient.prototype.send_DisablePoll = function(_valueId) {
  this.output.writeMessageBegin('DisablePoll', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenZWave.RemoteManager_DisablePoll_args();
  args._valueId = _valueId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

OpenZWave.RemoteManagerClient.prototype.recv_DisablePoll = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenZWave.RemoteManager_DisablePoll_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'DisablePoll failed: unknown result';
};
OpenZWave.RemoteManagerClient.prototype.isPolled = function(_valueId) {
  this.send_isPolled(_valueId);
  return this.recv_isPolled();
};

OpenZWave.RemoteManagerClient.prototype.send_isPolled = function(_valueId) {
  this.output.writeMessageBegin('isPolled', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenZWave.RemoteManager_isPolled_args();
  args._valueId = _valueId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

OpenZWave.RemoteManagerClient.prototype.recv_isPolled = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenZWave.RemoteManager_isPolled_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'isPolled failed: unknown result';
};
OpenZWave.RemoteManagerClient.prototype.RefreshNodeInfo = function(_homeId, _nodeId) {
  this.send_RefreshNodeInfo(_homeId, _nodeId);
  return this.recv_RefreshNodeInfo();
};

OpenZWave.RemoteManagerClient.prototype.send_RefreshNodeInfo = function(_homeId, _nodeId) {
  this.output.writeMessageBegin('RefreshNodeInfo', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenZWave.RemoteManager_RefreshNodeInfo_args();
  args._homeId = _homeId;
  args._nodeId = _nodeId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

OpenZWave.RemoteManagerClient.prototype.recv_RefreshNodeInfo = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenZWave.RemoteManager_RefreshNodeInfo_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'RefreshNodeInfo failed: unknown result';
};
OpenZWave.RemoteManagerClient.prototype.RequestNodeState = function(_homeId, _nodeId) {
  this.send_RequestNodeState(_homeId, _nodeId);
  return this.recv_RequestNodeState();
};

OpenZWave.RemoteManagerClient.prototype.send_RequestNodeState = function(_homeId, _nodeId) {
  this.output.writeMessageBegin('RequestNodeState', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenZWave.RemoteManager_RequestNodeState_args();
  args._homeId = _homeId;
  args._nodeId = _nodeId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

OpenZWave.RemoteManagerClient.prototype.recv_RequestNodeState = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenZWave.RemoteManager_RequestNodeState_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'RequestNodeState failed: unknown result';
};
OpenZWave.RemoteManagerClient.prototype.RequestNodeDynamic = function(_homeId, _nodeId) {
  this.send_RequestNodeDynamic(_homeId, _nodeId);
  return this.recv_RequestNodeDynamic();
};

OpenZWave.RemoteManagerClient.prototype.send_RequestNodeDynamic = function(_homeId, _nodeId) {
  this.output.writeMessageBegin('RequestNodeDynamic', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenZWave.RemoteManager_RequestNodeDynamic_args();
  args._homeId = _homeId;
  args._nodeId = _nodeId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

OpenZWave.RemoteManagerClient.prototype.recv_RequestNodeDynamic = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenZWave.RemoteManager_RequestNodeDynamic_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'RequestNodeDynamic failed: unknown result';
};
OpenZWave.RemoteManagerClient.prototype.IsNodeListeningDevice = function(_homeId, _nodeId) {
  this.send_IsNodeListeningDevice(_homeId, _nodeId);
  return this.recv_IsNodeListeningDevice();
};

OpenZWave.RemoteManagerClient.prototype.send_IsNodeListeningDevice = function(_homeId, _nodeId) {
  this.output.writeMessageBegin('IsNodeListeningDevice', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenZWave.RemoteManager_IsNodeListeningDevice_args();
  args._homeId = _homeId;
  args._nodeId = _nodeId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

OpenZWave.RemoteManagerClient.prototype.recv_IsNodeListeningDevice = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenZWave.RemoteManager_IsNodeListeningDevice_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'IsNodeListeningDevice failed: unknown result';
};
OpenZWave.RemoteManagerClient.prototype.IsNodeFrequentListeningDevice = function(_homeId, _nodeId) {
  this.send_IsNodeFrequentListeningDevice(_homeId, _nodeId);
  return this.recv_IsNodeFrequentListeningDevice();
};

OpenZWave.RemoteManagerClient.prototype.send_IsNodeFrequentListeningDevice = function(_homeId, _nodeId) {
  this.output.writeMessageBegin('IsNodeFrequentListeningDevice', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenZWave.RemoteManager_IsNodeFrequentListeningDevice_args();
  args._homeId = _homeId;
  args._nodeId = _nodeId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

OpenZWave.RemoteManagerClient.prototype.recv_IsNodeFrequentListeningDevice = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenZWave.RemoteManager_IsNodeFrequentListeningDevice_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'IsNodeFrequentListeningDevice failed: unknown result';
};
OpenZWave.RemoteManagerClient.prototype.IsNodeBeamingDevice = function(_homeId, _nodeId) {
  this.send_IsNodeBeamingDevice(_homeId, _nodeId);
  return this.recv_IsNodeBeamingDevice();
};

OpenZWave.RemoteManagerClient.prototype.send_IsNodeBeamingDevice = function(_homeId, _nodeId) {
  this.output.writeMessageBegin('IsNodeBeamingDevice', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenZWave.RemoteManager_IsNodeBeamingDevice_args();
  args._homeId = _homeId;
  args._nodeId = _nodeId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

OpenZWave.RemoteManagerClient.prototype.recv_IsNodeBeamingDevice = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenZWave.RemoteManager_IsNodeBeamingDevice_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'IsNodeBeamingDevice failed: unknown result';
};
OpenZWave.RemoteManagerClient.prototype.IsNodeRoutingDevice = function(_homeId, _nodeId) {
  this.send_IsNodeRoutingDevice(_homeId, _nodeId);
  return this.recv_IsNodeRoutingDevice();
};

OpenZWave.RemoteManagerClient.prototype.send_IsNodeRoutingDevice = function(_homeId, _nodeId) {
  this.output.writeMessageBegin('IsNodeRoutingDevice', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenZWave.RemoteManager_IsNodeRoutingDevice_args();
  args._homeId = _homeId;
  args._nodeId = _nodeId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

OpenZWave.RemoteManagerClient.prototype.recv_IsNodeRoutingDevice = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenZWave.RemoteManager_IsNodeRoutingDevice_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'IsNodeRoutingDevice failed: unknown result';
};
OpenZWave.RemoteManagerClient.prototype.IsNodeSecurityDevice = function(_homeId, _nodeId) {
  this.send_IsNodeSecurityDevice(_homeId, _nodeId);
  return this.recv_IsNodeSecurityDevice();
};

OpenZWave.RemoteManagerClient.prototype.send_IsNodeSecurityDevice = function(_homeId, _nodeId) {
  this.output.writeMessageBegin('IsNodeSecurityDevice', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenZWave.RemoteManager_IsNodeSecurityDevice_args();
  args._homeId = _homeId;
  args._nodeId = _nodeId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

OpenZWave.RemoteManagerClient.prototype.recv_IsNodeSecurityDevice = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenZWave.RemoteManager_IsNodeSecurityDevice_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'IsNodeSecurityDevice failed: unknown result';
};
OpenZWave.RemoteManagerClient.prototype.GetNodeMaxBaudRate = function(_homeId, _nodeId) {
  this.send_GetNodeMaxBaudRate(_homeId, _nodeId);
  return this.recv_GetNodeMaxBaudRate();
};

OpenZWave.RemoteManagerClient.prototype.send_GetNodeMaxBaudRate = function(_homeId, _nodeId) {
  this.output.writeMessageBegin('GetNodeMaxBaudRate', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenZWave.RemoteManager_GetNodeMaxBaudRate_args();
  args._homeId = _homeId;
  args._nodeId = _nodeId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

OpenZWave.RemoteManagerClient.prototype.recv_GetNodeMaxBaudRate = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenZWave.RemoteManager_GetNodeMaxBaudRate_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'GetNodeMaxBaudRate failed: unknown result';
};
OpenZWave.RemoteManagerClient.prototype.GetNodeVersion = function(_homeId, _nodeId) {
  this.send_GetNodeVersion(_homeId, _nodeId);
  return this.recv_GetNodeVersion();
};

OpenZWave.RemoteManagerClient.prototype.send_GetNodeVersion = function(_homeId, _nodeId) {
  this.output.writeMessageBegin('GetNodeVersion', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenZWave.RemoteManager_GetNodeVersion_args();
  args._homeId = _homeId;
  args._nodeId = _nodeId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

OpenZWave.RemoteManagerClient.prototype.recv_GetNodeVersion = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenZWave.RemoteManager_GetNodeVersion_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'GetNodeVersion failed: unknown result';
};
OpenZWave.RemoteManagerClient.prototype.GetNodeBasic = function(_homeId, _nodeId) {
  this.send_GetNodeBasic(_homeId, _nodeId);
  return this.recv_GetNodeBasic();
};

OpenZWave.RemoteManagerClient.prototype.send_GetNodeBasic = function(_homeId, _nodeId) {
  this.output.writeMessageBegin('GetNodeBasic', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenZWave.RemoteManager_GetNodeBasic_args();
  args._homeId = _homeId;
  args._nodeId = _nodeId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

OpenZWave.RemoteManagerClient.prototype.recv_GetNodeBasic = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenZWave.RemoteManager_GetNodeBasic_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'GetNodeBasic failed: unknown result';
};
OpenZWave.RemoteManagerClient.prototype.GetNodeGeneric = function(_homeId, _nodeId) {
  this.send_GetNodeGeneric(_homeId, _nodeId);
  return this.recv_GetNodeGeneric();
};

OpenZWave.RemoteManagerClient.prototype.send_GetNodeGeneric = function(_homeId, _nodeId) {
  this.output.writeMessageBegin('GetNodeGeneric', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenZWave.RemoteManager_GetNodeGeneric_args();
  args._homeId = _homeId;
  args._nodeId = _nodeId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

OpenZWave.RemoteManagerClient.prototype.recv_GetNodeGeneric = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenZWave.RemoteManager_GetNodeGeneric_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'GetNodeGeneric failed: unknown result';
};
OpenZWave.RemoteManagerClient.prototype.GetNodeSpecific = function(_homeId, _nodeId) {
  this.send_GetNodeSpecific(_homeId, _nodeId);
  return this.recv_GetNodeSpecific();
};

OpenZWave.RemoteManagerClient.prototype.send_GetNodeSpecific = function(_homeId, _nodeId) {
  this.output.writeMessageBegin('GetNodeSpecific', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenZWave.RemoteManager_GetNodeSpecific_args();
  args._homeId = _homeId;
  args._nodeId = _nodeId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

OpenZWave.RemoteManagerClient.prototype.recv_GetNodeSpecific = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenZWave.RemoteManager_GetNodeSpecific_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'GetNodeSpecific failed: unknown result';
};
OpenZWave.RemoteManagerClient.prototype.GetNodeType = function(_homeId, _nodeId) {
  this.send_GetNodeType(_homeId, _nodeId);
  return this.recv_GetNodeType();
};

OpenZWave.RemoteManagerClient.prototype.send_GetNodeType = function(_homeId, _nodeId) {
  this.output.writeMessageBegin('GetNodeType', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenZWave.RemoteManager_GetNodeType_args();
  args._homeId = _homeId;
  args._nodeId = _nodeId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

OpenZWave.RemoteManagerClient.prototype.recv_GetNodeType = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenZWave.RemoteManager_GetNodeType_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'GetNodeType failed: unknown result';
};
OpenZWave.RemoteManagerClient.prototype.GetNodeNeighbors = function(_homeId, _nodeId) {
  this.send_GetNodeNeighbors(_homeId, _nodeId);
  return this.recv_GetNodeNeighbors();
};

OpenZWave.RemoteManagerClient.prototype.send_GetNodeNeighbors = function(_homeId, _nodeId) {
  this.output.writeMessageBegin('GetNodeNeighbors', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenZWave.RemoteManager_GetNodeNeighbors_args();
  args._homeId = _homeId;
  args._nodeId = _nodeId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

OpenZWave.RemoteManagerClient.prototype.recv_GetNodeNeighbors = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenZWave.RemoteManager_GetNodeNeighbors_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'GetNodeNeighbors failed: unknown result';
};
OpenZWave.RemoteManagerClient.prototype.GetNodeManufacturerName = function(_homeId, _nodeId) {
  this.send_GetNodeManufacturerName(_homeId, _nodeId);
  return this.recv_GetNodeManufacturerName();
};

OpenZWave.RemoteManagerClient.prototype.send_GetNodeManufacturerName = function(_homeId, _nodeId) {
  this.output.writeMessageBegin('GetNodeManufacturerName', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenZWave.RemoteManager_GetNodeManufacturerName_args();
  args._homeId = _homeId;
  args._nodeId = _nodeId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

OpenZWave.RemoteManagerClient.prototype.recv_GetNodeManufacturerName = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenZWave.RemoteManager_GetNodeManufacturerName_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'GetNodeManufacturerName failed: unknown result';
};
OpenZWave.RemoteManagerClient.prototype.GetNodeProductName = function(_homeId, _nodeId) {
  this.send_GetNodeProductName(_homeId, _nodeId);
  return this.recv_GetNodeProductName();
};

OpenZWave.RemoteManagerClient.prototype.send_GetNodeProductName = function(_homeId, _nodeId) {
  this.output.writeMessageBegin('GetNodeProductName', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenZWave.RemoteManager_GetNodeProductName_args();
  args._homeId = _homeId;
  args._nodeId = _nodeId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

OpenZWave.RemoteManagerClient.prototype.recv_GetNodeProductName = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenZWave.RemoteManager_GetNodeProductName_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'GetNodeProductName failed: unknown result';
};
OpenZWave.RemoteManagerClient.prototype.GetNodeName = function(_homeId, _nodeId) {
  this.send_GetNodeName(_homeId, _nodeId);
  return this.recv_GetNodeName();
};

OpenZWave.RemoteManagerClient.prototype.send_GetNodeName = function(_homeId, _nodeId) {
  this.output.writeMessageBegin('GetNodeName', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenZWave.RemoteManager_GetNodeName_args();
  args._homeId = _homeId;
  args._nodeId = _nodeId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

OpenZWave.RemoteManagerClient.prototype.recv_GetNodeName = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenZWave.RemoteManager_GetNodeName_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'GetNodeName failed: unknown result';
};
OpenZWave.RemoteManagerClient.prototype.GetNodeLocation = function(_homeId, _nodeId) {
  this.send_GetNodeLocation(_homeId, _nodeId);
  return this.recv_GetNodeLocation();
};

OpenZWave.RemoteManagerClient.prototype.send_GetNodeLocation = function(_homeId, _nodeId) {
  this.output.writeMessageBegin('GetNodeLocation', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenZWave.RemoteManager_GetNodeLocation_args();
  args._homeId = _homeId;
  args._nodeId = _nodeId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

OpenZWave.RemoteManagerClient.prototype.recv_GetNodeLocation = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenZWave.RemoteManager_GetNodeLocation_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'GetNodeLocation failed: unknown result';
};
OpenZWave.RemoteManagerClient.prototype.GetNodeManufacturerId = function(_homeId, _nodeId) {
  this.send_GetNodeManufacturerId(_homeId, _nodeId);
  return this.recv_GetNodeManufacturerId();
};

OpenZWave.RemoteManagerClient.prototype.send_GetNodeManufacturerId = function(_homeId, _nodeId) {
  this.output.writeMessageBegin('GetNodeManufacturerId', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenZWave.RemoteManager_GetNodeManufacturerId_args();
  args._homeId = _homeId;
  args._nodeId = _nodeId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

OpenZWave.RemoteManagerClient.prototype.recv_GetNodeManufacturerId = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenZWave.RemoteManager_GetNodeManufacturerId_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'GetNodeManufacturerId failed: unknown result';
};
OpenZWave.RemoteManagerClient.prototype.GetNodeProductType = function(_homeId, _nodeId) {
  this.send_GetNodeProductType(_homeId, _nodeId);
  return this.recv_GetNodeProductType();
};

OpenZWave.RemoteManagerClient.prototype.send_GetNodeProductType = function(_homeId, _nodeId) {
  this.output.writeMessageBegin('GetNodeProductType', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenZWave.RemoteManager_GetNodeProductType_args();
  args._homeId = _homeId;
  args._nodeId = _nodeId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

OpenZWave.RemoteManagerClient.prototype.recv_GetNodeProductType = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenZWave.RemoteManager_GetNodeProductType_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'GetNodeProductType failed: unknown result';
};
OpenZWave.RemoteManagerClient.prototype.GetNodeProductId = function(_homeId, _nodeId) {
  this.send_GetNodeProductId(_homeId, _nodeId);
  return this.recv_GetNodeProductId();
};

OpenZWave.RemoteManagerClient.prototype.send_GetNodeProductId = function(_homeId, _nodeId) {
  this.output.writeMessageBegin('GetNodeProductId', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenZWave.RemoteManager_GetNodeProductId_args();
  args._homeId = _homeId;
  args._nodeId = _nodeId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

OpenZWave.RemoteManagerClient.prototype.recv_GetNodeProductId = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenZWave.RemoteManager_GetNodeProductId_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'GetNodeProductId failed: unknown result';
};
OpenZWave.RemoteManagerClient.prototype.SetNodeManufacturerName = function(_homeId, _nodeId, _manufacturerName) {
  this.send_SetNodeManufacturerName(_homeId, _nodeId, _manufacturerName);
  this.recv_SetNodeManufacturerName();
};

OpenZWave.RemoteManagerClient.prototype.send_SetNodeManufacturerName = function(_homeId, _nodeId, _manufacturerName) {
  this.output.writeMessageBegin('SetNodeManufacturerName', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenZWave.RemoteManager_SetNodeManufacturerName_args();
  args._homeId = _homeId;
  args._nodeId = _nodeId;
  args._manufacturerName = _manufacturerName;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

OpenZWave.RemoteManagerClient.prototype.recv_SetNodeManufacturerName = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenZWave.RemoteManager_SetNodeManufacturerName_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};
OpenZWave.RemoteManagerClient.prototype.SetNodeProductName = function(_homeId, _nodeId, _productName) {
  this.send_SetNodeProductName(_homeId, _nodeId, _productName);
  this.recv_SetNodeProductName();
};

OpenZWave.RemoteManagerClient.prototype.send_SetNodeProductName = function(_homeId, _nodeId, _productName) {
  this.output.writeMessageBegin('SetNodeProductName', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenZWave.RemoteManager_SetNodeProductName_args();
  args._homeId = _homeId;
  args._nodeId = _nodeId;
  args._productName = _productName;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

OpenZWave.RemoteManagerClient.prototype.recv_SetNodeProductName = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenZWave.RemoteManager_SetNodeProductName_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};
OpenZWave.RemoteManagerClient.prototype.SetNodeName = function(_homeId, _nodeId, _nodeName) {
  this.send_SetNodeName(_homeId, _nodeId, _nodeName);
  this.recv_SetNodeName();
};

OpenZWave.RemoteManagerClient.prototype.send_SetNodeName = function(_homeId, _nodeId, _nodeName) {
  this.output.writeMessageBegin('SetNodeName', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenZWave.RemoteManager_SetNodeName_args();
  args._homeId = _homeId;
  args._nodeId = _nodeId;
  args._nodeName = _nodeName;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

OpenZWave.RemoteManagerClient.prototype.recv_SetNodeName = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenZWave.RemoteManager_SetNodeName_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};
OpenZWave.RemoteManagerClient.prototype.SetNodeLocation = function(_homeId, _nodeId, _location) {
  this.send_SetNodeLocation(_homeId, _nodeId, _location);
  this.recv_SetNodeLocation();
};

OpenZWave.RemoteManagerClient.prototype.send_SetNodeLocation = function(_homeId, _nodeId, _location) {
  this.output.writeMessageBegin('SetNodeLocation', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenZWave.RemoteManager_SetNodeLocation_args();
  args._homeId = _homeId;
  args._nodeId = _nodeId;
  args._location = _location;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

OpenZWave.RemoteManagerClient.prototype.recv_SetNodeLocation = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenZWave.RemoteManager_SetNodeLocation_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};
OpenZWave.RemoteManagerClient.prototype.SetNodeOn = function(_homeId, _nodeId) {
  this.send_SetNodeOn(_homeId, _nodeId);
  this.recv_SetNodeOn();
};

OpenZWave.RemoteManagerClient.prototype.send_SetNodeOn = function(_homeId, _nodeId) {
  this.output.writeMessageBegin('SetNodeOn', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenZWave.RemoteManager_SetNodeOn_args();
  args._homeId = _homeId;
  args._nodeId = _nodeId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

OpenZWave.RemoteManagerClient.prototype.recv_SetNodeOn = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenZWave.RemoteManager_SetNodeOn_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};
OpenZWave.RemoteManagerClient.prototype.SetNodeOff = function(_homeId, _nodeId) {
  this.send_SetNodeOff(_homeId, _nodeId);
  this.recv_SetNodeOff();
};

OpenZWave.RemoteManagerClient.prototype.send_SetNodeOff = function(_homeId, _nodeId) {
  this.output.writeMessageBegin('SetNodeOff', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenZWave.RemoteManager_SetNodeOff_args();
  args._homeId = _homeId;
  args._nodeId = _nodeId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

OpenZWave.RemoteManagerClient.prototype.recv_SetNodeOff = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenZWave.RemoteManager_SetNodeOff_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};
OpenZWave.RemoteManagerClient.prototype.SetNodeLevel = function(_homeId, _nodeId, _level) {
  this.send_SetNodeLevel(_homeId, _nodeId, _level);
  this.recv_SetNodeLevel();
};

OpenZWave.RemoteManagerClient.prototype.send_SetNodeLevel = function(_homeId, _nodeId, _level) {
  this.output.writeMessageBegin('SetNodeLevel', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenZWave.RemoteManager_SetNodeLevel_args();
  args._homeId = _homeId;
  args._nodeId = _nodeId;
  args._level = _level;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

OpenZWave.RemoteManagerClient.prototype.recv_SetNodeLevel = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenZWave.RemoteManager_SetNodeLevel_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};
OpenZWave.RemoteManagerClient.prototype.IsNodeInfoReceived = function(_homeId, _nodeId) {
  this.send_IsNodeInfoReceived(_homeId, _nodeId);
  return this.recv_IsNodeInfoReceived();
};

OpenZWave.RemoteManagerClient.prototype.send_IsNodeInfoReceived = function(_homeId, _nodeId) {
  this.output.writeMessageBegin('IsNodeInfoReceived', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenZWave.RemoteManager_IsNodeInfoReceived_args();
  args._homeId = _homeId;
  args._nodeId = _nodeId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

OpenZWave.RemoteManagerClient.prototype.recv_IsNodeInfoReceived = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenZWave.RemoteManager_IsNodeInfoReceived_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'IsNodeInfoReceived failed: unknown result';
};
OpenZWave.RemoteManagerClient.prototype.GetNodeClassInformation = function(_homeId, _nodeId, _commandClassId) {
  this.send_GetNodeClassInformation(_homeId, _nodeId, _commandClassId);
  return this.recv_GetNodeClassInformation();
};

OpenZWave.RemoteManagerClient.prototype.send_GetNodeClassInformation = function(_homeId, _nodeId, _commandClassId) {
  this.output.writeMessageBegin('GetNodeClassInformation', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenZWave.RemoteManager_GetNodeClassInformation_args();
  args._homeId = _homeId;
  args._nodeId = _nodeId;
  args._commandClassId = _commandClassId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

OpenZWave.RemoteManagerClient.prototype.recv_GetNodeClassInformation = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenZWave.RemoteManager_GetNodeClassInformation_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'GetNodeClassInformation failed: unknown result';
};
OpenZWave.RemoteManagerClient.prototype.GetValueLabel = function(_id) {
  this.send_GetValueLabel(_id);
  return this.recv_GetValueLabel();
};

OpenZWave.RemoteManagerClient.prototype.send_GetValueLabel = function(_id) {
  this.output.writeMessageBegin('GetValueLabel', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenZWave.RemoteManager_GetValueLabel_args();
  args._id = _id;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

OpenZWave.RemoteManagerClient.prototype.recv_GetValueLabel = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenZWave.RemoteManager_GetValueLabel_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'GetValueLabel failed: unknown result';
};
OpenZWave.RemoteManagerClient.prototype.SetValueLabel = function(_id, _value) {
  this.send_SetValueLabel(_id, _value);
  this.recv_SetValueLabel();
};

OpenZWave.RemoteManagerClient.prototype.send_SetValueLabel = function(_id, _value) {
  this.output.writeMessageBegin('SetValueLabel', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenZWave.RemoteManager_SetValueLabel_args();
  args._id = _id;
  args._value = _value;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

OpenZWave.RemoteManagerClient.prototype.recv_SetValueLabel = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenZWave.RemoteManager_SetValueLabel_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};
OpenZWave.RemoteManagerClient.prototype.GetValueUnits = function(_id) {
  this.send_GetValueUnits(_id);
  return this.recv_GetValueUnits();
};

OpenZWave.RemoteManagerClient.prototype.send_GetValueUnits = function(_id) {
  this.output.writeMessageBegin('GetValueUnits', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenZWave.RemoteManager_GetValueUnits_args();
  args._id = _id;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

OpenZWave.RemoteManagerClient.prototype.recv_GetValueUnits = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenZWave.RemoteManager_GetValueUnits_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'GetValueUnits failed: unknown result';
};
OpenZWave.RemoteManagerClient.prototype.SetValueUnits = function(_id, _value) {
  this.send_SetValueUnits(_id, _value);
  this.recv_SetValueUnits();
};

OpenZWave.RemoteManagerClient.prototype.send_SetValueUnits = function(_id, _value) {
  this.output.writeMessageBegin('SetValueUnits', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenZWave.RemoteManager_SetValueUnits_args();
  args._id = _id;
  args._value = _value;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

OpenZWave.RemoteManagerClient.prototype.recv_SetValueUnits = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenZWave.RemoteManager_SetValueUnits_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};
OpenZWave.RemoteManagerClient.prototype.GetValueHelp = function(_id) {
  this.send_GetValueHelp(_id);
  return this.recv_GetValueHelp();
};

OpenZWave.RemoteManagerClient.prototype.send_GetValueHelp = function(_id) {
  this.output.writeMessageBegin('GetValueHelp', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenZWave.RemoteManager_GetValueHelp_args();
  args._id = _id;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

OpenZWave.RemoteManagerClient.prototype.recv_GetValueHelp = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenZWave.RemoteManager_GetValueHelp_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'GetValueHelp failed: unknown result';
};
OpenZWave.RemoteManagerClient.prototype.SetValueHelp = function(_id, _value) {
  this.send_SetValueHelp(_id, _value);
  this.recv_SetValueHelp();
};

OpenZWave.RemoteManagerClient.prototype.send_SetValueHelp = function(_id, _value) {
  this.output.writeMessageBegin('SetValueHelp', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenZWave.RemoteManager_SetValueHelp_args();
  args._id = _id;
  args._value = _value;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

OpenZWave.RemoteManagerClient.prototype.recv_SetValueHelp = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenZWave.RemoteManager_SetValueHelp_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};
OpenZWave.RemoteManagerClient.prototype.GetValueMin = function(_id) {
  this.send_GetValueMin(_id);
  return this.recv_GetValueMin();
};

OpenZWave.RemoteManagerClient.prototype.send_GetValueMin = function(_id) {
  this.output.writeMessageBegin('GetValueMin', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenZWave.RemoteManager_GetValueMin_args();
  args._id = _id;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

OpenZWave.RemoteManagerClient.prototype.recv_GetValueMin = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenZWave.RemoteManager_GetValueMin_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'GetValueMin failed: unknown result';
};
OpenZWave.RemoteManagerClient.prototype.GetValueMax = function(_id) {
  this.send_GetValueMax(_id);
  return this.recv_GetValueMax();
};

OpenZWave.RemoteManagerClient.prototype.send_GetValueMax = function(_id) {
  this.output.writeMessageBegin('GetValueMax', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenZWave.RemoteManager_GetValueMax_args();
  args._id = _id;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

OpenZWave.RemoteManagerClient.prototype.recv_GetValueMax = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenZWave.RemoteManager_GetValueMax_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'GetValueMax failed: unknown result';
};
OpenZWave.RemoteManagerClient.prototype.IsValueReadOnly = function(_id) {
  this.send_IsValueReadOnly(_id);
  return this.recv_IsValueReadOnly();
};

OpenZWave.RemoteManagerClient.prototype.send_IsValueReadOnly = function(_id) {
  this.output.writeMessageBegin('IsValueReadOnly', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenZWave.RemoteManager_IsValueReadOnly_args();
  args._id = _id;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

OpenZWave.RemoteManagerClient.prototype.recv_IsValueReadOnly = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenZWave.RemoteManager_IsValueReadOnly_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'IsValueReadOnly failed: unknown result';
};
OpenZWave.RemoteManagerClient.prototype.IsValueWriteOnly = function(_id) {
  this.send_IsValueWriteOnly(_id);
  return this.recv_IsValueWriteOnly();
};

OpenZWave.RemoteManagerClient.prototype.send_IsValueWriteOnly = function(_id) {
  this.output.writeMessageBegin('IsValueWriteOnly', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenZWave.RemoteManager_IsValueWriteOnly_args();
  args._id = _id;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

OpenZWave.RemoteManagerClient.prototype.recv_IsValueWriteOnly = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenZWave.RemoteManager_IsValueWriteOnly_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'IsValueWriteOnly failed: unknown result';
};
OpenZWave.RemoteManagerClient.prototype.IsValueSet = function(_id) {
  this.send_IsValueSet(_id);
  return this.recv_IsValueSet();
};

OpenZWave.RemoteManagerClient.prototype.send_IsValueSet = function(_id) {
  this.output.writeMessageBegin('IsValueSet', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenZWave.RemoteManager_IsValueSet_args();
  args._id = _id;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

OpenZWave.RemoteManagerClient.prototype.recv_IsValueSet = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenZWave.RemoteManager_IsValueSet_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'IsValueSet failed: unknown result';
};
OpenZWave.RemoteManagerClient.prototype.GetValueAsBool = function(_id) {
  this.send_GetValueAsBool(_id);
  return this.recv_GetValueAsBool();
};

OpenZWave.RemoteManagerClient.prototype.send_GetValueAsBool = function(_id) {
  this.output.writeMessageBegin('GetValueAsBool', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenZWave.RemoteManager_GetValueAsBool_args();
  args._id = _id;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

OpenZWave.RemoteManagerClient.prototype.recv_GetValueAsBool = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenZWave.RemoteManager_GetValueAsBool_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'GetValueAsBool failed: unknown result';
};
OpenZWave.RemoteManagerClient.prototype.GetValueAsByte = function(_id) {
  this.send_GetValueAsByte(_id);
  return this.recv_GetValueAsByte();
};

OpenZWave.RemoteManagerClient.prototype.send_GetValueAsByte = function(_id) {
  this.output.writeMessageBegin('GetValueAsByte', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenZWave.RemoteManager_GetValueAsByte_args();
  args._id = _id;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

OpenZWave.RemoteManagerClient.prototype.recv_GetValueAsByte = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenZWave.RemoteManager_GetValueAsByte_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'GetValueAsByte failed: unknown result';
};
OpenZWave.RemoteManagerClient.prototype.GetValueAsFloat = function(_id) {
  this.send_GetValueAsFloat(_id);
  return this.recv_GetValueAsFloat();
};

OpenZWave.RemoteManagerClient.prototype.send_GetValueAsFloat = function(_id) {
  this.output.writeMessageBegin('GetValueAsFloat', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenZWave.RemoteManager_GetValueAsFloat_args();
  args._id = _id;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

OpenZWave.RemoteManagerClient.prototype.recv_GetValueAsFloat = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenZWave.RemoteManager_GetValueAsFloat_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'GetValueAsFloat failed: unknown result';
};
OpenZWave.RemoteManagerClient.prototype.GetValueAsInt = function(_id) {
  this.send_GetValueAsInt(_id);
  return this.recv_GetValueAsInt();
};

OpenZWave.RemoteManagerClient.prototype.send_GetValueAsInt = function(_id) {
  this.output.writeMessageBegin('GetValueAsInt', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenZWave.RemoteManager_GetValueAsInt_args();
  args._id = _id;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

OpenZWave.RemoteManagerClient.prototype.recv_GetValueAsInt = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenZWave.RemoteManager_GetValueAsInt_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'GetValueAsInt failed: unknown result';
};
OpenZWave.RemoteManagerClient.prototype.GetValueAsShort = function(_id) {
  this.send_GetValueAsShort(_id);
  return this.recv_GetValueAsShort();
};

OpenZWave.RemoteManagerClient.prototype.send_GetValueAsShort = function(_id) {
  this.output.writeMessageBegin('GetValueAsShort', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenZWave.RemoteManager_GetValueAsShort_args();
  args._id = _id;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

OpenZWave.RemoteManagerClient.prototype.recv_GetValueAsShort = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenZWave.RemoteManager_GetValueAsShort_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'GetValueAsShort failed: unknown result';
};
OpenZWave.RemoteManagerClient.prototype.GetValueAsString = function(_id) {
  this.send_GetValueAsString(_id);
  return this.recv_GetValueAsString();
};

OpenZWave.RemoteManagerClient.prototype.send_GetValueAsString = function(_id) {
  this.output.writeMessageBegin('GetValueAsString', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenZWave.RemoteManager_GetValueAsString_args();
  args._id = _id;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

OpenZWave.RemoteManagerClient.prototype.recv_GetValueAsString = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenZWave.RemoteManager_GetValueAsString_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'GetValueAsString failed: unknown result';
};
OpenZWave.RemoteManagerClient.prototype.GetValueListSelection_String = function(_id) {
  this.send_GetValueListSelection_String(_id);
  return this.recv_GetValueListSelection_String();
};

OpenZWave.RemoteManagerClient.prototype.send_GetValueListSelection_String = function(_id) {
  this.output.writeMessageBegin('GetValueListSelection_String', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenZWave.RemoteManager_GetValueListSelection_String_args();
  args._id = _id;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

OpenZWave.RemoteManagerClient.prototype.recv_GetValueListSelection_String = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenZWave.RemoteManager_GetValueListSelection_String_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'GetValueListSelection_String failed: unknown result';
};
OpenZWave.RemoteManagerClient.prototype.GetValueListSelection_Int32 = function(_id) {
  this.send_GetValueListSelection_Int32(_id);
  return this.recv_GetValueListSelection_Int32();
};

OpenZWave.RemoteManagerClient.prototype.send_GetValueListSelection_Int32 = function(_id) {
  this.output.writeMessageBegin('GetValueListSelection_Int32', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenZWave.RemoteManager_GetValueListSelection_Int32_args();
  args._id = _id;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

OpenZWave.RemoteManagerClient.prototype.recv_GetValueListSelection_Int32 = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenZWave.RemoteManager_GetValueListSelection_Int32_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'GetValueListSelection_Int32 failed: unknown result';
};
OpenZWave.RemoteManagerClient.prototype.GetValueListItems = function(_id) {
  this.send_GetValueListItems(_id);
  return this.recv_GetValueListItems();
};

OpenZWave.RemoteManagerClient.prototype.send_GetValueListItems = function(_id) {
  this.output.writeMessageBegin('GetValueListItems', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenZWave.RemoteManager_GetValueListItems_args();
  args._id = _id;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

OpenZWave.RemoteManagerClient.prototype.recv_GetValueListItems = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenZWave.RemoteManager_GetValueListItems_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'GetValueListItems failed: unknown result';
};
OpenZWave.RemoteManagerClient.prototype.GetValueFloatPrecision = function(_id) {
  this.send_GetValueFloatPrecision(_id);
  return this.recv_GetValueFloatPrecision();
};

OpenZWave.RemoteManagerClient.prototype.send_GetValueFloatPrecision = function(_id) {
  this.output.writeMessageBegin('GetValueFloatPrecision', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenZWave.RemoteManager_GetValueFloatPrecision_args();
  args._id = _id;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

OpenZWave.RemoteManagerClient.prototype.recv_GetValueFloatPrecision = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenZWave.RemoteManager_GetValueFloatPrecision_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'GetValueFloatPrecision failed: unknown result';
};
OpenZWave.RemoteManagerClient.prototype.SetValue_Bool = function(_id, _value) {
  this.send_SetValue_Bool(_id, _value);
  return this.recv_SetValue_Bool();
};

OpenZWave.RemoteManagerClient.prototype.send_SetValue_Bool = function(_id, _value) {
  this.output.writeMessageBegin('SetValue_Bool', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenZWave.RemoteManager_SetValue_Bool_args();
  args._id = _id;
  args._value = _value;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

OpenZWave.RemoteManagerClient.prototype.recv_SetValue_Bool = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenZWave.RemoteManager_SetValue_Bool_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'SetValue_Bool failed: unknown result';
};
OpenZWave.RemoteManagerClient.prototype.SetValue_UInt8 = function(_id, _value) {
  this.send_SetValue_UInt8(_id, _value);
  return this.recv_SetValue_UInt8();
};

OpenZWave.RemoteManagerClient.prototype.send_SetValue_UInt8 = function(_id, _value) {
  this.output.writeMessageBegin('SetValue_UInt8', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenZWave.RemoteManager_SetValue_UInt8_args();
  args._id = _id;
  args._value = _value;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

OpenZWave.RemoteManagerClient.prototype.recv_SetValue_UInt8 = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenZWave.RemoteManager_SetValue_UInt8_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'SetValue_UInt8 failed: unknown result';
};
OpenZWave.RemoteManagerClient.prototype.SetValue_Float = function(_id, _value) {
  this.send_SetValue_Float(_id, _value);
  return this.recv_SetValue_Float();
};

OpenZWave.RemoteManagerClient.prototype.send_SetValue_Float = function(_id, _value) {
  this.output.writeMessageBegin('SetValue_Float', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenZWave.RemoteManager_SetValue_Float_args();
  args._id = _id;
  args._value = _value;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

OpenZWave.RemoteManagerClient.prototype.recv_SetValue_Float = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenZWave.RemoteManager_SetValue_Float_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'SetValue_Float failed: unknown result';
};
OpenZWave.RemoteManagerClient.prototype.SetValue_Int32 = function(_id, _value) {
  this.send_SetValue_Int32(_id, _value);
  return this.recv_SetValue_Int32();
};

OpenZWave.RemoteManagerClient.prototype.send_SetValue_Int32 = function(_id, _value) {
  this.output.writeMessageBegin('SetValue_Int32', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenZWave.RemoteManager_SetValue_Int32_args();
  args._id = _id;
  args._value = _value;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

OpenZWave.RemoteManagerClient.prototype.recv_SetValue_Int32 = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenZWave.RemoteManager_SetValue_Int32_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'SetValue_Int32 failed: unknown result';
};
OpenZWave.RemoteManagerClient.prototype.SetValue_Int16 = function(_id, _value) {
  this.send_SetValue_Int16(_id, _value);
  return this.recv_SetValue_Int16();
};

OpenZWave.RemoteManagerClient.prototype.send_SetValue_Int16 = function(_id, _value) {
  this.output.writeMessageBegin('SetValue_Int16', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenZWave.RemoteManager_SetValue_Int16_args();
  args._id = _id;
  args._value = _value;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

OpenZWave.RemoteManagerClient.prototype.recv_SetValue_Int16 = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenZWave.RemoteManager_SetValue_Int16_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'SetValue_Int16 failed: unknown result';
};
OpenZWave.RemoteManagerClient.prototype.SetValue_String = function(_id, _value) {
  this.send_SetValue_String(_id, _value);
  return this.recv_SetValue_String();
};

OpenZWave.RemoteManagerClient.prototype.send_SetValue_String = function(_id, _value) {
  this.output.writeMessageBegin('SetValue_String', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenZWave.RemoteManager_SetValue_String_args();
  args._id = _id;
  args._value = _value;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

OpenZWave.RemoteManagerClient.prototype.recv_SetValue_String = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenZWave.RemoteManager_SetValue_String_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'SetValue_String failed: unknown result';
};
OpenZWave.RemoteManagerClient.prototype.SetValueListSelection = function(_id, _selectedItem) {
  this.send_SetValueListSelection(_id, _selectedItem);
  return this.recv_SetValueListSelection();
};

OpenZWave.RemoteManagerClient.prototype.send_SetValueListSelection = function(_id, _selectedItem) {
  this.output.writeMessageBegin('SetValueListSelection', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenZWave.RemoteManager_SetValueListSelection_args();
  args._id = _id;
  args._selectedItem = _selectedItem;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

OpenZWave.RemoteManagerClient.prototype.recv_SetValueListSelection = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenZWave.RemoteManager_SetValueListSelection_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'SetValueListSelection failed: unknown result';
};
OpenZWave.RemoteManagerClient.prototype.PressButton = function(_id) {
  this.send_PressButton(_id);
  return this.recv_PressButton();
};

OpenZWave.RemoteManagerClient.prototype.send_PressButton = function(_id) {
  this.output.writeMessageBegin('PressButton', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenZWave.RemoteManager_PressButton_args();
  args._id = _id;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

OpenZWave.RemoteManagerClient.prototype.recv_PressButton = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenZWave.RemoteManager_PressButton_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'PressButton failed: unknown result';
};
OpenZWave.RemoteManagerClient.prototype.ReleaseButton = function(_id) {
  this.send_ReleaseButton(_id);
  return this.recv_ReleaseButton();
};

OpenZWave.RemoteManagerClient.prototype.send_ReleaseButton = function(_id) {
  this.output.writeMessageBegin('ReleaseButton', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenZWave.RemoteManager_ReleaseButton_args();
  args._id = _id;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

OpenZWave.RemoteManagerClient.prototype.recv_ReleaseButton = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenZWave.RemoteManager_ReleaseButton_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'ReleaseButton failed: unknown result';
};
OpenZWave.RemoteManagerClient.prototype.GetNumSwitchPoints = function(_id) {
  this.send_GetNumSwitchPoints(_id);
  return this.recv_GetNumSwitchPoints();
};

OpenZWave.RemoteManagerClient.prototype.send_GetNumSwitchPoints = function(_id) {
  this.output.writeMessageBegin('GetNumSwitchPoints', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenZWave.RemoteManager_GetNumSwitchPoints_args();
  args._id = _id;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

OpenZWave.RemoteManagerClient.prototype.recv_GetNumSwitchPoints = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenZWave.RemoteManager_GetNumSwitchPoints_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'GetNumSwitchPoints failed: unknown result';
};
OpenZWave.RemoteManagerClient.prototype.SetSwitchPoint = function(_id, _hours, _minutes, _setback) {
  this.send_SetSwitchPoint(_id, _hours, _minutes, _setback);
  return this.recv_SetSwitchPoint();
};

OpenZWave.RemoteManagerClient.prototype.send_SetSwitchPoint = function(_id, _hours, _minutes, _setback) {
  this.output.writeMessageBegin('SetSwitchPoint', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenZWave.RemoteManager_SetSwitchPoint_args();
  args._id = _id;
  args._hours = _hours;
  args._minutes = _minutes;
  args._setback = _setback;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

OpenZWave.RemoteManagerClient.prototype.recv_SetSwitchPoint = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenZWave.RemoteManager_SetSwitchPoint_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'SetSwitchPoint failed: unknown result';
};
OpenZWave.RemoteManagerClient.prototype.RemoveSwitchPoint = function(_id, _hours, _minutes) {
  this.send_RemoveSwitchPoint(_id, _hours, _minutes);
  return this.recv_RemoveSwitchPoint();
};

OpenZWave.RemoteManagerClient.prototype.send_RemoveSwitchPoint = function(_id, _hours, _minutes) {
  this.output.writeMessageBegin('RemoveSwitchPoint', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenZWave.RemoteManager_RemoveSwitchPoint_args();
  args._id = _id;
  args._hours = _hours;
  args._minutes = _minutes;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

OpenZWave.RemoteManagerClient.prototype.recv_RemoveSwitchPoint = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenZWave.RemoteManager_RemoveSwitchPoint_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'RemoveSwitchPoint failed: unknown result';
};
OpenZWave.RemoteManagerClient.prototype.ClearSwitchPoints = function(_id) {
  this.send_ClearSwitchPoints(_id);
  this.recv_ClearSwitchPoints();
};

OpenZWave.RemoteManagerClient.prototype.send_ClearSwitchPoints = function(_id) {
  this.output.writeMessageBegin('ClearSwitchPoints', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenZWave.RemoteManager_ClearSwitchPoints_args();
  args._id = _id;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

OpenZWave.RemoteManagerClient.prototype.recv_ClearSwitchPoints = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenZWave.RemoteManager_ClearSwitchPoints_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};
OpenZWave.RemoteManagerClient.prototype.GetSwitchPoint = function(_id, _idx) {
  this.send_GetSwitchPoint(_id, _idx);
  return this.recv_GetSwitchPoint();
};

OpenZWave.RemoteManagerClient.prototype.send_GetSwitchPoint = function(_id, _idx) {
  this.output.writeMessageBegin('GetSwitchPoint', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenZWave.RemoteManager_GetSwitchPoint_args();
  args._id = _id;
  args._idx = _idx;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

OpenZWave.RemoteManagerClient.prototype.recv_GetSwitchPoint = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenZWave.RemoteManager_GetSwitchPoint_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'GetSwitchPoint failed: unknown result';
};
OpenZWave.RemoteManagerClient.prototype.SwitchAllOn = function(_homeId) {
  this.send_SwitchAllOn(_homeId);
  this.recv_SwitchAllOn();
};

OpenZWave.RemoteManagerClient.prototype.send_SwitchAllOn = function(_homeId) {
  this.output.writeMessageBegin('SwitchAllOn', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenZWave.RemoteManager_SwitchAllOn_args();
  args._homeId = _homeId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

OpenZWave.RemoteManagerClient.prototype.recv_SwitchAllOn = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenZWave.RemoteManager_SwitchAllOn_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};
OpenZWave.RemoteManagerClient.prototype.SwitchAllOff = function(_homeId) {
  this.send_SwitchAllOff(_homeId);
  this.recv_SwitchAllOff();
};

OpenZWave.RemoteManagerClient.prototype.send_SwitchAllOff = function(_homeId) {
  this.output.writeMessageBegin('SwitchAllOff', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenZWave.RemoteManager_SwitchAllOff_args();
  args._homeId = _homeId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

OpenZWave.RemoteManagerClient.prototype.recv_SwitchAllOff = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenZWave.RemoteManager_SwitchAllOff_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};
OpenZWave.RemoteManagerClient.prototype.SetConfigParam = function(_homeId, _nodeId, _param, _value, _size) {
  this.send_SetConfigParam(_homeId, _nodeId, _param, _value, _size);
  return this.recv_SetConfigParam();
};

OpenZWave.RemoteManagerClient.prototype.send_SetConfigParam = function(_homeId, _nodeId, _param, _value, _size) {
  this.output.writeMessageBegin('SetConfigParam', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenZWave.RemoteManager_SetConfigParam_args();
  args._homeId = _homeId;
  args._nodeId = _nodeId;
  args._param = _param;
  args._value = _value;
  args._size = _size;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

OpenZWave.RemoteManagerClient.prototype.recv_SetConfigParam = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenZWave.RemoteManager_SetConfigParam_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'SetConfigParam failed: unknown result';
};
OpenZWave.RemoteManagerClient.prototype.RequestConfigParam = function(_homeId, _nodeId, _param) {
  this.send_RequestConfigParam(_homeId, _nodeId, _param);
  this.recv_RequestConfigParam();
};

OpenZWave.RemoteManagerClient.prototype.send_RequestConfigParam = function(_homeId, _nodeId, _param) {
  this.output.writeMessageBegin('RequestConfigParam', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenZWave.RemoteManager_RequestConfigParam_args();
  args._homeId = _homeId;
  args._nodeId = _nodeId;
  args._param = _param;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

OpenZWave.RemoteManagerClient.prototype.recv_RequestConfigParam = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenZWave.RemoteManager_RequestConfigParam_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};
OpenZWave.RemoteManagerClient.prototype.RequestAllConfigParams = function(_homeId, _nodeId) {
  this.send_RequestAllConfigParams(_homeId, _nodeId);
  this.recv_RequestAllConfigParams();
};

OpenZWave.RemoteManagerClient.prototype.send_RequestAllConfigParams = function(_homeId, _nodeId) {
  this.output.writeMessageBegin('RequestAllConfigParams', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenZWave.RemoteManager_RequestAllConfigParams_args();
  args._homeId = _homeId;
  args._nodeId = _nodeId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

OpenZWave.RemoteManagerClient.prototype.recv_RequestAllConfigParams = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenZWave.RemoteManager_RequestAllConfigParams_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};
OpenZWave.RemoteManagerClient.prototype.GetNumGroups = function(_homeId, _nodeId) {
  this.send_GetNumGroups(_homeId, _nodeId);
  return this.recv_GetNumGroups();
};

OpenZWave.RemoteManagerClient.prototype.send_GetNumGroups = function(_homeId, _nodeId) {
  this.output.writeMessageBegin('GetNumGroups', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenZWave.RemoteManager_GetNumGroups_args();
  args._homeId = _homeId;
  args._nodeId = _nodeId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

OpenZWave.RemoteManagerClient.prototype.recv_GetNumGroups = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenZWave.RemoteManager_GetNumGroups_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'GetNumGroups failed: unknown result';
};
OpenZWave.RemoteManagerClient.prototype.GetAssociations = function(_homeId, _nodeId, _groupIdx) {
  this.send_GetAssociations(_homeId, _nodeId, _groupIdx);
  return this.recv_GetAssociations();
};

OpenZWave.RemoteManagerClient.prototype.send_GetAssociations = function(_homeId, _nodeId, _groupIdx) {
  this.output.writeMessageBegin('GetAssociations', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenZWave.RemoteManager_GetAssociations_args();
  args._homeId = _homeId;
  args._nodeId = _nodeId;
  args._groupIdx = _groupIdx;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

OpenZWave.RemoteManagerClient.prototype.recv_GetAssociations = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenZWave.RemoteManager_GetAssociations_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'GetAssociations failed: unknown result';
};
OpenZWave.RemoteManagerClient.prototype.GetMaxAssociations = function(_homeId, _nodeId, _groupIdx) {
  this.send_GetMaxAssociations(_homeId, _nodeId, _groupIdx);
  return this.recv_GetMaxAssociations();
};

OpenZWave.RemoteManagerClient.prototype.send_GetMaxAssociations = function(_homeId, _nodeId, _groupIdx) {
  this.output.writeMessageBegin('GetMaxAssociations', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenZWave.RemoteManager_GetMaxAssociations_args();
  args._homeId = _homeId;
  args._nodeId = _nodeId;
  args._groupIdx = _groupIdx;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

OpenZWave.RemoteManagerClient.prototype.recv_GetMaxAssociations = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenZWave.RemoteManager_GetMaxAssociations_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'GetMaxAssociations failed: unknown result';
};
OpenZWave.RemoteManagerClient.prototype.GetGroupLabel = function(_homeId, _nodeId, _groupIdx) {
  this.send_GetGroupLabel(_homeId, _nodeId, _groupIdx);
  return this.recv_GetGroupLabel();
};

OpenZWave.RemoteManagerClient.prototype.send_GetGroupLabel = function(_homeId, _nodeId, _groupIdx) {
  this.output.writeMessageBegin('GetGroupLabel', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenZWave.RemoteManager_GetGroupLabel_args();
  args._homeId = _homeId;
  args._nodeId = _nodeId;
  args._groupIdx = _groupIdx;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

OpenZWave.RemoteManagerClient.prototype.recv_GetGroupLabel = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenZWave.RemoteManager_GetGroupLabel_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'GetGroupLabel failed: unknown result';
};
OpenZWave.RemoteManagerClient.prototype.AddAssociation = function(_homeId, _nodeId, _groupIdx, _targetNodeId) {
  this.send_AddAssociation(_homeId, _nodeId, _groupIdx, _targetNodeId);
  this.recv_AddAssociation();
};

OpenZWave.RemoteManagerClient.prototype.send_AddAssociation = function(_homeId, _nodeId, _groupIdx, _targetNodeId) {
  this.output.writeMessageBegin('AddAssociation', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenZWave.RemoteManager_AddAssociation_args();
  args._homeId = _homeId;
  args._nodeId = _nodeId;
  args._groupIdx = _groupIdx;
  args._targetNodeId = _targetNodeId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

OpenZWave.RemoteManagerClient.prototype.recv_AddAssociation = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenZWave.RemoteManager_AddAssociation_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};
OpenZWave.RemoteManagerClient.prototype.RemoveAssociation = function(_homeId, _nodeId, _groupIdx, _targetNodeId) {
  this.send_RemoveAssociation(_homeId, _nodeId, _groupIdx, _targetNodeId);
  this.recv_RemoveAssociation();
};

OpenZWave.RemoteManagerClient.prototype.send_RemoveAssociation = function(_homeId, _nodeId, _groupIdx, _targetNodeId) {
  this.output.writeMessageBegin('RemoveAssociation', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenZWave.RemoteManager_RemoveAssociation_args();
  args._homeId = _homeId;
  args._nodeId = _nodeId;
  args._groupIdx = _groupIdx;
  args._targetNodeId = _targetNodeId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

OpenZWave.RemoteManagerClient.prototype.recv_RemoveAssociation = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenZWave.RemoteManager_RemoveAssociation_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};
OpenZWave.RemoteManagerClient.prototype.ResetController = function(_homeId) {
  this.send_ResetController(_homeId);
  this.recv_ResetController();
};

OpenZWave.RemoteManagerClient.prototype.send_ResetController = function(_homeId) {
  this.output.writeMessageBegin('ResetController', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenZWave.RemoteManager_ResetController_args();
  args._homeId = _homeId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

OpenZWave.RemoteManagerClient.prototype.recv_ResetController = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenZWave.RemoteManager_ResetController_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};
OpenZWave.RemoteManagerClient.prototype.SoftReset = function(_homeId) {
  this.send_SoftReset(_homeId);
  this.recv_SoftReset();
};

OpenZWave.RemoteManagerClient.prototype.send_SoftReset = function(_homeId) {
  this.output.writeMessageBegin('SoftReset', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenZWave.RemoteManager_SoftReset_args();
  args._homeId = _homeId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

OpenZWave.RemoteManagerClient.prototype.recv_SoftReset = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenZWave.RemoteManager_SoftReset_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};
OpenZWave.RemoteManagerClient.prototype.BeginControllerCommand = function(_homeId, _command, _highPower, _nodeId, _arg) {
  this.send_BeginControllerCommand(_homeId, _command, _highPower, _nodeId, _arg);
  return this.recv_BeginControllerCommand();
};

OpenZWave.RemoteManagerClient.prototype.send_BeginControllerCommand = function(_homeId, _command, _highPower, _nodeId, _arg) {
  this.output.writeMessageBegin('BeginControllerCommand', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenZWave.RemoteManager_BeginControllerCommand_args();
  args._homeId = _homeId;
  args._command = _command;
  args._highPower = _highPower;
  args._nodeId = _nodeId;
  args._arg = _arg;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

OpenZWave.RemoteManagerClient.prototype.recv_BeginControllerCommand = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenZWave.RemoteManager_BeginControllerCommand_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'BeginControllerCommand failed: unknown result';
};
OpenZWave.RemoteManagerClient.prototype.CancelControllerCommand = function(_homeId) {
  this.send_CancelControllerCommand(_homeId);
  return this.recv_CancelControllerCommand();
};

OpenZWave.RemoteManagerClient.prototype.send_CancelControllerCommand = function(_homeId) {
  this.output.writeMessageBegin('CancelControllerCommand', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenZWave.RemoteManager_CancelControllerCommand_args();
  args._homeId = _homeId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

OpenZWave.RemoteManagerClient.prototype.recv_CancelControllerCommand = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenZWave.RemoteManager_CancelControllerCommand_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'CancelControllerCommand failed: unknown result';
};
OpenZWave.RemoteManagerClient.prototype.GetNumScenes = function() {
  this.send_GetNumScenes();
  return this.recv_GetNumScenes();
};

OpenZWave.RemoteManagerClient.prototype.send_GetNumScenes = function() {
  this.output.writeMessageBegin('GetNumScenes', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenZWave.RemoteManager_GetNumScenes_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

OpenZWave.RemoteManagerClient.prototype.recv_GetNumScenes = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenZWave.RemoteManager_GetNumScenes_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'GetNumScenes failed: unknown result';
};
OpenZWave.RemoteManagerClient.prototype.GetAllScenes = function() {
  this.send_GetAllScenes();
  return this.recv_GetAllScenes();
};

OpenZWave.RemoteManagerClient.prototype.send_GetAllScenes = function() {
  this.output.writeMessageBegin('GetAllScenes', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenZWave.RemoteManager_GetAllScenes_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

OpenZWave.RemoteManagerClient.prototype.recv_GetAllScenes = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenZWave.RemoteManager_GetAllScenes_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'GetAllScenes failed: unknown result';
};
OpenZWave.RemoteManagerClient.prototype.CreateScene = function() {
  this.send_CreateScene();
  return this.recv_CreateScene();
};

OpenZWave.RemoteManagerClient.prototype.send_CreateScene = function() {
  this.output.writeMessageBegin('CreateScene', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenZWave.RemoteManager_CreateScene_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

OpenZWave.RemoteManagerClient.prototype.recv_CreateScene = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenZWave.RemoteManager_CreateScene_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'CreateScene failed: unknown result';
};
OpenZWave.RemoteManagerClient.prototype.RemoveScene = function(_sceneId) {
  this.send_RemoveScene(_sceneId);
  return this.recv_RemoveScene();
};

OpenZWave.RemoteManagerClient.prototype.send_RemoveScene = function(_sceneId) {
  this.output.writeMessageBegin('RemoveScene', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenZWave.RemoteManager_RemoveScene_args();
  args._sceneId = _sceneId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

OpenZWave.RemoteManagerClient.prototype.recv_RemoveScene = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenZWave.RemoteManager_RemoveScene_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'RemoveScene failed: unknown result';
};
OpenZWave.RemoteManagerClient.prototype.AddSceneValue_Bool = function(_sceneId, _valueId, _value) {
  this.send_AddSceneValue_Bool(_sceneId, _valueId, _value);
  return this.recv_AddSceneValue_Bool();
};

OpenZWave.RemoteManagerClient.prototype.send_AddSceneValue_Bool = function(_sceneId, _valueId, _value) {
  this.output.writeMessageBegin('AddSceneValue_Bool', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenZWave.RemoteManager_AddSceneValue_Bool_args();
  args._sceneId = _sceneId;
  args._valueId = _valueId;
  args._value = _value;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

OpenZWave.RemoteManagerClient.prototype.recv_AddSceneValue_Bool = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenZWave.RemoteManager_AddSceneValue_Bool_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'AddSceneValue_Bool failed: unknown result';
};
OpenZWave.RemoteManagerClient.prototype.AddSceneValue_Uint8 = function(_sceneId, _valueId, _value) {
  this.send_AddSceneValue_Uint8(_sceneId, _valueId, _value);
  return this.recv_AddSceneValue_Uint8();
};

OpenZWave.RemoteManagerClient.prototype.send_AddSceneValue_Uint8 = function(_sceneId, _valueId, _value) {
  this.output.writeMessageBegin('AddSceneValue_Uint8', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenZWave.RemoteManager_AddSceneValue_Uint8_args();
  args._sceneId = _sceneId;
  args._valueId = _valueId;
  args._value = _value;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

OpenZWave.RemoteManagerClient.prototype.recv_AddSceneValue_Uint8 = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenZWave.RemoteManager_AddSceneValue_Uint8_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'AddSceneValue_Uint8 failed: unknown result';
};
OpenZWave.RemoteManagerClient.prototype.AddSceneValue_Float = function(_sceneId, _valueId, _value) {
  this.send_AddSceneValue_Float(_sceneId, _valueId, _value);
  return this.recv_AddSceneValue_Float();
};

OpenZWave.RemoteManagerClient.prototype.send_AddSceneValue_Float = function(_sceneId, _valueId, _value) {
  this.output.writeMessageBegin('AddSceneValue_Float', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenZWave.RemoteManager_AddSceneValue_Float_args();
  args._sceneId = _sceneId;
  args._valueId = _valueId;
  args._value = _value;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

OpenZWave.RemoteManagerClient.prototype.recv_AddSceneValue_Float = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenZWave.RemoteManager_AddSceneValue_Float_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'AddSceneValue_Float failed: unknown result';
};
OpenZWave.RemoteManagerClient.prototype.AddSceneValue_Int32 = function(_sceneId, _valueId, _value) {
  this.send_AddSceneValue_Int32(_sceneId, _valueId, _value);
  return this.recv_AddSceneValue_Int32();
};

OpenZWave.RemoteManagerClient.prototype.send_AddSceneValue_Int32 = function(_sceneId, _valueId, _value) {
  this.output.writeMessageBegin('AddSceneValue_Int32', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenZWave.RemoteManager_AddSceneValue_Int32_args();
  args._sceneId = _sceneId;
  args._valueId = _valueId;
  args._value = _value;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

OpenZWave.RemoteManagerClient.prototype.recv_AddSceneValue_Int32 = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenZWave.RemoteManager_AddSceneValue_Int32_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'AddSceneValue_Int32 failed: unknown result';
};
OpenZWave.RemoteManagerClient.prototype.AddSceneValue_Int16 = function(_sceneId, _valueId, _value) {
  this.send_AddSceneValue_Int16(_sceneId, _valueId, _value);
  return this.recv_AddSceneValue_Int16();
};

OpenZWave.RemoteManagerClient.prototype.send_AddSceneValue_Int16 = function(_sceneId, _valueId, _value) {
  this.output.writeMessageBegin('AddSceneValue_Int16', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenZWave.RemoteManager_AddSceneValue_Int16_args();
  args._sceneId = _sceneId;
  args._valueId = _valueId;
  args._value = _value;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

OpenZWave.RemoteManagerClient.prototype.recv_AddSceneValue_Int16 = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenZWave.RemoteManager_AddSceneValue_Int16_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'AddSceneValue_Int16 failed: unknown result';
};
OpenZWave.RemoteManagerClient.prototype.AddSceneValue_String = function(_sceneId, _valueId, _value) {
  this.send_AddSceneValue_String(_sceneId, _valueId, _value);
  return this.recv_AddSceneValue_String();
};

OpenZWave.RemoteManagerClient.prototype.send_AddSceneValue_String = function(_sceneId, _valueId, _value) {
  this.output.writeMessageBegin('AddSceneValue_String', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenZWave.RemoteManager_AddSceneValue_String_args();
  args._sceneId = _sceneId;
  args._valueId = _valueId;
  args._value = _value;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

OpenZWave.RemoteManagerClient.prototype.recv_AddSceneValue_String = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenZWave.RemoteManager_AddSceneValue_String_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'AddSceneValue_String failed: unknown result';
};
OpenZWave.RemoteManagerClient.prototype.AddSceneValueListSelection_String = function(_sceneId, _valueId, _value) {
  this.send_AddSceneValueListSelection_String(_sceneId, _valueId, _value);
  return this.recv_AddSceneValueListSelection_String();
};

OpenZWave.RemoteManagerClient.prototype.send_AddSceneValueListSelection_String = function(_sceneId, _valueId, _value) {
  this.output.writeMessageBegin('AddSceneValueListSelection_String', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenZWave.RemoteManager_AddSceneValueListSelection_String_args();
  args._sceneId = _sceneId;
  args._valueId = _valueId;
  args._value = _value;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

OpenZWave.RemoteManagerClient.prototype.recv_AddSceneValueListSelection_String = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenZWave.RemoteManager_AddSceneValueListSelection_String_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'AddSceneValueListSelection_String failed: unknown result';
};
OpenZWave.RemoteManagerClient.prototype.AddSceneValueListSelection_Int32 = function(_sceneId, _valueId, _value) {
  this.send_AddSceneValueListSelection_Int32(_sceneId, _valueId, _value);
  return this.recv_AddSceneValueListSelection_Int32();
};

OpenZWave.RemoteManagerClient.prototype.send_AddSceneValueListSelection_Int32 = function(_sceneId, _valueId, _value) {
  this.output.writeMessageBegin('AddSceneValueListSelection_Int32', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenZWave.RemoteManager_AddSceneValueListSelection_Int32_args();
  args._sceneId = _sceneId;
  args._valueId = _valueId;
  args._value = _value;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

OpenZWave.RemoteManagerClient.prototype.recv_AddSceneValueListSelection_Int32 = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenZWave.RemoteManager_AddSceneValueListSelection_Int32_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'AddSceneValueListSelection_Int32 failed: unknown result';
};
OpenZWave.RemoteManagerClient.prototype.RemoveSceneValue = function(_sceneId, _valueId) {
  this.send_RemoveSceneValue(_sceneId, _valueId);
  return this.recv_RemoveSceneValue();
};

OpenZWave.RemoteManagerClient.prototype.send_RemoveSceneValue = function(_sceneId, _valueId) {
  this.output.writeMessageBegin('RemoveSceneValue', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenZWave.RemoteManager_RemoveSceneValue_args();
  args._sceneId = _sceneId;
  args._valueId = _valueId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

OpenZWave.RemoteManagerClient.prototype.recv_RemoveSceneValue = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenZWave.RemoteManager_RemoveSceneValue_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'RemoveSceneValue failed: unknown result';
};
OpenZWave.RemoteManagerClient.prototype.SceneGetValues = function(_sceneId) {
  this.send_SceneGetValues(_sceneId);
  return this.recv_SceneGetValues();
};

OpenZWave.RemoteManagerClient.prototype.send_SceneGetValues = function(_sceneId) {
  this.output.writeMessageBegin('SceneGetValues', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenZWave.RemoteManager_SceneGetValues_args();
  args._sceneId = _sceneId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

OpenZWave.RemoteManagerClient.prototype.recv_SceneGetValues = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenZWave.RemoteManager_SceneGetValues_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'SceneGetValues failed: unknown result';
};
OpenZWave.RemoteManagerClient.prototype.SceneGetValueAsBool = function(_sceneId, _valueId) {
  this.send_SceneGetValueAsBool(_sceneId, _valueId);
  return this.recv_SceneGetValueAsBool();
};

OpenZWave.RemoteManagerClient.prototype.send_SceneGetValueAsBool = function(_sceneId, _valueId) {
  this.output.writeMessageBegin('SceneGetValueAsBool', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenZWave.RemoteManager_SceneGetValueAsBool_args();
  args._sceneId = _sceneId;
  args._valueId = _valueId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

OpenZWave.RemoteManagerClient.prototype.recv_SceneGetValueAsBool = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenZWave.RemoteManager_SceneGetValueAsBool_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'SceneGetValueAsBool failed: unknown result';
};
OpenZWave.RemoteManagerClient.prototype.SceneGetValueAsByte = function(_sceneId, _valueId) {
  this.send_SceneGetValueAsByte(_sceneId, _valueId);
  return this.recv_SceneGetValueAsByte();
};

OpenZWave.RemoteManagerClient.prototype.send_SceneGetValueAsByte = function(_sceneId, _valueId) {
  this.output.writeMessageBegin('SceneGetValueAsByte', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenZWave.RemoteManager_SceneGetValueAsByte_args();
  args._sceneId = _sceneId;
  args._valueId = _valueId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

OpenZWave.RemoteManagerClient.prototype.recv_SceneGetValueAsByte = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenZWave.RemoteManager_SceneGetValueAsByte_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'SceneGetValueAsByte failed: unknown result';
};
OpenZWave.RemoteManagerClient.prototype.SceneGetValueAsFloat = function(_sceneId, _valueId) {
  this.send_SceneGetValueAsFloat(_sceneId, _valueId);
  return this.recv_SceneGetValueAsFloat();
};

OpenZWave.RemoteManagerClient.prototype.send_SceneGetValueAsFloat = function(_sceneId, _valueId) {
  this.output.writeMessageBegin('SceneGetValueAsFloat', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenZWave.RemoteManager_SceneGetValueAsFloat_args();
  args._sceneId = _sceneId;
  args._valueId = _valueId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

OpenZWave.RemoteManagerClient.prototype.recv_SceneGetValueAsFloat = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenZWave.RemoteManager_SceneGetValueAsFloat_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'SceneGetValueAsFloat failed: unknown result';
};
OpenZWave.RemoteManagerClient.prototype.SceneGetValueAsInt = function(_sceneId, _valueId) {
  this.send_SceneGetValueAsInt(_sceneId, _valueId);
  return this.recv_SceneGetValueAsInt();
};

OpenZWave.RemoteManagerClient.prototype.send_SceneGetValueAsInt = function(_sceneId, _valueId) {
  this.output.writeMessageBegin('SceneGetValueAsInt', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenZWave.RemoteManager_SceneGetValueAsInt_args();
  args._sceneId = _sceneId;
  args._valueId = _valueId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

OpenZWave.RemoteManagerClient.prototype.recv_SceneGetValueAsInt = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenZWave.RemoteManager_SceneGetValueAsInt_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'SceneGetValueAsInt failed: unknown result';
};
OpenZWave.RemoteManagerClient.prototype.SceneGetValueAsShort = function(_sceneId, _valueId) {
  this.send_SceneGetValueAsShort(_sceneId, _valueId);
  return this.recv_SceneGetValueAsShort();
};

OpenZWave.RemoteManagerClient.prototype.send_SceneGetValueAsShort = function(_sceneId, _valueId) {
  this.output.writeMessageBegin('SceneGetValueAsShort', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenZWave.RemoteManager_SceneGetValueAsShort_args();
  args._sceneId = _sceneId;
  args._valueId = _valueId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

OpenZWave.RemoteManagerClient.prototype.recv_SceneGetValueAsShort = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenZWave.RemoteManager_SceneGetValueAsShort_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'SceneGetValueAsShort failed: unknown result';
};
OpenZWave.RemoteManagerClient.prototype.SceneGetValueAsString = function(_sceneId, _valueId) {
  this.send_SceneGetValueAsString(_sceneId, _valueId);
  return this.recv_SceneGetValueAsString();
};

OpenZWave.RemoteManagerClient.prototype.send_SceneGetValueAsString = function(_sceneId, _valueId) {
  this.output.writeMessageBegin('SceneGetValueAsString', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenZWave.RemoteManager_SceneGetValueAsString_args();
  args._sceneId = _sceneId;
  args._valueId = _valueId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

OpenZWave.RemoteManagerClient.prototype.recv_SceneGetValueAsString = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenZWave.RemoteManager_SceneGetValueAsString_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'SceneGetValueAsString failed: unknown result';
};
OpenZWave.RemoteManagerClient.prototype.SceneGetValueListSelection_String = function(_sceneId, _valueId) {
  this.send_SceneGetValueListSelection_String(_sceneId, _valueId);
  return this.recv_SceneGetValueListSelection_String();
};

OpenZWave.RemoteManagerClient.prototype.send_SceneGetValueListSelection_String = function(_sceneId, _valueId) {
  this.output.writeMessageBegin('SceneGetValueListSelection_String', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenZWave.RemoteManager_SceneGetValueListSelection_String_args();
  args._sceneId = _sceneId;
  args._valueId = _valueId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

OpenZWave.RemoteManagerClient.prototype.recv_SceneGetValueListSelection_String = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenZWave.RemoteManager_SceneGetValueListSelection_String_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'SceneGetValueListSelection_String failed: unknown result';
};
OpenZWave.RemoteManagerClient.prototype.SceneGetValueListSelection_Int32 = function(_sceneId, _valueId) {
  this.send_SceneGetValueListSelection_Int32(_sceneId, _valueId);
  return this.recv_SceneGetValueListSelection_Int32();
};

OpenZWave.RemoteManagerClient.prototype.send_SceneGetValueListSelection_Int32 = function(_sceneId, _valueId) {
  this.output.writeMessageBegin('SceneGetValueListSelection_Int32', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenZWave.RemoteManager_SceneGetValueListSelection_Int32_args();
  args._sceneId = _sceneId;
  args._valueId = _valueId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

OpenZWave.RemoteManagerClient.prototype.recv_SceneGetValueListSelection_Int32 = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenZWave.RemoteManager_SceneGetValueListSelection_Int32_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'SceneGetValueListSelection_Int32 failed: unknown result';
};
OpenZWave.RemoteManagerClient.prototype.SetSceneValue_Bool = function(_sceneId, _valueId, _value) {
  this.send_SetSceneValue_Bool(_sceneId, _valueId, _value);
  return this.recv_SetSceneValue_Bool();
};

OpenZWave.RemoteManagerClient.prototype.send_SetSceneValue_Bool = function(_sceneId, _valueId, _value) {
  this.output.writeMessageBegin('SetSceneValue_Bool', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenZWave.RemoteManager_SetSceneValue_Bool_args();
  args._sceneId = _sceneId;
  args._valueId = _valueId;
  args._value = _value;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

OpenZWave.RemoteManagerClient.prototype.recv_SetSceneValue_Bool = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenZWave.RemoteManager_SetSceneValue_Bool_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'SetSceneValue_Bool failed: unknown result';
};
OpenZWave.RemoteManagerClient.prototype.SetSceneValue_Uint8 = function(_sceneId, _valueId, _value) {
  this.send_SetSceneValue_Uint8(_sceneId, _valueId, _value);
  return this.recv_SetSceneValue_Uint8();
};

OpenZWave.RemoteManagerClient.prototype.send_SetSceneValue_Uint8 = function(_sceneId, _valueId, _value) {
  this.output.writeMessageBegin('SetSceneValue_Uint8', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenZWave.RemoteManager_SetSceneValue_Uint8_args();
  args._sceneId = _sceneId;
  args._valueId = _valueId;
  args._value = _value;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

OpenZWave.RemoteManagerClient.prototype.recv_SetSceneValue_Uint8 = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenZWave.RemoteManager_SetSceneValue_Uint8_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'SetSceneValue_Uint8 failed: unknown result';
};
OpenZWave.RemoteManagerClient.prototype.SetSceneValue_Float = function(_sceneId, _valueId, _value) {
  this.send_SetSceneValue_Float(_sceneId, _valueId, _value);
  return this.recv_SetSceneValue_Float();
};

OpenZWave.RemoteManagerClient.prototype.send_SetSceneValue_Float = function(_sceneId, _valueId, _value) {
  this.output.writeMessageBegin('SetSceneValue_Float', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenZWave.RemoteManager_SetSceneValue_Float_args();
  args._sceneId = _sceneId;
  args._valueId = _valueId;
  args._value = _value;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

OpenZWave.RemoteManagerClient.prototype.recv_SetSceneValue_Float = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenZWave.RemoteManager_SetSceneValue_Float_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'SetSceneValue_Float failed: unknown result';
};
OpenZWave.RemoteManagerClient.prototype.SetSceneValue_Int32 = function(_sceneId, _valueId, _value) {
  this.send_SetSceneValue_Int32(_sceneId, _valueId, _value);
  return this.recv_SetSceneValue_Int32();
};

OpenZWave.RemoteManagerClient.prototype.send_SetSceneValue_Int32 = function(_sceneId, _valueId, _value) {
  this.output.writeMessageBegin('SetSceneValue_Int32', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenZWave.RemoteManager_SetSceneValue_Int32_args();
  args._sceneId = _sceneId;
  args._valueId = _valueId;
  args._value = _value;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

OpenZWave.RemoteManagerClient.prototype.recv_SetSceneValue_Int32 = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenZWave.RemoteManager_SetSceneValue_Int32_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'SetSceneValue_Int32 failed: unknown result';
};
OpenZWave.RemoteManagerClient.prototype.SetSceneValue_Int16 = function(_sceneId, _valueId, _value) {
  this.send_SetSceneValue_Int16(_sceneId, _valueId, _value);
  return this.recv_SetSceneValue_Int16();
};

OpenZWave.RemoteManagerClient.prototype.send_SetSceneValue_Int16 = function(_sceneId, _valueId, _value) {
  this.output.writeMessageBegin('SetSceneValue_Int16', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenZWave.RemoteManager_SetSceneValue_Int16_args();
  args._sceneId = _sceneId;
  args._valueId = _valueId;
  args._value = _value;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

OpenZWave.RemoteManagerClient.prototype.recv_SetSceneValue_Int16 = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenZWave.RemoteManager_SetSceneValue_Int16_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'SetSceneValue_Int16 failed: unknown result';
};
OpenZWave.RemoteManagerClient.prototype.SetSceneValue_String = function(_sceneId, _valueId, _value) {
  this.send_SetSceneValue_String(_sceneId, _valueId, _value);
  return this.recv_SetSceneValue_String();
};

OpenZWave.RemoteManagerClient.prototype.send_SetSceneValue_String = function(_sceneId, _valueId, _value) {
  this.output.writeMessageBegin('SetSceneValue_String', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenZWave.RemoteManager_SetSceneValue_String_args();
  args._sceneId = _sceneId;
  args._valueId = _valueId;
  args._value = _value;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

OpenZWave.RemoteManagerClient.prototype.recv_SetSceneValue_String = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenZWave.RemoteManager_SetSceneValue_String_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'SetSceneValue_String failed: unknown result';
};
OpenZWave.RemoteManagerClient.prototype.SetSceneValueListSelection_String = function(_sceneId, _valueId, _value) {
  this.send_SetSceneValueListSelection_String(_sceneId, _valueId, _value);
  return this.recv_SetSceneValueListSelection_String();
};

OpenZWave.RemoteManagerClient.prototype.send_SetSceneValueListSelection_String = function(_sceneId, _valueId, _value) {
  this.output.writeMessageBegin('SetSceneValueListSelection_String', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenZWave.RemoteManager_SetSceneValueListSelection_String_args();
  args._sceneId = _sceneId;
  args._valueId = _valueId;
  args._value = _value;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

OpenZWave.RemoteManagerClient.prototype.recv_SetSceneValueListSelection_String = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenZWave.RemoteManager_SetSceneValueListSelection_String_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'SetSceneValueListSelection_String failed: unknown result';
};
OpenZWave.RemoteManagerClient.prototype.SetSceneValueListSelection_Int32 = function(_sceneId, _valueId, _value) {
  this.send_SetSceneValueListSelection_Int32(_sceneId, _valueId, _value);
  return this.recv_SetSceneValueListSelection_Int32();
};

OpenZWave.RemoteManagerClient.prototype.send_SetSceneValueListSelection_Int32 = function(_sceneId, _valueId, _value) {
  this.output.writeMessageBegin('SetSceneValueListSelection_Int32', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenZWave.RemoteManager_SetSceneValueListSelection_Int32_args();
  args._sceneId = _sceneId;
  args._valueId = _valueId;
  args._value = _value;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

OpenZWave.RemoteManagerClient.prototype.recv_SetSceneValueListSelection_Int32 = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenZWave.RemoteManager_SetSceneValueListSelection_Int32_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'SetSceneValueListSelection_Int32 failed: unknown result';
};
OpenZWave.RemoteManagerClient.prototype.GetSceneLabel = function(_sceneId) {
  this.send_GetSceneLabel(_sceneId);
  return this.recv_GetSceneLabel();
};

OpenZWave.RemoteManagerClient.prototype.send_GetSceneLabel = function(_sceneId) {
  this.output.writeMessageBegin('GetSceneLabel', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenZWave.RemoteManager_GetSceneLabel_args();
  args._sceneId = _sceneId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

OpenZWave.RemoteManagerClient.prototype.recv_GetSceneLabel = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenZWave.RemoteManager_GetSceneLabel_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'GetSceneLabel failed: unknown result';
};
OpenZWave.RemoteManagerClient.prototype.SetSceneLabel = function(_sceneId, _value) {
  this.send_SetSceneLabel(_sceneId, _value);
  this.recv_SetSceneLabel();
};

OpenZWave.RemoteManagerClient.prototype.send_SetSceneLabel = function(_sceneId, _value) {
  this.output.writeMessageBegin('SetSceneLabel', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenZWave.RemoteManager_SetSceneLabel_args();
  args._sceneId = _sceneId;
  args._value = _value;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

OpenZWave.RemoteManagerClient.prototype.recv_SetSceneLabel = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenZWave.RemoteManager_SetSceneLabel_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};
OpenZWave.RemoteManagerClient.prototype.SceneExists = function(_sceneId) {
  this.send_SceneExists(_sceneId);
  return this.recv_SceneExists();
};

OpenZWave.RemoteManagerClient.prototype.send_SceneExists = function(_sceneId) {
  this.output.writeMessageBegin('SceneExists', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenZWave.RemoteManager_SceneExists_args();
  args._sceneId = _sceneId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

OpenZWave.RemoteManagerClient.prototype.recv_SceneExists = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenZWave.RemoteManager_SceneExists_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'SceneExists failed: unknown result';
};
OpenZWave.RemoteManagerClient.prototype.ActivateScene = function(_sceneId) {
  this.send_ActivateScene(_sceneId);
  return this.recv_ActivateScene();
};

OpenZWave.RemoteManagerClient.prototype.send_ActivateScene = function(_sceneId) {
  this.output.writeMessageBegin('ActivateScene', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenZWave.RemoteManager_ActivateScene_args();
  args._sceneId = _sceneId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

OpenZWave.RemoteManagerClient.prototype.recv_ActivateScene = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenZWave.RemoteManager_ActivateScene_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'ActivateScene failed: unknown result';
};
OpenZWave.RemoteManagerClient.prototype.GetDriverStatistics = function(_homeId) {
  this.send_GetDriverStatistics(_homeId);
  return this.recv_GetDriverStatistics();
};

OpenZWave.RemoteManagerClient.prototype.send_GetDriverStatistics = function(_homeId) {
  this.output.writeMessageBegin('GetDriverStatistics', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenZWave.RemoteManager_GetDriverStatistics_args();
  args._homeId = _homeId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

OpenZWave.RemoteManagerClient.prototype.recv_GetDriverStatistics = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenZWave.RemoteManager_GetDriverStatistics_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'GetDriverStatistics failed: unknown result';
};
OpenZWave.RemoteManagerClient.prototype.SendAllValues = function() {
  this.send_SendAllValues();
  this.recv_SendAllValues();
};

OpenZWave.RemoteManagerClient.prototype.send_SendAllValues = function() {
  this.output.writeMessageBegin('SendAllValues', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenZWave.RemoteManager_SendAllValues_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

OpenZWave.RemoteManagerClient.prototype.recv_SendAllValues = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenZWave.RemoteManager_SendAllValues_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};
