<?php
/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
include_once $GLOBALS['THRIFT_ROOT'].'/Thrift.php';


$GLOBALS['E_RemoteValueGenre'] = array(
  'ValueGenre_Basic' => 0,
  'ValueGenre_User' => 1,
  'ValueGenre_Config' => 2,
  'ValueGenre_System' => 3,
  'ValueGenre_Count' => 4,
);

final class RemoteValueGenre {
  const ValueGenre_Basic = 0;
  const ValueGenre_User = 1;
  const ValueGenre_Config = 2;
  const ValueGenre_System = 3;
  const ValueGenre_Count = 4;
  static public $__names = array(
    0 => 'ValueGenre_Basic',
    1 => 'ValueGenre_User',
    2 => 'ValueGenre_Config',
    3 => 'ValueGenre_System',
    4 => 'ValueGenre_Count',
  );
}

$GLOBALS['E_RemoteValueType'] = array(
  'ValueType_Bool' => 0,
  'ValueType_Byte' => 1,
  'ValueType_Decimal' => 2,
  'ValueType_Int' => 3,
  'ValueType_List' => 4,
  'ValueType_Schedule' => 5,
  'ValueType_Short' => 6,
  'ValueType_String' => 7,
  'ValueType_Button' => 8,
  'ValueType_Max' => 8,
);

final class RemoteValueType {
  const ValueType_Bool = 0;
  const ValueType_Byte = 1;
  const ValueType_Decimal = 2;
  const ValueType_Int = 3;
  const ValueType_List = 4;
  const ValueType_Schedule = 5;
  const ValueType_Short = 6;
  const ValueType_String = 7;
  const ValueType_Button = 8;
  const ValueType_Max = 8;
  static public $__names = array(
    0 => 'ValueType_Bool',
    1 => 'ValueType_Byte',
    2 => 'ValueType_Decimal',
    3 => 'ValueType_Int',
    4 => 'ValueType_List',
    5 => 'ValueType_Schedule',
    6 => 'ValueType_Short',
    7 => 'ValueType_String',
    8 => 'ValueType_Button',
    8 => 'ValueType_Max',
  );
}

$GLOBALS['E_DriverControllerCommand'] = array(
  'ControllerCommand_None' => 0,
  'ControllerCommand_AddController' => 1,
  'ControllerCommand_AddDevice' => 2,
  'ControllerCommand_CreateNewPrimary' => 3,
  'ControllerCommand_ReceiveConfiguration' => 4,
  'ControllerCommand_RemoveController' => 5,
  'ControllerCommand_RemoveDevice' => 6,
  'ControllerCommand_RemoveFailedNode' => 7,
  'ControllerCommand_HasNodeFailed' => 8,
  'ControllerCommand_ReplaceFailedNode' => 9,
  'ControllerCommand_TransferPrimaryRole' => 10,
  'ControllerCommand_RequestNetworkUpdate' => 11,
  'ControllerCommand_RequestNodeNeighborUpdate' => 12,
  'ControllerCommand_AssignReturnRoute' => 13,
  'ControllerCommand_DeleteAllReturnRoutes' => 14,
  'ControllerCommand_CreateButton' => 15,
  'ControllerCommand_DeleteButton' => 16,
);

final class DriverControllerCommand {
  const ControllerCommand_None = 0;
  const ControllerCommand_AddController = 1;
  const ControllerCommand_AddDevice = 2;
  const ControllerCommand_CreateNewPrimary = 3;
  const ControllerCommand_ReceiveConfiguration = 4;
  const ControllerCommand_RemoveController = 5;
  const ControllerCommand_RemoveDevice = 6;
  const ControllerCommand_RemoveFailedNode = 7;
  const ControllerCommand_HasNodeFailed = 8;
  const ControllerCommand_ReplaceFailedNode = 9;
  const ControllerCommand_TransferPrimaryRole = 10;
  const ControllerCommand_RequestNetworkUpdate = 11;
  const ControllerCommand_RequestNodeNeighborUpdate = 12;
  const ControllerCommand_AssignReturnRoute = 13;
  const ControllerCommand_DeleteAllReturnRoutes = 14;
  const ControllerCommand_CreateButton = 15;
  const ControllerCommand_DeleteButton = 16;
  static public $__names = array(
    0 => 'ControllerCommand_None',
    1 => 'ControllerCommand_AddController',
    2 => 'ControllerCommand_AddDevice',
    3 => 'ControllerCommand_CreateNewPrimary',
    4 => 'ControllerCommand_ReceiveConfiguration',
    5 => 'ControllerCommand_RemoveController',
    6 => 'ControllerCommand_RemoveDevice',
    7 => 'ControllerCommand_RemoveFailedNode',
    8 => 'ControllerCommand_HasNodeFailed',
    9 => 'ControllerCommand_ReplaceFailedNode',
    10 => 'ControllerCommand_TransferPrimaryRole',
    11 => 'ControllerCommand_RequestNetworkUpdate',
    12 => 'ControllerCommand_RequestNodeNeighborUpdate',
    13 => 'ControllerCommand_AssignReturnRoute',
    14 => 'ControllerCommand_DeleteAllReturnRoutes',
    15 => 'ControllerCommand_CreateButton',
    16 => 'ControllerCommand_DeleteButton',
  );
}

class RemoteValueID {
  static $_TSPEC;

  public $_homeId = null;
  public $_nodeId = null;
  public $_genre = null;
  public $_commandClassId = null;
  public $_instance = null;
  public $_valueIndex = null;
  public $_type = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => '_homeId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => '_nodeId',
          'type' => TType::BYTE,
          ),
        3 => array(
          'var' => '_genre',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => '_commandClassId',
          'type' => TType::BYTE,
          ),
        5 => array(
          'var' => '_instance',
          'type' => TType::BYTE,
          ),
        6 => array(
          'var' => '_valueIndex',
          'type' => TType::BYTE,
          ),
        7 => array(
          'var' => '_type',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['_homeId'])) {
        $this->_homeId = $vals['_homeId'];
      }
      if (isset($vals['_nodeId'])) {
        $this->_nodeId = $vals['_nodeId'];
      }
      if (isset($vals['_genre'])) {
        $this->_genre = $vals['_genre'];
      }
      if (isset($vals['_commandClassId'])) {
        $this->_commandClassId = $vals['_commandClassId'];
      }
      if (isset($vals['_instance'])) {
        $this->_instance = $vals['_instance'];
      }
      if (isset($vals['_valueIndex'])) {
        $this->_valueIndex = $vals['_valueIndex'];
      }
      if (isset($vals['_type'])) {
        $this->_type = $vals['_type'];
      }
    }
  }

  public function getName() {
    return 'RemoteValueID';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->_homeId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::BYTE) {
            $xfer += $input->readByte($this->_nodeId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->_genre);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::BYTE) {
            $xfer += $input->readByte($this->_commandClassId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::BYTE) {
            $xfer += $input->readByte($this->_instance);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::BYTE) {
            $xfer += $input->readByte($this->_valueIndex);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('RemoteValueID');
    if ($this->_homeId !== null) {
      $xfer += $output->writeFieldBegin('_homeId', TType::I32, 1);
      $xfer += $output->writeI32($this->_homeId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->_nodeId !== null) {
      $xfer += $output->writeFieldBegin('_nodeId', TType::BYTE, 2);
      $xfer += $output->writeByte($this->_nodeId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->_genre !== null) {
      $xfer += $output->writeFieldBegin('_genre', TType::I32, 3);
      $xfer += $output->writeI32($this->_genre);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->_commandClassId !== null) {
      $xfer += $output->writeFieldBegin('_commandClassId', TType::BYTE, 4);
      $xfer += $output->writeByte($this->_commandClassId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->_instance !== null) {
      $xfer += $output->writeFieldBegin('_instance', TType::BYTE, 5);
      $xfer += $output->writeByte($this->_instance);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->_valueIndex !== null) {
      $xfer += $output->writeFieldBegin('_valueIndex', TType::BYTE, 6);
      $xfer += $output->writeByte($this->_valueIndex);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->_type !== null) {
      $xfer += $output->writeFieldBegin('_type', TType::I32, 7);
      $xfer += $output->writeI32($this->_type);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DriverData {
  static $_TSPEC;

  public $s_SOFCnt = null;
  public $s_ACKWaiting = null;
  public $s_readAborts = null;
  public $s_badChecksum = null;
  public $s_readCnt = null;
  public $s_writeCnt = null;
  public $s_CANCnt = null;
  public $s_NAKCnt = null;
  public $s_ACKCnt = null;
  public $s_OOFCnt = null;
  public $s_dropped = null;
  public $s_retries = null;
  public $s_controllerReadCnt = null;
  public $s_controllerWriteCnt = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 's_SOFCnt',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 's_ACKWaiting',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 's_readAborts',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 's_badChecksum',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 's_readCnt',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 's_writeCnt',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 's_CANCnt',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 's_NAKCnt',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 's_ACKCnt',
          'type' => TType::I32,
          ),
        10 => array(
          'var' => 's_OOFCnt',
          'type' => TType::I32,
          ),
        11 => array(
          'var' => 's_dropped',
          'type' => TType::I32,
          ),
        12 => array(
          'var' => 's_retries',
          'type' => TType::I32,
          ),
        13 => array(
          'var' => 's_controllerReadCnt',
          'type' => TType::I32,
          ),
        14 => array(
          'var' => 's_controllerWriteCnt',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['s_SOFCnt'])) {
        $this->s_SOFCnt = $vals['s_SOFCnt'];
      }
      if (isset($vals['s_ACKWaiting'])) {
        $this->s_ACKWaiting = $vals['s_ACKWaiting'];
      }
      if (isset($vals['s_readAborts'])) {
        $this->s_readAborts = $vals['s_readAborts'];
      }
      if (isset($vals['s_badChecksum'])) {
        $this->s_badChecksum = $vals['s_badChecksum'];
      }
      if (isset($vals['s_readCnt'])) {
        $this->s_readCnt = $vals['s_readCnt'];
      }
      if (isset($vals['s_writeCnt'])) {
        $this->s_writeCnt = $vals['s_writeCnt'];
      }
      if (isset($vals['s_CANCnt'])) {
        $this->s_CANCnt = $vals['s_CANCnt'];
      }
      if (isset($vals['s_NAKCnt'])) {
        $this->s_NAKCnt = $vals['s_NAKCnt'];
      }
      if (isset($vals['s_ACKCnt'])) {
        $this->s_ACKCnt = $vals['s_ACKCnt'];
      }
      if (isset($vals['s_OOFCnt'])) {
        $this->s_OOFCnt = $vals['s_OOFCnt'];
      }
      if (isset($vals['s_dropped'])) {
        $this->s_dropped = $vals['s_dropped'];
      }
      if (isset($vals['s_retries'])) {
        $this->s_retries = $vals['s_retries'];
      }
      if (isset($vals['s_controllerReadCnt'])) {
        $this->s_controllerReadCnt = $vals['s_controllerReadCnt'];
      }
      if (isset($vals['s_controllerWriteCnt'])) {
        $this->s_controllerWriteCnt = $vals['s_controllerWriteCnt'];
      }
    }
  }

  public function getName() {
    return 'DriverData';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->s_SOFCnt);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->s_ACKWaiting);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->s_readAborts);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->s_badChecksum);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->s_readCnt);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->s_writeCnt);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->s_CANCnt);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->s_NAKCnt);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->s_ACKCnt);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->s_OOFCnt);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->s_dropped);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->s_retries);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->s_controllerReadCnt);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->s_controllerWriteCnt);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DriverData');
    if ($this->s_SOFCnt !== null) {
      $xfer += $output->writeFieldBegin('s_SOFCnt', TType::I32, 1);
      $xfer += $output->writeI32($this->s_SOFCnt);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->s_ACKWaiting !== null) {
      $xfer += $output->writeFieldBegin('s_ACKWaiting', TType::I32, 2);
      $xfer += $output->writeI32($this->s_ACKWaiting);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->s_readAborts !== null) {
      $xfer += $output->writeFieldBegin('s_readAborts', TType::I32, 3);
      $xfer += $output->writeI32($this->s_readAborts);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->s_badChecksum !== null) {
      $xfer += $output->writeFieldBegin('s_badChecksum', TType::I32, 4);
      $xfer += $output->writeI32($this->s_badChecksum);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->s_readCnt !== null) {
      $xfer += $output->writeFieldBegin('s_readCnt', TType::I32, 5);
      $xfer += $output->writeI32($this->s_readCnt);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->s_writeCnt !== null) {
      $xfer += $output->writeFieldBegin('s_writeCnt', TType::I32, 6);
      $xfer += $output->writeI32($this->s_writeCnt);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->s_CANCnt !== null) {
      $xfer += $output->writeFieldBegin('s_CANCnt', TType::I32, 7);
      $xfer += $output->writeI32($this->s_CANCnt);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->s_NAKCnt !== null) {
      $xfer += $output->writeFieldBegin('s_NAKCnt', TType::I32, 8);
      $xfer += $output->writeI32($this->s_NAKCnt);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->s_ACKCnt !== null) {
      $xfer += $output->writeFieldBegin('s_ACKCnt', TType::I32, 9);
      $xfer += $output->writeI32($this->s_ACKCnt);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->s_OOFCnt !== null) {
      $xfer += $output->writeFieldBegin('s_OOFCnt', TType::I32, 10);
      $xfer += $output->writeI32($this->s_OOFCnt);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->s_dropped !== null) {
      $xfer += $output->writeFieldBegin('s_dropped', TType::I32, 11);
      $xfer += $output->writeI32($this->s_dropped);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->s_retries !== null) {
      $xfer += $output->writeFieldBegin('s_retries', TType::I32, 12);
      $xfer += $output->writeI32($this->s_retries);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->s_controllerReadCnt !== null) {
      $xfer += $output->writeFieldBegin('s_controllerReadCnt', TType::I32, 13);
      $xfer += $output->writeI32($this->s_controllerReadCnt);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->s_controllerWriteCnt !== null) {
      $xfer += $output->writeFieldBegin('s_controllerWriteCnt', TType::I32, 14);
      $xfer += $output->writeI32($this->s_controllerWriteCnt);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetDriverStatisticsReturnStruct {
  static $_TSPEC;

  public $_data = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => '_data',
          'type' => TType::STRUCT,
          'class' => 'DriverData',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['_data'])) {
        $this->_data = $vals['_data'];
      }
    }
  }

  public function getName() {
    return 'GetDriverStatisticsReturnStruct';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->_data = new DriverData();
            $xfer += $this->_data->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetDriverStatisticsReturnStruct');
    if ($this->_data !== null) {
      if (!is_object($this->_data)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('_data', TType::STRUCT, 1);
      $xfer += $this->_data->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetSwitchPointReturnStruct {
  static $_TSPEC;

  public $retval = null;
  public $o_hours = null;
  public $o_minutes = null;
  public $o_setback = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'retval',
          'type' => TType::BOOL,
          ),
        2 => array(
          'var' => 'o_hours',
          'type' => TType::BYTE,
          ),
        3 => array(
          'var' => 'o_minutes',
          'type' => TType::BYTE,
          ),
        4 => array(
          'var' => 'o_setback',
          'type' => TType::BYTE,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['retval'])) {
        $this->retval = $vals['retval'];
      }
      if (isset($vals['o_hours'])) {
        $this->o_hours = $vals['o_hours'];
      }
      if (isset($vals['o_minutes'])) {
        $this->o_minutes = $vals['o_minutes'];
      }
      if (isset($vals['o_setback'])) {
        $this->o_setback = $vals['o_setback'];
      }
    }
  }

  public function getName() {
    return 'GetSwitchPointReturnStruct';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->retval);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::BYTE) {
            $xfer += $input->readByte($this->o_hours);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::BYTE) {
            $xfer += $input->readByte($this->o_minutes);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::BYTE) {
            $xfer += $input->readByte($this->o_setback);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetSwitchPointReturnStruct');
    if ($this->retval !== null) {
      $xfer += $output->writeFieldBegin('retval', TType::BOOL, 1);
      $xfer += $output->writeBool($this->retval);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->o_hours !== null) {
      $xfer += $output->writeFieldBegin('o_hours', TType::BYTE, 2);
      $xfer += $output->writeByte($this->o_hours);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->o_minutes !== null) {
      $xfer += $output->writeFieldBegin('o_minutes', TType::BYTE, 3);
      $xfer += $output->writeByte($this->o_minutes);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->o_setback !== null) {
      $xfer += $output->writeFieldBegin('o_setback', TType::BYTE, 4);
      $xfer += $output->writeByte($this->o_setback);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Bool_Bool {
  static $_TSPEC;

  public $retval = null;
  public $o_value = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'retval',
          'type' => TType::BOOL,
          ),
        2 => array(
          'var' => 'o_value',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['retval'])) {
        $this->retval = $vals['retval'];
      }
      if (isset($vals['o_value'])) {
        $this->o_value = $vals['o_value'];
      }
    }
  }

  public function getName() {
    return 'Bool_Bool';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->retval);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->o_value);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Bool_Bool');
    if ($this->retval !== null) {
      $xfer += $output->writeFieldBegin('retval', TType::BOOL, 1);
      $xfer += $output->writeBool($this->retval);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->o_value !== null) {
      $xfer += $output->writeFieldBegin('o_value', TType::BOOL, 2);
      $xfer += $output->writeBool($this->o_value);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Bool_UInt8 {
  static $_TSPEC;

  public $retval = null;
  public $o_value = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'retval',
          'type' => TType::BOOL,
          ),
        2 => array(
          'var' => 'o_value',
          'type' => TType::BYTE,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['retval'])) {
        $this->retval = $vals['retval'];
      }
      if (isset($vals['o_value'])) {
        $this->o_value = $vals['o_value'];
      }
    }
  }

  public function getName() {
    return 'Bool_UInt8';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->retval);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::BYTE) {
            $xfer += $input->readByte($this->o_value);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Bool_UInt8');
    if ($this->retval !== null) {
      $xfer += $output->writeFieldBegin('retval', TType::BOOL, 1);
      $xfer += $output->writeBool($this->retval);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->o_value !== null) {
      $xfer += $output->writeFieldBegin('o_value', TType::BYTE, 2);
      $xfer += $output->writeByte($this->o_value);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Bool_Float {
  static $_TSPEC;

  public $retval = null;
  public $o_value = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'retval',
          'type' => TType::BOOL,
          ),
        2 => array(
          'var' => 'o_value',
          'type' => TType::DOUBLE,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['retval'])) {
        $this->retval = $vals['retval'];
      }
      if (isset($vals['o_value'])) {
        $this->o_value = $vals['o_value'];
      }
    }
  }

  public function getName() {
    return 'Bool_Float';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->retval);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->o_value);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Bool_Float');
    if ($this->retval !== null) {
      $xfer += $output->writeFieldBegin('retval', TType::BOOL, 1);
      $xfer += $output->writeBool($this->retval);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->o_value !== null) {
      $xfer += $output->writeFieldBegin('o_value', TType::DOUBLE, 2);
      $xfer += $output->writeDouble($this->o_value);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Bool_Int {
  static $_TSPEC;

  public $retval = null;
  public $o_value = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'retval',
          'type' => TType::BOOL,
          ),
        2 => array(
          'var' => 'o_value',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['retval'])) {
        $this->retval = $vals['retval'];
      }
      if (isset($vals['o_value'])) {
        $this->o_value = $vals['o_value'];
      }
    }
  }

  public function getName() {
    return 'Bool_Int';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->retval);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->o_value);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Bool_Int');
    if ($this->retval !== null) {
      $xfer += $output->writeFieldBegin('retval', TType::BOOL, 1);
      $xfer += $output->writeBool($this->retval);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->o_value !== null) {
      $xfer += $output->writeFieldBegin('o_value', TType::I32, 2);
      $xfer += $output->writeI32($this->o_value);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Bool_Int16 {
  static $_TSPEC;

  public $retval = null;
  public $o_value = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'retval',
          'type' => TType::BOOL,
          ),
        2 => array(
          'var' => 'o_value',
          'type' => TType::I16,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['retval'])) {
        $this->retval = $vals['retval'];
      }
      if (isset($vals['o_value'])) {
        $this->o_value = $vals['o_value'];
      }
    }
  }

  public function getName() {
    return 'Bool_Int16';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->retval);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->o_value);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Bool_Int16');
    if ($this->retval !== null) {
      $xfer += $output->writeFieldBegin('retval', TType::BOOL, 1);
      $xfer += $output->writeBool($this->retval);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->o_value !== null) {
      $xfer += $output->writeFieldBegin('o_value', TType::I16, 2);
      $xfer += $output->writeI16($this->o_value);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Bool_String {
  static $_TSPEC;

  public $retval = null;
  public $o_value = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'retval',
          'type' => TType::BOOL,
          ),
        2 => array(
          'var' => 'o_value',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['retval'])) {
        $this->retval = $vals['retval'];
      }
      if (isset($vals['o_value'])) {
        $this->o_value = $vals['o_value'];
      }
    }
  }

  public function getName() {
    return 'Bool_String';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->retval);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->o_value);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Bool_String');
    if ($this->retval !== null) {
      $xfer += $output->writeFieldBegin('retval', TType::BOOL, 1);
      $xfer += $output->writeBool($this->retval);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->o_value !== null) {
      $xfer += $output->writeFieldBegin('o_value', TType::STRING, 2);
      $xfer += $output->writeString($this->o_value);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Bool_ListString {
  static $_TSPEC;

  public $retval = null;
  public $o_value = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'retval',
          'type' => TType::BOOL,
          ),
        2 => array(
          'var' => 'o_value',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['retval'])) {
        $this->retval = $vals['retval'];
      }
      if (isset($vals['o_value'])) {
        $this->o_value = $vals['o_value'];
      }
    }
  }

  public function getName() {
    return 'Bool_ListString';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->retval);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->o_value = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $xfer += $input->readString($elem5);
              $this->o_value []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Bool_ListString');
    if ($this->retval !== null) {
      $xfer += $output->writeFieldBegin('retval', TType::BOOL, 1);
      $xfer += $output->writeBool($this->retval);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->o_value !== null) {
      if (!is_array($this->o_value)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('o_value', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRING, count($this->o_value));
        {
          foreach ($this->o_value as $iter6)
          {
            $xfer += $output->writeString($iter6);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class UInt32_ListByte {
  static $_TSPEC;

  public $retval = null;
  public $_nodeNeighbors = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'retval',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => '_nodeNeighbors',
          'type' => TType::LST,
          'etype' => TType::BYTE,
          'elem' => array(
            'type' => TType::BYTE,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['retval'])) {
        $this->retval = $vals['retval'];
      }
      if (isset($vals['_nodeNeighbors'])) {
        $this->_nodeNeighbors = $vals['_nodeNeighbors'];
      }
    }
  }

  public function getName() {
    return 'UInt32_ListByte';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->retval);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->_nodeNeighbors = array();
            $_size7 = 0;
            $_etype10 = 0;
            $xfer += $input->readListBegin($_etype10, $_size7);
            for ($_i11 = 0; $_i11 < $_size7; ++$_i11)
            {
              $elem12 = null;
              $xfer += $input->readByte($elem12);
              $this->_nodeNeighbors []= $elem12;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UInt32_ListByte');
    if ($this->retval !== null) {
      $xfer += $output->writeFieldBegin('retval', TType::I32, 1);
      $xfer += $output->writeI32($this->retval);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->_nodeNeighbors !== null) {
      if (!is_array($this->_nodeNeighbors)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('_nodeNeighbors', TType::LST, 2);
      {
        $output->writeListBegin(TType::BYTE, count($this->_nodeNeighbors));
        {
          foreach ($this->_nodeNeighbors as $iter13)
          {
            $xfer += $output->writeByte($iter13);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Bool_GetNodeClassInformation {
  static $_TSPEC;

  public $retval = null;
  public $_className = null;
  public $_classVersion = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'retval',
          'type' => TType::BOOL,
          ),
        2 => array(
          'var' => '_className',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => '_classVersion',
          'type' => TType::BYTE,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['retval'])) {
        $this->retval = $vals['retval'];
      }
      if (isset($vals['_className'])) {
        $this->_className = $vals['_className'];
      }
      if (isset($vals['_classVersion'])) {
        $this->_classVersion = $vals['_classVersion'];
      }
    }
  }

  public function getName() {
    return 'Bool_GetNodeClassInformation';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->retval);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->_className);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::BYTE) {
            $xfer += $input->readByte($this->_classVersion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Bool_GetNodeClassInformation');
    if ($this->retval !== null) {
      $xfer += $output->writeFieldBegin('retval', TType::BOOL, 1);
      $xfer += $output->writeBool($this->retval);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->_className !== null) {
      $xfer += $output->writeFieldBegin('_className', TType::STRING, 2);
      $xfer += $output->writeString($this->_className);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->_classVersion !== null) {
      $xfer += $output->writeFieldBegin('_classVersion', TType::BYTE, 3);
      $xfer += $output->writeByte($this->_classVersion);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetAssociationsReturnStruct {
  static $_TSPEC;

  public $retval = null;
  public $o_associations = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'retval',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'o_associations',
          'type' => TType::LST,
          'etype' => TType::BYTE,
          'elem' => array(
            'type' => TType::BYTE,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['retval'])) {
        $this->retval = $vals['retval'];
      }
      if (isset($vals['o_associations'])) {
        $this->o_associations = $vals['o_associations'];
      }
    }
  }

  public function getName() {
    return 'GetAssociationsReturnStruct';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->retval);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->o_associations = array();
            $_size14 = 0;
            $_etype17 = 0;
            $xfer += $input->readListBegin($_etype17, $_size14);
            for ($_i18 = 0; $_i18 < $_size14; ++$_i18)
            {
              $elem19 = null;
              $xfer += $input->readByte($elem19);
              $this->o_associations []= $elem19;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetAssociationsReturnStruct');
    if ($this->retval !== null) {
      $xfer += $output->writeFieldBegin('retval', TType::I32, 1);
      $xfer += $output->writeI32($this->retval);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->o_associations !== null) {
      if (!is_array($this->o_associations)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('o_associations', TType::LST, 2);
      {
        $output->writeListBegin(TType::BYTE, count($this->o_associations));
        {
          foreach ($this->o_associations as $iter20)
          {
            $xfer += $output->writeByte($iter20);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetAllScenesReturnStruct {
  static $_TSPEC;

  public $retval = null;
  public $_sceneIds = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'retval',
          'type' => TType::BYTE,
          ),
        2 => array(
          'var' => '_sceneIds',
          'type' => TType::LST,
          'etype' => TType::BYTE,
          'elem' => array(
            'type' => TType::BYTE,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['retval'])) {
        $this->retval = $vals['retval'];
      }
      if (isset($vals['_sceneIds'])) {
        $this->_sceneIds = $vals['_sceneIds'];
      }
    }
  }

  public function getName() {
    return 'GetAllScenesReturnStruct';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::BYTE) {
            $xfer += $input->readByte($this->retval);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->_sceneIds = array();
            $_size21 = 0;
            $_etype24 = 0;
            $xfer += $input->readListBegin($_etype24, $_size21);
            for ($_i25 = 0; $_i25 < $_size21; ++$_i25)
            {
              $elem26 = null;
              $xfer += $input->readByte($elem26);
              $this->_sceneIds []= $elem26;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetAllScenesReturnStruct');
    if ($this->retval !== null) {
      $xfer += $output->writeFieldBegin('retval', TType::BYTE, 1);
      $xfer += $output->writeByte($this->retval);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->_sceneIds !== null) {
      if (!is_array($this->_sceneIds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('_sceneIds', TType::LST, 2);
      {
        $output->writeListBegin(TType::BYTE, count($this->_sceneIds));
        {
          foreach ($this->_sceneIds as $iter27)
          {
            $xfer += $output->writeByte($iter27);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SceneGetValuesReturnStruct {
  static $_TSPEC;

  public $retval = null;
  public $o_value = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'retval',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'o_value',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'RemoteValueID',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['retval'])) {
        $this->retval = $vals['retval'];
      }
      if (isset($vals['o_value'])) {
        $this->o_value = $vals['o_value'];
      }
    }
  }

  public function getName() {
    return 'SceneGetValuesReturnStruct';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->retval);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->o_value = array();
            $_size28 = 0;
            $_etype31 = 0;
            $xfer += $input->readListBegin($_etype31, $_size28);
            for ($_i32 = 0; $_i32 < $_size28; ++$_i32)
            {
              $elem33 = null;
              $elem33 = new RemoteValueID();
              $xfer += $elem33->read($input);
              $this->o_value []= $elem33;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SceneGetValuesReturnStruct');
    if ($this->retval !== null) {
      $xfer += $output->writeFieldBegin('retval', TType::I32, 1);
      $xfer += $output->writeI32($this->retval);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->o_value !== null) {
      if (!is_array($this->o_value)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('o_value', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->o_value));
        {
          foreach ($this->o_value as $iter34)
          {
            $xfer += $iter34->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

?>
