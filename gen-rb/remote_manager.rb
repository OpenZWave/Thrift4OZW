#
# Autogenerated by Thrift Compiler (0.7.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'ozw_types'

    module OpenZWave
      module RemoteManager
        class Client
          include ::Thrift::Client

          def WriteConfig(_homeId)
            send_WriteConfig(_homeId)
            recv_WriteConfig()
          end

          def send_WriteConfig(_homeId)
            send_message('WriteConfig', WriteConfig_args, :_homeId => _homeId)
          end

          def recv_WriteConfig()
            result = receive_message(WriteConfig_result)
            return
          end

          def GetControllerNodeId(_homeId)
            send_GetControllerNodeId(_homeId)
            return recv_GetControllerNodeId()
          end

          def send_GetControllerNodeId(_homeId)
            send_message('GetControllerNodeId', GetControllerNodeId_args, :_homeId => _homeId)
          end

          def recv_GetControllerNodeId()
            result = receive_message(GetControllerNodeId_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'GetControllerNodeId failed: unknown result')
          end

          def IsPrimaryController(_homeId)
            send_IsPrimaryController(_homeId)
            return recv_IsPrimaryController()
          end

          def send_IsPrimaryController(_homeId)
            send_message('IsPrimaryController', IsPrimaryController_args, :_homeId => _homeId)
          end

          def recv_IsPrimaryController()
            result = receive_message(IsPrimaryController_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'IsPrimaryController failed: unknown result')
          end

          def IsBridgeController(_homeId)
            send_IsBridgeController(_homeId)
            return recv_IsBridgeController()
          end

          def send_IsBridgeController(_homeId)
            send_message('IsBridgeController', IsBridgeController_args, :_homeId => _homeId)
          end

          def recv_IsBridgeController()
            result = receive_message(IsBridgeController_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'IsBridgeController failed: unknown result')
          end

          def GetLibraryVersion(_homeId)
            send_GetLibraryVersion(_homeId)
            return recv_GetLibraryVersion()
          end

          def send_GetLibraryVersion(_homeId)
            send_message('GetLibraryVersion', GetLibraryVersion_args, :_homeId => _homeId)
          end

          def recv_GetLibraryVersion()
            result = receive_message(GetLibraryVersion_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'GetLibraryVersion failed: unknown result')
          end

          def GetLibraryTypeName(_homeId)
            send_GetLibraryTypeName(_homeId)
            return recv_GetLibraryTypeName()
          end

          def send_GetLibraryTypeName(_homeId)
            send_message('GetLibraryTypeName', GetLibraryTypeName_args, :_homeId => _homeId)
          end

          def recv_GetLibraryTypeName()
            result = receive_message(GetLibraryTypeName_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'GetLibraryTypeName failed: unknown result')
          end

          def GetSendQueueCount(_homeId)
            send_GetSendQueueCount(_homeId)
            return recv_GetSendQueueCount()
          end

          def send_GetSendQueueCount(_homeId)
            send_message('GetSendQueueCount', GetSendQueueCount_args, :_homeId => _homeId)
          end

          def recv_GetSendQueueCount()
            result = receive_message(GetSendQueueCount_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'GetSendQueueCount failed: unknown result')
          end

          def GetPollInterval()
            send_GetPollInterval()
            return recv_GetPollInterval()
          end

          def send_GetPollInterval()
            send_message('GetPollInterval', GetPollInterval_args)
          end

          def recv_GetPollInterval()
            result = receive_message(GetPollInterval_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'GetPollInterval failed: unknown result')
          end

          def SetPollInterval(_seconds)
            send_SetPollInterval(_seconds)
            recv_SetPollInterval()
          end

          def send_SetPollInterval(_seconds)
            send_message('SetPollInterval', SetPollInterval_args, :_seconds => _seconds)
          end

          def recv_SetPollInterval()
            result = receive_message(SetPollInterval_result)
            return
          end

          def EnablePoll(_valueId)
            send_EnablePoll(_valueId)
            return recv_EnablePoll()
          end

          def send_EnablePoll(_valueId)
            send_message('EnablePoll', EnablePoll_args, :_valueId => _valueId)
          end

          def recv_EnablePoll()
            result = receive_message(EnablePoll_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'EnablePoll failed: unknown result')
          end

          def DisablePoll(_valueId)
            send_DisablePoll(_valueId)
            return recv_DisablePoll()
          end

          def send_DisablePoll(_valueId)
            send_message('DisablePoll', DisablePoll_args, :_valueId => _valueId)
          end

          def recv_DisablePoll()
            result = receive_message(DisablePoll_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'DisablePoll failed: unknown result')
          end

          def isPolled(_valueId)
            send_isPolled(_valueId)
            return recv_isPolled()
          end

          def send_isPolled(_valueId)
            send_message('isPolled', IsPolled_args, :_valueId => _valueId)
          end

          def recv_isPolled()
            result = receive_message(IsPolled_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'isPolled failed: unknown result')
          end

          def RefreshNodeInfo(_homeId, _nodeId)
            send_RefreshNodeInfo(_homeId, _nodeId)
            return recv_RefreshNodeInfo()
          end

          def send_RefreshNodeInfo(_homeId, _nodeId)
            send_message('RefreshNodeInfo', RefreshNodeInfo_args, :_homeId => _homeId, :_nodeId => _nodeId)
          end

          def recv_RefreshNodeInfo()
            result = receive_message(RefreshNodeInfo_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'RefreshNodeInfo failed: unknown result')
          end

          def RequestNodeState(_homeId, _nodeId)
            send_RequestNodeState(_homeId, _nodeId)
            return recv_RequestNodeState()
          end

          def send_RequestNodeState(_homeId, _nodeId)
            send_message('RequestNodeState', RequestNodeState_args, :_homeId => _homeId, :_nodeId => _nodeId)
          end

          def recv_RequestNodeState()
            result = receive_message(RequestNodeState_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'RequestNodeState failed: unknown result')
          end

          def RequestNodeDynamic(_homeId, _nodeId)
            send_RequestNodeDynamic(_homeId, _nodeId)
            return recv_RequestNodeDynamic()
          end

          def send_RequestNodeDynamic(_homeId, _nodeId)
            send_message('RequestNodeDynamic', RequestNodeDynamic_args, :_homeId => _homeId, :_nodeId => _nodeId)
          end

          def recv_RequestNodeDynamic()
            result = receive_message(RequestNodeDynamic_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'RequestNodeDynamic failed: unknown result')
          end

          def IsNodeListeningDevice(_homeId, _nodeId)
            send_IsNodeListeningDevice(_homeId, _nodeId)
            return recv_IsNodeListeningDevice()
          end

          def send_IsNodeListeningDevice(_homeId, _nodeId)
            send_message('IsNodeListeningDevice', IsNodeListeningDevice_args, :_homeId => _homeId, :_nodeId => _nodeId)
          end

          def recv_IsNodeListeningDevice()
            result = receive_message(IsNodeListeningDevice_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'IsNodeListeningDevice failed: unknown result')
          end

          def IsNodeRoutingDevice(_homeId, _nodeId)
            send_IsNodeRoutingDevice(_homeId, _nodeId)
            return recv_IsNodeRoutingDevice()
          end

          def send_IsNodeRoutingDevice(_homeId, _nodeId)
            send_message('IsNodeRoutingDevice', IsNodeRoutingDevice_args, :_homeId => _homeId, :_nodeId => _nodeId)
          end

          def recv_IsNodeRoutingDevice()
            result = receive_message(IsNodeRoutingDevice_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'IsNodeRoutingDevice failed: unknown result')
          end

          def GetNodeMaxBaudRate(_homeId, _nodeId)
            send_GetNodeMaxBaudRate(_homeId, _nodeId)
            return recv_GetNodeMaxBaudRate()
          end

          def send_GetNodeMaxBaudRate(_homeId, _nodeId)
            send_message('GetNodeMaxBaudRate', GetNodeMaxBaudRate_args, :_homeId => _homeId, :_nodeId => _nodeId)
          end

          def recv_GetNodeMaxBaudRate()
            result = receive_message(GetNodeMaxBaudRate_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'GetNodeMaxBaudRate failed: unknown result')
          end

          def GetNodeVersion(_homeId, _nodeId)
            send_GetNodeVersion(_homeId, _nodeId)
            return recv_GetNodeVersion()
          end

          def send_GetNodeVersion(_homeId, _nodeId)
            send_message('GetNodeVersion', GetNodeVersion_args, :_homeId => _homeId, :_nodeId => _nodeId)
          end

          def recv_GetNodeVersion()
            result = receive_message(GetNodeVersion_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'GetNodeVersion failed: unknown result')
          end

          def GetNodeSecurity(_homeId, _nodeId)
            send_GetNodeSecurity(_homeId, _nodeId)
            return recv_GetNodeSecurity()
          end

          def send_GetNodeSecurity(_homeId, _nodeId)
            send_message('GetNodeSecurity', GetNodeSecurity_args, :_homeId => _homeId, :_nodeId => _nodeId)
          end

          def recv_GetNodeSecurity()
            result = receive_message(GetNodeSecurity_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'GetNodeSecurity failed: unknown result')
          end

          def GetNodeBasic(_homeId, _nodeId)
            send_GetNodeBasic(_homeId, _nodeId)
            return recv_GetNodeBasic()
          end

          def send_GetNodeBasic(_homeId, _nodeId)
            send_message('GetNodeBasic', GetNodeBasic_args, :_homeId => _homeId, :_nodeId => _nodeId)
          end

          def recv_GetNodeBasic()
            result = receive_message(GetNodeBasic_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'GetNodeBasic failed: unknown result')
          end

          def GetNodeGeneric(_homeId, _nodeId)
            send_GetNodeGeneric(_homeId, _nodeId)
            return recv_GetNodeGeneric()
          end

          def send_GetNodeGeneric(_homeId, _nodeId)
            send_message('GetNodeGeneric', GetNodeGeneric_args, :_homeId => _homeId, :_nodeId => _nodeId)
          end

          def recv_GetNodeGeneric()
            result = receive_message(GetNodeGeneric_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'GetNodeGeneric failed: unknown result')
          end

          def GetNodeSpecific(_homeId, _nodeId)
            send_GetNodeSpecific(_homeId, _nodeId)
            return recv_GetNodeSpecific()
          end

          def send_GetNodeSpecific(_homeId, _nodeId)
            send_message('GetNodeSpecific', GetNodeSpecific_args, :_homeId => _homeId, :_nodeId => _nodeId)
          end

          def recv_GetNodeSpecific()
            result = receive_message(GetNodeSpecific_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'GetNodeSpecific failed: unknown result')
          end

          def GetNodeType(_homeId, _nodeId)
            send_GetNodeType(_homeId, _nodeId)
            return recv_GetNodeType()
          end

          def send_GetNodeType(_homeId, _nodeId)
            send_message('GetNodeType', GetNodeType_args, :_homeId => _homeId, :_nodeId => _nodeId)
          end

          def recv_GetNodeType()
            result = receive_message(GetNodeType_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'GetNodeType failed: unknown result')
          end

          def GetNodeNeighbors(_homeId, _nodeId)
            send_GetNodeNeighbors(_homeId, _nodeId)
            return recv_GetNodeNeighbors()
          end

          def send_GetNodeNeighbors(_homeId, _nodeId)
            send_message('GetNodeNeighbors', GetNodeNeighbors_args, :_homeId => _homeId, :_nodeId => _nodeId)
          end

          def recv_GetNodeNeighbors()
            result = receive_message(GetNodeNeighbors_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'GetNodeNeighbors failed: unknown result')
          end

          def GetNodeManufacturerName(_homeId, _nodeId)
            send_GetNodeManufacturerName(_homeId, _nodeId)
            return recv_GetNodeManufacturerName()
          end

          def send_GetNodeManufacturerName(_homeId, _nodeId)
            send_message('GetNodeManufacturerName', GetNodeManufacturerName_args, :_homeId => _homeId, :_nodeId => _nodeId)
          end

          def recv_GetNodeManufacturerName()
            result = receive_message(GetNodeManufacturerName_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'GetNodeManufacturerName failed: unknown result')
          end

          def GetNodeProductName(_homeId, _nodeId)
            send_GetNodeProductName(_homeId, _nodeId)
            return recv_GetNodeProductName()
          end

          def send_GetNodeProductName(_homeId, _nodeId)
            send_message('GetNodeProductName', GetNodeProductName_args, :_homeId => _homeId, :_nodeId => _nodeId)
          end

          def recv_GetNodeProductName()
            result = receive_message(GetNodeProductName_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'GetNodeProductName failed: unknown result')
          end

          def GetNodeName(_homeId, _nodeId)
            send_GetNodeName(_homeId, _nodeId)
            return recv_GetNodeName()
          end

          def send_GetNodeName(_homeId, _nodeId)
            send_message('GetNodeName', GetNodeName_args, :_homeId => _homeId, :_nodeId => _nodeId)
          end

          def recv_GetNodeName()
            result = receive_message(GetNodeName_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'GetNodeName failed: unknown result')
          end

          def GetNodeLocation(_homeId, _nodeId)
            send_GetNodeLocation(_homeId, _nodeId)
            return recv_GetNodeLocation()
          end

          def send_GetNodeLocation(_homeId, _nodeId)
            send_message('GetNodeLocation', GetNodeLocation_args, :_homeId => _homeId, :_nodeId => _nodeId)
          end

          def recv_GetNodeLocation()
            result = receive_message(GetNodeLocation_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'GetNodeLocation failed: unknown result')
          end

          def GetNodeManufacturerId(_homeId, _nodeId)
            send_GetNodeManufacturerId(_homeId, _nodeId)
            return recv_GetNodeManufacturerId()
          end

          def send_GetNodeManufacturerId(_homeId, _nodeId)
            send_message('GetNodeManufacturerId', GetNodeManufacturerId_args, :_homeId => _homeId, :_nodeId => _nodeId)
          end

          def recv_GetNodeManufacturerId()
            result = receive_message(GetNodeManufacturerId_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'GetNodeManufacturerId failed: unknown result')
          end

          def GetNodeProductType(_homeId, _nodeId)
            send_GetNodeProductType(_homeId, _nodeId)
            return recv_GetNodeProductType()
          end

          def send_GetNodeProductType(_homeId, _nodeId)
            send_message('GetNodeProductType', GetNodeProductType_args, :_homeId => _homeId, :_nodeId => _nodeId)
          end

          def recv_GetNodeProductType()
            result = receive_message(GetNodeProductType_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'GetNodeProductType failed: unknown result')
          end

          def GetNodeProductId(_homeId, _nodeId)
            send_GetNodeProductId(_homeId, _nodeId)
            return recv_GetNodeProductId()
          end

          def send_GetNodeProductId(_homeId, _nodeId)
            send_message('GetNodeProductId', GetNodeProductId_args, :_homeId => _homeId, :_nodeId => _nodeId)
          end

          def recv_GetNodeProductId()
            result = receive_message(GetNodeProductId_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'GetNodeProductId failed: unknown result')
          end

          def SetNodeManufacturerName(_homeId, _nodeId, _manufacturerName)
            send_SetNodeManufacturerName(_homeId, _nodeId, _manufacturerName)
            recv_SetNodeManufacturerName()
          end

          def send_SetNodeManufacturerName(_homeId, _nodeId, _manufacturerName)
            send_message('SetNodeManufacturerName', SetNodeManufacturerName_args, :_homeId => _homeId, :_nodeId => _nodeId, :_manufacturerName => _manufacturerName)
          end

          def recv_SetNodeManufacturerName()
            result = receive_message(SetNodeManufacturerName_result)
            return
          end

          def SetNodeProductName(_homeId, _nodeId, _productName)
            send_SetNodeProductName(_homeId, _nodeId, _productName)
            recv_SetNodeProductName()
          end

          def send_SetNodeProductName(_homeId, _nodeId, _productName)
            send_message('SetNodeProductName', SetNodeProductName_args, :_homeId => _homeId, :_nodeId => _nodeId, :_productName => _productName)
          end

          def recv_SetNodeProductName()
            result = receive_message(SetNodeProductName_result)
            return
          end

          def SetNodeName(_homeId, _nodeId, _nodeName)
            send_SetNodeName(_homeId, _nodeId, _nodeName)
            recv_SetNodeName()
          end

          def send_SetNodeName(_homeId, _nodeId, _nodeName)
            send_message('SetNodeName', SetNodeName_args, :_homeId => _homeId, :_nodeId => _nodeId, :_nodeName => _nodeName)
          end

          def recv_SetNodeName()
            result = receive_message(SetNodeName_result)
            return
          end

          def SetNodeLocation(_homeId, _nodeId, _location)
            send_SetNodeLocation(_homeId, _nodeId, _location)
            recv_SetNodeLocation()
          end

          def send_SetNodeLocation(_homeId, _nodeId, _location)
            send_message('SetNodeLocation', SetNodeLocation_args, :_homeId => _homeId, :_nodeId => _nodeId, :_location => _location)
          end

          def recv_SetNodeLocation()
            result = receive_message(SetNodeLocation_result)
            return
          end

          def SetNodeOn(_homeId, _nodeId)
            send_SetNodeOn(_homeId, _nodeId)
            recv_SetNodeOn()
          end

          def send_SetNodeOn(_homeId, _nodeId)
            send_message('SetNodeOn', SetNodeOn_args, :_homeId => _homeId, :_nodeId => _nodeId)
          end

          def recv_SetNodeOn()
            result = receive_message(SetNodeOn_result)
            return
          end

          def SetNodeOff(_homeId, _nodeId)
            send_SetNodeOff(_homeId, _nodeId)
            recv_SetNodeOff()
          end

          def send_SetNodeOff(_homeId, _nodeId)
            send_message('SetNodeOff', SetNodeOff_args, :_homeId => _homeId, :_nodeId => _nodeId)
          end

          def recv_SetNodeOff()
            result = receive_message(SetNodeOff_result)
            return
          end

          def SetNodeLevel(_homeId, _nodeId, _level)
            send_SetNodeLevel(_homeId, _nodeId, _level)
            recv_SetNodeLevel()
          end

          def send_SetNodeLevel(_homeId, _nodeId, _level)
            send_message('SetNodeLevel', SetNodeLevel_args, :_homeId => _homeId, :_nodeId => _nodeId, :_level => _level)
          end

          def recv_SetNodeLevel()
            result = receive_message(SetNodeLevel_result)
            return
          end

          def IsNodeInfoReceived(_homeId, _nodeId)
            send_IsNodeInfoReceived(_homeId, _nodeId)
            return recv_IsNodeInfoReceived()
          end

          def send_IsNodeInfoReceived(_homeId, _nodeId)
            send_message('IsNodeInfoReceived', IsNodeInfoReceived_args, :_homeId => _homeId, :_nodeId => _nodeId)
          end

          def recv_IsNodeInfoReceived()
            result = receive_message(IsNodeInfoReceived_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'IsNodeInfoReceived failed: unknown result')
          end

          def GetValueLabel(_id)
            send_GetValueLabel(_id)
            return recv_GetValueLabel()
          end

          def send_GetValueLabel(_id)
            send_message('GetValueLabel', GetValueLabel_args, :_id => _id)
          end

          def recv_GetValueLabel()
            result = receive_message(GetValueLabel_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'GetValueLabel failed: unknown result')
          end

          def SetValueLabel(_id, _value)
            send_SetValueLabel(_id, _value)
            recv_SetValueLabel()
          end

          def send_SetValueLabel(_id, _value)
            send_message('SetValueLabel', SetValueLabel_args, :_id => _id, :_value => _value)
          end

          def recv_SetValueLabel()
            result = receive_message(SetValueLabel_result)
            return
          end

          def GetValueUnits(_id)
            send_GetValueUnits(_id)
            return recv_GetValueUnits()
          end

          def send_GetValueUnits(_id)
            send_message('GetValueUnits', GetValueUnits_args, :_id => _id)
          end

          def recv_GetValueUnits()
            result = receive_message(GetValueUnits_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'GetValueUnits failed: unknown result')
          end

          def SetValueUnits(_id, _value)
            send_SetValueUnits(_id, _value)
            recv_SetValueUnits()
          end

          def send_SetValueUnits(_id, _value)
            send_message('SetValueUnits', SetValueUnits_args, :_id => _id, :_value => _value)
          end

          def recv_SetValueUnits()
            result = receive_message(SetValueUnits_result)
            return
          end

          def GetValueHelp(_id)
            send_GetValueHelp(_id)
            return recv_GetValueHelp()
          end

          def send_GetValueHelp(_id)
            send_message('GetValueHelp', GetValueHelp_args, :_id => _id)
          end

          def recv_GetValueHelp()
            result = receive_message(GetValueHelp_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'GetValueHelp failed: unknown result')
          end

          def SetValueHelp(_id, _value)
            send_SetValueHelp(_id, _value)
            recv_SetValueHelp()
          end

          def send_SetValueHelp(_id, _value)
            send_message('SetValueHelp', SetValueHelp_args, :_id => _id, :_value => _value)
          end

          def recv_SetValueHelp()
            result = receive_message(SetValueHelp_result)
            return
          end

          def GetValueMin(_id)
            send_GetValueMin(_id)
            return recv_GetValueMin()
          end

          def send_GetValueMin(_id)
            send_message('GetValueMin', GetValueMin_args, :_id => _id)
          end

          def recv_GetValueMin()
            result = receive_message(GetValueMin_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'GetValueMin failed: unknown result')
          end

          def GetValueMax(_id)
            send_GetValueMax(_id)
            return recv_GetValueMax()
          end

          def send_GetValueMax(_id)
            send_message('GetValueMax', GetValueMax_args, :_id => _id)
          end

          def recv_GetValueMax()
            result = receive_message(GetValueMax_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'GetValueMax failed: unknown result')
          end

          def IsValueReadOnly(_id)
            send_IsValueReadOnly(_id)
            return recv_IsValueReadOnly()
          end

          def send_IsValueReadOnly(_id)
            send_message('IsValueReadOnly', IsValueReadOnly_args, :_id => _id)
          end

          def recv_IsValueReadOnly()
            result = receive_message(IsValueReadOnly_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'IsValueReadOnly failed: unknown result')
          end

          def IsValueWriteOnly(_id)
            send_IsValueWriteOnly(_id)
            return recv_IsValueWriteOnly()
          end

          def send_IsValueWriteOnly(_id)
            send_message('IsValueWriteOnly', IsValueWriteOnly_args, :_id => _id)
          end

          def recv_IsValueWriteOnly()
            result = receive_message(IsValueWriteOnly_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'IsValueWriteOnly failed: unknown result')
          end

          def IsValueSet(_id)
            send_IsValueSet(_id)
            return recv_IsValueSet()
          end

          def send_IsValueSet(_id)
            send_message('IsValueSet', IsValueSet_args, :_id => _id)
          end

          def recv_IsValueSet()
            result = receive_message(IsValueSet_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'IsValueSet failed: unknown result')
          end

          def GetValueAsBool(_id)
            send_GetValueAsBool(_id)
            return recv_GetValueAsBool()
          end

          def send_GetValueAsBool(_id)
            send_message('GetValueAsBool', GetValueAsBool_args, :_id => _id)
          end

          def recv_GetValueAsBool()
            result = receive_message(GetValueAsBool_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'GetValueAsBool failed: unknown result')
          end

          def GetValueAsByte(_id)
            send_GetValueAsByte(_id)
            return recv_GetValueAsByte()
          end

          def send_GetValueAsByte(_id)
            send_message('GetValueAsByte', GetValueAsByte_args, :_id => _id)
          end

          def recv_GetValueAsByte()
            result = receive_message(GetValueAsByte_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'GetValueAsByte failed: unknown result')
          end

          def GetValueAsFloat(_id)
            send_GetValueAsFloat(_id)
            return recv_GetValueAsFloat()
          end

          def send_GetValueAsFloat(_id)
            send_message('GetValueAsFloat', GetValueAsFloat_args, :_id => _id)
          end

          def recv_GetValueAsFloat()
            result = receive_message(GetValueAsFloat_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'GetValueAsFloat failed: unknown result')
          end

          def GetValueAsInt(_id)
            send_GetValueAsInt(_id)
            return recv_GetValueAsInt()
          end

          def send_GetValueAsInt(_id)
            send_message('GetValueAsInt', GetValueAsInt_args, :_id => _id)
          end

          def recv_GetValueAsInt()
            result = receive_message(GetValueAsInt_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'GetValueAsInt failed: unknown result')
          end

          def GetValueAsShort(_id)
            send_GetValueAsShort(_id)
            return recv_GetValueAsShort()
          end

          def send_GetValueAsShort(_id)
            send_message('GetValueAsShort', GetValueAsShort_args, :_id => _id)
          end

          def recv_GetValueAsShort()
            result = receive_message(GetValueAsShort_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'GetValueAsShort failed: unknown result')
          end

          def GetValueAsString(_id)
            send_GetValueAsString(_id)
            return recv_GetValueAsString()
          end

          def send_GetValueAsString(_id)
            send_message('GetValueAsString', GetValueAsString_args, :_id => _id)
          end

          def recv_GetValueAsString()
            result = receive_message(GetValueAsString_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'GetValueAsString failed: unknown result')
          end

          def GetValueListSelection_String(_id)
            send_GetValueListSelection_String(_id)
            return recv_GetValueListSelection_String()
          end

          def send_GetValueListSelection_String(_id)
            send_message('GetValueListSelection_String', GetValueListSelection_String_args, :_id => _id)
          end

          def recv_GetValueListSelection_String()
            result = receive_message(GetValueListSelection_String_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'GetValueListSelection_String failed: unknown result')
          end

          def GetValueListSelection_Int32(_id)
            send_GetValueListSelection_Int32(_id)
            return recv_GetValueListSelection_Int32()
          end

          def send_GetValueListSelection_Int32(_id)
            send_message('GetValueListSelection_Int32', GetValueListSelection_Int32_args, :_id => _id)
          end

          def recv_GetValueListSelection_Int32()
            result = receive_message(GetValueListSelection_Int32_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'GetValueListSelection_Int32 failed: unknown result')
          end

          def GetValueListItems(_id)
            send_GetValueListItems(_id)
            return recv_GetValueListItems()
          end

          def send_GetValueListItems(_id)
            send_message('GetValueListItems', GetValueListItems_args, :_id => _id)
          end

          def recv_GetValueListItems()
            result = receive_message(GetValueListItems_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'GetValueListItems failed: unknown result')
          end

          def GetValueFloatPrecision(_id)
            send_GetValueFloatPrecision(_id)
            return recv_GetValueFloatPrecision()
          end

          def send_GetValueFloatPrecision(_id)
            send_message('GetValueFloatPrecision', GetValueFloatPrecision_args, :_id => _id)
          end

          def recv_GetValueFloatPrecision()
            result = receive_message(GetValueFloatPrecision_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'GetValueFloatPrecision failed: unknown result')
          end

          def SetValue_Bool(_id, _value)
            send_SetValue_Bool(_id, _value)
            return recv_SetValue_Bool()
          end

          def send_SetValue_Bool(_id, _value)
            send_message('SetValue_Bool', SetValue_Bool_args, :_id => _id, :_value => _value)
          end

          def recv_SetValue_Bool()
            result = receive_message(SetValue_Bool_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'SetValue_Bool failed: unknown result')
          end

          def SetValue_UInt8(_id, _value)
            send_SetValue_UInt8(_id, _value)
            return recv_SetValue_UInt8()
          end

          def send_SetValue_UInt8(_id, _value)
            send_message('SetValue_UInt8', SetValue_UInt8_args, :_id => _id, :_value => _value)
          end

          def recv_SetValue_UInt8()
            result = receive_message(SetValue_UInt8_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'SetValue_UInt8 failed: unknown result')
          end

          def SetValue_Float(_id, _value)
            send_SetValue_Float(_id, _value)
            return recv_SetValue_Float()
          end

          def send_SetValue_Float(_id, _value)
            send_message('SetValue_Float', SetValue_Float_args, :_id => _id, :_value => _value)
          end

          def recv_SetValue_Float()
            result = receive_message(SetValue_Float_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'SetValue_Float failed: unknown result')
          end

          def SetValue_Int32(_id, _value)
            send_SetValue_Int32(_id, _value)
            return recv_SetValue_Int32()
          end

          def send_SetValue_Int32(_id, _value)
            send_message('SetValue_Int32', SetValue_Int32_args, :_id => _id, :_value => _value)
          end

          def recv_SetValue_Int32()
            result = receive_message(SetValue_Int32_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'SetValue_Int32 failed: unknown result')
          end

          def SetValue_Int16(_id, _value)
            send_SetValue_Int16(_id, _value)
            return recv_SetValue_Int16()
          end

          def send_SetValue_Int16(_id, _value)
            send_message('SetValue_Int16', SetValue_Int16_args, :_id => _id, :_value => _value)
          end

          def recv_SetValue_Int16()
            result = receive_message(SetValue_Int16_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'SetValue_Int16 failed: unknown result')
          end

          def SetValue_String(_id, _value)
            send_SetValue_String(_id, _value)
            return recv_SetValue_String()
          end

          def send_SetValue_String(_id, _value)
            send_message('SetValue_String', SetValue_String_args, :_id => _id, :_value => _value)
          end

          def recv_SetValue_String()
            result = receive_message(SetValue_String_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'SetValue_String failed: unknown result')
          end

          def SetValueListSelection(_id, _selectedItem)
            send_SetValueListSelection(_id, _selectedItem)
            return recv_SetValueListSelection()
          end

          def send_SetValueListSelection(_id, _selectedItem)
            send_message('SetValueListSelection', SetValueListSelection_args, :_id => _id, :_selectedItem => _selectedItem)
          end

          def recv_SetValueListSelection()
            result = receive_message(SetValueListSelection_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'SetValueListSelection failed: unknown result')
          end

          def PressButton(_id)
            send_PressButton(_id)
            return recv_PressButton()
          end

          def send_PressButton(_id)
            send_message('PressButton', PressButton_args, :_id => _id)
          end

          def recv_PressButton()
            result = receive_message(PressButton_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'PressButton failed: unknown result')
          end

          def ReleaseButton(_id)
            send_ReleaseButton(_id)
            return recv_ReleaseButton()
          end

          def send_ReleaseButton(_id)
            send_message('ReleaseButton', ReleaseButton_args, :_id => _id)
          end

          def recv_ReleaseButton()
            result = receive_message(ReleaseButton_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'ReleaseButton failed: unknown result')
          end

          def GetNumSwitchPoints(_id)
            send_GetNumSwitchPoints(_id)
            return recv_GetNumSwitchPoints()
          end

          def send_GetNumSwitchPoints(_id)
            send_message('GetNumSwitchPoints', GetNumSwitchPoints_args, :_id => _id)
          end

          def recv_GetNumSwitchPoints()
            result = receive_message(GetNumSwitchPoints_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'GetNumSwitchPoints failed: unknown result')
          end

          def SetSwitchPoint(_id, _hours, _minutes, _setback)
            send_SetSwitchPoint(_id, _hours, _minutes, _setback)
            return recv_SetSwitchPoint()
          end

          def send_SetSwitchPoint(_id, _hours, _minutes, _setback)
            send_message('SetSwitchPoint', SetSwitchPoint_args, :_id => _id, :_hours => _hours, :_minutes => _minutes, :_setback => _setback)
          end

          def recv_SetSwitchPoint()
            result = receive_message(SetSwitchPoint_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'SetSwitchPoint failed: unknown result')
          end

          def RemoveSwitchPoint(_id, _hours, _minutes)
            send_RemoveSwitchPoint(_id, _hours, _minutes)
            return recv_RemoveSwitchPoint()
          end

          def send_RemoveSwitchPoint(_id, _hours, _minutes)
            send_message('RemoveSwitchPoint', RemoveSwitchPoint_args, :_id => _id, :_hours => _hours, :_minutes => _minutes)
          end

          def recv_RemoveSwitchPoint()
            result = receive_message(RemoveSwitchPoint_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'RemoveSwitchPoint failed: unknown result')
          end

          def ClearSwitchPoints(_id)
            send_ClearSwitchPoints(_id)
            recv_ClearSwitchPoints()
          end

          def send_ClearSwitchPoints(_id)
            send_message('ClearSwitchPoints', ClearSwitchPoints_args, :_id => _id)
          end

          def recv_ClearSwitchPoints()
            result = receive_message(ClearSwitchPoints_result)
            return
          end

          def GetSwitchPoint(_id, _idx)
            send_GetSwitchPoint(_id, _idx)
            return recv_GetSwitchPoint()
          end

          def send_GetSwitchPoint(_id, _idx)
            send_message('GetSwitchPoint', GetSwitchPoint_args, :_id => _id, :_idx => _idx)
          end

          def recv_GetSwitchPoint()
            result = receive_message(GetSwitchPoint_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'GetSwitchPoint failed: unknown result')
          end

          def SwitchAllOn(_homeId)
            send_SwitchAllOn(_homeId)
            recv_SwitchAllOn()
          end

          def send_SwitchAllOn(_homeId)
            send_message('SwitchAllOn', SwitchAllOn_args, :_homeId => _homeId)
          end

          def recv_SwitchAllOn()
            result = receive_message(SwitchAllOn_result)
            return
          end

          def SwitchAllOff(_homeId)
            send_SwitchAllOff(_homeId)
            recv_SwitchAllOff()
          end

          def send_SwitchAllOff(_homeId)
            send_message('SwitchAllOff', SwitchAllOff_args, :_homeId => _homeId)
          end

          def recv_SwitchAllOff()
            result = receive_message(SwitchAllOff_result)
            return
          end

          def SetConfigParam(_homeId, _nodeId, _param, _value, _size)
            send_SetConfigParam(_homeId, _nodeId, _param, _value, _size)
            return recv_SetConfigParam()
          end

          def send_SetConfigParam(_homeId, _nodeId, _param, _value, _size)
            send_message('SetConfigParam', SetConfigParam_args, :_homeId => _homeId, :_nodeId => _nodeId, :_param => _param, :_value => _value, :_size => _size)
          end

          def recv_SetConfigParam()
            result = receive_message(SetConfigParam_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'SetConfigParam failed: unknown result')
          end

          def RequestConfigParam(_homeId, _nodeId, _param)
            send_RequestConfigParam(_homeId, _nodeId, _param)
            recv_RequestConfigParam()
          end

          def send_RequestConfigParam(_homeId, _nodeId, _param)
            send_message('RequestConfigParam', RequestConfigParam_args, :_homeId => _homeId, :_nodeId => _nodeId, :_param => _param)
          end

          def recv_RequestConfigParam()
            result = receive_message(RequestConfigParam_result)
            return
          end

          def RequestAllConfigParams(_homeId, _nodeId)
            send_RequestAllConfigParams(_homeId, _nodeId)
            recv_RequestAllConfigParams()
          end

          def send_RequestAllConfigParams(_homeId, _nodeId)
            send_message('RequestAllConfigParams', RequestAllConfigParams_args, :_homeId => _homeId, :_nodeId => _nodeId)
          end

          def recv_RequestAllConfigParams()
            result = receive_message(RequestAllConfigParams_result)
            return
          end

          def GetNumGroups(_homeId, _nodeId)
            send_GetNumGroups(_homeId, _nodeId)
            return recv_GetNumGroups()
          end

          def send_GetNumGroups(_homeId, _nodeId)
            send_message('GetNumGroups', GetNumGroups_args, :_homeId => _homeId, :_nodeId => _nodeId)
          end

          def recv_GetNumGroups()
            result = receive_message(GetNumGroups_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'GetNumGroups failed: unknown result')
          end

          def GetAssociations(_homeId, _nodeId, _groupIdx)
            send_GetAssociations(_homeId, _nodeId, _groupIdx)
            return recv_GetAssociations()
          end

          def send_GetAssociations(_homeId, _nodeId, _groupIdx)
            send_message('GetAssociations', GetAssociations_args, :_homeId => _homeId, :_nodeId => _nodeId, :_groupIdx => _groupIdx)
          end

          def recv_GetAssociations()
            result = receive_message(GetAssociations_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'GetAssociations failed: unknown result')
          end

          def GetMaxAssociations(_homeId, _nodeId, _groupIdx)
            send_GetMaxAssociations(_homeId, _nodeId, _groupIdx)
            return recv_GetMaxAssociations()
          end

          def send_GetMaxAssociations(_homeId, _nodeId, _groupIdx)
            send_message('GetMaxAssociations', GetMaxAssociations_args, :_homeId => _homeId, :_nodeId => _nodeId, :_groupIdx => _groupIdx)
          end

          def recv_GetMaxAssociations()
            result = receive_message(GetMaxAssociations_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'GetMaxAssociations failed: unknown result')
          end

          def GetGroupLabel(_homeId, _nodeId, _groupIdx)
            send_GetGroupLabel(_homeId, _nodeId, _groupIdx)
            return recv_GetGroupLabel()
          end

          def send_GetGroupLabel(_homeId, _nodeId, _groupIdx)
            send_message('GetGroupLabel', GetGroupLabel_args, :_homeId => _homeId, :_nodeId => _nodeId, :_groupIdx => _groupIdx)
          end

          def recv_GetGroupLabel()
            result = receive_message(GetGroupLabel_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'GetGroupLabel failed: unknown result')
          end

          def AddAssociation(_homeId, _nodeId, _groupIdx, _targetNodeId)
            send_AddAssociation(_homeId, _nodeId, _groupIdx, _targetNodeId)
            recv_AddAssociation()
          end

          def send_AddAssociation(_homeId, _nodeId, _groupIdx, _targetNodeId)
            send_message('AddAssociation', AddAssociation_args, :_homeId => _homeId, :_nodeId => _nodeId, :_groupIdx => _groupIdx, :_targetNodeId => _targetNodeId)
          end

          def recv_AddAssociation()
            result = receive_message(AddAssociation_result)
            return
          end

          def RemoveAssociation(_homeId, _nodeId, _groupIdx, _targetNodeId)
            send_RemoveAssociation(_homeId, _nodeId, _groupIdx, _targetNodeId)
            recv_RemoveAssociation()
          end

          def send_RemoveAssociation(_homeId, _nodeId, _groupIdx, _targetNodeId)
            send_message('RemoveAssociation', RemoveAssociation_args, :_homeId => _homeId, :_nodeId => _nodeId, :_groupIdx => _groupIdx, :_targetNodeId => _targetNodeId)
          end

          def recv_RemoveAssociation()
            result = receive_message(RemoveAssociation_result)
            return
          end

          def ResetController(_homeId)
            send_ResetController(_homeId)
            recv_ResetController()
          end

          def send_ResetController(_homeId)
            send_message('ResetController', ResetController_args, :_homeId => _homeId)
          end

          def recv_ResetController()
            result = receive_message(ResetController_result)
            return
          end

          def SoftReset(_homeId)
            send_SoftReset(_homeId)
            recv_SoftReset()
          end

          def send_SoftReset(_homeId)
            send_message('SoftReset', SoftReset_args, :_homeId => _homeId)
          end

          def recv_SoftReset()
            result = receive_message(SoftReset_result)
            return
          end

          def GetNumScenes()
            send_GetNumScenes()
            return recv_GetNumScenes()
          end

          def send_GetNumScenes()
            send_message('GetNumScenes', GetNumScenes_args)
          end

          def recv_GetNumScenes()
            result = receive_message(GetNumScenes_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'GetNumScenes failed: unknown result')
          end

          def GetAllScenes()
            send_GetAllScenes()
            return recv_GetAllScenes()
          end

          def send_GetAllScenes()
            send_message('GetAllScenes', GetAllScenes_args)
          end

          def recv_GetAllScenes()
            result = receive_message(GetAllScenes_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'GetAllScenes failed: unknown result')
          end

          def CreateScene()
            send_CreateScene()
            return recv_CreateScene()
          end

          def send_CreateScene()
            send_message('CreateScene', CreateScene_args)
          end

          def recv_CreateScene()
            result = receive_message(CreateScene_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'CreateScene failed: unknown result')
          end

          def RemoveScene(_sceneId)
            send_RemoveScene(_sceneId)
            return recv_RemoveScene()
          end

          def send_RemoveScene(_sceneId)
            send_message('RemoveScene', RemoveScene_args, :_sceneId => _sceneId)
          end

          def recv_RemoveScene()
            result = receive_message(RemoveScene_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'RemoveScene failed: unknown result')
          end

          def AddSceneValue_Bool(_sceneId, _valueId, _value)
            send_AddSceneValue_Bool(_sceneId, _valueId, _value)
            return recv_AddSceneValue_Bool()
          end

          def send_AddSceneValue_Bool(_sceneId, _valueId, _value)
            send_message('AddSceneValue_Bool', AddSceneValue_Bool_args, :_sceneId => _sceneId, :_valueId => _valueId, :_value => _value)
          end

          def recv_AddSceneValue_Bool()
            result = receive_message(AddSceneValue_Bool_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'AddSceneValue_Bool failed: unknown result')
          end

          def AddSceneValue_Uint8(_sceneId, _valueId, _value)
            send_AddSceneValue_Uint8(_sceneId, _valueId, _value)
            return recv_AddSceneValue_Uint8()
          end

          def send_AddSceneValue_Uint8(_sceneId, _valueId, _value)
            send_message('AddSceneValue_Uint8', AddSceneValue_Uint8_args, :_sceneId => _sceneId, :_valueId => _valueId, :_value => _value)
          end

          def recv_AddSceneValue_Uint8()
            result = receive_message(AddSceneValue_Uint8_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'AddSceneValue_Uint8 failed: unknown result')
          end

          def AddSceneValue_Float(_sceneId, _valueId, _value)
            send_AddSceneValue_Float(_sceneId, _valueId, _value)
            return recv_AddSceneValue_Float()
          end

          def send_AddSceneValue_Float(_sceneId, _valueId, _value)
            send_message('AddSceneValue_Float', AddSceneValue_Float_args, :_sceneId => _sceneId, :_valueId => _valueId, :_value => _value)
          end

          def recv_AddSceneValue_Float()
            result = receive_message(AddSceneValue_Float_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'AddSceneValue_Float failed: unknown result')
          end

          def AddSceneValue_Int32(_sceneId, _valueId, _value)
            send_AddSceneValue_Int32(_sceneId, _valueId, _value)
            return recv_AddSceneValue_Int32()
          end

          def send_AddSceneValue_Int32(_sceneId, _valueId, _value)
            send_message('AddSceneValue_Int32', AddSceneValue_Int32_args, :_sceneId => _sceneId, :_valueId => _valueId, :_value => _value)
          end

          def recv_AddSceneValue_Int32()
            result = receive_message(AddSceneValue_Int32_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'AddSceneValue_Int32 failed: unknown result')
          end

          def AddSceneValue_Int16(_sceneId, _valueId, _value)
            send_AddSceneValue_Int16(_sceneId, _valueId, _value)
            return recv_AddSceneValue_Int16()
          end

          def send_AddSceneValue_Int16(_sceneId, _valueId, _value)
            send_message('AddSceneValue_Int16', AddSceneValue_Int16_args, :_sceneId => _sceneId, :_valueId => _valueId, :_value => _value)
          end

          def recv_AddSceneValue_Int16()
            result = receive_message(AddSceneValue_Int16_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'AddSceneValue_Int16 failed: unknown result')
          end

          def AddSceneValue_String(_sceneId, _valueId, _value)
            send_AddSceneValue_String(_sceneId, _valueId, _value)
            return recv_AddSceneValue_String()
          end

          def send_AddSceneValue_String(_sceneId, _valueId, _value)
            send_message('AddSceneValue_String', AddSceneValue_String_args, :_sceneId => _sceneId, :_valueId => _valueId, :_value => _value)
          end

          def recv_AddSceneValue_String()
            result = receive_message(AddSceneValue_String_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'AddSceneValue_String failed: unknown result')
          end

          def AddSceneValueListSelection_String(_sceneId, _valueId, _value)
            send_AddSceneValueListSelection_String(_sceneId, _valueId, _value)
            return recv_AddSceneValueListSelection_String()
          end

          def send_AddSceneValueListSelection_String(_sceneId, _valueId, _value)
            send_message('AddSceneValueListSelection_String', AddSceneValueListSelection_String_args, :_sceneId => _sceneId, :_valueId => _valueId, :_value => _value)
          end

          def recv_AddSceneValueListSelection_String()
            result = receive_message(AddSceneValueListSelection_String_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'AddSceneValueListSelection_String failed: unknown result')
          end

          def AddSceneValueListSelection_Int32(_sceneId, _valueId, _value)
            send_AddSceneValueListSelection_Int32(_sceneId, _valueId, _value)
            return recv_AddSceneValueListSelection_Int32()
          end

          def send_AddSceneValueListSelection_Int32(_sceneId, _valueId, _value)
            send_message('AddSceneValueListSelection_Int32', AddSceneValueListSelection_Int32_args, :_sceneId => _sceneId, :_valueId => _valueId, :_value => _value)
          end

          def recv_AddSceneValueListSelection_Int32()
            result = receive_message(AddSceneValueListSelection_Int32_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'AddSceneValueListSelection_Int32 failed: unknown result')
          end

          def RemoveSceneValue(_sceneId, _valueId)
            send_RemoveSceneValue(_sceneId, _valueId)
            return recv_RemoveSceneValue()
          end

          def send_RemoveSceneValue(_sceneId, _valueId)
            send_message('RemoveSceneValue', RemoveSceneValue_args, :_sceneId => _sceneId, :_valueId => _valueId)
          end

          def recv_RemoveSceneValue()
            result = receive_message(RemoveSceneValue_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'RemoveSceneValue failed: unknown result')
          end

          def SceneGetValues(_sceneId)
            send_SceneGetValues(_sceneId)
            return recv_SceneGetValues()
          end

          def send_SceneGetValues(_sceneId)
            send_message('SceneGetValues', SceneGetValues_args, :_sceneId => _sceneId)
          end

          def recv_SceneGetValues()
            result = receive_message(SceneGetValues_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'SceneGetValues failed: unknown result')
          end

          def SceneGetValueAsBool(_sceneId, _valueId)
            send_SceneGetValueAsBool(_sceneId, _valueId)
            return recv_SceneGetValueAsBool()
          end

          def send_SceneGetValueAsBool(_sceneId, _valueId)
            send_message('SceneGetValueAsBool', SceneGetValueAsBool_args, :_sceneId => _sceneId, :_valueId => _valueId)
          end

          def recv_SceneGetValueAsBool()
            result = receive_message(SceneGetValueAsBool_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'SceneGetValueAsBool failed: unknown result')
          end

          def SceneGetValueAsByte(_sceneId, _valueId)
            send_SceneGetValueAsByte(_sceneId, _valueId)
            return recv_SceneGetValueAsByte()
          end

          def send_SceneGetValueAsByte(_sceneId, _valueId)
            send_message('SceneGetValueAsByte', SceneGetValueAsByte_args, :_sceneId => _sceneId, :_valueId => _valueId)
          end

          def recv_SceneGetValueAsByte()
            result = receive_message(SceneGetValueAsByte_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'SceneGetValueAsByte failed: unknown result')
          end

          def SceneGetValueAsFloat(_sceneId, _valueId)
            send_SceneGetValueAsFloat(_sceneId, _valueId)
            return recv_SceneGetValueAsFloat()
          end

          def send_SceneGetValueAsFloat(_sceneId, _valueId)
            send_message('SceneGetValueAsFloat', SceneGetValueAsFloat_args, :_sceneId => _sceneId, :_valueId => _valueId)
          end

          def recv_SceneGetValueAsFloat()
            result = receive_message(SceneGetValueAsFloat_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'SceneGetValueAsFloat failed: unknown result')
          end

          def SceneGetValueAsInt(_sceneId, _valueId)
            send_SceneGetValueAsInt(_sceneId, _valueId)
            return recv_SceneGetValueAsInt()
          end

          def send_SceneGetValueAsInt(_sceneId, _valueId)
            send_message('SceneGetValueAsInt', SceneGetValueAsInt_args, :_sceneId => _sceneId, :_valueId => _valueId)
          end

          def recv_SceneGetValueAsInt()
            result = receive_message(SceneGetValueAsInt_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'SceneGetValueAsInt failed: unknown result')
          end

          def SceneGetValueAsShort(_sceneId, _valueId)
            send_SceneGetValueAsShort(_sceneId, _valueId)
            return recv_SceneGetValueAsShort()
          end

          def send_SceneGetValueAsShort(_sceneId, _valueId)
            send_message('SceneGetValueAsShort', SceneGetValueAsShort_args, :_sceneId => _sceneId, :_valueId => _valueId)
          end

          def recv_SceneGetValueAsShort()
            result = receive_message(SceneGetValueAsShort_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'SceneGetValueAsShort failed: unknown result')
          end

          def SceneGetValueAsString(_sceneId, _valueId)
            send_SceneGetValueAsString(_sceneId, _valueId)
            return recv_SceneGetValueAsString()
          end

          def send_SceneGetValueAsString(_sceneId, _valueId)
            send_message('SceneGetValueAsString', SceneGetValueAsString_args, :_sceneId => _sceneId, :_valueId => _valueId)
          end

          def recv_SceneGetValueAsString()
            result = receive_message(SceneGetValueAsString_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'SceneGetValueAsString failed: unknown result')
          end

          def SceneGetValueListSelection_String(_sceneId, _valueId)
            send_SceneGetValueListSelection_String(_sceneId, _valueId)
            return recv_SceneGetValueListSelection_String()
          end

          def send_SceneGetValueListSelection_String(_sceneId, _valueId)
            send_message('SceneGetValueListSelection_String', SceneGetValueListSelection_String_args, :_sceneId => _sceneId, :_valueId => _valueId)
          end

          def recv_SceneGetValueListSelection_String()
            result = receive_message(SceneGetValueListSelection_String_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'SceneGetValueListSelection_String failed: unknown result')
          end

          def SceneGetValueListSelection_Int32(_sceneId, _valueId)
            send_SceneGetValueListSelection_Int32(_sceneId, _valueId)
            return recv_SceneGetValueListSelection_Int32()
          end

          def send_SceneGetValueListSelection_Int32(_sceneId, _valueId)
            send_message('SceneGetValueListSelection_Int32', SceneGetValueListSelection_Int32_args, :_sceneId => _sceneId, :_valueId => _valueId)
          end

          def recv_SceneGetValueListSelection_Int32()
            result = receive_message(SceneGetValueListSelection_Int32_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'SceneGetValueListSelection_Int32 failed: unknown result')
          end

          def SetSceneValue_Bool(_sceneId, _valueId, _value)
            send_SetSceneValue_Bool(_sceneId, _valueId, _value)
            return recv_SetSceneValue_Bool()
          end

          def send_SetSceneValue_Bool(_sceneId, _valueId, _value)
            send_message('SetSceneValue_Bool', SetSceneValue_Bool_args, :_sceneId => _sceneId, :_valueId => _valueId, :_value => _value)
          end

          def recv_SetSceneValue_Bool()
            result = receive_message(SetSceneValue_Bool_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'SetSceneValue_Bool failed: unknown result')
          end

          def SetSceneValue_Uint8(_sceneId, _valueId, _value)
            send_SetSceneValue_Uint8(_sceneId, _valueId, _value)
            return recv_SetSceneValue_Uint8()
          end

          def send_SetSceneValue_Uint8(_sceneId, _valueId, _value)
            send_message('SetSceneValue_Uint8', SetSceneValue_Uint8_args, :_sceneId => _sceneId, :_valueId => _valueId, :_value => _value)
          end

          def recv_SetSceneValue_Uint8()
            result = receive_message(SetSceneValue_Uint8_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'SetSceneValue_Uint8 failed: unknown result')
          end

          def SetSceneValue_Float(_sceneId, _valueId, _value)
            send_SetSceneValue_Float(_sceneId, _valueId, _value)
            return recv_SetSceneValue_Float()
          end

          def send_SetSceneValue_Float(_sceneId, _valueId, _value)
            send_message('SetSceneValue_Float', SetSceneValue_Float_args, :_sceneId => _sceneId, :_valueId => _valueId, :_value => _value)
          end

          def recv_SetSceneValue_Float()
            result = receive_message(SetSceneValue_Float_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'SetSceneValue_Float failed: unknown result')
          end

          def SetSceneValue_Int32(_sceneId, _valueId, _value)
            send_SetSceneValue_Int32(_sceneId, _valueId, _value)
            return recv_SetSceneValue_Int32()
          end

          def send_SetSceneValue_Int32(_sceneId, _valueId, _value)
            send_message('SetSceneValue_Int32', SetSceneValue_Int32_args, :_sceneId => _sceneId, :_valueId => _valueId, :_value => _value)
          end

          def recv_SetSceneValue_Int32()
            result = receive_message(SetSceneValue_Int32_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'SetSceneValue_Int32 failed: unknown result')
          end

          def SetSceneValue_Int16(_sceneId, _valueId, _value)
            send_SetSceneValue_Int16(_sceneId, _valueId, _value)
            return recv_SetSceneValue_Int16()
          end

          def send_SetSceneValue_Int16(_sceneId, _valueId, _value)
            send_message('SetSceneValue_Int16', SetSceneValue_Int16_args, :_sceneId => _sceneId, :_valueId => _valueId, :_value => _value)
          end

          def recv_SetSceneValue_Int16()
            result = receive_message(SetSceneValue_Int16_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'SetSceneValue_Int16 failed: unknown result')
          end

          def SetSceneValue_String(_sceneId, _valueId, _value)
            send_SetSceneValue_String(_sceneId, _valueId, _value)
            return recv_SetSceneValue_String()
          end

          def send_SetSceneValue_String(_sceneId, _valueId, _value)
            send_message('SetSceneValue_String', SetSceneValue_String_args, :_sceneId => _sceneId, :_valueId => _valueId, :_value => _value)
          end

          def recv_SetSceneValue_String()
            result = receive_message(SetSceneValue_String_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'SetSceneValue_String failed: unknown result')
          end

          def SetSceneValueListSelection_String(_sceneId, _valueId, _value)
            send_SetSceneValueListSelection_String(_sceneId, _valueId, _value)
            return recv_SetSceneValueListSelection_String()
          end

          def send_SetSceneValueListSelection_String(_sceneId, _valueId, _value)
            send_message('SetSceneValueListSelection_String', SetSceneValueListSelection_String_args, :_sceneId => _sceneId, :_valueId => _valueId, :_value => _value)
          end

          def recv_SetSceneValueListSelection_String()
            result = receive_message(SetSceneValueListSelection_String_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'SetSceneValueListSelection_String failed: unknown result')
          end

          def SetSceneValueListSelection_Int32(_sceneId, _valueId, _value)
            send_SetSceneValueListSelection_Int32(_sceneId, _valueId, _value)
            return recv_SetSceneValueListSelection_Int32()
          end

          def send_SetSceneValueListSelection_Int32(_sceneId, _valueId, _value)
            send_message('SetSceneValueListSelection_Int32', SetSceneValueListSelection_Int32_args, :_sceneId => _sceneId, :_valueId => _valueId, :_value => _value)
          end

          def recv_SetSceneValueListSelection_Int32()
            result = receive_message(SetSceneValueListSelection_Int32_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'SetSceneValueListSelection_Int32 failed: unknown result')
          end

          def GetSceneLabel(_sceneId)
            send_GetSceneLabel(_sceneId)
            return recv_GetSceneLabel()
          end

          def send_GetSceneLabel(_sceneId)
            send_message('GetSceneLabel', GetSceneLabel_args, :_sceneId => _sceneId)
          end

          def recv_GetSceneLabel()
            result = receive_message(GetSceneLabel_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'GetSceneLabel failed: unknown result')
          end

          def SetSceneLabel(_sceneId, _value)
            send_SetSceneLabel(_sceneId, _value)
            recv_SetSceneLabel()
          end

          def send_SetSceneLabel(_sceneId, _value)
            send_message('SetSceneLabel', SetSceneLabel_args, :_sceneId => _sceneId, :_value => _value)
          end

          def recv_SetSceneLabel()
            result = receive_message(SetSceneLabel_result)
            return
          end

          def SceneExists(_sceneId)
            send_SceneExists(_sceneId)
            return recv_SceneExists()
          end

          def send_SceneExists(_sceneId)
            send_message('SceneExists', SceneExists_args, :_sceneId => _sceneId)
          end

          def recv_SceneExists()
            result = receive_message(SceneExists_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'SceneExists failed: unknown result')
          end

          def ActivateScene(_sceneId)
            send_ActivateScene(_sceneId)
            return recv_ActivateScene()
          end

          def send_ActivateScene(_sceneId)
            send_message('ActivateScene', ActivateScene_args, :_sceneId => _sceneId)
          end

          def recv_ActivateScene()
            result = receive_message(ActivateScene_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'ActivateScene failed: unknown result')
          end

        end

        class Processor
          include ::Thrift::Processor

          def process_WriteConfig(seqid, iprot, oprot)
            args = read_args(iprot, WriteConfig_args)
            result = WriteConfig_result.new()
            @handler.WriteConfig(args._homeId)
            write_result(result, oprot, 'WriteConfig', seqid)
          end

          def process_GetControllerNodeId(seqid, iprot, oprot)
            args = read_args(iprot, GetControllerNodeId_args)
            result = GetControllerNodeId_result.new()
            result.success = @handler.GetControllerNodeId(args._homeId)
            write_result(result, oprot, 'GetControllerNodeId', seqid)
          end

          def process_IsPrimaryController(seqid, iprot, oprot)
            args = read_args(iprot, IsPrimaryController_args)
            result = IsPrimaryController_result.new()
            result.success = @handler.IsPrimaryController(args._homeId)
            write_result(result, oprot, 'IsPrimaryController', seqid)
          end

          def process_IsBridgeController(seqid, iprot, oprot)
            args = read_args(iprot, IsBridgeController_args)
            result = IsBridgeController_result.new()
            result.success = @handler.IsBridgeController(args._homeId)
            write_result(result, oprot, 'IsBridgeController', seqid)
          end

          def process_GetLibraryVersion(seqid, iprot, oprot)
            args = read_args(iprot, GetLibraryVersion_args)
            result = GetLibraryVersion_result.new()
            result.success = @handler.GetLibraryVersion(args._homeId)
            write_result(result, oprot, 'GetLibraryVersion', seqid)
          end

          def process_GetLibraryTypeName(seqid, iprot, oprot)
            args = read_args(iprot, GetLibraryTypeName_args)
            result = GetLibraryTypeName_result.new()
            result.success = @handler.GetLibraryTypeName(args._homeId)
            write_result(result, oprot, 'GetLibraryTypeName', seqid)
          end

          def process_GetSendQueueCount(seqid, iprot, oprot)
            args = read_args(iprot, GetSendQueueCount_args)
            result = GetSendQueueCount_result.new()
            result.success = @handler.GetSendQueueCount(args._homeId)
            write_result(result, oprot, 'GetSendQueueCount', seqid)
          end

          def process_GetPollInterval(seqid, iprot, oprot)
            args = read_args(iprot, GetPollInterval_args)
            result = GetPollInterval_result.new()
            result.success = @handler.GetPollInterval()
            write_result(result, oprot, 'GetPollInterval', seqid)
          end

          def process_SetPollInterval(seqid, iprot, oprot)
            args = read_args(iprot, SetPollInterval_args)
            result = SetPollInterval_result.new()
            @handler.SetPollInterval(args._seconds)
            write_result(result, oprot, 'SetPollInterval', seqid)
          end

          def process_EnablePoll(seqid, iprot, oprot)
            args = read_args(iprot, EnablePoll_args)
            result = EnablePoll_result.new()
            result.success = @handler.EnablePoll(args._valueId)
            write_result(result, oprot, 'EnablePoll', seqid)
          end

          def process_DisablePoll(seqid, iprot, oprot)
            args = read_args(iprot, DisablePoll_args)
            result = DisablePoll_result.new()
            result.success = @handler.DisablePoll(args._valueId)
            write_result(result, oprot, 'DisablePoll', seqid)
          end

          def process_isPolled(seqid, iprot, oprot)
            args = read_args(iprot, IsPolled_args)
            result = IsPolled_result.new()
            result.success = @handler.isPolled(args._valueId)
            write_result(result, oprot, 'isPolled', seqid)
          end

          def process_RefreshNodeInfo(seqid, iprot, oprot)
            args = read_args(iprot, RefreshNodeInfo_args)
            result = RefreshNodeInfo_result.new()
            result.success = @handler.RefreshNodeInfo(args._homeId, args._nodeId)
            write_result(result, oprot, 'RefreshNodeInfo', seqid)
          end

          def process_RequestNodeState(seqid, iprot, oprot)
            args = read_args(iprot, RequestNodeState_args)
            result = RequestNodeState_result.new()
            result.success = @handler.RequestNodeState(args._homeId, args._nodeId)
            write_result(result, oprot, 'RequestNodeState', seqid)
          end

          def process_RequestNodeDynamic(seqid, iprot, oprot)
            args = read_args(iprot, RequestNodeDynamic_args)
            result = RequestNodeDynamic_result.new()
            result.success = @handler.RequestNodeDynamic(args._homeId, args._nodeId)
            write_result(result, oprot, 'RequestNodeDynamic', seqid)
          end

          def process_IsNodeListeningDevice(seqid, iprot, oprot)
            args = read_args(iprot, IsNodeListeningDevice_args)
            result = IsNodeListeningDevice_result.new()
            result.success = @handler.IsNodeListeningDevice(args._homeId, args._nodeId)
            write_result(result, oprot, 'IsNodeListeningDevice', seqid)
          end

          def process_IsNodeRoutingDevice(seqid, iprot, oprot)
            args = read_args(iprot, IsNodeRoutingDevice_args)
            result = IsNodeRoutingDevice_result.new()
            result.success = @handler.IsNodeRoutingDevice(args._homeId, args._nodeId)
            write_result(result, oprot, 'IsNodeRoutingDevice', seqid)
          end

          def process_GetNodeMaxBaudRate(seqid, iprot, oprot)
            args = read_args(iprot, GetNodeMaxBaudRate_args)
            result = GetNodeMaxBaudRate_result.new()
            result.success = @handler.GetNodeMaxBaudRate(args._homeId, args._nodeId)
            write_result(result, oprot, 'GetNodeMaxBaudRate', seqid)
          end

          def process_GetNodeVersion(seqid, iprot, oprot)
            args = read_args(iprot, GetNodeVersion_args)
            result = GetNodeVersion_result.new()
            result.success = @handler.GetNodeVersion(args._homeId, args._nodeId)
            write_result(result, oprot, 'GetNodeVersion', seqid)
          end

          def process_GetNodeSecurity(seqid, iprot, oprot)
            args = read_args(iprot, GetNodeSecurity_args)
            result = GetNodeSecurity_result.new()
            result.success = @handler.GetNodeSecurity(args._homeId, args._nodeId)
            write_result(result, oprot, 'GetNodeSecurity', seqid)
          end

          def process_GetNodeBasic(seqid, iprot, oprot)
            args = read_args(iprot, GetNodeBasic_args)
            result = GetNodeBasic_result.new()
            result.success = @handler.GetNodeBasic(args._homeId, args._nodeId)
            write_result(result, oprot, 'GetNodeBasic', seqid)
          end

          def process_GetNodeGeneric(seqid, iprot, oprot)
            args = read_args(iprot, GetNodeGeneric_args)
            result = GetNodeGeneric_result.new()
            result.success = @handler.GetNodeGeneric(args._homeId, args._nodeId)
            write_result(result, oprot, 'GetNodeGeneric', seqid)
          end

          def process_GetNodeSpecific(seqid, iprot, oprot)
            args = read_args(iprot, GetNodeSpecific_args)
            result = GetNodeSpecific_result.new()
            result.success = @handler.GetNodeSpecific(args._homeId, args._nodeId)
            write_result(result, oprot, 'GetNodeSpecific', seqid)
          end

          def process_GetNodeType(seqid, iprot, oprot)
            args = read_args(iprot, GetNodeType_args)
            result = GetNodeType_result.new()
            result.success = @handler.GetNodeType(args._homeId, args._nodeId)
            write_result(result, oprot, 'GetNodeType', seqid)
          end

          def process_GetNodeNeighbors(seqid, iprot, oprot)
            args = read_args(iprot, GetNodeNeighbors_args)
            result = GetNodeNeighbors_result.new()
            result.success = @handler.GetNodeNeighbors(args._homeId, args._nodeId)
            write_result(result, oprot, 'GetNodeNeighbors', seqid)
          end

          def process_GetNodeManufacturerName(seqid, iprot, oprot)
            args = read_args(iprot, GetNodeManufacturerName_args)
            result = GetNodeManufacturerName_result.new()
            result.success = @handler.GetNodeManufacturerName(args._homeId, args._nodeId)
            write_result(result, oprot, 'GetNodeManufacturerName', seqid)
          end

          def process_GetNodeProductName(seqid, iprot, oprot)
            args = read_args(iprot, GetNodeProductName_args)
            result = GetNodeProductName_result.new()
            result.success = @handler.GetNodeProductName(args._homeId, args._nodeId)
            write_result(result, oprot, 'GetNodeProductName', seqid)
          end

          def process_GetNodeName(seqid, iprot, oprot)
            args = read_args(iprot, GetNodeName_args)
            result = GetNodeName_result.new()
            result.success = @handler.GetNodeName(args._homeId, args._nodeId)
            write_result(result, oprot, 'GetNodeName', seqid)
          end

          def process_GetNodeLocation(seqid, iprot, oprot)
            args = read_args(iprot, GetNodeLocation_args)
            result = GetNodeLocation_result.new()
            result.success = @handler.GetNodeLocation(args._homeId, args._nodeId)
            write_result(result, oprot, 'GetNodeLocation', seqid)
          end

          def process_GetNodeManufacturerId(seqid, iprot, oprot)
            args = read_args(iprot, GetNodeManufacturerId_args)
            result = GetNodeManufacturerId_result.new()
            result.success = @handler.GetNodeManufacturerId(args._homeId, args._nodeId)
            write_result(result, oprot, 'GetNodeManufacturerId', seqid)
          end

          def process_GetNodeProductType(seqid, iprot, oprot)
            args = read_args(iprot, GetNodeProductType_args)
            result = GetNodeProductType_result.new()
            result.success = @handler.GetNodeProductType(args._homeId, args._nodeId)
            write_result(result, oprot, 'GetNodeProductType', seqid)
          end

          def process_GetNodeProductId(seqid, iprot, oprot)
            args = read_args(iprot, GetNodeProductId_args)
            result = GetNodeProductId_result.new()
            result.success = @handler.GetNodeProductId(args._homeId, args._nodeId)
            write_result(result, oprot, 'GetNodeProductId', seqid)
          end

          def process_SetNodeManufacturerName(seqid, iprot, oprot)
            args = read_args(iprot, SetNodeManufacturerName_args)
            result = SetNodeManufacturerName_result.new()
            @handler.SetNodeManufacturerName(args._homeId, args._nodeId, args._manufacturerName)
            write_result(result, oprot, 'SetNodeManufacturerName', seqid)
          end

          def process_SetNodeProductName(seqid, iprot, oprot)
            args = read_args(iprot, SetNodeProductName_args)
            result = SetNodeProductName_result.new()
            @handler.SetNodeProductName(args._homeId, args._nodeId, args._productName)
            write_result(result, oprot, 'SetNodeProductName', seqid)
          end

          def process_SetNodeName(seqid, iprot, oprot)
            args = read_args(iprot, SetNodeName_args)
            result = SetNodeName_result.new()
            @handler.SetNodeName(args._homeId, args._nodeId, args._nodeName)
            write_result(result, oprot, 'SetNodeName', seqid)
          end

          def process_SetNodeLocation(seqid, iprot, oprot)
            args = read_args(iprot, SetNodeLocation_args)
            result = SetNodeLocation_result.new()
            @handler.SetNodeLocation(args._homeId, args._nodeId, args._location)
            write_result(result, oprot, 'SetNodeLocation', seqid)
          end

          def process_SetNodeOn(seqid, iprot, oprot)
            args = read_args(iprot, SetNodeOn_args)
            result = SetNodeOn_result.new()
            @handler.SetNodeOn(args._homeId, args._nodeId)
            write_result(result, oprot, 'SetNodeOn', seqid)
          end

          def process_SetNodeOff(seqid, iprot, oprot)
            args = read_args(iprot, SetNodeOff_args)
            result = SetNodeOff_result.new()
            @handler.SetNodeOff(args._homeId, args._nodeId)
            write_result(result, oprot, 'SetNodeOff', seqid)
          end

          def process_SetNodeLevel(seqid, iprot, oprot)
            args = read_args(iprot, SetNodeLevel_args)
            result = SetNodeLevel_result.new()
            @handler.SetNodeLevel(args._homeId, args._nodeId, args._level)
            write_result(result, oprot, 'SetNodeLevel', seqid)
          end

          def process_IsNodeInfoReceived(seqid, iprot, oprot)
            args = read_args(iprot, IsNodeInfoReceived_args)
            result = IsNodeInfoReceived_result.new()
            result.success = @handler.IsNodeInfoReceived(args._homeId, args._nodeId)
            write_result(result, oprot, 'IsNodeInfoReceived', seqid)
          end

          def process_GetValueLabel(seqid, iprot, oprot)
            args = read_args(iprot, GetValueLabel_args)
            result = GetValueLabel_result.new()
            result.success = @handler.GetValueLabel(args._id)
            write_result(result, oprot, 'GetValueLabel', seqid)
          end

          def process_SetValueLabel(seqid, iprot, oprot)
            args = read_args(iprot, SetValueLabel_args)
            result = SetValueLabel_result.new()
            @handler.SetValueLabel(args._id, args._value)
            write_result(result, oprot, 'SetValueLabel', seqid)
          end

          def process_GetValueUnits(seqid, iprot, oprot)
            args = read_args(iprot, GetValueUnits_args)
            result = GetValueUnits_result.new()
            result.success = @handler.GetValueUnits(args._id)
            write_result(result, oprot, 'GetValueUnits', seqid)
          end

          def process_SetValueUnits(seqid, iprot, oprot)
            args = read_args(iprot, SetValueUnits_args)
            result = SetValueUnits_result.new()
            @handler.SetValueUnits(args._id, args._value)
            write_result(result, oprot, 'SetValueUnits', seqid)
          end

          def process_GetValueHelp(seqid, iprot, oprot)
            args = read_args(iprot, GetValueHelp_args)
            result = GetValueHelp_result.new()
            result.success = @handler.GetValueHelp(args._id)
            write_result(result, oprot, 'GetValueHelp', seqid)
          end

          def process_SetValueHelp(seqid, iprot, oprot)
            args = read_args(iprot, SetValueHelp_args)
            result = SetValueHelp_result.new()
            @handler.SetValueHelp(args._id, args._value)
            write_result(result, oprot, 'SetValueHelp', seqid)
          end

          def process_GetValueMin(seqid, iprot, oprot)
            args = read_args(iprot, GetValueMin_args)
            result = GetValueMin_result.new()
            result.success = @handler.GetValueMin(args._id)
            write_result(result, oprot, 'GetValueMin', seqid)
          end

          def process_GetValueMax(seqid, iprot, oprot)
            args = read_args(iprot, GetValueMax_args)
            result = GetValueMax_result.new()
            result.success = @handler.GetValueMax(args._id)
            write_result(result, oprot, 'GetValueMax', seqid)
          end

          def process_IsValueReadOnly(seqid, iprot, oprot)
            args = read_args(iprot, IsValueReadOnly_args)
            result = IsValueReadOnly_result.new()
            result.success = @handler.IsValueReadOnly(args._id)
            write_result(result, oprot, 'IsValueReadOnly', seqid)
          end

          def process_IsValueWriteOnly(seqid, iprot, oprot)
            args = read_args(iprot, IsValueWriteOnly_args)
            result = IsValueWriteOnly_result.new()
            result.success = @handler.IsValueWriteOnly(args._id)
            write_result(result, oprot, 'IsValueWriteOnly', seqid)
          end

          def process_IsValueSet(seqid, iprot, oprot)
            args = read_args(iprot, IsValueSet_args)
            result = IsValueSet_result.new()
            result.success = @handler.IsValueSet(args._id)
            write_result(result, oprot, 'IsValueSet', seqid)
          end

          def process_GetValueAsBool(seqid, iprot, oprot)
            args = read_args(iprot, GetValueAsBool_args)
            result = GetValueAsBool_result.new()
            result.success = @handler.GetValueAsBool(args._id)
            write_result(result, oprot, 'GetValueAsBool', seqid)
          end

          def process_GetValueAsByte(seqid, iprot, oprot)
            args = read_args(iprot, GetValueAsByte_args)
            result = GetValueAsByte_result.new()
            result.success = @handler.GetValueAsByte(args._id)
            write_result(result, oprot, 'GetValueAsByte', seqid)
          end

          def process_GetValueAsFloat(seqid, iprot, oprot)
            args = read_args(iprot, GetValueAsFloat_args)
            result = GetValueAsFloat_result.new()
            result.success = @handler.GetValueAsFloat(args._id)
            write_result(result, oprot, 'GetValueAsFloat', seqid)
          end

          def process_GetValueAsInt(seqid, iprot, oprot)
            args = read_args(iprot, GetValueAsInt_args)
            result = GetValueAsInt_result.new()
            result.success = @handler.GetValueAsInt(args._id)
            write_result(result, oprot, 'GetValueAsInt', seqid)
          end

          def process_GetValueAsShort(seqid, iprot, oprot)
            args = read_args(iprot, GetValueAsShort_args)
            result = GetValueAsShort_result.new()
            result.success = @handler.GetValueAsShort(args._id)
            write_result(result, oprot, 'GetValueAsShort', seqid)
          end

          def process_GetValueAsString(seqid, iprot, oprot)
            args = read_args(iprot, GetValueAsString_args)
            result = GetValueAsString_result.new()
            result.success = @handler.GetValueAsString(args._id)
            write_result(result, oprot, 'GetValueAsString', seqid)
          end

          def process_GetValueListSelection_String(seqid, iprot, oprot)
            args = read_args(iprot, GetValueListSelection_String_args)
            result = GetValueListSelection_String_result.new()
            result.success = @handler.GetValueListSelection_String(args._id)
            write_result(result, oprot, 'GetValueListSelection_String', seqid)
          end

          def process_GetValueListSelection_Int32(seqid, iprot, oprot)
            args = read_args(iprot, GetValueListSelection_Int32_args)
            result = GetValueListSelection_Int32_result.new()
            result.success = @handler.GetValueListSelection_Int32(args._id)
            write_result(result, oprot, 'GetValueListSelection_Int32', seqid)
          end

          def process_GetValueListItems(seqid, iprot, oprot)
            args = read_args(iprot, GetValueListItems_args)
            result = GetValueListItems_result.new()
            result.success = @handler.GetValueListItems(args._id)
            write_result(result, oprot, 'GetValueListItems', seqid)
          end

          def process_GetValueFloatPrecision(seqid, iprot, oprot)
            args = read_args(iprot, GetValueFloatPrecision_args)
            result = GetValueFloatPrecision_result.new()
            result.success = @handler.GetValueFloatPrecision(args._id)
            write_result(result, oprot, 'GetValueFloatPrecision', seqid)
          end

          def process_SetValue_Bool(seqid, iprot, oprot)
            args = read_args(iprot, SetValue_Bool_args)
            result = SetValue_Bool_result.new()
            result.success = @handler.SetValue_Bool(args._id, args._value)
            write_result(result, oprot, 'SetValue_Bool', seqid)
          end

          def process_SetValue_UInt8(seqid, iprot, oprot)
            args = read_args(iprot, SetValue_UInt8_args)
            result = SetValue_UInt8_result.new()
            result.success = @handler.SetValue_UInt8(args._id, args._value)
            write_result(result, oprot, 'SetValue_UInt8', seqid)
          end

          def process_SetValue_Float(seqid, iprot, oprot)
            args = read_args(iprot, SetValue_Float_args)
            result = SetValue_Float_result.new()
            result.success = @handler.SetValue_Float(args._id, args._value)
            write_result(result, oprot, 'SetValue_Float', seqid)
          end

          def process_SetValue_Int32(seqid, iprot, oprot)
            args = read_args(iprot, SetValue_Int32_args)
            result = SetValue_Int32_result.new()
            result.success = @handler.SetValue_Int32(args._id, args._value)
            write_result(result, oprot, 'SetValue_Int32', seqid)
          end

          def process_SetValue_Int16(seqid, iprot, oprot)
            args = read_args(iprot, SetValue_Int16_args)
            result = SetValue_Int16_result.new()
            result.success = @handler.SetValue_Int16(args._id, args._value)
            write_result(result, oprot, 'SetValue_Int16', seqid)
          end

          def process_SetValue_String(seqid, iprot, oprot)
            args = read_args(iprot, SetValue_String_args)
            result = SetValue_String_result.new()
            result.success = @handler.SetValue_String(args._id, args._value)
            write_result(result, oprot, 'SetValue_String', seqid)
          end

          def process_SetValueListSelection(seqid, iprot, oprot)
            args = read_args(iprot, SetValueListSelection_args)
            result = SetValueListSelection_result.new()
            result.success = @handler.SetValueListSelection(args._id, args._selectedItem)
            write_result(result, oprot, 'SetValueListSelection', seqid)
          end

          def process_PressButton(seqid, iprot, oprot)
            args = read_args(iprot, PressButton_args)
            result = PressButton_result.new()
            result.success = @handler.PressButton(args._id)
            write_result(result, oprot, 'PressButton', seqid)
          end

          def process_ReleaseButton(seqid, iprot, oprot)
            args = read_args(iprot, ReleaseButton_args)
            result = ReleaseButton_result.new()
            result.success = @handler.ReleaseButton(args._id)
            write_result(result, oprot, 'ReleaseButton', seqid)
          end

          def process_GetNumSwitchPoints(seqid, iprot, oprot)
            args = read_args(iprot, GetNumSwitchPoints_args)
            result = GetNumSwitchPoints_result.new()
            result.success = @handler.GetNumSwitchPoints(args._id)
            write_result(result, oprot, 'GetNumSwitchPoints', seqid)
          end

          def process_SetSwitchPoint(seqid, iprot, oprot)
            args = read_args(iprot, SetSwitchPoint_args)
            result = SetSwitchPoint_result.new()
            result.success = @handler.SetSwitchPoint(args._id, args._hours, args._minutes, args._setback)
            write_result(result, oprot, 'SetSwitchPoint', seqid)
          end

          def process_RemoveSwitchPoint(seqid, iprot, oprot)
            args = read_args(iprot, RemoveSwitchPoint_args)
            result = RemoveSwitchPoint_result.new()
            result.success = @handler.RemoveSwitchPoint(args._id, args._hours, args._minutes)
            write_result(result, oprot, 'RemoveSwitchPoint', seqid)
          end

          def process_ClearSwitchPoints(seqid, iprot, oprot)
            args = read_args(iprot, ClearSwitchPoints_args)
            result = ClearSwitchPoints_result.new()
            @handler.ClearSwitchPoints(args._id)
            write_result(result, oprot, 'ClearSwitchPoints', seqid)
          end

          def process_GetSwitchPoint(seqid, iprot, oprot)
            args = read_args(iprot, GetSwitchPoint_args)
            result = GetSwitchPoint_result.new()
            result.success = @handler.GetSwitchPoint(args._id, args._idx)
            write_result(result, oprot, 'GetSwitchPoint', seqid)
          end

          def process_SwitchAllOn(seqid, iprot, oprot)
            args = read_args(iprot, SwitchAllOn_args)
            result = SwitchAllOn_result.new()
            @handler.SwitchAllOn(args._homeId)
            write_result(result, oprot, 'SwitchAllOn', seqid)
          end

          def process_SwitchAllOff(seqid, iprot, oprot)
            args = read_args(iprot, SwitchAllOff_args)
            result = SwitchAllOff_result.new()
            @handler.SwitchAllOff(args._homeId)
            write_result(result, oprot, 'SwitchAllOff', seqid)
          end

          def process_SetConfigParam(seqid, iprot, oprot)
            args = read_args(iprot, SetConfigParam_args)
            result = SetConfigParam_result.new()
            result.success = @handler.SetConfigParam(args._homeId, args._nodeId, args._param, args._value, args._size)
            write_result(result, oprot, 'SetConfigParam', seqid)
          end

          def process_RequestConfigParam(seqid, iprot, oprot)
            args = read_args(iprot, RequestConfigParam_args)
            result = RequestConfigParam_result.new()
            @handler.RequestConfigParam(args._homeId, args._nodeId, args._param)
            write_result(result, oprot, 'RequestConfigParam', seqid)
          end

          def process_RequestAllConfigParams(seqid, iprot, oprot)
            args = read_args(iprot, RequestAllConfigParams_args)
            result = RequestAllConfigParams_result.new()
            @handler.RequestAllConfigParams(args._homeId, args._nodeId)
            write_result(result, oprot, 'RequestAllConfigParams', seqid)
          end

          def process_GetNumGroups(seqid, iprot, oprot)
            args = read_args(iprot, GetNumGroups_args)
            result = GetNumGroups_result.new()
            result.success = @handler.GetNumGroups(args._homeId, args._nodeId)
            write_result(result, oprot, 'GetNumGroups', seqid)
          end

          def process_GetAssociations(seqid, iprot, oprot)
            args = read_args(iprot, GetAssociations_args)
            result = GetAssociations_result.new()
            result.success = @handler.GetAssociations(args._homeId, args._nodeId, args._groupIdx)
            write_result(result, oprot, 'GetAssociations', seqid)
          end

          def process_GetMaxAssociations(seqid, iprot, oprot)
            args = read_args(iprot, GetMaxAssociations_args)
            result = GetMaxAssociations_result.new()
            result.success = @handler.GetMaxAssociations(args._homeId, args._nodeId, args._groupIdx)
            write_result(result, oprot, 'GetMaxAssociations', seqid)
          end

          def process_GetGroupLabel(seqid, iprot, oprot)
            args = read_args(iprot, GetGroupLabel_args)
            result = GetGroupLabel_result.new()
            result.success = @handler.GetGroupLabel(args._homeId, args._nodeId, args._groupIdx)
            write_result(result, oprot, 'GetGroupLabel', seqid)
          end

          def process_AddAssociation(seqid, iprot, oprot)
            args = read_args(iprot, AddAssociation_args)
            result = AddAssociation_result.new()
            @handler.AddAssociation(args._homeId, args._nodeId, args._groupIdx, args._targetNodeId)
            write_result(result, oprot, 'AddAssociation', seqid)
          end

          def process_RemoveAssociation(seqid, iprot, oprot)
            args = read_args(iprot, RemoveAssociation_args)
            result = RemoveAssociation_result.new()
            @handler.RemoveAssociation(args._homeId, args._nodeId, args._groupIdx, args._targetNodeId)
            write_result(result, oprot, 'RemoveAssociation', seqid)
          end

          def process_ResetController(seqid, iprot, oprot)
            args = read_args(iprot, ResetController_args)
            result = ResetController_result.new()
            @handler.ResetController(args._homeId)
            write_result(result, oprot, 'ResetController', seqid)
          end

          def process_SoftReset(seqid, iprot, oprot)
            args = read_args(iprot, SoftReset_args)
            result = SoftReset_result.new()
            @handler.SoftReset(args._homeId)
            write_result(result, oprot, 'SoftReset', seqid)
          end

          def process_GetNumScenes(seqid, iprot, oprot)
            args = read_args(iprot, GetNumScenes_args)
            result = GetNumScenes_result.new()
            result.success = @handler.GetNumScenes()
            write_result(result, oprot, 'GetNumScenes', seqid)
          end

          def process_GetAllScenes(seqid, iprot, oprot)
            args = read_args(iprot, GetAllScenes_args)
            result = GetAllScenes_result.new()
            result.success = @handler.GetAllScenes()
            write_result(result, oprot, 'GetAllScenes', seqid)
          end

          def process_CreateScene(seqid, iprot, oprot)
            args = read_args(iprot, CreateScene_args)
            result = CreateScene_result.new()
            result.success = @handler.CreateScene()
            write_result(result, oprot, 'CreateScene', seqid)
          end

          def process_RemoveScene(seqid, iprot, oprot)
            args = read_args(iprot, RemoveScene_args)
            result = RemoveScene_result.new()
            result.success = @handler.RemoveScene(args._sceneId)
            write_result(result, oprot, 'RemoveScene', seqid)
          end

          def process_AddSceneValue_Bool(seqid, iprot, oprot)
            args = read_args(iprot, AddSceneValue_Bool_args)
            result = AddSceneValue_Bool_result.new()
            result.success = @handler.AddSceneValue_Bool(args._sceneId, args._valueId, args._value)
            write_result(result, oprot, 'AddSceneValue_Bool', seqid)
          end

          def process_AddSceneValue_Uint8(seqid, iprot, oprot)
            args = read_args(iprot, AddSceneValue_Uint8_args)
            result = AddSceneValue_Uint8_result.new()
            result.success = @handler.AddSceneValue_Uint8(args._sceneId, args._valueId, args._value)
            write_result(result, oprot, 'AddSceneValue_Uint8', seqid)
          end

          def process_AddSceneValue_Float(seqid, iprot, oprot)
            args = read_args(iprot, AddSceneValue_Float_args)
            result = AddSceneValue_Float_result.new()
            result.success = @handler.AddSceneValue_Float(args._sceneId, args._valueId, args._value)
            write_result(result, oprot, 'AddSceneValue_Float', seqid)
          end

          def process_AddSceneValue_Int32(seqid, iprot, oprot)
            args = read_args(iprot, AddSceneValue_Int32_args)
            result = AddSceneValue_Int32_result.new()
            result.success = @handler.AddSceneValue_Int32(args._sceneId, args._valueId, args._value)
            write_result(result, oprot, 'AddSceneValue_Int32', seqid)
          end

          def process_AddSceneValue_Int16(seqid, iprot, oprot)
            args = read_args(iprot, AddSceneValue_Int16_args)
            result = AddSceneValue_Int16_result.new()
            result.success = @handler.AddSceneValue_Int16(args._sceneId, args._valueId, args._value)
            write_result(result, oprot, 'AddSceneValue_Int16', seqid)
          end

          def process_AddSceneValue_String(seqid, iprot, oprot)
            args = read_args(iprot, AddSceneValue_String_args)
            result = AddSceneValue_String_result.new()
            result.success = @handler.AddSceneValue_String(args._sceneId, args._valueId, args._value)
            write_result(result, oprot, 'AddSceneValue_String', seqid)
          end

          def process_AddSceneValueListSelection_String(seqid, iprot, oprot)
            args = read_args(iprot, AddSceneValueListSelection_String_args)
            result = AddSceneValueListSelection_String_result.new()
            result.success = @handler.AddSceneValueListSelection_String(args._sceneId, args._valueId, args._value)
            write_result(result, oprot, 'AddSceneValueListSelection_String', seqid)
          end

          def process_AddSceneValueListSelection_Int32(seqid, iprot, oprot)
            args = read_args(iprot, AddSceneValueListSelection_Int32_args)
            result = AddSceneValueListSelection_Int32_result.new()
            result.success = @handler.AddSceneValueListSelection_Int32(args._sceneId, args._valueId, args._value)
            write_result(result, oprot, 'AddSceneValueListSelection_Int32', seqid)
          end

          def process_RemoveSceneValue(seqid, iprot, oprot)
            args = read_args(iprot, RemoveSceneValue_args)
            result = RemoveSceneValue_result.new()
            result.success = @handler.RemoveSceneValue(args._sceneId, args._valueId)
            write_result(result, oprot, 'RemoveSceneValue', seqid)
          end

          def process_SceneGetValues(seqid, iprot, oprot)
            args = read_args(iprot, SceneGetValues_args)
            result = SceneGetValues_result.new()
            result.success = @handler.SceneGetValues(args._sceneId)
            write_result(result, oprot, 'SceneGetValues', seqid)
          end

          def process_SceneGetValueAsBool(seqid, iprot, oprot)
            args = read_args(iprot, SceneGetValueAsBool_args)
            result = SceneGetValueAsBool_result.new()
            result.success = @handler.SceneGetValueAsBool(args._sceneId, args._valueId)
            write_result(result, oprot, 'SceneGetValueAsBool', seqid)
          end

          def process_SceneGetValueAsByte(seqid, iprot, oprot)
            args = read_args(iprot, SceneGetValueAsByte_args)
            result = SceneGetValueAsByte_result.new()
            result.success = @handler.SceneGetValueAsByte(args._sceneId, args._valueId)
            write_result(result, oprot, 'SceneGetValueAsByte', seqid)
          end

          def process_SceneGetValueAsFloat(seqid, iprot, oprot)
            args = read_args(iprot, SceneGetValueAsFloat_args)
            result = SceneGetValueAsFloat_result.new()
            result.success = @handler.SceneGetValueAsFloat(args._sceneId, args._valueId)
            write_result(result, oprot, 'SceneGetValueAsFloat', seqid)
          end

          def process_SceneGetValueAsInt(seqid, iprot, oprot)
            args = read_args(iprot, SceneGetValueAsInt_args)
            result = SceneGetValueAsInt_result.new()
            result.success = @handler.SceneGetValueAsInt(args._sceneId, args._valueId)
            write_result(result, oprot, 'SceneGetValueAsInt', seqid)
          end

          def process_SceneGetValueAsShort(seqid, iprot, oprot)
            args = read_args(iprot, SceneGetValueAsShort_args)
            result = SceneGetValueAsShort_result.new()
            result.success = @handler.SceneGetValueAsShort(args._sceneId, args._valueId)
            write_result(result, oprot, 'SceneGetValueAsShort', seqid)
          end

          def process_SceneGetValueAsString(seqid, iprot, oprot)
            args = read_args(iprot, SceneGetValueAsString_args)
            result = SceneGetValueAsString_result.new()
            result.success = @handler.SceneGetValueAsString(args._sceneId, args._valueId)
            write_result(result, oprot, 'SceneGetValueAsString', seqid)
          end

          def process_SceneGetValueListSelection_String(seqid, iprot, oprot)
            args = read_args(iprot, SceneGetValueListSelection_String_args)
            result = SceneGetValueListSelection_String_result.new()
            result.success = @handler.SceneGetValueListSelection_String(args._sceneId, args._valueId)
            write_result(result, oprot, 'SceneGetValueListSelection_String', seqid)
          end

          def process_SceneGetValueListSelection_Int32(seqid, iprot, oprot)
            args = read_args(iprot, SceneGetValueListSelection_Int32_args)
            result = SceneGetValueListSelection_Int32_result.new()
            result.success = @handler.SceneGetValueListSelection_Int32(args._sceneId, args._valueId)
            write_result(result, oprot, 'SceneGetValueListSelection_Int32', seqid)
          end

          def process_SetSceneValue_Bool(seqid, iprot, oprot)
            args = read_args(iprot, SetSceneValue_Bool_args)
            result = SetSceneValue_Bool_result.new()
            result.success = @handler.SetSceneValue_Bool(args._sceneId, args._valueId, args._value)
            write_result(result, oprot, 'SetSceneValue_Bool', seqid)
          end

          def process_SetSceneValue_Uint8(seqid, iprot, oprot)
            args = read_args(iprot, SetSceneValue_Uint8_args)
            result = SetSceneValue_Uint8_result.new()
            result.success = @handler.SetSceneValue_Uint8(args._sceneId, args._valueId, args._value)
            write_result(result, oprot, 'SetSceneValue_Uint8', seqid)
          end

          def process_SetSceneValue_Float(seqid, iprot, oprot)
            args = read_args(iprot, SetSceneValue_Float_args)
            result = SetSceneValue_Float_result.new()
            result.success = @handler.SetSceneValue_Float(args._sceneId, args._valueId, args._value)
            write_result(result, oprot, 'SetSceneValue_Float', seqid)
          end

          def process_SetSceneValue_Int32(seqid, iprot, oprot)
            args = read_args(iprot, SetSceneValue_Int32_args)
            result = SetSceneValue_Int32_result.new()
            result.success = @handler.SetSceneValue_Int32(args._sceneId, args._valueId, args._value)
            write_result(result, oprot, 'SetSceneValue_Int32', seqid)
          end

          def process_SetSceneValue_Int16(seqid, iprot, oprot)
            args = read_args(iprot, SetSceneValue_Int16_args)
            result = SetSceneValue_Int16_result.new()
            result.success = @handler.SetSceneValue_Int16(args._sceneId, args._valueId, args._value)
            write_result(result, oprot, 'SetSceneValue_Int16', seqid)
          end

          def process_SetSceneValue_String(seqid, iprot, oprot)
            args = read_args(iprot, SetSceneValue_String_args)
            result = SetSceneValue_String_result.new()
            result.success = @handler.SetSceneValue_String(args._sceneId, args._valueId, args._value)
            write_result(result, oprot, 'SetSceneValue_String', seqid)
          end

          def process_SetSceneValueListSelection_String(seqid, iprot, oprot)
            args = read_args(iprot, SetSceneValueListSelection_String_args)
            result = SetSceneValueListSelection_String_result.new()
            result.success = @handler.SetSceneValueListSelection_String(args._sceneId, args._valueId, args._value)
            write_result(result, oprot, 'SetSceneValueListSelection_String', seqid)
          end

          def process_SetSceneValueListSelection_Int32(seqid, iprot, oprot)
            args = read_args(iprot, SetSceneValueListSelection_Int32_args)
            result = SetSceneValueListSelection_Int32_result.new()
            result.success = @handler.SetSceneValueListSelection_Int32(args._sceneId, args._valueId, args._value)
            write_result(result, oprot, 'SetSceneValueListSelection_Int32', seqid)
          end

          def process_GetSceneLabel(seqid, iprot, oprot)
            args = read_args(iprot, GetSceneLabel_args)
            result = GetSceneLabel_result.new()
            result.success = @handler.GetSceneLabel(args._sceneId)
            write_result(result, oprot, 'GetSceneLabel', seqid)
          end

          def process_SetSceneLabel(seqid, iprot, oprot)
            args = read_args(iprot, SetSceneLabel_args)
            result = SetSceneLabel_result.new()
            @handler.SetSceneLabel(args._sceneId, args._value)
            write_result(result, oprot, 'SetSceneLabel', seqid)
          end

          def process_SceneExists(seqid, iprot, oprot)
            args = read_args(iprot, SceneExists_args)
            result = SceneExists_result.new()
            result.success = @handler.SceneExists(args._sceneId)
            write_result(result, oprot, 'SceneExists', seqid)
          end

          def process_ActivateScene(seqid, iprot, oprot)
            args = read_args(iprot, ActivateScene_args)
            result = ActivateScene_result.new()
            result.success = @handler.ActivateScene(args._sceneId)
            write_result(result, oprot, 'ActivateScene', seqid)
          end

        end

        # HELPER FUNCTIONS AND STRUCTURES

        class WriteConfig_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          _HOMEID = 1

          FIELDS = {
            _HOMEID => {:type => ::Thrift::Types::I32, :name => '_homeId'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class WriteConfig_result
          include ::Thrift::Struct, ::Thrift::Struct_Union

          FIELDS = {

          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class GetControllerNodeId_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          _HOMEID = 1

          FIELDS = {
            _HOMEID => {:type => ::Thrift::Types::I32, :name => '_homeId'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class GetControllerNodeId_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::BYTE, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class IsPrimaryController_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          _HOMEID = 1

          FIELDS = {
            _HOMEID => {:type => ::Thrift::Types::I32, :name => '_homeId'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class IsPrimaryController_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class IsBridgeController_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          _HOMEID = 1

          FIELDS = {
            _HOMEID => {:type => ::Thrift::Types::I32, :name => '_homeId'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class IsBridgeController_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class GetLibraryVersion_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          _HOMEID = 1

          FIELDS = {
            _HOMEID => {:type => ::Thrift::Types::I32, :name => '_homeId'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class GetLibraryVersion_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class GetLibraryTypeName_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          _HOMEID = 1

          FIELDS = {
            _HOMEID => {:type => ::Thrift::Types::I32, :name => '_homeId'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class GetLibraryTypeName_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class GetSendQueueCount_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          _HOMEID = 1

          FIELDS = {
            _HOMEID => {:type => ::Thrift::Types::I32, :name => '_homeId'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class GetSendQueueCount_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::I32, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class GetPollInterval_args
          include ::Thrift::Struct, ::Thrift::Struct_Union

          FIELDS = {

          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class GetPollInterval_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::I32, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class SetPollInterval_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          _SECONDS = 1

          FIELDS = {
            _SECONDS => {:type => ::Thrift::Types::I32, :name => '_seconds'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class SetPollInterval_result
          include ::Thrift::Struct, ::Thrift::Struct_Union

          FIELDS = {

          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class EnablePoll_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          _VALUEID = 1

          FIELDS = {
            _VALUEID => {:type => ::Thrift::Types::I64, :name => '_valueId'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class EnablePoll_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class DisablePoll_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          _VALUEID = 1

          FIELDS = {
            _VALUEID => {:type => ::Thrift::Types::I64, :name => '_valueId'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class DisablePoll_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class IsPolled_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          _VALUEID = 1

          FIELDS = {
            _VALUEID => {:type => ::Thrift::Types::I64, :name => '_valueId'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class IsPolled_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class RefreshNodeInfo_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          _HOMEID = 1
          _NODEID = 2

          FIELDS = {
            _HOMEID => {:type => ::Thrift::Types::I32, :name => '_homeId'},
            _NODEID => {:type => ::Thrift::Types::BYTE, :name => '_nodeId'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class RefreshNodeInfo_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class RequestNodeState_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          _HOMEID = 1
          _NODEID = 2

          FIELDS = {
            _HOMEID => {:type => ::Thrift::Types::I32, :name => '_homeId'},
            _NODEID => {:type => ::Thrift::Types::BYTE, :name => '_nodeId'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class RequestNodeState_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class RequestNodeDynamic_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          _HOMEID = 1
          _NODEID = 2

          FIELDS = {
            _HOMEID => {:type => ::Thrift::Types::I32, :name => '_homeId'},
            _NODEID => {:type => ::Thrift::Types::BYTE, :name => '_nodeId'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class RequestNodeDynamic_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class IsNodeListeningDevice_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          _HOMEID = 1
          _NODEID = 2

          FIELDS = {
            _HOMEID => {:type => ::Thrift::Types::I32, :name => '_homeId'},
            _NODEID => {:type => ::Thrift::Types::BYTE, :name => '_nodeId'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class IsNodeListeningDevice_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class IsNodeRoutingDevice_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          _HOMEID = 1
          _NODEID = 2

          FIELDS = {
            _HOMEID => {:type => ::Thrift::Types::I32, :name => '_homeId'},
            _NODEID => {:type => ::Thrift::Types::BYTE, :name => '_nodeId'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class IsNodeRoutingDevice_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class GetNodeMaxBaudRate_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          _HOMEID = 1
          _NODEID = 2

          FIELDS = {
            _HOMEID => {:type => ::Thrift::Types::I32, :name => '_homeId'},
            _NODEID => {:type => ::Thrift::Types::BYTE, :name => '_nodeId'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class GetNodeMaxBaudRate_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::I32, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class GetNodeVersion_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          _HOMEID = 1
          _NODEID = 2

          FIELDS = {
            _HOMEID => {:type => ::Thrift::Types::I32, :name => '_homeId'},
            _NODEID => {:type => ::Thrift::Types::BYTE, :name => '_nodeId'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class GetNodeVersion_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::BYTE, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class GetNodeSecurity_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          _HOMEID = 1
          _NODEID = 2

          FIELDS = {
            _HOMEID => {:type => ::Thrift::Types::I32, :name => '_homeId'},
            _NODEID => {:type => ::Thrift::Types::BYTE, :name => '_nodeId'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class GetNodeSecurity_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::BYTE, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class GetNodeBasic_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          _HOMEID = 1
          _NODEID = 2

          FIELDS = {
            _HOMEID => {:type => ::Thrift::Types::I32, :name => '_homeId'},
            _NODEID => {:type => ::Thrift::Types::BYTE, :name => '_nodeId'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class GetNodeBasic_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::BYTE, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class GetNodeGeneric_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          _HOMEID = 1
          _NODEID = 2

          FIELDS = {
            _HOMEID => {:type => ::Thrift::Types::I32, :name => '_homeId'},
            _NODEID => {:type => ::Thrift::Types::BYTE, :name => '_nodeId'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class GetNodeGeneric_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::BYTE, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class GetNodeSpecific_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          _HOMEID = 1
          _NODEID = 2

          FIELDS = {
            _HOMEID => {:type => ::Thrift::Types::I32, :name => '_homeId'},
            _NODEID => {:type => ::Thrift::Types::BYTE, :name => '_nodeId'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class GetNodeSpecific_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::BYTE, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class GetNodeType_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          _HOMEID = 1
          _NODEID = 2

          FIELDS = {
            _HOMEID => {:type => ::Thrift::Types::I32, :name => '_homeId'},
            _NODEID => {:type => ::Thrift::Types::BYTE, :name => '_nodeId'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class GetNodeType_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class GetNodeNeighbors_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          _HOMEID = 1
          _NODEID = 2

          FIELDS = {
            _HOMEID => {:type => ::Thrift::Types::I32, :name => '_homeId'},
            _NODEID => {:type => ::Thrift::Types::BYTE, :name => '_nodeId'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class GetNodeNeighbors_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => OpenZWave::UInt32_ListByte}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class GetNodeManufacturerName_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          _HOMEID = 1
          _NODEID = 2

          FIELDS = {
            _HOMEID => {:type => ::Thrift::Types::I32, :name => '_homeId'},
            _NODEID => {:type => ::Thrift::Types::BYTE, :name => '_nodeId'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class GetNodeManufacturerName_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class GetNodeProductName_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          _HOMEID = 1
          _NODEID = 2

          FIELDS = {
            _HOMEID => {:type => ::Thrift::Types::I32, :name => '_homeId'},
            _NODEID => {:type => ::Thrift::Types::BYTE, :name => '_nodeId'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class GetNodeProductName_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class GetNodeName_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          _HOMEID = 1
          _NODEID = 2

          FIELDS = {
            _HOMEID => {:type => ::Thrift::Types::I32, :name => '_homeId'},
            _NODEID => {:type => ::Thrift::Types::BYTE, :name => '_nodeId'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class GetNodeName_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class GetNodeLocation_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          _HOMEID = 1
          _NODEID = 2

          FIELDS = {
            _HOMEID => {:type => ::Thrift::Types::I32, :name => '_homeId'},
            _NODEID => {:type => ::Thrift::Types::BYTE, :name => '_nodeId'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class GetNodeLocation_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class GetNodeManufacturerId_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          _HOMEID = 1
          _NODEID = 2

          FIELDS = {
            _HOMEID => {:type => ::Thrift::Types::I32, :name => '_homeId'},
            _NODEID => {:type => ::Thrift::Types::BYTE, :name => '_nodeId'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class GetNodeManufacturerId_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class GetNodeProductType_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          _HOMEID = 1
          _NODEID = 2

          FIELDS = {
            _HOMEID => {:type => ::Thrift::Types::I32, :name => '_homeId'},
            _NODEID => {:type => ::Thrift::Types::BYTE, :name => '_nodeId'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class GetNodeProductType_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class GetNodeProductId_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          _HOMEID = 1
          _NODEID = 2

          FIELDS = {
            _HOMEID => {:type => ::Thrift::Types::I32, :name => '_homeId'},
            _NODEID => {:type => ::Thrift::Types::BYTE, :name => '_nodeId'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class GetNodeProductId_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class SetNodeManufacturerName_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          _HOMEID = 1
          _NODEID = 2
          _MANUFACTURERNAME = 3

          FIELDS = {
            _HOMEID => {:type => ::Thrift::Types::I32, :name => '_homeId'},
            _NODEID => {:type => ::Thrift::Types::BYTE, :name => '_nodeId'},
            _MANUFACTURERNAME => {:type => ::Thrift::Types::STRING, :name => '_manufacturerName'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class SetNodeManufacturerName_result
          include ::Thrift::Struct, ::Thrift::Struct_Union

          FIELDS = {

          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class SetNodeProductName_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          _HOMEID = 1
          _NODEID = 2
          _PRODUCTNAME = 3

          FIELDS = {
            _HOMEID => {:type => ::Thrift::Types::I32, :name => '_homeId'},
            _NODEID => {:type => ::Thrift::Types::BYTE, :name => '_nodeId'},
            _PRODUCTNAME => {:type => ::Thrift::Types::STRING, :name => '_productName'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class SetNodeProductName_result
          include ::Thrift::Struct, ::Thrift::Struct_Union

          FIELDS = {

          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class SetNodeName_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          _HOMEID = 1
          _NODEID = 2
          _NODENAME = 3

          FIELDS = {
            _HOMEID => {:type => ::Thrift::Types::I32, :name => '_homeId'},
            _NODEID => {:type => ::Thrift::Types::BYTE, :name => '_nodeId'},
            _NODENAME => {:type => ::Thrift::Types::STRING, :name => '_nodeName'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class SetNodeName_result
          include ::Thrift::Struct, ::Thrift::Struct_Union

          FIELDS = {

          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class SetNodeLocation_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          _HOMEID = 1
          _NODEID = 2
          _LOCATION = 3

          FIELDS = {
            _HOMEID => {:type => ::Thrift::Types::I32, :name => '_homeId'},
            _NODEID => {:type => ::Thrift::Types::BYTE, :name => '_nodeId'},
            _LOCATION => {:type => ::Thrift::Types::STRING, :name => '_location'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class SetNodeLocation_result
          include ::Thrift::Struct, ::Thrift::Struct_Union

          FIELDS = {

          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class SetNodeOn_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          _HOMEID = 1
          _NODEID = 2

          FIELDS = {
            _HOMEID => {:type => ::Thrift::Types::I32, :name => '_homeId'},
            _NODEID => {:type => ::Thrift::Types::BYTE, :name => '_nodeId'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class SetNodeOn_result
          include ::Thrift::Struct, ::Thrift::Struct_Union

          FIELDS = {

          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class SetNodeOff_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          _HOMEID = 1
          _NODEID = 2

          FIELDS = {
            _HOMEID => {:type => ::Thrift::Types::I32, :name => '_homeId'},
            _NODEID => {:type => ::Thrift::Types::BYTE, :name => '_nodeId'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class SetNodeOff_result
          include ::Thrift::Struct, ::Thrift::Struct_Union

          FIELDS = {

          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class SetNodeLevel_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          _HOMEID = 1
          _NODEID = 2
          _LEVEL = 3

          FIELDS = {
            _HOMEID => {:type => ::Thrift::Types::I32, :name => '_homeId'},
            _NODEID => {:type => ::Thrift::Types::BYTE, :name => '_nodeId'},
            _LEVEL => {:type => ::Thrift::Types::BYTE, :name => '_level'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class SetNodeLevel_result
          include ::Thrift::Struct, ::Thrift::Struct_Union

          FIELDS = {

          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class IsNodeInfoReceived_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          _HOMEID = 1
          _NODEID = 2

          FIELDS = {
            _HOMEID => {:type => ::Thrift::Types::I32, :name => '_homeId'},
            _NODEID => {:type => ::Thrift::Types::BYTE, :name => '_nodeId'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class IsNodeInfoReceived_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class GetValueLabel_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          _ID = 1

          FIELDS = {
            _ID => {:type => ::Thrift::Types::I64, :name => '_id'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class GetValueLabel_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class SetValueLabel_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          _ID = 1
          _VALUE = 2

          FIELDS = {
            _ID => {:type => ::Thrift::Types::I64, :name => '_id'},
            _VALUE => {:type => ::Thrift::Types::STRING, :name => '_value'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class SetValueLabel_result
          include ::Thrift::Struct, ::Thrift::Struct_Union

          FIELDS = {

          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class GetValueUnits_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          _ID = 1

          FIELDS = {
            _ID => {:type => ::Thrift::Types::I64, :name => '_id'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class GetValueUnits_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class SetValueUnits_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          _ID = 1
          _VALUE = 2

          FIELDS = {
            _ID => {:type => ::Thrift::Types::I64, :name => '_id'},
            _VALUE => {:type => ::Thrift::Types::STRING, :name => '_value'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class SetValueUnits_result
          include ::Thrift::Struct, ::Thrift::Struct_Union

          FIELDS = {

          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class GetValueHelp_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          _ID = 1

          FIELDS = {
            _ID => {:type => ::Thrift::Types::I64, :name => '_id'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class GetValueHelp_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class SetValueHelp_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          _ID = 1
          _VALUE = 2

          FIELDS = {
            _ID => {:type => ::Thrift::Types::I64, :name => '_id'},
            _VALUE => {:type => ::Thrift::Types::STRING, :name => '_value'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class SetValueHelp_result
          include ::Thrift::Struct, ::Thrift::Struct_Union

          FIELDS = {

          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class GetValueMin_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          _ID = 1

          FIELDS = {
            _ID => {:type => ::Thrift::Types::I64, :name => '_id'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class GetValueMin_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::I32, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class GetValueMax_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          _ID = 1

          FIELDS = {
            _ID => {:type => ::Thrift::Types::I64, :name => '_id'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class GetValueMax_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::I32, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class IsValueReadOnly_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          _ID = 1

          FIELDS = {
            _ID => {:type => ::Thrift::Types::I64, :name => '_id'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class IsValueReadOnly_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class IsValueWriteOnly_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          _ID = 1

          FIELDS = {
            _ID => {:type => ::Thrift::Types::I64, :name => '_id'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class IsValueWriteOnly_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class IsValueSet_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          _ID = 1

          FIELDS = {
            _ID => {:type => ::Thrift::Types::I64, :name => '_id'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class IsValueSet_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class GetValueAsBool_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          _ID = 1

          FIELDS = {
            _ID => {:type => ::Thrift::Types::I64, :name => '_id'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class GetValueAsBool_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => OpenZWave::Bool_Bool}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class GetValueAsByte_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          _ID = 1

          FIELDS = {
            _ID => {:type => ::Thrift::Types::I64, :name => '_id'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class GetValueAsByte_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => OpenZWave::Bool_UInt8}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class GetValueAsFloat_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          _ID = 1

          FIELDS = {
            _ID => {:type => ::Thrift::Types::I64, :name => '_id'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class GetValueAsFloat_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => OpenZWave::Bool_Float}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class GetValueAsInt_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          _ID = 1

          FIELDS = {
            _ID => {:type => ::Thrift::Types::I64, :name => '_id'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class GetValueAsInt_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => OpenZWave::Bool_Int}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class GetValueAsShort_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          _ID = 1

          FIELDS = {
            _ID => {:type => ::Thrift::Types::I64, :name => '_id'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class GetValueAsShort_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => OpenZWave::Bool_Int16}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class GetValueAsString_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          _ID = 1

          FIELDS = {
            _ID => {:type => ::Thrift::Types::I64, :name => '_id'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class GetValueAsString_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => OpenZWave::Bool_String}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class GetValueListSelection_String_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          _ID = 1

          FIELDS = {
            _ID => {:type => ::Thrift::Types::I64, :name => '_id'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class GetValueListSelection_String_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => OpenZWave::Bool_String}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class GetValueListSelection_Int32_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          _ID = 1

          FIELDS = {
            _ID => {:type => ::Thrift::Types::I64, :name => '_id'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class GetValueListSelection_Int32_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => OpenZWave::Bool_Int}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class GetValueListItems_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          _ID = 1

          FIELDS = {
            _ID => {:type => ::Thrift::Types::I64, :name => '_id'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class GetValueListItems_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => OpenZWave::Bool_ListString}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class GetValueFloatPrecision_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          _ID = 1

          FIELDS = {
            _ID => {:type => ::Thrift::Types::I64, :name => '_id'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class GetValueFloatPrecision_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => OpenZWave::Bool_UInt8}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class SetValue_Bool_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          _ID = 1
          _VALUE = 2

          FIELDS = {
            _ID => {:type => ::Thrift::Types::I64, :name => '_id'},
            _VALUE => {:type => ::Thrift::Types::BOOL, :name => '_value'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class SetValue_Bool_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class SetValue_UInt8_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          _ID = 1
          _VALUE = 2

          FIELDS = {
            _ID => {:type => ::Thrift::Types::I64, :name => '_id'},
            _VALUE => {:type => ::Thrift::Types::BYTE, :name => '_value'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class SetValue_UInt8_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class SetValue_Float_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          _ID = 1
          _VALUE = 2

          FIELDS = {
            _ID => {:type => ::Thrift::Types::I64, :name => '_id'},
            _VALUE => {:type => ::Thrift::Types::DOUBLE, :name => '_value'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class SetValue_Float_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class SetValue_Int32_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          _ID = 1
          _VALUE = 2

          FIELDS = {
            _ID => {:type => ::Thrift::Types::I64, :name => '_id'},
            _VALUE => {:type => ::Thrift::Types::I32, :name => '_value'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class SetValue_Int32_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class SetValue_Int16_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          _ID = 1
          _VALUE = 2

          FIELDS = {
            _ID => {:type => ::Thrift::Types::I64, :name => '_id'},
            _VALUE => {:type => ::Thrift::Types::I16, :name => '_value'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class SetValue_Int16_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class SetValue_String_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          _ID = 1
          _VALUE = 2

          FIELDS = {
            _ID => {:type => ::Thrift::Types::I64, :name => '_id'},
            _VALUE => {:type => ::Thrift::Types::STRING, :name => '_value'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class SetValue_String_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class SetValueListSelection_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          _ID = 1
          _SELECTEDITEM = 2

          FIELDS = {
            _ID => {:type => ::Thrift::Types::I64, :name => '_id'},
            _SELECTEDITEM => {:type => ::Thrift::Types::STRING, :name => '_selectedItem'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class SetValueListSelection_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class PressButton_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          _ID = 1

          FIELDS = {
            _ID => {:type => ::Thrift::Types::I64, :name => '_id'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class PressButton_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class ReleaseButton_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          _ID = 1

          FIELDS = {
            _ID => {:type => ::Thrift::Types::I64, :name => '_id'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class ReleaseButton_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class GetNumSwitchPoints_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          _ID = 1

          FIELDS = {
            _ID => {:type => ::Thrift::Types::I64, :name => '_id'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class GetNumSwitchPoints_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::BYTE, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class SetSwitchPoint_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          _ID = 1
          _HOURS = 2
          _MINUTES = 3
          _SETBACK = 4

          FIELDS = {
            _ID => {:type => ::Thrift::Types::I64, :name => '_id'},
            _HOURS => {:type => ::Thrift::Types::BYTE, :name => '_hours'},
            _MINUTES => {:type => ::Thrift::Types::BYTE, :name => '_minutes'},
            _SETBACK => {:type => ::Thrift::Types::BYTE, :name => '_setback'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class SetSwitchPoint_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class RemoveSwitchPoint_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          _ID = 1
          _HOURS = 2
          _MINUTES = 3

          FIELDS = {
            _ID => {:type => ::Thrift::Types::I64, :name => '_id'},
            _HOURS => {:type => ::Thrift::Types::BYTE, :name => '_hours'},
            _MINUTES => {:type => ::Thrift::Types::BYTE, :name => '_minutes'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class RemoveSwitchPoint_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class ClearSwitchPoints_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          _ID = 1

          FIELDS = {
            _ID => {:type => ::Thrift::Types::I64, :name => '_id'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class ClearSwitchPoints_result
          include ::Thrift::Struct, ::Thrift::Struct_Union

          FIELDS = {

          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class GetSwitchPoint_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          _ID = 1
          _IDX = 2

          FIELDS = {
            _ID => {:type => ::Thrift::Types::I64, :name => '_id'},
            _IDX => {:type => ::Thrift::Types::BYTE, :name => '_idx'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class GetSwitchPoint_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => OpenZWave::GetSwitchPointReturnStruct}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class SwitchAllOn_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          _HOMEID = 1

          FIELDS = {
            _HOMEID => {:type => ::Thrift::Types::I32, :name => '_homeId'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class SwitchAllOn_result
          include ::Thrift::Struct, ::Thrift::Struct_Union

          FIELDS = {

          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class SwitchAllOff_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          _HOMEID = 1

          FIELDS = {
            _HOMEID => {:type => ::Thrift::Types::I32, :name => '_homeId'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class SwitchAllOff_result
          include ::Thrift::Struct, ::Thrift::Struct_Union

          FIELDS = {

          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class SetConfigParam_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          _HOMEID = 1
          _NODEID = 2
          _PARAM = 3
          _VALUE = 4
          _SIZE = 5

          FIELDS = {
            _HOMEID => {:type => ::Thrift::Types::I32, :name => '_homeId'},
            _NODEID => {:type => ::Thrift::Types::BYTE, :name => '_nodeId'},
            _PARAM => {:type => ::Thrift::Types::BYTE, :name => '_param'},
            _VALUE => {:type => ::Thrift::Types::I32, :name => '_value'},
            _SIZE => {:type => ::Thrift::Types::BYTE, :name => '_size', :default => 2}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class SetConfigParam_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class RequestConfigParam_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          _HOMEID = 1
          _NODEID = 2
          _PARAM = 3

          FIELDS = {
            _HOMEID => {:type => ::Thrift::Types::I32, :name => '_homeId'},
            _NODEID => {:type => ::Thrift::Types::BYTE, :name => '_nodeId'},
            _PARAM => {:type => ::Thrift::Types::BYTE, :name => '_param'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class RequestConfigParam_result
          include ::Thrift::Struct, ::Thrift::Struct_Union

          FIELDS = {

          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class RequestAllConfigParams_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          _HOMEID = 1
          _NODEID = 2

          FIELDS = {
            _HOMEID => {:type => ::Thrift::Types::I32, :name => '_homeId'},
            _NODEID => {:type => ::Thrift::Types::BYTE, :name => '_nodeId'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class RequestAllConfigParams_result
          include ::Thrift::Struct, ::Thrift::Struct_Union

          FIELDS = {

          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class GetNumGroups_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          _HOMEID = 1
          _NODEID = 2

          FIELDS = {
            _HOMEID => {:type => ::Thrift::Types::I32, :name => '_homeId'},
            _NODEID => {:type => ::Thrift::Types::BYTE, :name => '_nodeId'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class GetNumGroups_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::BYTE, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class GetAssociations_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          _HOMEID = 1
          _NODEID = 2
          _GROUPIDX = 3

          FIELDS = {
            _HOMEID => {:type => ::Thrift::Types::I32, :name => '_homeId'},
            _NODEID => {:type => ::Thrift::Types::BYTE, :name => '_nodeId'},
            _GROUPIDX => {:type => ::Thrift::Types::BYTE, :name => '_groupIdx'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class GetAssociations_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::BYTE}}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class GetMaxAssociations_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          _HOMEID = 1
          _NODEID = 2
          _GROUPIDX = 3

          FIELDS = {
            _HOMEID => {:type => ::Thrift::Types::I32, :name => '_homeId'},
            _NODEID => {:type => ::Thrift::Types::BYTE, :name => '_nodeId'},
            _GROUPIDX => {:type => ::Thrift::Types::BYTE, :name => '_groupIdx'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class GetMaxAssociations_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::BYTE, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class GetGroupLabel_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          _HOMEID = 1
          _NODEID = 2
          _GROUPIDX = 3

          FIELDS = {
            _HOMEID => {:type => ::Thrift::Types::I32, :name => '_homeId'},
            _NODEID => {:type => ::Thrift::Types::BYTE, :name => '_nodeId'},
            _GROUPIDX => {:type => ::Thrift::Types::BYTE, :name => '_groupIdx'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class GetGroupLabel_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class AddAssociation_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          _HOMEID = 1
          _NODEID = 2
          _GROUPIDX = 3
          _TARGETNODEID = 4

          FIELDS = {
            _HOMEID => {:type => ::Thrift::Types::I32, :name => '_homeId'},
            _NODEID => {:type => ::Thrift::Types::BYTE, :name => '_nodeId'},
            _GROUPIDX => {:type => ::Thrift::Types::BYTE, :name => '_groupIdx'},
            _TARGETNODEID => {:type => ::Thrift::Types::BYTE, :name => '_targetNodeId'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class AddAssociation_result
          include ::Thrift::Struct, ::Thrift::Struct_Union

          FIELDS = {

          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class RemoveAssociation_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          _HOMEID = 1
          _NODEID = 2
          _GROUPIDX = 3
          _TARGETNODEID = 4

          FIELDS = {
            _HOMEID => {:type => ::Thrift::Types::I32, :name => '_homeId'},
            _NODEID => {:type => ::Thrift::Types::BYTE, :name => '_nodeId'},
            _GROUPIDX => {:type => ::Thrift::Types::BYTE, :name => '_groupIdx'},
            _TARGETNODEID => {:type => ::Thrift::Types::BYTE, :name => '_targetNodeId'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class RemoveAssociation_result
          include ::Thrift::Struct, ::Thrift::Struct_Union

          FIELDS = {

          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class ResetController_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          _HOMEID = 1

          FIELDS = {
            _HOMEID => {:type => ::Thrift::Types::I32, :name => '_homeId'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class ResetController_result
          include ::Thrift::Struct, ::Thrift::Struct_Union

          FIELDS = {

          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class SoftReset_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          _HOMEID = 1

          FIELDS = {
            _HOMEID => {:type => ::Thrift::Types::I32, :name => '_homeId'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class SoftReset_result
          include ::Thrift::Struct, ::Thrift::Struct_Union

          FIELDS = {

          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class GetNumScenes_args
          include ::Thrift::Struct, ::Thrift::Struct_Union

          FIELDS = {

          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class GetNumScenes_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::BYTE, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class GetAllScenes_args
          include ::Thrift::Struct, ::Thrift::Struct_Union

          FIELDS = {

          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class GetAllScenes_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::BYTE}}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class CreateScene_args
          include ::Thrift::Struct, ::Thrift::Struct_Union

          FIELDS = {

          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class CreateScene_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::BYTE, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class RemoveScene_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          _SCENEID = 1

          FIELDS = {
            _SCENEID => {:type => ::Thrift::Types::BYTE, :name => '_sceneId'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class RemoveScene_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class AddSceneValue_Bool_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          _SCENEID = 1
          _VALUEID = 2
          _VALUE = 3

          FIELDS = {
            _SCENEID => {:type => ::Thrift::Types::BYTE, :name => '_sceneId'},
            _VALUEID => {:type => ::Thrift::Types::I64, :name => '_valueId'},
            _VALUE => {:type => ::Thrift::Types::BOOL, :name => '_value'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class AddSceneValue_Bool_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class AddSceneValue_Uint8_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          _SCENEID = 1
          _VALUEID = 2
          _VALUE = 3

          FIELDS = {
            _SCENEID => {:type => ::Thrift::Types::BYTE, :name => '_sceneId'},
            _VALUEID => {:type => ::Thrift::Types::I64, :name => '_valueId'},
            _VALUE => {:type => ::Thrift::Types::BYTE, :name => '_value'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class AddSceneValue_Uint8_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class AddSceneValue_Float_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          _SCENEID = 1
          _VALUEID = 2
          _VALUE = 3

          FIELDS = {
            _SCENEID => {:type => ::Thrift::Types::BYTE, :name => '_sceneId'},
            _VALUEID => {:type => ::Thrift::Types::I64, :name => '_valueId'},
            _VALUE => {:type => ::Thrift::Types::DOUBLE, :name => '_value'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class AddSceneValue_Float_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class AddSceneValue_Int32_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          _SCENEID = 1
          _VALUEID = 2
          _VALUE = 3

          FIELDS = {
            _SCENEID => {:type => ::Thrift::Types::BYTE, :name => '_sceneId'},
            _VALUEID => {:type => ::Thrift::Types::I64, :name => '_valueId'},
            _VALUE => {:type => ::Thrift::Types::I32, :name => '_value'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class AddSceneValue_Int32_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class AddSceneValue_Int16_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          _SCENEID = 1
          _VALUEID = 2
          _VALUE = 3

          FIELDS = {
            _SCENEID => {:type => ::Thrift::Types::BYTE, :name => '_sceneId'},
            _VALUEID => {:type => ::Thrift::Types::I64, :name => '_valueId'},
            _VALUE => {:type => ::Thrift::Types::I16, :name => '_value'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class AddSceneValue_Int16_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class AddSceneValue_String_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          _SCENEID = 1
          _VALUEID = 2
          _VALUE = 3

          FIELDS = {
            _SCENEID => {:type => ::Thrift::Types::BYTE, :name => '_sceneId'},
            _VALUEID => {:type => ::Thrift::Types::I64, :name => '_valueId'},
            _VALUE => {:type => ::Thrift::Types::STRING, :name => '_value'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class AddSceneValue_String_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class AddSceneValueListSelection_String_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          _SCENEID = 1
          _VALUEID = 2
          _VALUE = 3

          FIELDS = {
            _SCENEID => {:type => ::Thrift::Types::BYTE, :name => '_sceneId'},
            _VALUEID => {:type => ::Thrift::Types::I64, :name => '_valueId'},
            _VALUE => {:type => ::Thrift::Types::STRING, :name => '_value'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class AddSceneValueListSelection_String_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class AddSceneValueListSelection_Int32_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          _SCENEID = 1
          _VALUEID = 2
          _VALUE = 3

          FIELDS = {
            _SCENEID => {:type => ::Thrift::Types::BYTE, :name => '_sceneId'},
            _VALUEID => {:type => ::Thrift::Types::I64, :name => '_valueId'},
            _VALUE => {:type => ::Thrift::Types::I32, :name => '_value'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class AddSceneValueListSelection_Int32_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class RemoveSceneValue_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          _SCENEID = 1
          _VALUEID = 2

          FIELDS = {
            _SCENEID => {:type => ::Thrift::Types::BYTE, :name => '_sceneId'},
            _VALUEID => {:type => ::Thrift::Types::I64, :name => '_valueId'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class RemoveSceneValue_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class SceneGetValues_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          _SCENEID = 1

          FIELDS = {
            _SCENEID => {:type => ::Thrift::Types::BYTE, :name => '_sceneId'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class SceneGetValues_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::I64}}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class SceneGetValueAsBool_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          _SCENEID = 1
          _VALUEID = 2

          FIELDS = {
            _SCENEID => {:type => ::Thrift::Types::BYTE, :name => '_sceneId'},
            _VALUEID => {:type => ::Thrift::Types::I64, :name => '_valueId'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class SceneGetValueAsBool_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => OpenZWave::Bool_Bool}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class SceneGetValueAsByte_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          _SCENEID = 1
          _VALUEID = 2

          FIELDS = {
            _SCENEID => {:type => ::Thrift::Types::BYTE, :name => '_sceneId'},
            _VALUEID => {:type => ::Thrift::Types::I64, :name => '_valueId'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class SceneGetValueAsByte_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => OpenZWave::Bool_UInt8}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class SceneGetValueAsFloat_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          _SCENEID = 1
          _VALUEID = 2

          FIELDS = {
            _SCENEID => {:type => ::Thrift::Types::BYTE, :name => '_sceneId'},
            _VALUEID => {:type => ::Thrift::Types::I64, :name => '_valueId'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class SceneGetValueAsFloat_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => OpenZWave::Bool_Float}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class SceneGetValueAsInt_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          _SCENEID = 1
          _VALUEID = 2

          FIELDS = {
            _SCENEID => {:type => ::Thrift::Types::BYTE, :name => '_sceneId'},
            _VALUEID => {:type => ::Thrift::Types::I64, :name => '_valueId'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class SceneGetValueAsInt_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => OpenZWave::Bool_Int}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class SceneGetValueAsShort_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          _SCENEID = 1
          _VALUEID = 2

          FIELDS = {
            _SCENEID => {:type => ::Thrift::Types::BYTE, :name => '_sceneId'},
            _VALUEID => {:type => ::Thrift::Types::I64, :name => '_valueId'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class SceneGetValueAsShort_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => OpenZWave::Bool_Int16}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class SceneGetValueAsString_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          _SCENEID = 1
          _VALUEID = 2

          FIELDS = {
            _SCENEID => {:type => ::Thrift::Types::BYTE, :name => '_sceneId'},
            _VALUEID => {:type => ::Thrift::Types::I64, :name => '_valueId'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class SceneGetValueAsString_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => OpenZWave::Bool_String}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class SceneGetValueListSelection_String_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          _SCENEID = 1
          _VALUEID = 2

          FIELDS = {
            _SCENEID => {:type => ::Thrift::Types::BYTE, :name => '_sceneId'},
            _VALUEID => {:type => ::Thrift::Types::I64, :name => '_valueId'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class SceneGetValueListSelection_String_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => OpenZWave::Bool_String}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class SceneGetValueListSelection_Int32_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          _SCENEID = 1
          _VALUEID = 2

          FIELDS = {
            _SCENEID => {:type => ::Thrift::Types::BYTE, :name => '_sceneId'},
            _VALUEID => {:type => ::Thrift::Types::I64, :name => '_valueId'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class SceneGetValueListSelection_Int32_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => OpenZWave::Bool_Int}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class SetSceneValue_Bool_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          _SCENEID = 1
          _VALUEID = 2
          _VALUE = 3

          FIELDS = {
            _SCENEID => {:type => ::Thrift::Types::BYTE, :name => '_sceneId'},
            _VALUEID => {:type => ::Thrift::Types::I64, :name => '_valueId'},
            _VALUE => {:type => ::Thrift::Types::BOOL, :name => '_value'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class SetSceneValue_Bool_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class SetSceneValue_Uint8_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          _SCENEID = 1
          _VALUEID = 2
          _VALUE = 3

          FIELDS = {
            _SCENEID => {:type => ::Thrift::Types::BYTE, :name => '_sceneId'},
            _VALUEID => {:type => ::Thrift::Types::I64, :name => '_valueId'},
            _VALUE => {:type => ::Thrift::Types::BYTE, :name => '_value'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class SetSceneValue_Uint8_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class SetSceneValue_Float_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          _SCENEID = 1
          _VALUEID = 2
          _VALUE = 3

          FIELDS = {
            _SCENEID => {:type => ::Thrift::Types::BYTE, :name => '_sceneId'},
            _VALUEID => {:type => ::Thrift::Types::I64, :name => '_valueId'},
            _VALUE => {:type => ::Thrift::Types::DOUBLE, :name => '_value'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class SetSceneValue_Float_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class SetSceneValue_Int32_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          _SCENEID = 1
          _VALUEID = 2
          _VALUE = 3

          FIELDS = {
            _SCENEID => {:type => ::Thrift::Types::BYTE, :name => '_sceneId'},
            _VALUEID => {:type => ::Thrift::Types::I64, :name => '_valueId'},
            _VALUE => {:type => ::Thrift::Types::I32, :name => '_value'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class SetSceneValue_Int32_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class SetSceneValue_Int16_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          _SCENEID = 1
          _VALUEID = 2
          _VALUE = 3

          FIELDS = {
            _SCENEID => {:type => ::Thrift::Types::BYTE, :name => '_sceneId'},
            _VALUEID => {:type => ::Thrift::Types::I64, :name => '_valueId'},
            _VALUE => {:type => ::Thrift::Types::I16, :name => '_value'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class SetSceneValue_Int16_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class SetSceneValue_String_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          _SCENEID = 1
          _VALUEID = 2
          _VALUE = 3

          FIELDS = {
            _SCENEID => {:type => ::Thrift::Types::BYTE, :name => '_sceneId'},
            _VALUEID => {:type => ::Thrift::Types::I64, :name => '_valueId'},
            _VALUE => {:type => ::Thrift::Types::STRING, :name => '_value'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class SetSceneValue_String_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class SetSceneValueListSelection_String_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          _SCENEID = 1
          _VALUEID = 2
          _VALUE = 3

          FIELDS = {
            _SCENEID => {:type => ::Thrift::Types::BYTE, :name => '_sceneId'},
            _VALUEID => {:type => ::Thrift::Types::I64, :name => '_valueId'},
            _VALUE => {:type => ::Thrift::Types::STRING, :name => '_value'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class SetSceneValueListSelection_String_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class SetSceneValueListSelection_Int32_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          _SCENEID = 1
          _VALUEID = 2
          _VALUE = 3

          FIELDS = {
            _SCENEID => {:type => ::Thrift::Types::BYTE, :name => '_sceneId'},
            _VALUEID => {:type => ::Thrift::Types::I64, :name => '_valueId'},
            _VALUE => {:type => ::Thrift::Types::I32, :name => '_value'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class SetSceneValueListSelection_Int32_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class GetSceneLabel_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          _SCENEID = 1

          FIELDS = {
            _SCENEID => {:type => ::Thrift::Types::BYTE, :name => '_sceneId'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class GetSceneLabel_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class SetSceneLabel_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          _SCENEID = 1
          _VALUE = 2

          FIELDS = {
            _SCENEID => {:type => ::Thrift::Types::BYTE, :name => '_sceneId'},
            _VALUE => {:type => ::Thrift::Types::STRING, :name => '_value'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class SetSceneLabel_result
          include ::Thrift::Struct, ::Thrift::Struct_Union

          FIELDS = {

          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class SceneExists_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          _SCENEID = 1

          FIELDS = {
            _SCENEID => {:type => ::Thrift::Types::BYTE, :name => '_sceneId'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class SceneExists_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class ActivateScene_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          _SCENEID = 1

          FIELDS = {
            _SCENEID => {:type => ::Thrift::Types::BYTE, :name => '_sceneId'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class ActivateScene_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

      end

    end
