/**
 * Autogenerated by Thrift Compiler (0.9.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace OpenZWave
{

  /// <summary>
  /// Delete a handheld button id.
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class RemoteValueID : TBase
  {
    private int __homeId;
    private byte __nodeId;
    private RemoteValueGenre __genre;
    private byte __commandClassId;
    private byte __instance;
    private byte __valueIndex;
    private RemoteValueType __type;

    public int _homeId
    {
      get
      {
        return __homeId;
      }
      set
      {
        __isset._homeId = true;
        this.__homeId = value;
      }
    }

    public byte _nodeId
    {
      get
      {
        return __nodeId;
      }
      set
      {
        __isset._nodeId = true;
        this.__nodeId = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="RemoteValueGenre"/>
    /// </summary>
    public RemoteValueGenre _genre
    {
      get
      {
        return __genre;
      }
      set
      {
        __isset._genre = true;
        this.__genre = value;
      }
    }

    public byte _commandClassId
    {
      get
      {
        return __commandClassId;
      }
      set
      {
        __isset._commandClassId = true;
        this.__commandClassId = value;
      }
    }

    public byte _instance
    {
      get
      {
        return __instance;
      }
      set
      {
        __isset._instance = true;
        this.__instance = value;
      }
    }

    public byte _valueIndex
    {
      get
      {
        return __valueIndex;
      }
      set
      {
        __isset._valueIndex = true;
        this.__valueIndex = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="RemoteValueType"/>
    /// </summary>
    public RemoteValueType _type
    {
      get
      {
        return __type;
      }
      set
      {
        __isset._type = true;
        this.__type = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool _homeId;
      public bool _nodeId;
      public bool _genre;
      public bool _commandClassId;
      public bool _instance;
      public bool _valueIndex;
      public bool _type;
    }

    public RemoteValueID() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              _homeId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Byte) {
              _nodeId = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              _genre = (RemoteValueGenre)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Byte) {
              _commandClassId = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.Byte) {
              _instance = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.Byte) {
              _valueIndex = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I32) {
              _type = (RemoteValueType)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("RemoteValueID");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset._homeId) {
        field.Name = "_homeId";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(_homeId);
        oprot.WriteFieldEnd();
      }
      if (__isset._nodeId) {
        field.Name = "_nodeId";
        field.Type = TType.Byte;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(_nodeId);
        oprot.WriteFieldEnd();
      }
      if (__isset._genre) {
        field.Name = "_genre";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)_genre);
        oprot.WriteFieldEnd();
      }
      if (__isset._commandClassId) {
        field.Name = "_commandClassId";
        field.Type = TType.Byte;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(_commandClassId);
        oprot.WriteFieldEnd();
      }
      if (__isset._instance) {
        field.Name = "_instance";
        field.Type = TType.Byte;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(_instance);
        oprot.WriteFieldEnd();
      }
      if (__isset._valueIndex) {
        field.Name = "_valueIndex";
        field.Type = TType.Byte;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(_valueIndex);
        oprot.WriteFieldEnd();
      }
      if (__isset._type) {
        field.Name = "_type";
        field.Type = TType.I32;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)_type);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("RemoteValueID(");
      sb.Append("_homeId: ");
      sb.Append(_homeId);
      sb.Append(",_nodeId: ");
      sb.Append(_nodeId);
      sb.Append(",_genre: ");
      sb.Append(_genre);
      sb.Append(",_commandClassId: ");
      sb.Append(_commandClassId);
      sb.Append(",_instance: ");
      sb.Append(_instance);
      sb.Append(",_valueIndex: ");
      sb.Append(_valueIndex);
      sb.Append(",_type: ");
      sb.Append(_type);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
