/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace OpenZWave
{

  [Serializable]
  public partial class Bool_GetNodeClassInformation : TBase
  {
    private bool _retval;
    private string __className;
    private byte __classVersion;

    public bool Retval
    {
      get
      {
        return _retval;
      }
      set
      {
        __isset.retval = true;
        this._retval = value;
      }
    }

    public string _className
    {
      get
      {
        return __className;
      }
      set
      {
        __isset._className = true;
        this.__className = value;
      }
    }

    public byte _classVersion
    {
      get
      {
        return __classVersion;
      }
      set
      {
        __isset._classVersion = true;
        this.__classVersion = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool retval;
      public bool _className;
      public bool _classVersion;
    }

    public Bool_GetNodeClassInformation() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Bool) {
              Retval = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              _className = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Byte) {
              _classVersion = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("Bool_GetNodeClassInformation");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.retval) {
        field.Name = "retval";
        field.Type = TType.Bool;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(Retval);
        oprot.WriteFieldEnd();
      }
      if (_className != null && __isset._className) {
        field.Name = "_className";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(_className);
        oprot.WriteFieldEnd();
      }
      if (__isset._classVersion) {
        field.Name = "_classVersion";
        field.Type = TType.Byte;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(_classVersion);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("Bool_GetNodeClassInformation(");
      sb.Append("Retval: ");
      sb.Append(Retval);
      sb.Append(",_className: ");
      sb.Append(_className);
      sb.Append(",_classVersion: ");
      sb.Append(_classVersion);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
