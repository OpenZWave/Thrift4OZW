/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace OpenZWave
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class NodeData : TBase
  {
    private int _m_sentCnt;
    private int _m_sentFailed;
    private int _m_retries;
    private int _m_receivedCnt;
    private int _m_receivedDups;
    private int _m_rtt;
    private string _m_sentTS;
    private string _m_receivedTS;
    private int _m_lastRTT;
    private int _m_averageRTT;
    private sbyte _m_quality;
    private List<sbyte> _m_lastReceivedMessage;
    private List<CommandClassData> _m_ccData;

    public int M_sentCnt
    {
      get
      {
        return _m_sentCnt;
      }
      set
      {
        __isset.m_sentCnt = true;
        this._m_sentCnt = value;
      }
    }

    public int M_sentFailed
    {
      get
      {
        return _m_sentFailed;
      }
      set
      {
        __isset.m_sentFailed = true;
        this._m_sentFailed = value;
      }
    }

    public int M_retries
    {
      get
      {
        return _m_retries;
      }
      set
      {
        __isset.m_retries = true;
        this._m_retries = value;
      }
    }

    public int M_receivedCnt
    {
      get
      {
        return _m_receivedCnt;
      }
      set
      {
        __isset.m_receivedCnt = true;
        this._m_receivedCnt = value;
      }
    }

    public int M_receivedDups
    {
      get
      {
        return _m_receivedDups;
      }
      set
      {
        __isset.m_receivedDups = true;
        this._m_receivedDups = value;
      }
    }

    public int M_rtt
    {
      get
      {
        return _m_rtt;
      }
      set
      {
        __isset.m_rtt = true;
        this._m_rtt = value;
      }
    }

    public string M_sentTS
    {
      get
      {
        return _m_sentTS;
      }
      set
      {
        __isset.m_sentTS = true;
        this._m_sentTS = value;
      }
    }

    public string M_receivedTS
    {
      get
      {
        return _m_receivedTS;
      }
      set
      {
        __isset.m_receivedTS = true;
        this._m_receivedTS = value;
      }
    }

    public int M_lastRTT
    {
      get
      {
        return _m_lastRTT;
      }
      set
      {
        __isset.m_lastRTT = true;
        this._m_lastRTT = value;
      }
    }

    public int M_averageRTT
    {
      get
      {
        return _m_averageRTT;
      }
      set
      {
        __isset.m_averageRTT = true;
        this._m_averageRTT = value;
      }
    }

    public sbyte M_quality
    {
      get
      {
        return _m_quality;
      }
      set
      {
        __isset.m_quality = true;
        this._m_quality = value;
      }
    }

    public List<sbyte> M_lastReceivedMessage
    {
      get
      {
        return _m_lastReceivedMessage;
      }
      set
      {
        __isset.m_lastReceivedMessage = true;
        this._m_lastReceivedMessage = value;
      }
    }

    public List<CommandClassData> M_ccData
    {
      get
      {
        return _m_ccData;
      }
      set
      {
        __isset.m_ccData = true;
        this._m_ccData = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool m_sentCnt;
      public bool m_sentFailed;
      public bool m_retries;
      public bool m_receivedCnt;
      public bool m_receivedDups;
      public bool m_rtt;
      public bool m_sentTS;
      public bool m_receivedTS;
      public bool m_lastRTT;
      public bool m_averageRTT;
      public bool m_quality;
      public bool m_lastReceivedMessage;
      public bool m_ccData;
    }

    public NodeData() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              M_sentCnt = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              M_sentFailed = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              M_retries = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              M_receivedCnt = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              M_receivedDups = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I32) {
              M_rtt = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.String) {
              M_sentTS = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.String) {
              M_receivedTS = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.I32) {
              M_lastRTT = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.I32) {
              M_averageRTT = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.Byte) {
              M_quality = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.List) {
              {
                M_lastReceivedMessage = new List<sbyte>();
                TList _list0 = iprot.ReadListBegin();
                for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                {
                  sbyte _elem2 = 0;
                  _elem2 = iprot.ReadByte();
                  M_lastReceivedMessage.Add(_elem2);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 13:
            if (field.Type == TType.List) {
              {
                M_ccData = new List<CommandClassData>();
                TList _list3 = iprot.ReadListBegin();
                for( int _i4 = 0; _i4 < _list3.Count; ++_i4)
                {
                  CommandClassData _elem5 = new CommandClassData();
                  _elem5 = new CommandClassData();
                  _elem5.Read(iprot);
                  M_ccData.Add(_elem5);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("NodeData");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.m_sentCnt) {
        field.Name = "m_sentCnt";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(M_sentCnt);
        oprot.WriteFieldEnd();
      }
      if (__isset.m_sentFailed) {
        field.Name = "m_sentFailed";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(M_sentFailed);
        oprot.WriteFieldEnd();
      }
      if (__isset.m_retries) {
        field.Name = "m_retries";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(M_retries);
        oprot.WriteFieldEnd();
      }
      if (__isset.m_receivedCnt) {
        field.Name = "m_receivedCnt";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(M_receivedCnt);
        oprot.WriteFieldEnd();
      }
      if (__isset.m_receivedDups) {
        field.Name = "m_receivedDups";
        field.Type = TType.I32;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(M_receivedDups);
        oprot.WriteFieldEnd();
      }
      if (__isset.m_rtt) {
        field.Name = "m_rtt";
        field.Type = TType.I32;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(M_rtt);
        oprot.WriteFieldEnd();
      }
      if (M_sentTS != null && __isset.m_sentTS) {
        field.Name = "m_sentTS";
        field.Type = TType.String;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(M_sentTS);
        oprot.WriteFieldEnd();
      }
      if (M_receivedTS != null && __isset.m_receivedTS) {
        field.Name = "m_receivedTS";
        field.Type = TType.String;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(M_receivedTS);
        oprot.WriteFieldEnd();
      }
      if (__isset.m_lastRTT) {
        field.Name = "m_lastRTT";
        field.Type = TType.I32;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(M_lastRTT);
        oprot.WriteFieldEnd();
      }
      if (__isset.m_averageRTT) {
        field.Name = "m_averageRTT";
        field.Type = TType.I32;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(M_averageRTT);
        oprot.WriteFieldEnd();
      }
      if (__isset.m_quality) {
        field.Name = "m_quality";
        field.Type = TType.Byte;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(M_quality);
        oprot.WriteFieldEnd();
      }
      if (M_lastReceivedMessage != null && __isset.m_lastReceivedMessage) {
        field.Name = "m_lastReceivedMessage";
        field.Type = TType.List;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Byte, M_lastReceivedMessage.Count));
          foreach (sbyte _iter6 in M_lastReceivedMessage)
          {
            oprot.WriteByte(_iter6);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (M_ccData != null && __isset.m_ccData) {
        field.Name = "m_ccData";
        field.Type = TType.List;
        field.ID = 13;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, M_ccData.Count));
          foreach (CommandClassData _iter7 in M_ccData)
          {
            _iter7.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("NodeData(");
      sb.Append("M_sentCnt: ");
      sb.Append(M_sentCnt);
      sb.Append(",M_sentFailed: ");
      sb.Append(M_sentFailed);
      sb.Append(",M_retries: ");
      sb.Append(M_retries);
      sb.Append(",M_receivedCnt: ");
      sb.Append(M_receivedCnt);
      sb.Append(",M_receivedDups: ");
      sb.Append(M_receivedDups);
      sb.Append(",M_rtt: ");
      sb.Append(M_rtt);
      sb.Append(",M_sentTS: ");
      sb.Append(M_sentTS);
      sb.Append(",M_receivedTS: ");
      sb.Append(M_receivedTS);
      sb.Append(",M_lastRTT: ");
      sb.Append(M_lastRTT);
      sb.Append(",M_averageRTT: ");
      sb.Append(M_averageRTT);
      sb.Append(",M_quality: ");
      sb.Append(M_quality);
      sb.Append(",M_lastReceivedMessage: ");
      sb.Append(M_lastReceivedMessage);
      sb.Append(",M_ccData: ");
      sb.Append(M_ccData);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
