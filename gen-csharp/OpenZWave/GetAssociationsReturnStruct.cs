/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace OpenZWave
{

  [Serializable]
  public partial class GetAssociationsReturnStruct : TBase
  {
    private int _retval;
    private List<byte> _o_associations;

    public int Retval
    {
      get
      {
        return _retval;
      }
      set
      {
        __isset.retval = true;
        this._retval = value;
      }
    }

    public List<byte> O_associations
    {
      get
      {
        return _o_associations;
      }
      set
      {
        __isset.o_associations = true;
        this._o_associations = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool retval;
      public bool o_associations;
    }

    public GetAssociationsReturnStruct() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              Retval = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.List) {
              {
                O_associations = new List<byte>();
                TList _list8 = iprot.ReadListBegin();
                for( int _i9 = 0; _i9 < _list8.Count; ++_i9)
                {
                  byte _elem10 = 0;
                  _elem10 = iprot.ReadByte();
                  O_associations.Add(_elem10);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("GetAssociationsReturnStruct");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.retval) {
        field.Name = "retval";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Retval);
        oprot.WriteFieldEnd();
      }
      if (O_associations != null && __isset.o_associations) {
        field.Name = "o_associations";
        field.Type = TType.List;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Byte, O_associations.Count));
          foreach (byte _iter11 in O_associations)
          {
            oprot.WriteByte(_iter11);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("GetAssociationsReturnStruct(");
      sb.Append("Retval: ");
      sb.Append(Retval);
      sb.Append(",O_associations: ");
      sb.Append(O_associations);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
