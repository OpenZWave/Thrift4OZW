/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace OpenZWave
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class DriverData : TBase
  {
    private int _s_SOFCnt;
    private int _s_ACKWaiting;
    private int _s_readAborts;
    private int _s_badChecksum;
    private int _s_readCnt;
    private int _s_writeCnt;
    private int _s_CANCnt;
    private int _s_NAKCnt;
    private int _s_ACKCnt;
    private int _s_OOFCnt;
    private int _s_dropped;
    private int _s_retries;
    private int _s_controllerReadCnt;
    private int _s_controllerWriteCnt;

    public int S_SOFCnt
    {
      get
      {
        return _s_SOFCnt;
      }
      set
      {
        __isset.s_SOFCnt = true;
        this._s_SOFCnt = value;
      }
    }

    public int S_ACKWaiting
    {
      get
      {
        return _s_ACKWaiting;
      }
      set
      {
        __isset.s_ACKWaiting = true;
        this._s_ACKWaiting = value;
      }
    }

    public int S_readAborts
    {
      get
      {
        return _s_readAborts;
      }
      set
      {
        __isset.s_readAborts = true;
        this._s_readAborts = value;
      }
    }

    public int S_badChecksum
    {
      get
      {
        return _s_badChecksum;
      }
      set
      {
        __isset.s_badChecksum = true;
        this._s_badChecksum = value;
      }
    }

    public int S_readCnt
    {
      get
      {
        return _s_readCnt;
      }
      set
      {
        __isset.s_readCnt = true;
        this._s_readCnt = value;
      }
    }

    public int S_writeCnt
    {
      get
      {
        return _s_writeCnt;
      }
      set
      {
        __isset.s_writeCnt = true;
        this._s_writeCnt = value;
      }
    }

    public int S_CANCnt
    {
      get
      {
        return _s_CANCnt;
      }
      set
      {
        __isset.s_CANCnt = true;
        this._s_CANCnt = value;
      }
    }

    public int S_NAKCnt
    {
      get
      {
        return _s_NAKCnt;
      }
      set
      {
        __isset.s_NAKCnt = true;
        this._s_NAKCnt = value;
      }
    }

    public int S_ACKCnt
    {
      get
      {
        return _s_ACKCnt;
      }
      set
      {
        __isset.s_ACKCnt = true;
        this._s_ACKCnt = value;
      }
    }

    public int S_OOFCnt
    {
      get
      {
        return _s_OOFCnt;
      }
      set
      {
        __isset.s_OOFCnt = true;
        this._s_OOFCnt = value;
      }
    }

    public int S_dropped
    {
      get
      {
        return _s_dropped;
      }
      set
      {
        __isset.s_dropped = true;
        this._s_dropped = value;
      }
    }

    public int S_retries
    {
      get
      {
        return _s_retries;
      }
      set
      {
        __isset.s_retries = true;
        this._s_retries = value;
      }
    }

    public int S_controllerReadCnt
    {
      get
      {
        return _s_controllerReadCnt;
      }
      set
      {
        __isset.s_controllerReadCnt = true;
        this._s_controllerReadCnt = value;
      }
    }

    public int S_controllerWriteCnt
    {
      get
      {
        return _s_controllerWriteCnt;
      }
      set
      {
        __isset.s_controllerWriteCnt = true;
        this._s_controllerWriteCnt = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool s_SOFCnt;
      public bool s_ACKWaiting;
      public bool s_readAborts;
      public bool s_badChecksum;
      public bool s_readCnt;
      public bool s_writeCnt;
      public bool s_CANCnt;
      public bool s_NAKCnt;
      public bool s_ACKCnt;
      public bool s_OOFCnt;
      public bool s_dropped;
      public bool s_retries;
      public bool s_controllerReadCnt;
      public bool s_controllerWriteCnt;
    }

    public DriverData() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              S_SOFCnt = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              S_ACKWaiting = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              S_readAborts = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              S_badChecksum = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              S_readCnt = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I32) {
              S_writeCnt = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I32) {
              S_CANCnt = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.I32) {
              S_NAKCnt = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.I32) {
              S_ACKCnt = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.I32) {
              S_OOFCnt = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.I32) {
              S_dropped = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.I32) {
              S_retries = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 13:
            if (field.Type == TType.I32) {
              S_controllerReadCnt = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 14:
            if (field.Type == TType.I32) {
              S_controllerWriteCnt = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("DriverData");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.s_SOFCnt) {
        field.Name = "s_SOFCnt";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(S_SOFCnt);
        oprot.WriteFieldEnd();
      }
      if (__isset.s_ACKWaiting) {
        field.Name = "s_ACKWaiting";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(S_ACKWaiting);
        oprot.WriteFieldEnd();
      }
      if (__isset.s_readAborts) {
        field.Name = "s_readAborts";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(S_readAborts);
        oprot.WriteFieldEnd();
      }
      if (__isset.s_badChecksum) {
        field.Name = "s_badChecksum";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(S_badChecksum);
        oprot.WriteFieldEnd();
      }
      if (__isset.s_readCnt) {
        field.Name = "s_readCnt";
        field.Type = TType.I32;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(S_readCnt);
        oprot.WriteFieldEnd();
      }
      if (__isset.s_writeCnt) {
        field.Name = "s_writeCnt";
        field.Type = TType.I32;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(S_writeCnt);
        oprot.WriteFieldEnd();
      }
      if (__isset.s_CANCnt) {
        field.Name = "s_CANCnt";
        field.Type = TType.I32;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(S_CANCnt);
        oprot.WriteFieldEnd();
      }
      if (__isset.s_NAKCnt) {
        field.Name = "s_NAKCnt";
        field.Type = TType.I32;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(S_NAKCnt);
        oprot.WriteFieldEnd();
      }
      if (__isset.s_ACKCnt) {
        field.Name = "s_ACKCnt";
        field.Type = TType.I32;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(S_ACKCnt);
        oprot.WriteFieldEnd();
      }
      if (__isset.s_OOFCnt) {
        field.Name = "s_OOFCnt";
        field.Type = TType.I32;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(S_OOFCnt);
        oprot.WriteFieldEnd();
      }
      if (__isset.s_dropped) {
        field.Name = "s_dropped";
        field.Type = TType.I32;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(S_dropped);
        oprot.WriteFieldEnd();
      }
      if (__isset.s_retries) {
        field.Name = "s_retries";
        field.Type = TType.I32;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(S_retries);
        oprot.WriteFieldEnd();
      }
      if (__isset.s_controllerReadCnt) {
        field.Name = "s_controllerReadCnt";
        field.Type = TType.I32;
        field.ID = 13;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(S_controllerReadCnt);
        oprot.WriteFieldEnd();
      }
      if (__isset.s_controllerWriteCnt) {
        field.Name = "s_controllerWriteCnt";
        field.Type = TType.I32;
        field.ID = 14;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(S_controllerWriteCnt);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("DriverData(");
      sb.Append("S_SOFCnt: ");
      sb.Append(S_SOFCnt);
      sb.Append(",S_ACKWaiting: ");
      sb.Append(S_ACKWaiting);
      sb.Append(",S_readAborts: ");
      sb.Append(S_readAborts);
      sb.Append(",S_badChecksum: ");
      sb.Append(S_badChecksum);
      sb.Append(",S_readCnt: ");
      sb.Append(S_readCnt);
      sb.Append(",S_writeCnt: ");
      sb.Append(S_writeCnt);
      sb.Append(",S_CANCnt: ");
      sb.Append(S_CANCnt);
      sb.Append(",S_NAKCnt: ");
      sb.Append(S_NAKCnt);
      sb.Append(",S_ACKCnt: ");
      sb.Append(S_ACKCnt);
      sb.Append(",S_OOFCnt: ");
      sb.Append(S_OOFCnt);
      sb.Append(",S_dropped: ");
      sb.Append(S_dropped);
      sb.Append(",S_retries: ");
      sb.Append(S_retries);
      sb.Append(",S_controllerReadCnt: ");
      sb.Append(S_controllerReadCnt);
      sb.Append(",S_controllerWriteCnt: ");
      sb.Append(S_controllerWriteCnt);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
