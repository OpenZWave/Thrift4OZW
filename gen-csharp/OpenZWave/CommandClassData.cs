/**
 * Autogenerated by Thrift Compiler (0.9.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace OpenZWave
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class CommandClassData : TBase
  {
    private byte _m_commandClassId;
    private int _m_sentCnt;
    private int _m_receivedCnt;

    public byte M_commandClassId
    {
      get
      {
        return _m_commandClassId;
      }
      set
      {
        __isset.m_commandClassId = true;
        this._m_commandClassId = value;
      }
    }

    public int M_sentCnt
    {
      get
      {
        return _m_sentCnt;
      }
      set
      {
        __isset.m_sentCnt = true;
        this._m_sentCnt = value;
      }
    }

    public int M_receivedCnt
    {
      get
      {
        return _m_receivedCnt;
      }
      set
      {
        __isset.m_receivedCnt = true;
        this._m_receivedCnt = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool m_commandClassId;
      public bool m_sentCnt;
      public bool m_receivedCnt;
    }

    public CommandClassData() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Byte) {
              M_commandClassId = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              M_sentCnt = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              M_receivedCnt = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("CommandClassData");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.m_commandClassId) {
        field.Name = "m_commandClassId";
        field.Type = TType.Byte;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(M_commandClassId);
        oprot.WriteFieldEnd();
      }
      if (__isset.m_sentCnt) {
        field.Name = "m_sentCnt";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(M_sentCnt);
        oprot.WriteFieldEnd();
      }
      if (__isset.m_receivedCnt) {
        field.Name = "m_receivedCnt";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(M_receivedCnt);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("CommandClassData(");
      sb.Append("M_commandClassId: ");
      sb.Append(M_commandClassId);
      sb.Append(",M_sentCnt: ");
      sb.Append(M_sentCnt);
      sb.Append(",M_receivedCnt: ");
      sb.Append(M_receivedCnt);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
