/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace OpenZWave
{
  public class RemoteManager {
    public interface Iface {
      void WriteConfig(int _homeId);
      byte GetControllerNodeId(int _homeId);
      byte GetSUCNodeId(int _homeId);
      bool IsPrimaryController(int _homeId);
      bool IsStaticUpdateController(int _homeId);
      bool IsBridgeController(int _homeId);
      string GetLibraryVersion(int _homeId);
      string GetLibraryTypeName(int _homeId);
      int GetSendQueueCount(int _homeId);
      void LogDriverStatistics(int _homeId);
      int GetControllerInterfaceType(int _homeId);
      string GetControllerPath(int _homeId);
      int GetPollInterval();
      void SetPollInterval(int _milliseconds, bool _bIntervalBetweenPolls);
      bool EnablePoll(RemoteValueID _valueId, byte _intensity);
      bool DisablePoll(RemoteValueID _valueId);
      bool isPolled(RemoteValueID _valueId);
      void SetPollIntensity(RemoteValueID _valueId, byte _intensity);
      bool RefreshNodeInfo(int _homeId, byte _nodeId);
      bool RequestNodeState(int _homeId, byte _nodeId);
      bool RequestNodeDynamic(int _homeId, byte _nodeId);
      bool IsNodeListeningDevice(int _homeId, byte _nodeId);
      bool IsNodeFrequentListeningDevice(int _homeId, byte _nodeId);
      bool IsNodeBeamingDevice(int _homeId, byte _nodeId);
      bool IsNodeRoutingDevice(int _homeId, byte _nodeId);
      bool IsNodeSecurityDevice(int _homeId, byte _nodeId);
      int GetNodeMaxBaudRate(int _homeId, byte _nodeId);
      byte GetNodeVersion(int _homeId, byte _nodeId);
      byte GetNodeSecurity(int _homeId, byte _nodeId);
      byte GetNodeBasic(int _homeId, byte _nodeId);
      byte GetNodeGeneric(int _homeId, byte _nodeId);
      byte GetNodeSpecific(int _homeId, byte _nodeId);
      string GetNodeType(int _homeId, byte _nodeId);
      UInt32_ListByte GetNodeNeighbors(int _homeId, byte _nodeId);
      string GetNodeManufacturerName(int _homeId, byte _nodeId);
      string GetNodeProductName(int _homeId, byte _nodeId);
      string GetNodeName(int _homeId, byte _nodeId);
      string GetNodeLocation(int _homeId, byte _nodeId);
      string GetNodeManufacturerId(int _homeId, byte _nodeId);
      string GetNodeProductType(int _homeId, byte _nodeId);
      string GetNodeProductId(int _homeId, byte _nodeId);
      void SetNodeManufacturerName(int _homeId, byte _nodeId, string _manufacturerName);
      void SetNodeProductName(int _homeId, byte _nodeId, string _productName);
      void SetNodeName(int _homeId, byte _nodeId, string _nodeName);
      void SetNodeLocation(int _homeId, byte _nodeId, string _location);
      void SetNodeOn(int _homeId, byte _nodeId);
      void SetNodeOff(int _homeId, byte _nodeId);
      void SetNodeLevel(int _homeId, byte _nodeId, byte _level);
      bool IsNodeInfoReceived(int _homeId, byte _nodeId);
      Bool_GetNodeClassInformation GetNodeClassInformation(int _homeId, byte _nodeId, byte _commandClassId);
      bool IsNodeAwake(int _homeId, byte _nodeId);
      bool IsNodeFailed(int _homeId, byte _nodeId);
      string GetNodeQueryStage(int _homeId, byte _nodeId);
      string GetValueLabel(RemoteValueID _id);
      void SetValueLabel(RemoteValueID _id, string _value);
      string GetValueUnits(RemoteValueID _id);
      void SetValueUnits(RemoteValueID _id, string _value);
      string GetValueHelp(RemoteValueID _id);
      void SetValueHelp(RemoteValueID _id, string _value);
      int GetValueMin(RemoteValueID _id);
      int GetValueMax(RemoteValueID _id);
      bool IsValueReadOnly(RemoteValueID _id);
      bool IsValueWriteOnly(RemoteValueID _id);
      bool IsValueSet(RemoteValueID _id);
      bool IsValuePolled(RemoteValueID _id);
      Bool_Bool GetValueAsBool(RemoteValueID _id);
      Bool_UInt8 GetValueAsByte(RemoteValueID _id);
      Bool_Float GetValueAsFloat(RemoteValueID _id);
      Bool_Int GetValueAsInt(RemoteValueID _id);
      Bool_Int16 GetValueAsShort(RemoteValueID _id);
      Bool_String GetValueAsString(RemoteValueID _id);
      Bool_String GetValueListSelection_String(RemoteValueID _id);
      Bool_Int GetValueListSelection_Int32(RemoteValueID _id);
      Bool_ListString GetValueListItems(RemoteValueID _id);
      Bool_UInt8 GetValueFloatPrecision(RemoteValueID _id);
      bool SetValue_Bool(RemoteValueID _id, bool _value);
      bool SetValue_UInt8(RemoteValueID _id, byte _value);
      bool SetValue_UInt8_UInt8(RemoteValueID _id, List<byte> _value, byte _length);
      bool SetValue_Float(RemoteValueID _id, double _value);
      bool SetValue_int32(RemoteValueID _id, int _value);
      bool SetValue_int16(RemoteValueID _id, short _value);
      bool SetValue_String(RemoteValueID _id, string _value);
      bool SetValueListSelection(RemoteValueID _id, string _selectedItem);
      bool RefreshValue(RemoteValueID _id);
      void SetChangeVerified(RemoteValueID _id, bool _verify);
      bool PressButton(RemoteValueID _id);
      bool ReleaseButton(RemoteValueID _id);
      byte GetNumSwitchPoints(RemoteValueID _id);
      bool SetSwitchPoint(RemoteValueID _id, byte _hours, byte _minutes, byte _setback);
      bool RemoveSwitchPoint(RemoteValueID _id, byte _hours, byte _minutes);
      void ClearSwitchPoints(RemoteValueID _id);
      GetSwitchPointReturnStruct GetSwitchPoint(RemoteValueID _id, byte _idx);
      void SwitchAllOn(int _homeId);
      void SwitchAllOff(int _homeId);
      bool SetConfigParam(int _homeId, byte _nodeId, byte _param, int _value, byte _size);
      void RequestConfigParam(int _homeId, byte _nodeId, byte _param);
      void RequestAllConfigParams(int _homeId, byte _nodeId);
      byte GetNumGroups(int _homeId, byte _nodeId);
      GetAssociationsReturnStruct GetAssociations(int _homeId, byte _nodeId, byte _groupIdx);
      byte GetMaxAssociations(int _homeId, byte _nodeId, byte _groupIdx);
      string GetGroupLabel(int _homeId, byte _nodeId, byte _groupIdx);
      void AddAssociation(int _homeId, byte _nodeId, byte _groupIdx, byte _targetNodeId);
      void RemoveAssociation(int _homeId, byte _nodeId, byte _groupIdx, byte _targetNodeId);
      void ResetController(int _homeId);
      void SoftReset(int _homeId);
      bool BeginControllerCommand(int _homeId, DriverControllerCommand _command, bool _highPower, byte _nodeId, byte _arg);
      bool CancelControllerCommand(int _homeId);
      void TestNetworkNode(int _homeId, byte _nodeId, int _count);
      void TestNetwork(int _homeId, int _count);
      void HealNetworkNode(int _homeId, byte _nodeId, bool _doRR);
      void HealNetwork(int _homeId, bool _doRR);
      byte GetNumScenes();
      GetAllScenesReturnStruct GetAllScenes();
      void RemoveAllScenes(int _homeId);
      byte CreateScene();
      bool RemoveScene(byte _sceneId);
      bool AddSceneValue_Bool(byte _sceneId, RemoteValueID _valueId, bool _value);
      bool AddSceneValue_Uint8(byte _sceneId, RemoteValueID _valueId, byte _value);
      bool AddSceneValue_Float(byte _sceneId, RemoteValueID _valueId, double _value);
      bool AddSceneValue_Int32(byte _sceneId, RemoteValueID _valueId, int _value);
      bool AddSceneValue_Int16(byte _sceneId, RemoteValueID _valueId, short _value);
      bool AddSceneValue_String(byte _sceneId, RemoteValueID _valueId, string _value);
      bool AddSceneValueListSelection_String(byte _sceneId, RemoteValueID _valueId, string _value);
      bool AddSceneValueListSelection_Int32(byte _sceneId, RemoteValueID _valueId, int _value);
      bool RemoveSceneValue(byte _sceneId, RemoteValueID _valueId);
      SceneGetValuesReturnStruct SceneGetValues(byte _sceneId);
      Bool_Bool SceneGetValueAsBool(byte _sceneId, RemoteValueID _valueId);
      Bool_UInt8 SceneGetValueAsByte(byte _sceneId, RemoteValueID _valueId);
      Bool_Float SceneGetValueAsFloat(byte _sceneId, RemoteValueID _valueId);
      Bool_Int SceneGetValueAsInt(byte _sceneId, RemoteValueID _valueId);
      Bool_Int16 SceneGetValueAsShort(byte _sceneId, RemoteValueID _valueId);
      Bool_String SceneGetValueAsString(byte _sceneId, RemoteValueID _valueId);
      Bool_String SceneGetValueListSelection_String(byte _sceneId, RemoteValueID _valueId);
      Bool_Int SceneGetValueListSelection_Int32(byte _sceneId, RemoteValueID _valueId);
      bool SetSceneValue_Bool(byte _sceneId, RemoteValueID _valueId, bool _value);
      bool SetSceneValue_Uint8(byte _sceneId, RemoteValueID _valueId, byte _value);
      bool SetSceneValue_Float(byte _sceneId, RemoteValueID _valueId, double _value);
      bool SetSceneValue_Int32(byte _sceneId, RemoteValueID _valueId, int _value);
      bool SetSceneValue_Int16(byte _sceneId, RemoteValueID _valueId, short _value);
      bool SetSceneValue_String(byte _sceneId, RemoteValueID _valueId, string _value);
      bool SetSceneValueListSelection_String(byte _sceneId, RemoteValueID _valueId, string _value);
      bool SetSceneValueListSelection_Int32(byte _sceneId, RemoteValueID _valueId, int _value);
      string GetSceneLabel(byte _sceneId);
      void SetSceneLabel(byte _sceneId, string _value);
      bool SceneExists(byte _sceneId);
      bool ActivateScene(byte _sceneId);
      GetDriverStatisticsReturnStruct GetDriverStatistics(int _homeId);
      GetNodeStatisticsReturnStruct GetNodeStatistics(int _homeId, byte _nodeId);
      void SendAllValues();
      void ping();
    }

    public class Client : Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      public void WriteConfig(int _homeId)
      {
        send_WriteConfig(_homeId);
        recv_WriteConfig();
      }

      public void send_WriteConfig(int _homeId)
      {
        oprot_.WriteMessageBegin(new TMessage("WriteConfig", TMessageType.Call, seqid_));
        WriteConfig_args args = new WriteConfig_args();
        args._homeId = _homeId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_WriteConfig()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        WriteConfig_result result = new WriteConfig_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      public byte GetControllerNodeId(int _homeId)
      {
        send_GetControllerNodeId(_homeId);
        return recv_GetControllerNodeId();
      }

      public void send_GetControllerNodeId(int _homeId)
      {
        oprot_.WriteMessageBegin(new TMessage("GetControllerNodeId", TMessageType.Call, seqid_));
        GetControllerNodeId_args args = new GetControllerNodeId_args();
        args._homeId = _homeId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public byte recv_GetControllerNodeId()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetControllerNodeId_result result = new GetControllerNodeId_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetControllerNodeId failed: unknown result");
      }

      public byte GetSUCNodeId(int _homeId)
      {
        send_GetSUCNodeId(_homeId);
        return recv_GetSUCNodeId();
      }

      public void send_GetSUCNodeId(int _homeId)
      {
        oprot_.WriteMessageBegin(new TMessage("GetSUCNodeId", TMessageType.Call, seqid_));
        GetSUCNodeId_args args = new GetSUCNodeId_args();
        args._homeId = _homeId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public byte recv_GetSUCNodeId()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetSUCNodeId_result result = new GetSUCNodeId_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetSUCNodeId failed: unknown result");
      }

      public bool IsPrimaryController(int _homeId)
      {
        send_IsPrimaryController(_homeId);
        return recv_IsPrimaryController();
      }

      public void send_IsPrimaryController(int _homeId)
      {
        oprot_.WriteMessageBegin(new TMessage("IsPrimaryController", TMessageType.Call, seqid_));
        IsPrimaryController_args args = new IsPrimaryController_args();
        args._homeId = _homeId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public bool recv_IsPrimaryController()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        IsPrimaryController_result result = new IsPrimaryController_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "IsPrimaryController failed: unknown result");
      }

      public bool IsStaticUpdateController(int _homeId)
      {
        send_IsStaticUpdateController(_homeId);
        return recv_IsStaticUpdateController();
      }

      public void send_IsStaticUpdateController(int _homeId)
      {
        oprot_.WriteMessageBegin(new TMessage("IsStaticUpdateController", TMessageType.Call, seqid_));
        IsStaticUpdateController_args args = new IsStaticUpdateController_args();
        args._homeId = _homeId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public bool recv_IsStaticUpdateController()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        IsStaticUpdateController_result result = new IsStaticUpdateController_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "IsStaticUpdateController failed: unknown result");
      }

      public bool IsBridgeController(int _homeId)
      {
        send_IsBridgeController(_homeId);
        return recv_IsBridgeController();
      }

      public void send_IsBridgeController(int _homeId)
      {
        oprot_.WriteMessageBegin(new TMessage("IsBridgeController", TMessageType.Call, seqid_));
        IsBridgeController_args args = new IsBridgeController_args();
        args._homeId = _homeId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public bool recv_IsBridgeController()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        IsBridgeController_result result = new IsBridgeController_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "IsBridgeController failed: unknown result");
      }

      public string GetLibraryVersion(int _homeId)
      {
        send_GetLibraryVersion(_homeId);
        return recv_GetLibraryVersion();
      }

      public void send_GetLibraryVersion(int _homeId)
      {
        oprot_.WriteMessageBegin(new TMessage("GetLibraryVersion", TMessageType.Call, seqid_));
        GetLibraryVersion_args args = new GetLibraryVersion_args();
        args._homeId = _homeId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public string recv_GetLibraryVersion()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetLibraryVersion_result result = new GetLibraryVersion_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetLibraryVersion failed: unknown result");
      }

      public string GetLibraryTypeName(int _homeId)
      {
        send_GetLibraryTypeName(_homeId);
        return recv_GetLibraryTypeName();
      }

      public void send_GetLibraryTypeName(int _homeId)
      {
        oprot_.WriteMessageBegin(new TMessage("GetLibraryTypeName", TMessageType.Call, seqid_));
        GetLibraryTypeName_args args = new GetLibraryTypeName_args();
        args._homeId = _homeId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public string recv_GetLibraryTypeName()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetLibraryTypeName_result result = new GetLibraryTypeName_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetLibraryTypeName failed: unknown result");
      }

      public int GetSendQueueCount(int _homeId)
      {
        send_GetSendQueueCount(_homeId);
        return recv_GetSendQueueCount();
      }

      public void send_GetSendQueueCount(int _homeId)
      {
        oprot_.WriteMessageBegin(new TMessage("GetSendQueueCount", TMessageType.Call, seqid_));
        GetSendQueueCount_args args = new GetSendQueueCount_args();
        args._homeId = _homeId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public int recv_GetSendQueueCount()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetSendQueueCount_result result = new GetSendQueueCount_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetSendQueueCount failed: unknown result");
      }

      public void LogDriverStatistics(int _homeId)
      {
        send_LogDriverStatistics(_homeId);
        recv_LogDriverStatistics();
      }

      public void send_LogDriverStatistics(int _homeId)
      {
        oprot_.WriteMessageBegin(new TMessage("LogDriverStatistics", TMessageType.Call, seqid_));
        LogDriverStatistics_args args = new LogDriverStatistics_args();
        args._homeId = _homeId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_LogDriverStatistics()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        LogDriverStatistics_result result = new LogDriverStatistics_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      public int GetControllerInterfaceType(int _homeId)
      {
        send_GetControllerInterfaceType(_homeId);
        return recv_GetControllerInterfaceType();
      }

      public void send_GetControllerInterfaceType(int _homeId)
      {
        oprot_.WriteMessageBegin(new TMessage("GetControllerInterfaceType", TMessageType.Call, seqid_));
        GetControllerInterfaceType_args args = new GetControllerInterfaceType_args();
        args._homeId = _homeId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public int recv_GetControllerInterfaceType()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetControllerInterfaceType_result result = new GetControllerInterfaceType_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetControllerInterfaceType failed: unknown result");
      }

      public string GetControllerPath(int _homeId)
      {
        send_GetControllerPath(_homeId);
        return recv_GetControllerPath();
      }

      public void send_GetControllerPath(int _homeId)
      {
        oprot_.WriteMessageBegin(new TMessage("GetControllerPath", TMessageType.Call, seqid_));
        GetControllerPath_args args = new GetControllerPath_args();
        args._homeId = _homeId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public string recv_GetControllerPath()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetControllerPath_result result = new GetControllerPath_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetControllerPath failed: unknown result");
      }

      public int GetPollInterval()
      {
        send_GetPollInterval();
        return recv_GetPollInterval();
      }

      public void send_GetPollInterval()
      {
        oprot_.WriteMessageBegin(new TMessage("GetPollInterval", TMessageType.Call, seqid_));
        GetPollInterval_args args = new GetPollInterval_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public int recv_GetPollInterval()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetPollInterval_result result = new GetPollInterval_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetPollInterval failed: unknown result");
      }

      public void SetPollInterval(int _milliseconds, bool _bIntervalBetweenPolls)
      {
        send_SetPollInterval(_milliseconds, _bIntervalBetweenPolls);
        recv_SetPollInterval();
      }

      public void send_SetPollInterval(int _milliseconds, bool _bIntervalBetweenPolls)
      {
        oprot_.WriteMessageBegin(new TMessage("SetPollInterval", TMessageType.Call, seqid_));
        SetPollInterval_args args = new SetPollInterval_args();
        args._milliseconds = _milliseconds;
        args._bIntervalBetweenPolls = _bIntervalBetweenPolls;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_SetPollInterval()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SetPollInterval_result result = new SetPollInterval_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      public bool EnablePoll(RemoteValueID _valueId, byte _intensity)
      {
        send_EnablePoll(_valueId, _intensity);
        return recv_EnablePoll();
      }

      public void send_EnablePoll(RemoteValueID _valueId, byte _intensity)
      {
        oprot_.WriteMessageBegin(new TMessage("EnablePoll", TMessageType.Call, seqid_));
        EnablePoll_args args = new EnablePoll_args();
        args._valueId = _valueId;
        args._intensity = _intensity;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public bool recv_EnablePoll()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        EnablePoll_result result = new EnablePoll_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "EnablePoll failed: unknown result");
      }

      public bool DisablePoll(RemoteValueID _valueId)
      {
        send_DisablePoll(_valueId);
        return recv_DisablePoll();
      }

      public void send_DisablePoll(RemoteValueID _valueId)
      {
        oprot_.WriteMessageBegin(new TMessage("DisablePoll", TMessageType.Call, seqid_));
        DisablePoll_args args = new DisablePoll_args();
        args._valueId = _valueId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public bool recv_DisablePoll()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        DisablePoll_result result = new DisablePoll_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "DisablePoll failed: unknown result");
      }

      public bool isPolled(RemoteValueID _valueId)
      {
        send_isPolled(_valueId);
        return recv_isPolled();
      }

      public void send_isPolled(RemoteValueID _valueId)
      {
        oprot_.WriteMessageBegin(new TMessage("isPolled", TMessageType.Call, seqid_));
        isPolled_args args = new isPolled_args();
        args._valueId = _valueId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public bool recv_isPolled()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        isPolled_result result = new isPolled_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "isPolled failed: unknown result");
      }

      public void SetPollIntensity(RemoteValueID _valueId, byte _intensity)
      {
        send_SetPollIntensity(_valueId, _intensity);
        recv_SetPollIntensity();
      }

      public void send_SetPollIntensity(RemoteValueID _valueId, byte _intensity)
      {
        oprot_.WriteMessageBegin(new TMessage("SetPollIntensity", TMessageType.Call, seqid_));
        SetPollIntensity_args args = new SetPollIntensity_args();
        args._valueId = _valueId;
        args._intensity = _intensity;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_SetPollIntensity()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SetPollIntensity_result result = new SetPollIntensity_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      public bool RefreshNodeInfo(int _homeId, byte _nodeId)
      {
        send_RefreshNodeInfo(_homeId, _nodeId);
        return recv_RefreshNodeInfo();
      }

      public void send_RefreshNodeInfo(int _homeId, byte _nodeId)
      {
        oprot_.WriteMessageBegin(new TMessage("RefreshNodeInfo", TMessageType.Call, seqid_));
        RefreshNodeInfo_args args = new RefreshNodeInfo_args();
        args._homeId = _homeId;
        args._nodeId = _nodeId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public bool recv_RefreshNodeInfo()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        RefreshNodeInfo_result result = new RefreshNodeInfo_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "RefreshNodeInfo failed: unknown result");
      }

      public bool RequestNodeState(int _homeId, byte _nodeId)
      {
        send_RequestNodeState(_homeId, _nodeId);
        return recv_RequestNodeState();
      }

      public void send_RequestNodeState(int _homeId, byte _nodeId)
      {
        oprot_.WriteMessageBegin(new TMessage("RequestNodeState", TMessageType.Call, seqid_));
        RequestNodeState_args args = new RequestNodeState_args();
        args._homeId = _homeId;
        args._nodeId = _nodeId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public bool recv_RequestNodeState()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        RequestNodeState_result result = new RequestNodeState_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "RequestNodeState failed: unknown result");
      }

      public bool RequestNodeDynamic(int _homeId, byte _nodeId)
      {
        send_RequestNodeDynamic(_homeId, _nodeId);
        return recv_RequestNodeDynamic();
      }

      public void send_RequestNodeDynamic(int _homeId, byte _nodeId)
      {
        oprot_.WriteMessageBegin(new TMessage("RequestNodeDynamic", TMessageType.Call, seqid_));
        RequestNodeDynamic_args args = new RequestNodeDynamic_args();
        args._homeId = _homeId;
        args._nodeId = _nodeId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public bool recv_RequestNodeDynamic()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        RequestNodeDynamic_result result = new RequestNodeDynamic_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "RequestNodeDynamic failed: unknown result");
      }

      public bool IsNodeListeningDevice(int _homeId, byte _nodeId)
      {
        send_IsNodeListeningDevice(_homeId, _nodeId);
        return recv_IsNodeListeningDevice();
      }

      public void send_IsNodeListeningDevice(int _homeId, byte _nodeId)
      {
        oprot_.WriteMessageBegin(new TMessage("IsNodeListeningDevice", TMessageType.Call, seqid_));
        IsNodeListeningDevice_args args = new IsNodeListeningDevice_args();
        args._homeId = _homeId;
        args._nodeId = _nodeId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public bool recv_IsNodeListeningDevice()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        IsNodeListeningDevice_result result = new IsNodeListeningDevice_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "IsNodeListeningDevice failed: unknown result");
      }

      public bool IsNodeFrequentListeningDevice(int _homeId, byte _nodeId)
      {
        send_IsNodeFrequentListeningDevice(_homeId, _nodeId);
        return recv_IsNodeFrequentListeningDevice();
      }

      public void send_IsNodeFrequentListeningDevice(int _homeId, byte _nodeId)
      {
        oprot_.WriteMessageBegin(new TMessage("IsNodeFrequentListeningDevice", TMessageType.Call, seqid_));
        IsNodeFrequentListeningDevice_args args = new IsNodeFrequentListeningDevice_args();
        args._homeId = _homeId;
        args._nodeId = _nodeId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public bool recv_IsNodeFrequentListeningDevice()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        IsNodeFrequentListeningDevice_result result = new IsNodeFrequentListeningDevice_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "IsNodeFrequentListeningDevice failed: unknown result");
      }

      public bool IsNodeBeamingDevice(int _homeId, byte _nodeId)
      {
        send_IsNodeBeamingDevice(_homeId, _nodeId);
        return recv_IsNodeBeamingDevice();
      }

      public void send_IsNodeBeamingDevice(int _homeId, byte _nodeId)
      {
        oprot_.WriteMessageBegin(new TMessage("IsNodeBeamingDevice", TMessageType.Call, seqid_));
        IsNodeBeamingDevice_args args = new IsNodeBeamingDevice_args();
        args._homeId = _homeId;
        args._nodeId = _nodeId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public bool recv_IsNodeBeamingDevice()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        IsNodeBeamingDevice_result result = new IsNodeBeamingDevice_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "IsNodeBeamingDevice failed: unknown result");
      }

      public bool IsNodeRoutingDevice(int _homeId, byte _nodeId)
      {
        send_IsNodeRoutingDevice(_homeId, _nodeId);
        return recv_IsNodeRoutingDevice();
      }

      public void send_IsNodeRoutingDevice(int _homeId, byte _nodeId)
      {
        oprot_.WriteMessageBegin(new TMessage("IsNodeRoutingDevice", TMessageType.Call, seqid_));
        IsNodeRoutingDevice_args args = new IsNodeRoutingDevice_args();
        args._homeId = _homeId;
        args._nodeId = _nodeId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public bool recv_IsNodeRoutingDevice()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        IsNodeRoutingDevice_result result = new IsNodeRoutingDevice_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "IsNodeRoutingDevice failed: unknown result");
      }

      public bool IsNodeSecurityDevice(int _homeId, byte _nodeId)
      {
        send_IsNodeSecurityDevice(_homeId, _nodeId);
        return recv_IsNodeSecurityDevice();
      }

      public void send_IsNodeSecurityDevice(int _homeId, byte _nodeId)
      {
        oprot_.WriteMessageBegin(new TMessage("IsNodeSecurityDevice", TMessageType.Call, seqid_));
        IsNodeSecurityDevice_args args = new IsNodeSecurityDevice_args();
        args._homeId = _homeId;
        args._nodeId = _nodeId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public bool recv_IsNodeSecurityDevice()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        IsNodeSecurityDevice_result result = new IsNodeSecurityDevice_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "IsNodeSecurityDevice failed: unknown result");
      }

      public int GetNodeMaxBaudRate(int _homeId, byte _nodeId)
      {
        send_GetNodeMaxBaudRate(_homeId, _nodeId);
        return recv_GetNodeMaxBaudRate();
      }

      public void send_GetNodeMaxBaudRate(int _homeId, byte _nodeId)
      {
        oprot_.WriteMessageBegin(new TMessage("GetNodeMaxBaudRate", TMessageType.Call, seqid_));
        GetNodeMaxBaudRate_args args = new GetNodeMaxBaudRate_args();
        args._homeId = _homeId;
        args._nodeId = _nodeId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public int recv_GetNodeMaxBaudRate()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetNodeMaxBaudRate_result result = new GetNodeMaxBaudRate_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetNodeMaxBaudRate failed: unknown result");
      }

      public byte GetNodeVersion(int _homeId, byte _nodeId)
      {
        send_GetNodeVersion(_homeId, _nodeId);
        return recv_GetNodeVersion();
      }

      public void send_GetNodeVersion(int _homeId, byte _nodeId)
      {
        oprot_.WriteMessageBegin(new TMessage("GetNodeVersion", TMessageType.Call, seqid_));
        GetNodeVersion_args args = new GetNodeVersion_args();
        args._homeId = _homeId;
        args._nodeId = _nodeId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public byte recv_GetNodeVersion()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetNodeVersion_result result = new GetNodeVersion_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetNodeVersion failed: unknown result");
      }

      public byte GetNodeSecurity(int _homeId, byte _nodeId)
      {
        send_GetNodeSecurity(_homeId, _nodeId);
        return recv_GetNodeSecurity();
      }

      public void send_GetNodeSecurity(int _homeId, byte _nodeId)
      {
        oprot_.WriteMessageBegin(new TMessage("GetNodeSecurity", TMessageType.Call, seqid_));
        GetNodeSecurity_args args = new GetNodeSecurity_args();
        args._homeId = _homeId;
        args._nodeId = _nodeId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public byte recv_GetNodeSecurity()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetNodeSecurity_result result = new GetNodeSecurity_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetNodeSecurity failed: unknown result");
      }

      public byte GetNodeBasic(int _homeId, byte _nodeId)
      {
        send_GetNodeBasic(_homeId, _nodeId);
        return recv_GetNodeBasic();
      }

      public void send_GetNodeBasic(int _homeId, byte _nodeId)
      {
        oprot_.WriteMessageBegin(new TMessage("GetNodeBasic", TMessageType.Call, seqid_));
        GetNodeBasic_args args = new GetNodeBasic_args();
        args._homeId = _homeId;
        args._nodeId = _nodeId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public byte recv_GetNodeBasic()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetNodeBasic_result result = new GetNodeBasic_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetNodeBasic failed: unknown result");
      }

      public byte GetNodeGeneric(int _homeId, byte _nodeId)
      {
        send_GetNodeGeneric(_homeId, _nodeId);
        return recv_GetNodeGeneric();
      }

      public void send_GetNodeGeneric(int _homeId, byte _nodeId)
      {
        oprot_.WriteMessageBegin(new TMessage("GetNodeGeneric", TMessageType.Call, seqid_));
        GetNodeGeneric_args args = new GetNodeGeneric_args();
        args._homeId = _homeId;
        args._nodeId = _nodeId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public byte recv_GetNodeGeneric()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetNodeGeneric_result result = new GetNodeGeneric_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetNodeGeneric failed: unknown result");
      }

      public byte GetNodeSpecific(int _homeId, byte _nodeId)
      {
        send_GetNodeSpecific(_homeId, _nodeId);
        return recv_GetNodeSpecific();
      }

      public void send_GetNodeSpecific(int _homeId, byte _nodeId)
      {
        oprot_.WriteMessageBegin(new TMessage("GetNodeSpecific", TMessageType.Call, seqid_));
        GetNodeSpecific_args args = new GetNodeSpecific_args();
        args._homeId = _homeId;
        args._nodeId = _nodeId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public byte recv_GetNodeSpecific()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetNodeSpecific_result result = new GetNodeSpecific_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetNodeSpecific failed: unknown result");
      }

      public string GetNodeType(int _homeId, byte _nodeId)
      {
        send_GetNodeType(_homeId, _nodeId);
        return recv_GetNodeType();
      }

      public void send_GetNodeType(int _homeId, byte _nodeId)
      {
        oprot_.WriteMessageBegin(new TMessage("GetNodeType", TMessageType.Call, seqid_));
        GetNodeType_args args = new GetNodeType_args();
        args._homeId = _homeId;
        args._nodeId = _nodeId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public string recv_GetNodeType()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetNodeType_result result = new GetNodeType_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetNodeType failed: unknown result");
      }

      public UInt32_ListByte GetNodeNeighbors(int _homeId, byte _nodeId)
      {
        send_GetNodeNeighbors(_homeId, _nodeId);
        return recv_GetNodeNeighbors();
      }

      public void send_GetNodeNeighbors(int _homeId, byte _nodeId)
      {
        oprot_.WriteMessageBegin(new TMessage("GetNodeNeighbors", TMessageType.Call, seqid_));
        GetNodeNeighbors_args args = new GetNodeNeighbors_args();
        args._homeId = _homeId;
        args._nodeId = _nodeId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public UInt32_ListByte recv_GetNodeNeighbors()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetNodeNeighbors_result result = new GetNodeNeighbors_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetNodeNeighbors failed: unknown result");
      }

      public string GetNodeManufacturerName(int _homeId, byte _nodeId)
      {
        send_GetNodeManufacturerName(_homeId, _nodeId);
        return recv_GetNodeManufacturerName();
      }

      public void send_GetNodeManufacturerName(int _homeId, byte _nodeId)
      {
        oprot_.WriteMessageBegin(new TMessage("GetNodeManufacturerName", TMessageType.Call, seqid_));
        GetNodeManufacturerName_args args = new GetNodeManufacturerName_args();
        args._homeId = _homeId;
        args._nodeId = _nodeId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public string recv_GetNodeManufacturerName()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetNodeManufacturerName_result result = new GetNodeManufacturerName_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetNodeManufacturerName failed: unknown result");
      }

      public string GetNodeProductName(int _homeId, byte _nodeId)
      {
        send_GetNodeProductName(_homeId, _nodeId);
        return recv_GetNodeProductName();
      }

      public void send_GetNodeProductName(int _homeId, byte _nodeId)
      {
        oprot_.WriteMessageBegin(new TMessage("GetNodeProductName", TMessageType.Call, seqid_));
        GetNodeProductName_args args = new GetNodeProductName_args();
        args._homeId = _homeId;
        args._nodeId = _nodeId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public string recv_GetNodeProductName()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetNodeProductName_result result = new GetNodeProductName_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetNodeProductName failed: unknown result");
      }

      public string GetNodeName(int _homeId, byte _nodeId)
      {
        send_GetNodeName(_homeId, _nodeId);
        return recv_GetNodeName();
      }

      public void send_GetNodeName(int _homeId, byte _nodeId)
      {
        oprot_.WriteMessageBegin(new TMessage("GetNodeName", TMessageType.Call, seqid_));
        GetNodeName_args args = new GetNodeName_args();
        args._homeId = _homeId;
        args._nodeId = _nodeId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public string recv_GetNodeName()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetNodeName_result result = new GetNodeName_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetNodeName failed: unknown result");
      }

      public string GetNodeLocation(int _homeId, byte _nodeId)
      {
        send_GetNodeLocation(_homeId, _nodeId);
        return recv_GetNodeLocation();
      }

      public void send_GetNodeLocation(int _homeId, byte _nodeId)
      {
        oprot_.WriteMessageBegin(new TMessage("GetNodeLocation", TMessageType.Call, seqid_));
        GetNodeLocation_args args = new GetNodeLocation_args();
        args._homeId = _homeId;
        args._nodeId = _nodeId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public string recv_GetNodeLocation()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetNodeLocation_result result = new GetNodeLocation_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetNodeLocation failed: unknown result");
      }

      public string GetNodeManufacturerId(int _homeId, byte _nodeId)
      {
        send_GetNodeManufacturerId(_homeId, _nodeId);
        return recv_GetNodeManufacturerId();
      }

      public void send_GetNodeManufacturerId(int _homeId, byte _nodeId)
      {
        oprot_.WriteMessageBegin(new TMessage("GetNodeManufacturerId", TMessageType.Call, seqid_));
        GetNodeManufacturerId_args args = new GetNodeManufacturerId_args();
        args._homeId = _homeId;
        args._nodeId = _nodeId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public string recv_GetNodeManufacturerId()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetNodeManufacturerId_result result = new GetNodeManufacturerId_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetNodeManufacturerId failed: unknown result");
      }

      public string GetNodeProductType(int _homeId, byte _nodeId)
      {
        send_GetNodeProductType(_homeId, _nodeId);
        return recv_GetNodeProductType();
      }

      public void send_GetNodeProductType(int _homeId, byte _nodeId)
      {
        oprot_.WriteMessageBegin(new TMessage("GetNodeProductType", TMessageType.Call, seqid_));
        GetNodeProductType_args args = new GetNodeProductType_args();
        args._homeId = _homeId;
        args._nodeId = _nodeId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public string recv_GetNodeProductType()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetNodeProductType_result result = new GetNodeProductType_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetNodeProductType failed: unknown result");
      }

      public string GetNodeProductId(int _homeId, byte _nodeId)
      {
        send_GetNodeProductId(_homeId, _nodeId);
        return recv_GetNodeProductId();
      }

      public void send_GetNodeProductId(int _homeId, byte _nodeId)
      {
        oprot_.WriteMessageBegin(new TMessage("GetNodeProductId", TMessageType.Call, seqid_));
        GetNodeProductId_args args = new GetNodeProductId_args();
        args._homeId = _homeId;
        args._nodeId = _nodeId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public string recv_GetNodeProductId()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetNodeProductId_result result = new GetNodeProductId_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetNodeProductId failed: unknown result");
      }

      public void SetNodeManufacturerName(int _homeId, byte _nodeId, string _manufacturerName)
      {
        send_SetNodeManufacturerName(_homeId, _nodeId, _manufacturerName);
        recv_SetNodeManufacturerName();
      }

      public void send_SetNodeManufacturerName(int _homeId, byte _nodeId, string _manufacturerName)
      {
        oprot_.WriteMessageBegin(new TMessage("SetNodeManufacturerName", TMessageType.Call, seqid_));
        SetNodeManufacturerName_args args = new SetNodeManufacturerName_args();
        args._homeId = _homeId;
        args._nodeId = _nodeId;
        args._manufacturerName = _manufacturerName;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_SetNodeManufacturerName()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SetNodeManufacturerName_result result = new SetNodeManufacturerName_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      public void SetNodeProductName(int _homeId, byte _nodeId, string _productName)
      {
        send_SetNodeProductName(_homeId, _nodeId, _productName);
        recv_SetNodeProductName();
      }

      public void send_SetNodeProductName(int _homeId, byte _nodeId, string _productName)
      {
        oprot_.WriteMessageBegin(new TMessage("SetNodeProductName", TMessageType.Call, seqid_));
        SetNodeProductName_args args = new SetNodeProductName_args();
        args._homeId = _homeId;
        args._nodeId = _nodeId;
        args._productName = _productName;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_SetNodeProductName()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SetNodeProductName_result result = new SetNodeProductName_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      public void SetNodeName(int _homeId, byte _nodeId, string _nodeName)
      {
        send_SetNodeName(_homeId, _nodeId, _nodeName);
        recv_SetNodeName();
      }

      public void send_SetNodeName(int _homeId, byte _nodeId, string _nodeName)
      {
        oprot_.WriteMessageBegin(new TMessage("SetNodeName", TMessageType.Call, seqid_));
        SetNodeName_args args = new SetNodeName_args();
        args._homeId = _homeId;
        args._nodeId = _nodeId;
        args._nodeName = _nodeName;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_SetNodeName()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SetNodeName_result result = new SetNodeName_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      public void SetNodeLocation(int _homeId, byte _nodeId, string _location)
      {
        send_SetNodeLocation(_homeId, _nodeId, _location);
        recv_SetNodeLocation();
      }

      public void send_SetNodeLocation(int _homeId, byte _nodeId, string _location)
      {
        oprot_.WriteMessageBegin(new TMessage("SetNodeLocation", TMessageType.Call, seqid_));
        SetNodeLocation_args args = new SetNodeLocation_args();
        args._homeId = _homeId;
        args._nodeId = _nodeId;
        args._location = _location;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_SetNodeLocation()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SetNodeLocation_result result = new SetNodeLocation_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      public void SetNodeOn(int _homeId, byte _nodeId)
      {
        send_SetNodeOn(_homeId, _nodeId);
        recv_SetNodeOn();
      }

      public void send_SetNodeOn(int _homeId, byte _nodeId)
      {
        oprot_.WriteMessageBegin(new TMessage("SetNodeOn", TMessageType.Call, seqid_));
        SetNodeOn_args args = new SetNodeOn_args();
        args._homeId = _homeId;
        args._nodeId = _nodeId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_SetNodeOn()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SetNodeOn_result result = new SetNodeOn_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      public void SetNodeOff(int _homeId, byte _nodeId)
      {
        send_SetNodeOff(_homeId, _nodeId);
        recv_SetNodeOff();
      }

      public void send_SetNodeOff(int _homeId, byte _nodeId)
      {
        oprot_.WriteMessageBegin(new TMessage("SetNodeOff", TMessageType.Call, seqid_));
        SetNodeOff_args args = new SetNodeOff_args();
        args._homeId = _homeId;
        args._nodeId = _nodeId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_SetNodeOff()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SetNodeOff_result result = new SetNodeOff_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      public void SetNodeLevel(int _homeId, byte _nodeId, byte _level)
      {
        send_SetNodeLevel(_homeId, _nodeId, _level);
        recv_SetNodeLevel();
      }

      public void send_SetNodeLevel(int _homeId, byte _nodeId, byte _level)
      {
        oprot_.WriteMessageBegin(new TMessage("SetNodeLevel", TMessageType.Call, seqid_));
        SetNodeLevel_args args = new SetNodeLevel_args();
        args._homeId = _homeId;
        args._nodeId = _nodeId;
        args._level = _level;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_SetNodeLevel()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SetNodeLevel_result result = new SetNodeLevel_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      public bool IsNodeInfoReceived(int _homeId, byte _nodeId)
      {
        send_IsNodeInfoReceived(_homeId, _nodeId);
        return recv_IsNodeInfoReceived();
      }

      public void send_IsNodeInfoReceived(int _homeId, byte _nodeId)
      {
        oprot_.WriteMessageBegin(new TMessage("IsNodeInfoReceived", TMessageType.Call, seqid_));
        IsNodeInfoReceived_args args = new IsNodeInfoReceived_args();
        args._homeId = _homeId;
        args._nodeId = _nodeId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public bool recv_IsNodeInfoReceived()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        IsNodeInfoReceived_result result = new IsNodeInfoReceived_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "IsNodeInfoReceived failed: unknown result");
      }

      public Bool_GetNodeClassInformation GetNodeClassInformation(int _homeId, byte _nodeId, byte _commandClassId)
      {
        send_GetNodeClassInformation(_homeId, _nodeId, _commandClassId);
        return recv_GetNodeClassInformation();
      }

      public void send_GetNodeClassInformation(int _homeId, byte _nodeId, byte _commandClassId)
      {
        oprot_.WriteMessageBegin(new TMessage("GetNodeClassInformation", TMessageType.Call, seqid_));
        GetNodeClassInformation_args args = new GetNodeClassInformation_args();
        args._homeId = _homeId;
        args._nodeId = _nodeId;
        args._commandClassId = _commandClassId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public Bool_GetNodeClassInformation recv_GetNodeClassInformation()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetNodeClassInformation_result result = new GetNodeClassInformation_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetNodeClassInformation failed: unknown result");
      }

      public bool IsNodeAwake(int _homeId, byte _nodeId)
      {
        send_IsNodeAwake(_homeId, _nodeId);
        return recv_IsNodeAwake();
      }

      public void send_IsNodeAwake(int _homeId, byte _nodeId)
      {
        oprot_.WriteMessageBegin(new TMessage("IsNodeAwake", TMessageType.Call, seqid_));
        IsNodeAwake_args args = new IsNodeAwake_args();
        args._homeId = _homeId;
        args._nodeId = _nodeId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public bool recv_IsNodeAwake()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        IsNodeAwake_result result = new IsNodeAwake_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "IsNodeAwake failed: unknown result");
      }

      public bool IsNodeFailed(int _homeId, byte _nodeId)
      {
        send_IsNodeFailed(_homeId, _nodeId);
        return recv_IsNodeFailed();
      }

      public void send_IsNodeFailed(int _homeId, byte _nodeId)
      {
        oprot_.WriteMessageBegin(new TMessage("IsNodeFailed", TMessageType.Call, seqid_));
        IsNodeFailed_args args = new IsNodeFailed_args();
        args._homeId = _homeId;
        args._nodeId = _nodeId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public bool recv_IsNodeFailed()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        IsNodeFailed_result result = new IsNodeFailed_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "IsNodeFailed failed: unknown result");
      }

      public string GetNodeQueryStage(int _homeId, byte _nodeId)
      {
        send_GetNodeQueryStage(_homeId, _nodeId);
        return recv_GetNodeQueryStage();
      }

      public void send_GetNodeQueryStage(int _homeId, byte _nodeId)
      {
        oprot_.WriteMessageBegin(new TMessage("GetNodeQueryStage", TMessageType.Call, seqid_));
        GetNodeQueryStage_args args = new GetNodeQueryStage_args();
        args._homeId = _homeId;
        args._nodeId = _nodeId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public string recv_GetNodeQueryStage()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetNodeQueryStage_result result = new GetNodeQueryStage_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetNodeQueryStage failed: unknown result");
      }

      public string GetValueLabel(RemoteValueID _id)
      {
        send_GetValueLabel(_id);
        return recv_GetValueLabel();
      }

      public void send_GetValueLabel(RemoteValueID _id)
      {
        oprot_.WriteMessageBegin(new TMessage("GetValueLabel", TMessageType.Call, seqid_));
        GetValueLabel_args args = new GetValueLabel_args();
        args._id = _id;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public string recv_GetValueLabel()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetValueLabel_result result = new GetValueLabel_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetValueLabel failed: unknown result");
      }

      public void SetValueLabel(RemoteValueID _id, string _value)
      {
        send_SetValueLabel(_id, _value);
        recv_SetValueLabel();
      }

      public void send_SetValueLabel(RemoteValueID _id, string _value)
      {
        oprot_.WriteMessageBegin(new TMessage("SetValueLabel", TMessageType.Call, seqid_));
        SetValueLabel_args args = new SetValueLabel_args();
        args._id = _id;
        args._value = _value;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_SetValueLabel()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SetValueLabel_result result = new SetValueLabel_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      public string GetValueUnits(RemoteValueID _id)
      {
        send_GetValueUnits(_id);
        return recv_GetValueUnits();
      }

      public void send_GetValueUnits(RemoteValueID _id)
      {
        oprot_.WriteMessageBegin(new TMessage("GetValueUnits", TMessageType.Call, seqid_));
        GetValueUnits_args args = new GetValueUnits_args();
        args._id = _id;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public string recv_GetValueUnits()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetValueUnits_result result = new GetValueUnits_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetValueUnits failed: unknown result");
      }

      public void SetValueUnits(RemoteValueID _id, string _value)
      {
        send_SetValueUnits(_id, _value);
        recv_SetValueUnits();
      }

      public void send_SetValueUnits(RemoteValueID _id, string _value)
      {
        oprot_.WriteMessageBegin(new TMessage("SetValueUnits", TMessageType.Call, seqid_));
        SetValueUnits_args args = new SetValueUnits_args();
        args._id = _id;
        args._value = _value;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_SetValueUnits()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SetValueUnits_result result = new SetValueUnits_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      public string GetValueHelp(RemoteValueID _id)
      {
        send_GetValueHelp(_id);
        return recv_GetValueHelp();
      }

      public void send_GetValueHelp(RemoteValueID _id)
      {
        oprot_.WriteMessageBegin(new TMessage("GetValueHelp", TMessageType.Call, seqid_));
        GetValueHelp_args args = new GetValueHelp_args();
        args._id = _id;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public string recv_GetValueHelp()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetValueHelp_result result = new GetValueHelp_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetValueHelp failed: unknown result");
      }

      public void SetValueHelp(RemoteValueID _id, string _value)
      {
        send_SetValueHelp(_id, _value);
        recv_SetValueHelp();
      }

      public void send_SetValueHelp(RemoteValueID _id, string _value)
      {
        oprot_.WriteMessageBegin(new TMessage("SetValueHelp", TMessageType.Call, seqid_));
        SetValueHelp_args args = new SetValueHelp_args();
        args._id = _id;
        args._value = _value;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_SetValueHelp()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SetValueHelp_result result = new SetValueHelp_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      public int GetValueMin(RemoteValueID _id)
      {
        send_GetValueMin(_id);
        return recv_GetValueMin();
      }

      public void send_GetValueMin(RemoteValueID _id)
      {
        oprot_.WriteMessageBegin(new TMessage("GetValueMin", TMessageType.Call, seqid_));
        GetValueMin_args args = new GetValueMin_args();
        args._id = _id;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public int recv_GetValueMin()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetValueMin_result result = new GetValueMin_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetValueMin failed: unknown result");
      }

      public int GetValueMax(RemoteValueID _id)
      {
        send_GetValueMax(_id);
        return recv_GetValueMax();
      }

      public void send_GetValueMax(RemoteValueID _id)
      {
        oprot_.WriteMessageBegin(new TMessage("GetValueMax", TMessageType.Call, seqid_));
        GetValueMax_args args = new GetValueMax_args();
        args._id = _id;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public int recv_GetValueMax()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetValueMax_result result = new GetValueMax_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetValueMax failed: unknown result");
      }

      public bool IsValueReadOnly(RemoteValueID _id)
      {
        send_IsValueReadOnly(_id);
        return recv_IsValueReadOnly();
      }

      public void send_IsValueReadOnly(RemoteValueID _id)
      {
        oprot_.WriteMessageBegin(new TMessage("IsValueReadOnly", TMessageType.Call, seqid_));
        IsValueReadOnly_args args = new IsValueReadOnly_args();
        args._id = _id;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public bool recv_IsValueReadOnly()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        IsValueReadOnly_result result = new IsValueReadOnly_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "IsValueReadOnly failed: unknown result");
      }

      public bool IsValueWriteOnly(RemoteValueID _id)
      {
        send_IsValueWriteOnly(_id);
        return recv_IsValueWriteOnly();
      }

      public void send_IsValueWriteOnly(RemoteValueID _id)
      {
        oprot_.WriteMessageBegin(new TMessage("IsValueWriteOnly", TMessageType.Call, seqid_));
        IsValueWriteOnly_args args = new IsValueWriteOnly_args();
        args._id = _id;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public bool recv_IsValueWriteOnly()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        IsValueWriteOnly_result result = new IsValueWriteOnly_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "IsValueWriteOnly failed: unknown result");
      }

      public bool IsValueSet(RemoteValueID _id)
      {
        send_IsValueSet(_id);
        return recv_IsValueSet();
      }

      public void send_IsValueSet(RemoteValueID _id)
      {
        oprot_.WriteMessageBegin(new TMessage("IsValueSet", TMessageType.Call, seqid_));
        IsValueSet_args args = new IsValueSet_args();
        args._id = _id;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public bool recv_IsValueSet()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        IsValueSet_result result = new IsValueSet_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "IsValueSet failed: unknown result");
      }

      public bool IsValuePolled(RemoteValueID _id)
      {
        send_IsValuePolled(_id);
        return recv_IsValuePolled();
      }

      public void send_IsValuePolled(RemoteValueID _id)
      {
        oprot_.WriteMessageBegin(new TMessage("IsValuePolled", TMessageType.Call, seqid_));
        IsValuePolled_args args = new IsValuePolled_args();
        args._id = _id;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public bool recv_IsValuePolled()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        IsValuePolled_result result = new IsValuePolled_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "IsValuePolled failed: unknown result");
      }

      public Bool_Bool GetValueAsBool(RemoteValueID _id)
      {
        send_GetValueAsBool(_id);
        return recv_GetValueAsBool();
      }

      public void send_GetValueAsBool(RemoteValueID _id)
      {
        oprot_.WriteMessageBegin(new TMessage("GetValueAsBool", TMessageType.Call, seqid_));
        GetValueAsBool_args args = new GetValueAsBool_args();
        args._id = _id;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public Bool_Bool recv_GetValueAsBool()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetValueAsBool_result result = new GetValueAsBool_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetValueAsBool failed: unknown result");
      }

      public Bool_UInt8 GetValueAsByte(RemoteValueID _id)
      {
        send_GetValueAsByte(_id);
        return recv_GetValueAsByte();
      }

      public void send_GetValueAsByte(RemoteValueID _id)
      {
        oprot_.WriteMessageBegin(new TMessage("GetValueAsByte", TMessageType.Call, seqid_));
        GetValueAsByte_args args = new GetValueAsByte_args();
        args._id = _id;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public Bool_UInt8 recv_GetValueAsByte()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetValueAsByte_result result = new GetValueAsByte_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetValueAsByte failed: unknown result");
      }

      public Bool_Float GetValueAsFloat(RemoteValueID _id)
      {
        send_GetValueAsFloat(_id);
        return recv_GetValueAsFloat();
      }

      public void send_GetValueAsFloat(RemoteValueID _id)
      {
        oprot_.WriteMessageBegin(new TMessage("GetValueAsFloat", TMessageType.Call, seqid_));
        GetValueAsFloat_args args = new GetValueAsFloat_args();
        args._id = _id;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public Bool_Float recv_GetValueAsFloat()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetValueAsFloat_result result = new GetValueAsFloat_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetValueAsFloat failed: unknown result");
      }

      public Bool_Int GetValueAsInt(RemoteValueID _id)
      {
        send_GetValueAsInt(_id);
        return recv_GetValueAsInt();
      }

      public void send_GetValueAsInt(RemoteValueID _id)
      {
        oprot_.WriteMessageBegin(new TMessage("GetValueAsInt", TMessageType.Call, seqid_));
        GetValueAsInt_args args = new GetValueAsInt_args();
        args._id = _id;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public Bool_Int recv_GetValueAsInt()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetValueAsInt_result result = new GetValueAsInt_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetValueAsInt failed: unknown result");
      }

      public Bool_Int16 GetValueAsShort(RemoteValueID _id)
      {
        send_GetValueAsShort(_id);
        return recv_GetValueAsShort();
      }

      public void send_GetValueAsShort(RemoteValueID _id)
      {
        oprot_.WriteMessageBegin(new TMessage("GetValueAsShort", TMessageType.Call, seqid_));
        GetValueAsShort_args args = new GetValueAsShort_args();
        args._id = _id;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public Bool_Int16 recv_GetValueAsShort()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetValueAsShort_result result = new GetValueAsShort_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetValueAsShort failed: unknown result");
      }

      public Bool_String GetValueAsString(RemoteValueID _id)
      {
        send_GetValueAsString(_id);
        return recv_GetValueAsString();
      }

      public void send_GetValueAsString(RemoteValueID _id)
      {
        oprot_.WriteMessageBegin(new TMessage("GetValueAsString", TMessageType.Call, seqid_));
        GetValueAsString_args args = new GetValueAsString_args();
        args._id = _id;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public Bool_String recv_GetValueAsString()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetValueAsString_result result = new GetValueAsString_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetValueAsString failed: unknown result");
      }

      public Bool_String GetValueListSelection_String(RemoteValueID _id)
      {
        send_GetValueListSelection_String(_id);
        return recv_GetValueListSelection_String();
      }

      public void send_GetValueListSelection_String(RemoteValueID _id)
      {
        oprot_.WriteMessageBegin(new TMessage("GetValueListSelection_String", TMessageType.Call, seqid_));
        GetValueListSelection_String_args args = new GetValueListSelection_String_args();
        args._id = _id;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public Bool_String recv_GetValueListSelection_String()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetValueListSelection_String_result result = new GetValueListSelection_String_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetValueListSelection_String failed: unknown result");
      }

      public Bool_Int GetValueListSelection_Int32(RemoteValueID _id)
      {
        send_GetValueListSelection_Int32(_id);
        return recv_GetValueListSelection_Int32();
      }

      public void send_GetValueListSelection_Int32(RemoteValueID _id)
      {
        oprot_.WriteMessageBegin(new TMessage("GetValueListSelection_Int32", TMessageType.Call, seqid_));
        GetValueListSelection_Int32_args args = new GetValueListSelection_Int32_args();
        args._id = _id;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public Bool_Int recv_GetValueListSelection_Int32()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetValueListSelection_Int32_result result = new GetValueListSelection_Int32_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetValueListSelection_Int32 failed: unknown result");
      }

      public Bool_ListString GetValueListItems(RemoteValueID _id)
      {
        send_GetValueListItems(_id);
        return recv_GetValueListItems();
      }

      public void send_GetValueListItems(RemoteValueID _id)
      {
        oprot_.WriteMessageBegin(new TMessage("GetValueListItems", TMessageType.Call, seqid_));
        GetValueListItems_args args = new GetValueListItems_args();
        args._id = _id;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public Bool_ListString recv_GetValueListItems()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetValueListItems_result result = new GetValueListItems_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetValueListItems failed: unknown result");
      }

      public Bool_UInt8 GetValueFloatPrecision(RemoteValueID _id)
      {
        send_GetValueFloatPrecision(_id);
        return recv_GetValueFloatPrecision();
      }

      public void send_GetValueFloatPrecision(RemoteValueID _id)
      {
        oprot_.WriteMessageBegin(new TMessage("GetValueFloatPrecision", TMessageType.Call, seqid_));
        GetValueFloatPrecision_args args = new GetValueFloatPrecision_args();
        args._id = _id;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public Bool_UInt8 recv_GetValueFloatPrecision()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetValueFloatPrecision_result result = new GetValueFloatPrecision_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetValueFloatPrecision failed: unknown result");
      }

      public bool SetValue_Bool(RemoteValueID _id, bool _value)
      {
        send_SetValue_Bool(_id, _value);
        return recv_SetValue_Bool();
      }

      public void send_SetValue_Bool(RemoteValueID _id, bool _value)
      {
        oprot_.WriteMessageBegin(new TMessage("SetValue_Bool", TMessageType.Call, seqid_));
        SetValue_Bool_args args = new SetValue_Bool_args();
        args._id = _id;
        args._value = _value;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public bool recv_SetValue_Bool()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SetValue_Bool_result result = new SetValue_Bool_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SetValue_Bool failed: unknown result");
      }

      public bool SetValue_UInt8(RemoteValueID _id, byte _value)
      {
        send_SetValue_UInt8(_id, _value);
        return recv_SetValue_UInt8();
      }

      public void send_SetValue_UInt8(RemoteValueID _id, byte _value)
      {
        oprot_.WriteMessageBegin(new TMessage("SetValue_UInt8", TMessageType.Call, seqid_));
        SetValue_UInt8_args args = new SetValue_UInt8_args();
        args._id = _id;
        args._value = _value;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public bool recv_SetValue_UInt8()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SetValue_UInt8_result result = new SetValue_UInt8_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SetValue_UInt8 failed: unknown result");
      }

      public bool SetValue_UInt8_UInt8(RemoteValueID _id, List<byte> _value, byte _length)
      {
        send_SetValue_UInt8_UInt8(_id, _value, _length);
        return recv_SetValue_UInt8_UInt8();
      }

      public void send_SetValue_UInt8_UInt8(RemoteValueID _id, List<byte> _value, byte _length)
      {
        oprot_.WriteMessageBegin(new TMessage("SetValue_UInt8_UInt8", TMessageType.Call, seqid_));
        SetValue_UInt8_UInt8_args args = new SetValue_UInt8_UInt8_args();
        args._id = _id;
        args._value = _value;
        args._length = _length;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public bool recv_SetValue_UInt8_UInt8()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SetValue_UInt8_UInt8_result result = new SetValue_UInt8_UInt8_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SetValue_UInt8_UInt8 failed: unknown result");
      }

      public bool SetValue_Float(RemoteValueID _id, double _value)
      {
        send_SetValue_Float(_id, _value);
        return recv_SetValue_Float();
      }

      public void send_SetValue_Float(RemoteValueID _id, double _value)
      {
        oprot_.WriteMessageBegin(new TMessage("SetValue_Float", TMessageType.Call, seqid_));
        SetValue_Float_args args = new SetValue_Float_args();
        args._id = _id;
        args._value = _value;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public bool recv_SetValue_Float()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SetValue_Float_result result = new SetValue_Float_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SetValue_Float failed: unknown result");
      }

      public bool SetValue_int32(RemoteValueID _id, int _value)
      {
        send_SetValue_int32(_id, _value);
        return recv_SetValue_int32();
      }

      public void send_SetValue_int32(RemoteValueID _id, int _value)
      {
        oprot_.WriteMessageBegin(new TMessage("SetValue_int32", TMessageType.Call, seqid_));
        SetValue_int32_args args = new SetValue_int32_args();
        args._id = _id;
        args._value = _value;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public bool recv_SetValue_int32()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SetValue_int32_result result = new SetValue_int32_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SetValue_int32 failed: unknown result");
      }

      public bool SetValue_int16(RemoteValueID _id, short _value)
      {
        send_SetValue_int16(_id, _value);
        return recv_SetValue_int16();
      }

      public void send_SetValue_int16(RemoteValueID _id, short _value)
      {
        oprot_.WriteMessageBegin(new TMessage("SetValue_int16", TMessageType.Call, seqid_));
        SetValue_int16_args args = new SetValue_int16_args();
        args._id = _id;
        args._value = _value;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public bool recv_SetValue_int16()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SetValue_int16_result result = new SetValue_int16_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SetValue_int16 failed: unknown result");
      }

      public bool SetValue_String(RemoteValueID _id, string _value)
      {
        send_SetValue_String(_id, _value);
        return recv_SetValue_String();
      }

      public void send_SetValue_String(RemoteValueID _id, string _value)
      {
        oprot_.WriteMessageBegin(new TMessage("SetValue_String", TMessageType.Call, seqid_));
        SetValue_String_args args = new SetValue_String_args();
        args._id = _id;
        args._value = _value;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public bool recv_SetValue_String()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SetValue_String_result result = new SetValue_String_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SetValue_String failed: unknown result");
      }

      public bool SetValueListSelection(RemoteValueID _id, string _selectedItem)
      {
        send_SetValueListSelection(_id, _selectedItem);
        return recv_SetValueListSelection();
      }

      public void send_SetValueListSelection(RemoteValueID _id, string _selectedItem)
      {
        oprot_.WriteMessageBegin(new TMessage("SetValueListSelection", TMessageType.Call, seqid_));
        SetValueListSelection_args args = new SetValueListSelection_args();
        args._id = _id;
        args._selectedItem = _selectedItem;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public bool recv_SetValueListSelection()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SetValueListSelection_result result = new SetValueListSelection_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SetValueListSelection failed: unknown result");
      }

      public bool RefreshValue(RemoteValueID _id)
      {
        send_RefreshValue(_id);
        return recv_RefreshValue();
      }

      public void send_RefreshValue(RemoteValueID _id)
      {
        oprot_.WriteMessageBegin(new TMessage("RefreshValue", TMessageType.Call, seqid_));
        RefreshValue_args args = new RefreshValue_args();
        args._id = _id;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public bool recv_RefreshValue()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        RefreshValue_result result = new RefreshValue_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "RefreshValue failed: unknown result");
      }

      public void SetChangeVerified(RemoteValueID _id, bool _verify)
      {
        send_SetChangeVerified(_id, _verify);
        recv_SetChangeVerified();
      }

      public void send_SetChangeVerified(RemoteValueID _id, bool _verify)
      {
        oprot_.WriteMessageBegin(new TMessage("SetChangeVerified", TMessageType.Call, seqid_));
        SetChangeVerified_args args = new SetChangeVerified_args();
        args._id = _id;
        args._verify = _verify;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_SetChangeVerified()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SetChangeVerified_result result = new SetChangeVerified_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      public bool PressButton(RemoteValueID _id)
      {
        send_PressButton(_id);
        return recv_PressButton();
      }

      public void send_PressButton(RemoteValueID _id)
      {
        oprot_.WriteMessageBegin(new TMessage("PressButton", TMessageType.Call, seqid_));
        PressButton_args args = new PressButton_args();
        args._id = _id;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public bool recv_PressButton()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        PressButton_result result = new PressButton_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PressButton failed: unknown result");
      }

      public bool ReleaseButton(RemoteValueID _id)
      {
        send_ReleaseButton(_id);
        return recv_ReleaseButton();
      }

      public void send_ReleaseButton(RemoteValueID _id)
      {
        oprot_.WriteMessageBegin(new TMessage("ReleaseButton", TMessageType.Call, seqid_));
        ReleaseButton_args args = new ReleaseButton_args();
        args._id = _id;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public bool recv_ReleaseButton()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        ReleaseButton_result result = new ReleaseButton_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ReleaseButton failed: unknown result");
      }

      public byte GetNumSwitchPoints(RemoteValueID _id)
      {
        send_GetNumSwitchPoints(_id);
        return recv_GetNumSwitchPoints();
      }

      public void send_GetNumSwitchPoints(RemoteValueID _id)
      {
        oprot_.WriteMessageBegin(new TMessage("GetNumSwitchPoints", TMessageType.Call, seqid_));
        GetNumSwitchPoints_args args = new GetNumSwitchPoints_args();
        args._id = _id;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public byte recv_GetNumSwitchPoints()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetNumSwitchPoints_result result = new GetNumSwitchPoints_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetNumSwitchPoints failed: unknown result");
      }

      public bool SetSwitchPoint(RemoteValueID _id, byte _hours, byte _minutes, byte _setback)
      {
        send_SetSwitchPoint(_id, _hours, _minutes, _setback);
        return recv_SetSwitchPoint();
      }

      public void send_SetSwitchPoint(RemoteValueID _id, byte _hours, byte _minutes, byte _setback)
      {
        oprot_.WriteMessageBegin(new TMessage("SetSwitchPoint", TMessageType.Call, seqid_));
        SetSwitchPoint_args args = new SetSwitchPoint_args();
        args._id = _id;
        args._hours = _hours;
        args._minutes = _minutes;
        args._setback = _setback;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public bool recv_SetSwitchPoint()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SetSwitchPoint_result result = new SetSwitchPoint_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SetSwitchPoint failed: unknown result");
      }

      public bool RemoveSwitchPoint(RemoteValueID _id, byte _hours, byte _minutes)
      {
        send_RemoveSwitchPoint(_id, _hours, _minutes);
        return recv_RemoveSwitchPoint();
      }

      public void send_RemoveSwitchPoint(RemoteValueID _id, byte _hours, byte _minutes)
      {
        oprot_.WriteMessageBegin(new TMessage("RemoveSwitchPoint", TMessageType.Call, seqid_));
        RemoveSwitchPoint_args args = new RemoveSwitchPoint_args();
        args._id = _id;
        args._hours = _hours;
        args._minutes = _minutes;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public bool recv_RemoveSwitchPoint()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        RemoveSwitchPoint_result result = new RemoveSwitchPoint_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "RemoveSwitchPoint failed: unknown result");
      }

      public void ClearSwitchPoints(RemoteValueID _id)
      {
        send_ClearSwitchPoints(_id);
        recv_ClearSwitchPoints();
      }

      public void send_ClearSwitchPoints(RemoteValueID _id)
      {
        oprot_.WriteMessageBegin(new TMessage("ClearSwitchPoints", TMessageType.Call, seqid_));
        ClearSwitchPoints_args args = new ClearSwitchPoints_args();
        args._id = _id;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_ClearSwitchPoints()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        ClearSwitchPoints_result result = new ClearSwitchPoints_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      public GetSwitchPointReturnStruct GetSwitchPoint(RemoteValueID _id, byte _idx)
      {
        send_GetSwitchPoint(_id, _idx);
        return recv_GetSwitchPoint();
      }

      public void send_GetSwitchPoint(RemoteValueID _id, byte _idx)
      {
        oprot_.WriteMessageBegin(new TMessage("GetSwitchPoint", TMessageType.Call, seqid_));
        GetSwitchPoint_args args = new GetSwitchPoint_args();
        args._id = _id;
        args._idx = _idx;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public GetSwitchPointReturnStruct recv_GetSwitchPoint()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetSwitchPoint_result result = new GetSwitchPoint_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetSwitchPoint failed: unknown result");
      }

      public void SwitchAllOn(int _homeId)
      {
        send_SwitchAllOn(_homeId);
        recv_SwitchAllOn();
      }

      public void send_SwitchAllOn(int _homeId)
      {
        oprot_.WriteMessageBegin(new TMessage("SwitchAllOn", TMessageType.Call, seqid_));
        SwitchAllOn_args args = new SwitchAllOn_args();
        args._homeId = _homeId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_SwitchAllOn()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SwitchAllOn_result result = new SwitchAllOn_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      public void SwitchAllOff(int _homeId)
      {
        send_SwitchAllOff(_homeId);
        recv_SwitchAllOff();
      }

      public void send_SwitchAllOff(int _homeId)
      {
        oprot_.WriteMessageBegin(new TMessage("SwitchAllOff", TMessageType.Call, seqid_));
        SwitchAllOff_args args = new SwitchAllOff_args();
        args._homeId = _homeId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_SwitchAllOff()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SwitchAllOff_result result = new SwitchAllOff_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      public bool SetConfigParam(int _homeId, byte _nodeId, byte _param, int _value, byte _size)
      {
        send_SetConfigParam(_homeId, _nodeId, _param, _value, _size);
        return recv_SetConfigParam();
      }

      public void send_SetConfigParam(int _homeId, byte _nodeId, byte _param, int _value, byte _size)
      {
        oprot_.WriteMessageBegin(new TMessage("SetConfigParam", TMessageType.Call, seqid_));
        SetConfigParam_args args = new SetConfigParam_args();
        args._homeId = _homeId;
        args._nodeId = _nodeId;
        args._param = _param;
        args._value = _value;
        args._size = _size;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public bool recv_SetConfigParam()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SetConfigParam_result result = new SetConfigParam_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SetConfigParam failed: unknown result");
      }

      public void RequestConfigParam(int _homeId, byte _nodeId, byte _param)
      {
        send_RequestConfigParam(_homeId, _nodeId, _param);
        recv_RequestConfigParam();
      }

      public void send_RequestConfigParam(int _homeId, byte _nodeId, byte _param)
      {
        oprot_.WriteMessageBegin(new TMessage("RequestConfigParam", TMessageType.Call, seqid_));
        RequestConfigParam_args args = new RequestConfigParam_args();
        args._homeId = _homeId;
        args._nodeId = _nodeId;
        args._param = _param;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_RequestConfigParam()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        RequestConfigParam_result result = new RequestConfigParam_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      public void RequestAllConfigParams(int _homeId, byte _nodeId)
      {
        send_RequestAllConfigParams(_homeId, _nodeId);
        recv_RequestAllConfigParams();
      }

      public void send_RequestAllConfigParams(int _homeId, byte _nodeId)
      {
        oprot_.WriteMessageBegin(new TMessage("RequestAllConfigParams", TMessageType.Call, seqid_));
        RequestAllConfigParams_args args = new RequestAllConfigParams_args();
        args._homeId = _homeId;
        args._nodeId = _nodeId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_RequestAllConfigParams()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        RequestAllConfigParams_result result = new RequestAllConfigParams_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      public byte GetNumGroups(int _homeId, byte _nodeId)
      {
        send_GetNumGroups(_homeId, _nodeId);
        return recv_GetNumGroups();
      }

      public void send_GetNumGroups(int _homeId, byte _nodeId)
      {
        oprot_.WriteMessageBegin(new TMessage("GetNumGroups", TMessageType.Call, seqid_));
        GetNumGroups_args args = new GetNumGroups_args();
        args._homeId = _homeId;
        args._nodeId = _nodeId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public byte recv_GetNumGroups()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetNumGroups_result result = new GetNumGroups_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetNumGroups failed: unknown result");
      }

      public GetAssociationsReturnStruct GetAssociations(int _homeId, byte _nodeId, byte _groupIdx)
      {
        send_GetAssociations(_homeId, _nodeId, _groupIdx);
        return recv_GetAssociations();
      }

      public void send_GetAssociations(int _homeId, byte _nodeId, byte _groupIdx)
      {
        oprot_.WriteMessageBegin(new TMessage("GetAssociations", TMessageType.Call, seqid_));
        GetAssociations_args args = new GetAssociations_args();
        args._homeId = _homeId;
        args._nodeId = _nodeId;
        args._groupIdx = _groupIdx;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public GetAssociationsReturnStruct recv_GetAssociations()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetAssociations_result result = new GetAssociations_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetAssociations failed: unknown result");
      }

      public byte GetMaxAssociations(int _homeId, byte _nodeId, byte _groupIdx)
      {
        send_GetMaxAssociations(_homeId, _nodeId, _groupIdx);
        return recv_GetMaxAssociations();
      }

      public void send_GetMaxAssociations(int _homeId, byte _nodeId, byte _groupIdx)
      {
        oprot_.WriteMessageBegin(new TMessage("GetMaxAssociations", TMessageType.Call, seqid_));
        GetMaxAssociations_args args = new GetMaxAssociations_args();
        args._homeId = _homeId;
        args._nodeId = _nodeId;
        args._groupIdx = _groupIdx;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public byte recv_GetMaxAssociations()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetMaxAssociations_result result = new GetMaxAssociations_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetMaxAssociations failed: unknown result");
      }

      public string GetGroupLabel(int _homeId, byte _nodeId, byte _groupIdx)
      {
        send_GetGroupLabel(_homeId, _nodeId, _groupIdx);
        return recv_GetGroupLabel();
      }

      public void send_GetGroupLabel(int _homeId, byte _nodeId, byte _groupIdx)
      {
        oprot_.WriteMessageBegin(new TMessage("GetGroupLabel", TMessageType.Call, seqid_));
        GetGroupLabel_args args = new GetGroupLabel_args();
        args._homeId = _homeId;
        args._nodeId = _nodeId;
        args._groupIdx = _groupIdx;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public string recv_GetGroupLabel()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetGroupLabel_result result = new GetGroupLabel_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetGroupLabel failed: unknown result");
      }

      public void AddAssociation(int _homeId, byte _nodeId, byte _groupIdx, byte _targetNodeId)
      {
        send_AddAssociation(_homeId, _nodeId, _groupIdx, _targetNodeId);
        recv_AddAssociation();
      }

      public void send_AddAssociation(int _homeId, byte _nodeId, byte _groupIdx, byte _targetNodeId)
      {
        oprot_.WriteMessageBegin(new TMessage("AddAssociation", TMessageType.Call, seqid_));
        AddAssociation_args args = new AddAssociation_args();
        args._homeId = _homeId;
        args._nodeId = _nodeId;
        args._groupIdx = _groupIdx;
        args._targetNodeId = _targetNodeId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_AddAssociation()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        AddAssociation_result result = new AddAssociation_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      public void RemoveAssociation(int _homeId, byte _nodeId, byte _groupIdx, byte _targetNodeId)
      {
        send_RemoveAssociation(_homeId, _nodeId, _groupIdx, _targetNodeId);
        recv_RemoveAssociation();
      }

      public void send_RemoveAssociation(int _homeId, byte _nodeId, byte _groupIdx, byte _targetNodeId)
      {
        oprot_.WriteMessageBegin(new TMessage("RemoveAssociation", TMessageType.Call, seqid_));
        RemoveAssociation_args args = new RemoveAssociation_args();
        args._homeId = _homeId;
        args._nodeId = _nodeId;
        args._groupIdx = _groupIdx;
        args._targetNodeId = _targetNodeId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_RemoveAssociation()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        RemoveAssociation_result result = new RemoveAssociation_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      public void ResetController(int _homeId)
      {
        send_ResetController(_homeId);
        recv_ResetController();
      }

      public void send_ResetController(int _homeId)
      {
        oprot_.WriteMessageBegin(new TMessage("ResetController", TMessageType.Call, seqid_));
        ResetController_args args = new ResetController_args();
        args._homeId = _homeId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_ResetController()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        ResetController_result result = new ResetController_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      public void SoftReset(int _homeId)
      {
        send_SoftReset(_homeId);
        recv_SoftReset();
      }

      public void send_SoftReset(int _homeId)
      {
        oprot_.WriteMessageBegin(new TMessage("SoftReset", TMessageType.Call, seqid_));
        SoftReset_args args = new SoftReset_args();
        args._homeId = _homeId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_SoftReset()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SoftReset_result result = new SoftReset_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      public bool BeginControllerCommand(int _homeId, DriverControllerCommand _command, bool _highPower, byte _nodeId, byte _arg)
      {
        send_BeginControllerCommand(_homeId, _command, _highPower, _nodeId, _arg);
        return recv_BeginControllerCommand();
      }

      public void send_BeginControllerCommand(int _homeId, DriverControllerCommand _command, bool _highPower, byte _nodeId, byte _arg)
      {
        oprot_.WriteMessageBegin(new TMessage("BeginControllerCommand", TMessageType.Call, seqid_));
        BeginControllerCommand_args args = new BeginControllerCommand_args();
        args._homeId = _homeId;
        args._command = _command;
        args._highPower = _highPower;
        args._nodeId = _nodeId;
        args._arg = _arg;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public bool recv_BeginControllerCommand()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        BeginControllerCommand_result result = new BeginControllerCommand_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "BeginControllerCommand failed: unknown result");
      }

      public bool CancelControllerCommand(int _homeId)
      {
        send_CancelControllerCommand(_homeId);
        return recv_CancelControllerCommand();
      }

      public void send_CancelControllerCommand(int _homeId)
      {
        oprot_.WriteMessageBegin(new TMessage("CancelControllerCommand", TMessageType.Call, seqid_));
        CancelControllerCommand_args args = new CancelControllerCommand_args();
        args._homeId = _homeId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public bool recv_CancelControllerCommand()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        CancelControllerCommand_result result = new CancelControllerCommand_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "CancelControllerCommand failed: unknown result");
      }

      public void TestNetworkNode(int _homeId, byte _nodeId, int _count)
      {
        send_TestNetworkNode(_homeId, _nodeId, _count);
        recv_TestNetworkNode();
      }

      public void send_TestNetworkNode(int _homeId, byte _nodeId, int _count)
      {
        oprot_.WriteMessageBegin(new TMessage("TestNetworkNode", TMessageType.Call, seqid_));
        TestNetworkNode_args args = new TestNetworkNode_args();
        args._homeId = _homeId;
        args._nodeId = _nodeId;
        args._count = _count;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_TestNetworkNode()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        TestNetworkNode_result result = new TestNetworkNode_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      public void TestNetwork(int _homeId, int _count)
      {
        send_TestNetwork(_homeId, _count);
        recv_TestNetwork();
      }

      public void send_TestNetwork(int _homeId, int _count)
      {
        oprot_.WriteMessageBegin(new TMessage("TestNetwork", TMessageType.Call, seqid_));
        TestNetwork_args args = new TestNetwork_args();
        args._homeId = _homeId;
        args._count = _count;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_TestNetwork()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        TestNetwork_result result = new TestNetwork_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      public void HealNetworkNode(int _homeId, byte _nodeId, bool _doRR)
      {
        send_HealNetworkNode(_homeId, _nodeId, _doRR);
        recv_HealNetworkNode();
      }

      public void send_HealNetworkNode(int _homeId, byte _nodeId, bool _doRR)
      {
        oprot_.WriteMessageBegin(new TMessage("HealNetworkNode", TMessageType.Call, seqid_));
        HealNetworkNode_args args = new HealNetworkNode_args();
        args._homeId = _homeId;
        args._nodeId = _nodeId;
        args._doRR = _doRR;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_HealNetworkNode()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        HealNetworkNode_result result = new HealNetworkNode_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      public void HealNetwork(int _homeId, bool _doRR)
      {
        send_HealNetwork(_homeId, _doRR);
        recv_HealNetwork();
      }

      public void send_HealNetwork(int _homeId, bool _doRR)
      {
        oprot_.WriteMessageBegin(new TMessage("HealNetwork", TMessageType.Call, seqid_));
        HealNetwork_args args = new HealNetwork_args();
        args._homeId = _homeId;
        args._doRR = _doRR;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_HealNetwork()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        HealNetwork_result result = new HealNetwork_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      public byte GetNumScenes()
      {
        send_GetNumScenes();
        return recv_GetNumScenes();
      }

      public void send_GetNumScenes()
      {
        oprot_.WriteMessageBegin(new TMessage("GetNumScenes", TMessageType.Call, seqid_));
        GetNumScenes_args args = new GetNumScenes_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public byte recv_GetNumScenes()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetNumScenes_result result = new GetNumScenes_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetNumScenes failed: unknown result");
      }

      public GetAllScenesReturnStruct GetAllScenes()
      {
        send_GetAllScenes();
        return recv_GetAllScenes();
      }

      public void send_GetAllScenes()
      {
        oprot_.WriteMessageBegin(new TMessage("GetAllScenes", TMessageType.Call, seqid_));
        GetAllScenes_args args = new GetAllScenes_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public GetAllScenesReturnStruct recv_GetAllScenes()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetAllScenes_result result = new GetAllScenes_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetAllScenes failed: unknown result");
      }

      public void RemoveAllScenes(int _homeId)
      {
        send_RemoveAllScenes(_homeId);
        recv_RemoveAllScenes();
      }

      public void send_RemoveAllScenes(int _homeId)
      {
        oprot_.WriteMessageBegin(new TMessage("RemoveAllScenes", TMessageType.Call, seqid_));
        RemoveAllScenes_args args = new RemoveAllScenes_args();
        args._homeId = _homeId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_RemoveAllScenes()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        RemoveAllScenes_result result = new RemoveAllScenes_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      public byte CreateScene()
      {
        send_CreateScene();
        return recv_CreateScene();
      }

      public void send_CreateScene()
      {
        oprot_.WriteMessageBegin(new TMessage("CreateScene", TMessageType.Call, seqid_));
        CreateScene_args args = new CreateScene_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public byte recv_CreateScene()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        CreateScene_result result = new CreateScene_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "CreateScene failed: unknown result");
      }

      public bool RemoveScene(byte _sceneId)
      {
        send_RemoveScene(_sceneId);
        return recv_RemoveScene();
      }

      public void send_RemoveScene(byte _sceneId)
      {
        oprot_.WriteMessageBegin(new TMessage("RemoveScene", TMessageType.Call, seqid_));
        RemoveScene_args args = new RemoveScene_args();
        args._sceneId = _sceneId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public bool recv_RemoveScene()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        RemoveScene_result result = new RemoveScene_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "RemoveScene failed: unknown result");
      }

      public bool AddSceneValue_Bool(byte _sceneId, RemoteValueID _valueId, bool _value)
      {
        send_AddSceneValue_Bool(_sceneId, _valueId, _value);
        return recv_AddSceneValue_Bool();
      }

      public void send_AddSceneValue_Bool(byte _sceneId, RemoteValueID _valueId, bool _value)
      {
        oprot_.WriteMessageBegin(new TMessage("AddSceneValue_Bool", TMessageType.Call, seqid_));
        AddSceneValue_Bool_args args = new AddSceneValue_Bool_args();
        args._sceneId = _sceneId;
        args._valueId = _valueId;
        args._value = _value;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public bool recv_AddSceneValue_Bool()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        AddSceneValue_Bool_result result = new AddSceneValue_Bool_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "AddSceneValue_Bool failed: unknown result");
      }

      public bool AddSceneValue_Uint8(byte _sceneId, RemoteValueID _valueId, byte _value)
      {
        send_AddSceneValue_Uint8(_sceneId, _valueId, _value);
        return recv_AddSceneValue_Uint8();
      }

      public void send_AddSceneValue_Uint8(byte _sceneId, RemoteValueID _valueId, byte _value)
      {
        oprot_.WriteMessageBegin(new TMessage("AddSceneValue_Uint8", TMessageType.Call, seqid_));
        AddSceneValue_Uint8_args args = new AddSceneValue_Uint8_args();
        args._sceneId = _sceneId;
        args._valueId = _valueId;
        args._value = _value;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public bool recv_AddSceneValue_Uint8()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        AddSceneValue_Uint8_result result = new AddSceneValue_Uint8_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "AddSceneValue_Uint8 failed: unknown result");
      }

      public bool AddSceneValue_Float(byte _sceneId, RemoteValueID _valueId, double _value)
      {
        send_AddSceneValue_Float(_sceneId, _valueId, _value);
        return recv_AddSceneValue_Float();
      }

      public void send_AddSceneValue_Float(byte _sceneId, RemoteValueID _valueId, double _value)
      {
        oprot_.WriteMessageBegin(new TMessage("AddSceneValue_Float", TMessageType.Call, seqid_));
        AddSceneValue_Float_args args = new AddSceneValue_Float_args();
        args._sceneId = _sceneId;
        args._valueId = _valueId;
        args._value = _value;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public bool recv_AddSceneValue_Float()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        AddSceneValue_Float_result result = new AddSceneValue_Float_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "AddSceneValue_Float failed: unknown result");
      }

      public bool AddSceneValue_Int32(byte _sceneId, RemoteValueID _valueId, int _value)
      {
        send_AddSceneValue_Int32(_sceneId, _valueId, _value);
        return recv_AddSceneValue_Int32();
      }

      public void send_AddSceneValue_Int32(byte _sceneId, RemoteValueID _valueId, int _value)
      {
        oprot_.WriteMessageBegin(new TMessage("AddSceneValue_Int32", TMessageType.Call, seqid_));
        AddSceneValue_Int32_args args = new AddSceneValue_Int32_args();
        args._sceneId = _sceneId;
        args._valueId = _valueId;
        args._value = _value;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public bool recv_AddSceneValue_Int32()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        AddSceneValue_Int32_result result = new AddSceneValue_Int32_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "AddSceneValue_Int32 failed: unknown result");
      }

      public bool AddSceneValue_Int16(byte _sceneId, RemoteValueID _valueId, short _value)
      {
        send_AddSceneValue_Int16(_sceneId, _valueId, _value);
        return recv_AddSceneValue_Int16();
      }

      public void send_AddSceneValue_Int16(byte _sceneId, RemoteValueID _valueId, short _value)
      {
        oprot_.WriteMessageBegin(new TMessage("AddSceneValue_Int16", TMessageType.Call, seqid_));
        AddSceneValue_Int16_args args = new AddSceneValue_Int16_args();
        args._sceneId = _sceneId;
        args._valueId = _valueId;
        args._value = _value;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public bool recv_AddSceneValue_Int16()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        AddSceneValue_Int16_result result = new AddSceneValue_Int16_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "AddSceneValue_Int16 failed: unknown result");
      }

      public bool AddSceneValue_String(byte _sceneId, RemoteValueID _valueId, string _value)
      {
        send_AddSceneValue_String(_sceneId, _valueId, _value);
        return recv_AddSceneValue_String();
      }

      public void send_AddSceneValue_String(byte _sceneId, RemoteValueID _valueId, string _value)
      {
        oprot_.WriteMessageBegin(new TMessage("AddSceneValue_String", TMessageType.Call, seqid_));
        AddSceneValue_String_args args = new AddSceneValue_String_args();
        args._sceneId = _sceneId;
        args._valueId = _valueId;
        args._value = _value;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public bool recv_AddSceneValue_String()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        AddSceneValue_String_result result = new AddSceneValue_String_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "AddSceneValue_String failed: unknown result");
      }

      public bool AddSceneValueListSelection_String(byte _sceneId, RemoteValueID _valueId, string _value)
      {
        send_AddSceneValueListSelection_String(_sceneId, _valueId, _value);
        return recv_AddSceneValueListSelection_String();
      }

      public void send_AddSceneValueListSelection_String(byte _sceneId, RemoteValueID _valueId, string _value)
      {
        oprot_.WriteMessageBegin(new TMessage("AddSceneValueListSelection_String", TMessageType.Call, seqid_));
        AddSceneValueListSelection_String_args args = new AddSceneValueListSelection_String_args();
        args._sceneId = _sceneId;
        args._valueId = _valueId;
        args._value = _value;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public bool recv_AddSceneValueListSelection_String()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        AddSceneValueListSelection_String_result result = new AddSceneValueListSelection_String_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "AddSceneValueListSelection_String failed: unknown result");
      }

      public bool AddSceneValueListSelection_Int32(byte _sceneId, RemoteValueID _valueId, int _value)
      {
        send_AddSceneValueListSelection_Int32(_sceneId, _valueId, _value);
        return recv_AddSceneValueListSelection_Int32();
      }

      public void send_AddSceneValueListSelection_Int32(byte _sceneId, RemoteValueID _valueId, int _value)
      {
        oprot_.WriteMessageBegin(new TMessage("AddSceneValueListSelection_Int32", TMessageType.Call, seqid_));
        AddSceneValueListSelection_Int32_args args = new AddSceneValueListSelection_Int32_args();
        args._sceneId = _sceneId;
        args._valueId = _valueId;
        args._value = _value;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public bool recv_AddSceneValueListSelection_Int32()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        AddSceneValueListSelection_Int32_result result = new AddSceneValueListSelection_Int32_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "AddSceneValueListSelection_Int32 failed: unknown result");
      }

      public bool RemoveSceneValue(byte _sceneId, RemoteValueID _valueId)
      {
        send_RemoveSceneValue(_sceneId, _valueId);
        return recv_RemoveSceneValue();
      }

      public void send_RemoveSceneValue(byte _sceneId, RemoteValueID _valueId)
      {
        oprot_.WriteMessageBegin(new TMessage("RemoveSceneValue", TMessageType.Call, seqid_));
        RemoveSceneValue_args args = new RemoveSceneValue_args();
        args._sceneId = _sceneId;
        args._valueId = _valueId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public bool recv_RemoveSceneValue()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        RemoveSceneValue_result result = new RemoveSceneValue_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "RemoveSceneValue failed: unknown result");
      }

      public SceneGetValuesReturnStruct SceneGetValues(byte _sceneId)
      {
        send_SceneGetValues(_sceneId);
        return recv_SceneGetValues();
      }

      public void send_SceneGetValues(byte _sceneId)
      {
        oprot_.WriteMessageBegin(new TMessage("SceneGetValues", TMessageType.Call, seqid_));
        SceneGetValues_args args = new SceneGetValues_args();
        args._sceneId = _sceneId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public SceneGetValuesReturnStruct recv_SceneGetValues()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SceneGetValues_result result = new SceneGetValues_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SceneGetValues failed: unknown result");
      }

      public Bool_Bool SceneGetValueAsBool(byte _sceneId, RemoteValueID _valueId)
      {
        send_SceneGetValueAsBool(_sceneId, _valueId);
        return recv_SceneGetValueAsBool();
      }

      public void send_SceneGetValueAsBool(byte _sceneId, RemoteValueID _valueId)
      {
        oprot_.WriteMessageBegin(new TMessage("SceneGetValueAsBool", TMessageType.Call, seqid_));
        SceneGetValueAsBool_args args = new SceneGetValueAsBool_args();
        args._sceneId = _sceneId;
        args._valueId = _valueId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public Bool_Bool recv_SceneGetValueAsBool()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SceneGetValueAsBool_result result = new SceneGetValueAsBool_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SceneGetValueAsBool failed: unknown result");
      }

      public Bool_UInt8 SceneGetValueAsByte(byte _sceneId, RemoteValueID _valueId)
      {
        send_SceneGetValueAsByte(_sceneId, _valueId);
        return recv_SceneGetValueAsByte();
      }

      public void send_SceneGetValueAsByte(byte _sceneId, RemoteValueID _valueId)
      {
        oprot_.WriteMessageBegin(new TMessage("SceneGetValueAsByte", TMessageType.Call, seqid_));
        SceneGetValueAsByte_args args = new SceneGetValueAsByte_args();
        args._sceneId = _sceneId;
        args._valueId = _valueId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public Bool_UInt8 recv_SceneGetValueAsByte()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SceneGetValueAsByte_result result = new SceneGetValueAsByte_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SceneGetValueAsByte failed: unknown result");
      }

      public Bool_Float SceneGetValueAsFloat(byte _sceneId, RemoteValueID _valueId)
      {
        send_SceneGetValueAsFloat(_sceneId, _valueId);
        return recv_SceneGetValueAsFloat();
      }

      public void send_SceneGetValueAsFloat(byte _sceneId, RemoteValueID _valueId)
      {
        oprot_.WriteMessageBegin(new TMessage("SceneGetValueAsFloat", TMessageType.Call, seqid_));
        SceneGetValueAsFloat_args args = new SceneGetValueAsFloat_args();
        args._sceneId = _sceneId;
        args._valueId = _valueId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public Bool_Float recv_SceneGetValueAsFloat()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SceneGetValueAsFloat_result result = new SceneGetValueAsFloat_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SceneGetValueAsFloat failed: unknown result");
      }

      public Bool_Int SceneGetValueAsInt(byte _sceneId, RemoteValueID _valueId)
      {
        send_SceneGetValueAsInt(_sceneId, _valueId);
        return recv_SceneGetValueAsInt();
      }

      public void send_SceneGetValueAsInt(byte _sceneId, RemoteValueID _valueId)
      {
        oprot_.WriteMessageBegin(new TMessage("SceneGetValueAsInt", TMessageType.Call, seqid_));
        SceneGetValueAsInt_args args = new SceneGetValueAsInt_args();
        args._sceneId = _sceneId;
        args._valueId = _valueId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public Bool_Int recv_SceneGetValueAsInt()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SceneGetValueAsInt_result result = new SceneGetValueAsInt_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SceneGetValueAsInt failed: unknown result");
      }

      public Bool_Int16 SceneGetValueAsShort(byte _sceneId, RemoteValueID _valueId)
      {
        send_SceneGetValueAsShort(_sceneId, _valueId);
        return recv_SceneGetValueAsShort();
      }

      public void send_SceneGetValueAsShort(byte _sceneId, RemoteValueID _valueId)
      {
        oprot_.WriteMessageBegin(new TMessage("SceneGetValueAsShort", TMessageType.Call, seqid_));
        SceneGetValueAsShort_args args = new SceneGetValueAsShort_args();
        args._sceneId = _sceneId;
        args._valueId = _valueId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public Bool_Int16 recv_SceneGetValueAsShort()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SceneGetValueAsShort_result result = new SceneGetValueAsShort_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SceneGetValueAsShort failed: unknown result");
      }

      public Bool_String SceneGetValueAsString(byte _sceneId, RemoteValueID _valueId)
      {
        send_SceneGetValueAsString(_sceneId, _valueId);
        return recv_SceneGetValueAsString();
      }

      public void send_SceneGetValueAsString(byte _sceneId, RemoteValueID _valueId)
      {
        oprot_.WriteMessageBegin(new TMessage("SceneGetValueAsString", TMessageType.Call, seqid_));
        SceneGetValueAsString_args args = new SceneGetValueAsString_args();
        args._sceneId = _sceneId;
        args._valueId = _valueId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public Bool_String recv_SceneGetValueAsString()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SceneGetValueAsString_result result = new SceneGetValueAsString_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SceneGetValueAsString failed: unknown result");
      }

      public Bool_String SceneGetValueListSelection_String(byte _sceneId, RemoteValueID _valueId)
      {
        send_SceneGetValueListSelection_String(_sceneId, _valueId);
        return recv_SceneGetValueListSelection_String();
      }

      public void send_SceneGetValueListSelection_String(byte _sceneId, RemoteValueID _valueId)
      {
        oprot_.WriteMessageBegin(new TMessage("SceneGetValueListSelection_String", TMessageType.Call, seqid_));
        SceneGetValueListSelection_String_args args = new SceneGetValueListSelection_String_args();
        args._sceneId = _sceneId;
        args._valueId = _valueId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public Bool_String recv_SceneGetValueListSelection_String()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SceneGetValueListSelection_String_result result = new SceneGetValueListSelection_String_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SceneGetValueListSelection_String failed: unknown result");
      }

      public Bool_Int SceneGetValueListSelection_Int32(byte _sceneId, RemoteValueID _valueId)
      {
        send_SceneGetValueListSelection_Int32(_sceneId, _valueId);
        return recv_SceneGetValueListSelection_Int32();
      }

      public void send_SceneGetValueListSelection_Int32(byte _sceneId, RemoteValueID _valueId)
      {
        oprot_.WriteMessageBegin(new TMessage("SceneGetValueListSelection_Int32", TMessageType.Call, seqid_));
        SceneGetValueListSelection_Int32_args args = new SceneGetValueListSelection_Int32_args();
        args._sceneId = _sceneId;
        args._valueId = _valueId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public Bool_Int recv_SceneGetValueListSelection_Int32()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SceneGetValueListSelection_Int32_result result = new SceneGetValueListSelection_Int32_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SceneGetValueListSelection_Int32 failed: unknown result");
      }

      public bool SetSceneValue_Bool(byte _sceneId, RemoteValueID _valueId, bool _value)
      {
        send_SetSceneValue_Bool(_sceneId, _valueId, _value);
        return recv_SetSceneValue_Bool();
      }

      public void send_SetSceneValue_Bool(byte _sceneId, RemoteValueID _valueId, bool _value)
      {
        oprot_.WriteMessageBegin(new TMessage("SetSceneValue_Bool", TMessageType.Call, seqid_));
        SetSceneValue_Bool_args args = new SetSceneValue_Bool_args();
        args._sceneId = _sceneId;
        args._valueId = _valueId;
        args._value = _value;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public bool recv_SetSceneValue_Bool()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SetSceneValue_Bool_result result = new SetSceneValue_Bool_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SetSceneValue_Bool failed: unknown result");
      }

      public bool SetSceneValue_Uint8(byte _sceneId, RemoteValueID _valueId, byte _value)
      {
        send_SetSceneValue_Uint8(_sceneId, _valueId, _value);
        return recv_SetSceneValue_Uint8();
      }

      public void send_SetSceneValue_Uint8(byte _sceneId, RemoteValueID _valueId, byte _value)
      {
        oprot_.WriteMessageBegin(new TMessage("SetSceneValue_Uint8", TMessageType.Call, seqid_));
        SetSceneValue_Uint8_args args = new SetSceneValue_Uint8_args();
        args._sceneId = _sceneId;
        args._valueId = _valueId;
        args._value = _value;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public bool recv_SetSceneValue_Uint8()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SetSceneValue_Uint8_result result = new SetSceneValue_Uint8_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SetSceneValue_Uint8 failed: unknown result");
      }

      public bool SetSceneValue_Float(byte _sceneId, RemoteValueID _valueId, double _value)
      {
        send_SetSceneValue_Float(_sceneId, _valueId, _value);
        return recv_SetSceneValue_Float();
      }

      public void send_SetSceneValue_Float(byte _sceneId, RemoteValueID _valueId, double _value)
      {
        oprot_.WriteMessageBegin(new TMessage("SetSceneValue_Float", TMessageType.Call, seqid_));
        SetSceneValue_Float_args args = new SetSceneValue_Float_args();
        args._sceneId = _sceneId;
        args._valueId = _valueId;
        args._value = _value;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public bool recv_SetSceneValue_Float()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SetSceneValue_Float_result result = new SetSceneValue_Float_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SetSceneValue_Float failed: unknown result");
      }

      public bool SetSceneValue_Int32(byte _sceneId, RemoteValueID _valueId, int _value)
      {
        send_SetSceneValue_Int32(_sceneId, _valueId, _value);
        return recv_SetSceneValue_Int32();
      }

      public void send_SetSceneValue_Int32(byte _sceneId, RemoteValueID _valueId, int _value)
      {
        oprot_.WriteMessageBegin(new TMessage("SetSceneValue_Int32", TMessageType.Call, seqid_));
        SetSceneValue_Int32_args args = new SetSceneValue_Int32_args();
        args._sceneId = _sceneId;
        args._valueId = _valueId;
        args._value = _value;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public bool recv_SetSceneValue_Int32()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SetSceneValue_Int32_result result = new SetSceneValue_Int32_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SetSceneValue_Int32 failed: unknown result");
      }

      public bool SetSceneValue_Int16(byte _sceneId, RemoteValueID _valueId, short _value)
      {
        send_SetSceneValue_Int16(_sceneId, _valueId, _value);
        return recv_SetSceneValue_Int16();
      }

      public void send_SetSceneValue_Int16(byte _sceneId, RemoteValueID _valueId, short _value)
      {
        oprot_.WriteMessageBegin(new TMessage("SetSceneValue_Int16", TMessageType.Call, seqid_));
        SetSceneValue_Int16_args args = new SetSceneValue_Int16_args();
        args._sceneId = _sceneId;
        args._valueId = _valueId;
        args._value = _value;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public bool recv_SetSceneValue_Int16()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SetSceneValue_Int16_result result = new SetSceneValue_Int16_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SetSceneValue_Int16 failed: unknown result");
      }

      public bool SetSceneValue_String(byte _sceneId, RemoteValueID _valueId, string _value)
      {
        send_SetSceneValue_String(_sceneId, _valueId, _value);
        return recv_SetSceneValue_String();
      }

      public void send_SetSceneValue_String(byte _sceneId, RemoteValueID _valueId, string _value)
      {
        oprot_.WriteMessageBegin(new TMessage("SetSceneValue_String", TMessageType.Call, seqid_));
        SetSceneValue_String_args args = new SetSceneValue_String_args();
        args._sceneId = _sceneId;
        args._valueId = _valueId;
        args._value = _value;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public bool recv_SetSceneValue_String()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SetSceneValue_String_result result = new SetSceneValue_String_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SetSceneValue_String failed: unknown result");
      }

      public bool SetSceneValueListSelection_String(byte _sceneId, RemoteValueID _valueId, string _value)
      {
        send_SetSceneValueListSelection_String(_sceneId, _valueId, _value);
        return recv_SetSceneValueListSelection_String();
      }

      public void send_SetSceneValueListSelection_String(byte _sceneId, RemoteValueID _valueId, string _value)
      {
        oprot_.WriteMessageBegin(new TMessage("SetSceneValueListSelection_String", TMessageType.Call, seqid_));
        SetSceneValueListSelection_String_args args = new SetSceneValueListSelection_String_args();
        args._sceneId = _sceneId;
        args._valueId = _valueId;
        args._value = _value;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public bool recv_SetSceneValueListSelection_String()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SetSceneValueListSelection_String_result result = new SetSceneValueListSelection_String_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SetSceneValueListSelection_String failed: unknown result");
      }

      public bool SetSceneValueListSelection_Int32(byte _sceneId, RemoteValueID _valueId, int _value)
      {
        send_SetSceneValueListSelection_Int32(_sceneId, _valueId, _value);
        return recv_SetSceneValueListSelection_Int32();
      }

      public void send_SetSceneValueListSelection_Int32(byte _sceneId, RemoteValueID _valueId, int _value)
      {
        oprot_.WriteMessageBegin(new TMessage("SetSceneValueListSelection_Int32", TMessageType.Call, seqid_));
        SetSceneValueListSelection_Int32_args args = new SetSceneValueListSelection_Int32_args();
        args._sceneId = _sceneId;
        args._valueId = _valueId;
        args._value = _value;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public bool recv_SetSceneValueListSelection_Int32()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SetSceneValueListSelection_Int32_result result = new SetSceneValueListSelection_Int32_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SetSceneValueListSelection_Int32 failed: unknown result");
      }

      public string GetSceneLabel(byte _sceneId)
      {
        send_GetSceneLabel(_sceneId);
        return recv_GetSceneLabel();
      }

      public void send_GetSceneLabel(byte _sceneId)
      {
        oprot_.WriteMessageBegin(new TMessage("GetSceneLabel", TMessageType.Call, seqid_));
        GetSceneLabel_args args = new GetSceneLabel_args();
        args._sceneId = _sceneId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public string recv_GetSceneLabel()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetSceneLabel_result result = new GetSceneLabel_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetSceneLabel failed: unknown result");
      }

      public void SetSceneLabel(byte _sceneId, string _value)
      {
        send_SetSceneLabel(_sceneId, _value);
        recv_SetSceneLabel();
      }

      public void send_SetSceneLabel(byte _sceneId, string _value)
      {
        oprot_.WriteMessageBegin(new TMessage("SetSceneLabel", TMessageType.Call, seqid_));
        SetSceneLabel_args args = new SetSceneLabel_args();
        args._sceneId = _sceneId;
        args._value = _value;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_SetSceneLabel()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SetSceneLabel_result result = new SetSceneLabel_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      public bool SceneExists(byte _sceneId)
      {
        send_SceneExists(_sceneId);
        return recv_SceneExists();
      }

      public void send_SceneExists(byte _sceneId)
      {
        oprot_.WriteMessageBegin(new TMessage("SceneExists", TMessageType.Call, seqid_));
        SceneExists_args args = new SceneExists_args();
        args._sceneId = _sceneId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public bool recv_SceneExists()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SceneExists_result result = new SceneExists_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SceneExists failed: unknown result");
      }

      public bool ActivateScene(byte _sceneId)
      {
        send_ActivateScene(_sceneId);
        return recv_ActivateScene();
      }

      public void send_ActivateScene(byte _sceneId)
      {
        oprot_.WriteMessageBegin(new TMessage("ActivateScene", TMessageType.Call, seqid_));
        ActivateScene_args args = new ActivateScene_args();
        args._sceneId = _sceneId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public bool recv_ActivateScene()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        ActivateScene_result result = new ActivateScene_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ActivateScene failed: unknown result");
      }

      public GetDriverStatisticsReturnStruct GetDriverStatistics(int _homeId)
      {
        send_GetDriverStatistics(_homeId);
        return recv_GetDriverStatistics();
      }

      public void send_GetDriverStatistics(int _homeId)
      {
        oprot_.WriteMessageBegin(new TMessage("GetDriverStatistics", TMessageType.Call, seqid_));
        GetDriverStatistics_args args = new GetDriverStatistics_args();
        args._homeId = _homeId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public GetDriverStatisticsReturnStruct recv_GetDriverStatistics()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetDriverStatistics_result result = new GetDriverStatistics_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetDriverStatistics failed: unknown result");
      }

      public GetNodeStatisticsReturnStruct GetNodeStatistics(int _homeId, byte _nodeId)
      {
        send_GetNodeStatistics(_homeId, _nodeId);
        return recv_GetNodeStatistics();
      }

      public void send_GetNodeStatistics(int _homeId, byte _nodeId)
      {
        oprot_.WriteMessageBegin(new TMessage("GetNodeStatistics", TMessageType.Call, seqid_));
        GetNodeStatistics_args args = new GetNodeStatistics_args();
        args._homeId = _homeId;
        args._nodeId = _nodeId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public GetNodeStatisticsReturnStruct recv_GetNodeStatistics()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetNodeStatistics_result result = new GetNodeStatistics_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetNodeStatistics failed: unknown result");
      }

      public void SendAllValues()
      {
        send_SendAllValues();
        recv_SendAllValues();
      }

      public void send_SendAllValues()
      {
        oprot_.WriteMessageBegin(new TMessage("SendAllValues", TMessageType.Call, seqid_));
        SendAllValues_args args = new SendAllValues_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_SendAllValues()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SendAllValues_result result = new SendAllValues_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      public void ping()
      {
        send_ping();
        recv_ping();
      }

      public void send_ping()
      {
        oprot_.WriteMessageBegin(new TMessage("ping", TMessageType.Call, seqid_));
        ping_args args = new ping_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_ping()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        ping_result result = new ping_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

    }
    public class Processor : TProcessor {
      public Processor(Iface iface)
      {
        iface_ = iface;
        processMap_["WriteConfig"] = WriteConfig_Process;
        processMap_["GetControllerNodeId"] = GetControllerNodeId_Process;
        processMap_["GetSUCNodeId"] = GetSUCNodeId_Process;
        processMap_["IsPrimaryController"] = IsPrimaryController_Process;
        processMap_["IsStaticUpdateController"] = IsStaticUpdateController_Process;
        processMap_["IsBridgeController"] = IsBridgeController_Process;
        processMap_["GetLibraryVersion"] = GetLibraryVersion_Process;
        processMap_["GetLibraryTypeName"] = GetLibraryTypeName_Process;
        processMap_["GetSendQueueCount"] = GetSendQueueCount_Process;
        processMap_["LogDriverStatistics"] = LogDriverStatistics_Process;
        processMap_["GetControllerInterfaceType"] = GetControllerInterfaceType_Process;
        processMap_["GetControllerPath"] = GetControllerPath_Process;
        processMap_["GetPollInterval"] = GetPollInterval_Process;
        processMap_["SetPollInterval"] = SetPollInterval_Process;
        processMap_["EnablePoll"] = EnablePoll_Process;
        processMap_["DisablePoll"] = DisablePoll_Process;
        processMap_["isPolled"] = isPolled_Process;
        processMap_["SetPollIntensity"] = SetPollIntensity_Process;
        processMap_["RefreshNodeInfo"] = RefreshNodeInfo_Process;
        processMap_["RequestNodeState"] = RequestNodeState_Process;
        processMap_["RequestNodeDynamic"] = RequestNodeDynamic_Process;
        processMap_["IsNodeListeningDevice"] = IsNodeListeningDevice_Process;
        processMap_["IsNodeFrequentListeningDevice"] = IsNodeFrequentListeningDevice_Process;
        processMap_["IsNodeBeamingDevice"] = IsNodeBeamingDevice_Process;
        processMap_["IsNodeRoutingDevice"] = IsNodeRoutingDevice_Process;
        processMap_["IsNodeSecurityDevice"] = IsNodeSecurityDevice_Process;
        processMap_["GetNodeMaxBaudRate"] = GetNodeMaxBaudRate_Process;
        processMap_["GetNodeVersion"] = GetNodeVersion_Process;
        processMap_["GetNodeSecurity"] = GetNodeSecurity_Process;
        processMap_["GetNodeBasic"] = GetNodeBasic_Process;
        processMap_["GetNodeGeneric"] = GetNodeGeneric_Process;
        processMap_["GetNodeSpecific"] = GetNodeSpecific_Process;
        processMap_["GetNodeType"] = GetNodeType_Process;
        processMap_["GetNodeNeighbors"] = GetNodeNeighbors_Process;
        processMap_["GetNodeManufacturerName"] = GetNodeManufacturerName_Process;
        processMap_["GetNodeProductName"] = GetNodeProductName_Process;
        processMap_["GetNodeName"] = GetNodeName_Process;
        processMap_["GetNodeLocation"] = GetNodeLocation_Process;
        processMap_["GetNodeManufacturerId"] = GetNodeManufacturerId_Process;
        processMap_["GetNodeProductType"] = GetNodeProductType_Process;
        processMap_["GetNodeProductId"] = GetNodeProductId_Process;
        processMap_["SetNodeManufacturerName"] = SetNodeManufacturerName_Process;
        processMap_["SetNodeProductName"] = SetNodeProductName_Process;
        processMap_["SetNodeName"] = SetNodeName_Process;
        processMap_["SetNodeLocation"] = SetNodeLocation_Process;
        processMap_["SetNodeOn"] = SetNodeOn_Process;
        processMap_["SetNodeOff"] = SetNodeOff_Process;
        processMap_["SetNodeLevel"] = SetNodeLevel_Process;
        processMap_["IsNodeInfoReceived"] = IsNodeInfoReceived_Process;
        processMap_["GetNodeClassInformation"] = GetNodeClassInformation_Process;
        processMap_["IsNodeAwake"] = IsNodeAwake_Process;
        processMap_["IsNodeFailed"] = IsNodeFailed_Process;
        processMap_["GetNodeQueryStage"] = GetNodeQueryStage_Process;
        processMap_["GetValueLabel"] = GetValueLabel_Process;
        processMap_["SetValueLabel"] = SetValueLabel_Process;
        processMap_["GetValueUnits"] = GetValueUnits_Process;
        processMap_["SetValueUnits"] = SetValueUnits_Process;
        processMap_["GetValueHelp"] = GetValueHelp_Process;
        processMap_["SetValueHelp"] = SetValueHelp_Process;
        processMap_["GetValueMin"] = GetValueMin_Process;
        processMap_["GetValueMax"] = GetValueMax_Process;
        processMap_["IsValueReadOnly"] = IsValueReadOnly_Process;
        processMap_["IsValueWriteOnly"] = IsValueWriteOnly_Process;
        processMap_["IsValueSet"] = IsValueSet_Process;
        processMap_["IsValuePolled"] = IsValuePolled_Process;
        processMap_["GetValueAsBool"] = GetValueAsBool_Process;
        processMap_["GetValueAsByte"] = GetValueAsByte_Process;
        processMap_["GetValueAsFloat"] = GetValueAsFloat_Process;
        processMap_["GetValueAsInt"] = GetValueAsInt_Process;
        processMap_["GetValueAsShort"] = GetValueAsShort_Process;
        processMap_["GetValueAsString"] = GetValueAsString_Process;
        processMap_["GetValueListSelection_String"] = GetValueListSelection_String_Process;
        processMap_["GetValueListSelection_Int32"] = GetValueListSelection_Int32_Process;
        processMap_["GetValueListItems"] = GetValueListItems_Process;
        processMap_["GetValueFloatPrecision"] = GetValueFloatPrecision_Process;
        processMap_["SetValue_Bool"] = SetValue_Bool_Process;
        processMap_["SetValue_UInt8"] = SetValue_UInt8_Process;
        processMap_["SetValue_UInt8_UInt8"] = SetValue_UInt8_UInt8_Process;
        processMap_["SetValue_Float"] = SetValue_Float_Process;
        processMap_["SetValue_int32"] = SetValue_int32_Process;
        processMap_["SetValue_int16"] = SetValue_int16_Process;
        processMap_["SetValue_String"] = SetValue_String_Process;
        processMap_["SetValueListSelection"] = SetValueListSelection_Process;
        processMap_["RefreshValue"] = RefreshValue_Process;
        processMap_["SetChangeVerified"] = SetChangeVerified_Process;
        processMap_["PressButton"] = PressButton_Process;
        processMap_["ReleaseButton"] = ReleaseButton_Process;
        processMap_["GetNumSwitchPoints"] = GetNumSwitchPoints_Process;
        processMap_["SetSwitchPoint"] = SetSwitchPoint_Process;
        processMap_["RemoveSwitchPoint"] = RemoveSwitchPoint_Process;
        processMap_["ClearSwitchPoints"] = ClearSwitchPoints_Process;
        processMap_["GetSwitchPoint"] = GetSwitchPoint_Process;
        processMap_["SwitchAllOn"] = SwitchAllOn_Process;
        processMap_["SwitchAllOff"] = SwitchAllOff_Process;
        processMap_["SetConfigParam"] = SetConfigParam_Process;
        processMap_["RequestConfigParam"] = RequestConfigParam_Process;
        processMap_["RequestAllConfigParams"] = RequestAllConfigParams_Process;
        processMap_["GetNumGroups"] = GetNumGroups_Process;
        processMap_["GetAssociations"] = GetAssociations_Process;
        processMap_["GetMaxAssociations"] = GetMaxAssociations_Process;
        processMap_["GetGroupLabel"] = GetGroupLabel_Process;
        processMap_["AddAssociation"] = AddAssociation_Process;
        processMap_["RemoveAssociation"] = RemoveAssociation_Process;
        processMap_["ResetController"] = ResetController_Process;
        processMap_["SoftReset"] = SoftReset_Process;
        processMap_["BeginControllerCommand"] = BeginControllerCommand_Process;
        processMap_["CancelControllerCommand"] = CancelControllerCommand_Process;
        processMap_["TestNetworkNode"] = TestNetworkNode_Process;
        processMap_["TestNetwork"] = TestNetwork_Process;
        processMap_["HealNetworkNode"] = HealNetworkNode_Process;
        processMap_["HealNetwork"] = HealNetwork_Process;
        processMap_["GetNumScenes"] = GetNumScenes_Process;
        processMap_["GetAllScenes"] = GetAllScenes_Process;
        processMap_["RemoveAllScenes"] = RemoveAllScenes_Process;
        processMap_["CreateScene"] = CreateScene_Process;
        processMap_["RemoveScene"] = RemoveScene_Process;
        processMap_["AddSceneValue_Bool"] = AddSceneValue_Bool_Process;
        processMap_["AddSceneValue_Uint8"] = AddSceneValue_Uint8_Process;
        processMap_["AddSceneValue_Float"] = AddSceneValue_Float_Process;
        processMap_["AddSceneValue_Int32"] = AddSceneValue_Int32_Process;
        processMap_["AddSceneValue_Int16"] = AddSceneValue_Int16_Process;
        processMap_["AddSceneValue_String"] = AddSceneValue_String_Process;
        processMap_["AddSceneValueListSelection_String"] = AddSceneValueListSelection_String_Process;
        processMap_["AddSceneValueListSelection_Int32"] = AddSceneValueListSelection_Int32_Process;
        processMap_["RemoveSceneValue"] = RemoveSceneValue_Process;
        processMap_["SceneGetValues"] = SceneGetValues_Process;
        processMap_["SceneGetValueAsBool"] = SceneGetValueAsBool_Process;
        processMap_["SceneGetValueAsByte"] = SceneGetValueAsByte_Process;
        processMap_["SceneGetValueAsFloat"] = SceneGetValueAsFloat_Process;
        processMap_["SceneGetValueAsInt"] = SceneGetValueAsInt_Process;
        processMap_["SceneGetValueAsShort"] = SceneGetValueAsShort_Process;
        processMap_["SceneGetValueAsString"] = SceneGetValueAsString_Process;
        processMap_["SceneGetValueListSelection_String"] = SceneGetValueListSelection_String_Process;
        processMap_["SceneGetValueListSelection_Int32"] = SceneGetValueListSelection_Int32_Process;
        processMap_["SetSceneValue_Bool"] = SetSceneValue_Bool_Process;
        processMap_["SetSceneValue_Uint8"] = SetSceneValue_Uint8_Process;
        processMap_["SetSceneValue_Float"] = SetSceneValue_Float_Process;
        processMap_["SetSceneValue_Int32"] = SetSceneValue_Int32_Process;
        processMap_["SetSceneValue_Int16"] = SetSceneValue_Int16_Process;
        processMap_["SetSceneValue_String"] = SetSceneValue_String_Process;
        processMap_["SetSceneValueListSelection_String"] = SetSceneValueListSelection_String_Process;
        processMap_["SetSceneValueListSelection_Int32"] = SetSceneValueListSelection_Int32_Process;
        processMap_["GetSceneLabel"] = GetSceneLabel_Process;
        processMap_["SetSceneLabel"] = SetSceneLabel_Process;
        processMap_["SceneExists"] = SceneExists_Process;
        processMap_["ActivateScene"] = ActivateScene_Process;
        processMap_["GetDriverStatistics"] = GetDriverStatistics_Process;
        processMap_["GetNodeStatistics"] = GetNodeStatistics_Process;
        processMap_["SendAllValues"] = SendAllValues_Process;
        processMap_["ping"] = ping_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private Iface iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void WriteConfig_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        WriteConfig_args args = new WriteConfig_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        WriteConfig_result result = new WriteConfig_result();
        iface_.WriteConfig(args._homeId);
        oprot.WriteMessageBegin(new TMessage("WriteConfig", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetControllerNodeId_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetControllerNodeId_args args = new GetControllerNodeId_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetControllerNodeId_result result = new GetControllerNodeId_result();
        result.Success = iface_.GetControllerNodeId(args._homeId);
        oprot.WriteMessageBegin(new TMessage("GetControllerNodeId", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetSUCNodeId_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetSUCNodeId_args args = new GetSUCNodeId_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetSUCNodeId_result result = new GetSUCNodeId_result();
        result.Success = iface_.GetSUCNodeId(args._homeId);
        oprot.WriteMessageBegin(new TMessage("GetSUCNodeId", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void IsPrimaryController_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        IsPrimaryController_args args = new IsPrimaryController_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        IsPrimaryController_result result = new IsPrimaryController_result();
        result.Success = iface_.IsPrimaryController(args._homeId);
        oprot.WriteMessageBegin(new TMessage("IsPrimaryController", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void IsStaticUpdateController_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        IsStaticUpdateController_args args = new IsStaticUpdateController_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        IsStaticUpdateController_result result = new IsStaticUpdateController_result();
        result.Success = iface_.IsStaticUpdateController(args._homeId);
        oprot.WriteMessageBegin(new TMessage("IsStaticUpdateController", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void IsBridgeController_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        IsBridgeController_args args = new IsBridgeController_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        IsBridgeController_result result = new IsBridgeController_result();
        result.Success = iface_.IsBridgeController(args._homeId);
        oprot.WriteMessageBegin(new TMessage("IsBridgeController", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetLibraryVersion_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetLibraryVersion_args args = new GetLibraryVersion_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetLibraryVersion_result result = new GetLibraryVersion_result();
        result.Success = iface_.GetLibraryVersion(args._homeId);
        oprot.WriteMessageBegin(new TMessage("GetLibraryVersion", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetLibraryTypeName_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetLibraryTypeName_args args = new GetLibraryTypeName_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetLibraryTypeName_result result = new GetLibraryTypeName_result();
        result.Success = iface_.GetLibraryTypeName(args._homeId);
        oprot.WriteMessageBegin(new TMessage("GetLibraryTypeName", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetSendQueueCount_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetSendQueueCount_args args = new GetSendQueueCount_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetSendQueueCount_result result = new GetSendQueueCount_result();
        result.Success = iface_.GetSendQueueCount(args._homeId);
        oprot.WriteMessageBegin(new TMessage("GetSendQueueCount", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void LogDriverStatistics_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        LogDriverStatistics_args args = new LogDriverStatistics_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        LogDriverStatistics_result result = new LogDriverStatistics_result();
        iface_.LogDriverStatistics(args._homeId);
        oprot.WriteMessageBegin(new TMessage("LogDriverStatistics", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetControllerInterfaceType_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetControllerInterfaceType_args args = new GetControllerInterfaceType_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetControllerInterfaceType_result result = new GetControllerInterfaceType_result();
        result.Success = iface_.GetControllerInterfaceType(args._homeId);
        oprot.WriteMessageBegin(new TMessage("GetControllerInterfaceType", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetControllerPath_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetControllerPath_args args = new GetControllerPath_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetControllerPath_result result = new GetControllerPath_result();
        result.Success = iface_.GetControllerPath(args._homeId);
        oprot.WriteMessageBegin(new TMessage("GetControllerPath", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetPollInterval_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetPollInterval_args args = new GetPollInterval_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetPollInterval_result result = new GetPollInterval_result();
        result.Success = iface_.GetPollInterval();
        oprot.WriteMessageBegin(new TMessage("GetPollInterval", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SetPollInterval_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SetPollInterval_args args = new SetPollInterval_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SetPollInterval_result result = new SetPollInterval_result();
        iface_.SetPollInterval(args._milliseconds, args._bIntervalBetweenPolls);
        oprot.WriteMessageBegin(new TMessage("SetPollInterval", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void EnablePoll_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        EnablePoll_args args = new EnablePoll_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        EnablePoll_result result = new EnablePoll_result();
        result.Success = iface_.EnablePoll(args._valueId, args._intensity);
        oprot.WriteMessageBegin(new TMessage("EnablePoll", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void DisablePoll_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        DisablePoll_args args = new DisablePoll_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        DisablePoll_result result = new DisablePoll_result();
        result.Success = iface_.DisablePoll(args._valueId);
        oprot.WriteMessageBegin(new TMessage("DisablePoll", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void isPolled_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        isPolled_args args = new isPolled_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        isPolled_result result = new isPolled_result();
        result.Success = iface_.isPolled(args._valueId);
        oprot.WriteMessageBegin(new TMessage("isPolled", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SetPollIntensity_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SetPollIntensity_args args = new SetPollIntensity_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SetPollIntensity_result result = new SetPollIntensity_result();
        iface_.SetPollIntensity(args._valueId, args._intensity);
        oprot.WriteMessageBegin(new TMessage("SetPollIntensity", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void RefreshNodeInfo_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        RefreshNodeInfo_args args = new RefreshNodeInfo_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        RefreshNodeInfo_result result = new RefreshNodeInfo_result();
        result.Success = iface_.RefreshNodeInfo(args._homeId, args._nodeId);
        oprot.WriteMessageBegin(new TMessage("RefreshNodeInfo", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void RequestNodeState_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        RequestNodeState_args args = new RequestNodeState_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        RequestNodeState_result result = new RequestNodeState_result();
        result.Success = iface_.RequestNodeState(args._homeId, args._nodeId);
        oprot.WriteMessageBegin(new TMessage("RequestNodeState", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void RequestNodeDynamic_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        RequestNodeDynamic_args args = new RequestNodeDynamic_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        RequestNodeDynamic_result result = new RequestNodeDynamic_result();
        result.Success = iface_.RequestNodeDynamic(args._homeId, args._nodeId);
        oprot.WriteMessageBegin(new TMessage("RequestNodeDynamic", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void IsNodeListeningDevice_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        IsNodeListeningDevice_args args = new IsNodeListeningDevice_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        IsNodeListeningDevice_result result = new IsNodeListeningDevice_result();
        result.Success = iface_.IsNodeListeningDevice(args._homeId, args._nodeId);
        oprot.WriteMessageBegin(new TMessage("IsNodeListeningDevice", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void IsNodeFrequentListeningDevice_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        IsNodeFrequentListeningDevice_args args = new IsNodeFrequentListeningDevice_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        IsNodeFrequentListeningDevice_result result = new IsNodeFrequentListeningDevice_result();
        result.Success = iface_.IsNodeFrequentListeningDevice(args._homeId, args._nodeId);
        oprot.WriteMessageBegin(new TMessage("IsNodeFrequentListeningDevice", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void IsNodeBeamingDevice_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        IsNodeBeamingDevice_args args = new IsNodeBeamingDevice_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        IsNodeBeamingDevice_result result = new IsNodeBeamingDevice_result();
        result.Success = iface_.IsNodeBeamingDevice(args._homeId, args._nodeId);
        oprot.WriteMessageBegin(new TMessage("IsNodeBeamingDevice", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void IsNodeRoutingDevice_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        IsNodeRoutingDevice_args args = new IsNodeRoutingDevice_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        IsNodeRoutingDevice_result result = new IsNodeRoutingDevice_result();
        result.Success = iface_.IsNodeRoutingDevice(args._homeId, args._nodeId);
        oprot.WriteMessageBegin(new TMessage("IsNodeRoutingDevice", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void IsNodeSecurityDevice_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        IsNodeSecurityDevice_args args = new IsNodeSecurityDevice_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        IsNodeSecurityDevice_result result = new IsNodeSecurityDevice_result();
        result.Success = iface_.IsNodeSecurityDevice(args._homeId, args._nodeId);
        oprot.WriteMessageBegin(new TMessage("IsNodeSecurityDevice", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetNodeMaxBaudRate_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetNodeMaxBaudRate_args args = new GetNodeMaxBaudRate_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetNodeMaxBaudRate_result result = new GetNodeMaxBaudRate_result();
        result.Success = iface_.GetNodeMaxBaudRate(args._homeId, args._nodeId);
        oprot.WriteMessageBegin(new TMessage("GetNodeMaxBaudRate", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetNodeVersion_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetNodeVersion_args args = new GetNodeVersion_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetNodeVersion_result result = new GetNodeVersion_result();
        result.Success = iface_.GetNodeVersion(args._homeId, args._nodeId);
        oprot.WriteMessageBegin(new TMessage("GetNodeVersion", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetNodeSecurity_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetNodeSecurity_args args = new GetNodeSecurity_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetNodeSecurity_result result = new GetNodeSecurity_result();
        result.Success = iface_.GetNodeSecurity(args._homeId, args._nodeId);
        oprot.WriteMessageBegin(new TMessage("GetNodeSecurity", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetNodeBasic_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetNodeBasic_args args = new GetNodeBasic_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetNodeBasic_result result = new GetNodeBasic_result();
        result.Success = iface_.GetNodeBasic(args._homeId, args._nodeId);
        oprot.WriteMessageBegin(new TMessage("GetNodeBasic", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetNodeGeneric_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetNodeGeneric_args args = new GetNodeGeneric_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetNodeGeneric_result result = new GetNodeGeneric_result();
        result.Success = iface_.GetNodeGeneric(args._homeId, args._nodeId);
        oprot.WriteMessageBegin(new TMessage("GetNodeGeneric", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetNodeSpecific_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetNodeSpecific_args args = new GetNodeSpecific_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetNodeSpecific_result result = new GetNodeSpecific_result();
        result.Success = iface_.GetNodeSpecific(args._homeId, args._nodeId);
        oprot.WriteMessageBegin(new TMessage("GetNodeSpecific", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetNodeType_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetNodeType_args args = new GetNodeType_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetNodeType_result result = new GetNodeType_result();
        result.Success = iface_.GetNodeType(args._homeId, args._nodeId);
        oprot.WriteMessageBegin(new TMessage("GetNodeType", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetNodeNeighbors_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetNodeNeighbors_args args = new GetNodeNeighbors_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetNodeNeighbors_result result = new GetNodeNeighbors_result();
        result.Success = iface_.GetNodeNeighbors(args._homeId, args._nodeId);
        oprot.WriteMessageBegin(new TMessage("GetNodeNeighbors", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetNodeManufacturerName_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetNodeManufacturerName_args args = new GetNodeManufacturerName_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetNodeManufacturerName_result result = new GetNodeManufacturerName_result();
        result.Success = iface_.GetNodeManufacturerName(args._homeId, args._nodeId);
        oprot.WriteMessageBegin(new TMessage("GetNodeManufacturerName", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetNodeProductName_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetNodeProductName_args args = new GetNodeProductName_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetNodeProductName_result result = new GetNodeProductName_result();
        result.Success = iface_.GetNodeProductName(args._homeId, args._nodeId);
        oprot.WriteMessageBegin(new TMessage("GetNodeProductName", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetNodeName_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetNodeName_args args = new GetNodeName_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetNodeName_result result = new GetNodeName_result();
        result.Success = iface_.GetNodeName(args._homeId, args._nodeId);
        oprot.WriteMessageBegin(new TMessage("GetNodeName", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetNodeLocation_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetNodeLocation_args args = new GetNodeLocation_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetNodeLocation_result result = new GetNodeLocation_result();
        result.Success = iface_.GetNodeLocation(args._homeId, args._nodeId);
        oprot.WriteMessageBegin(new TMessage("GetNodeLocation", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetNodeManufacturerId_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetNodeManufacturerId_args args = new GetNodeManufacturerId_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetNodeManufacturerId_result result = new GetNodeManufacturerId_result();
        result.Success = iface_.GetNodeManufacturerId(args._homeId, args._nodeId);
        oprot.WriteMessageBegin(new TMessage("GetNodeManufacturerId", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetNodeProductType_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetNodeProductType_args args = new GetNodeProductType_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetNodeProductType_result result = new GetNodeProductType_result();
        result.Success = iface_.GetNodeProductType(args._homeId, args._nodeId);
        oprot.WriteMessageBegin(new TMessage("GetNodeProductType", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetNodeProductId_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetNodeProductId_args args = new GetNodeProductId_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetNodeProductId_result result = new GetNodeProductId_result();
        result.Success = iface_.GetNodeProductId(args._homeId, args._nodeId);
        oprot.WriteMessageBegin(new TMessage("GetNodeProductId", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SetNodeManufacturerName_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SetNodeManufacturerName_args args = new SetNodeManufacturerName_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SetNodeManufacturerName_result result = new SetNodeManufacturerName_result();
        iface_.SetNodeManufacturerName(args._homeId, args._nodeId, args._manufacturerName);
        oprot.WriteMessageBegin(new TMessage("SetNodeManufacturerName", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SetNodeProductName_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SetNodeProductName_args args = new SetNodeProductName_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SetNodeProductName_result result = new SetNodeProductName_result();
        iface_.SetNodeProductName(args._homeId, args._nodeId, args._productName);
        oprot.WriteMessageBegin(new TMessage("SetNodeProductName", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SetNodeName_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SetNodeName_args args = new SetNodeName_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SetNodeName_result result = new SetNodeName_result();
        iface_.SetNodeName(args._homeId, args._nodeId, args._nodeName);
        oprot.WriteMessageBegin(new TMessage("SetNodeName", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SetNodeLocation_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SetNodeLocation_args args = new SetNodeLocation_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SetNodeLocation_result result = new SetNodeLocation_result();
        iface_.SetNodeLocation(args._homeId, args._nodeId, args._location);
        oprot.WriteMessageBegin(new TMessage("SetNodeLocation", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SetNodeOn_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SetNodeOn_args args = new SetNodeOn_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SetNodeOn_result result = new SetNodeOn_result();
        iface_.SetNodeOn(args._homeId, args._nodeId);
        oprot.WriteMessageBegin(new TMessage("SetNodeOn", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SetNodeOff_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SetNodeOff_args args = new SetNodeOff_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SetNodeOff_result result = new SetNodeOff_result();
        iface_.SetNodeOff(args._homeId, args._nodeId);
        oprot.WriteMessageBegin(new TMessage("SetNodeOff", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SetNodeLevel_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SetNodeLevel_args args = new SetNodeLevel_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SetNodeLevel_result result = new SetNodeLevel_result();
        iface_.SetNodeLevel(args._homeId, args._nodeId, args._level);
        oprot.WriteMessageBegin(new TMessage("SetNodeLevel", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void IsNodeInfoReceived_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        IsNodeInfoReceived_args args = new IsNodeInfoReceived_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        IsNodeInfoReceived_result result = new IsNodeInfoReceived_result();
        result.Success = iface_.IsNodeInfoReceived(args._homeId, args._nodeId);
        oprot.WriteMessageBegin(new TMessage("IsNodeInfoReceived", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetNodeClassInformation_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetNodeClassInformation_args args = new GetNodeClassInformation_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetNodeClassInformation_result result = new GetNodeClassInformation_result();
        result.Success = iface_.GetNodeClassInformation(args._homeId, args._nodeId, args._commandClassId);
        oprot.WriteMessageBegin(new TMessage("GetNodeClassInformation", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void IsNodeAwake_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        IsNodeAwake_args args = new IsNodeAwake_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        IsNodeAwake_result result = new IsNodeAwake_result();
        result.Success = iface_.IsNodeAwake(args._homeId, args._nodeId);
        oprot.WriteMessageBegin(new TMessage("IsNodeAwake", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void IsNodeFailed_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        IsNodeFailed_args args = new IsNodeFailed_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        IsNodeFailed_result result = new IsNodeFailed_result();
        result.Success = iface_.IsNodeFailed(args._homeId, args._nodeId);
        oprot.WriteMessageBegin(new TMessage("IsNodeFailed", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetNodeQueryStage_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetNodeQueryStage_args args = new GetNodeQueryStage_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetNodeQueryStage_result result = new GetNodeQueryStage_result();
        result.Success = iface_.GetNodeQueryStage(args._homeId, args._nodeId);
        oprot.WriteMessageBegin(new TMessage("GetNodeQueryStage", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetValueLabel_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetValueLabel_args args = new GetValueLabel_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetValueLabel_result result = new GetValueLabel_result();
        result.Success = iface_.GetValueLabel(args._id);
        oprot.WriteMessageBegin(new TMessage("GetValueLabel", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SetValueLabel_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SetValueLabel_args args = new SetValueLabel_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SetValueLabel_result result = new SetValueLabel_result();
        iface_.SetValueLabel(args._id, args._value);
        oprot.WriteMessageBegin(new TMessage("SetValueLabel", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetValueUnits_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetValueUnits_args args = new GetValueUnits_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetValueUnits_result result = new GetValueUnits_result();
        result.Success = iface_.GetValueUnits(args._id);
        oprot.WriteMessageBegin(new TMessage("GetValueUnits", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SetValueUnits_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SetValueUnits_args args = new SetValueUnits_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SetValueUnits_result result = new SetValueUnits_result();
        iface_.SetValueUnits(args._id, args._value);
        oprot.WriteMessageBegin(new TMessage("SetValueUnits", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetValueHelp_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetValueHelp_args args = new GetValueHelp_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetValueHelp_result result = new GetValueHelp_result();
        result.Success = iface_.GetValueHelp(args._id);
        oprot.WriteMessageBegin(new TMessage("GetValueHelp", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SetValueHelp_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SetValueHelp_args args = new SetValueHelp_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SetValueHelp_result result = new SetValueHelp_result();
        iface_.SetValueHelp(args._id, args._value);
        oprot.WriteMessageBegin(new TMessage("SetValueHelp", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetValueMin_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetValueMin_args args = new GetValueMin_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetValueMin_result result = new GetValueMin_result();
        result.Success = iface_.GetValueMin(args._id);
        oprot.WriteMessageBegin(new TMessage("GetValueMin", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetValueMax_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetValueMax_args args = new GetValueMax_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetValueMax_result result = new GetValueMax_result();
        result.Success = iface_.GetValueMax(args._id);
        oprot.WriteMessageBegin(new TMessage("GetValueMax", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void IsValueReadOnly_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        IsValueReadOnly_args args = new IsValueReadOnly_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        IsValueReadOnly_result result = new IsValueReadOnly_result();
        result.Success = iface_.IsValueReadOnly(args._id);
        oprot.WriteMessageBegin(new TMessage("IsValueReadOnly", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void IsValueWriteOnly_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        IsValueWriteOnly_args args = new IsValueWriteOnly_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        IsValueWriteOnly_result result = new IsValueWriteOnly_result();
        result.Success = iface_.IsValueWriteOnly(args._id);
        oprot.WriteMessageBegin(new TMessage("IsValueWriteOnly", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void IsValueSet_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        IsValueSet_args args = new IsValueSet_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        IsValueSet_result result = new IsValueSet_result();
        result.Success = iface_.IsValueSet(args._id);
        oprot.WriteMessageBegin(new TMessage("IsValueSet", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void IsValuePolled_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        IsValuePolled_args args = new IsValuePolled_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        IsValuePolled_result result = new IsValuePolled_result();
        result.Success = iface_.IsValuePolled(args._id);
        oprot.WriteMessageBegin(new TMessage("IsValuePolled", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetValueAsBool_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetValueAsBool_args args = new GetValueAsBool_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetValueAsBool_result result = new GetValueAsBool_result();
        result.Success = iface_.GetValueAsBool(args._id);
        oprot.WriteMessageBegin(new TMessage("GetValueAsBool", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetValueAsByte_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetValueAsByte_args args = new GetValueAsByte_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetValueAsByte_result result = new GetValueAsByte_result();
        result.Success = iface_.GetValueAsByte(args._id);
        oprot.WriteMessageBegin(new TMessage("GetValueAsByte", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetValueAsFloat_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetValueAsFloat_args args = new GetValueAsFloat_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetValueAsFloat_result result = new GetValueAsFloat_result();
        result.Success = iface_.GetValueAsFloat(args._id);
        oprot.WriteMessageBegin(new TMessage("GetValueAsFloat", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetValueAsInt_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetValueAsInt_args args = new GetValueAsInt_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetValueAsInt_result result = new GetValueAsInt_result();
        result.Success = iface_.GetValueAsInt(args._id);
        oprot.WriteMessageBegin(new TMessage("GetValueAsInt", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetValueAsShort_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetValueAsShort_args args = new GetValueAsShort_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetValueAsShort_result result = new GetValueAsShort_result();
        result.Success = iface_.GetValueAsShort(args._id);
        oprot.WriteMessageBegin(new TMessage("GetValueAsShort", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetValueAsString_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetValueAsString_args args = new GetValueAsString_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetValueAsString_result result = new GetValueAsString_result();
        result.Success = iface_.GetValueAsString(args._id);
        oprot.WriteMessageBegin(new TMessage("GetValueAsString", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetValueListSelection_String_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetValueListSelection_String_args args = new GetValueListSelection_String_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetValueListSelection_String_result result = new GetValueListSelection_String_result();
        result.Success = iface_.GetValueListSelection_String(args._id);
        oprot.WriteMessageBegin(new TMessage("GetValueListSelection_String", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetValueListSelection_Int32_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetValueListSelection_Int32_args args = new GetValueListSelection_Int32_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetValueListSelection_Int32_result result = new GetValueListSelection_Int32_result();
        result.Success = iface_.GetValueListSelection_Int32(args._id);
        oprot.WriteMessageBegin(new TMessage("GetValueListSelection_Int32", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetValueListItems_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetValueListItems_args args = new GetValueListItems_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetValueListItems_result result = new GetValueListItems_result();
        result.Success = iface_.GetValueListItems(args._id);
        oprot.WriteMessageBegin(new TMessage("GetValueListItems", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetValueFloatPrecision_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetValueFloatPrecision_args args = new GetValueFloatPrecision_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetValueFloatPrecision_result result = new GetValueFloatPrecision_result();
        result.Success = iface_.GetValueFloatPrecision(args._id);
        oprot.WriteMessageBegin(new TMessage("GetValueFloatPrecision", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SetValue_Bool_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SetValue_Bool_args args = new SetValue_Bool_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SetValue_Bool_result result = new SetValue_Bool_result();
        result.Success = iface_.SetValue_Bool(args._id, args._value);
        oprot.WriteMessageBegin(new TMessage("SetValue_Bool", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SetValue_UInt8_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SetValue_UInt8_args args = new SetValue_UInt8_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SetValue_UInt8_result result = new SetValue_UInt8_result();
        result.Success = iface_.SetValue_UInt8(args._id, args._value);
        oprot.WriteMessageBegin(new TMessage("SetValue_UInt8", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SetValue_UInt8_UInt8_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SetValue_UInt8_UInt8_args args = new SetValue_UInt8_UInt8_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SetValue_UInt8_UInt8_result result = new SetValue_UInt8_UInt8_result();
        result.Success = iface_.SetValue_UInt8_UInt8(args._id, args._value, args._length);
        oprot.WriteMessageBegin(new TMessage("SetValue_UInt8_UInt8", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SetValue_Float_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SetValue_Float_args args = new SetValue_Float_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SetValue_Float_result result = new SetValue_Float_result();
        result.Success = iface_.SetValue_Float(args._id, args._value);
        oprot.WriteMessageBegin(new TMessage("SetValue_Float", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SetValue_int32_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SetValue_int32_args args = new SetValue_int32_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SetValue_int32_result result = new SetValue_int32_result();
        result.Success = iface_.SetValue_int32(args._id, args._value);
        oprot.WriteMessageBegin(new TMessage("SetValue_int32", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SetValue_int16_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SetValue_int16_args args = new SetValue_int16_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SetValue_int16_result result = new SetValue_int16_result();
        result.Success = iface_.SetValue_int16(args._id, args._value);
        oprot.WriteMessageBegin(new TMessage("SetValue_int16", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SetValue_String_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SetValue_String_args args = new SetValue_String_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SetValue_String_result result = new SetValue_String_result();
        result.Success = iface_.SetValue_String(args._id, args._value);
        oprot.WriteMessageBegin(new TMessage("SetValue_String", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SetValueListSelection_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SetValueListSelection_args args = new SetValueListSelection_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SetValueListSelection_result result = new SetValueListSelection_result();
        result.Success = iface_.SetValueListSelection(args._id, args._selectedItem);
        oprot.WriteMessageBegin(new TMessage("SetValueListSelection", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void RefreshValue_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        RefreshValue_args args = new RefreshValue_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        RefreshValue_result result = new RefreshValue_result();
        result.Success = iface_.RefreshValue(args._id);
        oprot.WriteMessageBegin(new TMessage("RefreshValue", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SetChangeVerified_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SetChangeVerified_args args = new SetChangeVerified_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SetChangeVerified_result result = new SetChangeVerified_result();
        iface_.SetChangeVerified(args._id, args._verify);
        oprot.WriteMessageBegin(new TMessage("SetChangeVerified", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void PressButton_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        PressButton_args args = new PressButton_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        PressButton_result result = new PressButton_result();
        result.Success = iface_.PressButton(args._id);
        oprot.WriteMessageBegin(new TMessage("PressButton", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void ReleaseButton_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        ReleaseButton_args args = new ReleaseButton_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        ReleaseButton_result result = new ReleaseButton_result();
        result.Success = iface_.ReleaseButton(args._id);
        oprot.WriteMessageBegin(new TMessage("ReleaseButton", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetNumSwitchPoints_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetNumSwitchPoints_args args = new GetNumSwitchPoints_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetNumSwitchPoints_result result = new GetNumSwitchPoints_result();
        result.Success = iface_.GetNumSwitchPoints(args._id);
        oprot.WriteMessageBegin(new TMessage("GetNumSwitchPoints", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SetSwitchPoint_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SetSwitchPoint_args args = new SetSwitchPoint_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SetSwitchPoint_result result = new SetSwitchPoint_result();
        result.Success = iface_.SetSwitchPoint(args._id, args._hours, args._minutes, args._setback);
        oprot.WriteMessageBegin(new TMessage("SetSwitchPoint", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void RemoveSwitchPoint_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        RemoveSwitchPoint_args args = new RemoveSwitchPoint_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        RemoveSwitchPoint_result result = new RemoveSwitchPoint_result();
        result.Success = iface_.RemoveSwitchPoint(args._id, args._hours, args._minutes);
        oprot.WriteMessageBegin(new TMessage("RemoveSwitchPoint", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void ClearSwitchPoints_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        ClearSwitchPoints_args args = new ClearSwitchPoints_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        ClearSwitchPoints_result result = new ClearSwitchPoints_result();
        iface_.ClearSwitchPoints(args._id);
        oprot.WriteMessageBegin(new TMessage("ClearSwitchPoints", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetSwitchPoint_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetSwitchPoint_args args = new GetSwitchPoint_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetSwitchPoint_result result = new GetSwitchPoint_result();
        result.Success = iface_.GetSwitchPoint(args._id, args._idx);
        oprot.WriteMessageBegin(new TMessage("GetSwitchPoint", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SwitchAllOn_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SwitchAllOn_args args = new SwitchAllOn_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SwitchAllOn_result result = new SwitchAllOn_result();
        iface_.SwitchAllOn(args._homeId);
        oprot.WriteMessageBegin(new TMessage("SwitchAllOn", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SwitchAllOff_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SwitchAllOff_args args = new SwitchAllOff_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SwitchAllOff_result result = new SwitchAllOff_result();
        iface_.SwitchAllOff(args._homeId);
        oprot.WriteMessageBegin(new TMessage("SwitchAllOff", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SetConfigParam_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SetConfigParam_args args = new SetConfigParam_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SetConfigParam_result result = new SetConfigParam_result();
        result.Success = iface_.SetConfigParam(args._homeId, args._nodeId, args._param, args._value, args._size);
        oprot.WriteMessageBegin(new TMessage("SetConfigParam", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void RequestConfigParam_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        RequestConfigParam_args args = new RequestConfigParam_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        RequestConfigParam_result result = new RequestConfigParam_result();
        iface_.RequestConfigParam(args._homeId, args._nodeId, args._param);
        oprot.WriteMessageBegin(new TMessage("RequestConfigParam", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void RequestAllConfigParams_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        RequestAllConfigParams_args args = new RequestAllConfigParams_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        RequestAllConfigParams_result result = new RequestAllConfigParams_result();
        iface_.RequestAllConfigParams(args._homeId, args._nodeId);
        oprot.WriteMessageBegin(new TMessage("RequestAllConfigParams", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetNumGroups_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetNumGroups_args args = new GetNumGroups_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetNumGroups_result result = new GetNumGroups_result();
        result.Success = iface_.GetNumGroups(args._homeId, args._nodeId);
        oprot.WriteMessageBegin(new TMessage("GetNumGroups", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetAssociations_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetAssociations_args args = new GetAssociations_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetAssociations_result result = new GetAssociations_result();
        result.Success = iface_.GetAssociations(args._homeId, args._nodeId, args._groupIdx);
        oprot.WriteMessageBegin(new TMessage("GetAssociations", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetMaxAssociations_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetMaxAssociations_args args = new GetMaxAssociations_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetMaxAssociations_result result = new GetMaxAssociations_result();
        result.Success = iface_.GetMaxAssociations(args._homeId, args._nodeId, args._groupIdx);
        oprot.WriteMessageBegin(new TMessage("GetMaxAssociations", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetGroupLabel_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetGroupLabel_args args = new GetGroupLabel_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetGroupLabel_result result = new GetGroupLabel_result();
        result.Success = iface_.GetGroupLabel(args._homeId, args._nodeId, args._groupIdx);
        oprot.WriteMessageBegin(new TMessage("GetGroupLabel", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void AddAssociation_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        AddAssociation_args args = new AddAssociation_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        AddAssociation_result result = new AddAssociation_result();
        iface_.AddAssociation(args._homeId, args._nodeId, args._groupIdx, args._targetNodeId);
        oprot.WriteMessageBegin(new TMessage("AddAssociation", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void RemoveAssociation_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        RemoveAssociation_args args = new RemoveAssociation_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        RemoveAssociation_result result = new RemoveAssociation_result();
        iface_.RemoveAssociation(args._homeId, args._nodeId, args._groupIdx, args._targetNodeId);
        oprot.WriteMessageBegin(new TMessage("RemoveAssociation", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void ResetController_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        ResetController_args args = new ResetController_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        ResetController_result result = new ResetController_result();
        iface_.ResetController(args._homeId);
        oprot.WriteMessageBegin(new TMessage("ResetController", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SoftReset_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SoftReset_args args = new SoftReset_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SoftReset_result result = new SoftReset_result();
        iface_.SoftReset(args._homeId);
        oprot.WriteMessageBegin(new TMessage("SoftReset", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void BeginControllerCommand_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        BeginControllerCommand_args args = new BeginControllerCommand_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        BeginControllerCommand_result result = new BeginControllerCommand_result();
        result.Success = iface_.BeginControllerCommand(args._homeId, args._command, args._highPower, args._nodeId, args._arg);
        oprot.WriteMessageBegin(new TMessage("BeginControllerCommand", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void CancelControllerCommand_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        CancelControllerCommand_args args = new CancelControllerCommand_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        CancelControllerCommand_result result = new CancelControllerCommand_result();
        result.Success = iface_.CancelControllerCommand(args._homeId);
        oprot.WriteMessageBegin(new TMessage("CancelControllerCommand", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void TestNetworkNode_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        TestNetworkNode_args args = new TestNetworkNode_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        TestNetworkNode_result result = new TestNetworkNode_result();
        iface_.TestNetworkNode(args._homeId, args._nodeId, args._count);
        oprot.WriteMessageBegin(new TMessage("TestNetworkNode", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void TestNetwork_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        TestNetwork_args args = new TestNetwork_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        TestNetwork_result result = new TestNetwork_result();
        iface_.TestNetwork(args._homeId, args._count);
        oprot.WriteMessageBegin(new TMessage("TestNetwork", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void HealNetworkNode_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        HealNetworkNode_args args = new HealNetworkNode_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        HealNetworkNode_result result = new HealNetworkNode_result();
        iface_.HealNetworkNode(args._homeId, args._nodeId, args._doRR);
        oprot.WriteMessageBegin(new TMessage("HealNetworkNode", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void HealNetwork_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        HealNetwork_args args = new HealNetwork_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        HealNetwork_result result = new HealNetwork_result();
        iface_.HealNetwork(args._homeId, args._doRR);
        oprot.WriteMessageBegin(new TMessage("HealNetwork", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetNumScenes_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetNumScenes_args args = new GetNumScenes_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetNumScenes_result result = new GetNumScenes_result();
        result.Success = iface_.GetNumScenes();
        oprot.WriteMessageBegin(new TMessage("GetNumScenes", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetAllScenes_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetAllScenes_args args = new GetAllScenes_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetAllScenes_result result = new GetAllScenes_result();
        result.Success = iface_.GetAllScenes();
        oprot.WriteMessageBegin(new TMessage("GetAllScenes", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void RemoveAllScenes_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        RemoveAllScenes_args args = new RemoveAllScenes_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        RemoveAllScenes_result result = new RemoveAllScenes_result();
        iface_.RemoveAllScenes(args._homeId);
        oprot.WriteMessageBegin(new TMessage("RemoveAllScenes", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void CreateScene_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        CreateScene_args args = new CreateScene_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        CreateScene_result result = new CreateScene_result();
        result.Success = iface_.CreateScene();
        oprot.WriteMessageBegin(new TMessage("CreateScene", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void RemoveScene_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        RemoveScene_args args = new RemoveScene_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        RemoveScene_result result = new RemoveScene_result();
        result.Success = iface_.RemoveScene(args._sceneId);
        oprot.WriteMessageBegin(new TMessage("RemoveScene", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void AddSceneValue_Bool_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        AddSceneValue_Bool_args args = new AddSceneValue_Bool_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        AddSceneValue_Bool_result result = new AddSceneValue_Bool_result();
        result.Success = iface_.AddSceneValue_Bool(args._sceneId, args._valueId, args._value);
        oprot.WriteMessageBegin(new TMessage("AddSceneValue_Bool", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void AddSceneValue_Uint8_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        AddSceneValue_Uint8_args args = new AddSceneValue_Uint8_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        AddSceneValue_Uint8_result result = new AddSceneValue_Uint8_result();
        result.Success = iface_.AddSceneValue_Uint8(args._sceneId, args._valueId, args._value);
        oprot.WriteMessageBegin(new TMessage("AddSceneValue_Uint8", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void AddSceneValue_Float_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        AddSceneValue_Float_args args = new AddSceneValue_Float_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        AddSceneValue_Float_result result = new AddSceneValue_Float_result();
        result.Success = iface_.AddSceneValue_Float(args._sceneId, args._valueId, args._value);
        oprot.WriteMessageBegin(new TMessage("AddSceneValue_Float", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void AddSceneValue_Int32_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        AddSceneValue_Int32_args args = new AddSceneValue_Int32_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        AddSceneValue_Int32_result result = new AddSceneValue_Int32_result();
        result.Success = iface_.AddSceneValue_Int32(args._sceneId, args._valueId, args._value);
        oprot.WriteMessageBegin(new TMessage("AddSceneValue_Int32", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void AddSceneValue_Int16_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        AddSceneValue_Int16_args args = new AddSceneValue_Int16_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        AddSceneValue_Int16_result result = new AddSceneValue_Int16_result();
        result.Success = iface_.AddSceneValue_Int16(args._sceneId, args._valueId, args._value);
        oprot.WriteMessageBegin(new TMessage("AddSceneValue_Int16", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void AddSceneValue_String_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        AddSceneValue_String_args args = new AddSceneValue_String_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        AddSceneValue_String_result result = new AddSceneValue_String_result();
        result.Success = iface_.AddSceneValue_String(args._sceneId, args._valueId, args._value);
        oprot.WriteMessageBegin(new TMessage("AddSceneValue_String", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void AddSceneValueListSelection_String_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        AddSceneValueListSelection_String_args args = new AddSceneValueListSelection_String_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        AddSceneValueListSelection_String_result result = new AddSceneValueListSelection_String_result();
        result.Success = iface_.AddSceneValueListSelection_String(args._sceneId, args._valueId, args._value);
        oprot.WriteMessageBegin(new TMessage("AddSceneValueListSelection_String", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void AddSceneValueListSelection_Int32_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        AddSceneValueListSelection_Int32_args args = new AddSceneValueListSelection_Int32_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        AddSceneValueListSelection_Int32_result result = new AddSceneValueListSelection_Int32_result();
        result.Success = iface_.AddSceneValueListSelection_Int32(args._sceneId, args._valueId, args._value);
        oprot.WriteMessageBegin(new TMessage("AddSceneValueListSelection_Int32", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void RemoveSceneValue_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        RemoveSceneValue_args args = new RemoveSceneValue_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        RemoveSceneValue_result result = new RemoveSceneValue_result();
        result.Success = iface_.RemoveSceneValue(args._sceneId, args._valueId);
        oprot.WriteMessageBegin(new TMessage("RemoveSceneValue", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SceneGetValues_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SceneGetValues_args args = new SceneGetValues_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SceneGetValues_result result = new SceneGetValues_result();
        result.Success = iface_.SceneGetValues(args._sceneId);
        oprot.WriteMessageBegin(new TMessage("SceneGetValues", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SceneGetValueAsBool_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SceneGetValueAsBool_args args = new SceneGetValueAsBool_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SceneGetValueAsBool_result result = new SceneGetValueAsBool_result();
        result.Success = iface_.SceneGetValueAsBool(args._sceneId, args._valueId);
        oprot.WriteMessageBegin(new TMessage("SceneGetValueAsBool", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SceneGetValueAsByte_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SceneGetValueAsByte_args args = new SceneGetValueAsByte_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SceneGetValueAsByte_result result = new SceneGetValueAsByte_result();
        result.Success = iface_.SceneGetValueAsByte(args._sceneId, args._valueId);
        oprot.WriteMessageBegin(new TMessage("SceneGetValueAsByte", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SceneGetValueAsFloat_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SceneGetValueAsFloat_args args = new SceneGetValueAsFloat_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SceneGetValueAsFloat_result result = new SceneGetValueAsFloat_result();
        result.Success = iface_.SceneGetValueAsFloat(args._sceneId, args._valueId);
        oprot.WriteMessageBegin(new TMessage("SceneGetValueAsFloat", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SceneGetValueAsInt_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SceneGetValueAsInt_args args = new SceneGetValueAsInt_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SceneGetValueAsInt_result result = new SceneGetValueAsInt_result();
        result.Success = iface_.SceneGetValueAsInt(args._sceneId, args._valueId);
        oprot.WriteMessageBegin(new TMessage("SceneGetValueAsInt", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SceneGetValueAsShort_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SceneGetValueAsShort_args args = new SceneGetValueAsShort_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SceneGetValueAsShort_result result = new SceneGetValueAsShort_result();
        result.Success = iface_.SceneGetValueAsShort(args._sceneId, args._valueId);
        oprot.WriteMessageBegin(new TMessage("SceneGetValueAsShort", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SceneGetValueAsString_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SceneGetValueAsString_args args = new SceneGetValueAsString_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SceneGetValueAsString_result result = new SceneGetValueAsString_result();
        result.Success = iface_.SceneGetValueAsString(args._sceneId, args._valueId);
        oprot.WriteMessageBegin(new TMessage("SceneGetValueAsString", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SceneGetValueListSelection_String_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SceneGetValueListSelection_String_args args = new SceneGetValueListSelection_String_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SceneGetValueListSelection_String_result result = new SceneGetValueListSelection_String_result();
        result.Success = iface_.SceneGetValueListSelection_String(args._sceneId, args._valueId);
        oprot.WriteMessageBegin(new TMessage("SceneGetValueListSelection_String", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SceneGetValueListSelection_Int32_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SceneGetValueListSelection_Int32_args args = new SceneGetValueListSelection_Int32_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SceneGetValueListSelection_Int32_result result = new SceneGetValueListSelection_Int32_result();
        result.Success = iface_.SceneGetValueListSelection_Int32(args._sceneId, args._valueId);
        oprot.WriteMessageBegin(new TMessage("SceneGetValueListSelection_Int32", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SetSceneValue_Bool_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SetSceneValue_Bool_args args = new SetSceneValue_Bool_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SetSceneValue_Bool_result result = new SetSceneValue_Bool_result();
        result.Success = iface_.SetSceneValue_Bool(args._sceneId, args._valueId, args._value);
        oprot.WriteMessageBegin(new TMessage("SetSceneValue_Bool", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SetSceneValue_Uint8_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SetSceneValue_Uint8_args args = new SetSceneValue_Uint8_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SetSceneValue_Uint8_result result = new SetSceneValue_Uint8_result();
        result.Success = iface_.SetSceneValue_Uint8(args._sceneId, args._valueId, args._value);
        oprot.WriteMessageBegin(new TMessage("SetSceneValue_Uint8", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SetSceneValue_Float_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SetSceneValue_Float_args args = new SetSceneValue_Float_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SetSceneValue_Float_result result = new SetSceneValue_Float_result();
        result.Success = iface_.SetSceneValue_Float(args._sceneId, args._valueId, args._value);
        oprot.WriteMessageBegin(new TMessage("SetSceneValue_Float", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SetSceneValue_Int32_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SetSceneValue_Int32_args args = new SetSceneValue_Int32_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SetSceneValue_Int32_result result = new SetSceneValue_Int32_result();
        result.Success = iface_.SetSceneValue_Int32(args._sceneId, args._valueId, args._value);
        oprot.WriteMessageBegin(new TMessage("SetSceneValue_Int32", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SetSceneValue_Int16_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SetSceneValue_Int16_args args = new SetSceneValue_Int16_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SetSceneValue_Int16_result result = new SetSceneValue_Int16_result();
        result.Success = iface_.SetSceneValue_Int16(args._sceneId, args._valueId, args._value);
        oprot.WriteMessageBegin(new TMessage("SetSceneValue_Int16", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SetSceneValue_String_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SetSceneValue_String_args args = new SetSceneValue_String_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SetSceneValue_String_result result = new SetSceneValue_String_result();
        result.Success = iface_.SetSceneValue_String(args._sceneId, args._valueId, args._value);
        oprot.WriteMessageBegin(new TMessage("SetSceneValue_String", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SetSceneValueListSelection_String_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SetSceneValueListSelection_String_args args = new SetSceneValueListSelection_String_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SetSceneValueListSelection_String_result result = new SetSceneValueListSelection_String_result();
        result.Success = iface_.SetSceneValueListSelection_String(args._sceneId, args._valueId, args._value);
        oprot.WriteMessageBegin(new TMessage("SetSceneValueListSelection_String", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SetSceneValueListSelection_Int32_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SetSceneValueListSelection_Int32_args args = new SetSceneValueListSelection_Int32_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SetSceneValueListSelection_Int32_result result = new SetSceneValueListSelection_Int32_result();
        result.Success = iface_.SetSceneValueListSelection_Int32(args._sceneId, args._valueId, args._value);
        oprot.WriteMessageBegin(new TMessage("SetSceneValueListSelection_Int32", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetSceneLabel_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetSceneLabel_args args = new GetSceneLabel_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetSceneLabel_result result = new GetSceneLabel_result();
        result.Success = iface_.GetSceneLabel(args._sceneId);
        oprot.WriteMessageBegin(new TMessage("GetSceneLabel", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SetSceneLabel_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SetSceneLabel_args args = new SetSceneLabel_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SetSceneLabel_result result = new SetSceneLabel_result();
        iface_.SetSceneLabel(args._sceneId, args._value);
        oprot.WriteMessageBegin(new TMessage("SetSceneLabel", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SceneExists_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SceneExists_args args = new SceneExists_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SceneExists_result result = new SceneExists_result();
        result.Success = iface_.SceneExists(args._sceneId);
        oprot.WriteMessageBegin(new TMessage("SceneExists", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void ActivateScene_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        ActivateScene_args args = new ActivateScene_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        ActivateScene_result result = new ActivateScene_result();
        result.Success = iface_.ActivateScene(args._sceneId);
        oprot.WriteMessageBegin(new TMessage("ActivateScene", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetDriverStatistics_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetDriverStatistics_args args = new GetDriverStatistics_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetDriverStatistics_result result = new GetDriverStatistics_result();
        result.Success = iface_.GetDriverStatistics(args._homeId);
        oprot.WriteMessageBegin(new TMessage("GetDriverStatistics", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetNodeStatistics_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetNodeStatistics_args args = new GetNodeStatistics_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetNodeStatistics_result result = new GetNodeStatistics_result();
        result.Success = iface_.GetNodeStatistics(args._homeId, args._nodeId);
        oprot.WriteMessageBegin(new TMessage("GetNodeStatistics", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SendAllValues_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SendAllValues_args args = new SendAllValues_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SendAllValues_result result = new SendAllValues_result();
        iface_.SendAllValues();
        oprot.WriteMessageBegin(new TMessage("SendAllValues", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void ping_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        ping_args args = new ping_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        ping_result result = new ping_result();
        iface_.ping();
        oprot.WriteMessageBegin(new TMessage("ping", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    [Serializable]
    public partial class WriteConfig_args : TBase
    {
      private int __homeId;

      public int _homeId
      {
        get
        {
          return __homeId;
        }
        set
        {
          __isset._homeId = true;
          this.__homeId = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _homeId;
      }

      public WriteConfig_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                _homeId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("WriteConfig_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset._homeId) {
          field.Name = "_homeId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(_homeId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("WriteConfig_args(");
        sb.Append("_homeId: ");
        sb.Append(_homeId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class WriteConfig_result : TBase
    {

      public WriteConfig_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("WriteConfig_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("WriteConfig_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class GetControllerNodeId_args : TBase
    {
      private int __homeId;

      public int _homeId
      {
        get
        {
          return __homeId;
        }
        set
        {
          __isset._homeId = true;
          this.__homeId = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _homeId;
      }

      public GetControllerNodeId_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                _homeId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetControllerNodeId_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset._homeId) {
          field.Name = "_homeId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(_homeId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetControllerNodeId_args(");
        sb.Append("_homeId: ");
        sb.Append(_homeId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class GetControllerNodeId_result : TBase
    {
      private byte _success;

      public byte Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public GetControllerNodeId_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Byte) {
                Success = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetControllerNodeId_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Byte;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetControllerNodeId_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class GetSUCNodeId_args : TBase
    {
      private int __homeId;

      public int _homeId
      {
        get
        {
          return __homeId;
        }
        set
        {
          __isset._homeId = true;
          this.__homeId = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _homeId;
      }

      public GetSUCNodeId_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                _homeId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetSUCNodeId_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset._homeId) {
          field.Name = "_homeId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(_homeId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetSUCNodeId_args(");
        sb.Append("_homeId: ");
        sb.Append(_homeId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class GetSUCNodeId_result : TBase
    {
      private byte _success;

      public byte Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public GetSUCNodeId_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Byte) {
                Success = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetSUCNodeId_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Byte;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetSUCNodeId_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class IsPrimaryController_args : TBase
    {
      private int __homeId;

      public int _homeId
      {
        get
        {
          return __homeId;
        }
        set
        {
          __isset._homeId = true;
          this.__homeId = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _homeId;
      }

      public IsPrimaryController_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                _homeId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("IsPrimaryController_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset._homeId) {
          field.Name = "_homeId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(_homeId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("IsPrimaryController_args(");
        sb.Append("_homeId: ");
        sb.Append(_homeId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class IsPrimaryController_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public IsPrimaryController_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("IsPrimaryController_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("IsPrimaryController_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class IsStaticUpdateController_args : TBase
    {
      private int __homeId;

      public int _homeId
      {
        get
        {
          return __homeId;
        }
        set
        {
          __isset._homeId = true;
          this.__homeId = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _homeId;
      }

      public IsStaticUpdateController_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                _homeId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("IsStaticUpdateController_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset._homeId) {
          field.Name = "_homeId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(_homeId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("IsStaticUpdateController_args(");
        sb.Append("_homeId: ");
        sb.Append(_homeId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class IsStaticUpdateController_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public IsStaticUpdateController_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("IsStaticUpdateController_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("IsStaticUpdateController_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class IsBridgeController_args : TBase
    {
      private int __homeId;

      public int _homeId
      {
        get
        {
          return __homeId;
        }
        set
        {
          __isset._homeId = true;
          this.__homeId = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _homeId;
      }

      public IsBridgeController_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                _homeId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("IsBridgeController_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset._homeId) {
          field.Name = "_homeId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(_homeId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("IsBridgeController_args(");
        sb.Append("_homeId: ");
        sb.Append(_homeId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class IsBridgeController_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public IsBridgeController_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("IsBridgeController_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("IsBridgeController_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class GetLibraryVersion_args : TBase
    {
      private int __homeId;

      public int _homeId
      {
        get
        {
          return __homeId;
        }
        set
        {
          __isset._homeId = true;
          this.__homeId = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _homeId;
      }

      public GetLibraryVersion_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                _homeId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetLibraryVersion_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset._homeId) {
          field.Name = "_homeId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(_homeId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetLibraryVersion_args(");
        sb.Append("_homeId: ");
        sb.Append(_homeId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class GetLibraryVersion_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public GetLibraryVersion_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetLibraryVersion_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetLibraryVersion_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class GetLibraryTypeName_args : TBase
    {
      private int __homeId;

      public int _homeId
      {
        get
        {
          return __homeId;
        }
        set
        {
          __isset._homeId = true;
          this.__homeId = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _homeId;
      }

      public GetLibraryTypeName_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                _homeId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetLibraryTypeName_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset._homeId) {
          field.Name = "_homeId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(_homeId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetLibraryTypeName_args(");
        sb.Append("_homeId: ");
        sb.Append(_homeId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class GetLibraryTypeName_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public GetLibraryTypeName_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetLibraryTypeName_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetLibraryTypeName_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class GetSendQueueCount_args : TBase
    {
      private int __homeId;

      public int _homeId
      {
        get
        {
          return __homeId;
        }
        set
        {
          __isset._homeId = true;
          this.__homeId = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _homeId;
      }

      public GetSendQueueCount_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                _homeId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetSendQueueCount_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset._homeId) {
          field.Name = "_homeId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(_homeId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetSendQueueCount_args(");
        sb.Append("_homeId: ");
        sb.Append(_homeId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class GetSendQueueCount_result : TBase
    {
      private int _success;

      public int Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public GetSendQueueCount_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetSendQueueCount_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetSendQueueCount_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class LogDriverStatistics_args : TBase
    {
      private int __homeId;

      public int _homeId
      {
        get
        {
          return __homeId;
        }
        set
        {
          __isset._homeId = true;
          this.__homeId = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _homeId;
      }

      public LogDriverStatistics_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                _homeId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("LogDriverStatistics_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset._homeId) {
          field.Name = "_homeId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(_homeId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("LogDriverStatistics_args(");
        sb.Append("_homeId: ");
        sb.Append(_homeId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class LogDriverStatistics_result : TBase
    {

      public LogDriverStatistics_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("LogDriverStatistics_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("LogDriverStatistics_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class GetControllerInterfaceType_args : TBase
    {
      private int __homeId;

      public int _homeId
      {
        get
        {
          return __homeId;
        }
        set
        {
          __isset._homeId = true;
          this.__homeId = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _homeId;
      }

      public GetControllerInterfaceType_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                _homeId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetControllerInterfaceType_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset._homeId) {
          field.Name = "_homeId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(_homeId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetControllerInterfaceType_args(");
        sb.Append("_homeId: ");
        sb.Append(_homeId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class GetControllerInterfaceType_result : TBase
    {
      private int _success;

      public int Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public GetControllerInterfaceType_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetControllerInterfaceType_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetControllerInterfaceType_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class GetControllerPath_args : TBase
    {
      private int __homeId;

      public int _homeId
      {
        get
        {
          return __homeId;
        }
        set
        {
          __isset._homeId = true;
          this.__homeId = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _homeId;
      }

      public GetControllerPath_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                _homeId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetControllerPath_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset._homeId) {
          field.Name = "_homeId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(_homeId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetControllerPath_args(");
        sb.Append("_homeId: ");
        sb.Append(_homeId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class GetControllerPath_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public GetControllerPath_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetControllerPath_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetControllerPath_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class GetPollInterval_args : TBase
    {

      public GetPollInterval_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetPollInterval_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetPollInterval_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class GetPollInterval_result : TBase
    {
      private int _success;

      public int Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public GetPollInterval_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetPollInterval_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetPollInterval_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class SetPollInterval_args : TBase
    {
      private int __milliseconds;
      private bool __bIntervalBetweenPolls;

      public int _milliseconds
      {
        get
        {
          return __milliseconds;
        }
        set
        {
          __isset._milliseconds = true;
          this.__milliseconds = value;
        }
      }

      public bool _bIntervalBetweenPolls
      {
        get
        {
          return __bIntervalBetweenPolls;
        }
        set
        {
          __isset._bIntervalBetweenPolls = true;
          this.__bIntervalBetweenPolls = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _milliseconds;
        public bool _bIntervalBetweenPolls;
      }

      public SetPollInterval_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                _milliseconds = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Bool) {
                _bIntervalBetweenPolls = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SetPollInterval_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset._milliseconds) {
          field.Name = "_milliseconds";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(_milliseconds);
          oprot.WriteFieldEnd();
        }
        if (__isset._bIntervalBetweenPolls) {
          field.Name = "_bIntervalBetweenPolls";
          field.Type = TType.Bool;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(_bIntervalBetweenPolls);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("SetPollInterval_args(");
        sb.Append("_milliseconds: ");
        sb.Append(_milliseconds);
        sb.Append(",_bIntervalBetweenPolls: ");
        sb.Append(_bIntervalBetweenPolls);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class SetPollInterval_result : TBase
    {

      public SetPollInterval_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SetPollInterval_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("SetPollInterval_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class EnablePoll_args : TBase
    {
      private RemoteValueID __valueId;
      private byte __intensity;

      public RemoteValueID _valueId
      {
        get
        {
          return __valueId;
        }
        set
        {
          __isset._valueId = true;
          this.__valueId = value;
        }
      }

      public byte _intensity
      {
        get
        {
          return __intensity;
        }
        set
        {
          __isset._intensity = true;
          this.__intensity = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _valueId;
        public bool _intensity;
      }

      public EnablePoll_args() {
        this.__intensity = 1;
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                _valueId = new RemoteValueID();
                _valueId.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Byte) {
                _intensity = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("EnablePoll_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (_valueId != null && __isset._valueId) {
          field.Name = "_valueId";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          _valueId.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset._intensity) {
          field.Name = "_intensity";
          field.Type = TType.Byte;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(_intensity);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("EnablePoll_args(");
        sb.Append("_valueId: ");
        sb.Append(_valueId== null ? "<null>" : _valueId.ToString());
        sb.Append(",_intensity: ");
        sb.Append(_intensity);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class EnablePoll_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public EnablePoll_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("EnablePoll_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("EnablePoll_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class DisablePoll_args : TBase
    {
      private RemoteValueID __valueId;

      public RemoteValueID _valueId
      {
        get
        {
          return __valueId;
        }
        set
        {
          __isset._valueId = true;
          this.__valueId = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _valueId;
      }

      public DisablePoll_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                _valueId = new RemoteValueID();
                _valueId.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("DisablePoll_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (_valueId != null && __isset._valueId) {
          field.Name = "_valueId";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          _valueId.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("DisablePoll_args(");
        sb.Append("_valueId: ");
        sb.Append(_valueId== null ? "<null>" : _valueId.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class DisablePoll_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public DisablePoll_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("DisablePoll_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("DisablePoll_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class isPolled_args : TBase
    {
      private RemoteValueID __valueId;

      public RemoteValueID _valueId
      {
        get
        {
          return __valueId;
        }
        set
        {
          __isset._valueId = true;
          this.__valueId = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _valueId;
      }

      public isPolled_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                _valueId = new RemoteValueID();
                _valueId.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("isPolled_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (_valueId != null && __isset._valueId) {
          field.Name = "_valueId";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          _valueId.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("isPolled_args(");
        sb.Append("_valueId: ");
        sb.Append(_valueId== null ? "<null>" : _valueId.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class isPolled_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public isPolled_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("isPolled_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("isPolled_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class SetPollIntensity_args : TBase
    {
      private RemoteValueID __valueId;
      private byte __intensity;

      public RemoteValueID _valueId
      {
        get
        {
          return __valueId;
        }
        set
        {
          __isset._valueId = true;
          this.__valueId = value;
        }
      }

      public byte _intensity
      {
        get
        {
          return __intensity;
        }
        set
        {
          __isset._intensity = true;
          this.__intensity = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _valueId;
        public bool _intensity;
      }

      public SetPollIntensity_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                _valueId = new RemoteValueID();
                _valueId.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Byte) {
                _intensity = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SetPollIntensity_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (_valueId != null && __isset._valueId) {
          field.Name = "_valueId";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          _valueId.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset._intensity) {
          field.Name = "_intensity";
          field.Type = TType.Byte;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(_intensity);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("SetPollIntensity_args(");
        sb.Append("_valueId: ");
        sb.Append(_valueId== null ? "<null>" : _valueId.ToString());
        sb.Append(",_intensity: ");
        sb.Append(_intensity);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class SetPollIntensity_result : TBase
    {

      public SetPollIntensity_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SetPollIntensity_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("SetPollIntensity_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class RefreshNodeInfo_args : TBase
    {
      private int __homeId;
      private byte __nodeId;

      public int _homeId
      {
        get
        {
          return __homeId;
        }
        set
        {
          __isset._homeId = true;
          this.__homeId = value;
        }
      }

      public byte _nodeId
      {
        get
        {
          return __nodeId;
        }
        set
        {
          __isset._nodeId = true;
          this.__nodeId = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _homeId;
        public bool _nodeId;
      }

      public RefreshNodeInfo_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                _homeId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Byte) {
                _nodeId = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("RefreshNodeInfo_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset._homeId) {
          field.Name = "_homeId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(_homeId);
          oprot.WriteFieldEnd();
        }
        if (__isset._nodeId) {
          field.Name = "_nodeId";
          field.Type = TType.Byte;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(_nodeId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("RefreshNodeInfo_args(");
        sb.Append("_homeId: ");
        sb.Append(_homeId);
        sb.Append(",_nodeId: ");
        sb.Append(_nodeId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class RefreshNodeInfo_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public RefreshNodeInfo_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("RefreshNodeInfo_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("RefreshNodeInfo_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class RequestNodeState_args : TBase
    {
      private int __homeId;
      private byte __nodeId;

      public int _homeId
      {
        get
        {
          return __homeId;
        }
        set
        {
          __isset._homeId = true;
          this.__homeId = value;
        }
      }

      public byte _nodeId
      {
        get
        {
          return __nodeId;
        }
        set
        {
          __isset._nodeId = true;
          this.__nodeId = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _homeId;
        public bool _nodeId;
      }

      public RequestNodeState_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                _homeId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Byte) {
                _nodeId = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("RequestNodeState_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset._homeId) {
          field.Name = "_homeId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(_homeId);
          oprot.WriteFieldEnd();
        }
        if (__isset._nodeId) {
          field.Name = "_nodeId";
          field.Type = TType.Byte;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(_nodeId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("RequestNodeState_args(");
        sb.Append("_homeId: ");
        sb.Append(_homeId);
        sb.Append(",_nodeId: ");
        sb.Append(_nodeId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class RequestNodeState_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public RequestNodeState_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("RequestNodeState_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("RequestNodeState_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class RequestNodeDynamic_args : TBase
    {
      private int __homeId;
      private byte __nodeId;

      public int _homeId
      {
        get
        {
          return __homeId;
        }
        set
        {
          __isset._homeId = true;
          this.__homeId = value;
        }
      }

      public byte _nodeId
      {
        get
        {
          return __nodeId;
        }
        set
        {
          __isset._nodeId = true;
          this.__nodeId = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _homeId;
        public bool _nodeId;
      }

      public RequestNodeDynamic_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                _homeId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Byte) {
                _nodeId = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("RequestNodeDynamic_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset._homeId) {
          field.Name = "_homeId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(_homeId);
          oprot.WriteFieldEnd();
        }
        if (__isset._nodeId) {
          field.Name = "_nodeId";
          field.Type = TType.Byte;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(_nodeId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("RequestNodeDynamic_args(");
        sb.Append("_homeId: ");
        sb.Append(_homeId);
        sb.Append(",_nodeId: ");
        sb.Append(_nodeId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class RequestNodeDynamic_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public RequestNodeDynamic_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("RequestNodeDynamic_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("RequestNodeDynamic_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class IsNodeListeningDevice_args : TBase
    {
      private int __homeId;
      private byte __nodeId;

      public int _homeId
      {
        get
        {
          return __homeId;
        }
        set
        {
          __isset._homeId = true;
          this.__homeId = value;
        }
      }

      public byte _nodeId
      {
        get
        {
          return __nodeId;
        }
        set
        {
          __isset._nodeId = true;
          this.__nodeId = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _homeId;
        public bool _nodeId;
      }

      public IsNodeListeningDevice_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                _homeId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Byte) {
                _nodeId = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("IsNodeListeningDevice_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset._homeId) {
          field.Name = "_homeId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(_homeId);
          oprot.WriteFieldEnd();
        }
        if (__isset._nodeId) {
          field.Name = "_nodeId";
          field.Type = TType.Byte;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(_nodeId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("IsNodeListeningDevice_args(");
        sb.Append("_homeId: ");
        sb.Append(_homeId);
        sb.Append(",_nodeId: ");
        sb.Append(_nodeId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class IsNodeListeningDevice_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public IsNodeListeningDevice_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("IsNodeListeningDevice_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("IsNodeListeningDevice_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class IsNodeFrequentListeningDevice_args : TBase
    {
      private int __homeId;
      private byte __nodeId;

      public int _homeId
      {
        get
        {
          return __homeId;
        }
        set
        {
          __isset._homeId = true;
          this.__homeId = value;
        }
      }

      public byte _nodeId
      {
        get
        {
          return __nodeId;
        }
        set
        {
          __isset._nodeId = true;
          this.__nodeId = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _homeId;
        public bool _nodeId;
      }

      public IsNodeFrequentListeningDevice_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                _homeId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Byte) {
                _nodeId = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("IsNodeFrequentListeningDevice_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset._homeId) {
          field.Name = "_homeId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(_homeId);
          oprot.WriteFieldEnd();
        }
        if (__isset._nodeId) {
          field.Name = "_nodeId";
          field.Type = TType.Byte;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(_nodeId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("IsNodeFrequentListeningDevice_args(");
        sb.Append("_homeId: ");
        sb.Append(_homeId);
        sb.Append(",_nodeId: ");
        sb.Append(_nodeId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class IsNodeFrequentListeningDevice_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public IsNodeFrequentListeningDevice_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("IsNodeFrequentListeningDevice_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("IsNodeFrequentListeningDevice_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class IsNodeBeamingDevice_args : TBase
    {
      private int __homeId;
      private byte __nodeId;

      public int _homeId
      {
        get
        {
          return __homeId;
        }
        set
        {
          __isset._homeId = true;
          this.__homeId = value;
        }
      }

      public byte _nodeId
      {
        get
        {
          return __nodeId;
        }
        set
        {
          __isset._nodeId = true;
          this.__nodeId = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _homeId;
        public bool _nodeId;
      }

      public IsNodeBeamingDevice_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                _homeId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Byte) {
                _nodeId = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("IsNodeBeamingDevice_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset._homeId) {
          field.Name = "_homeId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(_homeId);
          oprot.WriteFieldEnd();
        }
        if (__isset._nodeId) {
          field.Name = "_nodeId";
          field.Type = TType.Byte;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(_nodeId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("IsNodeBeamingDevice_args(");
        sb.Append("_homeId: ");
        sb.Append(_homeId);
        sb.Append(",_nodeId: ");
        sb.Append(_nodeId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class IsNodeBeamingDevice_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public IsNodeBeamingDevice_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("IsNodeBeamingDevice_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("IsNodeBeamingDevice_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class IsNodeRoutingDevice_args : TBase
    {
      private int __homeId;
      private byte __nodeId;

      public int _homeId
      {
        get
        {
          return __homeId;
        }
        set
        {
          __isset._homeId = true;
          this.__homeId = value;
        }
      }

      public byte _nodeId
      {
        get
        {
          return __nodeId;
        }
        set
        {
          __isset._nodeId = true;
          this.__nodeId = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _homeId;
        public bool _nodeId;
      }

      public IsNodeRoutingDevice_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                _homeId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Byte) {
                _nodeId = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("IsNodeRoutingDevice_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset._homeId) {
          field.Name = "_homeId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(_homeId);
          oprot.WriteFieldEnd();
        }
        if (__isset._nodeId) {
          field.Name = "_nodeId";
          field.Type = TType.Byte;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(_nodeId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("IsNodeRoutingDevice_args(");
        sb.Append("_homeId: ");
        sb.Append(_homeId);
        sb.Append(",_nodeId: ");
        sb.Append(_nodeId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class IsNodeRoutingDevice_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public IsNodeRoutingDevice_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("IsNodeRoutingDevice_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("IsNodeRoutingDevice_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class IsNodeSecurityDevice_args : TBase
    {
      private int __homeId;
      private byte __nodeId;

      public int _homeId
      {
        get
        {
          return __homeId;
        }
        set
        {
          __isset._homeId = true;
          this.__homeId = value;
        }
      }

      public byte _nodeId
      {
        get
        {
          return __nodeId;
        }
        set
        {
          __isset._nodeId = true;
          this.__nodeId = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _homeId;
        public bool _nodeId;
      }

      public IsNodeSecurityDevice_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                _homeId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Byte) {
                _nodeId = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("IsNodeSecurityDevice_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset._homeId) {
          field.Name = "_homeId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(_homeId);
          oprot.WriteFieldEnd();
        }
        if (__isset._nodeId) {
          field.Name = "_nodeId";
          field.Type = TType.Byte;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(_nodeId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("IsNodeSecurityDevice_args(");
        sb.Append("_homeId: ");
        sb.Append(_homeId);
        sb.Append(",_nodeId: ");
        sb.Append(_nodeId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class IsNodeSecurityDevice_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public IsNodeSecurityDevice_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("IsNodeSecurityDevice_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("IsNodeSecurityDevice_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class GetNodeMaxBaudRate_args : TBase
    {
      private int __homeId;
      private byte __nodeId;

      public int _homeId
      {
        get
        {
          return __homeId;
        }
        set
        {
          __isset._homeId = true;
          this.__homeId = value;
        }
      }

      public byte _nodeId
      {
        get
        {
          return __nodeId;
        }
        set
        {
          __isset._nodeId = true;
          this.__nodeId = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _homeId;
        public bool _nodeId;
      }

      public GetNodeMaxBaudRate_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                _homeId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Byte) {
                _nodeId = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetNodeMaxBaudRate_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset._homeId) {
          field.Name = "_homeId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(_homeId);
          oprot.WriteFieldEnd();
        }
        if (__isset._nodeId) {
          field.Name = "_nodeId";
          field.Type = TType.Byte;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(_nodeId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetNodeMaxBaudRate_args(");
        sb.Append("_homeId: ");
        sb.Append(_homeId);
        sb.Append(",_nodeId: ");
        sb.Append(_nodeId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class GetNodeMaxBaudRate_result : TBase
    {
      private int _success;

      public int Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public GetNodeMaxBaudRate_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetNodeMaxBaudRate_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetNodeMaxBaudRate_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class GetNodeVersion_args : TBase
    {
      private int __homeId;
      private byte __nodeId;

      public int _homeId
      {
        get
        {
          return __homeId;
        }
        set
        {
          __isset._homeId = true;
          this.__homeId = value;
        }
      }

      public byte _nodeId
      {
        get
        {
          return __nodeId;
        }
        set
        {
          __isset._nodeId = true;
          this.__nodeId = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _homeId;
        public bool _nodeId;
      }

      public GetNodeVersion_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                _homeId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Byte) {
                _nodeId = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetNodeVersion_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset._homeId) {
          field.Name = "_homeId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(_homeId);
          oprot.WriteFieldEnd();
        }
        if (__isset._nodeId) {
          field.Name = "_nodeId";
          field.Type = TType.Byte;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(_nodeId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetNodeVersion_args(");
        sb.Append("_homeId: ");
        sb.Append(_homeId);
        sb.Append(",_nodeId: ");
        sb.Append(_nodeId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class GetNodeVersion_result : TBase
    {
      private byte _success;

      public byte Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public GetNodeVersion_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Byte) {
                Success = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetNodeVersion_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Byte;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetNodeVersion_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class GetNodeSecurity_args : TBase
    {
      private int __homeId;
      private byte __nodeId;

      public int _homeId
      {
        get
        {
          return __homeId;
        }
        set
        {
          __isset._homeId = true;
          this.__homeId = value;
        }
      }

      public byte _nodeId
      {
        get
        {
          return __nodeId;
        }
        set
        {
          __isset._nodeId = true;
          this.__nodeId = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _homeId;
        public bool _nodeId;
      }

      public GetNodeSecurity_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                _homeId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Byte) {
                _nodeId = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetNodeSecurity_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset._homeId) {
          field.Name = "_homeId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(_homeId);
          oprot.WriteFieldEnd();
        }
        if (__isset._nodeId) {
          field.Name = "_nodeId";
          field.Type = TType.Byte;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(_nodeId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetNodeSecurity_args(");
        sb.Append("_homeId: ");
        sb.Append(_homeId);
        sb.Append(",_nodeId: ");
        sb.Append(_nodeId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class GetNodeSecurity_result : TBase
    {
      private byte _success;

      public byte Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public GetNodeSecurity_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Byte) {
                Success = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetNodeSecurity_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Byte;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetNodeSecurity_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class GetNodeBasic_args : TBase
    {
      private int __homeId;
      private byte __nodeId;

      public int _homeId
      {
        get
        {
          return __homeId;
        }
        set
        {
          __isset._homeId = true;
          this.__homeId = value;
        }
      }

      public byte _nodeId
      {
        get
        {
          return __nodeId;
        }
        set
        {
          __isset._nodeId = true;
          this.__nodeId = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _homeId;
        public bool _nodeId;
      }

      public GetNodeBasic_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                _homeId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Byte) {
                _nodeId = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetNodeBasic_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset._homeId) {
          field.Name = "_homeId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(_homeId);
          oprot.WriteFieldEnd();
        }
        if (__isset._nodeId) {
          field.Name = "_nodeId";
          field.Type = TType.Byte;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(_nodeId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetNodeBasic_args(");
        sb.Append("_homeId: ");
        sb.Append(_homeId);
        sb.Append(",_nodeId: ");
        sb.Append(_nodeId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class GetNodeBasic_result : TBase
    {
      private byte _success;

      public byte Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public GetNodeBasic_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Byte) {
                Success = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetNodeBasic_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Byte;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetNodeBasic_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class GetNodeGeneric_args : TBase
    {
      private int __homeId;
      private byte __nodeId;

      public int _homeId
      {
        get
        {
          return __homeId;
        }
        set
        {
          __isset._homeId = true;
          this.__homeId = value;
        }
      }

      public byte _nodeId
      {
        get
        {
          return __nodeId;
        }
        set
        {
          __isset._nodeId = true;
          this.__nodeId = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _homeId;
        public bool _nodeId;
      }

      public GetNodeGeneric_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                _homeId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Byte) {
                _nodeId = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetNodeGeneric_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset._homeId) {
          field.Name = "_homeId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(_homeId);
          oprot.WriteFieldEnd();
        }
        if (__isset._nodeId) {
          field.Name = "_nodeId";
          field.Type = TType.Byte;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(_nodeId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetNodeGeneric_args(");
        sb.Append("_homeId: ");
        sb.Append(_homeId);
        sb.Append(",_nodeId: ");
        sb.Append(_nodeId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class GetNodeGeneric_result : TBase
    {
      private byte _success;

      public byte Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public GetNodeGeneric_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Byte) {
                Success = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetNodeGeneric_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Byte;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetNodeGeneric_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class GetNodeSpecific_args : TBase
    {
      private int __homeId;
      private byte __nodeId;

      public int _homeId
      {
        get
        {
          return __homeId;
        }
        set
        {
          __isset._homeId = true;
          this.__homeId = value;
        }
      }

      public byte _nodeId
      {
        get
        {
          return __nodeId;
        }
        set
        {
          __isset._nodeId = true;
          this.__nodeId = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _homeId;
        public bool _nodeId;
      }

      public GetNodeSpecific_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                _homeId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Byte) {
                _nodeId = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetNodeSpecific_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset._homeId) {
          field.Name = "_homeId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(_homeId);
          oprot.WriteFieldEnd();
        }
        if (__isset._nodeId) {
          field.Name = "_nodeId";
          field.Type = TType.Byte;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(_nodeId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetNodeSpecific_args(");
        sb.Append("_homeId: ");
        sb.Append(_homeId);
        sb.Append(",_nodeId: ");
        sb.Append(_nodeId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class GetNodeSpecific_result : TBase
    {
      private byte _success;

      public byte Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public GetNodeSpecific_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Byte) {
                Success = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetNodeSpecific_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Byte;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetNodeSpecific_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class GetNodeType_args : TBase
    {
      private int __homeId;
      private byte __nodeId;

      public int _homeId
      {
        get
        {
          return __homeId;
        }
        set
        {
          __isset._homeId = true;
          this.__homeId = value;
        }
      }

      public byte _nodeId
      {
        get
        {
          return __nodeId;
        }
        set
        {
          __isset._nodeId = true;
          this.__nodeId = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _homeId;
        public bool _nodeId;
      }

      public GetNodeType_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                _homeId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Byte) {
                _nodeId = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetNodeType_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset._homeId) {
          field.Name = "_homeId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(_homeId);
          oprot.WriteFieldEnd();
        }
        if (__isset._nodeId) {
          field.Name = "_nodeId";
          field.Type = TType.Byte;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(_nodeId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetNodeType_args(");
        sb.Append("_homeId: ");
        sb.Append(_homeId);
        sb.Append(",_nodeId: ");
        sb.Append(_nodeId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class GetNodeType_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public GetNodeType_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetNodeType_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetNodeType_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class GetNodeNeighbors_args : TBase
    {
      private int __homeId;
      private byte __nodeId;

      public int _homeId
      {
        get
        {
          return __homeId;
        }
        set
        {
          __isset._homeId = true;
          this.__homeId = value;
        }
      }

      public byte _nodeId
      {
        get
        {
          return __nodeId;
        }
        set
        {
          __isset._nodeId = true;
          this.__nodeId = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _homeId;
        public bool _nodeId;
      }

      public GetNodeNeighbors_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                _homeId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Byte) {
                _nodeId = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetNodeNeighbors_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset._homeId) {
          field.Name = "_homeId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(_homeId);
          oprot.WriteFieldEnd();
        }
        if (__isset._nodeId) {
          field.Name = "_nodeId";
          field.Type = TType.Byte;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(_nodeId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetNodeNeighbors_args(");
        sb.Append("_homeId: ");
        sb.Append(_homeId);
        sb.Append(",_nodeId: ");
        sb.Append(_nodeId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class GetNodeNeighbors_result : TBase
    {
      private UInt32_ListByte _success;

      public UInt32_ListByte Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public GetNodeNeighbors_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new UInt32_ListByte();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetNodeNeighbors_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetNodeNeighbors_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class GetNodeManufacturerName_args : TBase
    {
      private int __homeId;
      private byte __nodeId;

      public int _homeId
      {
        get
        {
          return __homeId;
        }
        set
        {
          __isset._homeId = true;
          this.__homeId = value;
        }
      }

      public byte _nodeId
      {
        get
        {
          return __nodeId;
        }
        set
        {
          __isset._nodeId = true;
          this.__nodeId = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _homeId;
        public bool _nodeId;
      }

      public GetNodeManufacturerName_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                _homeId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Byte) {
                _nodeId = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetNodeManufacturerName_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset._homeId) {
          field.Name = "_homeId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(_homeId);
          oprot.WriteFieldEnd();
        }
        if (__isset._nodeId) {
          field.Name = "_nodeId";
          field.Type = TType.Byte;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(_nodeId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetNodeManufacturerName_args(");
        sb.Append("_homeId: ");
        sb.Append(_homeId);
        sb.Append(",_nodeId: ");
        sb.Append(_nodeId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class GetNodeManufacturerName_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public GetNodeManufacturerName_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetNodeManufacturerName_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetNodeManufacturerName_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class GetNodeProductName_args : TBase
    {
      private int __homeId;
      private byte __nodeId;

      public int _homeId
      {
        get
        {
          return __homeId;
        }
        set
        {
          __isset._homeId = true;
          this.__homeId = value;
        }
      }

      public byte _nodeId
      {
        get
        {
          return __nodeId;
        }
        set
        {
          __isset._nodeId = true;
          this.__nodeId = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _homeId;
        public bool _nodeId;
      }

      public GetNodeProductName_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                _homeId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Byte) {
                _nodeId = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetNodeProductName_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset._homeId) {
          field.Name = "_homeId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(_homeId);
          oprot.WriteFieldEnd();
        }
        if (__isset._nodeId) {
          field.Name = "_nodeId";
          field.Type = TType.Byte;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(_nodeId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetNodeProductName_args(");
        sb.Append("_homeId: ");
        sb.Append(_homeId);
        sb.Append(",_nodeId: ");
        sb.Append(_nodeId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class GetNodeProductName_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public GetNodeProductName_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetNodeProductName_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetNodeProductName_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class GetNodeName_args : TBase
    {
      private int __homeId;
      private byte __nodeId;

      public int _homeId
      {
        get
        {
          return __homeId;
        }
        set
        {
          __isset._homeId = true;
          this.__homeId = value;
        }
      }

      public byte _nodeId
      {
        get
        {
          return __nodeId;
        }
        set
        {
          __isset._nodeId = true;
          this.__nodeId = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _homeId;
        public bool _nodeId;
      }

      public GetNodeName_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                _homeId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Byte) {
                _nodeId = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetNodeName_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset._homeId) {
          field.Name = "_homeId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(_homeId);
          oprot.WriteFieldEnd();
        }
        if (__isset._nodeId) {
          field.Name = "_nodeId";
          field.Type = TType.Byte;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(_nodeId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetNodeName_args(");
        sb.Append("_homeId: ");
        sb.Append(_homeId);
        sb.Append(",_nodeId: ");
        sb.Append(_nodeId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class GetNodeName_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public GetNodeName_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetNodeName_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetNodeName_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class GetNodeLocation_args : TBase
    {
      private int __homeId;
      private byte __nodeId;

      public int _homeId
      {
        get
        {
          return __homeId;
        }
        set
        {
          __isset._homeId = true;
          this.__homeId = value;
        }
      }

      public byte _nodeId
      {
        get
        {
          return __nodeId;
        }
        set
        {
          __isset._nodeId = true;
          this.__nodeId = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _homeId;
        public bool _nodeId;
      }

      public GetNodeLocation_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                _homeId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Byte) {
                _nodeId = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetNodeLocation_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset._homeId) {
          field.Name = "_homeId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(_homeId);
          oprot.WriteFieldEnd();
        }
        if (__isset._nodeId) {
          field.Name = "_nodeId";
          field.Type = TType.Byte;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(_nodeId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetNodeLocation_args(");
        sb.Append("_homeId: ");
        sb.Append(_homeId);
        sb.Append(",_nodeId: ");
        sb.Append(_nodeId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class GetNodeLocation_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public GetNodeLocation_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetNodeLocation_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetNodeLocation_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class GetNodeManufacturerId_args : TBase
    {
      private int __homeId;
      private byte __nodeId;

      public int _homeId
      {
        get
        {
          return __homeId;
        }
        set
        {
          __isset._homeId = true;
          this.__homeId = value;
        }
      }

      public byte _nodeId
      {
        get
        {
          return __nodeId;
        }
        set
        {
          __isset._nodeId = true;
          this.__nodeId = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _homeId;
        public bool _nodeId;
      }

      public GetNodeManufacturerId_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                _homeId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Byte) {
                _nodeId = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetNodeManufacturerId_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset._homeId) {
          field.Name = "_homeId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(_homeId);
          oprot.WriteFieldEnd();
        }
        if (__isset._nodeId) {
          field.Name = "_nodeId";
          field.Type = TType.Byte;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(_nodeId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetNodeManufacturerId_args(");
        sb.Append("_homeId: ");
        sb.Append(_homeId);
        sb.Append(",_nodeId: ");
        sb.Append(_nodeId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class GetNodeManufacturerId_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public GetNodeManufacturerId_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetNodeManufacturerId_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetNodeManufacturerId_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class GetNodeProductType_args : TBase
    {
      private int __homeId;
      private byte __nodeId;

      public int _homeId
      {
        get
        {
          return __homeId;
        }
        set
        {
          __isset._homeId = true;
          this.__homeId = value;
        }
      }

      public byte _nodeId
      {
        get
        {
          return __nodeId;
        }
        set
        {
          __isset._nodeId = true;
          this.__nodeId = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _homeId;
        public bool _nodeId;
      }

      public GetNodeProductType_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                _homeId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Byte) {
                _nodeId = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetNodeProductType_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset._homeId) {
          field.Name = "_homeId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(_homeId);
          oprot.WriteFieldEnd();
        }
        if (__isset._nodeId) {
          field.Name = "_nodeId";
          field.Type = TType.Byte;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(_nodeId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetNodeProductType_args(");
        sb.Append("_homeId: ");
        sb.Append(_homeId);
        sb.Append(",_nodeId: ");
        sb.Append(_nodeId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class GetNodeProductType_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public GetNodeProductType_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetNodeProductType_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetNodeProductType_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class GetNodeProductId_args : TBase
    {
      private int __homeId;
      private byte __nodeId;

      public int _homeId
      {
        get
        {
          return __homeId;
        }
        set
        {
          __isset._homeId = true;
          this.__homeId = value;
        }
      }

      public byte _nodeId
      {
        get
        {
          return __nodeId;
        }
        set
        {
          __isset._nodeId = true;
          this.__nodeId = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _homeId;
        public bool _nodeId;
      }

      public GetNodeProductId_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                _homeId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Byte) {
                _nodeId = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetNodeProductId_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset._homeId) {
          field.Name = "_homeId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(_homeId);
          oprot.WriteFieldEnd();
        }
        if (__isset._nodeId) {
          field.Name = "_nodeId";
          field.Type = TType.Byte;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(_nodeId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetNodeProductId_args(");
        sb.Append("_homeId: ");
        sb.Append(_homeId);
        sb.Append(",_nodeId: ");
        sb.Append(_nodeId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class GetNodeProductId_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public GetNodeProductId_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetNodeProductId_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetNodeProductId_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class SetNodeManufacturerName_args : TBase
    {
      private int __homeId;
      private byte __nodeId;
      private string __manufacturerName;

      public int _homeId
      {
        get
        {
          return __homeId;
        }
        set
        {
          __isset._homeId = true;
          this.__homeId = value;
        }
      }

      public byte _nodeId
      {
        get
        {
          return __nodeId;
        }
        set
        {
          __isset._nodeId = true;
          this.__nodeId = value;
        }
      }

      public string _manufacturerName
      {
        get
        {
          return __manufacturerName;
        }
        set
        {
          __isset._manufacturerName = true;
          this.__manufacturerName = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _homeId;
        public bool _nodeId;
        public bool _manufacturerName;
      }

      public SetNodeManufacturerName_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                _homeId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Byte) {
                _nodeId = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                _manufacturerName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SetNodeManufacturerName_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset._homeId) {
          field.Name = "_homeId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(_homeId);
          oprot.WriteFieldEnd();
        }
        if (__isset._nodeId) {
          field.Name = "_nodeId";
          field.Type = TType.Byte;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(_nodeId);
          oprot.WriteFieldEnd();
        }
        if (_manufacturerName != null && __isset._manufacturerName) {
          field.Name = "_manufacturerName";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(_manufacturerName);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("SetNodeManufacturerName_args(");
        sb.Append("_homeId: ");
        sb.Append(_homeId);
        sb.Append(",_nodeId: ");
        sb.Append(_nodeId);
        sb.Append(",_manufacturerName: ");
        sb.Append(_manufacturerName);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class SetNodeManufacturerName_result : TBase
    {

      public SetNodeManufacturerName_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SetNodeManufacturerName_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("SetNodeManufacturerName_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class SetNodeProductName_args : TBase
    {
      private int __homeId;
      private byte __nodeId;
      private string __productName;

      public int _homeId
      {
        get
        {
          return __homeId;
        }
        set
        {
          __isset._homeId = true;
          this.__homeId = value;
        }
      }

      public byte _nodeId
      {
        get
        {
          return __nodeId;
        }
        set
        {
          __isset._nodeId = true;
          this.__nodeId = value;
        }
      }

      public string _productName
      {
        get
        {
          return __productName;
        }
        set
        {
          __isset._productName = true;
          this.__productName = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _homeId;
        public bool _nodeId;
        public bool _productName;
      }

      public SetNodeProductName_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                _homeId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Byte) {
                _nodeId = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                _productName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SetNodeProductName_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset._homeId) {
          field.Name = "_homeId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(_homeId);
          oprot.WriteFieldEnd();
        }
        if (__isset._nodeId) {
          field.Name = "_nodeId";
          field.Type = TType.Byte;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(_nodeId);
          oprot.WriteFieldEnd();
        }
        if (_productName != null && __isset._productName) {
          field.Name = "_productName";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(_productName);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("SetNodeProductName_args(");
        sb.Append("_homeId: ");
        sb.Append(_homeId);
        sb.Append(",_nodeId: ");
        sb.Append(_nodeId);
        sb.Append(",_productName: ");
        sb.Append(_productName);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class SetNodeProductName_result : TBase
    {

      public SetNodeProductName_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SetNodeProductName_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("SetNodeProductName_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class SetNodeName_args : TBase
    {
      private int __homeId;
      private byte __nodeId;
      private string __nodeName;

      public int _homeId
      {
        get
        {
          return __homeId;
        }
        set
        {
          __isset._homeId = true;
          this.__homeId = value;
        }
      }

      public byte _nodeId
      {
        get
        {
          return __nodeId;
        }
        set
        {
          __isset._nodeId = true;
          this.__nodeId = value;
        }
      }

      public string _nodeName
      {
        get
        {
          return __nodeName;
        }
        set
        {
          __isset._nodeName = true;
          this.__nodeName = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _homeId;
        public bool _nodeId;
        public bool _nodeName;
      }

      public SetNodeName_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                _homeId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Byte) {
                _nodeId = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                _nodeName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SetNodeName_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset._homeId) {
          field.Name = "_homeId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(_homeId);
          oprot.WriteFieldEnd();
        }
        if (__isset._nodeId) {
          field.Name = "_nodeId";
          field.Type = TType.Byte;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(_nodeId);
          oprot.WriteFieldEnd();
        }
        if (_nodeName != null && __isset._nodeName) {
          field.Name = "_nodeName";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(_nodeName);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("SetNodeName_args(");
        sb.Append("_homeId: ");
        sb.Append(_homeId);
        sb.Append(",_nodeId: ");
        sb.Append(_nodeId);
        sb.Append(",_nodeName: ");
        sb.Append(_nodeName);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class SetNodeName_result : TBase
    {

      public SetNodeName_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SetNodeName_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("SetNodeName_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class SetNodeLocation_args : TBase
    {
      private int __homeId;
      private byte __nodeId;
      private string __location;

      public int _homeId
      {
        get
        {
          return __homeId;
        }
        set
        {
          __isset._homeId = true;
          this.__homeId = value;
        }
      }

      public byte _nodeId
      {
        get
        {
          return __nodeId;
        }
        set
        {
          __isset._nodeId = true;
          this.__nodeId = value;
        }
      }

      public string _location
      {
        get
        {
          return __location;
        }
        set
        {
          __isset._location = true;
          this.__location = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _homeId;
        public bool _nodeId;
        public bool _location;
      }

      public SetNodeLocation_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                _homeId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Byte) {
                _nodeId = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                _location = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SetNodeLocation_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset._homeId) {
          field.Name = "_homeId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(_homeId);
          oprot.WriteFieldEnd();
        }
        if (__isset._nodeId) {
          field.Name = "_nodeId";
          field.Type = TType.Byte;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(_nodeId);
          oprot.WriteFieldEnd();
        }
        if (_location != null && __isset._location) {
          field.Name = "_location";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(_location);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("SetNodeLocation_args(");
        sb.Append("_homeId: ");
        sb.Append(_homeId);
        sb.Append(",_nodeId: ");
        sb.Append(_nodeId);
        sb.Append(",_location: ");
        sb.Append(_location);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class SetNodeLocation_result : TBase
    {

      public SetNodeLocation_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SetNodeLocation_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("SetNodeLocation_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class SetNodeOn_args : TBase
    {
      private int __homeId;
      private byte __nodeId;

      public int _homeId
      {
        get
        {
          return __homeId;
        }
        set
        {
          __isset._homeId = true;
          this.__homeId = value;
        }
      }

      public byte _nodeId
      {
        get
        {
          return __nodeId;
        }
        set
        {
          __isset._nodeId = true;
          this.__nodeId = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _homeId;
        public bool _nodeId;
      }

      public SetNodeOn_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                _homeId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Byte) {
                _nodeId = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SetNodeOn_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset._homeId) {
          field.Name = "_homeId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(_homeId);
          oprot.WriteFieldEnd();
        }
        if (__isset._nodeId) {
          field.Name = "_nodeId";
          field.Type = TType.Byte;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(_nodeId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("SetNodeOn_args(");
        sb.Append("_homeId: ");
        sb.Append(_homeId);
        sb.Append(",_nodeId: ");
        sb.Append(_nodeId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class SetNodeOn_result : TBase
    {

      public SetNodeOn_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SetNodeOn_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("SetNodeOn_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class SetNodeOff_args : TBase
    {
      private int __homeId;
      private byte __nodeId;

      public int _homeId
      {
        get
        {
          return __homeId;
        }
        set
        {
          __isset._homeId = true;
          this.__homeId = value;
        }
      }

      public byte _nodeId
      {
        get
        {
          return __nodeId;
        }
        set
        {
          __isset._nodeId = true;
          this.__nodeId = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _homeId;
        public bool _nodeId;
      }

      public SetNodeOff_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                _homeId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Byte) {
                _nodeId = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SetNodeOff_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset._homeId) {
          field.Name = "_homeId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(_homeId);
          oprot.WriteFieldEnd();
        }
        if (__isset._nodeId) {
          field.Name = "_nodeId";
          field.Type = TType.Byte;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(_nodeId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("SetNodeOff_args(");
        sb.Append("_homeId: ");
        sb.Append(_homeId);
        sb.Append(",_nodeId: ");
        sb.Append(_nodeId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class SetNodeOff_result : TBase
    {

      public SetNodeOff_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SetNodeOff_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("SetNodeOff_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class SetNodeLevel_args : TBase
    {
      private int __homeId;
      private byte __nodeId;
      private byte __level;

      public int _homeId
      {
        get
        {
          return __homeId;
        }
        set
        {
          __isset._homeId = true;
          this.__homeId = value;
        }
      }

      public byte _nodeId
      {
        get
        {
          return __nodeId;
        }
        set
        {
          __isset._nodeId = true;
          this.__nodeId = value;
        }
      }

      public byte _level
      {
        get
        {
          return __level;
        }
        set
        {
          __isset._level = true;
          this.__level = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _homeId;
        public bool _nodeId;
        public bool _level;
      }

      public SetNodeLevel_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                _homeId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Byte) {
                _nodeId = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Byte) {
                _level = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SetNodeLevel_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset._homeId) {
          field.Name = "_homeId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(_homeId);
          oprot.WriteFieldEnd();
        }
        if (__isset._nodeId) {
          field.Name = "_nodeId";
          field.Type = TType.Byte;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(_nodeId);
          oprot.WriteFieldEnd();
        }
        if (__isset._level) {
          field.Name = "_level";
          field.Type = TType.Byte;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(_level);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("SetNodeLevel_args(");
        sb.Append("_homeId: ");
        sb.Append(_homeId);
        sb.Append(",_nodeId: ");
        sb.Append(_nodeId);
        sb.Append(",_level: ");
        sb.Append(_level);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class SetNodeLevel_result : TBase
    {

      public SetNodeLevel_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SetNodeLevel_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("SetNodeLevel_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class IsNodeInfoReceived_args : TBase
    {
      private int __homeId;
      private byte __nodeId;

      public int _homeId
      {
        get
        {
          return __homeId;
        }
        set
        {
          __isset._homeId = true;
          this.__homeId = value;
        }
      }

      public byte _nodeId
      {
        get
        {
          return __nodeId;
        }
        set
        {
          __isset._nodeId = true;
          this.__nodeId = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _homeId;
        public bool _nodeId;
      }

      public IsNodeInfoReceived_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                _homeId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Byte) {
                _nodeId = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("IsNodeInfoReceived_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset._homeId) {
          field.Name = "_homeId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(_homeId);
          oprot.WriteFieldEnd();
        }
        if (__isset._nodeId) {
          field.Name = "_nodeId";
          field.Type = TType.Byte;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(_nodeId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("IsNodeInfoReceived_args(");
        sb.Append("_homeId: ");
        sb.Append(_homeId);
        sb.Append(",_nodeId: ");
        sb.Append(_nodeId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class IsNodeInfoReceived_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public IsNodeInfoReceived_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("IsNodeInfoReceived_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("IsNodeInfoReceived_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class GetNodeClassInformation_args : TBase
    {
      private int __homeId;
      private byte __nodeId;
      private byte __commandClassId;

      public int _homeId
      {
        get
        {
          return __homeId;
        }
        set
        {
          __isset._homeId = true;
          this.__homeId = value;
        }
      }

      public byte _nodeId
      {
        get
        {
          return __nodeId;
        }
        set
        {
          __isset._nodeId = true;
          this.__nodeId = value;
        }
      }

      public byte _commandClassId
      {
        get
        {
          return __commandClassId;
        }
        set
        {
          __isset._commandClassId = true;
          this.__commandClassId = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _homeId;
        public bool _nodeId;
        public bool _commandClassId;
      }

      public GetNodeClassInformation_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                _homeId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Byte) {
                _nodeId = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Byte) {
                _commandClassId = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetNodeClassInformation_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset._homeId) {
          field.Name = "_homeId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(_homeId);
          oprot.WriteFieldEnd();
        }
        if (__isset._nodeId) {
          field.Name = "_nodeId";
          field.Type = TType.Byte;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(_nodeId);
          oprot.WriteFieldEnd();
        }
        if (__isset._commandClassId) {
          field.Name = "_commandClassId";
          field.Type = TType.Byte;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(_commandClassId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetNodeClassInformation_args(");
        sb.Append("_homeId: ");
        sb.Append(_homeId);
        sb.Append(",_nodeId: ");
        sb.Append(_nodeId);
        sb.Append(",_commandClassId: ");
        sb.Append(_commandClassId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class GetNodeClassInformation_result : TBase
    {
      private Bool_GetNodeClassInformation _success;

      public Bool_GetNodeClassInformation Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public GetNodeClassInformation_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Bool_GetNodeClassInformation();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetNodeClassInformation_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetNodeClassInformation_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class IsNodeAwake_args : TBase
    {
      private int __homeId;
      private byte __nodeId;

      public int _homeId
      {
        get
        {
          return __homeId;
        }
        set
        {
          __isset._homeId = true;
          this.__homeId = value;
        }
      }

      public byte _nodeId
      {
        get
        {
          return __nodeId;
        }
        set
        {
          __isset._nodeId = true;
          this.__nodeId = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _homeId;
        public bool _nodeId;
      }

      public IsNodeAwake_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                _homeId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Byte) {
                _nodeId = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("IsNodeAwake_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset._homeId) {
          field.Name = "_homeId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(_homeId);
          oprot.WriteFieldEnd();
        }
        if (__isset._nodeId) {
          field.Name = "_nodeId";
          field.Type = TType.Byte;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(_nodeId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("IsNodeAwake_args(");
        sb.Append("_homeId: ");
        sb.Append(_homeId);
        sb.Append(",_nodeId: ");
        sb.Append(_nodeId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class IsNodeAwake_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public IsNodeAwake_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("IsNodeAwake_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("IsNodeAwake_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class IsNodeFailed_args : TBase
    {
      private int __homeId;
      private byte __nodeId;

      public int _homeId
      {
        get
        {
          return __homeId;
        }
        set
        {
          __isset._homeId = true;
          this.__homeId = value;
        }
      }

      public byte _nodeId
      {
        get
        {
          return __nodeId;
        }
        set
        {
          __isset._nodeId = true;
          this.__nodeId = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _homeId;
        public bool _nodeId;
      }

      public IsNodeFailed_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                _homeId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Byte) {
                _nodeId = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("IsNodeFailed_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset._homeId) {
          field.Name = "_homeId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(_homeId);
          oprot.WriteFieldEnd();
        }
        if (__isset._nodeId) {
          field.Name = "_nodeId";
          field.Type = TType.Byte;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(_nodeId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("IsNodeFailed_args(");
        sb.Append("_homeId: ");
        sb.Append(_homeId);
        sb.Append(",_nodeId: ");
        sb.Append(_nodeId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class IsNodeFailed_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public IsNodeFailed_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("IsNodeFailed_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("IsNodeFailed_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class GetNodeQueryStage_args : TBase
    {
      private int __homeId;
      private byte __nodeId;

      public int _homeId
      {
        get
        {
          return __homeId;
        }
        set
        {
          __isset._homeId = true;
          this.__homeId = value;
        }
      }

      public byte _nodeId
      {
        get
        {
          return __nodeId;
        }
        set
        {
          __isset._nodeId = true;
          this.__nodeId = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _homeId;
        public bool _nodeId;
      }

      public GetNodeQueryStage_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                _homeId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Byte) {
                _nodeId = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetNodeQueryStage_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset._homeId) {
          field.Name = "_homeId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(_homeId);
          oprot.WriteFieldEnd();
        }
        if (__isset._nodeId) {
          field.Name = "_nodeId";
          field.Type = TType.Byte;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(_nodeId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetNodeQueryStage_args(");
        sb.Append("_homeId: ");
        sb.Append(_homeId);
        sb.Append(",_nodeId: ");
        sb.Append(_nodeId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class GetNodeQueryStage_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public GetNodeQueryStage_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetNodeQueryStage_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetNodeQueryStage_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class GetValueLabel_args : TBase
    {
      private RemoteValueID __id;

      public RemoteValueID _id
      {
        get
        {
          return __id;
        }
        set
        {
          __isset._id = true;
          this.__id = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _id;
      }

      public GetValueLabel_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                _id = new RemoteValueID();
                _id.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetValueLabel_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (_id != null && __isset._id) {
          field.Name = "_id";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          _id.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetValueLabel_args(");
        sb.Append("_id: ");
        sb.Append(_id== null ? "<null>" : _id.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class GetValueLabel_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public GetValueLabel_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetValueLabel_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetValueLabel_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class SetValueLabel_args : TBase
    {
      private RemoteValueID __id;
      private string __value;

      public RemoteValueID _id
      {
        get
        {
          return __id;
        }
        set
        {
          __isset._id = true;
          this.__id = value;
        }
      }

      public string _value
      {
        get
        {
          return __value;
        }
        set
        {
          __isset._value = true;
          this.__value = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _id;
        public bool _value;
      }

      public SetValueLabel_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                _id = new RemoteValueID();
                _id.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                _value = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SetValueLabel_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (_id != null && __isset._id) {
          field.Name = "_id";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          _id.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (_value != null && __isset._value) {
          field.Name = "_value";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(_value);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("SetValueLabel_args(");
        sb.Append("_id: ");
        sb.Append(_id== null ? "<null>" : _id.ToString());
        sb.Append(",_value: ");
        sb.Append(_value);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class SetValueLabel_result : TBase
    {

      public SetValueLabel_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SetValueLabel_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("SetValueLabel_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class GetValueUnits_args : TBase
    {
      private RemoteValueID __id;

      public RemoteValueID _id
      {
        get
        {
          return __id;
        }
        set
        {
          __isset._id = true;
          this.__id = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _id;
      }

      public GetValueUnits_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                _id = new RemoteValueID();
                _id.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetValueUnits_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (_id != null && __isset._id) {
          field.Name = "_id";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          _id.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetValueUnits_args(");
        sb.Append("_id: ");
        sb.Append(_id== null ? "<null>" : _id.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class GetValueUnits_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public GetValueUnits_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetValueUnits_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetValueUnits_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class SetValueUnits_args : TBase
    {
      private RemoteValueID __id;
      private string __value;

      public RemoteValueID _id
      {
        get
        {
          return __id;
        }
        set
        {
          __isset._id = true;
          this.__id = value;
        }
      }

      public string _value
      {
        get
        {
          return __value;
        }
        set
        {
          __isset._value = true;
          this.__value = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _id;
        public bool _value;
      }

      public SetValueUnits_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                _id = new RemoteValueID();
                _id.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                _value = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SetValueUnits_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (_id != null && __isset._id) {
          field.Name = "_id";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          _id.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (_value != null && __isset._value) {
          field.Name = "_value";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(_value);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("SetValueUnits_args(");
        sb.Append("_id: ");
        sb.Append(_id== null ? "<null>" : _id.ToString());
        sb.Append(",_value: ");
        sb.Append(_value);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class SetValueUnits_result : TBase
    {

      public SetValueUnits_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SetValueUnits_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("SetValueUnits_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class GetValueHelp_args : TBase
    {
      private RemoteValueID __id;

      public RemoteValueID _id
      {
        get
        {
          return __id;
        }
        set
        {
          __isset._id = true;
          this.__id = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _id;
      }

      public GetValueHelp_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                _id = new RemoteValueID();
                _id.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetValueHelp_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (_id != null && __isset._id) {
          field.Name = "_id";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          _id.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetValueHelp_args(");
        sb.Append("_id: ");
        sb.Append(_id== null ? "<null>" : _id.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class GetValueHelp_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public GetValueHelp_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetValueHelp_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetValueHelp_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class SetValueHelp_args : TBase
    {
      private RemoteValueID __id;
      private string __value;

      public RemoteValueID _id
      {
        get
        {
          return __id;
        }
        set
        {
          __isset._id = true;
          this.__id = value;
        }
      }

      public string _value
      {
        get
        {
          return __value;
        }
        set
        {
          __isset._value = true;
          this.__value = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _id;
        public bool _value;
      }

      public SetValueHelp_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                _id = new RemoteValueID();
                _id.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                _value = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SetValueHelp_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (_id != null && __isset._id) {
          field.Name = "_id";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          _id.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (_value != null && __isset._value) {
          field.Name = "_value";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(_value);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("SetValueHelp_args(");
        sb.Append("_id: ");
        sb.Append(_id== null ? "<null>" : _id.ToString());
        sb.Append(",_value: ");
        sb.Append(_value);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class SetValueHelp_result : TBase
    {

      public SetValueHelp_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SetValueHelp_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("SetValueHelp_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class GetValueMin_args : TBase
    {
      private RemoteValueID __id;

      public RemoteValueID _id
      {
        get
        {
          return __id;
        }
        set
        {
          __isset._id = true;
          this.__id = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _id;
      }

      public GetValueMin_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                _id = new RemoteValueID();
                _id.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetValueMin_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (_id != null && __isset._id) {
          field.Name = "_id";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          _id.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetValueMin_args(");
        sb.Append("_id: ");
        sb.Append(_id== null ? "<null>" : _id.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class GetValueMin_result : TBase
    {
      private int _success;

      public int Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public GetValueMin_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetValueMin_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetValueMin_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class GetValueMax_args : TBase
    {
      private RemoteValueID __id;

      public RemoteValueID _id
      {
        get
        {
          return __id;
        }
        set
        {
          __isset._id = true;
          this.__id = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _id;
      }

      public GetValueMax_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                _id = new RemoteValueID();
                _id.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetValueMax_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (_id != null && __isset._id) {
          field.Name = "_id";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          _id.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetValueMax_args(");
        sb.Append("_id: ");
        sb.Append(_id== null ? "<null>" : _id.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class GetValueMax_result : TBase
    {
      private int _success;

      public int Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public GetValueMax_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetValueMax_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetValueMax_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class IsValueReadOnly_args : TBase
    {
      private RemoteValueID __id;

      public RemoteValueID _id
      {
        get
        {
          return __id;
        }
        set
        {
          __isset._id = true;
          this.__id = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _id;
      }

      public IsValueReadOnly_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                _id = new RemoteValueID();
                _id.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("IsValueReadOnly_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (_id != null && __isset._id) {
          field.Name = "_id";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          _id.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("IsValueReadOnly_args(");
        sb.Append("_id: ");
        sb.Append(_id== null ? "<null>" : _id.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class IsValueReadOnly_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public IsValueReadOnly_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("IsValueReadOnly_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("IsValueReadOnly_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class IsValueWriteOnly_args : TBase
    {
      private RemoteValueID __id;

      public RemoteValueID _id
      {
        get
        {
          return __id;
        }
        set
        {
          __isset._id = true;
          this.__id = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _id;
      }

      public IsValueWriteOnly_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                _id = new RemoteValueID();
                _id.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("IsValueWriteOnly_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (_id != null && __isset._id) {
          field.Name = "_id";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          _id.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("IsValueWriteOnly_args(");
        sb.Append("_id: ");
        sb.Append(_id== null ? "<null>" : _id.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class IsValueWriteOnly_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public IsValueWriteOnly_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("IsValueWriteOnly_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("IsValueWriteOnly_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class IsValueSet_args : TBase
    {
      private RemoteValueID __id;

      public RemoteValueID _id
      {
        get
        {
          return __id;
        }
        set
        {
          __isset._id = true;
          this.__id = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _id;
      }

      public IsValueSet_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                _id = new RemoteValueID();
                _id.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("IsValueSet_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (_id != null && __isset._id) {
          field.Name = "_id";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          _id.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("IsValueSet_args(");
        sb.Append("_id: ");
        sb.Append(_id== null ? "<null>" : _id.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class IsValueSet_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public IsValueSet_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("IsValueSet_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("IsValueSet_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class IsValuePolled_args : TBase
    {
      private RemoteValueID __id;

      public RemoteValueID _id
      {
        get
        {
          return __id;
        }
        set
        {
          __isset._id = true;
          this.__id = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _id;
      }

      public IsValuePolled_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                _id = new RemoteValueID();
                _id.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("IsValuePolled_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (_id != null && __isset._id) {
          field.Name = "_id";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          _id.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("IsValuePolled_args(");
        sb.Append("_id: ");
        sb.Append(_id== null ? "<null>" : _id.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class IsValuePolled_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public IsValuePolled_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("IsValuePolled_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("IsValuePolled_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class GetValueAsBool_args : TBase
    {
      private RemoteValueID __id;

      public RemoteValueID _id
      {
        get
        {
          return __id;
        }
        set
        {
          __isset._id = true;
          this.__id = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _id;
      }

      public GetValueAsBool_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                _id = new RemoteValueID();
                _id.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetValueAsBool_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (_id != null && __isset._id) {
          field.Name = "_id";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          _id.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetValueAsBool_args(");
        sb.Append("_id: ");
        sb.Append(_id== null ? "<null>" : _id.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class GetValueAsBool_result : TBase
    {
      private Bool_Bool _success;

      public Bool_Bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public GetValueAsBool_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Bool_Bool();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetValueAsBool_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetValueAsBool_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class GetValueAsByte_args : TBase
    {
      private RemoteValueID __id;

      public RemoteValueID _id
      {
        get
        {
          return __id;
        }
        set
        {
          __isset._id = true;
          this.__id = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _id;
      }

      public GetValueAsByte_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                _id = new RemoteValueID();
                _id.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetValueAsByte_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (_id != null && __isset._id) {
          field.Name = "_id";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          _id.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetValueAsByte_args(");
        sb.Append("_id: ");
        sb.Append(_id== null ? "<null>" : _id.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class GetValueAsByte_result : TBase
    {
      private Bool_UInt8 _success;

      public Bool_UInt8 Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public GetValueAsByte_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Bool_UInt8();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetValueAsByte_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetValueAsByte_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class GetValueAsFloat_args : TBase
    {
      private RemoteValueID __id;

      public RemoteValueID _id
      {
        get
        {
          return __id;
        }
        set
        {
          __isset._id = true;
          this.__id = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _id;
      }

      public GetValueAsFloat_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                _id = new RemoteValueID();
                _id.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetValueAsFloat_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (_id != null && __isset._id) {
          field.Name = "_id";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          _id.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetValueAsFloat_args(");
        sb.Append("_id: ");
        sb.Append(_id== null ? "<null>" : _id.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class GetValueAsFloat_result : TBase
    {
      private Bool_Float _success;

      public Bool_Float Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public GetValueAsFloat_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Bool_Float();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetValueAsFloat_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetValueAsFloat_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class GetValueAsInt_args : TBase
    {
      private RemoteValueID __id;

      public RemoteValueID _id
      {
        get
        {
          return __id;
        }
        set
        {
          __isset._id = true;
          this.__id = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _id;
      }

      public GetValueAsInt_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                _id = new RemoteValueID();
                _id.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetValueAsInt_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (_id != null && __isset._id) {
          field.Name = "_id";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          _id.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetValueAsInt_args(");
        sb.Append("_id: ");
        sb.Append(_id== null ? "<null>" : _id.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class GetValueAsInt_result : TBase
    {
      private Bool_Int _success;

      public Bool_Int Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public GetValueAsInt_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Bool_Int();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetValueAsInt_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetValueAsInt_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class GetValueAsShort_args : TBase
    {
      private RemoteValueID __id;

      public RemoteValueID _id
      {
        get
        {
          return __id;
        }
        set
        {
          __isset._id = true;
          this.__id = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _id;
      }

      public GetValueAsShort_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                _id = new RemoteValueID();
                _id.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetValueAsShort_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (_id != null && __isset._id) {
          field.Name = "_id";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          _id.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetValueAsShort_args(");
        sb.Append("_id: ");
        sb.Append(_id== null ? "<null>" : _id.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class GetValueAsShort_result : TBase
    {
      private Bool_Int16 _success;

      public Bool_Int16 Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public GetValueAsShort_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Bool_Int16();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetValueAsShort_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetValueAsShort_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class GetValueAsString_args : TBase
    {
      private RemoteValueID __id;

      public RemoteValueID _id
      {
        get
        {
          return __id;
        }
        set
        {
          __isset._id = true;
          this.__id = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _id;
      }

      public GetValueAsString_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                _id = new RemoteValueID();
                _id.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetValueAsString_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (_id != null && __isset._id) {
          field.Name = "_id";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          _id.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetValueAsString_args(");
        sb.Append("_id: ");
        sb.Append(_id== null ? "<null>" : _id.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class GetValueAsString_result : TBase
    {
      private Bool_String _success;

      public Bool_String Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public GetValueAsString_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Bool_String();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetValueAsString_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetValueAsString_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class GetValueListSelection_String_args : TBase
    {
      private RemoteValueID __id;

      public RemoteValueID _id
      {
        get
        {
          return __id;
        }
        set
        {
          __isset._id = true;
          this.__id = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _id;
      }

      public GetValueListSelection_String_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                _id = new RemoteValueID();
                _id.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetValueListSelection_String_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (_id != null && __isset._id) {
          field.Name = "_id";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          _id.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetValueListSelection_String_args(");
        sb.Append("_id: ");
        sb.Append(_id== null ? "<null>" : _id.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class GetValueListSelection_String_result : TBase
    {
      private Bool_String _success;

      public Bool_String Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public GetValueListSelection_String_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Bool_String();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetValueListSelection_String_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetValueListSelection_String_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class GetValueListSelection_Int32_args : TBase
    {
      private RemoteValueID __id;

      public RemoteValueID _id
      {
        get
        {
          return __id;
        }
        set
        {
          __isset._id = true;
          this.__id = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _id;
      }

      public GetValueListSelection_Int32_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                _id = new RemoteValueID();
                _id.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetValueListSelection_Int32_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (_id != null && __isset._id) {
          field.Name = "_id";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          _id.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetValueListSelection_Int32_args(");
        sb.Append("_id: ");
        sb.Append(_id== null ? "<null>" : _id.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class GetValueListSelection_Int32_result : TBase
    {
      private Bool_Int _success;

      public Bool_Int Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public GetValueListSelection_Int32_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Bool_Int();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetValueListSelection_Int32_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetValueListSelection_Int32_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class GetValueListItems_args : TBase
    {
      private RemoteValueID __id;

      public RemoteValueID _id
      {
        get
        {
          return __id;
        }
        set
        {
          __isset._id = true;
          this.__id = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _id;
      }

      public GetValueListItems_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                _id = new RemoteValueID();
                _id.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetValueListItems_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (_id != null && __isset._id) {
          field.Name = "_id";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          _id.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetValueListItems_args(");
        sb.Append("_id: ");
        sb.Append(_id== null ? "<null>" : _id.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class GetValueListItems_result : TBase
    {
      private Bool_ListString _success;

      public Bool_ListString Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public GetValueListItems_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Bool_ListString();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetValueListItems_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetValueListItems_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class GetValueFloatPrecision_args : TBase
    {
      private RemoteValueID __id;

      public RemoteValueID _id
      {
        get
        {
          return __id;
        }
        set
        {
          __isset._id = true;
          this.__id = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _id;
      }

      public GetValueFloatPrecision_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                _id = new RemoteValueID();
                _id.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetValueFloatPrecision_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (_id != null && __isset._id) {
          field.Name = "_id";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          _id.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetValueFloatPrecision_args(");
        sb.Append("_id: ");
        sb.Append(_id== null ? "<null>" : _id.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class GetValueFloatPrecision_result : TBase
    {
      private Bool_UInt8 _success;

      public Bool_UInt8 Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public GetValueFloatPrecision_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Bool_UInt8();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetValueFloatPrecision_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetValueFloatPrecision_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class SetValue_Bool_args : TBase
    {
      private RemoteValueID __id;
      private bool __value;

      public RemoteValueID _id
      {
        get
        {
          return __id;
        }
        set
        {
          __isset._id = true;
          this.__id = value;
        }
      }

      public bool _value
      {
        get
        {
          return __value;
        }
        set
        {
          __isset._value = true;
          this.__value = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _id;
        public bool _value;
      }

      public SetValue_Bool_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                _id = new RemoteValueID();
                _id.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Bool) {
                _value = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SetValue_Bool_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (_id != null && __isset._id) {
          field.Name = "_id";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          _id.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset._value) {
          field.Name = "_value";
          field.Type = TType.Bool;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(_value);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("SetValue_Bool_args(");
        sb.Append("_id: ");
        sb.Append(_id== null ? "<null>" : _id.ToString());
        sb.Append(",_value: ");
        sb.Append(_value);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class SetValue_Bool_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public SetValue_Bool_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SetValue_Bool_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("SetValue_Bool_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class SetValue_UInt8_args : TBase
    {
      private RemoteValueID __id;
      private byte __value;

      public RemoteValueID _id
      {
        get
        {
          return __id;
        }
        set
        {
          __isset._id = true;
          this.__id = value;
        }
      }

      public byte _value
      {
        get
        {
          return __value;
        }
        set
        {
          __isset._value = true;
          this.__value = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _id;
        public bool _value;
      }

      public SetValue_UInt8_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                _id = new RemoteValueID();
                _id.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Byte) {
                _value = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SetValue_UInt8_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (_id != null && __isset._id) {
          field.Name = "_id";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          _id.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset._value) {
          field.Name = "_value";
          field.Type = TType.Byte;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(_value);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("SetValue_UInt8_args(");
        sb.Append("_id: ");
        sb.Append(_id== null ? "<null>" : _id.ToString());
        sb.Append(",_value: ");
        sb.Append(_value);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class SetValue_UInt8_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public SetValue_UInt8_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SetValue_UInt8_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("SetValue_UInt8_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class SetValue_UInt8_UInt8_args : TBase
    {
      private RemoteValueID __id;
      private List<byte> __value;
      private byte __length;

      public RemoteValueID _id
      {
        get
        {
          return __id;
        }
        set
        {
          __isset._id = true;
          this.__id = value;
        }
      }

      public List<byte> _value
      {
        get
        {
          return __value;
        }
        set
        {
          __isset._value = true;
          this.__value = value;
        }
      }

      public byte _length
      {
        get
        {
          return __length;
        }
        set
        {
          __isset._length = true;
          this.__length = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _id;
        public bool _value;
        public bool _length;
      }

      public SetValue_UInt8_UInt8_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                _id = new RemoteValueID();
                _id.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  _value = new List<byte>();
                  TList _list32 = iprot.ReadListBegin();
                  for( int _i33 = 0; _i33 < _list32.Count; ++_i33)
                  {
                    byte _elem34 = 0;
                    _elem34 = iprot.ReadByte();
                    _value.Add(_elem34);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Byte) {
                _length = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SetValue_UInt8_UInt8_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (_id != null && __isset._id) {
          field.Name = "_id";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          _id.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (_value != null && __isset._value) {
          field.Name = "_value";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Byte, _value.Count));
            foreach (byte _iter35 in _value)
            {
              oprot.WriteByte(_iter35);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (__isset._length) {
          field.Name = "_length";
          field.Type = TType.Byte;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(_length);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("SetValue_UInt8_UInt8_args(");
        sb.Append("_id: ");
        sb.Append(_id== null ? "<null>" : _id.ToString());
        sb.Append(",_value: ");
        sb.Append(_value);
        sb.Append(",_length: ");
        sb.Append(_length);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class SetValue_UInt8_UInt8_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public SetValue_UInt8_UInt8_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SetValue_UInt8_UInt8_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("SetValue_UInt8_UInt8_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class SetValue_Float_args : TBase
    {
      private RemoteValueID __id;
      private double __value;

      public RemoteValueID _id
      {
        get
        {
          return __id;
        }
        set
        {
          __isset._id = true;
          this.__id = value;
        }
      }

      public double _value
      {
        get
        {
          return __value;
        }
        set
        {
          __isset._value = true;
          this.__value = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _id;
        public bool _value;
      }

      public SetValue_Float_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                _id = new RemoteValueID();
                _id.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Double) {
                _value = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SetValue_Float_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (_id != null && __isset._id) {
          field.Name = "_id";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          _id.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset._value) {
          field.Name = "_value";
          field.Type = TType.Double;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(_value);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("SetValue_Float_args(");
        sb.Append("_id: ");
        sb.Append(_id== null ? "<null>" : _id.ToString());
        sb.Append(",_value: ");
        sb.Append(_value);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class SetValue_Float_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public SetValue_Float_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SetValue_Float_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("SetValue_Float_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class SetValue_int32_args : TBase
    {
      private RemoteValueID __id;
      private int __value;

      public RemoteValueID _id
      {
        get
        {
          return __id;
        }
        set
        {
          __isset._id = true;
          this.__id = value;
        }
      }

      public int _value
      {
        get
        {
          return __value;
        }
        set
        {
          __isset._value = true;
          this.__value = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _id;
        public bool _value;
      }

      public SetValue_int32_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                _id = new RemoteValueID();
                _id.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                _value = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SetValue_int32_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (_id != null && __isset._id) {
          field.Name = "_id";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          _id.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset._value) {
          field.Name = "_value";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(_value);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("SetValue_int32_args(");
        sb.Append("_id: ");
        sb.Append(_id== null ? "<null>" : _id.ToString());
        sb.Append(",_value: ");
        sb.Append(_value);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class SetValue_int32_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public SetValue_int32_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SetValue_int32_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("SetValue_int32_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class SetValue_int16_args : TBase
    {
      private RemoteValueID __id;
      private short __value;

      public RemoteValueID _id
      {
        get
        {
          return __id;
        }
        set
        {
          __isset._id = true;
          this.__id = value;
        }
      }

      public short _value
      {
        get
        {
          return __value;
        }
        set
        {
          __isset._value = true;
          this.__value = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _id;
        public bool _value;
      }

      public SetValue_int16_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                _id = new RemoteValueID();
                _id.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I16) {
                _value = iprot.ReadI16();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SetValue_int16_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (_id != null && __isset._id) {
          field.Name = "_id";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          _id.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset._value) {
          field.Name = "_value";
          field.Type = TType.I16;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI16(_value);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("SetValue_int16_args(");
        sb.Append("_id: ");
        sb.Append(_id== null ? "<null>" : _id.ToString());
        sb.Append(",_value: ");
        sb.Append(_value);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class SetValue_int16_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public SetValue_int16_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SetValue_int16_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("SetValue_int16_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class SetValue_String_args : TBase
    {
      private RemoteValueID __id;
      private string __value;

      public RemoteValueID _id
      {
        get
        {
          return __id;
        }
        set
        {
          __isset._id = true;
          this.__id = value;
        }
      }

      public string _value
      {
        get
        {
          return __value;
        }
        set
        {
          __isset._value = true;
          this.__value = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _id;
        public bool _value;
      }

      public SetValue_String_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                _id = new RemoteValueID();
                _id.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                _value = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SetValue_String_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (_id != null && __isset._id) {
          field.Name = "_id";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          _id.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (_value != null && __isset._value) {
          field.Name = "_value";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(_value);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("SetValue_String_args(");
        sb.Append("_id: ");
        sb.Append(_id== null ? "<null>" : _id.ToString());
        sb.Append(",_value: ");
        sb.Append(_value);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class SetValue_String_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public SetValue_String_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SetValue_String_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("SetValue_String_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class SetValueListSelection_args : TBase
    {
      private RemoteValueID __id;
      private string __selectedItem;

      public RemoteValueID _id
      {
        get
        {
          return __id;
        }
        set
        {
          __isset._id = true;
          this.__id = value;
        }
      }

      public string _selectedItem
      {
        get
        {
          return __selectedItem;
        }
        set
        {
          __isset._selectedItem = true;
          this.__selectedItem = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _id;
        public bool _selectedItem;
      }

      public SetValueListSelection_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                _id = new RemoteValueID();
                _id.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                _selectedItem = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SetValueListSelection_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (_id != null && __isset._id) {
          field.Name = "_id";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          _id.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (_selectedItem != null && __isset._selectedItem) {
          field.Name = "_selectedItem";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(_selectedItem);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("SetValueListSelection_args(");
        sb.Append("_id: ");
        sb.Append(_id== null ? "<null>" : _id.ToString());
        sb.Append(",_selectedItem: ");
        sb.Append(_selectedItem);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class SetValueListSelection_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public SetValueListSelection_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SetValueListSelection_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("SetValueListSelection_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class RefreshValue_args : TBase
    {
      private RemoteValueID __id;

      public RemoteValueID _id
      {
        get
        {
          return __id;
        }
        set
        {
          __isset._id = true;
          this.__id = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _id;
      }

      public RefreshValue_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                _id = new RemoteValueID();
                _id.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("RefreshValue_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (_id != null && __isset._id) {
          field.Name = "_id";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          _id.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("RefreshValue_args(");
        sb.Append("_id: ");
        sb.Append(_id== null ? "<null>" : _id.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class RefreshValue_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public RefreshValue_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("RefreshValue_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("RefreshValue_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class SetChangeVerified_args : TBase
    {
      private RemoteValueID __id;
      private bool __verify;

      public RemoteValueID _id
      {
        get
        {
          return __id;
        }
        set
        {
          __isset._id = true;
          this.__id = value;
        }
      }

      public bool _verify
      {
        get
        {
          return __verify;
        }
        set
        {
          __isset._verify = true;
          this.__verify = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _id;
        public bool _verify;
      }

      public SetChangeVerified_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                _id = new RemoteValueID();
                _id.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Bool) {
                _verify = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SetChangeVerified_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (_id != null && __isset._id) {
          field.Name = "_id";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          _id.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset._verify) {
          field.Name = "_verify";
          field.Type = TType.Bool;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(_verify);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("SetChangeVerified_args(");
        sb.Append("_id: ");
        sb.Append(_id== null ? "<null>" : _id.ToString());
        sb.Append(",_verify: ");
        sb.Append(_verify);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class SetChangeVerified_result : TBase
    {

      public SetChangeVerified_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SetChangeVerified_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("SetChangeVerified_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class PressButton_args : TBase
    {
      private RemoteValueID __id;

      public RemoteValueID _id
      {
        get
        {
          return __id;
        }
        set
        {
          __isset._id = true;
          this.__id = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _id;
      }

      public PressButton_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                _id = new RemoteValueID();
                _id.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("PressButton_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (_id != null && __isset._id) {
          field.Name = "_id";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          _id.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("PressButton_args(");
        sb.Append("_id: ");
        sb.Append(_id== null ? "<null>" : _id.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class PressButton_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public PressButton_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("PressButton_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("PressButton_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class ReleaseButton_args : TBase
    {
      private RemoteValueID __id;

      public RemoteValueID _id
      {
        get
        {
          return __id;
        }
        set
        {
          __isset._id = true;
          this.__id = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _id;
      }

      public ReleaseButton_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                _id = new RemoteValueID();
                _id.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("ReleaseButton_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (_id != null && __isset._id) {
          field.Name = "_id";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          _id.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("ReleaseButton_args(");
        sb.Append("_id: ");
        sb.Append(_id== null ? "<null>" : _id.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class ReleaseButton_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public ReleaseButton_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("ReleaseButton_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("ReleaseButton_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class GetNumSwitchPoints_args : TBase
    {
      private RemoteValueID __id;

      public RemoteValueID _id
      {
        get
        {
          return __id;
        }
        set
        {
          __isset._id = true;
          this.__id = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _id;
      }

      public GetNumSwitchPoints_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                _id = new RemoteValueID();
                _id.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetNumSwitchPoints_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (_id != null && __isset._id) {
          field.Name = "_id";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          _id.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetNumSwitchPoints_args(");
        sb.Append("_id: ");
        sb.Append(_id== null ? "<null>" : _id.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class GetNumSwitchPoints_result : TBase
    {
      private byte _success;

      public byte Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public GetNumSwitchPoints_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Byte) {
                Success = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetNumSwitchPoints_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Byte;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetNumSwitchPoints_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class SetSwitchPoint_args : TBase
    {
      private RemoteValueID __id;
      private byte __hours;
      private byte __minutes;
      private byte __setback;

      public RemoteValueID _id
      {
        get
        {
          return __id;
        }
        set
        {
          __isset._id = true;
          this.__id = value;
        }
      }

      public byte _hours
      {
        get
        {
          return __hours;
        }
        set
        {
          __isset._hours = true;
          this.__hours = value;
        }
      }

      public byte _minutes
      {
        get
        {
          return __minutes;
        }
        set
        {
          __isset._minutes = true;
          this.__minutes = value;
        }
      }

      public byte _setback
      {
        get
        {
          return __setback;
        }
        set
        {
          __isset._setback = true;
          this.__setback = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _id;
        public bool _hours;
        public bool _minutes;
        public bool _setback;
      }

      public SetSwitchPoint_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                _id = new RemoteValueID();
                _id.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Byte) {
                _hours = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Byte) {
                _minutes = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Byte) {
                _setback = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SetSwitchPoint_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (_id != null && __isset._id) {
          field.Name = "_id";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          _id.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset._hours) {
          field.Name = "_hours";
          field.Type = TType.Byte;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(_hours);
          oprot.WriteFieldEnd();
        }
        if (__isset._minutes) {
          field.Name = "_minutes";
          field.Type = TType.Byte;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(_minutes);
          oprot.WriteFieldEnd();
        }
        if (__isset._setback) {
          field.Name = "_setback";
          field.Type = TType.Byte;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(_setback);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("SetSwitchPoint_args(");
        sb.Append("_id: ");
        sb.Append(_id== null ? "<null>" : _id.ToString());
        sb.Append(",_hours: ");
        sb.Append(_hours);
        sb.Append(",_minutes: ");
        sb.Append(_minutes);
        sb.Append(",_setback: ");
        sb.Append(_setback);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class SetSwitchPoint_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public SetSwitchPoint_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SetSwitchPoint_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("SetSwitchPoint_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class RemoveSwitchPoint_args : TBase
    {
      private RemoteValueID __id;
      private byte __hours;
      private byte __minutes;

      public RemoteValueID _id
      {
        get
        {
          return __id;
        }
        set
        {
          __isset._id = true;
          this.__id = value;
        }
      }

      public byte _hours
      {
        get
        {
          return __hours;
        }
        set
        {
          __isset._hours = true;
          this.__hours = value;
        }
      }

      public byte _minutes
      {
        get
        {
          return __minutes;
        }
        set
        {
          __isset._minutes = true;
          this.__minutes = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _id;
        public bool _hours;
        public bool _minutes;
      }

      public RemoveSwitchPoint_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                _id = new RemoteValueID();
                _id.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Byte) {
                _hours = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Byte) {
                _minutes = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("RemoveSwitchPoint_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (_id != null && __isset._id) {
          field.Name = "_id";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          _id.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset._hours) {
          field.Name = "_hours";
          field.Type = TType.Byte;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(_hours);
          oprot.WriteFieldEnd();
        }
        if (__isset._minutes) {
          field.Name = "_minutes";
          field.Type = TType.Byte;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(_minutes);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("RemoveSwitchPoint_args(");
        sb.Append("_id: ");
        sb.Append(_id== null ? "<null>" : _id.ToString());
        sb.Append(",_hours: ");
        sb.Append(_hours);
        sb.Append(",_minutes: ");
        sb.Append(_minutes);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class RemoveSwitchPoint_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public RemoveSwitchPoint_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("RemoveSwitchPoint_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("RemoveSwitchPoint_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class ClearSwitchPoints_args : TBase
    {
      private RemoteValueID __id;

      public RemoteValueID _id
      {
        get
        {
          return __id;
        }
        set
        {
          __isset._id = true;
          this.__id = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _id;
      }

      public ClearSwitchPoints_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                _id = new RemoteValueID();
                _id.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("ClearSwitchPoints_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (_id != null && __isset._id) {
          field.Name = "_id";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          _id.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("ClearSwitchPoints_args(");
        sb.Append("_id: ");
        sb.Append(_id== null ? "<null>" : _id.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class ClearSwitchPoints_result : TBase
    {

      public ClearSwitchPoints_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("ClearSwitchPoints_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("ClearSwitchPoints_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class GetSwitchPoint_args : TBase
    {
      private RemoteValueID __id;
      private byte __idx;

      public RemoteValueID _id
      {
        get
        {
          return __id;
        }
        set
        {
          __isset._id = true;
          this.__id = value;
        }
      }

      public byte _idx
      {
        get
        {
          return __idx;
        }
        set
        {
          __isset._idx = true;
          this.__idx = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _id;
        public bool _idx;
      }

      public GetSwitchPoint_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                _id = new RemoteValueID();
                _id.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Byte) {
                _idx = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetSwitchPoint_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (_id != null && __isset._id) {
          field.Name = "_id";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          _id.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset._idx) {
          field.Name = "_idx";
          field.Type = TType.Byte;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(_idx);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetSwitchPoint_args(");
        sb.Append("_id: ");
        sb.Append(_id== null ? "<null>" : _id.ToString());
        sb.Append(",_idx: ");
        sb.Append(_idx);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class GetSwitchPoint_result : TBase
    {
      private GetSwitchPointReturnStruct _success;

      public GetSwitchPointReturnStruct Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public GetSwitchPoint_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new GetSwitchPointReturnStruct();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetSwitchPoint_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetSwitchPoint_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class SwitchAllOn_args : TBase
    {
      private int __homeId;

      public int _homeId
      {
        get
        {
          return __homeId;
        }
        set
        {
          __isset._homeId = true;
          this.__homeId = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _homeId;
      }

      public SwitchAllOn_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                _homeId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SwitchAllOn_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset._homeId) {
          field.Name = "_homeId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(_homeId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("SwitchAllOn_args(");
        sb.Append("_homeId: ");
        sb.Append(_homeId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class SwitchAllOn_result : TBase
    {

      public SwitchAllOn_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SwitchAllOn_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("SwitchAllOn_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class SwitchAllOff_args : TBase
    {
      private int __homeId;

      public int _homeId
      {
        get
        {
          return __homeId;
        }
        set
        {
          __isset._homeId = true;
          this.__homeId = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _homeId;
      }

      public SwitchAllOff_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                _homeId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SwitchAllOff_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset._homeId) {
          field.Name = "_homeId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(_homeId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("SwitchAllOff_args(");
        sb.Append("_homeId: ");
        sb.Append(_homeId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class SwitchAllOff_result : TBase
    {

      public SwitchAllOff_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SwitchAllOff_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("SwitchAllOff_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class SetConfigParam_args : TBase
    {
      private int __homeId;
      private byte __nodeId;
      private byte __param;
      private int __value;
      private byte __size;

      public int _homeId
      {
        get
        {
          return __homeId;
        }
        set
        {
          __isset._homeId = true;
          this.__homeId = value;
        }
      }

      public byte _nodeId
      {
        get
        {
          return __nodeId;
        }
        set
        {
          __isset._nodeId = true;
          this.__nodeId = value;
        }
      }

      public byte _param
      {
        get
        {
          return __param;
        }
        set
        {
          __isset._param = true;
          this.__param = value;
        }
      }

      public int _value
      {
        get
        {
          return __value;
        }
        set
        {
          __isset._value = true;
          this.__value = value;
        }
      }

      public byte _size
      {
        get
        {
          return __size;
        }
        set
        {
          __isset._size = true;
          this.__size = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _homeId;
        public bool _nodeId;
        public bool _param;
        public bool _value;
        public bool _size;
      }

      public SetConfigParam_args() {
        this.__size = 2;
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                _homeId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Byte) {
                _nodeId = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Byte) {
                _param = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                _value = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.Byte) {
                _size = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SetConfigParam_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset._homeId) {
          field.Name = "_homeId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(_homeId);
          oprot.WriteFieldEnd();
        }
        if (__isset._nodeId) {
          field.Name = "_nodeId";
          field.Type = TType.Byte;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(_nodeId);
          oprot.WriteFieldEnd();
        }
        if (__isset._param) {
          field.Name = "_param";
          field.Type = TType.Byte;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(_param);
          oprot.WriteFieldEnd();
        }
        if (__isset._value) {
          field.Name = "_value";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(_value);
          oprot.WriteFieldEnd();
        }
        if (__isset._size) {
          field.Name = "_size";
          field.Type = TType.Byte;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(_size);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("SetConfigParam_args(");
        sb.Append("_homeId: ");
        sb.Append(_homeId);
        sb.Append(",_nodeId: ");
        sb.Append(_nodeId);
        sb.Append(",_param: ");
        sb.Append(_param);
        sb.Append(",_value: ");
        sb.Append(_value);
        sb.Append(",_size: ");
        sb.Append(_size);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class SetConfigParam_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public SetConfigParam_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SetConfigParam_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("SetConfigParam_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class RequestConfigParam_args : TBase
    {
      private int __homeId;
      private byte __nodeId;
      private byte __param;

      public int _homeId
      {
        get
        {
          return __homeId;
        }
        set
        {
          __isset._homeId = true;
          this.__homeId = value;
        }
      }

      public byte _nodeId
      {
        get
        {
          return __nodeId;
        }
        set
        {
          __isset._nodeId = true;
          this.__nodeId = value;
        }
      }

      public byte _param
      {
        get
        {
          return __param;
        }
        set
        {
          __isset._param = true;
          this.__param = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _homeId;
        public bool _nodeId;
        public bool _param;
      }

      public RequestConfigParam_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                _homeId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Byte) {
                _nodeId = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Byte) {
                _param = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("RequestConfigParam_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset._homeId) {
          field.Name = "_homeId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(_homeId);
          oprot.WriteFieldEnd();
        }
        if (__isset._nodeId) {
          field.Name = "_nodeId";
          field.Type = TType.Byte;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(_nodeId);
          oprot.WriteFieldEnd();
        }
        if (__isset._param) {
          field.Name = "_param";
          field.Type = TType.Byte;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(_param);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("RequestConfigParam_args(");
        sb.Append("_homeId: ");
        sb.Append(_homeId);
        sb.Append(",_nodeId: ");
        sb.Append(_nodeId);
        sb.Append(",_param: ");
        sb.Append(_param);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class RequestConfigParam_result : TBase
    {

      public RequestConfigParam_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("RequestConfigParam_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("RequestConfigParam_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class RequestAllConfigParams_args : TBase
    {
      private int __homeId;
      private byte __nodeId;

      public int _homeId
      {
        get
        {
          return __homeId;
        }
        set
        {
          __isset._homeId = true;
          this.__homeId = value;
        }
      }

      public byte _nodeId
      {
        get
        {
          return __nodeId;
        }
        set
        {
          __isset._nodeId = true;
          this.__nodeId = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _homeId;
        public bool _nodeId;
      }

      public RequestAllConfigParams_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                _homeId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Byte) {
                _nodeId = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("RequestAllConfigParams_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset._homeId) {
          field.Name = "_homeId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(_homeId);
          oprot.WriteFieldEnd();
        }
        if (__isset._nodeId) {
          field.Name = "_nodeId";
          field.Type = TType.Byte;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(_nodeId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("RequestAllConfigParams_args(");
        sb.Append("_homeId: ");
        sb.Append(_homeId);
        sb.Append(",_nodeId: ");
        sb.Append(_nodeId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class RequestAllConfigParams_result : TBase
    {

      public RequestAllConfigParams_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("RequestAllConfigParams_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("RequestAllConfigParams_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class GetNumGroups_args : TBase
    {
      private int __homeId;
      private byte __nodeId;

      public int _homeId
      {
        get
        {
          return __homeId;
        }
        set
        {
          __isset._homeId = true;
          this.__homeId = value;
        }
      }

      public byte _nodeId
      {
        get
        {
          return __nodeId;
        }
        set
        {
          __isset._nodeId = true;
          this.__nodeId = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _homeId;
        public bool _nodeId;
      }

      public GetNumGroups_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                _homeId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Byte) {
                _nodeId = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetNumGroups_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset._homeId) {
          field.Name = "_homeId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(_homeId);
          oprot.WriteFieldEnd();
        }
        if (__isset._nodeId) {
          field.Name = "_nodeId";
          field.Type = TType.Byte;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(_nodeId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetNumGroups_args(");
        sb.Append("_homeId: ");
        sb.Append(_homeId);
        sb.Append(",_nodeId: ");
        sb.Append(_nodeId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class GetNumGroups_result : TBase
    {
      private byte _success;

      public byte Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public GetNumGroups_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Byte) {
                Success = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetNumGroups_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Byte;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetNumGroups_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class GetAssociations_args : TBase
    {
      private int __homeId;
      private byte __nodeId;
      private byte __groupIdx;

      public int _homeId
      {
        get
        {
          return __homeId;
        }
        set
        {
          __isset._homeId = true;
          this.__homeId = value;
        }
      }

      public byte _nodeId
      {
        get
        {
          return __nodeId;
        }
        set
        {
          __isset._nodeId = true;
          this.__nodeId = value;
        }
      }

      public byte _groupIdx
      {
        get
        {
          return __groupIdx;
        }
        set
        {
          __isset._groupIdx = true;
          this.__groupIdx = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _homeId;
        public bool _nodeId;
        public bool _groupIdx;
      }

      public GetAssociations_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                _homeId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Byte) {
                _nodeId = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Byte) {
                _groupIdx = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetAssociations_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset._homeId) {
          field.Name = "_homeId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(_homeId);
          oprot.WriteFieldEnd();
        }
        if (__isset._nodeId) {
          field.Name = "_nodeId";
          field.Type = TType.Byte;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(_nodeId);
          oprot.WriteFieldEnd();
        }
        if (__isset._groupIdx) {
          field.Name = "_groupIdx";
          field.Type = TType.Byte;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(_groupIdx);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetAssociations_args(");
        sb.Append("_homeId: ");
        sb.Append(_homeId);
        sb.Append(",_nodeId: ");
        sb.Append(_nodeId);
        sb.Append(",_groupIdx: ");
        sb.Append(_groupIdx);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class GetAssociations_result : TBase
    {
      private GetAssociationsReturnStruct _success;

      public GetAssociationsReturnStruct Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public GetAssociations_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new GetAssociationsReturnStruct();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetAssociations_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetAssociations_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class GetMaxAssociations_args : TBase
    {
      private int __homeId;
      private byte __nodeId;
      private byte __groupIdx;

      public int _homeId
      {
        get
        {
          return __homeId;
        }
        set
        {
          __isset._homeId = true;
          this.__homeId = value;
        }
      }

      public byte _nodeId
      {
        get
        {
          return __nodeId;
        }
        set
        {
          __isset._nodeId = true;
          this.__nodeId = value;
        }
      }

      public byte _groupIdx
      {
        get
        {
          return __groupIdx;
        }
        set
        {
          __isset._groupIdx = true;
          this.__groupIdx = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _homeId;
        public bool _nodeId;
        public bool _groupIdx;
      }

      public GetMaxAssociations_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                _homeId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Byte) {
                _nodeId = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Byte) {
                _groupIdx = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetMaxAssociations_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset._homeId) {
          field.Name = "_homeId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(_homeId);
          oprot.WriteFieldEnd();
        }
        if (__isset._nodeId) {
          field.Name = "_nodeId";
          field.Type = TType.Byte;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(_nodeId);
          oprot.WriteFieldEnd();
        }
        if (__isset._groupIdx) {
          field.Name = "_groupIdx";
          field.Type = TType.Byte;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(_groupIdx);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetMaxAssociations_args(");
        sb.Append("_homeId: ");
        sb.Append(_homeId);
        sb.Append(",_nodeId: ");
        sb.Append(_nodeId);
        sb.Append(",_groupIdx: ");
        sb.Append(_groupIdx);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class GetMaxAssociations_result : TBase
    {
      private byte _success;

      public byte Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public GetMaxAssociations_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Byte) {
                Success = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetMaxAssociations_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Byte;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetMaxAssociations_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class GetGroupLabel_args : TBase
    {
      private int __homeId;
      private byte __nodeId;
      private byte __groupIdx;

      public int _homeId
      {
        get
        {
          return __homeId;
        }
        set
        {
          __isset._homeId = true;
          this.__homeId = value;
        }
      }

      public byte _nodeId
      {
        get
        {
          return __nodeId;
        }
        set
        {
          __isset._nodeId = true;
          this.__nodeId = value;
        }
      }

      public byte _groupIdx
      {
        get
        {
          return __groupIdx;
        }
        set
        {
          __isset._groupIdx = true;
          this.__groupIdx = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _homeId;
        public bool _nodeId;
        public bool _groupIdx;
      }

      public GetGroupLabel_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                _homeId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Byte) {
                _nodeId = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Byte) {
                _groupIdx = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetGroupLabel_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset._homeId) {
          field.Name = "_homeId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(_homeId);
          oprot.WriteFieldEnd();
        }
        if (__isset._nodeId) {
          field.Name = "_nodeId";
          field.Type = TType.Byte;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(_nodeId);
          oprot.WriteFieldEnd();
        }
        if (__isset._groupIdx) {
          field.Name = "_groupIdx";
          field.Type = TType.Byte;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(_groupIdx);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetGroupLabel_args(");
        sb.Append("_homeId: ");
        sb.Append(_homeId);
        sb.Append(",_nodeId: ");
        sb.Append(_nodeId);
        sb.Append(",_groupIdx: ");
        sb.Append(_groupIdx);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class GetGroupLabel_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public GetGroupLabel_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetGroupLabel_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetGroupLabel_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class AddAssociation_args : TBase
    {
      private int __homeId;
      private byte __nodeId;
      private byte __groupIdx;
      private byte __targetNodeId;

      public int _homeId
      {
        get
        {
          return __homeId;
        }
        set
        {
          __isset._homeId = true;
          this.__homeId = value;
        }
      }

      public byte _nodeId
      {
        get
        {
          return __nodeId;
        }
        set
        {
          __isset._nodeId = true;
          this.__nodeId = value;
        }
      }

      public byte _groupIdx
      {
        get
        {
          return __groupIdx;
        }
        set
        {
          __isset._groupIdx = true;
          this.__groupIdx = value;
        }
      }

      public byte _targetNodeId
      {
        get
        {
          return __targetNodeId;
        }
        set
        {
          __isset._targetNodeId = true;
          this.__targetNodeId = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _homeId;
        public bool _nodeId;
        public bool _groupIdx;
        public bool _targetNodeId;
      }

      public AddAssociation_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                _homeId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Byte) {
                _nodeId = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Byte) {
                _groupIdx = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Byte) {
                _targetNodeId = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("AddAssociation_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset._homeId) {
          field.Name = "_homeId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(_homeId);
          oprot.WriteFieldEnd();
        }
        if (__isset._nodeId) {
          field.Name = "_nodeId";
          field.Type = TType.Byte;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(_nodeId);
          oprot.WriteFieldEnd();
        }
        if (__isset._groupIdx) {
          field.Name = "_groupIdx";
          field.Type = TType.Byte;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(_groupIdx);
          oprot.WriteFieldEnd();
        }
        if (__isset._targetNodeId) {
          field.Name = "_targetNodeId";
          field.Type = TType.Byte;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(_targetNodeId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("AddAssociation_args(");
        sb.Append("_homeId: ");
        sb.Append(_homeId);
        sb.Append(",_nodeId: ");
        sb.Append(_nodeId);
        sb.Append(",_groupIdx: ");
        sb.Append(_groupIdx);
        sb.Append(",_targetNodeId: ");
        sb.Append(_targetNodeId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class AddAssociation_result : TBase
    {

      public AddAssociation_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("AddAssociation_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("AddAssociation_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class RemoveAssociation_args : TBase
    {
      private int __homeId;
      private byte __nodeId;
      private byte __groupIdx;
      private byte __targetNodeId;

      public int _homeId
      {
        get
        {
          return __homeId;
        }
        set
        {
          __isset._homeId = true;
          this.__homeId = value;
        }
      }

      public byte _nodeId
      {
        get
        {
          return __nodeId;
        }
        set
        {
          __isset._nodeId = true;
          this.__nodeId = value;
        }
      }

      public byte _groupIdx
      {
        get
        {
          return __groupIdx;
        }
        set
        {
          __isset._groupIdx = true;
          this.__groupIdx = value;
        }
      }

      public byte _targetNodeId
      {
        get
        {
          return __targetNodeId;
        }
        set
        {
          __isset._targetNodeId = true;
          this.__targetNodeId = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _homeId;
        public bool _nodeId;
        public bool _groupIdx;
        public bool _targetNodeId;
      }

      public RemoveAssociation_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                _homeId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Byte) {
                _nodeId = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Byte) {
                _groupIdx = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Byte) {
                _targetNodeId = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("RemoveAssociation_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset._homeId) {
          field.Name = "_homeId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(_homeId);
          oprot.WriteFieldEnd();
        }
        if (__isset._nodeId) {
          field.Name = "_nodeId";
          field.Type = TType.Byte;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(_nodeId);
          oprot.WriteFieldEnd();
        }
        if (__isset._groupIdx) {
          field.Name = "_groupIdx";
          field.Type = TType.Byte;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(_groupIdx);
          oprot.WriteFieldEnd();
        }
        if (__isset._targetNodeId) {
          field.Name = "_targetNodeId";
          field.Type = TType.Byte;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(_targetNodeId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("RemoveAssociation_args(");
        sb.Append("_homeId: ");
        sb.Append(_homeId);
        sb.Append(",_nodeId: ");
        sb.Append(_nodeId);
        sb.Append(",_groupIdx: ");
        sb.Append(_groupIdx);
        sb.Append(",_targetNodeId: ");
        sb.Append(_targetNodeId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class RemoveAssociation_result : TBase
    {

      public RemoveAssociation_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("RemoveAssociation_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("RemoveAssociation_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class ResetController_args : TBase
    {
      private int __homeId;

      public int _homeId
      {
        get
        {
          return __homeId;
        }
        set
        {
          __isset._homeId = true;
          this.__homeId = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _homeId;
      }

      public ResetController_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                _homeId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("ResetController_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset._homeId) {
          field.Name = "_homeId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(_homeId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("ResetController_args(");
        sb.Append("_homeId: ");
        sb.Append(_homeId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class ResetController_result : TBase
    {

      public ResetController_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("ResetController_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("ResetController_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class SoftReset_args : TBase
    {
      private int __homeId;

      public int _homeId
      {
        get
        {
          return __homeId;
        }
        set
        {
          __isset._homeId = true;
          this.__homeId = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _homeId;
      }

      public SoftReset_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                _homeId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SoftReset_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset._homeId) {
          field.Name = "_homeId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(_homeId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("SoftReset_args(");
        sb.Append("_homeId: ");
        sb.Append(_homeId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class SoftReset_result : TBase
    {

      public SoftReset_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SoftReset_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("SoftReset_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class BeginControllerCommand_args : TBase
    {
      private int __homeId;
      private DriverControllerCommand __command;
      private bool __highPower;
      private byte __nodeId;
      private byte __arg;

      public int _homeId
      {
        get
        {
          return __homeId;
        }
        set
        {
          __isset._homeId = true;
          this.__homeId = value;
        }
      }

      public DriverControllerCommand _command
      {
        get
        {
          return __command;
        }
        set
        {
          __isset._command = true;
          this.__command = value;
        }
      }

      public bool _highPower
      {
        get
        {
          return __highPower;
        }
        set
        {
          __isset._highPower = true;
          this.__highPower = value;
        }
      }

      public byte _nodeId
      {
        get
        {
          return __nodeId;
        }
        set
        {
          __isset._nodeId = true;
          this.__nodeId = value;
        }
      }

      public byte _arg
      {
        get
        {
          return __arg;
        }
        set
        {
          __isset._arg = true;
          this.__arg = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _homeId;
        public bool _command;
        public bool _highPower;
        public bool _nodeId;
        public bool _arg;
      }

      public BeginControllerCommand_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                _homeId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                _command = (DriverControllerCommand)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Bool) {
                _highPower = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Byte) {
                _nodeId = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.Byte) {
                _arg = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("BeginControllerCommand_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset._homeId) {
          field.Name = "_homeId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(_homeId);
          oprot.WriteFieldEnd();
        }
        if (__isset._command) {
          field.Name = "_command";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)_command);
          oprot.WriteFieldEnd();
        }
        if (__isset._highPower) {
          field.Name = "_highPower";
          field.Type = TType.Bool;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(_highPower);
          oprot.WriteFieldEnd();
        }
        if (__isset._nodeId) {
          field.Name = "_nodeId";
          field.Type = TType.Byte;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(_nodeId);
          oprot.WriteFieldEnd();
        }
        if (__isset._arg) {
          field.Name = "_arg";
          field.Type = TType.Byte;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(_arg);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("BeginControllerCommand_args(");
        sb.Append("_homeId: ");
        sb.Append(_homeId);
        sb.Append(",_command: ");
        sb.Append(_command);
        sb.Append(",_highPower: ");
        sb.Append(_highPower);
        sb.Append(",_nodeId: ");
        sb.Append(_nodeId);
        sb.Append(",_arg: ");
        sb.Append(_arg);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class BeginControllerCommand_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public BeginControllerCommand_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("BeginControllerCommand_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("BeginControllerCommand_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class CancelControllerCommand_args : TBase
    {
      private int __homeId;

      public int _homeId
      {
        get
        {
          return __homeId;
        }
        set
        {
          __isset._homeId = true;
          this.__homeId = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _homeId;
      }

      public CancelControllerCommand_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                _homeId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("CancelControllerCommand_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset._homeId) {
          field.Name = "_homeId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(_homeId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("CancelControllerCommand_args(");
        sb.Append("_homeId: ");
        sb.Append(_homeId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class CancelControllerCommand_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public CancelControllerCommand_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("CancelControllerCommand_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("CancelControllerCommand_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class TestNetworkNode_args : TBase
    {
      private int __homeId;
      private byte __nodeId;
      private int __count;

      public int _homeId
      {
        get
        {
          return __homeId;
        }
        set
        {
          __isset._homeId = true;
          this.__homeId = value;
        }
      }

      public byte _nodeId
      {
        get
        {
          return __nodeId;
        }
        set
        {
          __isset._nodeId = true;
          this.__nodeId = value;
        }
      }

      public int _count
      {
        get
        {
          return __count;
        }
        set
        {
          __isset._count = true;
          this.__count = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _homeId;
        public bool _nodeId;
        public bool _count;
      }

      public TestNetworkNode_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                _homeId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Byte) {
                _nodeId = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                _count = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("TestNetworkNode_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset._homeId) {
          field.Name = "_homeId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(_homeId);
          oprot.WriteFieldEnd();
        }
        if (__isset._nodeId) {
          field.Name = "_nodeId";
          field.Type = TType.Byte;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(_nodeId);
          oprot.WriteFieldEnd();
        }
        if (__isset._count) {
          field.Name = "_count";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(_count);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("TestNetworkNode_args(");
        sb.Append("_homeId: ");
        sb.Append(_homeId);
        sb.Append(",_nodeId: ");
        sb.Append(_nodeId);
        sb.Append(",_count: ");
        sb.Append(_count);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class TestNetworkNode_result : TBase
    {

      public TestNetworkNode_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("TestNetworkNode_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("TestNetworkNode_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class TestNetwork_args : TBase
    {
      private int __homeId;
      private int __count;

      public int _homeId
      {
        get
        {
          return __homeId;
        }
        set
        {
          __isset._homeId = true;
          this.__homeId = value;
        }
      }

      public int _count
      {
        get
        {
          return __count;
        }
        set
        {
          __isset._count = true;
          this.__count = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _homeId;
        public bool _count;
      }

      public TestNetwork_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                _homeId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                _count = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("TestNetwork_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset._homeId) {
          field.Name = "_homeId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(_homeId);
          oprot.WriteFieldEnd();
        }
        if (__isset._count) {
          field.Name = "_count";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(_count);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("TestNetwork_args(");
        sb.Append("_homeId: ");
        sb.Append(_homeId);
        sb.Append(",_count: ");
        sb.Append(_count);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class TestNetwork_result : TBase
    {

      public TestNetwork_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("TestNetwork_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("TestNetwork_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class HealNetworkNode_args : TBase
    {
      private int __homeId;
      private byte __nodeId;
      private bool __doRR;

      public int _homeId
      {
        get
        {
          return __homeId;
        }
        set
        {
          __isset._homeId = true;
          this.__homeId = value;
        }
      }

      public byte _nodeId
      {
        get
        {
          return __nodeId;
        }
        set
        {
          __isset._nodeId = true;
          this.__nodeId = value;
        }
      }

      public bool _doRR
      {
        get
        {
          return __doRR;
        }
        set
        {
          __isset._doRR = true;
          this.__doRR = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _homeId;
        public bool _nodeId;
        public bool _doRR;
      }

      public HealNetworkNode_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                _homeId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Byte) {
                _nodeId = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Bool) {
                _doRR = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("HealNetworkNode_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset._homeId) {
          field.Name = "_homeId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(_homeId);
          oprot.WriteFieldEnd();
        }
        if (__isset._nodeId) {
          field.Name = "_nodeId";
          field.Type = TType.Byte;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(_nodeId);
          oprot.WriteFieldEnd();
        }
        if (__isset._doRR) {
          field.Name = "_doRR";
          field.Type = TType.Bool;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(_doRR);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("HealNetworkNode_args(");
        sb.Append("_homeId: ");
        sb.Append(_homeId);
        sb.Append(",_nodeId: ");
        sb.Append(_nodeId);
        sb.Append(",_doRR: ");
        sb.Append(_doRR);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class HealNetworkNode_result : TBase
    {

      public HealNetworkNode_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("HealNetworkNode_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("HealNetworkNode_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class HealNetwork_args : TBase
    {
      private int __homeId;
      private bool __doRR;

      public int _homeId
      {
        get
        {
          return __homeId;
        }
        set
        {
          __isset._homeId = true;
          this.__homeId = value;
        }
      }

      public bool _doRR
      {
        get
        {
          return __doRR;
        }
        set
        {
          __isset._doRR = true;
          this.__doRR = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _homeId;
        public bool _doRR;
      }

      public HealNetwork_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                _homeId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Bool) {
                _doRR = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("HealNetwork_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset._homeId) {
          field.Name = "_homeId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(_homeId);
          oprot.WriteFieldEnd();
        }
        if (__isset._doRR) {
          field.Name = "_doRR";
          field.Type = TType.Bool;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(_doRR);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("HealNetwork_args(");
        sb.Append("_homeId: ");
        sb.Append(_homeId);
        sb.Append(",_doRR: ");
        sb.Append(_doRR);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class HealNetwork_result : TBase
    {

      public HealNetwork_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("HealNetwork_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("HealNetwork_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class GetNumScenes_args : TBase
    {

      public GetNumScenes_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetNumScenes_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetNumScenes_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class GetNumScenes_result : TBase
    {
      private byte _success;

      public byte Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public GetNumScenes_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Byte) {
                Success = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetNumScenes_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Byte;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetNumScenes_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class GetAllScenes_args : TBase
    {

      public GetAllScenes_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetAllScenes_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetAllScenes_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class GetAllScenes_result : TBase
    {
      private GetAllScenesReturnStruct _success;

      public GetAllScenesReturnStruct Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public GetAllScenes_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new GetAllScenesReturnStruct();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetAllScenes_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetAllScenes_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class RemoveAllScenes_args : TBase
    {
      private int __homeId;

      public int _homeId
      {
        get
        {
          return __homeId;
        }
        set
        {
          __isset._homeId = true;
          this.__homeId = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _homeId;
      }

      public RemoveAllScenes_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                _homeId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("RemoveAllScenes_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset._homeId) {
          field.Name = "_homeId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(_homeId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("RemoveAllScenes_args(");
        sb.Append("_homeId: ");
        sb.Append(_homeId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class RemoveAllScenes_result : TBase
    {

      public RemoveAllScenes_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("RemoveAllScenes_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("RemoveAllScenes_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class CreateScene_args : TBase
    {

      public CreateScene_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("CreateScene_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("CreateScene_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class CreateScene_result : TBase
    {
      private byte _success;

      public byte Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public CreateScene_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Byte) {
                Success = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("CreateScene_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Byte;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("CreateScene_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class RemoveScene_args : TBase
    {
      private byte __sceneId;

      public byte _sceneId
      {
        get
        {
          return __sceneId;
        }
        set
        {
          __isset._sceneId = true;
          this.__sceneId = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _sceneId;
      }

      public RemoveScene_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Byte) {
                _sceneId = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("RemoveScene_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset._sceneId) {
          field.Name = "_sceneId";
          field.Type = TType.Byte;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(_sceneId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("RemoveScene_args(");
        sb.Append("_sceneId: ");
        sb.Append(_sceneId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class RemoveScene_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public RemoveScene_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("RemoveScene_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("RemoveScene_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class AddSceneValue_Bool_args : TBase
    {
      private byte __sceneId;
      private RemoteValueID __valueId;
      private bool __value;

      public byte _sceneId
      {
        get
        {
          return __sceneId;
        }
        set
        {
          __isset._sceneId = true;
          this.__sceneId = value;
        }
      }

      public RemoteValueID _valueId
      {
        get
        {
          return __valueId;
        }
        set
        {
          __isset._valueId = true;
          this.__valueId = value;
        }
      }

      public bool _value
      {
        get
        {
          return __value;
        }
        set
        {
          __isset._value = true;
          this.__value = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _sceneId;
        public bool _valueId;
        public bool _value;
      }

      public AddSceneValue_Bool_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Byte) {
                _sceneId = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                _valueId = new RemoteValueID();
                _valueId.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Bool) {
                _value = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("AddSceneValue_Bool_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset._sceneId) {
          field.Name = "_sceneId";
          field.Type = TType.Byte;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(_sceneId);
          oprot.WriteFieldEnd();
        }
        if (_valueId != null && __isset._valueId) {
          field.Name = "_valueId";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          _valueId.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset._value) {
          field.Name = "_value";
          field.Type = TType.Bool;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(_value);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("AddSceneValue_Bool_args(");
        sb.Append("_sceneId: ");
        sb.Append(_sceneId);
        sb.Append(",_valueId: ");
        sb.Append(_valueId== null ? "<null>" : _valueId.ToString());
        sb.Append(",_value: ");
        sb.Append(_value);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class AddSceneValue_Bool_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public AddSceneValue_Bool_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("AddSceneValue_Bool_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("AddSceneValue_Bool_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class AddSceneValue_Uint8_args : TBase
    {
      private byte __sceneId;
      private RemoteValueID __valueId;
      private byte __value;

      public byte _sceneId
      {
        get
        {
          return __sceneId;
        }
        set
        {
          __isset._sceneId = true;
          this.__sceneId = value;
        }
      }

      public RemoteValueID _valueId
      {
        get
        {
          return __valueId;
        }
        set
        {
          __isset._valueId = true;
          this.__valueId = value;
        }
      }

      public byte _value
      {
        get
        {
          return __value;
        }
        set
        {
          __isset._value = true;
          this.__value = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _sceneId;
        public bool _valueId;
        public bool _value;
      }

      public AddSceneValue_Uint8_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Byte) {
                _sceneId = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                _valueId = new RemoteValueID();
                _valueId.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Byte) {
                _value = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("AddSceneValue_Uint8_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset._sceneId) {
          field.Name = "_sceneId";
          field.Type = TType.Byte;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(_sceneId);
          oprot.WriteFieldEnd();
        }
        if (_valueId != null && __isset._valueId) {
          field.Name = "_valueId";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          _valueId.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset._value) {
          field.Name = "_value";
          field.Type = TType.Byte;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(_value);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("AddSceneValue_Uint8_args(");
        sb.Append("_sceneId: ");
        sb.Append(_sceneId);
        sb.Append(",_valueId: ");
        sb.Append(_valueId== null ? "<null>" : _valueId.ToString());
        sb.Append(",_value: ");
        sb.Append(_value);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class AddSceneValue_Uint8_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public AddSceneValue_Uint8_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("AddSceneValue_Uint8_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("AddSceneValue_Uint8_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class AddSceneValue_Float_args : TBase
    {
      private byte __sceneId;
      private RemoteValueID __valueId;
      private double __value;

      public byte _sceneId
      {
        get
        {
          return __sceneId;
        }
        set
        {
          __isset._sceneId = true;
          this.__sceneId = value;
        }
      }

      public RemoteValueID _valueId
      {
        get
        {
          return __valueId;
        }
        set
        {
          __isset._valueId = true;
          this.__valueId = value;
        }
      }

      public double _value
      {
        get
        {
          return __value;
        }
        set
        {
          __isset._value = true;
          this.__value = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _sceneId;
        public bool _valueId;
        public bool _value;
      }

      public AddSceneValue_Float_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Byte) {
                _sceneId = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                _valueId = new RemoteValueID();
                _valueId.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Double) {
                _value = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("AddSceneValue_Float_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset._sceneId) {
          field.Name = "_sceneId";
          field.Type = TType.Byte;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(_sceneId);
          oprot.WriteFieldEnd();
        }
        if (_valueId != null && __isset._valueId) {
          field.Name = "_valueId";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          _valueId.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset._value) {
          field.Name = "_value";
          field.Type = TType.Double;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(_value);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("AddSceneValue_Float_args(");
        sb.Append("_sceneId: ");
        sb.Append(_sceneId);
        sb.Append(",_valueId: ");
        sb.Append(_valueId== null ? "<null>" : _valueId.ToString());
        sb.Append(",_value: ");
        sb.Append(_value);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class AddSceneValue_Float_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public AddSceneValue_Float_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("AddSceneValue_Float_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("AddSceneValue_Float_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class AddSceneValue_Int32_args : TBase
    {
      private byte __sceneId;
      private RemoteValueID __valueId;
      private int __value;

      public byte _sceneId
      {
        get
        {
          return __sceneId;
        }
        set
        {
          __isset._sceneId = true;
          this.__sceneId = value;
        }
      }

      public RemoteValueID _valueId
      {
        get
        {
          return __valueId;
        }
        set
        {
          __isset._valueId = true;
          this.__valueId = value;
        }
      }

      public int _value
      {
        get
        {
          return __value;
        }
        set
        {
          __isset._value = true;
          this.__value = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _sceneId;
        public bool _valueId;
        public bool _value;
      }

      public AddSceneValue_Int32_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Byte) {
                _sceneId = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                _valueId = new RemoteValueID();
                _valueId.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                _value = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("AddSceneValue_Int32_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset._sceneId) {
          field.Name = "_sceneId";
          field.Type = TType.Byte;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(_sceneId);
          oprot.WriteFieldEnd();
        }
        if (_valueId != null && __isset._valueId) {
          field.Name = "_valueId";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          _valueId.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset._value) {
          field.Name = "_value";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(_value);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("AddSceneValue_Int32_args(");
        sb.Append("_sceneId: ");
        sb.Append(_sceneId);
        sb.Append(",_valueId: ");
        sb.Append(_valueId== null ? "<null>" : _valueId.ToString());
        sb.Append(",_value: ");
        sb.Append(_value);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class AddSceneValue_Int32_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public AddSceneValue_Int32_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("AddSceneValue_Int32_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("AddSceneValue_Int32_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class AddSceneValue_Int16_args : TBase
    {
      private byte __sceneId;
      private RemoteValueID __valueId;
      private short __value;

      public byte _sceneId
      {
        get
        {
          return __sceneId;
        }
        set
        {
          __isset._sceneId = true;
          this.__sceneId = value;
        }
      }

      public RemoteValueID _valueId
      {
        get
        {
          return __valueId;
        }
        set
        {
          __isset._valueId = true;
          this.__valueId = value;
        }
      }

      public short _value
      {
        get
        {
          return __value;
        }
        set
        {
          __isset._value = true;
          this.__value = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _sceneId;
        public bool _valueId;
        public bool _value;
      }

      public AddSceneValue_Int16_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Byte) {
                _sceneId = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                _valueId = new RemoteValueID();
                _valueId.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I16) {
                _value = iprot.ReadI16();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("AddSceneValue_Int16_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset._sceneId) {
          field.Name = "_sceneId";
          field.Type = TType.Byte;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(_sceneId);
          oprot.WriteFieldEnd();
        }
        if (_valueId != null && __isset._valueId) {
          field.Name = "_valueId";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          _valueId.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset._value) {
          field.Name = "_value";
          field.Type = TType.I16;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI16(_value);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("AddSceneValue_Int16_args(");
        sb.Append("_sceneId: ");
        sb.Append(_sceneId);
        sb.Append(",_valueId: ");
        sb.Append(_valueId== null ? "<null>" : _valueId.ToString());
        sb.Append(",_value: ");
        sb.Append(_value);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class AddSceneValue_Int16_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public AddSceneValue_Int16_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("AddSceneValue_Int16_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("AddSceneValue_Int16_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class AddSceneValue_String_args : TBase
    {
      private byte __sceneId;
      private RemoteValueID __valueId;
      private string __value;

      public byte _sceneId
      {
        get
        {
          return __sceneId;
        }
        set
        {
          __isset._sceneId = true;
          this.__sceneId = value;
        }
      }

      public RemoteValueID _valueId
      {
        get
        {
          return __valueId;
        }
        set
        {
          __isset._valueId = true;
          this.__valueId = value;
        }
      }

      public string _value
      {
        get
        {
          return __value;
        }
        set
        {
          __isset._value = true;
          this.__value = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _sceneId;
        public bool _valueId;
        public bool _value;
      }

      public AddSceneValue_String_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Byte) {
                _sceneId = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                _valueId = new RemoteValueID();
                _valueId.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                _value = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("AddSceneValue_String_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset._sceneId) {
          field.Name = "_sceneId";
          field.Type = TType.Byte;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(_sceneId);
          oprot.WriteFieldEnd();
        }
        if (_valueId != null && __isset._valueId) {
          field.Name = "_valueId";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          _valueId.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (_value != null && __isset._value) {
          field.Name = "_value";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(_value);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("AddSceneValue_String_args(");
        sb.Append("_sceneId: ");
        sb.Append(_sceneId);
        sb.Append(",_valueId: ");
        sb.Append(_valueId== null ? "<null>" : _valueId.ToString());
        sb.Append(",_value: ");
        sb.Append(_value);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class AddSceneValue_String_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public AddSceneValue_String_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("AddSceneValue_String_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("AddSceneValue_String_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class AddSceneValueListSelection_String_args : TBase
    {
      private byte __sceneId;
      private RemoteValueID __valueId;
      private string __value;

      public byte _sceneId
      {
        get
        {
          return __sceneId;
        }
        set
        {
          __isset._sceneId = true;
          this.__sceneId = value;
        }
      }

      public RemoteValueID _valueId
      {
        get
        {
          return __valueId;
        }
        set
        {
          __isset._valueId = true;
          this.__valueId = value;
        }
      }

      public string _value
      {
        get
        {
          return __value;
        }
        set
        {
          __isset._value = true;
          this.__value = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _sceneId;
        public bool _valueId;
        public bool _value;
      }

      public AddSceneValueListSelection_String_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Byte) {
                _sceneId = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                _valueId = new RemoteValueID();
                _valueId.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                _value = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("AddSceneValueListSelection_String_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset._sceneId) {
          field.Name = "_sceneId";
          field.Type = TType.Byte;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(_sceneId);
          oprot.WriteFieldEnd();
        }
        if (_valueId != null && __isset._valueId) {
          field.Name = "_valueId";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          _valueId.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (_value != null && __isset._value) {
          field.Name = "_value";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(_value);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("AddSceneValueListSelection_String_args(");
        sb.Append("_sceneId: ");
        sb.Append(_sceneId);
        sb.Append(",_valueId: ");
        sb.Append(_valueId== null ? "<null>" : _valueId.ToString());
        sb.Append(",_value: ");
        sb.Append(_value);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class AddSceneValueListSelection_String_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public AddSceneValueListSelection_String_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("AddSceneValueListSelection_String_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("AddSceneValueListSelection_String_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class AddSceneValueListSelection_Int32_args : TBase
    {
      private byte __sceneId;
      private RemoteValueID __valueId;
      private int __value;

      public byte _sceneId
      {
        get
        {
          return __sceneId;
        }
        set
        {
          __isset._sceneId = true;
          this.__sceneId = value;
        }
      }

      public RemoteValueID _valueId
      {
        get
        {
          return __valueId;
        }
        set
        {
          __isset._valueId = true;
          this.__valueId = value;
        }
      }

      public int _value
      {
        get
        {
          return __value;
        }
        set
        {
          __isset._value = true;
          this.__value = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _sceneId;
        public bool _valueId;
        public bool _value;
      }

      public AddSceneValueListSelection_Int32_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Byte) {
                _sceneId = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                _valueId = new RemoteValueID();
                _valueId.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                _value = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("AddSceneValueListSelection_Int32_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset._sceneId) {
          field.Name = "_sceneId";
          field.Type = TType.Byte;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(_sceneId);
          oprot.WriteFieldEnd();
        }
        if (_valueId != null && __isset._valueId) {
          field.Name = "_valueId";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          _valueId.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset._value) {
          field.Name = "_value";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(_value);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("AddSceneValueListSelection_Int32_args(");
        sb.Append("_sceneId: ");
        sb.Append(_sceneId);
        sb.Append(",_valueId: ");
        sb.Append(_valueId== null ? "<null>" : _valueId.ToString());
        sb.Append(",_value: ");
        sb.Append(_value);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class AddSceneValueListSelection_Int32_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public AddSceneValueListSelection_Int32_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("AddSceneValueListSelection_Int32_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("AddSceneValueListSelection_Int32_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class RemoveSceneValue_args : TBase
    {
      private byte __sceneId;
      private RemoteValueID __valueId;

      public byte _sceneId
      {
        get
        {
          return __sceneId;
        }
        set
        {
          __isset._sceneId = true;
          this.__sceneId = value;
        }
      }

      public RemoteValueID _valueId
      {
        get
        {
          return __valueId;
        }
        set
        {
          __isset._valueId = true;
          this.__valueId = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _sceneId;
        public bool _valueId;
      }

      public RemoveSceneValue_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Byte) {
                _sceneId = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                _valueId = new RemoteValueID();
                _valueId.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("RemoveSceneValue_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset._sceneId) {
          field.Name = "_sceneId";
          field.Type = TType.Byte;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(_sceneId);
          oprot.WriteFieldEnd();
        }
        if (_valueId != null && __isset._valueId) {
          field.Name = "_valueId";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          _valueId.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("RemoveSceneValue_args(");
        sb.Append("_sceneId: ");
        sb.Append(_sceneId);
        sb.Append(",_valueId: ");
        sb.Append(_valueId== null ? "<null>" : _valueId.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class RemoveSceneValue_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public RemoveSceneValue_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("RemoveSceneValue_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("RemoveSceneValue_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class SceneGetValues_args : TBase
    {
      private byte __sceneId;

      public byte _sceneId
      {
        get
        {
          return __sceneId;
        }
        set
        {
          __isset._sceneId = true;
          this.__sceneId = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _sceneId;
      }

      public SceneGetValues_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Byte) {
                _sceneId = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SceneGetValues_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset._sceneId) {
          field.Name = "_sceneId";
          field.Type = TType.Byte;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(_sceneId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("SceneGetValues_args(");
        sb.Append("_sceneId: ");
        sb.Append(_sceneId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class SceneGetValues_result : TBase
    {
      private SceneGetValuesReturnStruct _success;

      public SceneGetValuesReturnStruct Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public SceneGetValues_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new SceneGetValuesReturnStruct();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SceneGetValues_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("SceneGetValues_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class SceneGetValueAsBool_args : TBase
    {
      private byte __sceneId;
      private RemoteValueID __valueId;

      public byte _sceneId
      {
        get
        {
          return __sceneId;
        }
        set
        {
          __isset._sceneId = true;
          this.__sceneId = value;
        }
      }

      public RemoteValueID _valueId
      {
        get
        {
          return __valueId;
        }
        set
        {
          __isset._valueId = true;
          this.__valueId = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _sceneId;
        public bool _valueId;
      }

      public SceneGetValueAsBool_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Byte) {
                _sceneId = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                _valueId = new RemoteValueID();
                _valueId.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SceneGetValueAsBool_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset._sceneId) {
          field.Name = "_sceneId";
          field.Type = TType.Byte;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(_sceneId);
          oprot.WriteFieldEnd();
        }
        if (_valueId != null && __isset._valueId) {
          field.Name = "_valueId";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          _valueId.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("SceneGetValueAsBool_args(");
        sb.Append("_sceneId: ");
        sb.Append(_sceneId);
        sb.Append(",_valueId: ");
        sb.Append(_valueId== null ? "<null>" : _valueId.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class SceneGetValueAsBool_result : TBase
    {
      private Bool_Bool _success;

      public Bool_Bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public SceneGetValueAsBool_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Bool_Bool();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SceneGetValueAsBool_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("SceneGetValueAsBool_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class SceneGetValueAsByte_args : TBase
    {
      private byte __sceneId;
      private RemoteValueID __valueId;

      public byte _sceneId
      {
        get
        {
          return __sceneId;
        }
        set
        {
          __isset._sceneId = true;
          this.__sceneId = value;
        }
      }

      public RemoteValueID _valueId
      {
        get
        {
          return __valueId;
        }
        set
        {
          __isset._valueId = true;
          this.__valueId = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _sceneId;
        public bool _valueId;
      }

      public SceneGetValueAsByte_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Byte) {
                _sceneId = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                _valueId = new RemoteValueID();
                _valueId.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SceneGetValueAsByte_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset._sceneId) {
          field.Name = "_sceneId";
          field.Type = TType.Byte;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(_sceneId);
          oprot.WriteFieldEnd();
        }
        if (_valueId != null && __isset._valueId) {
          field.Name = "_valueId";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          _valueId.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("SceneGetValueAsByte_args(");
        sb.Append("_sceneId: ");
        sb.Append(_sceneId);
        sb.Append(",_valueId: ");
        sb.Append(_valueId== null ? "<null>" : _valueId.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class SceneGetValueAsByte_result : TBase
    {
      private Bool_UInt8 _success;

      public Bool_UInt8 Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public SceneGetValueAsByte_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Bool_UInt8();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SceneGetValueAsByte_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("SceneGetValueAsByte_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class SceneGetValueAsFloat_args : TBase
    {
      private byte __sceneId;
      private RemoteValueID __valueId;

      public byte _sceneId
      {
        get
        {
          return __sceneId;
        }
        set
        {
          __isset._sceneId = true;
          this.__sceneId = value;
        }
      }

      public RemoteValueID _valueId
      {
        get
        {
          return __valueId;
        }
        set
        {
          __isset._valueId = true;
          this.__valueId = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _sceneId;
        public bool _valueId;
      }

      public SceneGetValueAsFloat_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Byte) {
                _sceneId = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                _valueId = new RemoteValueID();
                _valueId.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SceneGetValueAsFloat_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset._sceneId) {
          field.Name = "_sceneId";
          field.Type = TType.Byte;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(_sceneId);
          oprot.WriteFieldEnd();
        }
        if (_valueId != null && __isset._valueId) {
          field.Name = "_valueId";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          _valueId.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("SceneGetValueAsFloat_args(");
        sb.Append("_sceneId: ");
        sb.Append(_sceneId);
        sb.Append(",_valueId: ");
        sb.Append(_valueId== null ? "<null>" : _valueId.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class SceneGetValueAsFloat_result : TBase
    {
      private Bool_Float _success;

      public Bool_Float Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public SceneGetValueAsFloat_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Bool_Float();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SceneGetValueAsFloat_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("SceneGetValueAsFloat_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class SceneGetValueAsInt_args : TBase
    {
      private byte __sceneId;
      private RemoteValueID __valueId;

      public byte _sceneId
      {
        get
        {
          return __sceneId;
        }
        set
        {
          __isset._sceneId = true;
          this.__sceneId = value;
        }
      }

      public RemoteValueID _valueId
      {
        get
        {
          return __valueId;
        }
        set
        {
          __isset._valueId = true;
          this.__valueId = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _sceneId;
        public bool _valueId;
      }

      public SceneGetValueAsInt_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Byte) {
                _sceneId = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                _valueId = new RemoteValueID();
                _valueId.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SceneGetValueAsInt_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset._sceneId) {
          field.Name = "_sceneId";
          field.Type = TType.Byte;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(_sceneId);
          oprot.WriteFieldEnd();
        }
        if (_valueId != null && __isset._valueId) {
          field.Name = "_valueId";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          _valueId.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("SceneGetValueAsInt_args(");
        sb.Append("_sceneId: ");
        sb.Append(_sceneId);
        sb.Append(",_valueId: ");
        sb.Append(_valueId== null ? "<null>" : _valueId.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class SceneGetValueAsInt_result : TBase
    {
      private Bool_Int _success;

      public Bool_Int Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public SceneGetValueAsInt_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Bool_Int();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SceneGetValueAsInt_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("SceneGetValueAsInt_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class SceneGetValueAsShort_args : TBase
    {
      private byte __sceneId;
      private RemoteValueID __valueId;

      public byte _sceneId
      {
        get
        {
          return __sceneId;
        }
        set
        {
          __isset._sceneId = true;
          this.__sceneId = value;
        }
      }

      public RemoteValueID _valueId
      {
        get
        {
          return __valueId;
        }
        set
        {
          __isset._valueId = true;
          this.__valueId = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _sceneId;
        public bool _valueId;
      }

      public SceneGetValueAsShort_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Byte) {
                _sceneId = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                _valueId = new RemoteValueID();
                _valueId.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SceneGetValueAsShort_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset._sceneId) {
          field.Name = "_sceneId";
          field.Type = TType.Byte;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(_sceneId);
          oprot.WriteFieldEnd();
        }
        if (_valueId != null && __isset._valueId) {
          field.Name = "_valueId";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          _valueId.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("SceneGetValueAsShort_args(");
        sb.Append("_sceneId: ");
        sb.Append(_sceneId);
        sb.Append(",_valueId: ");
        sb.Append(_valueId== null ? "<null>" : _valueId.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class SceneGetValueAsShort_result : TBase
    {
      private Bool_Int16 _success;

      public Bool_Int16 Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public SceneGetValueAsShort_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Bool_Int16();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SceneGetValueAsShort_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("SceneGetValueAsShort_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class SceneGetValueAsString_args : TBase
    {
      private byte __sceneId;
      private RemoteValueID __valueId;

      public byte _sceneId
      {
        get
        {
          return __sceneId;
        }
        set
        {
          __isset._sceneId = true;
          this.__sceneId = value;
        }
      }

      public RemoteValueID _valueId
      {
        get
        {
          return __valueId;
        }
        set
        {
          __isset._valueId = true;
          this.__valueId = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _sceneId;
        public bool _valueId;
      }

      public SceneGetValueAsString_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Byte) {
                _sceneId = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                _valueId = new RemoteValueID();
                _valueId.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SceneGetValueAsString_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset._sceneId) {
          field.Name = "_sceneId";
          field.Type = TType.Byte;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(_sceneId);
          oprot.WriteFieldEnd();
        }
        if (_valueId != null && __isset._valueId) {
          field.Name = "_valueId";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          _valueId.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("SceneGetValueAsString_args(");
        sb.Append("_sceneId: ");
        sb.Append(_sceneId);
        sb.Append(",_valueId: ");
        sb.Append(_valueId== null ? "<null>" : _valueId.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class SceneGetValueAsString_result : TBase
    {
      private Bool_String _success;

      public Bool_String Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public SceneGetValueAsString_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Bool_String();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SceneGetValueAsString_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("SceneGetValueAsString_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class SceneGetValueListSelection_String_args : TBase
    {
      private byte __sceneId;
      private RemoteValueID __valueId;

      public byte _sceneId
      {
        get
        {
          return __sceneId;
        }
        set
        {
          __isset._sceneId = true;
          this.__sceneId = value;
        }
      }

      public RemoteValueID _valueId
      {
        get
        {
          return __valueId;
        }
        set
        {
          __isset._valueId = true;
          this.__valueId = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _sceneId;
        public bool _valueId;
      }

      public SceneGetValueListSelection_String_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Byte) {
                _sceneId = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                _valueId = new RemoteValueID();
                _valueId.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SceneGetValueListSelection_String_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset._sceneId) {
          field.Name = "_sceneId";
          field.Type = TType.Byte;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(_sceneId);
          oprot.WriteFieldEnd();
        }
        if (_valueId != null && __isset._valueId) {
          field.Name = "_valueId";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          _valueId.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("SceneGetValueListSelection_String_args(");
        sb.Append("_sceneId: ");
        sb.Append(_sceneId);
        sb.Append(",_valueId: ");
        sb.Append(_valueId== null ? "<null>" : _valueId.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class SceneGetValueListSelection_String_result : TBase
    {
      private Bool_String _success;

      public Bool_String Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public SceneGetValueListSelection_String_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Bool_String();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SceneGetValueListSelection_String_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("SceneGetValueListSelection_String_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class SceneGetValueListSelection_Int32_args : TBase
    {
      private byte __sceneId;
      private RemoteValueID __valueId;

      public byte _sceneId
      {
        get
        {
          return __sceneId;
        }
        set
        {
          __isset._sceneId = true;
          this.__sceneId = value;
        }
      }

      public RemoteValueID _valueId
      {
        get
        {
          return __valueId;
        }
        set
        {
          __isset._valueId = true;
          this.__valueId = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _sceneId;
        public bool _valueId;
      }

      public SceneGetValueListSelection_Int32_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Byte) {
                _sceneId = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                _valueId = new RemoteValueID();
                _valueId.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SceneGetValueListSelection_Int32_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset._sceneId) {
          field.Name = "_sceneId";
          field.Type = TType.Byte;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(_sceneId);
          oprot.WriteFieldEnd();
        }
        if (_valueId != null && __isset._valueId) {
          field.Name = "_valueId";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          _valueId.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("SceneGetValueListSelection_Int32_args(");
        sb.Append("_sceneId: ");
        sb.Append(_sceneId);
        sb.Append(",_valueId: ");
        sb.Append(_valueId== null ? "<null>" : _valueId.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class SceneGetValueListSelection_Int32_result : TBase
    {
      private Bool_Int _success;

      public Bool_Int Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public SceneGetValueListSelection_Int32_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Bool_Int();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SceneGetValueListSelection_Int32_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("SceneGetValueListSelection_Int32_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class SetSceneValue_Bool_args : TBase
    {
      private byte __sceneId;
      private RemoteValueID __valueId;
      private bool __value;

      public byte _sceneId
      {
        get
        {
          return __sceneId;
        }
        set
        {
          __isset._sceneId = true;
          this.__sceneId = value;
        }
      }

      public RemoteValueID _valueId
      {
        get
        {
          return __valueId;
        }
        set
        {
          __isset._valueId = true;
          this.__valueId = value;
        }
      }

      public bool _value
      {
        get
        {
          return __value;
        }
        set
        {
          __isset._value = true;
          this.__value = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _sceneId;
        public bool _valueId;
        public bool _value;
      }

      public SetSceneValue_Bool_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Byte) {
                _sceneId = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                _valueId = new RemoteValueID();
                _valueId.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Bool) {
                _value = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SetSceneValue_Bool_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset._sceneId) {
          field.Name = "_sceneId";
          field.Type = TType.Byte;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(_sceneId);
          oprot.WriteFieldEnd();
        }
        if (_valueId != null && __isset._valueId) {
          field.Name = "_valueId";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          _valueId.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset._value) {
          field.Name = "_value";
          field.Type = TType.Bool;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(_value);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("SetSceneValue_Bool_args(");
        sb.Append("_sceneId: ");
        sb.Append(_sceneId);
        sb.Append(",_valueId: ");
        sb.Append(_valueId== null ? "<null>" : _valueId.ToString());
        sb.Append(",_value: ");
        sb.Append(_value);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class SetSceneValue_Bool_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public SetSceneValue_Bool_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SetSceneValue_Bool_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("SetSceneValue_Bool_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class SetSceneValue_Uint8_args : TBase
    {
      private byte __sceneId;
      private RemoteValueID __valueId;
      private byte __value;

      public byte _sceneId
      {
        get
        {
          return __sceneId;
        }
        set
        {
          __isset._sceneId = true;
          this.__sceneId = value;
        }
      }

      public RemoteValueID _valueId
      {
        get
        {
          return __valueId;
        }
        set
        {
          __isset._valueId = true;
          this.__valueId = value;
        }
      }

      public byte _value
      {
        get
        {
          return __value;
        }
        set
        {
          __isset._value = true;
          this.__value = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _sceneId;
        public bool _valueId;
        public bool _value;
      }

      public SetSceneValue_Uint8_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Byte) {
                _sceneId = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                _valueId = new RemoteValueID();
                _valueId.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Byte) {
                _value = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SetSceneValue_Uint8_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset._sceneId) {
          field.Name = "_sceneId";
          field.Type = TType.Byte;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(_sceneId);
          oprot.WriteFieldEnd();
        }
        if (_valueId != null && __isset._valueId) {
          field.Name = "_valueId";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          _valueId.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset._value) {
          field.Name = "_value";
          field.Type = TType.Byte;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(_value);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("SetSceneValue_Uint8_args(");
        sb.Append("_sceneId: ");
        sb.Append(_sceneId);
        sb.Append(",_valueId: ");
        sb.Append(_valueId== null ? "<null>" : _valueId.ToString());
        sb.Append(",_value: ");
        sb.Append(_value);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class SetSceneValue_Uint8_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public SetSceneValue_Uint8_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SetSceneValue_Uint8_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("SetSceneValue_Uint8_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class SetSceneValue_Float_args : TBase
    {
      private byte __sceneId;
      private RemoteValueID __valueId;
      private double __value;

      public byte _sceneId
      {
        get
        {
          return __sceneId;
        }
        set
        {
          __isset._sceneId = true;
          this.__sceneId = value;
        }
      }

      public RemoteValueID _valueId
      {
        get
        {
          return __valueId;
        }
        set
        {
          __isset._valueId = true;
          this.__valueId = value;
        }
      }

      public double _value
      {
        get
        {
          return __value;
        }
        set
        {
          __isset._value = true;
          this.__value = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _sceneId;
        public bool _valueId;
        public bool _value;
      }

      public SetSceneValue_Float_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Byte) {
                _sceneId = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                _valueId = new RemoteValueID();
                _valueId.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Double) {
                _value = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SetSceneValue_Float_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset._sceneId) {
          field.Name = "_sceneId";
          field.Type = TType.Byte;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(_sceneId);
          oprot.WriteFieldEnd();
        }
        if (_valueId != null && __isset._valueId) {
          field.Name = "_valueId";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          _valueId.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset._value) {
          field.Name = "_value";
          field.Type = TType.Double;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(_value);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("SetSceneValue_Float_args(");
        sb.Append("_sceneId: ");
        sb.Append(_sceneId);
        sb.Append(",_valueId: ");
        sb.Append(_valueId== null ? "<null>" : _valueId.ToString());
        sb.Append(",_value: ");
        sb.Append(_value);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class SetSceneValue_Float_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public SetSceneValue_Float_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SetSceneValue_Float_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("SetSceneValue_Float_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class SetSceneValue_Int32_args : TBase
    {
      private byte __sceneId;
      private RemoteValueID __valueId;
      private int __value;

      public byte _sceneId
      {
        get
        {
          return __sceneId;
        }
        set
        {
          __isset._sceneId = true;
          this.__sceneId = value;
        }
      }

      public RemoteValueID _valueId
      {
        get
        {
          return __valueId;
        }
        set
        {
          __isset._valueId = true;
          this.__valueId = value;
        }
      }

      public int _value
      {
        get
        {
          return __value;
        }
        set
        {
          __isset._value = true;
          this.__value = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _sceneId;
        public bool _valueId;
        public bool _value;
      }

      public SetSceneValue_Int32_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Byte) {
                _sceneId = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                _valueId = new RemoteValueID();
                _valueId.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                _value = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SetSceneValue_Int32_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset._sceneId) {
          field.Name = "_sceneId";
          field.Type = TType.Byte;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(_sceneId);
          oprot.WriteFieldEnd();
        }
        if (_valueId != null && __isset._valueId) {
          field.Name = "_valueId";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          _valueId.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset._value) {
          field.Name = "_value";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(_value);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("SetSceneValue_Int32_args(");
        sb.Append("_sceneId: ");
        sb.Append(_sceneId);
        sb.Append(",_valueId: ");
        sb.Append(_valueId== null ? "<null>" : _valueId.ToString());
        sb.Append(",_value: ");
        sb.Append(_value);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class SetSceneValue_Int32_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public SetSceneValue_Int32_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SetSceneValue_Int32_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("SetSceneValue_Int32_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class SetSceneValue_Int16_args : TBase
    {
      private byte __sceneId;
      private RemoteValueID __valueId;
      private short __value;

      public byte _sceneId
      {
        get
        {
          return __sceneId;
        }
        set
        {
          __isset._sceneId = true;
          this.__sceneId = value;
        }
      }

      public RemoteValueID _valueId
      {
        get
        {
          return __valueId;
        }
        set
        {
          __isset._valueId = true;
          this.__valueId = value;
        }
      }

      public short _value
      {
        get
        {
          return __value;
        }
        set
        {
          __isset._value = true;
          this.__value = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _sceneId;
        public bool _valueId;
        public bool _value;
      }

      public SetSceneValue_Int16_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Byte) {
                _sceneId = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                _valueId = new RemoteValueID();
                _valueId.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I16) {
                _value = iprot.ReadI16();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SetSceneValue_Int16_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset._sceneId) {
          field.Name = "_sceneId";
          field.Type = TType.Byte;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(_sceneId);
          oprot.WriteFieldEnd();
        }
        if (_valueId != null && __isset._valueId) {
          field.Name = "_valueId";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          _valueId.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset._value) {
          field.Name = "_value";
          field.Type = TType.I16;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI16(_value);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("SetSceneValue_Int16_args(");
        sb.Append("_sceneId: ");
        sb.Append(_sceneId);
        sb.Append(",_valueId: ");
        sb.Append(_valueId== null ? "<null>" : _valueId.ToString());
        sb.Append(",_value: ");
        sb.Append(_value);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class SetSceneValue_Int16_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public SetSceneValue_Int16_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SetSceneValue_Int16_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("SetSceneValue_Int16_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class SetSceneValue_String_args : TBase
    {
      private byte __sceneId;
      private RemoteValueID __valueId;
      private string __value;

      public byte _sceneId
      {
        get
        {
          return __sceneId;
        }
        set
        {
          __isset._sceneId = true;
          this.__sceneId = value;
        }
      }

      public RemoteValueID _valueId
      {
        get
        {
          return __valueId;
        }
        set
        {
          __isset._valueId = true;
          this.__valueId = value;
        }
      }

      public string _value
      {
        get
        {
          return __value;
        }
        set
        {
          __isset._value = true;
          this.__value = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _sceneId;
        public bool _valueId;
        public bool _value;
      }

      public SetSceneValue_String_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Byte) {
                _sceneId = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                _valueId = new RemoteValueID();
                _valueId.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                _value = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SetSceneValue_String_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset._sceneId) {
          field.Name = "_sceneId";
          field.Type = TType.Byte;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(_sceneId);
          oprot.WriteFieldEnd();
        }
        if (_valueId != null && __isset._valueId) {
          field.Name = "_valueId";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          _valueId.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (_value != null && __isset._value) {
          field.Name = "_value";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(_value);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("SetSceneValue_String_args(");
        sb.Append("_sceneId: ");
        sb.Append(_sceneId);
        sb.Append(",_valueId: ");
        sb.Append(_valueId== null ? "<null>" : _valueId.ToString());
        sb.Append(",_value: ");
        sb.Append(_value);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class SetSceneValue_String_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public SetSceneValue_String_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SetSceneValue_String_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("SetSceneValue_String_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class SetSceneValueListSelection_String_args : TBase
    {
      private byte __sceneId;
      private RemoteValueID __valueId;
      private string __value;

      public byte _sceneId
      {
        get
        {
          return __sceneId;
        }
        set
        {
          __isset._sceneId = true;
          this.__sceneId = value;
        }
      }

      public RemoteValueID _valueId
      {
        get
        {
          return __valueId;
        }
        set
        {
          __isset._valueId = true;
          this.__valueId = value;
        }
      }

      public string _value
      {
        get
        {
          return __value;
        }
        set
        {
          __isset._value = true;
          this.__value = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _sceneId;
        public bool _valueId;
        public bool _value;
      }

      public SetSceneValueListSelection_String_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Byte) {
                _sceneId = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                _valueId = new RemoteValueID();
                _valueId.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                _value = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SetSceneValueListSelection_String_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset._sceneId) {
          field.Name = "_sceneId";
          field.Type = TType.Byte;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(_sceneId);
          oprot.WriteFieldEnd();
        }
        if (_valueId != null && __isset._valueId) {
          field.Name = "_valueId";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          _valueId.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (_value != null && __isset._value) {
          field.Name = "_value";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(_value);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("SetSceneValueListSelection_String_args(");
        sb.Append("_sceneId: ");
        sb.Append(_sceneId);
        sb.Append(",_valueId: ");
        sb.Append(_valueId== null ? "<null>" : _valueId.ToString());
        sb.Append(",_value: ");
        sb.Append(_value);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class SetSceneValueListSelection_String_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public SetSceneValueListSelection_String_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SetSceneValueListSelection_String_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("SetSceneValueListSelection_String_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class SetSceneValueListSelection_Int32_args : TBase
    {
      private byte __sceneId;
      private RemoteValueID __valueId;
      private int __value;

      public byte _sceneId
      {
        get
        {
          return __sceneId;
        }
        set
        {
          __isset._sceneId = true;
          this.__sceneId = value;
        }
      }

      public RemoteValueID _valueId
      {
        get
        {
          return __valueId;
        }
        set
        {
          __isset._valueId = true;
          this.__valueId = value;
        }
      }

      public int _value
      {
        get
        {
          return __value;
        }
        set
        {
          __isset._value = true;
          this.__value = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _sceneId;
        public bool _valueId;
        public bool _value;
      }

      public SetSceneValueListSelection_Int32_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Byte) {
                _sceneId = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                _valueId = new RemoteValueID();
                _valueId.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                _value = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SetSceneValueListSelection_Int32_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset._sceneId) {
          field.Name = "_sceneId";
          field.Type = TType.Byte;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(_sceneId);
          oprot.WriteFieldEnd();
        }
        if (_valueId != null && __isset._valueId) {
          field.Name = "_valueId";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          _valueId.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset._value) {
          field.Name = "_value";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(_value);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("SetSceneValueListSelection_Int32_args(");
        sb.Append("_sceneId: ");
        sb.Append(_sceneId);
        sb.Append(",_valueId: ");
        sb.Append(_valueId== null ? "<null>" : _valueId.ToString());
        sb.Append(",_value: ");
        sb.Append(_value);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class SetSceneValueListSelection_Int32_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public SetSceneValueListSelection_Int32_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SetSceneValueListSelection_Int32_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("SetSceneValueListSelection_Int32_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class GetSceneLabel_args : TBase
    {
      private byte __sceneId;

      public byte _sceneId
      {
        get
        {
          return __sceneId;
        }
        set
        {
          __isset._sceneId = true;
          this.__sceneId = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _sceneId;
      }

      public GetSceneLabel_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Byte) {
                _sceneId = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetSceneLabel_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset._sceneId) {
          field.Name = "_sceneId";
          field.Type = TType.Byte;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(_sceneId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetSceneLabel_args(");
        sb.Append("_sceneId: ");
        sb.Append(_sceneId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class GetSceneLabel_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public GetSceneLabel_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetSceneLabel_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetSceneLabel_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class SetSceneLabel_args : TBase
    {
      private byte __sceneId;
      private string __value;

      public byte _sceneId
      {
        get
        {
          return __sceneId;
        }
        set
        {
          __isset._sceneId = true;
          this.__sceneId = value;
        }
      }

      public string _value
      {
        get
        {
          return __value;
        }
        set
        {
          __isset._value = true;
          this.__value = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _sceneId;
        public bool _value;
      }

      public SetSceneLabel_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Byte) {
                _sceneId = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                _value = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SetSceneLabel_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset._sceneId) {
          field.Name = "_sceneId";
          field.Type = TType.Byte;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(_sceneId);
          oprot.WriteFieldEnd();
        }
        if (_value != null && __isset._value) {
          field.Name = "_value";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(_value);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("SetSceneLabel_args(");
        sb.Append("_sceneId: ");
        sb.Append(_sceneId);
        sb.Append(",_value: ");
        sb.Append(_value);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class SetSceneLabel_result : TBase
    {

      public SetSceneLabel_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SetSceneLabel_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("SetSceneLabel_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class SceneExists_args : TBase
    {
      private byte __sceneId;

      public byte _sceneId
      {
        get
        {
          return __sceneId;
        }
        set
        {
          __isset._sceneId = true;
          this.__sceneId = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _sceneId;
      }

      public SceneExists_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Byte) {
                _sceneId = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SceneExists_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset._sceneId) {
          field.Name = "_sceneId";
          field.Type = TType.Byte;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(_sceneId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("SceneExists_args(");
        sb.Append("_sceneId: ");
        sb.Append(_sceneId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class SceneExists_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public SceneExists_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SceneExists_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("SceneExists_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class ActivateScene_args : TBase
    {
      private byte __sceneId;

      public byte _sceneId
      {
        get
        {
          return __sceneId;
        }
        set
        {
          __isset._sceneId = true;
          this.__sceneId = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _sceneId;
      }

      public ActivateScene_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Byte) {
                _sceneId = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("ActivateScene_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset._sceneId) {
          field.Name = "_sceneId";
          field.Type = TType.Byte;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(_sceneId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("ActivateScene_args(");
        sb.Append("_sceneId: ");
        sb.Append(_sceneId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class ActivateScene_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public ActivateScene_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("ActivateScene_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("ActivateScene_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class GetDriverStatistics_args : TBase
    {
      private int __homeId;

      public int _homeId
      {
        get
        {
          return __homeId;
        }
        set
        {
          __isset._homeId = true;
          this.__homeId = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _homeId;
      }

      public GetDriverStatistics_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                _homeId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetDriverStatistics_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset._homeId) {
          field.Name = "_homeId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(_homeId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetDriverStatistics_args(");
        sb.Append("_homeId: ");
        sb.Append(_homeId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class GetDriverStatistics_result : TBase
    {
      private GetDriverStatisticsReturnStruct _success;

      public GetDriverStatisticsReturnStruct Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public GetDriverStatistics_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new GetDriverStatisticsReturnStruct();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetDriverStatistics_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetDriverStatistics_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class GetNodeStatistics_args : TBase
    {
      private int __homeId;
      private byte __nodeId;

      public int _homeId
      {
        get
        {
          return __homeId;
        }
        set
        {
          __isset._homeId = true;
          this.__homeId = value;
        }
      }

      public byte _nodeId
      {
        get
        {
          return __nodeId;
        }
        set
        {
          __isset._nodeId = true;
          this.__nodeId = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool _homeId;
        public bool _nodeId;
      }

      public GetNodeStatistics_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                _homeId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Byte) {
                _nodeId = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetNodeStatistics_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset._homeId) {
          field.Name = "_homeId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(_homeId);
          oprot.WriteFieldEnd();
        }
        if (__isset._nodeId) {
          field.Name = "_nodeId";
          field.Type = TType.Byte;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(_nodeId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetNodeStatistics_args(");
        sb.Append("_homeId: ");
        sb.Append(_homeId);
        sb.Append(",_nodeId: ");
        sb.Append(_nodeId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class GetNodeStatistics_result : TBase
    {
      private GetNodeStatisticsReturnStruct _success;

      public GetNodeStatisticsReturnStruct Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public GetNodeStatistics_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new GetNodeStatisticsReturnStruct();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetNodeStatistics_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetNodeStatistics_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class SendAllValues_args : TBase
    {

      public SendAllValues_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SendAllValues_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("SendAllValues_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class SendAllValues_result : TBase
    {

      public SendAllValues_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SendAllValues_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("SendAllValues_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class ping_args : TBase
    {

      public ping_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("ping_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("ping_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class ping_result : TBase
    {

      public ping_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("ping_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("ping_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }

  }
}
