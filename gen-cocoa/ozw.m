/**
 * Autogenerated by Thrift Compiler (0.9.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TApplicationException.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TObjective-C.h"


#import "ozw.h"

@implementation OpenZWaveRemoteValueID

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_homeId: (int32_t) _homeId _nodeId: (uint8_t) _nodeId _genre: (int) _genre _commandClassId: (uint8_t) _commandClassId _instance: (uint8_t) _instance _valueIndex: (uint8_t) _valueIndex _type: (int) _type
{
  self = [super init];
  ___homeId = _homeId;
  ___homeId_isset = YES;
  ___nodeId = _nodeId;
  ___nodeId_isset = YES;
  ___genre = _genre;
  ___genre_isset = YES;
  ___commandClassId = _commandClassId;
  ___commandClassId_isset = YES;
  ___instance = _instance;
  ___instance_isset = YES;
  ___valueIndex = _valueIndex;
  ___valueIndex_isset = YES;
  ___type = _type;
  ___type_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_homeId"])
  {
    ___homeId = [decoder decodeInt32ForKey: @"_homeId"];
    ___homeId_isset = YES;
  }
  if ([decoder containsValueForKey: @"_nodeId"])
  {
    ___nodeId = [decoder decodeIntForKey: @"_nodeId"];
    ___nodeId_isset = YES;
  }
  if ([decoder containsValueForKey: @"_genre"])
  {
    ___genre = [decoder decodeIntForKey: @"_genre"];
    ___genre_isset = YES;
  }
  if ([decoder containsValueForKey: @"_commandClassId"])
  {
    ___commandClassId = [decoder decodeIntForKey: @"_commandClassId"];
    ___commandClassId_isset = YES;
  }
  if ([decoder containsValueForKey: @"_instance"])
  {
    ___instance = [decoder decodeIntForKey: @"_instance"];
    ___instance_isset = YES;
  }
  if ([decoder containsValueForKey: @"_valueIndex"])
  {
    ___valueIndex = [decoder decodeIntForKey: @"_valueIndex"];
    ___valueIndex_isset = YES;
  }
  if ([decoder containsValueForKey: @"_type"])
  {
    ___type = [decoder decodeIntForKey: @"_type"];
    ___type_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___homeId_isset)
  {
    [encoder encodeInt32: ___homeId forKey: @"_homeId"];
  }
  if (___nodeId_isset)
  {
    [encoder encodeInt: ___nodeId forKey: @"_nodeId"];
  }
  if (___genre_isset)
  {
    [encoder encodeInt: ___genre forKey: @"_genre"];
  }
  if (___commandClassId_isset)
  {
    [encoder encodeInt: ___commandClassId forKey: @"_commandClassId"];
  }
  if (___instance_isset)
  {
    [encoder encodeInt: ___instance forKey: @"_instance"];
  }
  if (___valueIndex_isset)
  {
    [encoder encodeInt: ___valueIndex forKey: @"_valueIndex"];
  }
  if (___type_isset)
  {
    [encoder encodeInt: ___type forKey: @"_type"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (int32_t) _homeId {
  return ___homeId;
}

- (void) set_homeId: (int32_t) _homeId {
  ___homeId = _homeId;
  ___homeId_isset = YES;
}

- (BOOL) _homeIdIsSet {
  return ___homeId_isset;
}

- (void) unset_homeId {
  ___homeId_isset = NO;
}

- (uint8_t) _nodeId {
  return ___nodeId;
}

- (void) set_nodeId: (uint8_t) _nodeId {
  ___nodeId = _nodeId;
  ___nodeId_isset = YES;
}

- (BOOL) _nodeIdIsSet {
  return ___nodeId_isset;
}

- (void) unset_nodeId {
  ___nodeId_isset = NO;
}

- (int) _genre {
  return ___genre;
}

- (void) set_genre: (int) _genre {
  ___genre = _genre;
  ___genre_isset = YES;
}

- (BOOL) _genreIsSet {
  return ___genre_isset;
}

- (void) unset_genre {
  ___genre_isset = NO;
}

- (uint8_t) _commandClassId {
  return ___commandClassId;
}

- (void) set_commandClassId: (uint8_t) _commandClassId {
  ___commandClassId = _commandClassId;
  ___commandClassId_isset = YES;
}

- (BOOL) _commandClassIdIsSet {
  return ___commandClassId_isset;
}

- (void) unset_commandClassId {
  ___commandClassId_isset = NO;
}

- (uint8_t) _instance {
  return ___instance;
}

- (void) set_instance: (uint8_t) _instance {
  ___instance = _instance;
  ___instance_isset = YES;
}

- (BOOL) _instanceIsSet {
  return ___instance_isset;
}

- (void) unset_instance {
  ___instance_isset = NO;
}

- (uint8_t) _valueIndex {
  return ___valueIndex;
}

- (void) set_valueIndex: (uint8_t) _valueIndex {
  ___valueIndex = _valueIndex;
  ___valueIndex_isset = YES;
}

- (BOOL) _valueIndexIsSet {
  return ___valueIndex_isset;
}

- (void) unset_valueIndex {
  ___valueIndex_isset = NO;
}

- (int) _type {
  return ___type;
}

- (void) set_type: (int) _type {
  ___type = _type;
  ___type_isset = YES;
}

- (BOOL) _typeIsSet {
  return ___type_isset;
}

- (void) unset_type {
  ___type_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self set_homeId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self set_nodeId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self set_genre: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self set_commandClassId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self set_instance: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self set_valueIndex: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self set_type: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"RemoteValueID"];
  if (___homeId_isset) {
    [outProtocol writeFieldBeginWithName: @"_homeId" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: ___homeId];
    [outProtocol writeFieldEnd];
  }
  if (___nodeId_isset) {
    [outProtocol writeFieldBeginWithName: @"_nodeId" type: TType_BYTE fieldID: 2];
    [outProtocol writeByte: ___nodeId];
    [outProtocol writeFieldEnd];
  }
  if (___genre_isset) {
    [outProtocol writeFieldBeginWithName: @"_genre" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: ___genre];
    [outProtocol writeFieldEnd];
  }
  if (___commandClassId_isset) {
    [outProtocol writeFieldBeginWithName: @"_commandClassId" type: TType_BYTE fieldID: 4];
    [outProtocol writeByte: ___commandClassId];
    [outProtocol writeFieldEnd];
  }
  if (___instance_isset) {
    [outProtocol writeFieldBeginWithName: @"_instance" type: TType_BYTE fieldID: 5];
    [outProtocol writeByte: ___instance];
    [outProtocol writeFieldEnd];
  }
  if (___valueIndex_isset) {
    [outProtocol writeFieldBeginWithName: @"_valueIndex" type: TType_BYTE fieldID: 6];
    [outProtocol writeByte: ___valueIndex];
    [outProtocol writeFieldEnd];
  }
  if (___type_isset) {
    [outProtocol writeFieldBeginWithName: @"_type" type: TType_I32 fieldID: 7];
    [outProtocol writeI32: ___type];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RemoteValueID("];
  [ms appendString: @"_homeId:"];
  [ms appendFormat: @"%i", ___homeId];
  [ms appendString: @",_nodeId:"];
  [ms appendFormat: @"%i", ___nodeId];
  [ms appendString: @",_genre:"];
  [ms appendFormat: @"%i", ___genre];
  [ms appendString: @",_commandClassId:"];
  [ms appendFormat: @"%i", ___commandClassId];
  [ms appendString: @",_instance:"];
  [ms appendFormat: @"%i", ___instance];
  [ms appendString: @",_valueIndex:"];
  [ms appendFormat: @"%i", ___valueIndex];
  [ms appendString: @",_type:"];
  [ms appendFormat: @"%i", ___type];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation OpenZWaveDriverData

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithS_SOFCnt: (int32_t) s_SOFCnt s_ACKWaiting: (int32_t) s_ACKWaiting s_readAborts: (int32_t) s_readAborts s_badChecksum: (int32_t) s_badChecksum s_readCnt: (int32_t) s_readCnt s_writeCnt: (int32_t) s_writeCnt s_CANCnt: (int32_t) s_CANCnt s_NAKCnt: (int32_t) s_NAKCnt s_ACKCnt: (int32_t) s_ACKCnt s_OOFCnt: (int32_t) s_OOFCnt s_dropped: (int32_t) s_dropped s_retries: (int32_t) s_retries s_controllerReadCnt: (int32_t) s_controllerReadCnt s_controllerWriteCnt: (int32_t) s_controllerWriteCnt
{
  self = [super init];
  __s_SOFCnt = s_SOFCnt;
  __s_SOFCnt_isset = YES;
  __s_ACKWaiting = s_ACKWaiting;
  __s_ACKWaiting_isset = YES;
  __s_readAborts = s_readAborts;
  __s_readAborts_isset = YES;
  __s_badChecksum = s_badChecksum;
  __s_badChecksum_isset = YES;
  __s_readCnt = s_readCnt;
  __s_readCnt_isset = YES;
  __s_writeCnt = s_writeCnt;
  __s_writeCnt_isset = YES;
  __s_CANCnt = s_CANCnt;
  __s_CANCnt_isset = YES;
  __s_NAKCnt = s_NAKCnt;
  __s_NAKCnt_isset = YES;
  __s_ACKCnt = s_ACKCnt;
  __s_ACKCnt_isset = YES;
  __s_OOFCnt = s_OOFCnt;
  __s_OOFCnt_isset = YES;
  __s_dropped = s_dropped;
  __s_dropped_isset = YES;
  __s_retries = s_retries;
  __s_retries_isset = YES;
  __s_controllerReadCnt = s_controllerReadCnt;
  __s_controllerReadCnt_isset = YES;
  __s_controllerWriteCnt = s_controllerWriteCnt;
  __s_controllerWriteCnt_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"s_SOFCnt"])
  {
    __s_SOFCnt = [decoder decodeInt32ForKey: @"s_SOFCnt"];
    __s_SOFCnt_isset = YES;
  }
  if ([decoder containsValueForKey: @"s_ACKWaiting"])
  {
    __s_ACKWaiting = [decoder decodeInt32ForKey: @"s_ACKWaiting"];
    __s_ACKWaiting_isset = YES;
  }
  if ([decoder containsValueForKey: @"s_readAborts"])
  {
    __s_readAborts = [decoder decodeInt32ForKey: @"s_readAborts"];
    __s_readAborts_isset = YES;
  }
  if ([decoder containsValueForKey: @"s_badChecksum"])
  {
    __s_badChecksum = [decoder decodeInt32ForKey: @"s_badChecksum"];
    __s_badChecksum_isset = YES;
  }
  if ([decoder containsValueForKey: @"s_readCnt"])
  {
    __s_readCnt = [decoder decodeInt32ForKey: @"s_readCnt"];
    __s_readCnt_isset = YES;
  }
  if ([decoder containsValueForKey: @"s_writeCnt"])
  {
    __s_writeCnt = [decoder decodeInt32ForKey: @"s_writeCnt"];
    __s_writeCnt_isset = YES;
  }
  if ([decoder containsValueForKey: @"s_CANCnt"])
  {
    __s_CANCnt = [decoder decodeInt32ForKey: @"s_CANCnt"];
    __s_CANCnt_isset = YES;
  }
  if ([decoder containsValueForKey: @"s_NAKCnt"])
  {
    __s_NAKCnt = [decoder decodeInt32ForKey: @"s_NAKCnt"];
    __s_NAKCnt_isset = YES;
  }
  if ([decoder containsValueForKey: @"s_ACKCnt"])
  {
    __s_ACKCnt = [decoder decodeInt32ForKey: @"s_ACKCnt"];
    __s_ACKCnt_isset = YES;
  }
  if ([decoder containsValueForKey: @"s_OOFCnt"])
  {
    __s_OOFCnt = [decoder decodeInt32ForKey: @"s_OOFCnt"];
    __s_OOFCnt_isset = YES;
  }
  if ([decoder containsValueForKey: @"s_dropped"])
  {
    __s_dropped = [decoder decodeInt32ForKey: @"s_dropped"];
    __s_dropped_isset = YES;
  }
  if ([decoder containsValueForKey: @"s_retries"])
  {
    __s_retries = [decoder decodeInt32ForKey: @"s_retries"];
    __s_retries_isset = YES;
  }
  if ([decoder containsValueForKey: @"s_controllerReadCnt"])
  {
    __s_controllerReadCnt = [decoder decodeInt32ForKey: @"s_controllerReadCnt"];
    __s_controllerReadCnt_isset = YES;
  }
  if ([decoder containsValueForKey: @"s_controllerWriteCnt"])
  {
    __s_controllerWriteCnt = [decoder decodeInt32ForKey: @"s_controllerWriteCnt"];
    __s_controllerWriteCnt_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__s_SOFCnt_isset)
  {
    [encoder encodeInt32: __s_SOFCnt forKey: @"s_SOFCnt"];
  }
  if (__s_ACKWaiting_isset)
  {
    [encoder encodeInt32: __s_ACKWaiting forKey: @"s_ACKWaiting"];
  }
  if (__s_readAborts_isset)
  {
    [encoder encodeInt32: __s_readAborts forKey: @"s_readAborts"];
  }
  if (__s_badChecksum_isset)
  {
    [encoder encodeInt32: __s_badChecksum forKey: @"s_badChecksum"];
  }
  if (__s_readCnt_isset)
  {
    [encoder encodeInt32: __s_readCnt forKey: @"s_readCnt"];
  }
  if (__s_writeCnt_isset)
  {
    [encoder encodeInt32: __s_writeCnt forKey: @"s_writeCnt"];
  }
  if (__s_CANCnt_isset)
  {
    [encoder encodeInt32: __s_CANCnt forKey: @"s_CANCnt"];
  }
  if (__s_NAKCnt_isset)
  {
    [encoder encodeInt32: __s_NAKCnt forKey: @"s_NAKCnt"];
  }
  if (__s_ACKCnt_isset)
  {
    [encoder encodeInt32: __s_ACKCnt forKey: @"s_ACKCnt"];
  }
  if (__s_OOFCnt_isset)
  {
    [encoder encodeInt32: __s_OOFCnt forKey: @"s_OOFCnt"];
  }
  if (__s_dropped_isset)
  {
    [encoder encodeInt32: __s_dropped forKey: @"s_dropped"];
  }
  if (__s_retries_isset)
  {
    [encoder encodeInt32: __s_retries forKey: @"s_retries"];
  }
  if (__s_controllerReadCnt_isset)
  {
    [encoder encodeInt32: __s_controllerReadCnt forKey: @"s_controllerReadCnt"];
  }
  if (__s_controllerWriteCnt_isset)
  {
    [encoder encodeInt32: __s_controllerWriteCnt forKey: @"s_controllerWriteCnt"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (int32_t) s_SOFCnt {
  return __s_SOFCnt;
}

- (void) setS_SOFCnt: (int32_t) s_SOFCnt {
  __s_SOFCnt = s_SOFCnt;
  __s_SOFCnt_isset = YES;
}

- (BOOL) s_SOFCntIsSet {
  return __s_SOFCnt_isset;
}

- (void) unsetS_SOFCnt {
  __s_SOFCnt_isset = NO;
}

- (int32_t) s_ACKWaiting {
  return __s_ACKWaiting;
}

- (void) setS_ACKWaiting: (int32_t) s_ACKWaiting {
  __s_ACKWaiting = s_ACKWaiting;
  __s_ACKWaiting_isset = YES;
}

- (BOOL) s_ACKWaitingIsSet {
  return __s_ACKWaiting_isset;
}

- (void) unsetS_ACKWaiting {
  __s_ACKWaiting_isset = NO;
}

- (int32_t) s_readAborts {
  return __s_readAborts;
}

- (void) setS_readAborts: (int32_t) s_readAborts {
  __s_readAborts = s_readAborts;
  __s_readAborts_isset = YES;
}

- (BOOL) s_readAbortsIsSet {
  return __s_readAborts_isset;
}

- (void) unsetS_readAborts {
  __s_readAborts_isset = NO;
}

- (int32_t) s_badChecksum {
  return __s_badChecksum;
}

- (void) setS_badChecksum: (int32_t) s_badChecksum {
  __s_badChecksum = s_badChecksum;
  __s_badChecksum_isset = YES;
}

- (BOOL) s_badChecksumIsSet {
  return __s_badChecksum_isset;
}

- (void) unsetS_badChecksum {
  __s_badChecksum_isset = NO;
}

- (int32_t) s_readCnt {
  return __s_readCnt;
}

- (void) setS_readCnt: (int32_t) s_readCnt {
  __s_readCnt = s_readCnt;
  __s_readCnt_isset = YES;
}

- (BOOL) s_readCntIsSet {
  return __s_readCnt_isset;
}

- (void) unsetS_readCnt {
  __s_readCnt_isset = NO;
}

- (int32_t) s_writeCnt {
  return __s_writeCnt;
}

- (void) setS_writeCnt: (int32_t) s_writeCnt {
  __s_writeCnt = s_writeCnt;
  __s_writeCnt_isset = YES;
}

- (BOOL) s_writeCntIsSet {
  return __s_writeCnt_isset;
}

- (void) unsetS_writeCnt {
  __s_writeCnt_isset = NO;
}

- (int32_t) s_CANCnt {
  return __s_CANCnt;
}

- (void) setS_CANCnt: (int32_t) s_CANCnt {
  __s_CANCnt = s_CANCnt;
  __s_CANCnt_isset = YES;
}

- (BOOL) s_CANCntIsSet {
  return __s_CANCnt_isset;
}

- (void) unsetS_CANCnt {
  __s_CANCnt_isset = NO;
}

- (int32_t) s_NAKCnt {
  return __s_NAKCnt;
}

- (void) setS_NAKCnt: (int32_t) s_NAKCnt {
  __s_NAKCnt = s_NAKCnt;
  __s_NAKCnt_isset = YES;
}

- (BOOL) s_NAKCntIsSet {
  return __s_NAKCnt_isset;
}

- (void) unsetS_NAKCnt {
  __s_NAKCnt_isset = NO;
}

- (int32_t) s_ACKCnt {
  return __s_ACKCnt;
}

- (void) setS_ACKCnt: (int32_t) s_ACKCnt {
  __s_ACKCnt = s_ACKCnt;
  __s_ACKCnt_isset = YES;
}

- (BOOL) s_ACKCntIsSet {
  return __s_ACKCnt_isset;
}

- (void) unsetS_ACKCnt {
  __s_ACKCnt_isset = NO;
}

- (int32_t) s_OOFCnt {
  return __s_OOFCnt;
}

- (void) setS_OOFCnt: (int32_t) s_OOFCnt {
  __s_OOFCnt = s_OOFCnt;
  __s_OOFCnt_isset = YES;
}

- (BOOL) s_OOFCntIsSet {
  return __s_OOFCnt_isset;
}

- (void) unsetS_OOFCnt {
  __s_OOFCnt_isset = NO;
}

- (int32_t) s_dropped {
  return __s_dropped;
}

- (void) setS_dropped: (int32_t) s_dropped {
  __s_dropped = s_dropped;
  __s_dropped_isset = YES;
}

- (BOOL) s_droppedIsSet {
  return __s_dropped_isset;
}

- (void) unsetS_dropped {
  __s_dropped_isset = NO;
}

- (int32_t) s_retries {
  return __s_retries;
}

- (void) setS_retries: (int32_t) s_retries {
  __s_retries = s_retries;
  __s_retries_isset = YES;
}

- (BOOL) s_retriesIsSet {
  return __s_retries_isset;
}

- (void) unsetS_retries {
  __s_retries_isset = NO;
}

- (int32_t) s_controllerReadCnt {
  return __s_controllerReadCnt;
}

- (void) setS_controllerReadCnt: (int32_t) s_controllerReadCnt {
  __s_controllerReadCnt = s_controllerReadCnt;
  __s_controllerReadCnt_isset = YES;
}

- (BOOL) s_controllerReadCntIsSet {
  return __s_controllerReadCnt_isset;
}

- (void) unsetS_controllerReadCnt {
  __s_controllerReadCnt_isset = NO;
}

- (int32_t) s_controllerWriteCnt {
  return __s_controllerWriteCnt;
}

- (void) setS_controllerWriteCnt: (int32_t) s_controllerWriteCnt {
  __s_controllerWriteCnt = s_controllerWriteCnt;
  __s_controllerWriteCnt_isset = YES;
}

- (BOOL) s_controllerWriteCntIsSet {
  return __s_controllerWriteCnt_isset;
}

- (void) unsetS_controllerWriteCnt {
  __s_controllerWriteCnt_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setS_SOFCnt: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setS_ACKWaiting: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setS_readAborts: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setS_badChecksum: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setS_readCnt: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setS_writeCnt: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setS_CANCnt: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setS_NAKCnt: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setS_ACKCnt: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setS_OOFCnt: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setS_dropped: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 12:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setS_retries: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 13:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setS_controllerReadCnt: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 14:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setS_controllerWriteCnt: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"DriverData"];
  if (__s_SOFCnt_isset) {
    [outProtocol writeFieldBeginWithName: @"s_SOFCnt" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __s_SOFCnt];
    [outProtocol writeFieldEnd];
  }
  if (__s_ACKWaiting_isset) {
    [outProtocol writeFieldBeginWithName: @"s_ACKWaiting" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __s_ACKWaiting];
    [outProtocol writeFieldEnd];
  }
  if (__s_readAborts_isset) {
    [outProtocol writeFieldBeginWithName: @"s_readAborts" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __s_readAborts];
    [outProtocol writeFieldEnd];
  }
  if (__s_badChecksum_isset) {
    [outProtocol writeFieldBeginWithName: @"s_badChecksum" type: TType_I32 fieldID: 4];
    [outProtocol writeI32: __s_badChecksum];
    [outProtocol writeFieldEnd];
  }
  if (__s_readCnt_isset) {
    [outProtocol writeFieldBeginWithName: @"s_readCnt" type: TType_I32 fieldID: 5];
    [outProtocol writeI32: __s_readCnt];
    [outProtocol writeFieldEnd];
  }
  if (__s_writeCnt_isset) {
    [outProtocol writeFieldBeginWithName: @"s_writeCnt" type: TType_I32 fieldID: 6];
    [outProtocol writeI32: __s_writeCnt];
    [outProtocol writeFieldEnd];
  }
  if (__s_CANCnt_isset) {
    [outProtocol writeFieldBeginWithName: @"s_CANCnt" type: TType_I32 fieldID: 7];
    [outProtocol writeI32: __s_CANCnt];
    [outProtocol writeFieldEnd];
  }
  if (__s_NAKCnt_isset) {
    [outProtocol writeFieldBeginWithName: @"s_NAKCnt" type: TType_I32 fieldID: 8];
    [outProtocol writeI32: __s_NAKCnt];
    [outProtocol writeFieldEnd];
  }
  if (__s_ACKCnt_isset) {
    [outProtocol writeFieldBeginWithName: @"s_ACKCnt" type: TType_I32 fieldID: 9];
    [outProtocol writeI32: __s_ACKCnt];
    [outProtocol writeFieldEnd];
  }
  if (__s_OOFCnt_isset) {
    [outProtocol writeFieldBeginWithName: @"s_OOFCnt" type: TType_I32 fieldID: 10];
    [outProtocol writeI32: __s_OOFCnt];
    [outProtocol writeFieldEnd];
  }
  if (__s_dropped_isset) {
    [outProtocol writeFieldBeginWithName: @"s_dropped" type: TType_I32 fieldID: 11];
    [outProtocol writeI32: __s_dropped];
    [outProtocol writeFieldEnd];
  }
  if (__s_retries_isset) {
    [outProtocol writeFieldBeginWithName: @"s_retries" type: TType_I32 fieldID: 12];
    [outProtocol writeI32: __s_retries];
    [outProtocol writeFieldEnd];
  }
  if (__s_controllerReadCnt_isset) {
    [outProtocol writeFieldBeginWithName: @"s_controllerReadCnt" type: TType_I32 fieldID: 13];
    [outProtocol writeI32: __s_controllerReadCnt];
    [outProtocol writeFieldEnd];
  }
  if (__s_controllerWriteCnt_isset) {
    [outProtocol writeFieldBeginWithName: @"s_controllerWriteCnt" type: TType_I32 fieldID: 14];
    [outProtocol writeI32: __s_controllerWriteCnt];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"DriverData("];
  [ms appendString: @"s_SOFCnt:"];
  [ms appendFormat: @"%i", __s_SOFCnt];
  [ms appendString: @",s_ACKWaiting:"];
  [ms appendFormat: @"%i", __s_ACKWaiting];
  [ms appendString: @",s_readAborts:"];
  [ms appendFormat: @"%i", __s_readAborts];
  [ms appendString: @",s_badChecksum:"];
  [ms appendFormat: @"%i", __s_badChecksum];
  [ms appendString: @",s_readCnt:"];
  [ms appendFormat: @"%i", __s_readCnt];
  [ms appendString: @",s_writeCnt:"];
  [ms appendFormat: @"%i", __s_writeCnt];
  [ms appendString: @",s_CANCnt:"];
  [ms appendFormat: @"%i", __s_CANCnt];
  [ms appendString: @",s_NAKCnt:"];
  [ms appendFormat: @"%i", __s_NAKCnt];
  [ms appendString: @",s_ACKCnt:"];
  [ms appendFormat: @"%i", __s_ACKCnt];
  [ms appendString: @",s_OOFCnt:"];
  [ms appendFormat: @"%i", __s_OOFCnt];
  [ms appendString: @",s_dropped:"];
  [ms appendFormat: @"%i", __s_dropped];
  [ms appendString: @",s_retries:"];
  [ms appendFormat: @"%i", __s_retries];
  [ms appendString: @",s_controllerReadCnt:"];
  [ms appendFormat: @"%i", __s_controllerReadCnt];
  [ms appendString: @",s_controllerWriteCnt:"];
  [ms appendFormat: @"%i", __s_controllerWriteCnt];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation OpenZWaveGetDriverStatisticsReturnStruct

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_data: (OpenZWaveDriverData *) _data
{
  self = [super init];
  ___data = [_data retain_stub];
  ___data_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_data"])
  {
    ___data = [[decoder decodeObjectForKey: @"_data"] retain_stub];
    ___data_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___data_isset)
  {
    [encoder encodeObject: ___data forKey: @"_data"];
  }
}

- (void) dealloc
{
  [___data release_stub];
  [super dealloc_stub];
}

- (OpenZWaveDriverData *) _data {
  return [[___data retain_stub] autorelease_stub];
}

- (void) set_data: (OpenZWaveDriverData *) _data {
  [_data retain_stub];
  [___data release_stub];
  ___data = _data;
  ___data_isset = YES;
}

- (BOOL) _dataIsSet {
  return ___data_isset;
}

- (void) unset_data {
  [___data release_stub];
  ___data = nil;
  ___data_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          OpenZWaveDriverData *fieldValue = [[OpenZWaveDriverData alloc] init];
          [fieldValue read: inProtocol];
          [self set_data: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetDriverStatisticsReturnStruct"];
  if (___data_isset) {
    if (___data != nil) {
      [outProtocol writeFieldBeginWithName: @"_data" type: TType_STRUCT fieldID: 1];
      [___data write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetDriverStatisticsReturnStruct("];
  [ms appendString: @"_data:"];
  [ms appendFormat: @"%@", ___data];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation OpenZWaveGetSwitchPointReturnStruct

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRetval: (BOOL) retval o_hours: (uint8_t) o_hours o_minutes: (uint8_t) o_minutes o_setback: (uint8_t) o_setback
{
  self = [super init];
  __retval = retval;
  __retval_isset = YES;
  __o_hours = o_hours;
  __o_hours_isset = YES;
  __o_minutes = o_minutes;
  __o_minutes_isset = YES;
  __o_setback = o_setback;
  __o_setback_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"retval"])
  {
    __retval = [decoder decodeBoolForKey: @"retval"];
    __retval_isset = YES;
  }
  if ([decoder containsValueForKey: @"o_hours"])
  {
    __o_hours = [decoder decodeIntForKey: @"o_hours"];
    __o_hours_isset = YES;
  }
  if ([decoder containsValueForKey: @"o_minutes"])
  {
    __o_minutes = [decoder decodeIntForKey: @"o_minutes"];
    __o_minutes_isset = YES;
  }
  if ([decoder containsValueForKey: @"o_setback"])
  {
    __o_setback = [decoder decodeIntForKey: @"o_setback"];
    __o_setback_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__retval_isset)
  {
    [encoder encodeBool: __retval forKey: @"retval"];
  }
  if (__o_hours_isset)
  {
    [encoder encodeInt: __o_hours forKey: @"o_hours"];
  }
  if (__o_minutes_isset)
  {
    [encoder encodeInt: __o_minutes forKey: @"o_minutes"];
  }
  if (__o_setback_isset)
  {
    [encoder encodeInt: __o_setback forKey: @"o_setback"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (BOOL) retval {
  return __retval;
}

- (void) setRetval: (BOOL) retval {
  __retval = retval;
  __retval_isset = YES;
}

- (BOOL) retvalIsSet {
  return __retval_isset;
}

- (void) unsetRetval {
  __retval_isset = NO;
}

- (uint8_t) o_hours {
  return __o_hours;
}

- (void) setO_hours: (uint8_t) o_hours {
  __o_hours = o_hours;
  __o_hours_isset = YES;
}

- (BOOL) o_hoursIsSet {
  return __o_hours_isset;
}

- (void) unsetO_hours {
  __o_hours_isset = NO;
}

- (uint8_t) o_minutes {
  return __o_minutes;
}

- (void) setO_minutes: (uint8_t) o_minutes {
  __o_minutes = o_minutes;
  __o_minutes_isset = YES;
}

- (BOOL) o_minutesIsSet {
  return __o_minutes_isset;
}

- (void) unsetO_minutes {
  __o_minutes_isset = NO;
}

- (uint8_t) o_setback {
  return __o_setback;
}

- (void) setO_setback: (uint8_t) o_setback {
  __o_setback = o_setback;
  __o_setback_isset = YES;
}

- (BOOL) o_setbackIsSet {
  return __o_setback_isset;
}

- (void) unsetO_setback {
  __o_setback_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setRetval: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self setO_hours: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self setO_minutes: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self setO_setback: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetSwitchPointReturnStruct"];
  if (__retval_isset) {
    [outProtocol writeFieldBeginWithName: @"retval" type: TType_BOOL fieldID: 1];
    [outProtocol writeBool: __retval];
    [outProtocol writeFieldEnd];
  }
  if (__o_hours_isset) {
    [outProtocol writeFieldBeginWithName: @"o_hours" type: TType_BYTE fieldID: 2];
    [outProtocol writeByte: __o_hours];
    [outProtocol writeFieldEnd];
  }
  if (__o_minutes_isset) {
    [outProtocol writeFieldBeginWithName: @"o_minutes" type: TType_BYTE fieldID: 3];
    [outProtocol writeByte: __o_minutes];
    [outProtocol writeFieldEnd];
  }
  if (__o_setback_isset) {
    [outProtocol writeFieldBeginWithName: @"o_setback" type: TType_BYTE fieldID: 4];
    [outProtocol writeByte: __o_setback];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetSwitchPointReturnStruct("];
  [ms appendString: @"retval:"];
  [ms appendFormat: @"%i", __retval];
  [ms appendString: @",o_hours:"];
  [ms appendFormat: @"%i", __o_hours];
  [ms appendString: @",o_minutes:"];
  [ms appendFormat: @"%i", __o_minutes];
  [ms appendString: @",o_setback:"];
  [ms appendFormat: @"%i", __o_setback];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation OpenZWaveBool_Bool

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRetval: (BOOL) retval o_value: (BOOL) o_value
{
  self = [super init];
  __retval = retval;
  __retval_isset = YES;
  __o_value = o_value;
  __o_value_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"retval"])
  {
    __retval = [decoder decodeBoolForKey: @"retval"];
    __retval_isset = YES;
  }
  if ([decoder containsValueForKey: @"o_value"])
  {
    __o_value = [decoder decodeBoolForKey: @"o_value"];
    __o_value_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__retval_isset)
  {
    [encoder encodeBool: __retval forKey: @"retval"];
  }
  if (__o_value_isset)
  {
    [encoder encodeBool: __o_value forKey: @"o_value"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (BOOL) retval {
  return __retval;
}

- (void) setRetval: (BOOL) retval {
  __retval = retval;
  __retval_isset = YES;
}

- (BOOL) retvalIsSet {
  return __retval_isset;
}

- (void) unsetRetval {
  __retval_isset = NO;
}

- (BOOL) o_value {
  return __o_value;
}

- (void) setO_value: (BOOL) o_value {
  __o_value = o_value;
  __o_value_isset = YES;
}

- (BOOL) o_valueIsSet {
  return __o_value_isset;
}

- (void) unsetO_value {
  __o_value_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setRetval: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setO_value: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Bool_Bool"];
  if (__retval_isset) {
    [outProtocol writeFieldBeginWithName: @"retval" type: TType_BOOL fieldID: 1];
    [outProtocol writeBool: __retval];
    [outProtocol writeFieldEnd];
  }
  if (__o_value_isset) {
    [outProtocol writeFieldBeginWithName: @"o_value" type: TType_BOOL fieldID: 2];
    [outProtocol writeBool: __o_value];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Bool_Bool("];
  [ms appendString: @"retval:"];
  [ms appendFormat: @"%i", __retval];
  [ms appendString: @",o_value:"];
  [ms appendFormat: @"%i", __o_value];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation OpenZWaveBool_UInt8

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRetval: (BOOL) retval o_value: (uint8_t) o_value
{
  self = [super init];
  __retval = retval;
  __retval_isset = YES;
  __o_value = o_value;
  __o_value_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"retval"])
  {
    __retval = [decoder decodeBoolForKey: @"retval"];
    __retval_isset = YES;
  }
  if ([decoder containsValueForKey: @"o_value"])
  {
    __o_value = [decoder decodeIntForKey: @"o_value"];
    __o_value_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__retval_isset)
  {
    [encoder encodeBool: __retval forKey: @"retval"];
  }
  if (__o_value_isset)
  {
    [encoder encodeInt: __o_value forKey: @"o_value"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (BOOL) retval {
  return __retval;
}

- (void) setRetval: (BOOL) retval {
  __retval = retval;
  __retval_isset = YES;
}

- (BOOL) retvalIsSet {
  return __retval_isset;
}

- (void) unsetRetval {
  __retval_isset = NO;
}

- (uint8_t) o_value {
  return __o_value;
}

- (void) setO_value: (uint8_t) o_value {
  __o_value = o_value;
  __o_value_isset = YES;
}

- (BOOL) o_valueIsSet {
  return __o_value_isset;
}

- (void) unsetO_value {
  __o_value_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setRetval: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self setO_value: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Bool_UInt8"];
  if (__retval_isset) {
    [outProtocol writeFieldBeginWithName: @"retval" type: TType_BOOL fieldID: 1];
    [outProtocol writeBool: __retval];
    [outProtocol writeFieldEnd];
  }
  if (__o_value_isset) {
    [outProtocol writeFieldBeginWithName: @"o_value" type: TType_BYTE fieldID: 2];
    [outProtocol writeByte: __o_value];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Bool_UInt8("];
  [ms appendString: @"retval:"];
  [ms appendFormat: @"%i", __retval];
  [ms appendString: @",o_value:"];
  [ms appendFormat: @"%i", __o_value];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation OpenZWaveBool_Float

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRetval: (BOOL) retval o_value: (double) o_value
{
  self = [super init];
  __retval = retval;
  __retval_isset = YES;
  __o_value = o_value;
  __o_value_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"retval"])
  {
    __retval = [decoder decodeBoolForKey: @"retval"];
    __retval_isset = YES;
  }
  if ([decoder containsValueForKey: @"o_value"])
  {
    __o_value = [decoder decodeDoubleForKey: @"o_value"];
    __o_value_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__retval_isset)
  {
    [encoder encodeBool: __retval forKey: @"retval"];
  }
  if (__o_value_isset)
  {
    [encoder encodeDouble: __o_value forKey: @"o_value"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (BOOL) retval {
  return __retval;
}

- (void) setRetval: (BOOL) retval {
  __retval = retval;
  __retval_isset = YES;
}

- (BOOL) retvalIsSet {
  return __retval_isset;
}

- (void) unsetRetval {
  __retval_isset = NO;
}

- (double) o_value {
  return __o_value;
}

- (void) setO_value: (double) o_value {
  __o_value = o_value;
  __o_value_isset = YES;
}

- (BOOL) o_valueIsSet {
  return __o_value_isset;
}

- (void) unsetO_value {
  __o_value_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setRetval: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setO_value: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Bool_Float"];
  if (__retval_isset) {
    [outProtocol writeFieldBeginWithName: @"retval" type: TType_BOOL fieldID: 1];
    [outProtocol writeBool: __retval];
    [outProtocol writeFieldEnd];
  }
  if (__o_value_isset) {
    [outProtocol writeFieldBeginWithName: @"o_value" type: TType_DOUBLE fieldID: 2];
    [outProtocol writeDouble: __o_value];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Bool_Float("];
  [ms appendString: @"retval:"];
  [ms appendFormat: @"%i", __retval];
  [ms appendString: @",o_value:"];
  [ms appendFormat: @"%f", __o_value];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation OpenZWaveBool_Int

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRetval: (BOOL) retval o_value: (int32_t) o_value
{
  self = [super init];
  __retval = retval;
  __retval_isset = YES;
  __o_value = o_value;
  __o_value_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"retval"])
  {
    __retval = [decoder decodeBoolForKey: @"retval"];
    __retval_isset = YES;
  }
  if ([decoder containsValueForKey: @"o_value"])
  {
    __o_value = [decoder decodeInt32ForKey: @"o_value"];
    __o_value_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__retval_isset)
  {
    [encoder encodeBool: __retval forKey: @"retval"];
  }
  if (__o_value_isset)
  {
    [encoder encodeInt32: __o_value forKey: @"o_value"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (BOOL) retval {
  return __retval;
}

- (void) setRetval: (BOOL) retval {
  __retval = retval;
  __retval_isset = YES;
}

- (BOOL) retvalIsSet {
  return __retval_isset;
}

- (void) unsetRetval {
  __retval_isset = NO;
}

- (int32_t) o_value {
  return __o_value;
}

- (void) setO_value: (int32_t) o_value {
  __o_value = o_value;
  __o_value_isset = YES;
}

- (BOOL) o_valueIsSet {
  return __o_value_isset;
}

- (void) unsetO_value {
  __o_value_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setRetval: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setO_value: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Bool_Int"];
  if (__retval_isset) {
    [outProtocol writeFieldBeginWithName: @"retval" type: TType_BOOL fieldID: 1];
    [outProtocol writeBool: __retval];
    [outProtocol writeFieldEnd];
  }
  if (__o_value_isset) {
    [outProtocol writeFieldBeginWithName: @"o_value" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __o_value];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Bool_Int("];
  [ms appendString: @"retval:"];
  [ms appendFormat: @"%i", __retval];
  [ms appendString: @",o_value:"];
  [ms appendFormat: @"%i", __o_value];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation OpenZWaveBool_Int16

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRetval: (BOOL) retval o_value: (int16_t) o_value
{
  self = [super init];
  __retval = retval;
  __retval_isset = YES;
  __o_value = o_value;
  __o_value_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"retval"])
  {
    __retval = [decoder decodeBoolForKey: @"retval"];
    __retval_isset = YES;
  }
  if ([decoder containsValueForKey: @"o_value"])
  {
    __o_value = [decoder decodeIntForKey: @"o_value"];
    __o_value_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__retval_isset)
  {
    [encoder encodeBool: __retval forKey: @"retval"];
  }
  if (__o_value_isset)
  {
    [encoder encodeInt: __o_value forKey: @"o_value"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (BOOL) retval {
  return __retval;
}

- (void) setRetval: (BOOL) retval {
  __retval = retval;
  __retval_isset = YES;
}

- (BOOL) retvalIsSet {
  return __retval_isset;
}

- (void) unsetRetval {
  __retval_isset = NO;
}

- (int16_t) o_value {
  return __o_value;
}

- (void) setO_value: (int16_t) o_value {
  __o_value = o_value;
  __o_value_isset = YES;
}

- (BOOL) o_valueIsSet {
  return __o_value_isset;
}

- (void) unsetO_value {
  __o_value_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setRetval: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I16) {
          int16_t fieldValue = [inProtocol readI16];
          [self setO_value: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Bool_Int16"];
  if (__retval_isset) {
    [outProtocol writeFieldBeginWithName: @"retval" type: TType_BOOL fieldID: 1];
    [outProtocol writeBool: __retval];
    [outProtocol writeFieldEnd];
  }
  if (__o_value_isset) {
    [outProtocol writeFieldBeginWithName: @"o_value" type: TType_I16 fieldID: 2];
    [outProtocol writeI16: __o_value];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Bool_Int16("];
  [ms appendString: @"retval:"];
  [ms appendFormat: @"%i", __retval];
  [ms appendString: @",o_value:"];
  [ms appendFormat: @"%hi", __o_value];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation OpenZWaveBool_String

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRetval: (BOOL) retval o_value: (NSString *) o_value
{
  self = [super init];
  __retval = retval;
  __retval_isset = YES;
  __o_value = [o_value retain_stub];
  __o_value_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"retval"])
  {
    __retval = [decoder decodeBoolForKey: @"retval"];
    __retval_isset = YES;
  }
  if ([decoder containsValueForKey: @"o_value"])
  {
    __o_value = [[decoder decodeObjectForKey: @"o_value"] retain_stub];
    __o_value_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__retval_isset)
  {
    [encoder encodeBool: __retval forKey: @"retval"];
  }
  if (__o_value_isset)
  {
    [encoder encodeObject: __o_value forKey: @"o_value"];
  }
}

- (void) dealloc
{
  [__o_value release_stub];
  [super dealloc_stub];
}

- (BOOL) retval {
  return __retval;
}

- (void) setRetval: (BOOL) retval {
  __retval = retval;
  __retval_isset = YES;
}

- (BOOL) retvalIsSet {
  return __retval_isset;
}

- (void) unsetRetval {
  __retval_isset = NO;
}

- (NSString *) o_value {
  return [[__o_value retain_stub] autorelease_stub];
}

- (void) setO_value: (NSString *) o_value {
  [o_value retain_stub];
  [__o_value release_stub];
  __o_value = o_value;
  __o_value_isset = YES;
}

- (BOOL) o_valueIsSet {
  return __o_value_isset;
}

- (void) unsetO_value {
  [__o_value release_stub];
  __o_value = nil;
  __o_value_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setRetval: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setO_value: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Bool_String"];
  if (__retval_isset) {
    [outProtocol writeFieldBeginWithName: @"retval" type: TType_BOOL fieldID: 1];
    [outProtocol writeBool: __retval];
    [outProtocol writeFieldEnd];
  }
  if (__o_value_isset) {
    if (__o_value != nil) {
      [outProtocol writeFieldBeginWithName: @"o_value" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __o_value];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Bool_String("];
  [ms appendString: @"retval:"];
  [ms appendFormat: @"%i", __retval];
  [ms appendString: @",o_value:"];
  [ms appendFormat: @"\"%@\"", __o_value];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation OpenZWaveBool_ListString

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRetval: (BOOL) retval o_value: (NSMutableArray *) o_value
{
  self = [super init];
  __retval = retval;
  __retval_isset = YES;
  __o_value = [o_value retain_stub];
  __o_value_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"retval"])
  {
    __retval = [decoder decodeBoolForKey: @"retval"];
    __retval_isset = YES;
  }
  if ([decoder containsValueForKey: @"o_value"])
  {
    __o_value = [[decoder decodeObjectForKey: @"o_value"] retain_stub];
    __o_value_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__retval_isset)
  {
    [encoder encodeBool: __retval forKey: @"retval"];
  }
  if (__o_value_isset)
  {
    [encoder encodeObject: __o_value forKey: @"o_value"];
  }
}

- (void) dealloc
{
  [__o_value release_stub];
  [super dealloc_stub];
}

- (BOOL) retval {
  return __retval;
}

- (void) setRetval: (BOOL) retval {
  __retval = retval;
  __retval_isset = YES;
}

- (BOOL) retvalIsSet {
  return __retval_isset;
}

- (void) unsetRetval {
  __retval_isset = NO;
}

- (NSMutableArray *) o_value {
  return [[__o_value retain_stub] autorelease_stub];
}

- (void) setO_value: (NSMutableArray *) o_value {
  [o_value retain_stub];
  [__o_value release_stub];
  __o_value = o_value;
  __o_value_isset = YES;
}

- (BOOL) o_valueIsSet {
  return __o_value_isset;
}

- (void) unsetO_value {
  [__o_value release_stub];
  __o_value = nil;
  __o_value_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setRetval: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size0;
          [inProtocol readListBeginReturningElementType: NULL size: &_size0];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size0];
          int _i1;
          for (_i1 = 0; _i1 < _size0; ++_i1)
          {
            NSString * _elem2 = [inProtocol readString];
            [fieldValue addObject: _elem2];
          }
          [inProtocol readListEnd];
          [self setO_value: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Bool_ListString"];
  if (__retval_isset) {
    [outProtocol writeFieldBeginWithName: @"retval" type: TType_BOOL fieldID: 1];
    [outProtocol writeBool: __retval];
    [outProtocol writeFieldEnd];
  }
  if (__o_value_isset) {
    if (__o_value != nil) {
      [outProtocol writeFieldBeginWithName: @"o_value" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [__o_value count]];
        int i4;
        for (i4 = 0; i4 < [__o_value count]; i4++)
        {
          [outProtocol writeString: [__o_value objectAtIndex: i4]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Bool_ListString("];
  [ms appendString: @"retval:"];
  [ms appendFormat: @"%i", __retval];
  [ms appendString: @",o_value:"];
  [ms appendFormat: @"%@", __o_value];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation OpenZWaveUInt32_ListByte

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRetval: (int32_t) retval _nodeNeighbors: (NSMutableArray *) _nodeNeighbors
{
  self = [super init];
  __retval = retval;
  __retval_isset = YES;
  ___nodeNeighbors = [_nodeNeighbors retain_stub];
  ___nodeNeighbors_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"retval"])
  {
    __retval = [decoder decodeInt32ForKey: @"retval"];
    __retval_isset = YES;
  }
  if ([decoder containsValueForKey: @"_nodeNeighbors"])
  {
    ___nodeNeighbors = [[decoder decodeObjectForKey: @"_nodeNeighbors"] retain_stub];
    ___nodeNeighbors_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__retval_isset)
  {
    [encoder encodeInt32: __retval forKey: @"retval"];
  }
  if (___nodeNeighbors_isset)
  {
    [encoder encodeObject: ___nodeNeighbors forKey: @"_nodeNeighbors"];
  }
}

- (void) dealloc
{
  [___nodeNeighbors release_stub];
  [super dealloc_stub];
}

- (int32_t) retval {
  return __retval;
}

- (void) setRetval: (int32_t) retval {
  __retval = retval;
  __retval_isset = YES;
}

- (BOOL) retvalIsSet {
  return __retval_isset;
}

- (void) unsetRetval {
  __retval_isset = NO;
}

- (NSMutableArray *) _nodeNeighbors {
  return [[___nodeNeighbors retain_stub] autorelease_stub];
}

- (void) set_nodeNeighbors: (NSMutableArray *) _nodeNeighbors {
  [_nodeNeighbors retain_stub];
  [___nodeNeighbors release_stub];
  ___nodeNeighbors = _nodeNeighbors;
  ___nodeNeighbors_isset = YES;
}

- (BOOL) _nodeNeighborsIsSet {
  return ___nodeNeighbors_isset;
}

- (void) unset_nodeNeighbors {
  [___nodeNeighbors release_stub];
  ___nodeNeighbors = nil;
  ___nodeNeighbors_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setRetval: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size5;
          [inProtocol readListBeginReturningElementType: NULL size: &_size5];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size5];
          int _i6;
          for (_i6 = 0; _i6 < _size5; ++_i6)
          {
            uint8_t _elem7 = [inProtocol readByte];
            [fieldValue addObject: [NSNumber numberWithUnsignedChar: _elem7]];
          }
          [inProtocol readListEnd];
          [self set_nodeNeighbors: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"UInt32_ListByte"];
  if (__retval_isset) {
    [outProtocol writeFieldBeginWithName: @"retval" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __retval];
    [outProtocol writeFieldEnd];
  }
  if (___nodeNeighbors_isset) {
    if (___nodeNeighbors != nil) {
      [outProtocol writeFieldBeginWithName: @"_nodeNeighbors" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_BYTE size: [___nodeNeighbors count]];
        int i9;
        for (i9 = 0; i9 < [___nodeNeighbors count]; i9++)
        {
          [outProtocol writeByte: [[___nodeNeighbors objectAtIndex: i9] unsignedCharValue]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"UInt32_ListByte("];
  [ms appendString: @"retval:"];
  [ms appendFormat: @"%i", __retval];
  [ms appendString: @",_nodeNeighbors:"];
  [ms appendFormat: @"%@", ___nodeNeighbors];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation OpenZWaveBool_GetNodeClassInformation

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRetval: (BOOL) retval _className: (NSString *) _className _classVersion: (uint8_t) _classVersion
{
  self = [super init];
  __retval = retval;
  __retval_isset = YES;
  ___className = [_className retain_stub];
  ___className_isset = YES;
  ___classVersion = _classVersion;
  ___classVersion_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"retval"])
  {
    __retval = [decoder decodeBoolForKey: @"retval"];
    __retval_isset = YES;
  }
  if ([decoder containsValueForKey: @"_className"])
  {
    ___className = [[decoder decodeObjectForKey: @"_className"] retain_stub];
    ___className_isset = YES;
  }
  if ([decoder containsValueForKey: @"_classVersion"])
  {
    ___classVersion = [decoder decodeIntForKey: @"_classVersion"];
    ___classVersion_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__retval_isset)
  {
    [encoder encodeBool: __retval forKey: @"retval"];
  }
  if (___className_isset)
  {
    [encoder encodeObject: ___className forKey: @"_className"];
  }
  if (___classVersion_isset)
  {
    [encoder encodeInt: ___classVersion forKey: @"_classVersion"];
  }
}

- (void) dealloc
{
  [___className release_stub];
  [super dealloc_stub];
}

- (BOOL) retval {
  return __retval;
}

- (void) setRetval: (BOOL) retval {
  __retval = retval;
  __retval_isset = YES;
}

- (BOOL) retvalIsSet {
  return __retval_isset;
}

- (void) unsetRetval {
  __retval_isset = NO;
}

- (NSString *) _className {
  return [[___className retain_stub] autorelease_stub];
}

- (void) set_className: (NSString *) _className {
  [_className retain_stub];
  [___className release_stub];
  ___className = _className;
  ___className_isset = YES;
}

- (BOOL) _classNameIsSet {
  return ___className_isset;
}

- (void) unset_className {
  [___className release_stub];
  ___className = nil;
  ___className_isset = NO;
}

- (uint8_t) _classVersion {
  return ___classVersion;
}

- (void) set_classVersion: (uint8_t) _classVersion {
  ___classVersion = _classVersion;
  ___classVersion_isset = YES;
}

- (BOOL) _classVersionIsSet {
  return ___classVersion_isset;
}

- (void) unset_classVersion {
  ___classVersion_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setRetval: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self set_className: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self set_classVersion: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Bool_GetNodeClassInformation"];
  if (__retval_isset) {
    [outProtocol writeFieldBeginWithName: @"retval" type: TType_BOOL fieldID: 1];
    [outProtocol writeBool: __retval];
    [outProtocol writeFieldEnd];
  }
  if (___className_isset) {
    if (___className != nil) {
      [outProtocol writeFieldBeginWithName: @"_className" type: TType_STRING fieldID: 2];
      [outProtocol writeString: ___className];
      [outProtocol writeFieldEnd];
    }
  }
  if (___classVersion_isset) {
    [outProtocol writeFieldBeginWithName: @"_classVersion" type: TType_BYTE fieldID: 3];
    [outProtocol writeByte: ___classVersion];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Bool_GetNodeClassInformation("];
  [ms appendString: @"retval:"];
  [ms appendFormat: @"%i", __retval];
  [ms appendString: @",_className:"];
  [ms appendFormat: @"\"%@\"", ___className];
  [ms appendString: @",_classVersion:"];
  [ms appendFormat: @"%i", ___classVersion];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation OpenZWaveGetAssociationsReturnStruct

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRetval: (int32_t) retval o_associations: (NSMutableArray *) o_associations
{
  self = [super init];
  __retval = retval;
  __retval_isset = YES;
  __o_associations = [o_associations retain_stub];
  __o_associations_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"retval"])
  {
    __retval = [decoder decodeInt32ForKey: @"retval"];
    __retval_isset = YES;
  }
  if ([decoder containsValueForKey: @"o_associations"])
  {
    __o_associations = [[decoder decodeObjectForKey: @"o_associations"] retain_stub];
    __o_associations_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__retval_isset)
  {
    [encoder encodeInt32: __retval forKey: @"retval"];
  }
  if (__o_associations_isset)
  {
    [encoder encodeObject: __o_associations forKey: @"o_associations"];
  }
}

- (void) dealloc
{
  [__o_associations release_stub];
  [super dealloc_stub];
}

- (int32_t) retval {
  return __retval;
}

- (void) setRetval: (int32_t) retval {
  __retval = retval;
  __retval_isset = YES;
}

- (BOOL) retvalIsSet {
  return __retval_isset;
}

- (void) unsetRetval {
  __retval_isset = NO;
}

- (NSMutableArray *) o_associations {
  return [[__o_associations retain_stub] autorelease_stub];
}

- (void) setO_associations: (NSMutableArray *) o_associations {
  [o_associations retain_stub];
  [__o_associations release_stub];
  __o_associations = o_associations;
  __o_associations_isset = YES;
}

- (BOOL) o_associationsIsSet {
  return __o_associations_isset;
}

- (void) unsetO_associations {
  [__o_associations release_stub];
  __o_associations = nil;
  __o_associations_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setRetval: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size10;
          [inProtocol readListBeginReturningElementType: NULL size: &_size10];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size10];
          int _i11;
          for (_i11 = 0; _i11 < _size10; ++_i11)
          {
            uint8_t _elem12 = [inProtocol readByte];
            [fieldValue addObject: [NSNumber numberWithUnsignedChar: _elem12]];
          }
          [inProtocol readListEnd];
          [self setO_associations: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetAssociationsReturnStruct"];
  if (__retval_isset) {
    [outProtocol writeFieldBeginWithName: @"retval" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __retval];
    [outProtocol writeFieldEnd];
  }
  if (__o_associations_isset) {
    if (__o_associations != nil) {
      [outProtocol writeFieldBeginWithName: @"o_associations" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_BYTE size: [__o_associations count]];
        int i14;
        for (i14 = 0; i14 < [__o_associations count]; i14++)
        {
          [outProtocol writeByte: [[__o_associations objectAtIndex: i14] unsignedCharValue]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetAssociationsReturnStruct("];
  [ms appendString: @"retval:"];
  [ms appendFormat: @"%i", __retval];
  [ms appendString: @",o_associations:"];
  [ms appendFormat: @"%@", __o_associations];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation OpenZWaveGetAllScenesReturnStruct

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRetval: (uint8_t) retval _sceneIds: (NSMutableArray *) _sceneIds
{
  self = [super init];
  __retval = retval;
  __retval_isset = YES;
  ___sceneIds = [_sceneIds retain_stub];
  ___sceneIds_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"retval"])
  {
    __retval = [decoder decodeIntForKey: @"retval"];
    __retval_isset = YES;
  }
  if ([decoder containsValueForKey: @"_sceneIds"])
  {
    ___sceneIds = [[decoder decodeObjectForKey: @"_sceneIds"] retain_stub];
    ___sceneIds_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__retval_isset)
  {
    [encoder encodeInt: __retval forKey: @"retval"];
  }
  if (___sceneIds_isset)
  {
    [encoder encodeObject: ___sceneIds forKey: @"_sceneIds"];
  }
}

- (void) dealloc
{
  [___sceneIds release_stub];
  [super dealloc_stub];
}

- (uint8_t) retval {
  return __retval;
}

- (void) setRetval: (uint8_t) retval {
  __retval = retval;
  __retval_isset = YES;
}

- (BOOL) retvalIsSet {
  return __retval_isset;
}

- (void) unsetRetval {
  __retval_isset = NO;
}

- (NSMutableArray *) _sceneIds {
  return [[___sceneIds retain_stub] autorelease_stub];
}

- (void) set_sceneIds: (NSMutableArray *) _sceneIds {
  [_sceneIds retain_stub];
  [___sceneIds release_stub];
  ___sceneIds = _sceneIds;
  ___sceneIds_isset = YES;
}

- (BOOL) _sceneIdsIsSet {
  return ___sceneIds_isset;
}

- (void) unset_sceneIds {
  [___sceneIds release_stub];
  ___sceneIds = nil;
  ___sceneIds_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self setRetval: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size15;
          [inProtocol readListBeginReturningElementType: NULL size: &_size15];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size15];
          int _i16;
          for (_i16 = 0; _i16 < _size15; ++_i16)
          {
            uint8_t _elem17 = [inProtocol readByte];
            [fieldValue addObject: [NSNumber numberWithUnsignedChar: _elem17]];
          }
          [inProtocol readListEnd];
          [self set_sceneIds: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetAllScenesReturnStruct"];
  if (__retval_isset) {
    [outProtocol writeFieldBeginWithName: @"retval" type: TType_BYTE fieldID: 1];
    [outProtocol writeByte: __retval];
    [outProtocol writeFieldEnd];
  }
  if (___sceneIds_isset) {
    if (___sceneIds != nil) {
      [outProtocol writeFieldBeginWithName: @"_sceneIds" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_BYTE size: [___sceneIds count]];
        int i19;
        for (i19 = 0; i19 < [___sceneIds count]; i19++)
        {
          [outProtocol writeByte: [[___sceneIds objectAtIndex: i19] unsignedCharValue]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetAllScenesReturnStruct("];
  [ms appendString: @"retval:"];
  [ms appendFormat: @"%i", __retval];
  [ms appendString: @",_sceneIds:"];
  [ms appendFormat: @"%@", ___sceneIds];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation OpenZWaveSceneGetValuesReturnStruct

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRetval: (int32_t) retval o_value: (NSMutableArray *) o_value
{
  self = [super init];
  __retval = retval;
  __retval_isset = YES;
  __o_value = [o_value retain_stub];
  __o_value_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"retval"])
  {
    __retval = [decoder decodeInt32ForKey: @"retval"];
    __retval_isset = YES;
  }
  if ([decoder containsValueForKey: @"o_value"])
  {
    __o_value = [[decoder decodeObjectForKey: @"o_value"] retain_stub];
    __o_value_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__retval_isset)
  {
    [encoder encodeInt32: __retval forKey: @"retval"];
  }
  if (__o_value_isset)
  {
    [encoder encodeObject: __o_value forKey: @"o_value"];
  }
}

- (void) dealloc
{
  [__o_value release_stub];
  [super dealloc_stub];
}

- (int32_t) retval {
  return __retval;
}

- (void) setRetval: (int32_t) retval {
  __retval = retval;
  __retval_isset = YES;
}

- (BOOL) retvalIsSet {
  return __retval_isset;
}

- (void) unsetRetval {
  __retval_isset = NO;
}

- (NSMutableArray *) o_value {
  return [[__o_value retain_stub] autorelease_stub];
}

- (void) setO_value: (NSMutableArray *) o_value {
  [o_value retain_stub];
  [__o_value release_stub];
  __o_value = o_value;
  __o_value_isset = YES;
}

- (BOOL) o_valueIsSet {
  return __o_value_isset;
}

- (void) unsetO_value {
  [__o_value release_stub];
  __o_value = nil;
  __o_value_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setRetval: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size20;
          [inProtocol readListBeginReturningElementType: NULL size: &_size20];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size20];
          int _i21;
          for (_i21 = 0; _i21 < _size20; ++_i21)
          {
            OpenZWaveRemoteValueID *_elem22 = [[OpenZWaveRemoteValueID alloc] init];
            [_elem22 read: inProtocol];
            [fieldValue addObject: _elem22];
            [_elem22 release_stub];
          }
          [inProtocol readListEnd];
          [self setO_value: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SceneGetValuesReturnStruct"];
  if (__retval_isset) {
    [outProtocol writeFieldBeginWithName: @"retval" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __retval];
    [outProtocol writeFieldEnd];
  }
  if (__o_value_isset) {
    if (__o_value != nil) {
      [outProtocol writeFieldBeginWithName: @"o_value" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__o_value count]];
        int i24;
        for (i24 = 0; i24 < [__o_value count]; i24++)
        {
          [[__o_value objectAtIndex: i24] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SceneGetValuesReturnStruct("];
  [ms appendString: @"retval:"];
  [ms appendFormat: @"%i", __retval];
  [ms appendString: @",o_value:"];
  [ms appendFormat: @"%@", __o_value];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end


@implementation OpenZWaveozwConstants
+ (void) initialize {
}
@end

@interface OpenZWaveWriteConfig_args : NSObject <NSCoding> {
  int32_t ___homeId;

  BOOL ___homeId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=_homeId, setter=set_homeId:) int32_t _homeId;
#endif

- (id) init;
- (id) initWith_homeId: (int32_t) _homeId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (int32_t) _homeId;
- (void) set_homeId: (int32_t) _homeId;
#endif
- (BOOL) _homeIdIsSet;

@end

@implementation OpenZWaveWriteConfig_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_homeId: (int32_t) _homeId
{
  self = [super init];
  ___homeId = _homeId;
  ___homeId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_homeId"])
  {
    ___homeId = [decoder decodeInt32ForKey: @"_homeId"];
    ___homeId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___homeId_isset)
  {
    [encoder encodeInt32: ___homeId forKey: @"_homeId"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (int32_t) _homeId {
  return ___homeId;
}

- (void) set_homeId: (int32_t) _homeId {
  ___homeId = _homeId;
  ___homeId_isset = YES;
}

- (BOOL) _homeIdIsSet {
  return ___homeId_isset;
}

- (void) unset_homeId {
  ___homeId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self set_homeId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"WriteConfig_args"];
  if (___homeId_isset) {
    [outProtocol writeFieldBeginWithName: @"_homeId" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: ___homeId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"WriteConfig_args("];
  [ms appendString: @"_homeId:"];
  [ms appendFormat: @"%i", ___homeId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveWriteConfig_result : NSObject <NSCoding> {
}

- (id) init;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

@end

@implementation OpenZWaveWriteConfig_result

- (id) init
{
  self = [super init];
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"WriteConfig_result"];

  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"WriteConfig_result("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveGetControllerNodeId_args : NSObject <NSCoding> {
  int32_t ___homeId;

  BOOL ___homeId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=_homeId, setter=set_homeId:) int32_t _homeId;
#endif

- (id) init;
- (id) initWith_homeId: (int32_t) _homeId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (int32_t) _homeId;
- (void) set_homeId: (int32_t) _homeId;
#endif
- (BOOL) _homeIdIsSet;

@end

@implementation OpenZWaveGetControllerNodeId_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_homeId: (int32_t) _homeId
{
  self = [super init];
  ___homeId = _homeId;
  ___homeId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_homeId"])
  {
    ___homeId = [decoder decodeInt32ForKey: @"_homeId"];
    ___homeId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___homeId_isset)
  {
    [encoder encodeInt32: ___homeId forKey: @"_homeId"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (int32_t) _homeId {
  return ___homeId;
}

- (void) set_homeId: (int32_t) _homeId {
  ___homeId = _homeId;
  ___homeId_isset = YES;
}

- (BOOL) _homeIdIsSet {
  return ___homeId_isset;
}

- (void) unset_homeId {
  ___homeId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self set_homeId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetControllerNodeId_args"];
  if (___homeId_isset) {
    [outProtocol writeFieldBeginWithName: @"_homeId" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: ___homeId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetControllerNodeId_args("];
  [ms appendString: @"_homeId:"];
  [ms appendFormat: @"%i", ___homeId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveGetControllerNodeId_result : NSObject <NSCoding> {
  uint8_t __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) uint8_t success;
#endif

- (id) init;
- (id) initWithSuccess: (uint8_t) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (uint8_t) success;
- (void) setSuccess: (uint8_t) success;
#endif
- (BOOL) successIsSet;

@end

@implementation OpenZWaveGetControllerNodeId_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (uint8_t) success
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeIntForKey: @"success"];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeInt: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (uint8_t) success {
  return __success;
}

- (void) setSuccess: (uint8_t) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetControllerNodeId_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_BYTE fieldID: 0];
    [outProtocol writeByte: __success];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetControllerNodeId_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveIsPrimaryController_args : NSObject <NSCoding> {
  int32_t ___homeId;

  BOOL ___homeId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=_homeId, setter=set_homeId:) int32_t _homeId;
#endif

- (id) init;
- (id) initWith_homeId: (int32_t) _homeId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (int32_t) _homeId;
- (void) set_homeId: (int32_t) _homeId;
#endif
- (BOOL) _homeIdIsSet;

@end

@implementation OpenZWaveIsPrimaryController_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_homeId: (int32_t) _homeId
{
  self = [super init];
  ___homeId = _homeId;
  ___homeId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_homeId"])
  {
    ___homeId = [decoder decodeInt32ForKey: @"_homeId"];
    ___homeId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___homeId_isset)
  {
    [encoder encodeInt32: ___homeId forKey: @"_homeId"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (int32_t) _homeId {
  return ___homeId;
}

- (void) set_homeId: (int32_t) _homeId {
  ___homeId = _homeId;
  ___homeId_isset = YES;
}

- (BOOL) _homeIdIsSet {
  return ___homeId_isset;
}

- (void) unset_homeId {
  ___homeId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self set_homeId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"IsPrimaryController_args"];
  if (___homeId_isset) {
    [outProtocol writeFieldBeginWithName: @"_homeId" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: ___homeId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"IsPrimaryController_args("];
  [ms appendString: @"_homeId:"];
  [ms appendFormat: @"%i", ___homeId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveIsPrimaryController_result : NSObject <NSCoding> {
  BOOL __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) BOOL success;
#endif

- (id) init;
- (id) initWithSuccess: (BOOL) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (BOOL) success;
- (void) setSuccess: (BOOL) success;
#endif
- (BOOL) successIsSet;

@end

@implementation OpenZWaveIsPrimaryController_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (BOOL) success
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeBoolForKey: @"success"];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeBool: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (BOOL) success {
  return __success;
}

- (void) setSuccess: (BOOL) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"IsPrimaryController_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
    [outProtocol writeBool: __success];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"IsPrimaryController_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveIsStaticUpdateController_args : NSObject <NSCoding> {
  int32_t ___homeId;

  BOOL ___homeId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=_homeId, setter=set_homeId:) int32_t _homeId;
#endif

- (id) init;
- (id) initWith_homeId: (int32_t) _homeId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (int32_t) _homeId;
- (void) set_homeId: (int32_t) _homeId;
#endif
- (BOOL) _homeIdIsSet;

@end

@implementation OpenZWaveIsStaticUpdateController_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_homeId: (int32_t) _homeId
{
  self = [super init];
  ___homeId = _homeId;
  ___homeId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_homeId"])
  {
    ___homeId = [decoder decodeInt32ForKey: @"_homeId"];
    ___homeId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___homeId_isset)
  {
    [encoder encodeInt32: ___homeId forKey: @"_homeId"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (int32_t) _homeId {
  return ___homeId;
}

- (void) set_homeId: (int32_t) _homeId {
  ___homeId = _homeId;
  ___homeId_isset = YES;
}

- (BOOL) _homeIdIsSet {
  return ___homeId_isset;
}

- (void) unset_homeId {
  ___homeId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self set_homeId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"IsStaticUpdateController_args"];
  if (___homeId_isset) {
    [outProtocol writeFieldBeginWithName: @"_homeId" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: ___homeId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"IsStaticUpdateController_args("];
  [ms appendString: @"_homeId:"];
  [ms appendFormat: @"%i", ___homeId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveIsStaticUpdateController_result : NSObject <NSCoding> {
  BOOL __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) BOOL success;
#endif

- (id) init;
- (id) initWithSuccess: (BOOL) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (BOOL) success;
- (void) setSuccess: (BOOL) success;
#endif
- (BOOL) successIsSet;

@end

@implementation OpenZWaveIsStaticUpdateController_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (BOOL) success
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeBoolForKey: @"success"];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeBool: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (BOOL) success {
  return __success;
}

- (void) setSuccess: (BOOL) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"IsStaticUpdateController_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
    [outProtocol writeBool: __success];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"IsStaticUpdateController_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveIsBridgeController_args : NSObject <NSCoding> {
  int32_t ___homeId;

  BOOL ___homeId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=_homeId, setter=set_homeId:) int32_t _homeId;
#endif

- (id) init;
- (id) initWith_homeId: (int32_t) _homeId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (int32_t) _homeId;
- (void) set_homeId: (int32_t) _homeId;
#endif
- (BOOL) _homeIdIsSet;

@end

@implementation OpenZWaveIsBridgeController_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_homeId: (int32_t) _homeId
{
  self = [super init];
  ___homeId = _homeId;
  ___homeId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_homeId"])
  {
    ___homeId = [decoder decodeInt32ForKey: @"_homeId"];
    ___homeId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___homeId_isset)
  {
    [encoder encodeInt32: ___homeId forKey: @"_homeId"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (int32_t) _homeId {
  return ___homeId;
}

- (void) set_homeId: (int32_t) _homeId {
  ___homeId = _homeId;
  ___homeId_isset = YES;
}

- (BOOL) _homeIdIsSet {
  return ___homeId_isset;
}

- (void) unset_homeId {
  ___homeId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self set_homeId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"IsBridgeController_args"];
  if (___homeId_isset) {
    [outProtocol writeFieldBeginWithName: @"_homeId" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: ___homeId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"IsBridgeController_args("];
  [ms appendString: @"_homeId:"];
  [ms appendFormat: @"%i", ___homeId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveIsBridgeController_result : NSObject <NSCoding> {
  BOOL __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) BOOL success;
#endif

- (id) init;
- (id) initWithSuccess: (BOOL) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (BOOL) success;
- (void) setSuccess: (BOOL) success;
#endif
- (BOOL) successIsSet;

@end

@implementation OpenZWaveIsBridgeController_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (BOOL) success
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeBoolForKey: @"success"];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeBool: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (BOOL) success {
  return __success;
}

- (void) setSuccess: (BOOL) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"IsBridgeController_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
    [outProtocol writeBool: __success];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"IsBridgeController_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveGetLibraryVersion_args : NSObject <NSCoding> {
  int32_t ___homeId;

  BOOL ___homeId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=_homeId, setter=set_homeId:) int32_t _homeId;
#endif

- (id) init;
- (id) initWith_homeId: (int32_t) _homeId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (int32_t) _homeId;
- (void) set_homeId: (int32_t) _homeId;
#endif
- (BOOL) _homeIdIsSet;

@end

@implementation OpenZWaveGetLibraryVersion_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_homeId: (int32_t) _homeId
{
  self = [super init];
  ___homeId = _homeId;
  ___homeId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_homeId"])
  {
    ___homeId = [decoder decodeInt32ForKey: @"_homeId"];
    ___homeId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___homeId_isset)
  {
    [encoder encodeInt32: ___homeId forKey: @"_homeId"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (int32_t) _homeId {
  return ___homeId;
}

- (void) set_homeId: (int32_t) _homeId {
  ___homeId = _homeId;
  ___homeId_isset = YES;
}

- (BOOL) _homeIdIsSet {
  return ___homeId_isset;
}

- (void) unset_homeId {
  ___homeId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self set_homeId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetLibraryVersion_args"];
  if (___homeId_isset) {
    [outProtocol writeFieldBeginWithName: @"_homeId" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: ___homeId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetLibraryVersion_args("];
  [ms appendString: @"_homeId:"];
  [ms appendFormat: @"%i", ___homeId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveGetLibraryVersion_result : NSObject <NSCoding> {
  NSString * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSString * success;
#endif

- (id) init;
- (id) initWithSuccess: (NSString *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (NSString *) success;
- (void) setSuccess: (NSString *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation OpenZWaveGetLibraryVersion_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NSString *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (NSString *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSString *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetLibraryVersion_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRING fieldID: 0];
      [outProtocol writeString: __success];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetLibraryVersion_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"\"%@\"", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveGetLibraryTypeName_args : NSObject <NSCoding> {
  int32_t ___homeId;

  BOOL ___homeId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=_homeId, setter=set_homeId:) int32_t _homeId;
#endif

- (id) init;
- (id) initWith_homeId: (int32_t) _homeId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (int32_t) _homeId;
- (void) set_homeId: (int32_t) _homeId;
#endif
- (BOOL) _homeIdIsSet;

@end

@implementation OpenZWaveGetLibraryTypeName_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_homeId: (int32_t) _homeId
{
  self = [super init];
  ___homeId = _homeId;
  ___homeId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_homeId"])
  {
    ___homeId = [decoder decodeInt32ForKey: @"_homeId"];
    ___homeId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___homeId_isset)
  {
    [encoder encodeInt32: ___homeId forKey: @"_homeId"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (int32_t) _homeId {
  return ___homeId;
}

- (void) set_homeId: (int32_t) _homeId {
  ___homeId = _homeId;
  ___homeId_isset = YES;
}

- (BOOL) _homeIdIsSet {
  return ___homeId_isset;
}

- (void) unset_homeId {
  ___homeId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self set_homeId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetLibraryTypeName_args"];
  if (___homeId_isset) {
    [outProtocol writeFieldBeginWithName: @"_homeId" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: ___homeId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetLibraryTypeName_args("];
  [ms appendString: @"_homeId:"];
  [ms appendFormat: @"%i", ___homeId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveGetLibraryTypeName_result : NSObject <NSCoding> {
  NSString * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSString * success;
#endif

- (id) init;
- (id) initWithSuccess: (NSString *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (NSString *) success;
- (void) setSuccess: (NSString *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation OpenZWaveGetLibraryTypeName_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NSString *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (NSString *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSString *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetLibraryTypeName_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRING fieldID: 0];
      [outProtocol writeString: __success];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetLibraryTypeName_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"\"%@\"", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveGetSendQueueCount_args : NSObject <NSCoding> {
  int32_t ___homeId;

  BOOL ___homeId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=_homeId, setter=set_homeId:) int32_t _homeId;
#endif

- (id) init;
- (id) initWith_homeId: (int32_t) _homeId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (int32_t) _homeId;
- (void) set_homeId: (int32_t) _homeId;
#endif
- (BOOL) _homeIdIsSet;

@end

@implementation OpenZWaveGetSendQueueCount_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_homeId: (int32_t) _homeId
{
  self = [super init];
  ___homeId = _homeId;
  ___homeId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_homeId"])
  {
    ___homeId = [decoder decodeInt32ForKey: @"_homeId"];
    ___homeId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___homeId_isset)
  {
    [encoder encodeInt32: ___homeId forKey: @"_homeId"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (int32_t) _homeId {
  return ___homeId;
}

- (void) set_homeId: (int32_t) _homeId {
  ___homeId = _homeId;
  ___homeId_isset = YES;
}

- (BOOL) _homeIdIsSet {
  return ___homeId_isset;
}

- (void) unset_homeId {
  ___homeId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self set_homeId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetSendQueueCount_args"];
  if (___homeId_isset) {
    [outProtocol writeFieldBeginWithName: @"_homeId" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: ___homeId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetSendQueueCount_args("];
  [ms appendString: @"_homeId:"];
  [ms appendFormat: @"%i", ___homeId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveGetSendQueueCount_result : NSObject <NSCoding> {
  int32_t __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) int32_t success;
#endif

- (id) init;
- (id) initWithSuccess: (int32_t) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (int32_t) success;
- (void) setSuccess: (int32_t) success;
#endif
- (BOOL) successIsSet;

@end

@implementation OpenZWaveGetSendQueueCount_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (int32_t) success
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeInt32ForKey: @"success"];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeInt32: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (int32_t) success {
  return __success;
}

- (void) setSuccess: (int32_t) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetSendQueueCount_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_I32 fieldID: 0];
    [outProtocol writeI32: __success];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetSendQueueCount_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveLogDriverStatistics_args : NSObject <NSCoding> {
  int32_t ___homeId;

  BOOL ___homeId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=_homeId, setter=set_homeId:) int32_t _homeId;
#endif

- (id) init;
- (id) initWith_homeId: (int32_t) _homeId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (int32_t) _homeId;
- (void) set_homeId: (int32_t) _homeId;
#endif
- (BOOL) _homeIdIsSet;

@end

@implementation OpenZWaveLogDriverStatistics_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_homeId: (int32_t) _homeId
{
  self = [super init];
  ___homeId = _homeId;
  ___homeId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_homeId"])
  {
    ___homeId = [decoder decodeInt32ForKey: @"_homeId"];
    ___homeId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___homeId_isset)
  {
    [encoder encodeInt32: ___homeId forKey: @"_homeId"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (int32_t) _homeId {
  return ___homeId;
}

- (void) set_homeId: (int32_t) _homeId {
  ___homeId = _homeId;
  ___homeId_isset = YES;
}

- (BOOL) _homeIdIsSet {
  return ___homeId_isset;
}

- (void) unset_homeId {
  ___homeId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self set_homeId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"LogDriverStatistics_args"];
  if (___homeId_isset) {
    [outProtocol writeFieldBeginWithName: @"_homeId" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: ___homeId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"LogDriverStatistics_args("];
  [ms appendString: @"_homeId:"];
  [ms appendFormat: @"%i", ___homeId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveLogDriverStatistics_result : NSObject <NSCoding> {
}

- (id) init;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

@end

@implementation OpenZWaveLogDriverStatistics_result

- (id) init
{
  self = [super init];
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"LogDriverStatistics_result"];

  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"LogDriverStatistics_result("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveGetPollInterval_args : NSObject <NSCoding> {
}

- (id) init;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

@end

@implementation OpenZWaveGetPollInterval_args

- (id) init
{
  self = [super init];
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetPollInterval_args"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetPollInterval_args("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveGetPollInterval_result : NSObject <NSCoding> {
  int32_t __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) int32_t success;
#endif

- (id) init;
- (id) initWithSuccess: (int32_t) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (int32_t) success;
- (void) setSuccess: (int32_t) success;
#endif
- (BOOL) successIsSet;

@end

@implementation OpenZWaveGetPollInterval_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (int32_t) success
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeInt32ForKey: @"success"];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeInt32: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (int32_t) success {
  return __success;
}

- (void) setSuccess: (int32_t) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetPollInterval_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_I32 fieldID: 0];
    [outProtocol writeI32: __success];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetPollInterval_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveSetPollInterval_args : NSObject <NSCoding> {
  int32_t ___milliseconds;
  BOOL ___bIntervalBetweenPolls;

  BOOL ___milliseconds_isset;
  BOOL ___bIntervalBetweenPolls_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=_milliseconds, setter=set_milliseconds:) int32_t _milliseconds;
@property (nonatomic, getter=_bIntervalBetweenPolls, setter=set_bIntervalBetweenPolls:) BOOL _bIntervalBetweenPolls;
#endif

- (id) init;
- (id) initWith_milliseconds: (int32_t) _milliseconds _bIntervalBetweenPolls: (BOOL) _bIntervalBetweenPolls;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (int32_t) _milliseconds;
- (void) set_milliseconds: (int32_t) _milliseconds;
#endif
- (BOOL) _millisecondsIsSet;

#if !__has_feature(objc_arc)
- (BOOL) _bIntervalBetweenPolls;
- (void) set_bIntervalBetweenPolls: (BOOL) _bIntervalBetweenPolls;
#endif
- (BOOL) _bIntervalBetweenPollsIsSet;

@end

@implementation OpenZWaveSetPollInterval_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_milliseconds: (int32_t) _milliseconds _bIntervalBetweenPolls: (BOOL) _bIntervalBetweenPolls
{
  self = [super init];
  ___milliseconds = _milliseconds;
  ___milliseconds_isset = YES;
  ___bIntervalBetweenPolls = _bIntervalBetweenPolls;
  ___bIntervalBetweenPolls_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_milliseconds"])
  {
    ___milliseconds = [decoder decodeInt32ForKey: @"_milliseconds"];
    ___milliseconds_isset = YES;
  }
  if ([decoder containsValueForKey: @"_bIntervalBetweenPolls"])
  {
    ___bIntervalBetweenPolls = [decoder decodeBoolForKey: @"_bIntervalBetweenPolls"];
    ___bIntervalBetweenPolls_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___milliseconds_isset)
  {
    [encoder encodeInt32: ___milliseconds forKey: @"_milliseconds"];
  }
  if (___bIntervalBetweenPolls_isset)
  {
    [encoder encodeBool: ___bIntervalBetweenPolls forKey: @"_bIntervalBetweenPolls"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (int32_t) _milliseconds {
  return ___milliseconds;
}

- (void) set_milliseconds: (int32_t) _milliseconds {
  ___milliseconds = _milliseconds;
  ___milliseconds_isset = YES;
}

- (BOOL) _millisecondsIsSet {
  return ___milliseconds_isset;
}

- (void) unset_milliseconds {
  ___milliseconds_isset = NO;
}

- (BOOL) _bIntervalBetweenPolls {
  return ___bIntervalBetweenPolls;
}

- (void) set_bIntervalBetweenPolls: (BOOL) _bIntervalBetweenPolls {
  ___bIntervalBetweenPolls = _bIntervalBetweenPolls;
  ___bIntervalBetweenPolls_isset = YES;
}

- (BOOL) _bIntervalBetweenPollsIsSet {
  return ___bIntervalBetweenPolls_isset;
}

- (void) unset_bIntervalBetweenPolls {
  ___bIntervalBetweenPolls_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self set_milliseconds: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self set_bIntervalBetweenPolls: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SetPollInterval_args"];
  if (___milliseconds_isset) {
    [outProtocol writeFieldBeginWithName: @"_milliseconds" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: ___milliseconds];
    [outProtocol writeFieldEnd];
  }
  if (___bIntervalBetweenPolls_isset) {
    [outProtocol writeFieldBeginWithName: @"_bIntervalBetweenPolls" type: TType_BOOL fieldID: 2];
    [outProtocol writeBool: ___bIntervalBetweenPolls];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SetPollInterval_args("];
  [ms appendString: @"_milliseconds:"];
  [ms appendFormat: @"%i", ___milliseconds];
  [ms appendString: @",_bIntervalBetweenPolls:"];
  [ms appendFormat: @"%i", ___bIntervalBetweenPolls];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveSetPollInterval_result : NSObject <NSCoding> {
}

- (id) init;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

@end

@implementation OpenZWaveSetPollInterval_result

- (id) init
{
  self = [super init];
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SetPollInterval_result"];

  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SetPollInterval_result("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveEnablePoll_args : NSObject <NSCoding> {
  OpenZWaveRemoteValueID * ___valueId;
  uint8_t ___intensity;

  BOOL ___valueId_isset;
  BOOL ___intensity_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=_valueId, setter=set_valueId:) OpenZWaveRemoteValueID * _valueId;
@property (nonatomic, getter=_intensity, setter=set_intensity:) uint8_t _intensity;
#endif

- (id) init;
- (id) initWith_valueId: (OpenZWaveRemoteValueID *) _valueId _intensity: (uint8_t) _intensity;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (OpenZWaveRemoteValueID *) _valueId;
- (void) set_valueId: (OpenZWaveRemoteValueID *) _valueId;
#endif
- (BOOL) _valueIdIsSet;

#if !__has_feature(objc_arc)
- (uint8_t) _intensity;
- (void) set_intensity: (uint8_t) _intensity;
#endif
- (BOOL) _intensityIsSet;

@end

@implementation OpenZWaveEnablePoll_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self._intensity = 1;

#endif
  return self;
}

- (id) initWith_valueId: (OpenZWaveRemoteValueID *) _valueId _intensity: (uint8_t) _intensity
{
  self = [super init];
  ___valueId = [_valueId retain_stub];
  ___valueId_isset = YES;
  ___intensity = _intensity;
  ___intensity_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_valueId"])
  {
    ___valueId = [[decoder decodeObjectForKey: @"_valueId"] retain_stub];
    ___valueId_isset = YES;
  }
  if ([decoder containsValueForKey: @"_intensity"])
  {
    ___intensity = [decoder decodeIntForKey: @"_intensity"];
    ___intensity_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___valueId_isset)
  {
    [encoder encodeObject: ___valueId forKey: @"_valueId"];
  }
  if (___intensity_isset)
  {
    [encoder encodeInt: ___intensity forKey: @"_intensity"];
  }
}

- (void) dealloc
{
  [___valueId release_stub];
  [super dealloc_stub];
}

- (OpenZWaveRemoteValueID *) _valueId {
  return [[___valueId retain_stub] autorelease_stub];
}

- (void) set_valueId: (OpenZWaveRemoteValueID *) _valueId {
  [_valueId retain_stub];
  [___valueId release_stub];
  ___valueId = _valueId;
  ___valueId_isset = YES;
}

- (BOOL) _valueIdIsSet {
  return ___valueId_isset;
}

- (void) unset_valueId {
  [___valueId release_stub];
  ___valueId = nil;
  ___valueId_isset = NO;
}

- (uint8_t) _intensity {
  return ___intensity;
}

- (void) set_intensity: (uint8_t) _intensity {
  ___intensity = _intensity;
  ___intensity_isset = YES;
}

- (BOOL) _intensityIsSet {
  return ___intensity_isset;
}

- (void) unset_intensity {
  ___intensity_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          OpenZWaveRemoteValueID *fieldValue = [[OpenZWaveRemoteValueID alloc] init];
          [fieldValue read: inProtocol];
          [self set_valueId: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self set_intensity: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"EnablePoll_args"];
  if (___valueId_isset) {
    if (___valueId != nil) {
      [outProtocol writeFieldBeginWithName: @"_valueId" type: TType_STRUCT fieldID: 1];
      [___valueId write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (___intensity_isset) {
    [outProtocol writeFieldBeginWithName: @"_intensity" type: TType_BYTE fieldID: 2];
    [outProtocol writeByte: ___intensity];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"EnablePoll_args("];
  [ms appendString: @"_valueId:"];
  [ms appendFormat: @"%@", ___valueId];
  [ms appendString: @",_intensity:"];
  [ms appendFormat: @"%i", ___intensity];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveEnablePoll_result : NSObject <NSCoding> {
  BOOL __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) BOOL success;
#endif

- (id) init;
- (id) initWithSuccess: (BOOL) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (BOOL) success;
- (void) setSuccess: (BOOL) success;
#endif
- (BOOL) successIsSet;

@end

@implementation OpenZWaveEnablePoll_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (BOOL) success
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeBoolForKey: @"success"];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeBool: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (BOOL) success {
  return __success;
}

- (void) setSuccess: (BOOL) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"EnablePoll_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
    [outProtocol writeBool: __success];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"EnablePoll_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveDisablePoll_args : NSObject <NSCoding> {
  OpenZWaveRemoteValueID * ___valueId;

  BOOL ___valueId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=_valueId, setter=set_valueId:) OpenZWaveRemoteValueID * _valueId;
#endif

- (id) init;
- (id) initWith_valueId: (OpenZWaveRemoteValueID *) _valueId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (OpenZWaveRemoteValueID *) _valueId;
- (void) set_valueId: (OpenZWaveRemoteValueID *) _valueId;
#endif
- (BOOL) _valueIdIsSet;

@end

@implementation OpenZWaveDisablePoll_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_valueId: (OpenZWaveRemoteValueID *) _valueId
{
  self = [super init];
  ___valueId = [_valueId retain_stub];
  ___valueId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_valueId"])
  {
    ___valueId = [[decoder decodeObjectForKey: @"_valueId"] retain_stub];
    ___valueId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___valueId_isset)
  {
    [encoder encodeObject: ___valueId forKey: @"_valueId"];
  }
}

- (void) dealloc
{
  [___valueId release_stub];
  [super dealloc_stub];
}

- (OpenZWaveRemoteValueID *) _valueId {
  return [[___valueId retain_stub] autorelease_stub];
}

- (void) set_valueId: (OpenZWaveRemoteValueID *) _valueId {
  [_valueId retain_stub];
  [___valueId release_stub];
  ___valueId = _valueId;
  ___valueId_isset = YES;
}

- (BOOL) _valueIdIsSet {
  return ___valueId_isset;
}

- (void) unset_valueId {
  [___valueId release_stub];
  ___valueId = nil;
  ___valueId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          OpenZWaveRemoteValueID *fieldValue = [[OpenZWaveRemoteValueID alloc] init];
          [fieldValue read: inProtocol];
          [self set_valueId: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"DisablePoll_args"];
  if (___valueId_isset) {
    if (___valueId != nil) {
      [outProtocol writeFieldBeginWithName: @"_valueId" type: TType_STRUCT fieldID: 1];
      [___valueId write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"DisablePoll_args("];
  [ms appendString: @"_valueId:"];
  [ms appendFormat: @"%@", ___valueId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveDisablePoll_result : NSObject <NSCoding> {
  BOOL __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) BOOL success;
#endif

- (id) init;
- (id) initWithSuccess: (BOOL) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (BOOL) success;
- (void) setSuccess: (BOOL) success;
#endif
- (BOOL) successIsSet;

@end

@implementation OpenZWaveDisablePoll_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (BOOL) success
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeBoolForKey: @"success"];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeBool: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (BOOL) success {
  return __success;
}

- (void) setSuccess: (BOOL) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"DisablePoll_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
    [outProtocol writeBool: __success];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"DisablePoll_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveisPolled_args : NSObject <NSCoding> {
  OpenZWaveRemoteValueID * ___valueId;

  BOOL ___valueId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=_valueId, setter=set_valueId:) OpenZWaveRemoteValueID * _valueId;
#endif

- (id) init;
- (id) initWith_valueId: (OpenZWaveRemoteValueID *) _valueId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (OpenZWaveRemoteValueID *) _valueId;
- (void) set_valueId: (OpenZWaveRemoteValueID *) _valueId;
#endif
- (BOOL) _valueIdIsSet;

@end

@implementation OpenZWaveisPolled_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_valueId: (OpenZWaveRemoteValueID *) _valueId
{
  self = [super init];
  ___valueId = [_valueId retain_stub];
  ___valueId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_valueId"])
  {
    ___valueId = [[decoder decodeObjectForKey: @"_valueId"] retain_stub];
    ___valueId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___valueId_isset)
  {
    [encoder encodeObject: ___valueId forKey: @"_valueId"];
  }
}

- (void) dealloc
{
  [___valueId release_stub];
  [super dealloc_stub];
}

- (OpenZWaveRemoteValueID *) _valueId {
  return [[___valueId retain_stub] autorelease_stub];
}

- (void) set_valueId: (OpenZWaveRemoteValueID *) _valueId {
  [_valueId retain_stub];
  [___valueId release_stub];
  ___valueId = _valueId;
  ___valueId_isset = YES;
}

- (BOOL) _valueIdIsSet {
  return ___valueId_isset;
}

- (void) unset_valueId {
  [___valueId release_stub];
  ___valueId = nil;
  ___valueId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          OpenZWaveRemoteValueID *fieldValue = [[OpenZWaveRemoteValueID alloc] init];
          [fieldValue read: inProtocol];
          [self set_valueId: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"isPolled_args"];
  if (___valueId_isset) {
    if (___valueId != nil) {
      [outProtocol writeFieldBeginWithName: @"_valueId" type: TType_STRUCT fieldID: 1];
      [___valueId write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"isPolled_args("];
  [ms appendString: @"_valueId:"];
  [ms appendFormat: @"%@", ___valueId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveIsPolled_result : NSObject <NSCoding> {
  BOOL __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) BOOL success;
#endif

- (id) init;
- (id) initWithSuccess: (BOOL) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (BOOL) success;
- (void) setSuccess: (BOOL) success;
#endif
- (BOOL) successIsSet;

@end

@implementation OpenZWaveIsPolled_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (BOOL) success
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeBoolForKey: @"success"];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeBool: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (BOOL) success {
  return __success;
}

- (void) setSuccess: (BOOL) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"IsPolled_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
    [outProtocol writeBool: __success];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"IsPolled_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveSetPollIntensity_args : NSObject <NSCoding> {
  OpenZWaveRemoteValueID * ___valueId;
  uint8_t ___intensity;

  BOOL ___valueId_isset;
  BOOL ___intensity_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=_valueId, setter=set_valueId:) OpenZWaveRemoteValueID * _valueId;
@property (nonatomic, getter=_intensity, setter=set_intensity:) uint8_t _intensity;
#endif

- (id) init;
- (id) initWith_valueId: (OpenZWaveRemoteValueID *) _valueId _intensity: (uint8_t) _intensity;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (OpenZWaveRemoteValueID *) _valueId;
- (void) set_valueId: (OpenZWaveRemoteValueID *) _valueId;
#endif
- (BOOL) _valueIdIsSet;

#if !__has_feature(objc_arc)
- (uint8_t) _intensity;
- (void) set_intensity: (uint8_t) _intensity;
#endif
- (BOOL) _intensityIsSet;

@end

@implementation OpenZWaveSetPollIntensity_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_valueId: (OpenZWaveRemoteValueID *) _valueId _intensity: (uint8_t) _intensity
{
  self = [super init];
  ___valueId = [_valueId retain_stub];
  ___valueId_isset = YES;
  ___intensity = _intensity;
  ___intensity_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_valueId"])
  {
    ___valueId = [[decoder decodeObjectForKey: @"_valueId"] retain_stub];
    ___valueId_isset = YES;
  }
  if ([decoder containsValueForKey: @"_intensity"])
  {
    ___intensity = [decoder decodeIntForKey: @"_intensity"];
    ___intensity_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___valueId_isset)
  {
    [encoder encodeObject: ___valueId forKey: @"_valueId"];
  }
  if (___intensity_isset)
  {
    [encoder encodeInt: ___intensity forKey: @"_intensity"];
  }
}

- (void) dealloc
{
  [___valueId release_stub];
  [super dealloc_stub];
}

- (OpenZWaveRemoteValueID *) _valueId {
  return [[___valueId retain_stub] autorelease_stub];
}

- (void) set_valueId: (OpenZWaveRemoteValueID *) _valueId {
  [_valueId retain_stub];
  [___valueId release_stub];
  ___valueId = _valueId;
  ___valueId_isset = YES;
}

- (BOOL) _valueIdIsSet {
  return ___valueId_isset;
}

- (void) unset_valueId {
  [___valueId release_stub];
  ___valueId = nil;
  ___valueId_isset = NO;
}

- (uint8_t) _intensity {
  return ___intensity;
}

- (void) set_intensity: (uint8_t) _intensity {
  ___intensity = _intensity;
  ___intensity_isset = YES;
}

- (BOOL) _intensityIsSet {
  return ___intensity_isset;
}

- (void) unset_intensity {
  ___intensity_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          OpenZWaveRemoteValueID *fieldValue = [[OpenZWaveRemoteValueID alloc] init];
          [fieldValue read: inProtocol];
          [self set_valueId: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self set_intensity: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SetPollIntensity_args"];
  if (___valueId_isset) {
    if (___valueId != nil) {
      [outProtocol writeFieldBeginWithName: @"_valueId" type: TType_STRUCT fieldID: 1];
      [___valueId write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (___intensity_isset) {
    [outProtocol writeFieldBeginWithName: @"_intensity" type: TType_BYTE fieldID: 2];
    [outProtocol writeByte: ___intensity];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SetPollIntensity_args("];
  [ms appendString: @"_valueId:"];
  [ms appendFormat: @"%@", ___valueId];
  [ms appendString: @",_intensity:"];
  [ms appendFormat: @"%i", ___intensity];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveSetPollIntensity_result : NSObject <NSCoding> {
}

- (id) init;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

@end

@implementation OpenZWaveSetPollIntensity_result

- (id) init
{
  self = [super init];
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SetPollIntensity_result"];

  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SetPollIntensity_result("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveRefreshNodeInfo_args : NSObject <NSCoding> {
  int32_t ___homeId;
  uint8_t ___nodeId;

  BOOL ___homeId_isset;
  BOOL ___nodeId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=_homeId, setter=set_homeId:) int32_t _homeId;
@property (nonatomic, getter=_nodeId, setter=set_nodeId:) uint8_t _nodeId;
#endif

- (id) init;
- (id) initWith_homeId: (int32_t) _homeId _nodeId: (uint8_t) _nodeId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (int32_t) _homeId;
- (void) set_homeId: (int32_t) _homeId;
#endif
- (BOOL) _homeIdIsSet;

#if !__has_feature(objc_arc)
- (uint8_t) _nodeId;
- (void) set_nodeId: (uint8_t) _nodeId;
#endif
- (BOOL) _nodeIdIsSet;

@end

@implementation OpenZWaveRefreshNodeInfo_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_homeId: (int32_t) _homeId _nodeId: (uint8_t) _nodeId
{
  self = [super init];
  ___homeId = _homeId;
  ___homeId_isset = YES;
  ___nodeId = _nodeId;
  ___nodeId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_homeId"])
  {
    ___homeId = [decoder decodeInt32ForKey: @"_homeId"];
    ___homeId_isset = YES;
  }
  if ([decoder containsValueForKey: @"_nodeId"])
  {
    ___nodeId = [decoder decodeIntForKey: @"_nodeId"];
    ___nodeId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___homeId_isset)
  {
    [encoder encodeInt32: ___homeId forKey: @"_homeId"];
  }
  if (___nodeId_isset)
  {
    [encoder encodeInt: ___nodeId forKey: @"_nodeId"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (int32_t) _homeId {
  return ___homeId;
}

- (void) set_homeId: (int32_t) _homeId {
  ___homeId = _homeId;
  ___homeId_isset = YES;
}

- (BOOL) _homeIdIsSet {
  return ___homeId_isset;
}

- (void) unset_homeId {
  ___homeId_isset = NO;
}

- (uint8_t) _nodeId {
  return ___nodeId;
}

- (void) set_nodeId: (uint8_t) _nodeId {
  ___nodeId = _nodeId;
  ___nodeId_isset = YES;
}

- (BOOL) _nodeIdIsSet {
  return ___nodeId_isset;
}

- (void) unset_nodeId {
  ___nodeId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self set_homeId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self set_nodeId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"RefreshNodeInfo_args"];
  if (___homeId_isset) {
    [outProtocol writeFieldBeginWithName: @"_homeId" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: ___homeId];
    [outProtocol writeFieldEnd];
  }
  if (___nodeId_isset) {
    [outProtocol writeFieldBeginWithName: @"_nodeId" type: TType_BYTE fieldID: 2];
    [outProtocol writeByte: ___nodeId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RefreshNodeInfo_args("];
  [ms appendString: @"_homeId:"];
  [ms appendFormat: @"%i", ___homeId];
  [ms appendString: @",_nodeId:"];
  [ms appendFormat: @"%i", ___nodeId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveRefreshNodeInfo_result : NSObject <NSCoding> {
  BOOL __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) BOOL success;
#endif

- (id) init;
- (id) initWithSuccess: (BOOL) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (BOOL) success;
- (void) setSuccess: (BOOL) success;
#endif
- (BOOL) successIsSet;

@end

@implementation OpenZWaveRefreshNodeInfo_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (BOOL) success
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeBoolForKey: @"success"];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeBool: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (BOOL) success {
  return __success;
}

- (void) setSuccess: (BOOL) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"RefreshNodeInfo_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
    [outProtocol writeBool: __success];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RefreshNodeInfo_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveRequestNodeState_args : NSObject <NSCoding> {
  int32_t ___homeId;
  uint8_t ___nodeId;

  BOOL ___homeId_isset;
  BOOL ___nodeId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=_homeId, setter=set_homeId:) int32_t _homeId;
@property (nonatomic, getter=_nodeId, setter=set_nodeId:) uint8_t _nodeId;
#endif

- (id) init;
- (id) initWith_homeId: (int32_t) _homeId _nodeId: (uint8_t) _nodeId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (int32_t) _homeId;
- (void) set_homeId: (int32_t) _homeId;
#endif
- (BOOL) _homeIdIsSet;

#if !__has_feature(objc_arc)
- (uint8_t) _nodeId;
- (void) set_nodeId: (uint8_t) _nodeId;
#endif
- (BOOL) _nodeIdIsSet;

@end

@implementation OpenZWaveRequestNodeState_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_homeId: (int32_t) _homeId _nodeId: (uint8_t) _nodeId
{
  self = [super init];
  ___homeId = _homeId;
  ___homeId_isset = YES;
  ___nodeId = _nodeId;
  ___nodeId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_homeId"])
  {
    ___homeId = [decoder decodeInt32ForKey: @"_homeId"];
    ___homeId_isset = YES;
  }
  if ([decoder containsValueForKey: @"_nodeId"])
  {
    ___nodeId = [decoder decodeIntForKey: @"_nodeId"];
    ___nodeId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___homeId_isset)
  {
    [encoder encodeInt32: ___homeId forKey: @"_homeId"];
  }
  if (___nodeId_isset)
  {
    [encoder encodeInt: ___nodeId forKey: @"_nodeId"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (int32_t) _homeId {
  return ___homeId;
}

- (void) set_homeId: (int32_t) _homeId {
  ___homeId = _homeId;
  ___homeId_isset = YES;
}

- (BOOL) _homeIdIsSet {
  return ___homeId_isset;
}

- (void) unset_homeId {
  ___homeId_isset = NO;
}

- (uint8_t) _nodeId {
  return ___nodeId;
}

- (void) set_nodeId: (uint8_t) _nodeId {
  ___nodeId = _nodeId;
  ___nodeId_isset = YES;
}

- (BOOL) _nodeIdIsSet {
  return ___nodeId_isset;
}

- (void) unset_nodeId {
  ___nodeId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self set_homeId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self set_nodeId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"RequestNodeState_args"];
  if (___homeId_isset) {
    [outProtocol writeFieldBeginWithName: @"_homeId" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: ___homeId];
    [outProtocol writeFieldEnd];
  }
  if (___nodeId_isset) {
    [outProtocol writeFieldBeginWithName: @"_nodeId" type: TType_BYTE fieldID: 2];
    [outProtocol writeByte: ___nodeId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RequestNodeState_args("];
  [ms appendString: @"_homeId:"];
  [ms appendFormat: @"%i", ___homeId];
  [ms appendString: @",_nodeId:"];
  [ms appendFormat: @"%i", ___nodeId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveRequestNodeState_result : NSObject <NSCoding> {
  BOOL __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) BOOL success;
#endif

- (id) init;
- (id) initWithSuccess: (BOOL) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (BOOL) success;
- (void) setSuccess: (BOOL) success;
#endif
- (BOOL) successIsSet;

@end

@implementation OpenZWaveRequestNodeState_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (BOOL) success
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeBoolForKey: @"success"];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeBool: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (BOOL) success {
  return __success;
}

- (void) setSuccess: (BOOL) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"RequestNodeState_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
    [outProtocol writeBool: __success];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RequestNodeState_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveRequestNodeDynamic_args : NSObject <NSCoding> {
  int32_t ___homeId;
  uint8_t ___nodeId;

  BOOL ___homeId_isset;
  BOOL ___nodeId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=_homeId, setter=set_homeId:) int32_t _homeId;
@property (nonatomic, getter=_nodeId, setter=set_nodeId:) uint8_t _nodeId;
#endif

- (id) init;
- (id) initWith_homeId: (int32_t) _homeId _nodeId: (uint8_t) _nodeId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (int32_t) _homeId;
- (void) set_homeId: (int32_t) _homeId;
#endif
- (BOOL) _homeIdIsSet;

#if !__has_feature(objc_arc)
- (uint8_t) _nodeId;
- (void) set_nodeId: (uint8_t) _nodeId;
#endif
- (BOOL) _nodeIdIsSet;

@end

@implementation OpenZWaveRequestNodeDynamic_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_homeId: (int32_t) _homeId _nodeId: (uint8_t) _nodeId
{
  self = [super init];
  ___homeId = _homeId;
  ___homeId_isset = YES;
  ___nodeId = _nodeId;
  ___nodeId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_homeId"])
  {
    ___homeId = [decoder decodeInt32ForKey: @"_homeId"];
    ___homeId_isset = YES;
  }
  if ([decoder containsValueForKey: @"_nodeId"])
  {
    ___nodeId = [decoder decodeIntForKey: @"_nodeId"];
    ___nodeId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___homeId_isset)
  {
    [encoder encodeInt32: ___homeId forKey: @"_homeId"];
  }
  if (___nodeId_isset)
  {
    [encoder encodeInt: ___nodeId forKey: @"_nodeId"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (int32_t) _homeId {
  return ___homeId;
}

- (void) set_homeId: (int32_t) _homeId {
  ___homeId = _homeId;
  ___homeId_isset = YES;
}

- (BOOL) _homeIdIsSet {
  return ___homeId_isset;
}

- (void) unset_homeId {
  ___homeId_isset = NO;
}

- (uint8_t) _nodeId {
  return ___nodeId;
}

- (void) set_nodeId: (uint8_t) _nodeId {
  ___nodeId = _nodeId;
  ___nodeId_isset = YES;
}

- (BOOL) _nodeIdIsSet {
  return ___nodeId_isset;
}

- (void) unset_nodeId {
  ___nodeId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self set_homeId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self set_nodeId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"RequestNodeDynamic_args"];
  if (___homeId_isset) {
    [outProtocol writeFieldBeginWithName: @"_homeId" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: ___homeId];
    [outProtocol writeFieldEnd];
  }
  if (___nodeId_isset) {
    [outProtocol writeFieldBeginWithName: @"_nodeId" type: TType_BYTE fieldID: 2];
    [outProtocol writeByte: ___nodeId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RequestNodeDynamic_args("];
  [ms appendString: @"_homeId:"];
  [ms appendFormat: @"%i", ___homeId];
  [ms appendString: @",_nodeId:"];
  [ms appendFormat: @"%i", ___nodeId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveRequestNodeDynamic_result : NSObject <NSCoding> {
  BOOL __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) BOOL success;
#endif

- (id) init;
- (id) initWithSuccess: (BOOL) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (BOOL) success;
- (void) setSuccess: (BOOL) success;
#endif
- (BOOL) successIsSet;

@end

@implementation OpenZWaveRequestNodeDynamic_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (BOOL) success
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeBoolForKey: @"success"];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeBool: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (BOOL) success {
  return __success;
}

- (void) setSuccess: (BOOL) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"RequestNodeDynamic_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
    [outProtocol writeBool: __success];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RequestNodeDynamic_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveIsNodeListeningDevice_args : NSObject <NSCoding> {
  int32_t ___homeId;
  uint8_t ___nodeId;

  BOOL ___homeId_isset;
  BOOL ___nodeId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=_homeId, setter=set_homeId:) int32_t _homeId;
@property (nonatomic, getter=_nodeId, setter=set_nodeId:) uint8_t _nodeId;
#endif

- (id) init;
- (id) initWith_homeId: (int32_t) _homeId _nodeId: (uint8_t) _nodeId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (int32_t) _homeId;
- (void) set_homeId: (int32_t) _homeId;
#endif
- (BOOL) _homeIdIsSet;

#if !__has_feature(objc_arc)
- (uint8_t) _nodeId;
- (void) set_nodeId: (uint8_t) _nodeId;
#endif
- (BOOL) _nodeIdIsSet;

@end

@implementation OpenZWaveIsNodeListeningDevice_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_homeId: (int32_t) _homeId _nodeId: (uint8_t) _nodeId
{
  self = [super init];
  ___homeId = _homeId;
  ___homeId_isset = YES;
  ___nodeId = _nodeId;
  ___nodeId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_homeId"])
  {
    ___homeId = [decoder decodeInt32ForKey: @"_homeId"];
    ___homeId_isset = YES;
  }
  if ([decoder containsValueForKey: @"_nodeId"])
  {
    ___nodeId = [decoder decodeIntForKey: @"_nodeId"];
    ___nodeId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___homeId_isset)
  {
    [encoder encodeInt32: ___homeId forKey: @"_homeId"];
  }
  if (___nodeId_isset)
  {
    [encoder encodeInt: ___nodeId forKey: @"_nodeId"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (int32_t) _homeId {
  return ___homeId;
}

- (void) set_homeId: (int32_t) _homeId {
  ___homeId = _homeId;
  ___homeId_isset = YES;
}

- (BOOL) _homeIdIsSet {
  return ___homeId_isset;
}

- (void) unset_homeId {
  ___homeId_isset = NO;
}

- (uint8_t) _nodeId {
  return ___nodeId;
}

- (void) set_nodeId: (uint8_t) _nodeId {
  ___nodeId = _nodeId;
  ___nodeId_isset = YES;
}

- (BOOL) _nodeIdIsSet {
  return ___nodeId_isset;
}

- (void) unset_nodeId {
  ___nodeId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self set_homeId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self set_nodeId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"IsNodeListeningDevice_args"];
  if (___homeId_isset) {
    [outProtocol writeFieldBeginWithName: @"_homeId" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: ___homeId];
    [outProtocol writeFieldEnd];
  }
  if (___nodeId_isset) {
    [outProtocol writeFieldBeginWithName: @"_nodeId" type: TType_BYTE fieldID: 2];
    [outProtocol writeByte: ___nodeId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"IsNodeListeningDevice_args("];
  [ms appendString: @"_homeId:"];
  [ms appendFormat: @"%i", ___homeId];
  [ms appendString: @",_nodeId:"];
  [ms appendFormat: @"%i", ___nodeId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveIsNodeListeningDevice_result : NSObject <NSCoding> {
  BOOL __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) BOOL success;
#endif

- (id) init;
- (id) initWithSuccess: (BOOL) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (BOOL) success;
- (void) setSuccess: (BOOL) success;
#endif
- (BOOL) successIsSet;

@end

@implementation OpenZWaveIsNodeListeningDevice_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (BOOL) success
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeBoolForKey: @"success"];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeBool: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (BOOL) success {
  return __success;
}

- (void) setSuccess: (BOOL) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"IsNodeListeningDevice_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
    [outProtocol writeBool: __success];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"IsNodeListeningDevice_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveIsNodeFrequentListeningDevice_args : NSObject <NSCoding> {
  int32_t ___homeId;
  uint8_t ___nodeId;

  BOOL ___homeId_isset;
  BOOL ___nodeId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=_homeId, setter=set_homeId:) int32_t _homeId;
@property (nonatomic, getter=_nodeId, setter=set_nodeId:) uint8_t _nodeId;
#endif

- (id) init;
- (id) initWith_homeId: (int32_t) _homeId _nodeId: (uint8_t) _nodeId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (int32_t) _homeId;
- (void) set_homeId: (int32_t) _homeId;
#endif
- (BOOL) _homeIdIsSet;

#if !__has_feature(objc_arc)
- (uint8_t) _nodeId;
- (void) set_nodeId: (uint8_t) _nodeId;
#endif
- (BOOL) _nodeIdIsSet;

@end

@implementation OpenZWaveIsNodeFrequentListeningDevice_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_homeId: (int32_t) _homeId _nodeId: (uint8_t) _nodeId
{
  self = [super init];
  ___homeId = _homeId;
  ___homeId_isset = YES;
  ___nodeId = _nodeId;
  ___nodeId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_homeId"])
  {
    ___homeId = [decoder decodeInt32ForKey: @"_homeId"];
    ___homeId_isset = YES;
  }
  if ([decoder containsValueForKey: @"_nodeId"])
  {
    ___nodeId = [decoder decodeIntForKey: @"_nodeId"];
    ___nodeId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___homeId_isset)
  {
    [encoder encodeInt32: ___homeId forKey: @"_homeId"];
  }
  if (___nodeId_isset)
  {
    [encoder encodeInt: ___nodeId forKey: @"_nodeId"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (int32_t) _homeId {
  return ___homeId;
}

- (void) set_homeId: (int32_t) _homeId {
  ___homeId = _homeId;
  ___homeId_isset = YES;
}

- (BOOL) _homeIdIsSet {
  return ___homeId_isset;
}

- (void) unset_homeId {
  ___homeId_isset = NO;
}

- (uint8_t) _nodeId {
  return ___nodeId;
}

- (void) set_nodeId: (uint8_t) _nodeId {
  ___nodeId = _nodeId;
  ___nodeId_isset = YES;
}

- (BOOL) _nodeIdIsSet {
  return ___nodeId_isset;
}

- (void) unset_nodeId {
  ___nodeId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self set_homeId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self set_nodeId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"IsNodeFrequentListeningDevice_args"];
  if (___homeId_isset) {
    [outProtocol writeFieldBeginWithName: @"_homeId" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: ___homeId];
    [outProtocol writeFieldEnd];
  }
  if (___nodeId_isset) {
    [outProtocol writeFieldBeginWithName: @"_nodeId" type: TType_BYTE fieldID: 2];
    [outProtocol writeByte: ___nodeId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"IsNodeFrequentListeningDevice_args("];
  [ms appendString: @"_homeId:"];
  [ms appendFormat: @"%i", ___homeId];
  [ms appendString: @",_nodeId:"];
  [ms appendFormat: @"%i", ___nodeId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveIsNodeFrequentListeningDevice_result : NSObject <NSCoding> {
  BOOL __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) BOOL success;
#endif

- (id) init;
- (id) initWithSuccess: (BOOL) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (BOOL) success;
- (void) setSuccess: (BOOL) success;
#endif
- (BOOL) successIsSet;

@end

@implementation OpenZWaveIsNodeFrequentListeningDevice_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (BOOL) success
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeBoolForKey: @"success"];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeBool: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (BOOL) success {
  return __success;
}

- (void) setSuccess: (BOOL) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"IsNodeFrequentListeningDevice_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
    [outProtocol writeBool: __success];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"IsNodeFrequentListeningDevice_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveIsNodeBeamingDevice_args : NSObject <NSCoding> {
  int32_t ___homeId;
  uint8_t ___nodeId;

  BOOL ___homeId_isset;
  BOOL ___nodeId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=_homeId, setter=set_homeId:) int32_t _homeId;
@property (nonatomic, getter=_nodeId, setter=set_nodeId:) uint8_t _nodeId;
#endif

- (id) init;
- (id) initWith_homeId: (int32_t) _homeId _nodeId: (uint8_t) _nodeId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (int32_t) _homeId;
- (void) set_homeId: (int32_t) _homeId;
#endif
- (BOOL) _homeIdIsSet;

#if !__has_feature(objc_arc)
- (uint8_t) _nodeId;
- (void) set_nodeId: (uint8_t) _nodeId;
#endif
- (BOOL) _nodeIdIsSet;

@end

@implementation OpenZWaveIsNodeBeamingDevice_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_homeId: (int32_t) _homeId _nodeId: (uint8_t) _nodeId
{
  self = [super init];
  ___homeId = _homeId;
  ___homeId_isset = YES;
  ___nodeId = _nodeId;
  ___nodeId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_homeId"])
  {
    ___homeId = [decoder decodeInt32ForKey: @"_homeId"];
    ___homeId_isset = YES;
  }
  if ([decoder containsValueForKey: @"_nodeId"])
  {
    ___nodeId = [decoder decodeIntForKey: @"_nodeId"];
    ___nodeId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___homeId_isset)
  {
    [encoder encodeInt32: ___homeId forKey: @"_homeId"];
  }
  if (___nodeId_isset)
  {
    [encoder encodeInt: ___nodeId forKey: @"_nodeId"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (int32_t) _homeId {
  return ___homeId;
}

- (void) set_homeId: (int32_t) _homeId {
  ___homeId = _homeId;
  ___homeId_isset = YES;
}

- (BOOL) _homeIdIsSet {
  return ___homeId_isset;
}

- (void) unset_homeId {
  ___homeId_isset = NO;
}

- (uint8_t) _nodeId {
  return ___nodeId;
}

- (void) set_nodeId: (uint8_t) _nodeId {
  ___nodeId = _nodeId;
  ___nodeId_isset = YES;
}

- (BOOL) _nodeIdIsSet {
  return ___nodeId_isset;
}

- (void) unset_nodeId {
  ___nodeId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self set_homeId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self set_nodeId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"IsNodeBeamingDevice_args"];
  if (___homeId_isset) {
    [outProtocol writeFieldBeginWithName: @"_homeId" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: ___homeId];
    [outProtocol writeFieldEnd];
  }
  if (___nodeId_isset) {
    [outProtocol writeFieldBeginWithName: @"_nodeId" type: TType_BYTE fieldID: 2];
    [outProtocol writeByte: ___nodeId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"IsNodeBeamingDevice_args("];
  [ms appendString: @"_homeId:"];
  [ms appendFormat: @"%i", ___homeId];
  [ms appendString: @",_nodeId:"];
  [ms appendFormat: @"%i", ___nodeId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveIsNodeBeamingDevice_result : NSObject <NSCoding> {
  BOOL __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) BOOL success;
#endif

- (id) init;
- (id) initWithSuccess: (BOOL) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (BOOL) success;
- (void) setSuccess: (BOOL) success;
#endif
- (BOOL) successIsSet;

@end

@implementation OpenZWaveIsNodeBeamingDevice_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (BOOL) success
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeBoolForKey: @"success"];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeBool: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (BOOL) success {
  return __success;
}

- (void) setSuccess: (BOOL) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"IsNodeBeamingDevice_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
    [outProtocol writeBool: __success];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"IsNodeBeamingDevice_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveIsNodeRoutingDevice_args : NSObject <NSCoding> {
  int32_t ___homeId;
  uint8_t ___nodeId;

  BOOL ___homeId_isset;
  BOOL ___nodeId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=_homeId, setter=set_homeId:) int32_t _homeId;
@property (nonatomic, getter=_nodeId, setter=set_nodeId:) uint8_t _nodeId;
#endif

- (id) init;
- (id) initWith_homeId: (int32_t) _homeId _nodeId: (uint8_t) _nodeId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (int32_t) _homeId;
- (void) set_homeId: (int32_t) _homeId;
#endif
- (BOOL) _homeIdIsSet;

#if !__has_feature(objc_arc)
- (uint8_t) _nodeId;
- (void) set_nodeId: (uint8_t) _nodeId;
#endif
- (BOOL) _nodeIdIsSet;

@end

@implementation OpenZWaveIsNodeRoutingDevice_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_homeId: (int32_t) _homeId _nodeId: (uint8_t) _nodeId
{
  self = [super init];
  ___homeId = _homeId;
  ___homeId_isset = YES;
  ___nodeId = _nodeId;
  ___nodeId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_homeId"])
  {
    ___homeId = [decoder decodeInt32ForKey: @"_homeId"];
    ___homeId_isset = YES;
  }
  if ([decoder containsValueForKey: @"_nodeId"])
  {
    ___nodeId = [decoder decodeIntForKey: @"_nodeId"];
    ___nodeId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___homeId_isset)
  {
    [encoder encodeInt32: ___homeId forKey: @"_homeId"];
  }
  if (___nodeId_isset)
  {
    [encoder encodeInt: ___nodeId forKey: @"_nodeId"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (int32_t) _homeId {
  return ___homeId;
}

- (void) set_homeId: (int32_t) _homeId {
  ___homeId = _homeId;
  ___homeId_isset = YES;
}

- (BOOL) _homeIdIsSet {
  return ___homeId_isset;
}

- (void) unset_homeId {
  ___homeId_isset = NO;
}

- (uint8_t) _nodeId {
  return ___nodeId;
}

- (void) set_nodeId: (uint8_t) _nodeId {
  ___nodeId = _nodeId;
  ___nodeId_isset = YES;
}

- (BOOL) _nodeIdIsSet {
  return ___nodeId_isset;
}

- (void) unset_nodeId {
  ___nodeId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self set_homeId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self set_nodeId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"IsNodeRoutingDevice_args"];
  if (___homeId_isset) {
    [outProtocol writeFieldBeginWithName: @"_homeId" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: ___homeId];
    [outProtocol writeFieldEnd];
  }
  if (___nodeId_isset) {
    [outProtocol writeFieldBeginWithName: @"_nodeId" type: TType_BYTE fieldID: 2];
    [outProtocol writeByte: ___nodeId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"IsNodeRoutingDevice_args("];
  [ms appendString: @"_homeId:"];
  [ms appendFormat: @"%i", ___homeId];
  [ms appendString: @",_nodeId:"];
  [ms appendFormat: @"%i", ___nodeId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveIsNodeRoutingDevice_result : NSObject <NSCoding> {
  BOOL __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) BOOL success;
#endif

- (id) init;
- (id) initWithSuccess: (BOOL) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (BOOL) success;
- (void) setSuccess: (BOOL) success;
#endif
- (BOOL) successIsSet;

@end

@implementation OpenZWaveIsNodeRoutingDevice_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (BOOL) success
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeBoolForKey: @"success"];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeBool: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (BOOL) success {
  return __success;
}

- (void) setSuccess: (BOOL) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"IsNodeRoutingDevice_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
    [outProtocol writeBool: __success];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"IsNodeRoutingDevice_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveIsNodeSecurityDevice_args : NSObject <NSCoding> {
  int32_t ___homeId;
  uint8_t ___nodeId;

  BOOL ___homeId_isset;
  BOOL ___nodeId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=_homeId, setter=set_homeId:) int32_t _homeId;
@property (nonatomic, getter=_nodeId, setter=set_nodeId:) uint8_t _nodeId;
#endif

- (id) init;
- (id) initWith_homeId: (int32_t) _homeId _nodeId: (uint8_t) _nodeId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (int32_t) _homeId;
- (void) set_homeId: (int32_t) _homeId;
#endif
- (BOOL) _homeIdIsSet;

#if !__has_feature(objc_arc)
- (uint8_t) _nodeId;
- (void) set_nodeId: (uint8_t) _nodeId;
#endif
- (BOOL) _nodeIdIsSet;

@end

@implementation OpenZWaveIsNodeSecurityDevice_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_homeId: (int32_t) _homeId _nodeId: (uint8_t) _nodeId
{
  self = [super init];
  ___homeId = _homeId;
  ___homeId_isset = YES;
  ___nodeId = _nodeId;
  ___nodeId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_homeId"])
  {
    ___homeId = [decoder decodeInt32ForKey: @"_homeId"];
    ___homeId_isset = YES;
  }
  if ([decoder containsValueForKey: @"_nodeId"])
  {
    ___nodeId = [decoder decodeIntForKey: @"_nodeId"];
    ___nodeId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___homeId_isset)
  {
    [encoder encodeInt32: ___homeId forKey: @"_homeId"];
  }
  if (___nodeId_isset)
  {
    [encoder encodeInt: ___nodeId forKey: @"_nodeId"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (int32_t) _homeId {
  return ___homeId;
}

- (void) set_homeId: (int32_t) _homeId {
  ___homeId = _homeId;
  ___homeId_isset = YES;
}

- (BOOL) _homeIdIsSet {
  return ___homeId_isset;
}

- (void) unset_homeId {
  ___homeId_isset = NO;
}

- (uint8_t) _nodeId {
  return ___nodeId;
}

- (void) set_nodeId: (uint8_t) _nodeId {
  ___nodeId = _nodeId;
  ___nodeId_isset = YES;
}

- (BOOL) _nodeIdIsSet {
  return ___nodeId_isset;
}

- (void) unset_nodeId {
  ___nodeId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self set_homeId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self set_nodeId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"IsNodeSecurityDevice_args"];
  if (___homeId_isset) {
    [outProtocol writeFieldBeginWithName: @"_homeId" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: ___homeId];
    [outProtocol writeFieldEnd];
  }
  if (___nodeId_isset) {
    [outProtocol writeFieldBeginWithName: @"_nodeId" type: TType_BYTE fieldID: 2];
    [outProtocol writeByte: ___nodeId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"IsNodeSecurityDevice_args("];
  [ms appendString: @"_homeId:"];
  [ms appendFormat: @"%i", ___homeId];
  [ms appendString: @",_nodeId:"];
  [ms appendFormat: @"%i", ___nodeId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveIsNodeSecurityDevice_result : NSObject <NSCoding> {
  BOOL __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) BOOL success;
#endif

- (id) init;
- (id) initWithSuccess: (BOOL) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (BOOL) success;
- (void) setSuccess: (BOOL) success;
#endif
- (BOOL) successIsSet;

@end

@implementation OpenZWaveIsNodeSecurityDevice_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (BOOL) success
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeBoolForKey: @"success"];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeBool: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (BOOL) success {
  return __success;
}

- (void) setSuccess: (BOOL) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"IsNodeSecurityDevice_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
    [outProtocol writeBool: __success];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"IsNodeSecurityDevice_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveGetNodeMaxBaudRate_args : NSObject <NSCoding> {
  int32_t ___homeId;
  uint8_t ___nodeId;

  BOOL ___homeId_isset;
  BOOL ___nodeId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=_homeId, setter=set_homeId:) int32_t _homeId;
@property (nonatomic, getter=_nodeId, setter=set_nodeId:) uint8_t _nodeId;
#endif

- (id) init;
- (id) initWith_homeId: (int32_t) _homeId _nodeId: (uint8_t) _nodeId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (int32_t) _homeId;
- (void) set_homeId: (int32_t) _homeId;
#endif
- (BOOL) _homeIdIsSet;

#if !__has_feature(objc_arc)
- (uint8_t) _nodeId;
- (void) set_nodeId: (uint8_t) _nodeId;
#endif
- (BOOL) _nodeIdIsSet;

@end

@implementation OpenZWaveGetNodeMaxBaudRate_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_homeId: (int32_t) _homeId _nodeId: (uint8_t) _nodeId
{
  self = [super init];
  ___homeId = _homeId;
  ___homeId_isset = YES;
  ___nodeId = _nodeId;
  ___nodeId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_homeId"])
  {
    ___homeId = [decoder decodeInt32ForKey: @"_homeId"];
    ___homeId_isset = YES;
  }
  if ([decoder containsValueForKey: @"_nodeId"])
  {
    ___nodeId = [decoder decodeIntForKey: @"_nodeId"];
    ___nodeId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___homeId_isset)
  {
    [encoder encodeInt32: ___homeId forKey: @"_homeId"];
  }
  if (___nodeId_isset)
  {
    [encoder encodeInt: ___nodeId forKey: @"_nodeId"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (int32_t) _homeId {
  return ___homeId;
}

- (void) set_homeId: (int32_t) _homeId {
  ___homeId = _homeId;
  ___homeId_isset = YES;
}

- (BOOL) _homeIdIsSet {
  return ___homeId_isset;
}

- (void) unset_homeId {
  ___homeId_isset = NO;
}

- (uint8_t) _nodeId {
  return ___nodeId;
}

- (void) set_nodeId: (uint8_t) _nodeId {
  ___nodeId = _nodeId;
  ___nodeId_isset = YES;
}

- (BOOL) _nodeIdIsSet {
  return ___nodeId_isset;
}

- (void) unset_nodeId {
  ___nodeId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self set_homeId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self set_nodeId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetNodeMaxBaudRate_args"];
  if (___homeId_isset) {
    [outProtocol writeFieldBeginWithName: @"_homeId" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: ___homeId];
    [outProtocol writeFieldEnd];
  }
  if (___nodeId_isset) {
    [outProtocol writeFieldBeginWithName: @"_nodeId" type: TType_BYTE fieldID: 2];
    [outProtocol writeByte: ___nodeId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetNodeMaxBaudRate_args("];
  [ms appendString: @"_homeId:"];
  [ms appendFormat: @"%i", ___homeId];
  [ms appendString: @",_nodeId:"];
  [ms appendFormat: @"%i", ___nodeId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveGetNodeMaxBaudRate_result : NSObject <NSCoding> {
  int32_t __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) int32_t success;
#endif

- (id) init;
- (id) initWithSuccess: (int32_t) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (int32_t) success;
- (void) setSuccess: (int32_t) success;
#endif
- (BOOL) successIsSet;

@end

@implementation OpenZWaveGetNodeMaxBaudRate_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (int32_t) success
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeInt32ForKey: @"success"];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeInt32: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (int32_t) success {
  return __success;
}

- (void) setSuccess: (int32_t) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetNodeMaxBaudRate_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_I32 fieldID: 0];
    [outProtocol writeI32: __success];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetNodeMaxBaudRate_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveGetNodeVersion_args : NSObject <NSCoding> {
  int32_t ___homeId;
  uint8_t ___nodeId;

  BOOL ___homeId_isset;
  BOOL ___nodeId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=_homeId, setter=set_homeId:) int32_t _homeId;
@property (nonatomic, getter=_nodeId, setter=set_nodeId:) uint8_t _nodeId;
#endif

- (id) init;
- (id) initWith_homeId: (int32_t) _homeId _nodeId: (uint8_t) _nodeId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (int32_t) _homeId;
- (void) set_homeId: (int32_t) _homeId;
#endif
- (BOOL) _homeIdIsSet;

#if !__has_feature(objc_arc)
- (uint8_t) _nodeId;
- (void) set_nodeId: (uint8_t) _nodeId;
#endif
- (BOOL) _nodeIdIsSet;

@end

@implementation OpenZWaveGetNodeVersion_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_homeId: (int32_t) _homeId _nodeId: (uint8_t) _nodeId
{
  self = [super init];
  ___homeId = _homeId;
  ___homeId_isset = YES;
  ___nodeId = _nodeId;
  ___nodeId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_homeId"])
  {
    ___homeId = [decoder decodeInt32ForKey: @"_homeId"];
    ___homeId_isset = YES;
  }
  if ([decoder containsValueForKey: @"_nodeId"])
  {
    ___nodeId = [decoder decodeIntForKey: @"_nodeId"];
    ___nodeId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___homeId_isset)
  {
    [encoder encodeInt32: ___homeId forKey: @"_homeId"];
  }
  if (___nodeId_isset)
  {
    [encoder encodeInt: ___nodeId forKey: @"_nodeId"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (int32_t) _homeId {
  return ___homeId;
}

- (void) set_homeId: (int32_t) _homeId {
  ___homeId = _homeId;
  ___homeId_isset = YES;
}

- (BOOL) _homeIdIsSet {
  return ___homeId_isset;
}

- (void) unset_homeId {
  ___homeId_isset = NO;
}

- (uint8_t) _nodeId {
  return ___nodeId;
}

- (void) set_nodeId: (uint8_t) _nodeId {
  ___nodeId = _nodeId;
  ___nodeId_isset = YES;
}

- (BOOL) _nodeIdIsSet {
  return ___nodeId_isset;
}

- (void) unset_nodeId {
  ___nodeId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self set_homeId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self set_nodeId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetNodeVersion_args"];
  if (___homeId_isset) {
    [outProtocol writeFieldBeginWithName: @"_homeId" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: ___homeId];
    [outProtocol writeFieldEnd];
  }
  if (___nodeId_isset) {
    [outProtocol writeFieldBeginWithName: @"_nodeId" type: TType_BYTE fieldID: 2];
    [outProtocol writeByte: ___nodeId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetNodeVersion_args("];
  [ms appendString: @"_homeId:"];
  [ms appendFormat: @"%i", ___homeId];
  [ms appendString: @",_nodeId:"];
  [ms appendFormat: @"%i", ___nodeId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveGetNodeVersion_result : NSObject <NSCoding> {
  uint8_t __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) uint8_t success;
#endif

- (id) init;
- (id) initWithSuccess: (uint8_t) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (uint8_t) success;
- (void) setSuccess: (uint8_t) success;
#endif
- (BOOL) successIsSet;

@end

@implementation OpenZWaveGetNodeVersion_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (uint8_t) success
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeIntForKey: @"success"];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeInt: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (uint8_t) success {
  return __success;
}

- (void) setSuccess: (uint8_t) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetNodeVersion_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_BYTE fieldID: 0];
    [outProtocol writeByte: __success];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetNodeVersion_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveGetNodeSecurity_args : NSObject <NSCoding> {
  int32_t ___homeId;
  uint8_t ___nodeId;

  BOOL ___homeId_isset;
  BOOL ___nodeId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=_homeId, setter=set_homeId:) int32_t _homeId;
@property (nonatomic, getter=_nodeId, setter=set_nodeId:) uint8_t _nodeId;
#endif

- (id) init;
- (id) initWith_homeId: (int32_t) _homeId _nodeId: (uint8_t) _nodeId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (int32_t) _homeId;
- (void) set_homeId: (int32_t) _homeId;
#endif
- (BOOL) _homeIdIsSet;

#if !__has_feature(objc_arc)
- (uint8_t) _nodeId;
- (void) set_nodeId: (uint8_t) _nodeId;
#endif
- (BOOL) _nodeIdIsSet;

@end

@implementation OpenZWaveGetNodeSecurity_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_homeId: (int32_t) _homeId _nodeId: (uint8_t) _nodeId
{
  self = [super init];
  ___homeId = _homeId;
  ___homeId_isset = YES;
  ___nodeId = _nodeId;
  ___nodeId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_homeId"])
  {
    ___homeId = [decoder decodeInt32ForKey: @"_homeId"];
    ___homeId_isset = YES;
  }
  if ([decoder containsValueForKey: @"_nodeId"])
  {
    ___nodeId = [decoder decodeIntForKey: @"_nodeId"];
    ___nodeId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___homeId_isset)
  {
    [encoder encodeInt32: ___homeId forKey: @"_homeId"];
  }
  if (___nodeId_isset)
  {
    [encoder encodeInt: ___nodeId forKey: @"_nodeId"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (int32_t) _homeId {
  return ___homeId;
}

- (void) set_homeId: (int32_t) _homeId {
  ___homeId = _homeId;
  ___homeId_isset = YES;
}

- (BOOL) _homeIdIsSet {
  return ___homeId_isset;
}

- (void) unset_homeId {
  ___homeId_isset = NO;
}

- (uint8_t) _nodeId {
  return ___nodeId;
}

- (void) set_nodeId: (uint8_t) _nodeId {
  ___nodeId = _nodeId;
  ___nodeId_isset = YES;
}

- (BOOL) _nodeIdIsSet {
  return ___nodeId_isset;
}

- (void) unset_nodeId {
  ___nodeId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self set_homeId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self set_nodeId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetNodeSecurity_args"];
  if (___homeId_isset) {
    [outProtocol writeFieldBeginWithName: @"_homeId" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: ___homeId];
    [outProtocol writeFieldEnd];
  }
  if (___nodeId_isset) {
    [outProtocol writeFieldBeginWithName: @"_nodeId" type: TType_BYTE fieldID: 2];
    [outProtocol writeByte: ___nodeId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetNodeSecurity_args("];
  [ms appendString: @"_homeId:"];
  [ms appendFormat: @"%i", ___homeId];
  [ms appendString: @",_nodeId:"];
  [ms appendFormat: @"%i", ___nodeId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveGetNodeSecurity_result : NSObject <NSCoding> {
  uint8_t __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) uint8_t success;
#endif

- (id) init;
- (id) initWithSuccess: (uint8_t) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (uint8_t) success;
- (void) setSuccess: (uint8_t) success;
#endif
- (BOOL) successIsSet;

@end

@implementation OpenZWaveGetNodeSecurity_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (uint8_t) success
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeIntForKey: @"success"];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeInt: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (uint8_t) success {
  return __success;
}

- (void) setSuccess: (uint8_t) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetNodeSecurity_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_BYTE fieldID: 0];
    [outProtocol writeByte: __success];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetNodeSecurity_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveGetNodeBasic_args : NSObject <NSCoding> {
  int32_t ___homeId;
  uint8_t ___nodeId;

  BOOL ___homeId_isset;
  BOOL ___nodeId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=_homeId, setter=set_homeId:) int32_t _homeId;
@property (nonatomic, getter=_nodeId, setter=set_nodeId:) uint8_t _nodeId;
#endif

- (id) init;
- (id) initWith_homeId: (int32_t) _homeId _nodeId: (uint8_t) _nodeId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (int32_t) _homeId;
- (void) set_homeId: (int32_t) _homeId;
#endif
- (BOOL) _homeIdIsSet;

#if !__has_feature(objc_arc)
- (uint8_t) _nodeId;
- (void) set_nodeId: (uint8_t) _nodeId;
#endif
- (BOOL) _nodeIdIsSet;

@end

@implementation OpenZWaveGetNodeBasic_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_homeId: (int32_t) _homeId _nodeId: (uint8_t) _nodeId
{
  self = [super init];
  ___homeId = _homeId;
  ___homeId_isset = YES;
  ___nodeId = _nodeId;
  ___nodeId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_homeId"])
  {
    ___homeId = [decoder decodeInt32ForKey: @"_homeId"];
    ___homeId_isset = YES;
  }
  if ([decoder containsValueForKey: @"_nodeId"])
  {
    ___nodeId = [decoder decodeIntForKey: @"_nodeId"];
    ___nodeId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___homeId_isset)
  {
    [encoder encodeInt32: ___homeId forKey: @"_homeId"];
  }
  if (___nodeId_isset)
  {
    [encoder encodeInt: ___nodeId forKey: @"_nodeId"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (int32_t) _homeId {
  return ___homeId;
}

- (void) set_homeId: (int32_t) _homeId {
  ___homeId = _homeId;
  ___homeId_isset = YES;
}

- (BOOL) _homeIdIsSet {
  return ___homeId_isset;
}

- (void) unset_homeId {
  ___homeId_isset = NO;
}

- (uint8_t) _nodeId {
  return ___nodeId;
}

- (void) set_nodeId: (uint8_t) _nodeId {
  ___nodeId = _nodeId;
  ___nodeId_isset = YES;
}

- (BOOL) _nodeIdIsSet {
  return ___nodeId_isset;
}

- (void) unset_nodeId {
  ___nodeId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self set_homeId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self set_nodeId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetNodeBasic_args"];
  if (___homeId_isset) {
    [outProtocol writeFieldBeginWithName: @"_homeId" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: ___homeId];
    [outProtocol writeFieldEnd];
  }
  if (___nodeId_isset) {
    [outProtocol writeFieldBeginWithName: @"_nodeId" type: TType_BYTE fieldID: 2];
    [outProtocol writeByte: ___nodeId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetNodeBasic_args("];
  [ms appendString: @"_homeId:"];
  [ms appendFormat: @"%i", ___homeId];
  [ms appendString: @",_nodeId:"];
  [ms appendFormat: @"%i", ___nodeId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveGetNodeBasic_result : NSObject <NSCoding> {
  uint8_t __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) uint8_t success;
#endif

- (id) init;
- (id) initWithSuccess: (uint8_t) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (uint8_t) success;
- (void) setSuccess: (uint8_t) success;
#endif
- (BOOL) successIsSet;

@end

@implementation OpenZWaveGetNodeBasic_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (uint8_t) success
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeIntForKey: @"success"];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeInt: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (uint8_t) success {
  return __success;
}

- (void) setSuccess: (uint8_t) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetNodeBasic_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_BYTE fieldID: 0];
    [outProtocol writeByte: __success];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetNodeBasic_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveGetNodeGeneric_args : NSObject <NSCoding> {
  int32_t ___homeId;
  uint8_t ___nodeId;

  BOOL ___homeId_isset;
  BOOL ___nodeId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=_homeId, setter=set_homeId:) int32_t _homeId;
@property (nonatomic, getter=_nodeId, setter=set_nodeId:) uint8_t _nodeId;
#endif

- (id) init;
- (id) initWith_homeId: (int32_t) _homeId _nodeId: (uint8_t) _nodeId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (int32_t) _homeId;
- (void) set_homeId: (int32_t) _homeId;
#endif
- (BOOL) _homeIdIsSet;

#if !__has_feature(objc_arc)
- (uint8_t) _nodeId;
- (void) set_nodeId: (uint8_t) _nodeId;
#endif
- (BOOL) _nodeIdIsSet;

@end

@implementation OpenZWaveGetNodeGeneric_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_homeId: (int32_t) _homeId _nodeId: (uint8_t) _nodeId
{
  self = [super init];
  ___homeId = _homeId;
  ___homeId_isset = YES;
  ___nodeId = _nodeId;
  ___nodeId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_homeId"])
  {
    ___homeId = [decoder decodeInt32ForKey: @"_homeId"];
    ___homeId_isset = YES;
  }
  if ([decoder containsValueForKey: @"_nodeId"])
  {
    ___nodeId = [decoder decodeIntForKey: @"_nodeId"];
    ___nodeId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___homeId_isset)
  {
    [encoder encodeInt32: ___homeId forKey: @"_homeId"];
  }
  if (___nodeId_isset)
  {
    [encoder encodeInt: ___nodeId forKey: @"_nodeId"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (int32_t) _homeId {
  return ___homeId;
}

- (void) set_homeId: (int32_t) _homeId {
  ___homeId = _homeId;
  ___homeId_isset = YES;
}

- (BOOL) _homeIdIsSet {
  return ___homeId_isset;
}

- (void) unset_homeId {
  ___homeId_isset = NO;
}

- (uint8_t) _nodeId {
  return ___nodeId;
}

- (void) set_nodeId: (uint8_t) _nodeId {
  ___nodeId = _nodeId;
  ___nodeId_isset = YES;
}

- (BOOL) _nodeIdIsSet {
  return ___nodeId_isset;
}

- (void) unset_nodeId {
  ___nodeId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self set_homeId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self set_nodeId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetNodeGeneric_args"];
  if (___homeId_isset) {
    [outProtocol writeFieldBeginWithName: @"_homeId" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: ___homeId];
    [outProtocol writeFieldEnd];
  }
  if (___nodeId_isset) {
    [outProtocol writeFieldBeginWithName: @"_nodeId" type: TType_BYTE fieldID: 2];
    [outProtocol writeByte: ___nodeId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetNodeGeneric_args("];
  [ms appendString: @"_homeId:"];
  [ms appendFormat: @"%i", ___homeId];
  [ms appendString: @",_nodeId:"];
  [ms appendFormat: @"%i", ___nodeId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveGetNodeGeneric_result : NSObject <NSCoding> {
  uint8_t __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) uint8_t success;
#endif

- (id) init;
- (id) initWithSuccess: (uint8_t) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (uint8_t) success;
- (void) setSuccess: (uint8_t) success;
#endif
- (BOOL) successIsSet;

@end

@implementation OpenZWaveGetNodeGeneric_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (uint8_t) success
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeIntForKey: @"success"];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeInt: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (uint8_t) success {
  return __success;
}

- (void) setSuccess: (uint8_t) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetNodeGeneric_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_BYTE fieldID: 0];
    [outProtocol writeByte: __success];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetNodeGeneric_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveGetNodeSpecific_args : NSObject <NSCoding> {
  int32_t ___homeId;
  uint8_t ___nodeId;

  BOOL ___homeId_isset;
  BOOL ___nodeId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=_homeId, setter=set_homeId:) int32_t _homeId;
@property (nonatomic, getter=_nodeId, setter=set_nodeId:) uint8_t _nodeId;
#endif

- (id) init;
- (id) initWith_homeId: (int32_t) _homeId _nodeId: (uint8_t) _nodeId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (int32_t) _homeId;
- (void) set_homeId: (int32_t) _homeId;
#endif
- (BOOL) _homeIdIsSet;

#if !__has_feature(objc_arc)
- (uint8_t) _nodeId;
- (void) set_nodeId: (uint8_t) _nodeId;
#endif
- (BOOL) _nodeIdIsSet;

@end

@implementation OpenZWaveGetNodeSpecific_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_homeId: (int32_t) _homeId _nodeId: (uint8_t) _nodeId
{
  self = [super init];
  ___homeId = _homeId;
  ___homeId_isset = YES;
  ___nodeId = _nodeId;
  ___nodeId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_homeId"])
  {
    ___homeId = [decoder decodeInt32ForKey: @"_homeId"];
    ___homeId_isset = YES;
  }
  if ([decoder containsValueForKey: @"_nodeId"])
  {
    ___nodeId = [decoder decodeIntForKey: @"_nodeId"];
    ___nodeId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___homeId_isset)
  {
    [encoder encodeInt32: ___homeId forKey: @"_homeId"];
  }
  if (___nodeId_isset)
  {
    [encoder encodeInt: ___nodeId forKey: @"_nodeId"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (int32_t) _homeId {
  return ___homeId;
}

- (void) set_homeId: (int32_t) _homeId {
  ___homeId = _homeId;
  ___homeId_isset = YES;
}

- (BOOL) _homeIdIsSet {
  return ___homeId_isset;
}

- (void) unset_homeId {
  ___homeId_isset = NO;
}

- (uint8_t) _nodeId {
  return ___nodeId;
}

- (void) set_nodeId: (uint8_t) _nodeId {
  ___nodeId = _nodeId;
  ___nodeId_isset = YES;
}

- (BOOL) _nodeIdIsSet {
  return ___nodeId_isset;
}

- (void) unset_nodeId {
  ___nodeId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self set_homeId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self set_nodeId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetNodeSpecific_args"];
  if (___homeId_isset) {
    [outProtocol writeFieldBeginWithName: @"_homeId" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: ___homeId];
    [outProtocol writeFieldEnd];
  }
  if (___nodeId_isset) {
    [outProtocol writeFieldBeginWithName: @"_nodeId" type: TType_BYTE fieldID: 2];
    [outProtocol writeByte: ___nodeId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetNodeSpecific_args("];
  [ms appendString: @"_homeId:"];
  [ms appendFormat: @"%i", ___homeId];
  [ms appendString: @",_nodeId:"];
  [ms appendFormat: @"%i", ___nodeId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveGetNodeSpecific_result : NSObject <NSCoding> {
  uint8_t __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) uint8_t success;
#endif

- (id) init;
- (id) initWithSuccess: (uint8_t) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (uint8_t) success;
- (void) setSuccess: (uint8_t) success;
#endif
- (BOOL) successIsSet;

@end

@implementation OpenZWaveGetNodeSpecific_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (uint8_t) success
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeIntForKey: @"success"];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeInt: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (uint8_t) success {
  return __success;
}

- (void) setSuccess: (uint8_t) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetNodeSpecific_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_BYTE fieldID: 0];
    [outProtocol writeByte: __success];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetNodeSpecific_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveGetNodeType_args : NSObject <NSCoding> {
  int32_t ___homeId;
  uint8_t ___nodeId;

  BOOL ___homeId_isset;
  BOOL ___nodeId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=_homeId, setter=set_homeId:) int32_t _homeId;
@property (nonatomic, getter=_nodeId, setter=set_nodeId:) uint8_t _nodeId;
#endif

- (id) init;
- (id) initWith_homeId: (int32_t) _homeId _nodeId: (uint8_t) _nodeId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (int32_t) _homeId;
- (void) set_homeId: (int32_t) _homeId;
#endif
- (BOOL) _homeIdIsSet;

#if !__has_feature(objc_arc)
- (uint8_t) _nodeId;
- (void) set_nodeId: (uint8_t) _nodeId;
#endif
- (BOOL) _nodeIdIsSet;

@end

@implementation OpenZWaveGetNodeType_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_homeId: (int32_t) _homeId _nodeId: (uint8_t) _nodeId
{
  self = [super init];
  ___homeId = _homeId;
  ___homeId_isset = YES;
  ___nodeId = _nodeId;
  ___nodeId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_homeId"])
  {
    ___homeId = [decoder decodeInt32ForKey: @"_homeId"];
    ___homeId_isset = YES;
  }
  if ([decoder containsValueForKey: @"_nodeId"])
  {
    ___nodeId = [decoder decodeIntForKey: @"_nodeId"];
    ___nodeId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___homeId_isset)
  {
    [encoder encodeInt32: ___homeId forKey: @"_homeId"];
  }
  if (___nodeId_isset)
  {
    [encoder encodeInt: ___nodeId forKey: @"_nodeId"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (int32_t) _homeId {
  return ___homeId;
}

- (void) set_homeId: (int32_t) _homeId {
  ___homeId = _homeId;
  ___homeId_isset = YES;
}

- (BOOL) _homeIdIsSet {
  return ___homeId_isset;
}

- (void) unset_homeId {
  ___homeId_isset = NO;
}

- (uint8_t) _nodeId {
  return ___nodeId;
}

- (void) set_nodeId: (uint8_t) _nodeId {
  ___nodeId = _nodeId;
  ___nodeId_isset = YES;
}

- (BOOL) _nodeIdIsSet {
  return ___nodeId_isset;
}

- (void) unset_nodeId {
  ___nodeId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self set_homeId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self set_nodeId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetNodeType_args"];
  if (___homeId_isset) {
    [outProtocol writeFieldBeginWithName: @"_homeId" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: ___homeId];
    [outProtocol writeFieldEnd];
  }
  if (___nodeId_isset) {
    [outProtocol writeFieldBeginWithName: @"_nodeId" type: TType_BYTE fieldID: 2];
    [outProtocol writeByte: ___nodeId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetNodeType_args("];
  [ms appendString: @"_homeId:"];
  [ms appendFormat: @"%i", ___homeId];
  [ms appendString: @",_nodeId:"];
  [ms appendFormat: @"%i", ___nodeId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveGetNodeType_result : NSObject <NSCoding> {
  NSString * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSString * success;
#endif

- (id) init;
- (id) initWithSuccess: (NSString *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (NSString *) success;
- (void) setSuccess: (NSString *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation OpenZWaveGetNodeType_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NSString *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (NSString *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSString *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetNodeType_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRING fieldID: 0];
      [outProtocol writeString: __success];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetNodeType_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"\"%@\"", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveGetNodeNeighbors_args : NSObject <NSCoding> {
  int32_t ___homeId;
  uint8_t ___nodeId;

  BOOL ___homeId_isset;
  BOOL ___nodeId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=_homeId, setter=set_homeId:) int32_t _homeId;
@property (nonatomic, getter=_nodeId, setter=set_nodeId:) uint8_t _nodeId;
#endif

- (id) init;
- (id) initWith_homeId: (int32_t) _homeId _nodeId: (uint8_t) _nodeId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (int32_t) _homeId;
- (void) set_homeId: (int32_t) _homeId;
#endif
- (BOOL) _homeIdIsSet;

#if !__has_feature(objc_arc)
- (uint8_t) _nodeId;
- (void) set_nodeId: (uint8_t) _nodeId;
#endif
- (BOOL) _nodeIdIsSet;

@end

@implementation OpenZWaveGetNodeNeighbors_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_homeId: (int32_t) _homeId _nodeId: (uint8_t) _nodeId
{
  self = [super init];
  ___homeId = _homeId;
  ___homeId_isset = YES;
  ___nodeId = _nodeId;
  ___nodeId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_homeId"])
  {
    ___homeId = [decoder decodeInt32ForKey: @"_homeId"];
    ___homeId_isset = YES;
  }
  if ([decoder containsValueForKey: @"_nodeId"])
  {
    ___nodeId = [decoder decodeIntForKey: @"_nodeId"];
    ___nodeId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___homeId_isset)
  {
    [encoder encodeInt32: ___homeId forKey: @"_homeId"];
  }
  if (___nodeId_isset)
  {
    [encoder encodeInt: ___nodeId forKey: @"_nodeId"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (int32_t) _homeId {
  return ___homeId;
}

- (void) set_homeId: (int32_t) _homeId {
  ___homeId = _homeId;
  ___homeId_isset = YES;
}

- (BOOL) _homeIdIsSet {
  return ___homeId_isset;
}

- (void) unset_homeId {
  ___homeId_isset = NO;
}

- (uint8_t) _nodeId {
  return ___nodeId;
}

- (void) set_nodeId: (uint8_t) _nodeId {
  ___nodeId = _nodeId;
  ___nodeId_isset = YES;
}

- (BOOL) _nodeIdIsSet {
  return ___nodeId_isset;
}

- (void) unset_nodeId {
  ___nodeId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self set_homeId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self set_nodeId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetNodeNeighbors_args"];
  if (___homeId_isset) {
    [outProtocol writeFieldBeginWithName: @"_homeId" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: ___homeId];
    [outProtocol writeFieldEnd];
  }
  if (___nodeId_isset) {
    [outProtocol writeFieldBeginWithName: @"_nodeId" type: TType_BYTE fieldID: 2];
    [outProtocol writeByte: ___nodeId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetNodeNeighbors_args("];
  [ms appendString: @"_homeId:"];
  [ms appendFormat: @"%i", ___homeId];
  [ms appendString: @",_nodeId:"];
  [ms appendFormat: @"%i", ___nodeId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveGetNodeNeighbors_result : NSObject <NSCoding> {
  OpenZWaveUInt32_ListByte * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) OpenZWaveUInt32_ListByte * success;
#endif

- (id) init;
- (id) initWithSuccess: (OpenZWaveUInt32_ListByte *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (OpenZWaveUInt32_ListByte *) success;
- (void) setSuccess: (OpenZWaveUInt32_ListByte *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation OpenZWaveGetNodeNeighbors_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (OpenZWaveUInt32_ListByte *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (OpenZWaveUInt32_ListByte *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (OpenZWaveUInt32_ListByte *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          OpenZWaveUInt32_ListByte *fieldValue = [[OpenZWaveUInt32_ListByte alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetNodeNeighbors_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetNodeNeighbors_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveGetNodeManufacturerName_args : NSObject <NSCoding> {
  int32_t ___homeId;
  uint8_t ___nodeId;

  BOOL ___homeId_isset;
  BOOL ___nodeId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=_homeId, setter=set_homeId:) int32_t _homeId;
@property (nonatomic, getter=_nodeId, setter=set_nodeId:) uint8_t _nodeId;
#endif

- (id) init;
- (id) initWith_homeId: (int32_t) _homeId _nodeId: (uint8_t) _nodeId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (int32_t) _homeId;
- (void) set_homeId: (int32_t) _homeId;
#endif
- (BOOL) _homeIdIsSet;

#if !__has_feature(objc_arc)
- (uint8_t) _nodeId;
- (void) set_nodeId: (uint8_t) _nodeId;
#endif
- (BOOL) _nodeIdIsSet;

@end

@implementation OpenZWaveGetNodeManufacturerName_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_homeId: (int32_t) _homeId _nodeId: (uint8_t) _nodeId
{
  self = [super init];
  ___homeId = _homeId;
  ___homeId_isset = YES;
  ___nodeId = _nodeId;
  ___nodeId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_homeId"])
  {
    ___homeId = [decoder decodeInt32ForKey: @"_homeId"];
    ___homeId_isset = YES;
  }
  if ([decoder containsValueForKey: @"_nodeId"])
  {
    ___nodeId = [decoder decodeIntForKey: @"_nodeId"];
    ___nodeId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___homeId_isset)
  {
    [encoder encodeInt32: ___homeId forKey: @"_homeId"];
  }
  if (___nodeId_isset)
  {
    [encoder encodeInt: ___nodeId forKey: @"_nodeId"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (int32_t) _homeId {
  return ___homeId;
}

- (void) set_homeId: (int32_t) _homeId {
  ___homeId = _homeId;
  ___homeId_isset = YES;
}

- (BOOL) _homeIdIsSet {
  return ___homeId_isset;
}

- (void) unset_homeId {
  ___homeId_isset = NO;
}

- (uint8_t) _nodeId {
  return ___nodeId;
}

- (void) set_nodeId: (uint8_t) _nodeId {
  ___nodeId = _nodeId;
  ___nodeId_isset = YES;
}

- (BOOL) _nodeIdIsSet {
  return ___nodeId_isset;
}

- (void) unset_nodeId {
  ___nodeId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self set_homeId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self set_nodeId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetNodeManufacturerName_args"];
  if (___homeId_isset) {
    [outProtocol writeFieldBeginWithName: @"_homeId" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: ___homeId];
    [outProtocol writeFieldEnd];
  }
  if (___nodeId_isset) {
    [outProtocol writeFieldBeginWithName: @"_nodeId" type: TType_BYTE fieldID: 2];
    [outProtocol writeByte: ___nodeId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetNodeManufacturerName_args("];
  [ms appendString: @"_homeId:"];
  [ms appendFormat: @"%i", ___homeId];
  [ms appendString: @",_nodeId:"];
  [ms appendFormat: @"%i", ___nodeId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveGetNodeManufacturerName_result : NSObject <NSCoding> {
  NSString * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSString * success;
#endif

- (id) init;
- (id) initWithSuccess: (NSString *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (NSString *) success;
- (void) setSuccess: (NSString *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation OpenZWaveGetNodeManufacturerName_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NSString *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (NSString *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSString *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetNodeManufacturerName_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRING fieldID: 0];
      [outProtocol writeString: __success];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetNodeManufacturerName_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"\"%@\"", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveGetNodeProductName_args : NSObject <NSCoding> {
  int32_t ___homeId;
  uint8_t ___nodeId;

  BOOL ___homeId_isset;
  BOOL ___nodeId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=_homeId, setter=set_homeId:) int32_t _homeId;
@property (nonatomic, getter=_nodeId, setter=set_nodeId:) uint8_t _nodeId;
#endif

- (id) init;
- (id) initWith_homeId: (int32_t) _homeId _nodeId: (uint8_t) _nodeId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (int32_t) _homeId;
- (void) set_homeId: (int32_t) _homeId;
#endif
- (BOOL) _homeIdIsSet;

#if !__has_feature(objc_arc)
- (uint8_t) _nodeId;
- (void) set_nodeId: (uint8_t) _nodeId;
#endif
- (BOOL) _nodeIdIsSet;

@end

@implementation OpenZWaveGetNodeProductName_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_homeId: (int32_t) _homeId _nodeId: (uint8_t) _nodeId
{
  self = [super init];
  ___homeId = _homeId;
  ___homeId_isset = YES;
  ___nodeId = _nodeId;
  ___nodeId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_homeId"])
  {
    ___homeId = [decoder decodeInt32ForKey: @"_homeId"];
    ___homeId_isset = YES;
  }
  if ([decoder containsValueForKey: @"_nodeId"])
  {
    ___nodeId = [decoder decodeIntForKey: @"_nodeId"];
    ___nodeId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___homeId_isset)
  {
    [encoder encodeInt32: ___homeId forKey: @"_homeId"];
  }
  if (___nodeId_isset)
  {
    [encoder encodeInt: ___nodeId forKey: @"_nodeId"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (int32_t) _homeId {
  return ___homeId;
}

- (void) set_homeId: (int32_t) _homeId {
  ___homeId = _homeId;
  ___homeId_isset = YES;
}

- (BOOL) _homeIdIsSet {
  return ___homeId_isset;
}

- (void) unset_homeId {
  ___homeId_isset = NO;
}

- (uint8_t) _nodeId {
  return ___nodeId;
}

- (void) set_nodeId: (uint8_t) _nodeId {
  ___nodeId = _nodeId;
  ___nodeId_isset = YES;
}

- (BOOL) _nodeIdIsSet {
  return ___nodeId_isset;
}

- (void) unset_nodeId {
  ___nodeId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self set_homeId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self set_nodeId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetNodeProductName_args"];
  if (___homeId_isset) {
    [outProtocol writeFieldBeginWithName: @"_homeId" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: ___homeId];
    [outProtocol writeFieldEnd];
  }
  if (___nodeId_isset) {
    [outProtocol writeFieldBeginWithName: @"_nodeId" type: TType_BYTE fieldID: 2];
    [outProtocol writeByte: ___nodeId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetNodeProductName_args("];
  [ms appendString: @"_homeId:"];
  [ms appendFormat: @"%i", ___homeId];
  [ms appendString: @",_nodeId:"];
  [ms appendFormat: @"%i", ___nodeId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveGetNodeProductName_result : NSObject <NSCoding> {
  NSString * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSString * success;
#endif

- (id) init;
- (id) initWithSuccess: (NSString *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (NSString *) success;
- (void) setSuccess: (NSString *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation OpenZWaveGetNodeProductName_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NSString *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (NSString *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSString *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetNodeProductName_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRING fieldID: 0];
      [outProtocol writeString: __success];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetNodeProductName_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"\"%@\"", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveGetNodeName_args : NSObject <NSCoding> {
  int32_t ___homeId;
  uint8_t ___nodeId;

  BOOL ___homeId_isset;
  BOOL ___nodeId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=_homeId, setter=set_homeId:) int32_t _homeId;
@property (nonatomic, getter=_nodeId, setter=set_nodeId:) uint8_t _nodeId;
#endif

- (id) init;
- (id) initWith_homeId: (int32_t) _homeId _nodeId: (uint8_t) _nodeId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (int32_t) _homeId;
- (void) set_homeId: (int32_t) _homeId;
#endif
- (BOOL) _homeIdIsSet;

#if !__has_feature(objc_arc)
- (uint8_t) _nodeId;
- (void) set_nodeId: (uint8_t) _nodeId;
#endif
- (BOOL) _nodeIdIsSet;

@end

@implementation OpenZWaveGetNodeName_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_homeId: (int32_t) _homeId _nodeId: (uint8_t) _nodeId
{
  self = [super init];
  ___homeId = _homeId;
  ___homeId_isset = YES;
  ___nodeId = _nodeId;
  ___nodeId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_homeId"])
  {
    ___homeId = [decoder decodeInt32ForKey: @"_homeId"];
    ___homeId_isset = YES;
  }
  if ([decoder containsValueForKey: @"_nodeId"])
  {
    ___nodeId = [decoder decodeIntForKey: @"_nodeId"];
    ___nodeId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___homeId_isset)
  {
    [encoder encodeInt32: ___homeId forKey: @"_homeId"];
  }
  if (___nodeId_isset)
  {
    [encoder encodeInt: ___nodeId forKey: @"_nodeId"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (int32_t) _homeId {
  return ___homeId;
}

- (void) set_homeId: (int32_t) _homeId {
  ___homeId = _homeId;
  ___homeId_isset = YES;
}

- (BOOL) _homeIdIsSet {
  return ___homeId_isset;
}

- (void) unset_homeId {
  ___homeId_isset = NO;
}

- (uint8_t) _nodeId {
  return ___nodeId;
}

- (void) set_nodeId: (uint8_t) _nodeId {
  ___nodeId = _nodeId;
  ___nodeId_isset = YES;
}

- (BOOL) _nodeIdIsSet {
  return ___nodeId_isset;
}

- (void) unset_nodeId {
  ___nodeId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self set_homeId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self set_nodeId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetNodeName_args"];
  if (___homeId_isset) {
    [outProtocol writeFieldBeginWithName: @"_homeId" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: ___homeId];
    [outProtocol writeFieldEnd];
  }
  if (___nodeId_isset) {
    [outProtocol writeFieldBeginWithName: @"_nodeId" type: TType_BYTE fieldID: 2];
    [outProtocol writeByte: ___nodeId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetNodeName_args("];
  [ms appendString: @"_homeId:"];
  [ms appendFormat: @"%i", ___homeId];
  [ms appendString: @",_nodeId:"];
  [ms appendFormat: @"%i", ___nodeId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveGetNodeName_result : NSObject <NSCoding> {
  NSString * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSString * success;
#endif

- (id) init;
- (id) initWithSuccess: (NSString *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (NSString *) success;
- (void) setSuccess: (NSString *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation OpenZWaveGetNodeName_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NSString *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (NSString *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSString *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetNodeName_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRING fieldID: 0];
      [outProtocol writeString: __success];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetNodeName_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"\"%@\"", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveGetNodeLocation_args : NSObject <NSCoding> {
  int32_t ___homeId;
  uint8_t ___nodeId;

  BOOL ___homeId_isset;
  BOOL ___nodeId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=_homeId, setter=set_homeId:) int32_t _homeId;
@property (nonatomic, getter=_nodeId, setter=set_nodeId:) uint8_t _nodeId;
#endif

- (id) init;
- (id) initWith_homeId: (int32_t) _homeId _nodeId: (uint8_t) _nodeId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (int32_t) _homeId;
- (void) set_homeId: (int32_t) _homeId;
#endif
- (BOOL) _homeIdIsSet;

#if !__has_feature(objc_arc)
- (uint8_t) _nodeId;
- (void) set_nodeId: (uint8_t) _nodeId;
#endif
- (BOOL) _nodeIdIsSet;

@end

@implementation OpenZWaveGetNodeLocation_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_homeId: (int32_t) _homeId _nodeId: (uint8_t) _nodeId
{
  self = [super init];
  ___homeId = _homeId;
  ___homeId_isset = YES;
  ___nodeId = _nodeId;
  ___nodeId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_homeId"])
  {
    ___homeId = [decoder decodeInt32ForKey: @"_homeId"];
    ___homeId_isset = YES;
  }
  if ([decoder containsValueForKey: @"_nodeId"])
  {
    ___nodeId = [decoder decodeIntForKey: @"_nodeId"];
    ___nodeId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___homeId_isset)
  {
    [encoder encodeInt32: ___homeId forKey: @"_homeId"];
  }
  if (___nodeId_isset)
  {
    [encoder encodeInt: ___nodeId forKey: @"_nodeId"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (int32_t) _homeId {
  return ___homeId;
}

- (void) set_homeId: (int32_t) _homeId {
  ___homeId = _homeId;
  ___homeId_isset = YES;
}

- (BOOL) _homeIdIsSet {
  return ___homeId_isset;
}

- (void) unset_homeId {
  ___homeId_isset = NO;
}

- (uint8_t) _nodeId {
  return ___nodeId;
}

- (void) set_nodeId: (uint8_t) _nodeId {
  ___nodeId = _nodeId;
  ___nodeId_isset = YES;
}

- (BOOL) _nodeIdIsSet {
  return ___nodeId_isset;
}

- (void) unset_nodeId {
  ___nodeId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self set_homeId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self set_nodeId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetNodeLocation_args"];
  if (___homeId_isset) {
    [outProtocol writeFieldBeginWithName: @"_homeId" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: ___homeId];
    [outProtocol writeFieldEnd];
  }
  if (___nodeId_isset) {
    [outProtocol writeFieldBeginWithName: @"_nodeId" type: TType_BYTE fieldID: 2];
    [outProtocol writeByte: ___nodeId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetNodeLocation_args("];
  [ms appendString: @"_homeId:"];
  [ms appendFormat: @"%i", ___homeId];
  [ms appendString: @",_nodeId:"];
  [ms appendFormat: @"%i", ___nodeId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveGetNodeLocation_result : NSObject <NSCoding> {
  NSString * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSString * success;
#endif

- (id) init;
- (id) initWithSuccess: (NSString *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (NSString *) success;
- (void) setSuccess: (NSString *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation OpenZWaveGetNodeLocation_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NSString *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (NSString *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSString *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetNodeLocation_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRING fieldID: 0];
      [outProtocol writeString: __success];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetNodeLocation_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"\"%@\"", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveGetNodeManufacturerId_args : NSObject <NSCoding> {
  int32_t ___homeId;
  uint8_t ___nodeId;

  BOOL ___homeId_isset;
  BOOL ___nodeId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=_homeId, setter=set_homeId:) int32_t _homeId;
@property (nonatomic, getter=_nodeId, setter=set_nodeId:) uint8_t _nodeId;
#endif

- (id) init;
- (id) initWith_homeId: (int32_t) _homeId _nodeId: (uint8_t) _nodeId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (int32_t) _homeId;
- (void) set_homeId: (int32_t) _homeId;
#endif
- (BOOL) _homeIdIsSet;

#if !__has_feature(objc_arc)
- (uint8_t) _nodeId;
- (void) set_nodeId: (uint8_t) _nodeId;
#endif
- (BOOL) _nodeIdIsSet;

@end

@implementation OpenZWaveGetNodeManufacturerId_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_homeId: (int32_t) _homeId _nodeId: (uint8_t) _nodeId
{
  self = [super init];
  ___homeId = _homeId;
  ___homeId_isset = YES;
  ___nodeId = _nodeId;
  ___nodeId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_homeId"])
  {
    ___homeId = [decoder decodeInt32ForKey: @"_homeId"];
    ___homeId_isset = YES;
  }
  if ([decoder containsValueForKey: @"_nodeId"])
  {
    ___nodeId = [decoder decodeIntForKey: @"_nodeId"];
    ___nodeId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___homeId_isset)
  {
    [encoder encodeInt32: ___homeId forKey: @"_homeId"];
  }
  if (___nodeId_isset)
  {
    [encoder encodeInt: ___nodeId forKey: @"_nodeId"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (int32_t) _homeId {
  return ___homeId;
}

- (void) set_homeId: (int32_t) _homeId {
  ___homeId = _homeId;
  ___homeId_isset = YES;
}

- (BOOL) _homeIdIsSet {
  return ___homeId_isset;
}

- (void) unset_homeId {
  ___homeId_isset = NO;
}

- (uint8_t) _nodeId {
  return ___nodeId;
}

- (void) set_nodeId: (uint8_t) _nodeId {
  ___nodeId = _nodeId;
  ___nodeId_isset = YES;
}

- (BOOL) _nodeIdIsSet {
  return ___nodeId_isset;
}

- (void) unset_nodeId {
  ___nodeId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self set_homeId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self set_nodeId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetNodeManufacturerId_args"];
  if (___homeId_isset) {
    [outProtocol writeFieldBeginWithName: @"_homeId" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: ___homeId];
    [outProtocol writeFieldEnd];
  }
  if (___nodeId_isset) {
    [outProtocol writeFieldBeginWithName: @"_nodeId" type: TType_BYTE fieldID: 2];
    [outProtocol writeByte: ___nodeId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetNodeManufacturerId_args("];
  [ms appendString: @"_homeId:"];
  [ms appendFormat: @"%i", ___homeId];
  [ms appendString: @",_nodeId:"];
  [ms appendFormat: @"%i", ___nodeId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveGetNodeManufacturerId_result : NSObject <NSCoding> {
  NSString * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSString * success;
#endif

- (id) init;
- (id) initWithSuccess: (NSString *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (NSString *) success;
- (void) setSuccess: (NSString *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation OpenZWaveGetNodeManufacturerId_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NSString *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (NSString *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSString *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetNodeManufacturerId_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRING fieldID: 0];
      [outProtocol writeString: __success];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetNodeManufacturerId_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"\"%@\"", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveGetNodeProductType_args : NSObject <NSCoding> {
  int32_t ___homeId;
  uint8_t ___nodeId;

  BOOL ___homeId_isset;
  BOOL ___nodeId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=_homeId, setter=set_homeId:) int32_t _homeId;
@property (nonatomic, getter=_nodeId, setter=set_nodeId:) uint8_t _nodeId;
#endif

- (id) init;
- (id) initWith_homeId: (int32_t) _homeId _nodeId: (uint8_t) _nodeId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (int32_t) _homeId;
- (void) set_homeId: (int32_t) _homeId;
#endif
- (BOOL) _homeIdIsSet;

#if !__has_feature(objc_arc)
- (uint8_t) _nodeId;
- (void) set_nodeId: (uint8_t) _nodeId;
#endif
- (BOOL) _nodeIdIsSet;

@end

@implementation OpenZWaveGetNodeProductType_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_homeId: (int32_t) _homeId _nodeId: (uint8_t) _nodeId
{
  self = [super init];
  ___homeId = _homeId;
  ___homeId_isset = YES;
  ___nodeId = _nodeId;
  ___nodeId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_homeId"])
  {
    ___homeId = [decoder decodeInt32ForKey: @"_homeId"];
    ___homeId_isset = YES;
  }
  if ([decoder containsValueForKey: @"_nodeId"])
  {
    ___nodeId = [decoder decodeIntForKey: @"_nodeId"];
    ___nodeId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___homeId_isset)
  {
    [encoder encodeInt32: ___homeId forKey: @"_homeId"];
  }
  if (___nodeId_isset)
  {
    [encoder encodeInt: ___nodeId forKey: @"_nodeId"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (int32_t) _homeId {
  return ___homeId;
}

- (void) set_homeId: (int32_t) _homeId {
  ___homeId = _homeId;
  ___homeId_isset = YES;
}

- (BOOL) _homeIdIsSet {
  return ___homeId_isset;
}

- (void) unset_homeId {
  ___homeId_isset = NO;
}

- (uint8_t) _nodeId {
  return ___nodeId;
}

- (void) set_nodeId: (uint8_t) _nodeId {
  ___nodeId = _nodeId;
  ___nodeId_isset = YES;
}

- (BOOL) _nodeIdIsSet {
  return ___nodeId_isset;
}

- (void) unset_nodeId {
  ___nodeId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self set_homeId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self set_nodeId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetNodeProductType_args"];
  if (___homeId_isset) {
    [outProtocol writeFieldBeginWithName: @"_homeId" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: ___homeId];
    [outProtocol writeFieldEnd];
  }
  if (___nodeId_isset) {
    [outProtocol writeFieldBeginWithName: @"_nodeId" type: TType_BYTE fieldID: 2];
    [outProtocol writeByte: ___nodeId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetNodeProductType_args("];
  [ms appendString: @"_homeId:"];
  [ms appendFormat: @"%i", ___homeId];
  [ms appendString: @",_nodeId:"];
  [ms appendFormat: @"%i", ___nodeId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveGetNodeProductType_result : NSObject <NSCoding> {
  NSString * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSString * success;
#endif

- (id) init;
- (id) initWithSuccess: (NSString *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (NSString *) success;
- (void) setSuccess: (NSString *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation OpenZWaveGetNodeProductType_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NSString *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (NSString *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSString *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetNodeProductType_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRING fieldID: 0];
      [outProtocol writeString: __success];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetNodeProductType_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"\"%@\"", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveGetNodeProductId_args : NSObject <NSCoding> {
  int32_t ___homeId;
  uint8_t ___nodeId;

  BOOL ___homeId_isset;
  BOOL ___nodeId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=_homeId, setter=set_homeId:) int32_t _homeId;
@property (nonatomic, getter=_nodeId, setter=set_nodeId:) uint8_t _nodeId;
#endif

- (id) init;
- (id) initWith_homeId: (int32_t) _homeId _nodeId: (uint8_t) _nodeId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (int32_t) _homeId;
- (void) set_homeId: (int32_t) _homeId;
#endif
- (BOOL) _homeIdIsSet;

#if !__has_feature(objc_arc)
- (uint8_t) _nodeId;
- (void) set_nodeId: (uint8_t) _nodeId;
#endif
- (BOOL) _nodeIdIsSet;

@end

@implementation OpenZWaveGetNodeProductId_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_homeId: (int32_t) _homeId _nodeId: (uint8_t) _nodeId
{
  self = [super init];
  ___homeId = _homeId;
  ___homeId_isset = YES;
  ___nodeId = _nodeId;
  ___nodeId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_homeId"])
  {
    ___homeId = [decoder decodeInt32ForKey: @"_homeId"];
    ___homeId_isset = YES;
  }
  if ([decoder containsValueForKey: @"_nodeId"])
  {
    ___nodeId = [decoder decodeIntForKey: @"_nodeId"];
    ___nodeId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___homeId_isset)
  {
    [encoder encodeInt32: ___homeId forKey: @"_homeId"];
  }
  if (___nodeId_isset)
  {
    [encoder encodeInt: ___nodeId forKey: @"_nodeId"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (int32_t) _homeId {
  return ___homeId;
}

- (void) set_homeId: (int32_t) _homeId {
  ___homeId = _homeId;
  ___homeId_isset = YES;
}

- (BOOL) _homeIdIsSet {
  return ___homeId_isset;
}

- (void) unset_homeId {
  ___homeId_isset = NO;
}

- (uint8_t) _nodeId {
  return ___nodeId;
}

- (void) set_nodeId: (uint8_t) _nodeId {
  ___nodeId = _nodeId;
  ___nodeId_isset = YES;
}

- (BOOL) _nodeIdIsSet {
  return ___nodeId_isset;
}

- (void) unset_nodeId {
  ___nodeId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self set_homeId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self set_nodeId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetNodeProductId_args"];
  if (___homeId_isset) {
    [outProtocol writeFieldBeginWithName: @"_homeId" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: ___homeId];
    [outProtocol writeFieldEnd];
  }
  if (___nodeId_isset) {
    [outProtocol writeFieldBeginWithName: @"_nodeId" type: TType_BYTE fieldID: 2];
    [outProtocol writeByte: ___nodeId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetNodeProductId_args("];
  [ms appendString: @"_homeId:"];
  [ms appendFormat: @"%i", ___homeId];
  [ms appendString: @",_nodeId:"];
  [ms appendFormat: @"%i", ___nodeId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveGetNodeProductId_result : NSObject <NSCoding> {
  NSString * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSString * success;
#endif

- (id) init;
- (id) initWithSuccess: (NSString *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (NSString *) success;
- (void) setSuccess: (NSString *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation OpenZWaveGetNodeProductId_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NSString *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (NSString *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSString *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetNodeProductId_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRING fieldID: 0];
      [outProtocol writeString: __success];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetNodeProductId_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"\"%@\"", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveSetNodeManufacturerName_args : NSObject <NSCoding> {
  int32_t ___homeId;
  uint8_t ___nodeId;
  NSString * ___manufacturerName;

  BOOL ___homeId_isset;
  BOOL ___nodeId_isset;
  BOOL ___manufacturerName_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=_homeId, setter=set_homeId:) int32_t _homeId;
@property (nonatomic, getter=_nodeId, setter=set_nodeId:) uint8_t _nodeId;
@property (nonatomic, retain, getter=_manufacturerName, setter=set_manufacturerName:) NSString * _manufacturerName;
#endif

- (id) init;
- (id) initWith_homeId: (int32_t) _homeId _nodeId: (uint8_t) _nodeId _manufacturerName: (NSString *) _manufacturerName;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (int32_t) _homeId;
- (void) set_homeId: (int32_t) _homeId;
#endif
- (BOOL) _homeIdIsSet;

#if !__has_feature(objc_arc)
- (uint8_t) _nodeId;
- (void) set_nodeId: (uint8_t) _nodeId;
#endif
- (BOOL) _nodeIdIsSet;

#if !__has_feature(objc_arc)
- (NSString *) _manufacturerName;
- (void) set_manufacturerName: (NSString *) _manufacturerName;
#endif
- (BOOL) _manufacturerNameIsSet;

@end

@implementation OpenZWaveSetNodeManufacturerName_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_homeId: (int32_t) _homeId _nodeId: (uint8_t) _nodeId _manufacturerName: (NSString *) _manufacturerName
{
  self = [super init];
  ___homeId = _homeId;
  ___homeId_isset = YES;
  ___nodeId = _nodeId;
  ___nodeId_isset = YES;
  ___manufacturerName = [_manufacturerName retain_stub];
  ___manufacturerName_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_homeId"])
  {
    ___homeId = [decoder decodeInt32ForKey: @"_homeId"];
    ___homeId_isset = YES;
  }
  if ([decoder containsValueForKey: @"_nodeId"])
  {
    ___nodeId = [decoder decodeIntForKey: @"_nodeId"];
    ___nodeId_isset = YES;
  }
  if ([decoder containsValueForKey: @"_manufacturerName"])
  {
    ___manufacturerName = [[decoder decodeObjectForKey: @"_manufacturerName"] retain_stub];
    ___manufacturerName_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___homeId_isset)
  {
    [encoder encodeInt32: ___homeId forKey: @"_homeId"];
  }
  if (___nodeId_isset)
  {
    [encoder encodeInt: ___nodeId forKey: @"_nodeId"];
  }
  if (___manufacturerName_isset)
  {
    [encoder encodeObject: ___manufacturerName forKey: @"_manufacturerName"];
  }
}

- (void) dealloc
{
  [___manufacturerName release_stub];
  [super dealloc_stub];
}

- (int32_t) _homeId {
  return ___homeId;
}

- (void) set_homeId: (int32_t) _homeId {
  ___homeId = _homeId;
  ___homeId_isset = YES;
}

- (BOOL) _homeIdIsSet {
  return ___homeId_isset;
}

- (void) unset_homeId {
  ___homeId_isset = NO;
}

- (uint8_t) _nodeId {
  return ___nodeId;
}

- (void) set_nodeId: (uint8_t) _nodeId {
  ___nodeId = _nodeId;
  ___nodeId_isset = YES;
}

- (BOOL) _nodeIdIsSet {
  return ___nodeId_isset;
}

- (void) unset_nodeId {
  ___nodeId_isset = NO;
}

- (NSString *) _manufacturerName {
  return [[___manufacturerName retain_stub] autorelease_stub];
}

- (void) set_manufacturerName: (NSString *) _manufacturerName {
  [_manufacturerName retain_stub];
  [___manufacturerName release_stub];
  ___manufacturerName = _manufacturerName;
  ___manufacturerName_isset = YES;
}

- (BOOL) _manufacturerNameIsSet {
  return ___manufacturerName_isset;
}

- (void) unset_manufacturerName {
  [___manufacturerName release_stub];
  ___manufacturerName = nil;
  ___manufacturerName_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self set_homeId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self set_nodeId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self set_manufacturerName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SetNodeManufacturerName_args"];
  if (___homeId_isset) {
    [outProtocol writeFieldBeginWithName: @"_homeId" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: ___homeId];
    [outProtocol writeFieldEnd];
  }
  if (___nodeId_isset) {
    [outProtocol writeFieldBeginWithName: @"_nodeId" type: TType_BYTE fieldID: 2];
    [outProtocol writeByte: ___nodeId];
    [outProtocol writeFieldEnd];
  }
  if (___manufacturerName_isset) {
    if (___manufacturerName != nil) {
      [outProtocol writeFieldBeginWithName: @"_manufacturerName" type: TType_STRING fieldID: 3];
      [outProtocol writeString: ___manufacturerName];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SetNodeManufacturerName_args("];
  [ms appendString: @"_homeId:"];
  [ms appendFormat: @"%i", ___homeId];
  [ms appendString: @",_nodeId:"];
  [ms appendFormat: @"%i", ___nodeId];
  [ms appendString: @",_manufacturerName:"];
  [ms appendFormat: @"\"%@\"", ___manufacturerName];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveSetNodeManufacturerName_result : NSObject <NSCoding> {
}

- (id) init;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

@end

@implementation OpenZWaveSetNodeManufacturerName_result

- (id) init
{
  self = [super init];
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SetNodeManufacturerName_result"];

  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SetNodeManufacturerName_result("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveSetNodeProductName_args : NSObject <NSCoding> {
  int32_t ___homeId;
  uint8_t ___nodeId;
  NSString * ___productName;

  BOOL ___homeId_isset;
  BOOL ___nodeId_isset;
  BOOL ___productName_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=_homeId, setter=set_homeId:) int32_t _homeId;
@property (nonatomic, getter=_nodeId, setter=set_nodeId:) uint8_t _nodeId;
@property (nonatomic, retain, getter=_productName, setter=set_productName:) NSString * _productName;
#endif

- (id) init;
- (id) initWith_homeId: (int32_t) _homeId _nodeId: (uint8_t) _nodeId _productName: (NSString *) _productName;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (int32_t) _homeId;
- (void) set_homeId: (int32_t) _homeId;
#endif
- (BOOL) _homeIdIsSet;

#if !__has_feature(objc_arc)
- (uint8_t) _nodeId;
- (void) set_nodeId: (uint8_t) _nodeId;
#endif
- (BOOL) _nodeIdIsSet;

#if !__has_feature(objc_arc)
- (NSString *) _productName;
- (void) set_productName: (NSString *) _productName;
#endif
- (BOOL) _productNameIsSet;

@end

@implementation OpenZWaveSetNodeProductName_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_homeId: (int32_t) _homeId _nodeId: (uint8_t) _nodeId _productName: (NSString *) _productName
{
  self = [super init];
  ___homeId = _homeId;
  ___homeId_isset = YES;
  ___nodeId = _nodeId;
  ___nodeId_isset = YES;
  ___productName = [_productName retain_stub];
  ___productName_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_homeId"])
  {
    ___homeId = [decoder decodeInt32ForKey: @"_homeId"];
    ___homeId_isset = YES;
  }
  if ([decoder containsValueForKey: @"_nodeId"])
  {
    ___nodeId = [decoder decodeIntForKey: @"_nodeId"];
    ___nodeId_isset = YES;
  }
  if ([decoder containsValueForKey: @"_productName"])
  {
    ___productName = [[decoder decodeObjectForKey: @"_productName"] retain_stub];
    ___productName_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___homeId_isset)
  {
    [encoder encodeInt32: ___homeId forKey: @"_homeId"];
  }
  if (___nodeId_isset)
  {
    [encoder encodeInt: ___nodeId forKey: @"_nodeId"];
  }
  if (___productName_isset)
  {
    [encoder encodeObject: ___productName forKey: @"_productName"];
  }
}

- (void) dealloc
{
  [___productName release_stub];
  [super dealloc_stub];
}

- (int32_t) _homeId {
  return ___homeId;
}

- (void) set_homeId: (int32_t) _homeId {
  ___homeId = _homeId;
  ___homeId_isset = YES;
}

- (BOOL) _homeIdIsSet {
  return ___homeId_isset;
}

- (void) unset_homeId {
  ___homeId_isset = NO;
}

- (uint8_t) _nodeId {
  return ___nodeId;
}

- (void) set_nodeId: (uint8_t) _nodeId {
  ___nodeId = _nodeId;
  ___nodeId_isset = YES;
}

- (BOOL) _nodeIdIsSet {
  return ___nodeId_isset;
}

- (void) unset_nodeId {
  ___nodeId_isset = NO;
}

- (NSString *) _productName {
  return [[___productName retain_stub] autorelease_stub];
}

- (void) set_productName: (NSString *) _productName {
  [_productName retain_stub];
  [___productName release_stub];
  ___productName = _productName;
  ___productName_isset = YES;
}

- (BOOL) _productNameIsSet {
  return ___productName_isset;
}

- (void) unset_productName {
  [___productName release_stub];
  ___productName = nil;
  ___productName_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self set_homeId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self set_nodeId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self set_productName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SetNodeProductName_args"];
  if (___homeId_isset) {
    [outProtocol writeFieldBeginWithName: @"_homeId" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: ___homeId];
    [outProtocol writeFieldEnd];
  }
  if (___nodeId_isset) {
    [outProtocol writeFieldBeginWithName: @"_nodeId" type: TType_BYTE fieldID: 2];
    [outProtocol writeByte: ___nodeId];
    [outProtocol writeFieldEnd];
  }
  if (___productName_isset) {
    if (___productName != nil) {
      [outProtocol writeFieldBeginWithName: @"_productName" type: TType_STRING fieldID: 3];
      [outProtocol writeString: ___productName];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SetNodeProductName_args("];
  [ms appendString: @"_homeId:"];
  [ms appendFormat: @"%i", ___homeId];
  [ms appendString: @",_nodeId:"];
  [ms appendFormat: @"%i", ___nodeId];
  [ms appendString: @",_productName:"];
  [ms appendFormat: @"\"%@\"", ___productName];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveSetNodeProductName_result : NSObject <NSCoding> {
}

- (id) init;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

@end

@implementation OpenZWaveSetNodeProductName_result

- (id) init
{
  self = [super init];
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SetNodeProductName_result"];

  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SetNodeProductName_result("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveSetNodeName_args : NSObject <NSCoding> {
  int32_t ___homeId;
  uint8_t ___nodeId;
  NSString * ___nodeName;

  BOOL ___homeId_isset;
  BOOL ___nodeId_isset;
  BOOL ___nodeName_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=_homeId, setter=set_homeId:) int32_t _homeId;
@property (nonatomic, getter=_nodeId, setter=set_nodeId:) uint8_t _nodeId;
@property (nonatomic, retain, getter=_nodeName, setter=set_nodeName:) NSString * _nodeName;
#endif

- (id) init;
- (id) initWith_homeId: (int32_t) _homeId _nodeId: (uint8_t) _nodeId _nodeName: (NSString *) _nodeName;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (int32_t) _homeId;
- (void) set_homeId: (int32_t) _homeId;
#endif
- (BOOL) _homeIdIsSet;

#if !__has_feature(objc_arc)
- (uint8_t) _nodeId;
- (void) set_nodeId: (uint8_t) _nodeId;
#endif
- (BOOL) _nodeIdIsSet;

#if !__has_feature(objc_arc)
- (NSString *) _nodeName;
- (void) set_nodeName: (NSString *) _nodeName;
#endif
- (BOOL) _nodeNameIsSet;

@end

@implementation OpenZWaveSetNodeName_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_homeId: (int32_t) _homeId _nodeId: (uint8_t) _nodeId _nodeName: (NSString *) _nodeName
{
  self = [super init];
  ___homeId = _homeId;
  ___homeId_isset = YES;
  ___nodeId = _nodeId;
  ___nodeId_isset = YES;
  ___nodeName = [_nodeName retain_stub];
  ___nodeName_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_homeId"])
  {
    ___homeId = [decoder decodeInt32ForKey: @"_homeId"];
    ___homeId_isset = YES;
  }
  if ([decoder containsValueForKey: @"_nodeId"])
  {
    ___nodeId = [decoder decodeIntForKey: @"_nodeId"];
    ___nodeId_isset = YES;
  }
  if ([decoder containsValueForKey: @"_nodeName"])
  {
    ___nodeName = [[decoder decodeObjectForKey: @"_nodeName"] retain_stub];
    ___nodeName_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___homeId_isset)
  {
    [encoder encodeInt32: ___homeId forKey: @"_homeId"];
  }
  if (___nodeId_isset)
  {
    [encoder encodeInt: ___nodeId forKey: @"_nodeId"];
  }
  if (___nodeName_isset)
  {
    [encoder encodeObject: ___nodeName forKey: @"_nodeName"];
  }
}

- (void) dealloc
{
  [___nodeName release_stub];
  [super dealloc_stub];
}

- (int32_t) _homeId {
  return ___homeId;
}

- (void) set_homeId: (int32_t) _homeId {
  ___homeId = _homeId;
  ___homeId_isset = YES;
}

- (BOOL) _homeIdIsSet {
  return ___homeId_isset;
}

- (void) unset_homeId {
  ___homeId_isset = NO;
}

- (uint8_t) _nodeId {
  return ___nodeId;
}

- (void) set_nodeId: (uint8_t) _nodeId {
  ___nodeId = _nodeId;
  ___nodeId_isset = YES;
}

- (BOOL) _nodeIdIsSet {
  return ___nodeId_isset;
}

- (void) unset_nodeId {
  ___nodeId_isset = NO;
}

- (NSString *) _nodeName {
  return [[___nodeName retain_stub] autorelease_stub];
}

- (void) set_nodeName: (NSString *) _nodeName {
  [_nodeName retain_stub];
  [___nodeName release_stub];
  ___nodeName = _nodeName;
  ___nodeName_isset = YES;
}

- (BOOL) _nodeNameIsSet {
  return ___nodeName_isset;
}

- (void) unset_nodeName {
  [___nodeName release_stub];
  ___nodeName = nil;
  ___nodeName_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self set_homeId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self set_nodeId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self set_nodeName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SetNodeName_args"];
  if (___homeId_isset) {
    [outProtocol writeFieldBeginWithName: @"_homeId" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: ___homeId];
    [outProtocol writeFieldEnd];
  }
  if (___nodeId_isset) {
    [outProtocol writeFieldBeginWithName: @"_nodeId" type: TType_BYTE fieldID: 2];
    [outProtocol writeByte: ___nodeId];
    [outProtocol writeFieldEnd];
  }
  if (___nodeName_isset) {
    if (___nodeName != nil) {
      [outProtocol writeFieldBeginWithName: @"_nodeName" type: TType_STRING fieldID: 3];
      [outProtocol writeString: ___nodeName];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SetNodeName_args("];
  [ms appendString: @"_homeId:"];
  [ms appendFormat: @"%i", ___homeId];
  [ms appendString: @",_nodeId:"];
  [ms appendFormat: @"%i", ___nodeId];
  [ms appendString: @",_nodeName:"];
  [ms appendFormat: @"\"%@\"", ___nodeName];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveSetNodeName_result : NSObject <NSCoding> {
}

- (id) init;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

@end

@implementation OpenZWaveSetNodeName_result

- (id) init
{
  self = [super init];
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SetNodeName_result"];

  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SetNodeName_result("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveSetNodeLocation_args : NSObject <NSCoding> {
  int32_t ___homeId;
  uint8_t ___nodeId;
  NSString * ___location;

  BOOL ___homeId_isset;
  BOOL ___nodeId_isset;
  BOOL ___location_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=_homeId, setter=set_homeId:) int32_t _homeId;
@property (nonatomic, getter=_nodeId, setter=set_nodeId:) uint8_t _nodeId;
@property (nonatomic, retain, getter=_location, setter=set_location:) NSString * _location;
#endif

- (id) init;
- (id) initWith_homeId: (int32_t) _homeId _nodeId: (uint8_t) _nodeId _location: (NSString *) _location;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (int32_t) _homeId;
- (void) set_homeId: (int32_t) _homeId;
#endif
- (BOOL) _homeIdIsSet;

#if !__has_feature(objc_arc)
- (uint8_t) _nodeId;
- (void) set_nodeId: (uint8_t) _nodeId;
#endif
- (BOOL) _nodeIdIsSet;

#if !__has_feature(objc_arc)
- (NSString *) _location;
- (void) set_location: (NSString *) _location;
#endif
- (BOOL) _locationIsSet;

@end

@implementation OpenZWaveSetNodeLocation_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_homeId: (int32_t) _homeId _nodeId: (uint8_t) _nodeId _location: (NSString *) _location
{
  self = [super init];
  ___homeId = _homeId;
  ___homeId_isset = YES;
  ___nodeId = _nodeId;
  ___nodeId_isset = YES;
  ___location = [_location retain_stub];
  ___location_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_homeId"])
  {
    ___homeId = [decoder decodeInt32ForKey: @"_homeId"];
    ___homeId_isset = YES;
  }
  if ([decoder containsValueForKey: @"_nodeId"])
  {
    ___nodeId = [decoder decodeIntForKey: @"_nodeId"];
    ___nodeId_isset = YES;
  }
  if ([decoder containsValueForKey: @"_location"])
  {
    ___location = [[decoder decodeObjectForKey: @"_location"] retain_stub];
    ___location_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___homeId_isset)
  {
    [encoder encodeInt32: ___homeId forKey: @"_homeId"];
  }
  if (___nodeId_isset)
  {
    [encoder encodeInt: ___nodeId forKey: @"_nodeId"];
  }
  if (___location_isset)
  {
    [encoder encodeObject: ___location forKey: @"_location"];
  }
}

- (void) dealloc
{
  [___location release_stub];
  [super dealloc_stub];
}

- (int32_t) _homeId {
  return ___homeId;
}

- (void) set_homeId: (int32_t) _homeId {
  ___homeId = _homeId;
  ___homeId_isset = YES;
}

- (BOOL) _homeIdIsSet {
  return ___homeId_isset;
}

- (void) unset_homeId {
  ___homeId_isset = NO;
}

- (uint8_t) _nodeId {
  return ___nodeId;
}

- (void) set_nodeId: (uint8_t) _nodeId {
  ___nodeId = _nodeId;
  ___nodeId_isset = YES;
}

- (BOOL) _nodeIdIsSet {
  return ___nodeId_isset;
}

- (void) unset_nodeId {
  ___nodeId_isset = NO;
}

- (NSString *) _location {
  return [[___location retain_stub] autorelease_stub];
}

- (void) set_location: (NSString *) _location {
  [_location retain_stub];
  [___location release_stub];
  ___location = _location;
  ___location_isset = YES;
}

- (BOOL) _locationIsSet {
  return ___location_isset;
}

- (void) unset_location {
  [___location release_stub];
  ___location = nil;
  ___location_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self set_homeId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self set_nodeId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self set_location: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SetNodeLocation_args"];
  if (___homeId_isset) {
    [outProtocol writeFieldBeginWithName: @"_homeId" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: ___homeId];
    [outProtocol writeFieldEnd];
  }
  if (___nodeId_isset) {
    [outProtocol writeFieldBeginWithName: @"_nodeId" type: TType_BYTE fieldID: 2];
    [outProtocol writeByte: ___nodeId];
    [outProtocol writeFieldEnd];
  }
  if (___location_isset) {
    if (___location != nil) {
      [outProtocol writeFieldBeginWithName: @"_location" type: TType_STRING fieldID: 3];
      [outProtocol writeString: ___location];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SetNodeLocation_args("];
  [ms appendString: @"_homeId:"];
  [ms appendFormat: @"%i", ___homeId];
  [ms appendString: @",_nodeId:"];
  [ms appendFormat: @"%i", ___nodeId];
  [ms appendString: @",_location:"];
  [ms appendFormat: @"\"%@\"", ___location];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveSetNodeLocation_result : NSObject <NSCoding> {
}

- (id) init;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

@end

@implementation OpenZWaveSetNodeLocation_result

- (id) init
{
  self = [super init];
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SetNodeLocation_result"];

  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SetNodeLocation_result("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveSetNodeOn_args : NSObject <NSCoding> {
  int32_t ___homeId;
  uint8_t ___nodeId;

  BOOL ___homeId_isset;
  BOOL ___nodeId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=_homeId, setter=set_homeId:) int32_t _homeId;
@property (nonatomic, getter=_nodeId, setter=set_nodeId:) uint8_t _nodeId;
#endif

- (id) init;
- (id) initWith_homeId: (int32_t) _homeId _nodeId: (uint8_t) _nodeId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (int32_t) _homeId;
- (void) set_homeId: (int32_t) _homeId;
#endif
- (BOOL) _homeIdIsSet;

#if !__has_feature(objc_arc)
- (uint8_t) _nodeId;
- (void) set_nodeId: (uint8_t) _nodeId;
#endif
- (BOOL) _nodeIdIsSet;

@end

@implementation OpenZWaveSetNodeOn_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_homeId: (int32_t) _homeId _nodeId: (uint8_t) _nodeId
{
  self = [super init];
  ___homeId = _homeId;
  ___homeId_isset = YES;
  ___nodeId = _nodeId;
  ___nodeId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_homeId"])
  {
    ___homeId = [decoder decodeInt32ForKey: @"_homeId"];
    ___homeId_isset = YES;
  }
  if ([decoder containsValueForKey: @"_nodeId"])
  {
    ___nodeId = [decoder decodeIntForKey: @"_nodeId"];
    ___nodeId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___homeId_isset)
  {
    [encoder encodeInt32: ___homeId forKey: @"_homeId"];
  }
  if (___nodeId_isset)
  {
    [encoder encodeInt: ___nodeId forKey: @"_nodeId"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (int32_t) _homeId {
  return ___homeId;
}

- (void) set_homeId: (int32_t) _homeId {
  ___homeId = _homeId;
  ___homeId_isset = YES;
}

- (BOOL) _homeIdIsSet {
  return ___homeId_isset;
}

- (void) unset_homeId {
  ___homeId_isset = NO;
}

- (uint8_t) _nodeId {
  return ___nodeId;
}

- (void) set_nodeId: (uint8_t) _nodeId {
  ___nodeId = _nodeId;
  ___nodeId_isset = YES;
}

- (BOOL) _nodeIdIsSet {
  return ___nodeId_isset;
}

- (void) unset_nodeId {
  ___nodeId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self set_homeId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self set_nodeId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SetNodeOn_args"];
  if (___homeId_isset) {
    [outProtocol writeFieldBeginWithName: @"_homeId" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: ___homeId];
    [outProtocol writeFieldEnd];
  }
  if (___nodeId_isset) {
    [outProtocol writeFieldBeginWithName: @"_nodeId" type: TType_BYTE fieldID: 2];
    [outProtocol writeByte: ___nodeId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SetNodeOn_args("];
  [ms appendString: @"_homeId:"];
  [ms appendFormat: @"%i", ___homeId];
  [ms appendString: @",_nodeId:"];
  [ms appendFormat: @"%i", ___nodeId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveSetNodeOn_result : NSObject <NSCoding> {
}

- (id) init;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

@end

@implementation OpenZWaveSetNodeOn_result

- (id) init
{
  self = [super init];
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SetNodeOn_result"];

  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SetNodeOn_result("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveSetNodeOff_args : NSObject <NSCoding> {
  int32_t ___homeId;
  uint8_t ___nodeId;

  BOOL ___homeId_isset;
  BOOL ___nodeId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=_homeId, setter=set_homeId:) int32_t _homeId;
@property (nonatomic, getter=_nodeId, setter=set_nodeId:) uint8_t _nodeId;
#endif

- (id) init;
- (id) initWith_homeId: (int32_t) _homeId _nodeId: (uint8_t) _nodeId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (int32_t) _homeId;
- (void) set_homeId: (int32_t) _homeId;
#endif
- (BOOL) _homeIdIsSet;

#if !__has_feature(objc_arc)
- (uint8_t) _nodeId;
- (void) set_nodeId: (uint8_t) _nodeId;
#endif
- (BOOL) _nodeIdIsSet;

@end

@implementation OpenZWaveSetNodeOff_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_homeId: (int32_t) _homeId _nodeId: (uint8_t) _nodeId
{
  self = [super init];
  ___homeId = _homeId;
  ___homeId_isset = YES;
  ___nodeId = _nodeId;
  ___nodeId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_homeId"])
  {
    ___homeId = [decoder decodeInt32ForKey: @"_homeId"];
    ___homeId_isset = YES;
  }
  if ([decoder containsValueForKey: @"_nodeId"])
  {
    ___nodeId = [decoder decodeIntForKey: @"_nodeId"];
    ___nodeId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___homeId_isset)
  {
    [encoder encodeInt32: ___homeId forKey: @"_homeId"];
  }
  if (___nodeId_isset)
  {
    [encoder encodeInt: ___nodeId forKey: @"_nodeId"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (int32_t) _homeId {
  return ___homeId;
}

- (void) set_homeId: (int32_t) _homeId {
  ___homeId = _homeId;
  ___homeId_isset = YES;
}

- (BOOL) _homeIdIsSet {
  return ___homeId_isset;
}

- (void) unset_homeId {
  ___homeId_isset = NO;
}

- (uint8_t) _nodeId {
  return ___nodeId;
}

- (void) set_nodeId: (uint8_t) _nodeId {
  ___nodeId = _nodeId;
  ___nodeId_isset = YES;
}

- (BOOL) _nodeIdIsSet {
  return ___nodeId_isset;
}

- (void) unset_nodeId {
  ___nodeId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self set_homeId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self set_nodeId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SetNodeOff_args"];
  if (___homeId_isset) {
    [outProtocol writeFieldBeginWithName: @"_homeId" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: ___homeId];
    [outProtocol writeFieldEnd];
  }
  if (___nodeId_isset) {
    [outProtocol writeFieldBeginWithName: @"_nodeId" type: TType_BYTE fieldID: 2];
    [outProtocol writeByte: ___nodeId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SetNodeOff_args("];
  [ms appendString: @"_homeId:"];
  [ms appendFormat: @"%i", ___homeId];
  [ms appendString: @",_nodeId:"];
  [ms appendFormat: @"%i", ___nodeId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveSetNodeOff_result : NSObject <NSCoding> {
}

- (id) init;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

@end

@implementation OpenZWaveSetNodeOff_result

- (id) init
{
  self = [super init];
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SetNodeOff_result"];

  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SetNodeOff_result("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveSetNodeLevel_args : NSObject <NSCoding> {
  int32_t ___homeId;
  uint8_t ___nodeId;
  uint8_t ___level;

  BOOL ___homeId_isset;
  BOOL ___nodeId_isset;
  BOOL ___level_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=_homeId, setter=set_homeId:) int32_t _homeId;
@property (nonatomic, getter=_nodeId, setter=set_nodeId:) uint8_t _nodeId;
@property (nonatomic, getter=_level, setter=set_level:) uint8_t _level;
#endif

- (id) init;
- (id) initWith_homeId: (int32_t) _homeId _nodeId: (uint8_t) _nodeId _level: (uint8_t) _level;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (int32_t) _homeId;
- (void) set_homeId: (int32_t) _homeId;
#endif
- (BOOL) _homeIdIsSet;

#if !__has_feature(objc_arc)
- (uint8_t) _nodeId;
- (void) set_nodeId: (uint8_t) _nodeId;
#endif
- (BOOL) _nodeIdIsSet;

#if !__has_feature(objc_arc)
- (uint8_t) _level;
- (void) set_level: (uint8_t) _level;
#endif
- (BOOL) _levelIsSet;

@end

@implementation OpenZWaveSetNodeLevel_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_homeId: (int32_t) _homeId _nodeId: (uint8_t) _nodeId _level: (uint8_t) _level
{
  self = [super init];
  ___homeId = _homeId;
  ___homeId_isset = YES;
  ___nodeId = _nodeId;
  ___nodeId_isset = YES;
  ___level = _level;
  ___level_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_homeId"])
  {
    ___homeId = [decoder decodeInt32ForKey: @"_homeId"];
    ___homeId_isset = YES;
  }
  if ([decoder containsValueForKey: @"_nodeId"])
  {
    ___nodeId = [decoder decodeIntForKey: @"_nodeId"];
    ___nodeId_isset = YES;
  }
  if ([decoder containsValueForKey: @"_level"])
  {
    ___level = [decoder decodeIntForKey: @"_level"];
    ___level_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___homeId_isset)
  {
    [encoder encodeInt32: ___homeId forKey: @"_homeId"];
  }
  if (___nodeId_isset)
  {
    [encoder encodeInt: ___nodeId forKey: @"_nodeId"];
  }
  if (___level_isset)
  {
    [encoder encodeInt: ___level forKey: @"_level"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (int32_t) _homeId {
  return ___homeId;
}

- (void) set_homeId: (int32_t) _homeId {
  ___homeId = _homeId;
  ___homeId_isset = YES;
}

- (BOOL) _homeIdIsSet {
  return ___homeId_isset;
}

- (void) unset_homeId {
  ___homeId_isset = NO;
}

- (uint8_t) _nodeId {
  return ___nodeId;
}

- (void) set_nodeId: (uint8_t) _nodeId {
  ___nodeId = _nodeId;
  ___nodeId_isset = YES;
}

- (BOOL) _nodeIdIsSet {
  return ___nodeId_isset;
}

- (void) unset_nodeId {
  ___nodeId_isset = NO;
}

- (uint8_t) _level {
  return ___level;
}

- (void) set_level: (uint8_t) _level {
  ___level = _level;
  ___level_isset = YES;
}

- (BOOL) _levelIsSet {
  return ___level_isset;
}

- (void) unset_level {
  ___level_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self set_homeId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self set_nodeId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self set_level: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SetNodeLevel_args"];
  if (___homeId_isset) {
    [outProtocol writeFieldBeginWithName: @"_homeId" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: ___homeId];
    [outProtocol writeFieldEnd];
  }
  if (___nodeId_isset) {
    [outProtocol writeFieldBeginWithName: @"_nodeId" type: TType_BYTE fieldID: 2];
    [outProtocol writeByte: ___nodeId];
    [outProtocol writeFieldEnd];
  }
  if (___level_isset) {
    [outProtocol writeFieldBeginWithName: @"_level" type: TType_BYTE fieldID: 3];
    [outProtocol writeByte: ___level];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SetNodeLevel_args("];
  [ms appendString: @"_homeId:"];
  [ms appendFormat: @"%i", ___homeId];
  [ms appendString: @",_nodeId:"];
  [ms appendFormat: @"%i", ___nodeId];
  [ms appendString: @",_level:"];
  [ms appendFormat: @"%i", ___level];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveSetNodeLevel_result : NSObject <NSCoding> {
}

- (id) init;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

@end

@implementation OpenZWaveSetNodeLevel_result

- (id) init
{
  self = [super init];
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SetNodeLevel_result"];

  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SetNodeLevel_result("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveIsNodeInfoReceived_args : NSObject <NSCoding> {
  int32_t ___homeId;
  uint8_t ___nodeId;

  BOOL ___homeId_isset;
  BOOL ___nodeId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=_homeId, setter=set_homeId:) int32_t _homeId;
@property (nonatomic, getter=_nodeId, setter=set_nodeId:) uint8_t _nodeId;
#endif

- (id) init;
- (id) initWith_homeId: (int32_t) _homeId _nodeId: (uint8_t) _nodeId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (int32_t) _homeId;
- (void) set_homeId: (int32_t) _homeId;
#endif
- (BOOL) _homeIdIsSet;

#if !__has_feature(objc_arc)
- (uint8_t) _nodeId;
- (void) set_nodeId: (uint8_t) _nodeId;
#endif
- (BOOL) _nodeIdIsSet;

@end

@implementation OpenZWaveIsNodeInfoReceived_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_homeId: (int32_t) _homeId _nodeId: (uint8_t) _nodeId
{
  self = [super init];
  ___homeId = _homeId;
  ___homeId_isset = YES;
  ___nodeId = _nodeId;
  ___nodeId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_homeId"])
  {
    ___homeId = [decoder decodeInt32ForKey: @"_homeId"];
    ___homeId_isset = YES;
  }
  if ([decoder containsValueForKey: @"_nodeId"])
  {
    ___nodeId = [decoder decodeIntForKey: @"_nodeId"];
    ___nodeId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___homeId_isset)
  {
    [encoder encodeInt32: ___homeId forKey: @"_homeId"];
  }
  if (___nodeId_isset)
  {
    [encoder encodeInt: ___nodeId forKey: @"_nodeId"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (int32_t) _homeId {
  return ___homeId;
}

- (void) set_homeId: (int32_t) _homeId {
  ___homeId = _homeId;
  ___homeId_isset = YES;
}

- (BOOL) _homeIdIsSet {
  return ___homeId_isset;
}

- (void) unset_homeId {
  ___homeId_isset = NO;
}

- (uint8_t) _nodeId {
  return ___nodeId;
}

- (void) set_nodeId: (uint8_t) _nodeId {
  ___nodeId = _nodeId;
  ___nodeId_isset = YES;
}

- (BOOL) _nodeIdIsSet {
  return ___nodeId_isset;
}

- (void) unset_nodeId {
  ___nodeId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self set_homeId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self set_nodeId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"IsNodeInfoReceived_args"];
  if (___homeId_isset) {
    [outProtocol writeFieldBeginWithName: @"_homeId" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: ___homeId];
    [outProtocol writeFieldEnd];
  }
  if (___nodeId_isset) {
    [outProtocol writeFieldBeginWithName: @"_nodeId" type: TType_BYTE fieldID: 2];
    [outProtocol writeByte: ___nodeId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"IsNodeInfoReceived_args("];
  [ms appendString: @"_homeId:"];
  [ms appendFormat: @"%i", ___homeId];
  [ms appendString: @",_nodeId:"];
  [ms appendFormat: @"%i", ___nodeId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveIsNodeInfoReceived_result : NSObject <NSCoding> {
  BOOL __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) BOOL success;
#endif

- (id) init;
- (id) initWithSuccess: (BOOL) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (BOOL) success;
- (void) setSuccess: (BOOL) success;
#endif
- (BOOL) successIsSet;

@end

@implementation OpenZWaveIsNodeInfoReceived_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (BOOL) success
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeBoolForKey: @"success"];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeBool: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (BOOL) success {
  return __success;
}

- (void) setSuccess: (BOOL) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"IsNodeInfoReceived_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
    [outProtocol writeBool: __success];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"IsNodeInfoReceived_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveGetNodeClassInformation_args : NSObject <NSCoding> {
  int32_t ___homeId;
  uint8_t ___nodeId;
  uint8_t ___commandClassId;

  BOOL ___homeId_isset;
  BOOL ___nodeId_isset;
  BOOL ___commandClassId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=_homeId, setter=set_homeId:) int32_t _homeId;
@property (nonatomic, getter=_nodeId, setter=set_nodeId:) uint8_t _nodeId;
@property (nonatomic, getter=_commandClassId, setter=set_commandClassId:) uint8_t _commandClassId;
#endif

- (id) init;
- (id) initWith_homeId: (int32_t) _homeId _nodeId: (uint8_t) _nodeId _commandClassId: (uint8_t) _commandClassId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (int32_t) _homeId;
- (void) set_homeId: (int32_t) _homeId;
#endif
- (BOOL) _homeIdIsSet;

#if !__has_feature(objc_arc)
- (uint8_t) _nodeId;
- (void) set_nodeId: (uint8_t) _nodeId;
#endif
- (BOOL) _nodeIdIsSet;

#if !__has_feature(objc_arc)
- (uint8_t) _commandClassId;
- (void) set_commandClassId: (uint8_t) _commandClassId;
#endif
- (BOOL) _commandClassIdIsSet;

@end

@implementation OpenZWaveGetNodeClassInformation_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_homeId: (int32_t) _homeId _nodeId: (uint8_t) _nodeId _commandClassId: (uint8_t) _commandClassId
{
  self = [super init];
  ___homeId = _homeId;
  ___homeId_isset = YES;
  ___nodeId = _nodeId;
  ___nodeId_isset = YES;
  ___commandClassId = _commandClassId;
  ___commandClassId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_homeId"])
  {
    ___homeId = [decoder decodeInt32ForKey: @"_homeId"];
    ___homeId_isset = YES;
  }
  if ([decoder containsValueForKey: @"_nodeId"])
  {
    ___nodeId = [decoder decodeIntForKey: @"_nodeId"];
    ___nodeId_isset = YES;
  }
  if ([decoder containsValueForKey: @"_commandClassId"])
  {
    ___commandClassId = [decoder decodeIntForKey: @"_commandClassId"];
    ___commandClassId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___homeId_isset)
  {
    [encoder encodeInt32: ___homeId forKey: @"_homeId"];
  }
  if (___nodeId_isset)
  {
    [encoder encodeInt: ___nodeId forKey: @"_nodeId"];
  }
  if (___commandClassId_isset)
  {
    [encoder encodeInt: ___commandClassId forKey: @"_commandClassId"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (int32_t) _homeId {
  return ___homeId;
}

- (void) set_homeId: (int32_t) _homeId {
  ___homeId = _homeId;
  ___homeId_isset = YES;
}

- (BOOL) _homeIdIsSet {
  return ___homeId_isset;
}

- (void) unset_homeId {
  ___homeId_isset = NO;
}

- (uint8_t) _nodeId {
  return ___nodeId;
}

- (void) set_nodeId: (uint8_t) _nodeId {
  ___nodeId = _nodeId;
  ___nodeId_isset = YES;
}

- (BOOL) _nodeIdIsSet {
  return ___nodeId_isset;
}

- (void) unset_nodeId {
  ___nodeId_isset = NO;
}

- (uint8_t) _commandClassId {
  return ___commandClassId;
}

- (void) set_commandClassId: (uint8_t) _commandClassId {
  ___commandClassId = _commandClassId;
  ___commandClassId_isset = YES;
}

- (BOOL) _commandClassIdIsSet {
  return ___commandClassId_isset;
}

- (void) unset_commandClassId {
  ___commandClassId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self set_homeId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self set_nodeId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self set_commandClassId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetNodeClassInformation_args"];
  if (___homeId_isset) {
    [outProtocol writeFieldBeginWithName: @"_homeId" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: ___homeId];
    [outProtocol writeFieldEnd];
  }
  if (___nodeId_isset) {
    [outProtocol writeFieldBeginWithName: @"_nodeId" type: TType_BYTE fieldID: 2];
    [outProtocol writeByte: ___nodeId];
    [outProtocol writeFieldEnd];
  }
  if (___commandClassId_isset) {
    [outProtocol writeFieldBeginWithName: @"_commandClassId" type: TType_BYTE fieldID: 3];
    [outProtocol writeByte: ___commandClassId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetNodeClassInformation_args("];
  [ms appendString: @"_homeId:"];
  [ms appendFormat: @"%i", ___homeId];
  [ms appendString: @",_nodeId:"];
  [ms appendFormat: @"%i", ___nodeId];
  [ms appendString: @",_commandClassId:"];
  [ms appendFormat: @"%i", ___commandClassId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveGetNodeClassInformation_result : NSObject <NSCoding> {
  OpenZWaveBool_GetNodeClassInformation * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) OpenZWaveBool_GetNodeClassInformation * success;
#endif

- (id) init;
- (id) initWithSuccess: (OpenZWaveBool_GetNodeClassInformation *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (OpenZWaveBool_GetNodeClassInformation *) success;
- (void) setSuccess: (OpenZWaveBool_GetNodeClassInformation *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation OpenZWaveGetNodeClassInformation_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (OpenZWaveBool_GetNodeClassInformation *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (OpenZWaveBool_GetNodeClassInformation *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (OpenZWaveBool_GetNodeClassInformation *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          OpenZWaveBool_GetNodeClassInformation *fieldValue = [[OpenZWaveBool_GetNodeClassInformation alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetNodeClassInformation_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetNodeClassInformation_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveGetValueLabel_args : NSObject <NSCoding> {
  OpenZWaveRemoteValueID * ___id;

  BOOL ___id_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=_id, setter=set_id:) OpenZWaveRemoteValueID * _id;
#endif

- (id) init;
- (id) initWith_id: (OpenZWaveRemoteValueID *) _id;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (OpenZWaveRemoteValueID *) _id;
- (void) set_id: (OpenZWaveRemoteValueID *) _id;
#endif
- (BOOL) _idIsSet;

@end

@implementation OpenZWaveGetValueLabel_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_id: (OpenZWaveRemoteValueID *) _id
{
  self = [super init];
  ___id = [_id retain_stub];
  ___id_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_id"])
  {
    ___id = [[decoder decodeObjectForKey: @"_id"] retain_stub];
    ___id_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___id_isset)
  {
    [encoder encodeObject: ___id forKey: @"_id"];
  }
}

- (void) dealloc
{
  [___id release_stub];
  [super dealloc_stub];
}

- (OpenZWaveRemoteValueID *) _id {
  return [[___id retain_stub] autorelease_stub];
}

- (void) set_id: (OpenZWaveRemoteValueID *) _id {
  [_id retain_stub];
  [___id release_stub];
  ___id = _id;
  ___id_isset = YES;
}

- (BOOL) _idIsSet {
  return ___id_isset;
}

- (void) unset_id {
  [___id release_stub];
  ___id = nil;
  ___id_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          OpenZWaveRemoteValueID *fieldValue = [[OpenZWaveRemoteValueID alloc] init];
          [fieldValue read: inProtocol];
          [self set_id: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetValueLabel_args"];
  if (___id_isset) {
    if (___id != nil) {
      [outProtocol writeFieldBeginWithName: @"_id" type: TType_STRUCT fieldID: 1];
      [___id write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetValueLabel_args("];
  [ms appendString: @"_id:"];
  [ms appendFormat: @"%@", ___id];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveGetValueLabel_result : NSObject <NSCoding> {
  NSString * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSString * success;
#endif

- (id) init;
- (id) initWithSuccess: (NSString *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (NSString *) success;
- (void) setSuccess: (NSString *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation OpenZWaveGetValueLabel_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NSString *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (NSString *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSString *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetValueLabel_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRING fieldID: 0];
      [outProtocol writeString: __success];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetValueLabel_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"\"%@\"", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveSetValueLabel_args : NSObject <NSCoding> {
  OpenZWaveRemoteValueID * ___id;
  NSString * ___value;

  BOOL ___id_isset;
  BOOL ___value_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=_id, setter=set_id:) OpenZWaveRemoteValueID * _id;
@property (nonatomic, retain, getter=_value, setter=set_value:) NSString * _value;
#endif

- (id) init;
- (id) initWith_id: (OpenZWaveRemoteValueID *) _id _value: (NSString *) _value;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (OpenZWaveRemoteValueID *) _id;
- (void) set_id: (OpenZWaveRemoteValueID *) _id;
#endif
- (BOOL) _idIsSet;

#if !__has_feature(objc_arc)
- (NSString *) _value;
- (void) set_value: (NSString *) _value;
#endif
- (BOOL) _valueIsSet;

@end

@implementation OpenZWaveSetValueLabel_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_id: (OpenZWaveRemoteValueID *) _id _value: (NSString *) _value
{
  self = [super init];
  ___id = [_id retain_stub];
  ___id_isset = YES;
  ___value = [_value retain_stub];
  ___value_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_id"])
  {
    ___id = [[decoder decodeObjectForKey: @"_id"] retain_stub];
    ___id_isset = YES;
  }
  if ([decoder containsValueForKey: @"_value"])
  {
    ___value = [[decoder decodeObjectForKey: @"_value"] retain_stub];
    ___value_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___id_isset)
  {
    [encoder encodeObject: ___id forKey: @"_id"];
  }
  if (___value_isset)
  {
    [encoder encodeObject: ___value forKey: @"_value"];
  }
}

- (void) dealloc
{
  [___id release_stub];
  [___value release_stub];
  [super dealloc_stub];
}

- (OpenZWaveRemoteValueID *) _id {
  return [[___id retain_stub] autorelease_stub];
}

- (void) set_id: (OpenZWaveRemoteValueID *) _id {
  [_id retain_stub];
  [___id release_stub];
  ___id = _id;
  ___id_isset = YES;
}

- (BOOL) _idIsSet {
  return ___id_isset;
}

- (void) unset_id {
  [___id release_stub];
  ___id = nil;
  ___id_isset = NO;
}

- (NSString *) _value {
  return [[___value retain_stub] autorelease_stub];
}

- (void) set_value: (NSString *) _value {
  [_value retain_stub];
  [___value release_stub];
  ___value = _value;
  ___value_isset = YES;
}

- (BOOL) _valueIsSet {
  return ___value_isset;
}

- (void) unset_value {
  [___value release_stub];
  ___value = nil;
  ___value_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          OpenZWaveRemoteValueID *fieldValue = [[OpenZWaveRemoteValueID alloc] init];
          [fieldValue read: inProtocol];
          [self set_id: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self set_value: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SetValueLabel_args"];
  if (___id_isset) {
    if (___id != nil) {
      [outProtocol writeFieldBeginWithName: @"_id" type: TType_STRUCT fieldID: 1];
      [___id write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (___value_isset) {
    if (___value != nil) {
      [outProtocol writeFieldBeginWithName: @"_value" type: TType_STRING fieldID: 2];
      [outProtocol writeString: ___value];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SetValueLabel_args("];
  [ms appendString: @"_id:"];
  [ms appendFormat: @"%@", ___id];
  [ms appendString: @",_value:"];
  [ms appendFormat: @"\"%@\"", ___value];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveSetValueLabel_result : NSObject <NSCoding> {
}

- (id) init;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

@end

@implementation OpenZWaveSetValueLabel_result

- (id) init
{
  self = [super init];
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SetValueLabel_result"];

  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SetValueLabel_result("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveGetValueUnits_args : NSObject <NSCoding> {
  OpenZWaveRemoteValueID * ___id;

  BOOL ___id_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=_id, setter=set_id:) OpenZWaveRemoteValueID * _id;
#endif

- (id) init;
- (id) initWith_id: (OpenZWaveRemoteValueID *) _id;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (OpenZWaveRemoteValueID *) _id;
- (void) set_id: (OpenZWaveRemoteValueID *) _id;
#endif
- (BOOL) _idIsSet;

@end

@implementation OpenZWaveGetValueUnits_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_id: (OpenZWaveRemoteValueID *) _id
{
  self = [super init];
  ___id = [_id retain_stub];
  ___id_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_id"])
  {
    ___id = [[decoder decodeObjectForKey: @"_id"] retain_stub];
    ___id_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___id_isset)
  {
    [encoder encodeObject: ___id forKey: @"_id"];
  }
}

- (void) dealloc
{
  [___id release_stub];
  [super dealloc_stub];
}

- (OpenZWaveRemoteValueID *) _id {
  return [[___id retain_stub] autorelease_stub];
}

- (void) set_id: (OpenZWaveRemoteValueID *) _id {
  [_id retain_stub];
  [___id release_stub];
  ___id = _id;
  ___id_isset = YES;
}

- (BOOL) _idIsSet {
  return ___id_isset;
}

- (void) unset_id {
  [___id release_stub];
  ___id = nil;
  ___id_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          OpenZWaveRemoteValueID *fieldValue = [[OpenZWaveRemoteValueID alloc] init];
          [fieldValue read: inProtocol];
          [self set_id: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetValueUnits_args"];
  if (___id_isset) {
    if (___id != nil) {
      [outProtocol writeFieldBeginWithName: @"_id" type: TType_STRUCT fieldID: 1];
      [___id write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetValueUnits_args("];
  [ms appendString: @"_id:"];
  [ms appendFormat: @"%@", ___id];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveGetValueUnits_result : NSObject <NSCoding> {
  NSString * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSString * success;
#endif

- (id) init;
- (id) initWithSuccess: (NSString *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (NSString *) success;
- (void) setSuccess: (NSString *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation OpenZWaveGetValueUnits_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NSString *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (NSString *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSString *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetValueUnits_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRING fieldID: 0];
      [outProtocol writeString: __success];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetValueUnits_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"\"%@\"", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveSetValueUnits_args : NSObject <NSCoding> {
  OpenZWaveRemoteValueID * ___id;
  NSString * ___value;

  BOOL ___id_isset;
  BOOL ___value_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=_id, setter=set_id:) OpenZWaveRemoteValueID * _id;
@property (nonatomic, retain, getter=_value, setter=set_value:) NSString * _value;
#endif

- (id) init;
- (id) initWith_id: (OpenZWaveRemoteValueID *) _id _value: (NSString *) _value;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (OpenZWaveRemoteValueID *) _id;
- (void) set_id: (OpenZWaveRemoteValueID *) _id;
#endif
- (BOOL) _idIsSet;

#if !__has_feature(objc_arc)
- (NSString *) _value;
- (void) set_value: (NSString *) _value;
#endif
- (BOOL) _valueIsSet;

@end

@implementation OpenZWaveSetValueUnits_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_id: (OpenZWaveRemoteValueID *) _id _value: (NSString *) _value
{
  self = [super init];
  ___id = [_id retain_stub];
  ___id_isset = YES;
  ___value = [_value retain_stub];
  ___value_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_id"])
  {
    ___id = [[decoder decodeObjectForKey: @"_id"] retain_stub];
    ___id_isset = YES;
  }
  if ([decoder containsValueForKey: @"_value"])
  {
    ___value = [[decoder decodeObjectForKey: @"_value"] retain_stub];
    ___value_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___id_isset)
  {
    [encoder encodeObject: ___id forKey: @"_id"];
  }
  if (___value_isset)
  {
    [encoder encodeObject: ___value forKey: @"_value"];
  }
}

- (void) dealloc
{
  [___id release_stub];
  [___value release_stub];
  [super dealloc_stub];
}

- (OpenZWaveRemoteValueID *) _id {
  return [[___id retain_stub] autorelease_stub];
}

- (void) set_id: (OpenZWaveRemoteValueID *) _id {
  [_id retain_stub];
  [___id release_stub];
  ___id = _id;
  ___id_isset = YES;
}

- (BOOL) _idIsSet {
  return ___id_isset;
}

- (void) unset_id {
  [___id release_stub];
  ___id = nil;
  ___id_isset = NO;
}

- (NSString *) _value {
  return [[___value retain_stub] autorelease_stub];
}

- (void) set_value: (NSString *) _value {
  [_value retain_stub];
  [___value release_stub];
  ___value = _value;
  ___value_isset = YES;
}

- (BOOL) _valueIsSet {
  return ___value_isset;
}

- (void) unset_value {
  [___value release_stub];
  ___value = nil;
  ___value_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          OpenZWaveRemoteValueID *fieldValue = [[OpenZWaveRemoteValueID alloc] init];
          [fieldValue read: inProtocol];
          [self set_id: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self set_value: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SetValueUnits_args"];
  if (___id_isset) {
    if (___id != nil) {
      [outProtocol writeFieldBeginWithName: @"_id" type: TType_STRUCT fieldID: 1];
      [___id write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (___value_isset) {
    if (___value != nil) {
      [outProtocol writeFieldBeginWithName: @"_value" type: TType_STRING fieldID: 2];
      [outProtocol writeString: ___value];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SetValueUnits_args("];
  [ms appendString: @"_id:"];
  [ms appendFormat: @"%@", ___id];
  [ms appendString: @",_value:"];
  [ms appendFormat: @"\"%@\"", ___value];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveSetValueUnits_result : NSObject <NSCoding> {
}

- (id) init;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

@end

@implementation OpenZWaveSetValueUnits_result

- (id) init
{
  self = [super init];
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SetValueUnits_result"];

  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SetValueUnits_result("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveGetValueHelp_args : NSObject <NSCoding> {
  OpenZWaveRemoteValueID * ___id;

  BOOL ___id_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=_id, setter=set_id:) OpenZWaveRemoteValueID * _id;
#endif

- (id) init;
- (id) initWith_id: (OpenZWaveRemoteValueID *) _id;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (OpenZWaveRemoteValueID *) _id;
- (void) set_id: (OpenZWaveRemoteValueID *) _id;
#endif
- (BOOL) _idIsSet;

@end

@implementation OpenZWaveGetValueHelp_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_id: (OpenZWaveRemoteValueID *) _id
{
  self = [super init];
  ___id = [_id retain_stub];
  ___id_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_id"])
  {
    ___id = [[decoder decodeObjectForKey: @"_id"] retain_stub];
    ___id_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___id_isset)
  {
    [encoder encodeObject: ___id forKey: @"_id"];
  }
}

- (void) dealloc
{
  [___id release_stub];
  [super dealloc_stub];
}

- (OpenZWaveRemoteValueID *) _id {
  return [[___id retain_stub] autorelease_stub];
}

- (void) set_id: (OpenZWaveRemoteValueID *) _id {
  [_id retain_stub];
  [___id release_stub];
  ___id = _id;
  ___id_isset = YES;
}

- (BOOL) _idIsSet {
  return ___id_isset;
}

- (void) unset_id {
  [___id release_stub];
  ___id = nil;
  ___id_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          OpenZWaveRemoteValueID *fieldValue = [[OpenZWaveRemoteValueID alloc] init];
          [fieldValue read: inProtocol];
          [self set_id: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetValueHelp_args"];
  if (___id_isset) {
    if (___id != nil) {
      [outProtocol writeFieldBeginWithName: @"_id" type: TType_STRUCT fieldID: 1];
      [___id write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetValueHelp_args("];
  [ms appendString: @"_id:"];
  [ms appendFormat: @"%@", ___id];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveGetValueHelp_result : NSObject <NSCoding> {
  NSString * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSString * success;
#endif

- (id) init;
- (id) initWithSuccess: (NSString *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (NSString *) success;
- (void) setSuccess: (NSString *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation OpenZWaveGetValueHelp_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NSString *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (NSString *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSString *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetValueHelp_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRING fieldID: 0];
      [outProtocol writeString: __success];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetValueHelp_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"\"%@\"", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveSetValueHelp_args : NSObject <NSCoding> {
  OpenZWaveRemoteValueID * ___id;
  NSString * ___value;

  BOOL ___id_isset;
  BOOL ___value_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=_id, setter=set_id:) OpenZWaveRemoteValueID * _id;
@property (nonatomic, retain, getter=_value, setter=set_value:) NSString * _value;
#endif

- (id) init;
- (id) initWith_id: (OpenZWaveRemoteValueID *) _id _value: (NSString *) _value;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (OpenZWaveRemoteValueID *) _id;
- (void) set_id: (OpenZWaveRemoteValueID *) _id;
#endif
- (BOOL) _idIsSet;

#if !__has_feature(objc_arc)
- (NSString *) _value;
- (void) set_value: (NSString *) _value;
#endif
- (BOOL) _valueIsSet;

@end

@implementation OpenZWaveSetValueHelp_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_id: (OpenZWaveRemoteValueID *) _id _value: (NSString *) _value
{
  self = [super init];
  ___id = [_id retain_stub];
  ___id_isset = YES;
  ___value = [_value retain_stub];
  ___value_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_id"])
  {
    ___id = [[decoder decodeObjectForKey: @"_id"] retain_stub];
    ___id_isset = YES;
  }
  if ([decoder containsValueForKey: @"_value"])
  {
    ___value = [[decoder decodeObjectForKey: @"_value"] retain_stub];
    ___value_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___id_isset)
  {
    [encoder encodeObject: ___id forKey: @"_id"];
  }
  if (___value_isset)
  {
    [encoder encodeObject: ___value forKey: @"_value"];
  }
}

- (void) dealloc
{
  [___id release_stub];
  [___value release_stub];
  [super dealloc_stub];
}

- (OpenZWaveRemoteValueID *) _id {
  return [[___id retain_stub] autorelease_stub];
}

- (void) set_id: (OpenZWaveRemoteValueID *) _id {
  [_id retain_stub];
  [___id release_stub];
  ___id = _id;
  ___id_isset = YES;
}

- (BOOL) _idIsSet {
  return ___id_isset;
}

- (void) unset_id {
  [___id release_stub];
  ___id = nil;
  ___id_isset = NO;
}

- (NSString *) _value {
  return [[___value retain_stub] autorelease_stub];
}

- (void) set_value: (NSString *) _value {
  [_value retain_stub];
  [___value release_stub];
  ___value = _value;
  ___value_isset = YES;
}

- (BOOL) _valueIsSet {
  return ___value_isset;
}

- (void) unset_value {
  [___value release_stub];
  ___value = nil;
  ___value_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          OpenZWaveRemoteValueID *fieldValue = [[OpenZWaveRemoteValueID alloc] init];
          [fieldValue read: inProtocol];
          [self set_id: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self set_value: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SetValueHelp_args"];
  if (___id_isset) {
    if (___id != nil) {
      [outProtocol writeFieldBeginWithName: @"_id" type: TType_STRUCT fieldID: 1];
      [___id write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (___value_isset) {
    if (___value != nil) {
      [outProtocol writeFieldBeginWithName: @"_value" type: TType_STRING fieldID: 2];
      [outProtocol writeString: ___value];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SetValueHelp_args("];
  [ms appendString: @"_id:"];
  [ms appendFormat: @"%@", ___id];
  [ms appendString: @",_value:"];
  [ms appendFormat: @"\"%@\"", ___value];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveSetValueHelp_result : NSObject <NSCoding> {
}

- (id) init;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

@end

@implementation OpenZWaveSetValueHelp_result

- (id) init
{
  self = [super init];
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SetValueHelp_result"];

  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SetValueHelp_result("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveGetValueMin_args : NSObject <NSCoding> {
  OpenZWaveRemoteValueID * ___id;

  BOOL ___id_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=_id, setter=set_id:) OpenZWaveRemoteValueID * _id;
#endif

- (id) init;
- (id) initWith_id: (OpenZWaveRemoteValueID *) _id;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (OpenZWaveRemoteValueID *) _id;
- (void) set_id: (OpenZWaveRemoteValueID *) _id;
#endif
- (BOOL) _idIsSet;

@end

@implementation OpenZWaveGetValueMin_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_id: (OpenZWaveRemoteValueID *) _id
{
  self = [super init];
  ___id = [_id retain_stub];
  ___id_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_id"])
  {
    ___id = [[decoder decodeObjectForKey: @"_id"] retain_stub];
    ___id_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___id_isset)
  {
    [encoder encodeObject: ___id forKey: @"_id"];
  }
}

- (void) dealloc
{
  [___id release_stub];
  [super dealloc_stub];
}

- (OpenZWaveRemoteValueID *) _id {
  return [[___id retain_stub] autorelease_stub];
}

- (void) set_id: (OpenZWaveRemoteValueID *) _id {
  [_id retain_stub];
  [___id release_stub];
  ___id = _id;
  ___id_isset = YES;
}

- (BOOL) _idIsSet {
  return ___id_isset;
}

- (void) unset_id {
  [___id release_stub];
  ___id = nil;
  ___id_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          OpenZWaveRemoteValueID *fieldValue = [[OpenZWaveRemoteValueID alloc] init];
          [fieldValue read: inProtocol];
          [self set_id: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetValueMin_args"];
  if (___id_isset) {
    if (___id != nil) {
      [outProtocol writeFieldBeginWithName: @"_id" type: TType_STRUCT fieldID: 1];
      [___id write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetValueMin_args("];
  [ms appendString: @"_id:"];
  [ms appendFormat: @"%@", ___id];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveGetValueMin_result : NSObject <NSCoding> {
  int32_t __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) int32_t success;
#endif

- (id) init;
- (id) initWithSuccess: (int32_t) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (int32_t) success;
- (void) setSuccess: (int32_t) success;
#endif
- (BOOL) successIsSet;

@end

@implementation OpenZWaveGetValueMin_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (int32_t) success
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeInt32ForKey: @"success"];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeInt32: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (int32_t) success {
  return __success;
}

- (void) setSuccess: (int32_t) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetValueMin_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_I32 fieldID: 0];
    [outProtocol writeI32: __success];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetValueMin_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveGetValueMax_args : NSObject <NSCoding> {
  OpenZWaveRemoteValueID * ___id;

  BOOL ___id_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=_id, setter=set_id:) OpenZWaveRemoteValueID * _id;
#endif

- (id) init;
- (id) initWith_id: (OpenZWaveRemoteValueID *) _id;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (OpenZWaveRemoteValueID *) _id;
- (void) set_id: (OpenZWaveRemoteValueID *) _id;
#endif
- (BOOL) _idIsSet;

@end

@implementation OpenZWaveGetValueMax_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_id: (OpenZWaveRemoteValueID *) _id
{
  self = [super init];
  ___id = [_id retain_stub];
  ___id_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_id"])
  {
    ___id = [[decoder decodeObjectForKey: @"_id"] retain_stub];
    ___id_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___id_isset)
  {
    [encoder encodeObject: ___id forKey: @"_id"];
  }
}

- (void) dealloc
{
  [___id release_stub];
  [super dealloc_stub];
}

- (OpenZWaveRemoteValueID *) _id {
  return [[___id retain_stub] autorelease_stub];
}

- (void) set_id: (OpenZWaveRemoteValueID *) _id {
  [_id retain_stub];
  [___id release_stub];
  ___id = _id;
  ___id_isset = YES;
}

- (BOOL) _idIsSet {
  return ___id_isset;
}

- (void) unset_id {
  [___id release_stub];
  ___id = nil;
  ___id_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          OpenZWaveRemoteValueID *fieldValue = [[OpenZWaveRemoteValueID alloc] init];
          [fieldValue read: inProtocol];
          [self set_id: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetValueMax_args"];
  if (___id_isset) {
    if (___id != nil) {
      [outProtocol writeFieldBeginWithName: @"_id" type: TType_STRUCT fieldID: 1];
      [___id write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetValueMax_args("];
  [ms appendString: @"_id:"];
  [ms appendFormat: @"%@", ___id];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveGetValueMax_result : NSObject <NSCoding> {
  int32_t __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) int32_t success;
#endif

- (id) init;
- (id) initWithSuccess: (int32_t) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (int32_t) success;
- (void) setSuccess: (int32_t) success;
#endif
- (BOOL) successIsSet;

@end

@implementation OpenZWaveGetValueMax_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (int32_t) success
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeInt32ForKey: @"success"];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeInt32: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (int32_t) success {
  return __success;
}

- (void) setSuccess: (int32_t) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetValueMax_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_I32 fieldID: 0];
    [outProtocol writeI32: __success];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetValueMax_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveIsValueReadOnly_args : NSObject <NSCoding> {
  OpenZWaveRemoteValueID * ___id;

  BOOL ___id_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=_id, setter=set_id:) OpenZWaveRemoteValueID * _id;
#endif

- (id) init;
- (id) initWith_id: (OpenZWaveRemoteValueID *) _id;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (OpenZWaveRemoteValueID *) _id;
- (void) set_id: (OpenZWaveRemoteValueID *) _id;
#endif
- (BOOL) _idIsSet;

@end

@implementation OpenZWaveIsValueReadOnly_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_id: (OpenZWaveRemoteValueID *) _id
{
  self = [super init];
  ___id = [_id retain_stub];
  ___id_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_id"])
  {
    ___id = [[decoder decodeObjectForKey: @"_id"] retain_stub];
    ___id_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___id_isset)
  {
    [encoder encodeObject: ___id forKey: @"_id"];
  }
}

- (void) dealloc
{
  [___id release_stub];
  [super dealloc_stub];
}

- (OpenZWaveRemoteValueID *) _id {
  return [[___id retain_stub] autorelease_stub];
}

- (void) set_id: (OpenZWaveRemoteValueID *) _id {
  [_id retain_stub];
  [___id release_stub];
  ___id = _id;
  ___id_isset = YES;
}

- (BOOL) _idIsSet {
  return ___id_isset;
}

- (void) unset_id {
  [___id release_stub];
  ___id = nil;
  ___id_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          OpenZWaveRemoteValueID *fieldValue = [[OpenZWaveRemoteValueID alloc] init];
          [fieldValue read: inProtocol];
          [self set_id: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"IsValueReadOnly_args"];
  if (___id_isset) {
    if (___id != nil) {
      [outProtocol writeFieldBeginWithName: @"_id" type: TType_STRUCT fieldID: 1];
      [___id write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"IsValueReadOnly_args("];
  [ms appendString: @"_id:"];
  [ms appendFormat: @"%@", ___id];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveIsValueReadOnly_result : NSObject <NSCoding> {
  BOOL __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) BOOL success;
#endif

- (id) init;
- (id) initWithSuccess: (BOOL) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (BOOL) success;
- (void) setSuccess: (BOOL) success;
#endif
- (BOOL) successIsSet;

@end

@implementation OpenZWaveIsValueReadOnly_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (BOOL) success
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeBoolForKey: @"success"];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeBool: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (BOOL) success {
  return __success;
}

- (void) setSuccess: (BOOL) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"IsValueReadOnly_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
    [outProtocol writeBool: __success];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"IsValueReadOnly_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveIsValueWriteOnly_args : NSObject <NSCoding> {
  OpenZWaveRemoteValueID * ___id;

  BOOL ___id_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=_id, setter=set_id:) OpenZWaveRemoteValueID * _id;
#endif

- (id) init;
- (id) initWith_id: (OpenZWaveRemoteValueID *) _id;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (OpenZWaveRemoteValueID *) _id;
- (void) set_id: (OpenZWaveRemoteValueID *) _id;
#endif
- (BOOL) _idIsSet;

@end

@implementation OpenZWaveIsValueWriteOnly_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_id: (OpenZWaveRemoteValueID *) _id
{
  self = [super init];
  ___id = [_id retain_stub];
  ___id_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_id"])
  {
    ___id = [[decoder decodeObjectForKey: @"_id"] retain_stub];
    ___id_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___id_isset)
  {
    [encoder encodeObject: ___id forKey: @"_id"];
  }
}

- (void) dealloc
{
  [___id release_stub];
  [super dealloc_stub];
}

- (OpenZWaveRemoteValueID *) _id {
  return [[___id retain_stub] autorelease_stub];
}

- (void) set_id: (OpenZWaveRemoteValueID *) _id {
  [_id retain_stub];
  [___id release_stub];
  ___id = _id;
  ___id_isset = YES;
}

- (BOOL) _idIsSet {
  return ___id_isset;
}

- (void) unset_id {
  [___id release_stub];
  ___id = nil;
  ___id_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          OpenZWaveRemoteValueID *fieldValue = [[OpenZWaveRemoteValueID alloc] init];
          [fieldValue read: inProtocol];
          [self set_id: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"IsValueWriteOnly_args"];
  if (___id_isset) {
    if (___id != nil) {
      [outProtocol writeFieldBeginWithName: @"_id" type: TType_STRUCT fieldID: 1];
      [___id write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"IsValueWriteOnly_args("];
  [ms appendString: @"_id:"];
  [ms appendFormat: @"%@", ___id];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveIsValueWriteOnly_result : NSObject <NSCoding> {
  BOOL __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) BOOL success;
#endif

- (id) init;
- (id) initWithSuccess: (BOOL) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (BOOL) success;
- (void) setSuccess: (BOOL) success;
#endif
- (BOOL) successIsSet;

@end

@implementation OpenZWaveIsValueWriteOnly_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (BOOL) success
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeBoolForKey: @"success"];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeBool: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (BOOL) success {
  return __success;
}

- (void) setSuccess: (BOOL) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"IsValueWriteOnly_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
    [outProtocol writeBool: __success];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"IsValueWriteOnly_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveIsValueSet_args : NSObject <NSCoding> {
  OpenZWaveRemoteValueID * ___id;

  BOOL ___id_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=_id, setter=set_id:) OpenZWaveRemoteValueID * _id;
#endif

- (id) init;
- (id) initWith_id: (OpenZWaveRemoteValueID *) _id;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (OpenZWaveRemoteValueID *) _id;
- (void) set_id: (OpenZWaveRemoteValueID *) _id;
#endif
- (BOOL) _idIsSet;

@end

@implementation OpenZWaveIsValueSet_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_id: (OpenZWaveRemoteValueID *) _id
{
  self = [super init];
  ___id = [_id retain_stub];
  ___id_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_id"])
  {
    ___id = [[decoder decodeObjectForKey: @"_id"] retain_stub];
    ___id_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___id_isset)
  {
    [encoder encodeObject: ___id forKey: @"_id"];
  }
}

- (void) dealloc
{
  [___id release_stub];
  [super dealloc_stub];
}

- (OpenZWaveRemoteValueID *) _id {
  return [[___id retain_stub] autorelease_stub];
}

- (void) set_id: (OpenZWaveRemoteValueID *) _id {
  [_id retain_stub];
  [___id release_stub];
  ___id = _id;
  ___id_isset = YES;
}

- (BOOL) _idIsSet {
  return ___id_isset;
}

- (void) unset_id {
  [___id release_stub];
  ___id = nil;
  ___id_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          OpenZWaveRemoteValueID *fieldValue = [[OpenZWaveRemoteValueID alloc] init];
          [fieldValue read: inProtocol];
          [self set_id: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"IsValueSet_args"];
  if (___id_isset) {
    if (___id != nil) {
      [outProtocol writeFieldBeginWithName: @"_id" type: TType_STRUCT fieldID: 1];
      [___id write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"IsValueSet_args("];
  [ms appendString: @"_id:"];
  [ms appendFormat: @"%@", ___id];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveIsValueSet_result : NSObject <NSCoding> {
  BOOL __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) BOOL success;
#endif

- (id) init;
- (id) initWithSuccess: (BOOL) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (BOOL) success;
- (void) setSuccess: (BOOL) success;
#endif
- (BOOL) successIsSet;

@end

@implementation OpenZWaveIsValueSet_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (BOOL) success
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeBoolForKey: @"success"];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeBool: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (BOOL) success {
  return __success;
}

- (void) setSuccess: (BOOL) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"IsValueSet_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
    [outProtocol writeBool: __success];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"IsValueSet_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveIsValuePolled_args : NSObject <NSCoding> {
  OpenZWaveRemoteValueID * ___id;

  BOOL ___id_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=_id, setter=set_id:) OpenZWaveRemoteValueID * _id;
#endif

- (id) init;
- (id) initWith_id: (OpenZWaveRemoteValueID *) _id;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (OpenZWaveRemoteValueID *) _id;
- (void) set_id: (OpenZWaveRemoteValueID *) _id;
#endif
- (BOOL) _idIsSet;

@end

@implementation OpenZWaveIsValuePolled_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_id: (OpenZWaveRemoteValueID *) _id
{
  self = [super init];
  ___id = [_id retain_stub];
  ___id_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_id"])
  {
    ___id = [[decoder decodeObjectForKey: @"_id"] retain_stub];
    ___id_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___id_isset)
  {
    [encoder encodeObject: ___id forKey: @"_id"];
  }
}

- (void) dealloc
{
  [___id release_stub];
  [super dealloc_stub];
}

- (OpenZWaveRemoteValueID *) _id {
  return [[___id retain_stub] autorelease_stub];
}

- (void) set_id: (OpenZWaveRemoteValueID *) _id {
  [_id retain_stub];
  [___id release_stub];
  ___id = _id;
  ___id_isset = YES;
}

- (BOOL) _idIsSet {
  return ___id_isset;
}

- (void) unset_id {
  [___id release_stub];
  ___id = nil;
  ___id_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          OpenZWaveRemoteValueID *fieldValue = [[OpenZWaveRemoteValueID alloc] init];
          [fieldValue read: inProtocol];
          [self set_id: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"IsValuePolled_args"];
  if (___id_isset) {
    if (___id != nil) {
      [outProtocol writeFieldBeginWithName: @"_id" type: TType_STRUCT fieldID: 1];
      [___id write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"IsValuePolled_args("];
  [ms appendString: @"_id:"];
  [ms appendFormat: @"%@", ___id];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveIsValuePolled_result : NSObject <NSCoding> {
  BOOL __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) BOOL success;
#endif

- (id) init;
- (id) initWithSuccess: (BOOL) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (BOOL) success;
- (void) setSuccess: (BOOL) success;
#endif
- (BOOL) successIsSet;

@end

@implementation OpenZWaveIsValuePolled_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (BOOL) success
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeBoolForKey: @"success"];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeBool: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (BOOL) success {
  return __success;
}

- (void) setSuccess: (BOOL) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"IsValuePolled_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
    [outProtocol writeBool: __success];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"IsValuePolled_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveGetValueAsBool_args : NSObject <NSCoding> {
  OpenZWaveRemoteValueID * ___id;

  BOOL ___id_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=_id, setter=set_id:) OpenZWaveRemoteValueID * _id;
#endif

- (id) init;
- (id) initWith_id: (OpenZWaveRemoteValueID *) _id;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (OpenZWaveRemoteValueID *) _id;
- (void) set_id: (OpenZWaveRemoteValueID *) _id;
#endif
- (BOOL) _idIsSet;

@end

@implementation OpenZWaveGetValueAsBool_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_id: (OpenZWaveRemoteValueID *) _id
{
  self = [super init];
  ___id = [_id retain_stub];
  ___id_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_id"])
  {
    ___id = [[decoder decodeObjectForKey: @"_id"] retain_stub];
    ___id_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___id_isset)
  {
    [encoder encodeObject: ___id forKey: @"_id"];
  }
}

- (void) dealloc
{
  [___id release_stub];
  [super dealloc_stub];
}

- (OpenZWaveRemoteValueID *) _id {
  return [[___id retain_stub] autorelease_stub];
}

- (void) set_id: (OpenZWaveRemoteValueID *) _id {
  [_id retain_stub];
  [___id release_stub];
  ___id = _id;
  ___id_isset = YES;
}

- (BOOL) _idIsSet {
  return ___id_isset;
}

- (void) unset_id {
  [___id release_stub];
  ___id = nil;
  ___id_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          OpenZWaveRemoteValueID *fieldValue = [[OpenZWaveRemoteValueID alloc] init];
          [fieldValue read: inProtocol];
          [self set_id: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetValueAsBool_args"];
  if (___id_isset) {
    if (___id != nil) {
      [outProtocol writeFieldBeginWithName: @"_id" type: TType_STRUCT fieldID: 1];
      [___id write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetValueAsBool_args("];
  [ms appendString: @"_id:"];
  [ms appendFormat: @"%@", ___id];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveGetValueAsBool_result : NSObject <NSCoding> {
  OpenZWaveBool_Bool * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) OpenZWaveBool_Bool * success;
#endif

- (id) init;
- (id) initWithSuccess: (OpenZWaveBool_Bool *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (OpenZWaveBool_Bool *) success;
- (void) setSuccess: (OpenZWaveBool_Bool *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation OpenZWaveGetValueAsBool_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (OpenZWaveBool_Bool *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (OpenZWaveBool_Bool *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (OpenZWaveBool_Bool *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          OpenZWaveBool_Bool *fieldValue = [[OpenZWaveBool_Bool alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetValueAsBool_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetValueAsBool_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveGetValueAsByte_args : NSObject <NSCoding> {
  OpenZWaveRemoteValueID * ___id;

  BOOL ___id_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=_id, setter=set_id:) OpenZWaveRemoteValueID * _id;
#endif

- (id) init;
- (id) initWith_id: (OpenZWaveRemoteValueID *) _id;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (OpenZWaveRemoteValueID *) _id;
- (void) set_id: (OpenZWaveRemoteValueID *) _id;
#endif
- (BOOL) _idIsSet;

@end

@implementation OpenZWaveGetValueAsByte_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_id: (OpenZWaveRemoteValueID *) _id
{
  self = [super init];
  ___id = [_id retain_stub];
  ___id_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_id"])
  {
    ___id = [[decoder decodeObjectForKey: @"_id"] retain_stub];
    ___id_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___id_isset)
  {
    [encoder encodeObject: ___id forKey: @"_id"];
  }
}

- (void) dealloc
{
  [___id release_stub];
  [super dealloc_stub];
}

- (OpenZWaveRemoteValueID *) _id {
  return [[___id retain_stub] autorelease_stub];
}

- (void) set_id: (OpenZWaveRemoteValueID *) _id {
  [_id retain_stub];
  [___id release_stub];
  ___id = _id;
  ___id_isset = YES;
}

- (BOOL) _idIsSet {
  return ___id_isset;
}

- (void) unset_id {
  [___id release_stub];
  ___id = nil;
  ___id_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          OpenZWaveRemoteValueID *fieldValue = [[OpenZWaveRemoteValueID alloc] init];
          [fieldValue read: inProtocol];
          [self set_id: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetValueAsByte_args"];
  if (___id_isset) {
    if (___id != nil) {
      [outProtocol writeFieldBeginWithName: @"_id" type: TType_STRUCT fieldID: 1];
      [___id write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetValueAsByte_args("];
  [ms appendString: @"_id:"];
  [ms appendFormat: @"%@", ___id];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveGetValueAsByte_result : NSObject <NSCoding> {
  OpenZWaveBool_UInt8 * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) OpenZWaveBool_UInt8 * success;
#endif

- (id) init;
- (id) initWithSuccess: (OpenZWaveBool_UInt8 *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (OpenZWaveBool_UInt8 *) success;
- (void) setSuccess: (OpenZWaveBool_UInt8 *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation OpenZWaveGetValueAsByte_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (OpenZWaveBool_UInt8 *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (OpenZWaveBool_UInt8 *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (OpenZWaveBool_UInt8 *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          OpenZWaveBool_UInt8 *fieldValue = [[OpenZWaveBool_UInt8 alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetValueAsByte_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetValueAsByte_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveGetValueAsFloat_args : NSObject <NSCoding> {
  OpenZWaveRemoteValueID * ___id;

  BOOL ___id_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=_id, setter=set_id:) OpenZWaveRemoteValueID * _id;
#endif

- (id) init;
- (id) initWith_id: (OpenZWaveRemoteValueID *) _id;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (OpenZWaveRemoteValueID *) _id;
- (void) set_id: (OpenZWaveRemoteValueID *) _id;
#endif
- (BOOL) _idIsSet;

@end

@implementation OpenZWaveGetValueAsFloat_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_id: (OpenZWaveRemoteValueID *) _id
{
  self = [super init];
  ___id = [_id retain_stub];
  ___id_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_id"])
  {
    ___id = [[decoder decodeObjectForKey: @"_id"] retain_stub];
    ___id_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___id_isset)
  {
    [encoder encodeObject: ___id forKey: @"_id"];
  }
}

- (void) dealloc
{
  [___id release_stub];
  [super dealloc_stub];
}

- (OpenZWaveRemoteValueID *) _id {
  return [[___id retain_stub] autorelease_stub];
}

- (void) set_id: (OpenZWaveRemoteValueID *) _id {
  [_id retain_stub];
  [___id release_stub];
  ___id = _id;
  ___id_isset = YES;
}

- (BOOL) _idIsSet {
  return ___id_isset;
}

- (void) unset_id {
  [___id release_stub];
  ___id = nil;
  ___id_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          OpenZWaveRemoteValueID *fieldValue = [[OpenZWaveRemoteValueID alloc] init];
          [fieldValue read: inProtocol];
          [self set_id: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetValueAsFloat_args"];
  if (___id_isset) {
    if (___id != nil) {
      [outProtocol writeFieldBeginWithName: @"_id" type: TType_STRUCT fieldID: 1];
      [___id write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetValueAsFloat_args("];
  [ms appendString: @"_id:"];
  [ms appendFormat: @"%@", ___id];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveGetValueAsFloat_result : NSObject <NSCoding> {
  OpenZWaveBool_Float * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) OpenZWaveBool_Float * success;
#endif

- (id) init;
- (id) initWithSuccess: (OpenZWaveBool_Float *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (OpenZWaveBool_Float *) success;
- (void) setSuccess: (OpenZWaveBool_Float *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation OpenZWaveGetValueAsFloat_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (OpenZWaveBool_Float *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (OpenZWaveBool_Float *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (OpenZWaveBool_Float *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          OpenZWaveBool_Float *fieldValue = [[OpenZWaveBool_Float alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetValueAsFloat_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetValueAsFloat_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveGetValueAsInt_args : NSObject <NSCoding> {
  OpenZWaveRemoteValueID * ___id;

  BOOL ___id_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=_id, setter=set_id:) OpenZWaveRemoteValueID * _id;
#endif

- (id) init;
- (id) initWith_id: (OpenZWaveRemoteValueID *) _id;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (OpenZWaveRemoteValueID *) _id;
- (void) set_id: (OpenZWaveRemoteValueID *) _id;
#endif
- (BOOL) _idIsSet;

@end

@implementation OpenZWaveGetValueAsInt_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_id: (OpenZWaveRemoteValueID *) _id
{
  self = [super init];
  ___id = [_id retain_stub];
  ___id_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_id"])
  {
    ___id = [[decoder decodeObjectForKey: @"_id"] retain_stub];
    ___id_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___id_isset)
  {
    [encoder encodeObject: ___id forKey: @"_id"];
  }
}

- (void) dealloc
{
  [___id release_stub];
  [super dealloc_stub];
}

- (OpenZWaveRemoteValueID *) _id {
  return [[___id retain_stub] autorelease_stub];
}

- (void) set_id: (OpenZWaveRemoteValueID *) _id {
  [_id retain_stub];
  [___id release_stub];
  ___id = _id;
  ___id_isset = YES;
}

- (BOOL) _idIsSet {
  return ___id_isset;
}

- (void) unset_id {
  [___id release_stub];
  ___id = nil;
  ___id_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          OpenZWaveRemoteValueID *fieldValue = [[OpenZWaveRemoteValueID alloc] init];
          [fieldValue read: inProtocol];
          [self set_id: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetValueAsInt_args"];
  if (___id_isset) {
    if (___id != nil) {
      [outProtocol writeFieldBeginWithName: @"_id" type: TType_STRUCT fieldID: 1];
      [___id write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetValueAsInt_args("];
  [ms appendString: @"_id:"];
  [ms appendFormat: @"%@", ___id];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveGetValueAsInt_result : NSObject <NSCoding> {
  OpenZWaveBool_Int * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) OpenZWaveBool_Int * success;
#endif

- (id) init;
- (id) initWithSuccess: (OpenZWaveBool_Int *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (OpenZWaveBool_Int *) success;
- (void) setSuccess: (OpenZWaveBool_Int *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation OpenZWaveGetValueAsInt_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (OpenZWaveBool_Int *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (OpenZWaveBool_Int *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (OpenZWaveBool_Int *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          OpenZWaveBool_Int *fieldValue = [[OpenZWaveBool_Int alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetValueAsInt_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetValueAsInt_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveGetValueAsShort_args : NSObject <NSCoding> {
  OpenZWaveRemoteValueID * ___id;

  BOOL ___id_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=_id, setter=set_id:) OpenZWaveRemoteValueID * _id;
#endif

- (id) init;
- (id) initWith_id: (OpenZWaveRemoteValueID *) _id;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (OpenZWaveRemoteValueID *) _id;
- (void) set_id: (OpenZWaveRemoteValueID *) _id;
#endif
- (BOOL) _idIsSet;

@end

@implementation OpenZWaveGetValueAsShort_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_id: (OpenZWaveRemoteValueID *) _id
{
  self = [super init];
  ___id = [_id retain_stub];
  ___id_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_id"])
  {
    ___id = [[decoder decodeObjectForKey: @"_id"] retain_stub];
    ___id_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___id_isset)
  {
    [encoder encodeObject: ___id forKey: @"_id"];
  }
}

- (void) dealloc
{
  [___id release_stub];
  [super dealloc_stub];
}

- (OpenZWaveRemoteValueID *) _id {
  return [[___id retain_stub] autorelease_stub];
}

- (void) set_id: (OpenZWaveRemoteValueID *) _id {
  [_id retain_stub];
  [___id release_stub];
  ___id = _id;
  ___id_isset = YES;
}

- (BOOL) _idIsSet {
  return ___id_isset;
}

- (void) unset_id {
  [___id release_stub];
  ___id = nil;
  ___id_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          OpenZWaveRemoteValueID *fieldValue = [[OpenZWaveRemoteValueID alloc] init];
          [fieldValue read: inProtocol];
          [self set_id: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetValueAsShort_args"];
  if (___id_isset) {
    if (___id != nil) {
      [outProtocol writeFieldBeginWithName: @"_id" type: TType_STRUCT fieldID: 1];
      [___id write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetValueAsShort_args("];
  [ms appendString: @"_id:"];
  [ms appendFormat: @"%@", ___id];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveGetValueAsShort_result : NSObject <NSCoding> {
  OpenZWaveBool_Int16 * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) OpenZWaveBool_Int16 * success;
#endif

- (id) init;
- (id) initWithSuccess: (OpenZWaveBool_Int16 *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (OpenZWaveBool_Int16 *) success;
- (void) setSuccess: (OpenZWaveBool_Int16 *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation OpenZWaveGetValueAsShort_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (OpenZWaveBool_Int16 *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (OpenZWaveBool_Int16 *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (OpenZWaveBool_Int16 *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          OpenZWaveBool_Int16 *fieldValue = [[OpenZWaveBool_Int16 alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetValueAsShort_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetValueAsShort_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveGetValueAsString_args : NSObject <NSCoding> {
  OpenZWaveRemoteValueID * ___id;

  BOOL ___id_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=_id, setter=set_id:) OpenZWaveRemoteValueID * _id;
#endif

- (id) init;
- (id) initWith_id: (OpenZWaveRemoteValueID *) _id;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (OpenZWaveRemoteValueID *) _id;
- (void) set_id: (OpenZWaveRemoteValueID *) _id;
#endif
- (BOOL) _idIsSet;

@end

@implementation OpenZWaveGetValueAsString_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_id: (OpenZWaveRemoteValueID *) _id
{
  self = [super init];
  ___id = [_id retain_stub];
  ___id_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_id"])
  {
    ___id = [[decoder decodeObjectForKey: @"_id"] retain_stub];
    ___id_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___id_isset)
  {
    [encoder encodeObject: ___id forKey: @"_id"];
  }
}

- (void) dealloc
{
  [___id release_stub];
  [super dealloc_stub];
}

- (OpenZWaveRemoteValueID *) _id {
  return [[___id retain_stub] autorelease_stub];
}

- (void) set_id: (OpenZWaveRemoteValueID *) _id {
  [_id retain_stub];
  [___id release_stub];
  ___id = _id;
  ___id_isset = YES;
}

- (BOOL) _idIsSet {
  return ___id_isset;
}

- (void) unset_id {
  [___id release_stub];
  ___id = nil;
  ___id_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          OpenZWaveRemoteValueID *fieldValue = [[OpenZWaveRemoteValueID alloc] init];
          [fieldValue read: inProtocol];
          [self set_id: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetValueAsString_args"];
  if (___id_isset) {
    if (___id != nil) {
      [outProtocol writeFieldBeginWithName: @"_id" type: TType_STRUCT fieldID: 1];
      [___id write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetValueAsString_args("];
  [ms appendString: @"_id:"];
  [ms appendFormat: @"%@", ___id];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveGetValueAsString_result : NSObject <NSCoding> {
  OpenZWaveBool_String * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) OpenZWaveBool_String * success;
#endif

- (id) init;
- (id) initWithSuccess: (OpenZWaveBool_String *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (OpenZWaveBool_String *) success;
- (void) setSuccess: (OpenZWaveBool_String *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation OpenZWaveGetValueAsString_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (OpenZWaveBool_String *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (OpenZWaveBool_String *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (OpenZWaveBool_String *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          OpenZWaveBool_String *fieldValue = [[OpenZWaveBool_String alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetValueAsString_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetValueAsString_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveGetValueListSelection_String_args : NSObject <NSCoding> {
  OpenZWaveRemoteValueID * ___id;

  BOOL ___id_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=_id, setter=set_id:) OpenZWaveRemoteValueID * _id;
#endif

- (id) init;
- (id) initWith_id: (OpenZWaveRemoteValueID *) _id;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (OpenZWaveRemoteValueID *) _id;
- (void) set_id: (OpenZWaveRemoteValueID *) _id;
#endif
- (BOOL) _idIsSet;

@end

@implementation OpenZWaveGetValueListSelection_String_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_id: (OpenZWaveRemoteValueID *) _id
{
  self = [super init];
  ___id = [_id retain_stub];
  ___id_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_id"])
  {
    ___id = [[decoder decodeObjectForKey: @"_id"] retain_stub];
    ___id_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___id_isset)
  {
    [encoder encodeObject: ___id forKey: @"_id"];
  }
}

- (void) dealloc
{
  [___id release_stub];
  [super dealloc_stub];
}

- (OpenZWaveRemoteValueID *) _id {
  return [[___id retain_stub] autorelease_stub];
}

- (void) set_id: (OpenZWaveRemoteValueID *) _id {
  [_id retain_stub];
  [___id release_stub];
  ___id = _id;
  ___id_isset = YES;
}

- (BOOL) _idIsSet {
  return ___id_isset;
}

- (void) unset_id {
  [___id release_stub];
  ___id = nil;
  ___id_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          OpenZWaveRemoteValueID *fieldValue = [[OpenZWaveRemoteValueID alloc] init];
          [fieldValue read: inProtocol];
          [self set_id: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetValueListSelection_String_args"];
  if (___id_isset) {
    if (___id != nil) {
      [outProtocol writeFieldBeginWithName: @"_id" type: TType_STRUCT fieldID: 1];
      [___id write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetValueListSelection_String_args("];
  [ms appendString: @"_id:"];
  [ms appendFormat: @"%@", ___id];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveGetValueListSelection_String_result : NSObject <NSCoding> {
  OpenZWaveBool_String * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) OpenZWaveBool_String * success;
#endif

- (id) init;
- (id) initWithSuccess: (OpenZWaveBool_String *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (OpenZWaveBool_String *) success;
- (void) setSuccess: (OpenZWaveBool_String *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation OpenZWaveGetValueListSelection_String_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (OpenZWaveBool_String *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (OpenZWaveBool_String *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (OpenZWaveBool_String *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          OpenZWaveBool_String *fieldValue = [[OpenZWaveBool_String alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetValueListSelection_String_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetValueListSelection_String_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveGetValueListSelection_Int32_args : NSObject <NSCoding> {
  OpenZWaveRemoteValueID * ___id;

  BOOL ___id_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=_id, setter=set_id:) OpenZWaveRemoteValueID * _id;
#endif

- (id) init;
- (id) initWith_id: (OpenZWaveRemoteValueID *) _id;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (OpenZWaveRemoteValueID *) _id;
- (void) set_id: (OpenZWaveRemoteValueID *) _id;
#endif
- (BOOL) _idIsSet;

@end

@implementation OpenZWaveGetValueListSelection_Int32_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_id: (OpenZWaveRemoteValueID *) _id
{
  self = [super init];
  ___id = [_id retain_stub];
  ___id_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_id"])
  {
    ___id = [[decoder decodeObjectForKey: @"_id"] retain_stub];
    ___id_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___id_isset)
  {
    [encoder encodeObject: ___id forKey: @"_id"];
  }
}

- (void) dealloc
{
  [___id release_stub];
  [super dealloc_stub];
}

- (OpenZWaveRemoteValueID *) _id {
  return [[___id retain_stub] autorelease_stub];
}

- (void) set_id: (OpenZWaveRemoteValueID *) _id {
  [_id retain_stub];
  [___id release_stub];
  ___id = _id;
  ___id_isset = YES;
}

- (BOOL) _idIsSet {
  return ___id_isset;
}

- (void) unset_id {
  [___id release_stub];
  ___id = nil;
  ___id_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          OpenZWaveRemoteValueID *fieldValue = [[OpenZWaveRemoteValueID alloc] init];
          [fieldValue read: inProtocol];
          [self set_id: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetValueListSelection_Int32_args"];
  if (___id_isset) {
    if (___id != nil) {
      [outProtocol writeFieldBeginWithName: @"_id" type: TType_STRUCT fieldID: 1];
      [___id write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetValueListSelection_Int32_args("];
  [ms appendString: @"_id:"];
  [ms appendFormat: @"%@", ___id];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveGetValueListSelection_Int32_result : NSObject <NSCoding> {
  OpenZWaveBool_Int * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) OpenZWaveBool_Int * success;
#endif

- (id) init;
- (id) initWithSuccess: (OpenZWaveBool_Int *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (OpenZWaveBool_Int *) success;
- (void) setSuccess: (OpenZWaveBool_Int *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation OpenZWaveGetValueListSelection_Int32_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (OpenZWaveBool_Int *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (OpenZWaveBool_Int *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (OpenZWaveBool_Int *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          OpenZWaveBool_Int *fieldValue = [[OpenZWaveBool_Int alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetValueListSelection_Int32_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetValueListSelection_Int32_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveGetValueListItems_args : NSObject <NSCoding> {
  OpenZWaveRemoteValueID * ___id;

  BOOL ___id_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=_id, setter=set_id:) OpenZWaveRemoteValueID * _id;
#endif

- (id) init;
- (id) initWith_id: (OpenZWaveRemoteValueID *) _id;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (OpenZWaveRemoteValueID *) _id;
- (void) set_id: (OpenZWaveRemoteValueID *) _id;
#endif
- (BOOL) _idIsSet;

@end

@implementation OpenZWaveGetValueListItems_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_id: (OpenZWaveRemoteValueID *) _id
{
  self = [super init];
  ___id = [_id retain_stub];
  ___id_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_id"])
  {
    ___id = [[decoder decodeObjectForKey: @"_id"] retain_stub];
    ___id_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___id_isset)
  {
    [encoder encodeObject: ___id forKey: @"_id"];
  }
}

- (void) dealloc
{
  [___id release_stub];
  [super dealloc_stub];
}

- (OpenZWaveRemoteValueID *) _id {
  return [[___id retain_stub] autorelease_stub];
}

- (void) set_id: (OpenZWaveRemoteValueID *) _id {
  [_id retain_stub];
  [___id release_stub];
  ___id = _id;
  ___id_isset = YES;
}

- (BOOL) _idIsSet {
  return ___id_isset;
}

- (void) unset_id {
  [___id release_stub];
  ___id = nil;
  ___id_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          OpenZWaveRemoteValueID *fieldValue = [[OpenZWaveRemoteValueID alloc] init];
          [fieldValue read: inProtocol];
          [self set_id: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetValueListItems_args"];
  if (___id_isset) {
    if (___id != nil) {
      [outProtocol writeFieldBeginWithName: @"_id" type: TType_STRUCT fieldID: 1];
      [___id write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetValueListItems_args("];
  [ms appendString: @"_id:"];
  [ms appendFormat: @"%@", ___id];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveGetValueListItems_result : NSObject <NSCoding> {
  OpenZWaveBool_ListString * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) OpenZWaveBool_ListString * success;
#endif

- (id) init;
- (id) initWithSuccess: (OpenZWaveBool_ListString *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (OpenZWaveBool_ListString *) success;
- (void) setSuccess: (OpenZWaveBool_ListString *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation OpenZWaveGetValueListItems_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (OpenZWaveBool_ListString *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (OpenZWaveBool_ListString *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (OpenZWaveBool_ListString *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          OpenZWaveBool_ListString *fieldValue = [[OpenZWaveBool_ListString alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetValueListItems_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetValueListItems_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveGetValueFloatPrecision_args : NSObject <NSCoding> {
  OpenZWaveRemoteValueID * ___id;

  BOOL ___id_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=_id, setter=set_id:) OpenZWaveRemoteValueID * _id;
#endif

- (id) init;
- (id) initWith_id: (OpenZWaveRemoteValueID *) _id;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (OpenZWaveRemoteValueID *) _id;
- (void) set_id: (OpenZWaveRemoteValueID *) _id;
#endif
- (BOOL) _idIsSet;

@end

@implementation OpenZWaveGetValueFloatPrecision_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_id: (OpenZWaveRemoteValueID *) _id
{
  self = [super init];
  ___id = [_id retain_stub];
  ___id_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_id"])
  {
    ___id = [[decoder decodeObjectForKey: @"_id"] retain_stub];
    ___id_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___id_isset)
  {
    [encoder encodeObject: ___id forKey: @"_id"];
  }
}

- (void) dealloc
{
  [___id release_stub];
  [super dealloc_stub];
}

- (OpenZWaveRemoteValueID *) _id {
  return [[___id retain_stub] autorelease_stub];
}

- (void) set_id: (OpenZWaveRemoteValueID *) _id {
  [_id retain_stub];
  [___id release_stub];
  ___id = _id;
  ___id_isset = YES;
}

- (BOOL) _idIsSet {
  return ___id_isset;
}

- (void) unset_id {
  [___id release_stub];
  ___id = nil;
  ___id_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          OpenZWaveRemoteValueID *fieldValue = [[OpenZWaveRemoteValueID alloc] init];
          [fieldValue read: inProtocol];
          [self set_id: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetValueFloatPrecision_args"];
  if (___id_isset) {
    if (___id != nil) {
      [outProtocol writeFieldBeginWithName: @"_id" type: TType_STRUCT fieldID: 1];
      [___id write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetValueFloatPrecision_args("];
  [ms appendString: @"_id:"];
  [ms appendFormat: @"%@", ___id];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveGetValueFloatPrecision_result : NSObject <NSCoding> {
  OpenZWaveBool_UInt8 * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) OpenZWaveBool_UInt8 * success;
#endif

- (id) init;
- (id) initWithSuccess: (OpenZWaveBool_UInt8 *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (OpenZWaveBool_UInt8 *) success;
- (void) setSuccess: (OpenZWaveBool_UInt8 *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation OpenZWaveGetValueFloatPrecision_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (OpenZWaveBool_UInt8 *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (OpenZWaveBool_UInt8 *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (OpenZWaveBool_UInt8 *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          OpenZWaveBool_UInt8 *fieldValue = [[OpenZWaveBool_UInt8 alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetValueFloatPrecision_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetValueFloatPrecision_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveSetValue_Bool_args : NSObject <NSCoding> {
  OpenZWaveRemoteValueID * ___id;
  BOOL ___value;

  BOOL ___id_isset;
  BOOL ___value_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=_id, setter=set_id:) OpenZWaveRemoteValueID * _id;
@property (nonatomic, getter=_value, setter=set_value:) BOOL _value;
#endif

- (id) init;
- (id) initWith_id: (OpenZWaveRemoteValueID *) _id _value: (BOOL) _value;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (OpenZWaveRemoteValueID *) _id;
- (void) set_id: (OpenZWaveRemoteValueID *) _id;
#endif
- (BOOL) _idIsSet;

#if !__has_feature(objc_arc)
- (BOOL) _value;
- (void) set_value: (BOOL) _value;
#endif
- (BOOL) _valueIsSet;

@end

@implementation OpenZWaveSetValue_Bool_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_id: (OpenZWaveRemoteValueID *) _id _value: (BOOL) _value
{
  self = [super init];
  ___id = [_id retain_stub];
  ___id_isset = YES;
  ___value = _value;
  ___value_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_id"])
  {
    ___id = [[decoder decodeObjectForKey: @"_id"] retain_stub];
    ___id_isset = YES;
  }
  if ([decoder containsValueForKey: @"_value"])
  {
    ___value = [decoder decodeBoolForKey: @"_value"];
    ___value_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___id_isset)
  {
    [encoder encodeObject: ___id forKey: @"_id"];
  }
  if (___value_isset)
  {
    [encoder encodeBool: ___value forKey: @"_value"];
  }
}

- (void) dealloc
{
  [___id release_stub];
  [super dealloc_stub];
}

- (OpenZWaveRemoteValueID *) _id {
  return [[___id retain_stub] autorelease_stub];
}

- (void) set_id: (OpenZWaveRemoteValueID *) _id {
  [_id retain_stub];
  [___id release_stub];
  ___id = _id;
  ___id_isset = YES;
}

- (BOOL) _idIsSet {
  return ___id_isset;
}

- (void) unset_id {
  [___id release_stub];
  ___id = nil;
  ___id_isset = NO;
}

- (BOOL) _value {
  return ___value;
}

- (void) set_value: (BOOL) _value {
  ___value = _value;
  ___value_isset = YES;
}

- (BOOL) _valueIsSet {
  return ___value_isset;
}

- (void) unset_value {
  ___value_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          OpenZWaveRemoteValueID *fieldValue = [[OpenZWaveRemoteValueID alloc] init];
          [fieldValue read: inProtocol];
          [self set_id: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self set_value: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SetValue_Bool_args"];
  if (___id_isset) {
    if (___id != nil) {
      [outProtocol writeFieldBeginWithName: @"_id" type: TType_STRUCT fieldID: 1];
      [___id write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (___value_isset) {
    [outProtocol writeFieldBeginWithName: @"_value" type: TType_BOOL fieldID: 2];
    [outProtocol writeBool: ___value];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SetValue_Bool_args("];
  [ms appendString: @"_id:"];
  [ms appendFormat: @"%@", ___id];
  [ms appendString: @",_value:"];
  [ms appendFormat: @"%i", ___value];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveSetValue_Bool_result : NSObject <NSCoding> {
  BOOL __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) BOOL success;
#endif

- (id) init;
- (id) initWithSuccess: (BOOL) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (BOOL) success;
- (void) setSuccess: (BOOL) success;
#endif
- (BOOL) successIsSet;

@end

@implementation OpenZWaveSetValue_Bool_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (BOOL) success
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeBoolForKey: @"success"];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeBool: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (BOOL) success {
  return __success;
}

- (void) setSuccess: (BOOL) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SetValue_Bool_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
    [outProtocol writeBool: __success];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SetValue_Bool_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveSetValue_UInt8_args : NSObject <NSCoding> {
  OpenZWaveRemoteValueID * ___id;
  uint8_t ___value;

  BOOL ___id_isset;
  BOOL ___value_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=_id, setter=set_id:) OpenZWaveRemoteValueID * _id;
@property (nonatomic, getter=_value, setter=set_value:) uint8_t _value;
#endif

- (id) init;
- (id) initWith_id: (OpenZWaveRemoteValueID *) _id _value: (uint8_t) _value;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (OpenZWaveRemoteValueID *) _id;
- (void) set_id: (OpenZWaveRemoteValueID *) _id;
#endif
- (BOOL) _idIsSet;

#if !__has_feature(objc_arc)
- (uint8_t) _value;
- (void) set_value: (uint8_t) _value;
#endif
- (BOOL) _valueIsSet;

@end

@implementation OpenZWaveSetValue_UInt8_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_id: (OpenZWaveRemoteValueID *) _id _value: (uint8_t) _value
{
  self = [super init];
  ___id = [_id retain_stub];
  ___id_isset = YES;
  ___value = _value;
  ___value_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_id"])
  {
    ___id = [[decoder decodeObjectForKey: @"_id"] retain_stub];
    ___id_isset = YES;
  }
  if ([decoder containsValueForKey: @"_value"])
  {
    ___value = [decoder decodeIntForKey: @"_value"];
    ___value_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___id_isset)
  {
    [encoder encodeObject: ___id forKey: @"_id"];
  }
  if (___value_isset)
  {
    [encoder encodeInt: ___value forKey: @"_value"];
  }
}

- (void) dealloc
{
  [___id release_stub];
  [super dealloc_stub];
}

- (OpenZWaveRemoteValueID *) _id {
  return [[___id retain_stub] autorelease_stub];
}

- (void) set_id: (OpenZWaveRemoteValueID *) _id {
  [_id retain_stub];
  [___id release_stub];
  ___id = _id;
  ___id_isset = YES;
}

- (BOOL) _idIsSet {
  return ___id_isset;
}

- (void) unset_id {
  [___id release_stub];
  ___id = nil;
  ___id_isset = NO;
}

- (uint8_t) _value {
  return ___value;
}

- (void) set_value: (uint8_t) _value {
  ___value = _value;
  ___value_isset = YES;
}

- (BOOL) _valueIsSet {
  return ___value_isset;
}

- (void) unset_value {
  ___value_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          OpenZWaveRemoteValueID *fieldValue = [[OpenZWaveRemoteValueID alloc] init];
          [fieldValue read: inProtocol];
          [self set_id: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self set_value: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SetValue_UInt8_args"];
  if (___id_isset) {
    if (___id != nil) {
      [outProtocol writeFieldBeginWithName: @"_id" type: TType_STRUCT fieldID: 1];
      [___id write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (___value_isset) {
    [outProtocol writeFieldBeginWithName: @"_value" type: TType_BYTE fieldID: 2];
    [outProtocol writeByte: ___value];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SetValue_UInt8_args("];
  [ms appendString: @"_id:"];
  [ms appendFormat: @"%@", ___id];
  [ms appendString: @",_value:"];
  [ms appendFormat: @"%i", ___value];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveSetValue_UInt8_result : NSObject <NSCoding> {
  BOOL __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) BOOL success;
#endif

- (id) init;
- (id) initWithSuccess: (BOOL) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (BOOL) success;
- (void) setSuccess: (BOOL) success;
#endif
- (BOOL) successIsSet;

@end

@implementation OpenZWaveSetValue_UInt8_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (BOOL) success
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeBoolForKey: @"success"];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeBool: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (BOOL) success {
  return __success;
}

- (void) setSuccess: (BOOL) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SetValue_UInt8_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
    [outProtocol writeBool: __success];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SetValue_UInt8_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveSetValue_Float_args : NSObject <NSCoding> {
  OpenZWaveRemoteValueID * ___id;
  double ___value;

  BOOL ___id_isset;
  BOOL ___value_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=_id, setter=set_id:) OpenZWaveRemoteValueID * _id;
@property (nonatomic, getter=_value, setter=set_value:) double _value;
#endif

- (id) init;
- (id) initWith_id: (OpenZWaveRemoteValueID *) _id _value: (double) _value;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (OpenZWaveRemoteValueID *) _id;
- (void) set_id: (OpenZWaveRemoteValueID *) _id;
#endif
- (BOOL) _idIsSet;

#if !__has_feature(objc_arc)
- (double) _value;
- (void) set_value: (double) _value;
#endif
- (BOOL) _valueIsSet;

@end

@implementation OpenZWaveSetValue_Float_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_id: (OpenZWaveRemoteValueID *) _id _value: (double) _value
{
  self = [super init];
  ___id = [_id retain_stub];
  ___id_isset = YES;
  ___value = _value;
  ___value_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_id"])
  {
    ___id = [[decoder decodeObjectForKey: @"_id"] retain_stub];
    ___id_isset = YES;
  }
  if ([decoder containsValueForKey: @"_value"])
  {
    ___value = [decoder decodeDoubleForKey: @"_value"];
    ___value_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___id_isset)
  {
    [encoder encodeObject: ___id forKey: @"_id"];
  }
  if (___value_isset)
  {
    [encoder encodeDouble: ___value forKey: @"_value"];
  }
}

- (void) dealloc
{
  [___id release_stub];
  [super dealloc_stub];
}

- (OpenZWaveRemoteValueID *) _id {
  return [[___id retain_stub] autorelease_stub];
}

- (void) set_id: (OpenZWaveRemoteValueID *) _id {
  [_id retain_stub];
  [___id release_stub];
  ___id = _id;
  ___id_isset = YES;
}

- (BOOL) _idIsSet {
  return ___id_isset;
}

- (void) unset_id {
  [___id release_stub];
  ___id = nil;
  ___id_isset = NO;
}

- (double) _value {
  return ___value;
}

- (void) set_value: (double) _value {
  ___value = _value;
  ___value_isset = YES;
}

- (BOOL) _valueIsSet {
  return ___value_isset;
}

- (void) unset_value {
  ___value_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          OpenZWaveRemoteValueID *fieldValue = [[OpenZWaveRemoteValueID alloc] init];
          [fieldValue read: inProtocol];
          [self set_id: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self set_value: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SetValue_Float_args"];
  if (___id_isset) {
    if (___id != nil) {
      [outProtocol writeFieldBeginWithName: @"_id" type: TType_STRUCT fieldID: 1];
      [___id write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (___value_isset) {
    [outProtocol writeFieldBeginWithName: @"_value" type: TType_DOUBLE fieldID: 2];
    [outProtocol writeDouble: ___value];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SetValue_Float_args("];
  [ms appendString: @"_id:"];
  [ms appendFormat: @"%@", ___id];
  [ms appendString: @",_value:"];
  [ms appendFormat: @"%f", ___value];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveSetValue_Float_result : NSObject <NSCoding> {
  BOOL __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) BOOL success;
#endif

- (id) init;
- (id) initWithSuccess: (BOOL) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (BOOL) success;
- (void) setSuccess: (BOOL) success;
#endif
- (BOOL) successIsSet;

@end

@implementation OpenZWaveSetValue_Float_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (BOOL) success
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeBoolForKey: @"success"];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeBool: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (BOOL) success {
  return __success;
}

- (void) setSuccess: (BOOL) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SetValue_Float_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
    [outProtocol writeBool: __success];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SetValue_Float_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveSetValue_Int32_args : NSObject <NSCoding> {
  OpenZWaveRemoteValueID * ___id;
  int32_t ___value;

  BOOL ___id_isset;
  BOOL ___value_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=_id, setter=set_id:) OpenZWaveRemoteValueID * _id;
@property (nonatomic, getter=_value, setter=set_value:) int32_t _value;
#endif

- (id) init;
- (id) initWith_id: (OpenZWaveRemoteValueID *) _id _value: (int32_t) _value;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (OpenZWaveRemoteValueID *) _id;
- (void) set_id: (OpenZWaveRemoteValueID *) _id;
#endif
- (BOOL) _idIsSet;

#if !__has_feature(objc_arc)
- (int32_t) _value;
- (void) set_value: (int32_t) _value;
#endif
- (BOOL) _valueIsSet;

@end

@implementation OpenZWaveSetValue_Int32_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_id: (OpenZWaveRemoteValueID *) _id _value: (int32_t) _value
{
  self = [super init];
  ___id = [_id retain_stub];
  ___id_isset = YES;
  ___value = _value;
  ___value_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_id"])
  {
    ___id = [[decoder decodeObjectForKey: @"_id"] retain_stub];
    ___id_isset = YES;
  }
  if ([decoder containsValueForKey: @"_value"])
  {
    ___value = [decoder decodeInt32ForKey: @"_value"];
    ___value_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___id_isset)
  {
    [encoder encodeObject: ___id forKey: @"_id"];
  }
  if (___value_isset)
  {
    [encoder encodeInt32: ___value forKey: @"_value"];
  }
}

- (void) dealloc
{
  [___id release_stub];
  [super dealloc_stub];
}

- (OpenZWaveRemoteValueID *) _id {
  return [[___id retain_stub] autorelease_stub];
}

- (void) set_id: (OpenZWaveRemoteValueID *) _id {
  [_id retain_stub];
  [___id release_stub];
  ___id = _id;
  ___id_isset = YES;
}

- (BOOL) _idIsSet {
  return ___id_isset;
}

- (void) unset_id {
  [___id release_stub];
  ___id = nil;
  ___id_isset = NO;
}

- (int32_t) _value {
  return ___value;
}

- (void) set_value: (int32_t) _value {
  ___value = _value;
  ___value_isset = YES;
}

- (BOOL) _valueIsSet {
  return ___value_isset;
}

- (void) unset_value {
  ___value_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          OpenZWaveRemoteValueID *fieldValue = [[OpenZWaveRemoteValueID alloc] init];
          [fieldValue read: inProtocol];
          [self set_id: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self set_value: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SetValue_Int32_args"];
  if (___id_isset) {
    if (___id != nil) {
      [outProtocol writeFieldBeginWithName: @"_id" type: TType_STRUCT fieldID: 1];
      [___id write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (___value_isset) {
    [outProtocol writeFieldBeginWithName: @"_value" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: ___value];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SetValue_Int32_args("];
  [ms appendString: @"_id:"];
  [ms appendFormat: @"%@", ___id];
  [ms appendString: @",_value:"];
  [ms appendFormat: @"%i", ___value];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveSetValue_Int32_result : NSObject <NSCoding> {
  BOOL __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) BOOL success;
#endif

- (id) init;
- (id) initWithSuccess: (BOOL) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (BOOL) success;
- (void) setSuccess: (BOOL) success;
#endif
- (BOOL) successIsSet;

@end

@implementation OpenZWaveSetValue_Int32_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (BOOL) success
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeBoolForKey: @"success"];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeBool: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (BOOL) success {
  return __success;
}

- (void) setSuccess: (BOOL) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SetValue_Int32_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
    [outProtocol writeBool: __success];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SetValue_Int32_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveSetValue_Int16_args : NSObject <NSCoding> {
  OpenZWaveRemoteValueID * ___id;
  int16_t ___value;

  BOOL ___id_isset;
  BOOL ___value_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=_id, setter=set_id:) OpenZWaveRemoteValueID * _id;
@property (nonatomic, getter=_value, setter=set_value:) int16_t _value;
#endif

- (id) init;
- (id) initWith_id: (OpenZWaveRemoteValueID *) _id _value: (int16_t) _value;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (OpenZWaveRemoteValueID *) _id;
- (void) set_id: (OpenZWaveRemoteValueID *) _id;
#endif
- (BOOL) _idIsSet;

#if !__has_feature(objc_arc)
- (int16_t) _value;
- (void) set_value: (int16_t) _value;
#endif
- (BOOL) _valueIsSet;

@end

@implementation OpenZWaveSetValue_Int16_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_id: (OpenZWaveRemoteValueID *) _id _value: (int16_t) _value
{
  self = [super init];
  ___id = [_id retain_stub];
  ___id_isset = YES;
  ___value = _value;
  ___value_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_id"])
  {
    ___id = [[decoder decodeObjectForKey: @"_id"] retain_stub];
    ___id_isset = YES;
  }
  if ([decoder containsValueForKey: @"_value"])
  {
    ___value = [decoder decodeIntForKey: @"_value"];
    ___value_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___id_isset)
  {
    [encoder encodeObject: ___id forKey: @"_id"];
  }
  if (___value_isset)
  {
    [encoder encodeInt: ___value forKey: @"_value"];
  }
}

- (void) dealloc
{
  [___id release_stub];
  [super dealloc_stub];
}

- (OpenZWaveRemoteValueID *) _id {
  return [[___id retain_stub] autorelease_stub];
}

- (void) set_id: (OpenZWaveRemoteValueID *) _id {
  [_id retain_stub];
  [___id release_stub];
  ___id = _id;
  ___id_isset = YES;
}

- (BOOL) _idIsSet {
  return ___id_isset;
}

- (void) unset_id {
  [___id release_stub];
  ___id = nil;
  ___id_isset = NO;
}

- (int16_t) _value {
  return ___value;
}

- (void) set_value: (int16_t) _value {
  ___value = _value;
  ___value_isset = YES;
}

- (BOOL) _valueIsSet {
  return ___value_isset;
}

- (void) unset_value {
  ___value_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          OpenZWaveRemoteValueID *fieldValue = [[OpenZWaveRemoteValueID alloc] init];
          [fieldValue read: inProtocol];
          [self set_id: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I16) {
          int16_t fieldValue = [inProtocol readI16];
          [self set_value: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SetValue_Int16_args"];
  if (___id_isset) {
    if (___id != nil) {
      [outProtocol writeFieldBeginWithName: @"_id" type: TType_STRUCT fieldID: 1];
      [___id write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (___value_isset) {
    [outProtocol writeFieldBeginWithName: @"_value" type: TType_I16 fieldID: 2];
    [outProtocol writeI16: ___value];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SetValue_Int16_args("];
  [ms appendString: @"_id:"];
  [ms appendFormat: @"%@", ___id];
  [ms appendString: @",_value:"];
  [ms appendFormat: @"%hi", ___value];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveSetValue_Int16_result : NSObject <NSCoding> {
  BOOL __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) BOOL success;
#endif

- (id) init;
- (id) initWithSuccess: (BOOL) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (BOOL) success;
- (void) setSuccess: (BOOL) success;
#endif
- (BOOL) successIsSet;

@end

@implementation OpenZWaveSetValue_Int16_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (BOOL) success
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeBoolForKey: @"success"];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeBool: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (BOOL) success {
  return __success;
}

- (void) setSuccess: (BOOL) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SetValue_Int16_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
    [outProtocol writeBool: __success];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SetValue_Int16_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveSetValue_String_args : NSObject <NSCoding> {
  OpenZWaveRemoteValueID * ___id;
  NSString * ___value;

  BOOL ___id_isset;
  BOOL ___value_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=_id, setter=set_id:) OpenZWaveRemoteValueID * _id;
@property (nonatomic, retain, getter=_value, setter=set_value:) NSString * _value;
#endif

- (id) init;
- (id) initWith_id: (OpenZWaveRemoteValueID *) _id _value: (NSString *) _value;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (OpenZWaveRemoteValueID *) _id;
- (void) set_id: (OpenZWaveRemoteValueID *) _id;
#endif
- (BOOL) _idIsSet;

#if !__has_feature(objc_arc)
- (NSString *) _value;
- (void) set_value: (NSString *) _value;
#endif
- (BOOL) _valueIsSet;

@end

@implementation OpenZWaveSetValue_String_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_id: (OpenZWaveRemoteValueID *) _id _value: (NSString *) _value
{
  self = [super init];
  ___id = [_id retain_stub];
  ___id_isset = YES;
  ___value = [_value retain_stub];
  ___value_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_id"])
  {
    ___id = [[decoder decodeObjectForKey: @"_id"] retain_stub];
    ___id_isset = YES;
  }
  if ([decoder containsValueForKey: @"_value"])
  {
    ___value = [[decoder decodeObjectForKey: @"_value"] retain_stub];
    ___value_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___id_isset)
  {
    [encoder encodeObject: ___id forKey: @"_id"];
  }
  if (___value_isset)
  {
    [encoder encodeObject: ___value forKey: @"_value"];
  }
}

- (void) dealloc
{
  [___id release_stub];
  [___value release_stub];
  [super dealloc_stub];
}

- (OpenZWaveRemoteValueID *) _id {
  return [[___id retain_stub] autorelease_stub];
}

- (void) set_id: (OpenZWaveRemoteValueID *) _id {
  [_id retain_stub];
  [___id release_stub];
  ___id = _id;
  ___id_isset = YES;
}

- (BOOL) _idIsSet {
  return ___id_isset;
}

- (void) unset_id {
  [___id release_stub];
  ___id = nil;
  ___id_isset = NO;
}

- (NSString *) _value {
  return [[___value retain_stub] autorelease_stub];
}

- (void) set_value: (NSString *) _value {
  [_value retain_stub];
  [___value release_stub];
  ___value = _value;
  ___value_isset = YES;
}

- (BOOL) _valueIsSet {
  return ___value_isset;
}

- (void) unset_value {
  [___value release_stub];
  ___value = nil;
  ___value_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          OpenZWaveRemoteValueID *fieldValue = [[OpenZWaveRemoteValueID alloc] init];
          [fieldValue read: inProtocol];
          [self set_id: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self set_value: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SetValue_String_args"];
  if (___id_isset) {
    if (___id != nil) {
      [outProtocol writeFieldBeginWithName: @"_id" type: TType_STRUCT fieldID: 1];
      [___id write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (___value_isset) {
    if (___value != nil) {
      [outProtocol writeFieldBeginWithName: @"_value" type: TType_STRING fieldID: 2];
      [outProtocol writeString: ___value];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SetValue_String_args("];
  [ms appendString: @"_id:"];
  [ms appendFormat: @"%@", ___id];
  [ms appendString: @",_value:"];
  [ms appendFormat: @"\"%@\"", ___value];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveSetValue_String_result : NSObject <NSCoding> {
  BOOL __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) BOOL success;
#endif

- (id) init;
- (id) initWithSuccess: (BOOL) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (BOOL) success;
- (void) setSuccess: (BOOL) success;
#endif
- (BOOL) successIsSet;

@end

@implementation OpenZWaveSetValue_String_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (BOOL) success
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeBoolForKey: @"success"];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeBool: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (BOOL) success {
  return __success;
}

- (void) setSuccess: (BOOL) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SetValue_String_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
    [outProtocol writeBool: __success];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SetValue_String_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveSetValueListSelection_args : NSObject <NSCoding> {
  OpenZWaveRemoteValueID * ___id;
  NSString * ___selectedItem;

  BOOL ___id_isset;
  BOOL ___selectedItem_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=_id, setter=set_id:) OpenZWaveRemoteValueID * _id;
@property (nonatomic, retain, getter=_selectedItem, setter=set_selectedItem:) NSString * _selectedItem;
#endif

- (id) init;
- (id) initWith_id: (OpenZWaveRemoteValueID *) _id _selectedItem: (NSString *) _selectedItem;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (OpenZWaveRemoteValueID *) _id;
- (void) set_id: (OpenZWaveRemoteValueID *) _id;
#endif
- (BOOL) _idIsSet;

#if !__has_feature(objc_arc)
- (NSString *) _selectedItem;
- (void) set_selectedItem: (NSString *) _selectedItem;
#endif
- (BOOL) _selectedItemIsSet;

@end

@implementation OpenZWaveSetValueListSelection_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_id: (OpenZWaveRemoteValueID *) _id _selectedItem: (NSString *) _selectedItem
{
  self = [super init];
  ___id = [_id retain_stub];
  ___id_isset = YES;
  ___selectedItem = [_selectedItem retain_stub];
  ___selectedItem_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_id"])
  {
    ___id = [[decoder decodeObjectForKey: @"_id"] retain_stub];
    ___id_isset = YES;
  }
  if ([decoder containsValueForKey: @"_selectedItem"])
  {
    ___selectedItem = [[decoder decodeObjectForKey: @"_selectedItem"] retain_stub];
    ___selectedItem_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___id_isset)
  {
    [encoder encodeObject: ___id forKey: @"_id"];
  }
  if (___selectedItem_isset)
  {
    [encoder encodeObject: ___selectedItem forKey: @"_selectedItem"];
  }
}

- (void) dealloc
{
  [___id release_stub];
  [___selectedItem release_stub];
  [super dealloc_stub];
}

- (OpenZWaveRemoteValueID *) _id {
  return [[___id retain_stub] autorelease_stub];
}

- (void) set_id: (OpenZWaveRemoteValueID *) _id {
  [_id retain_stub];
  [___id release_stub];
  ___id = _id;
  ___id_isset = YES;
}

- (BOOL) _idIsSet {
  return ___id_isset;
}

- (void) unset_id {
  [___id release_stub];
  ___id = nil;
  ___id_isset = NO;
}

- (NSString *) _selectedItem {
  return [[___selectedItem retain_stub] autorelease_stub];
}

- (void) set_selectedItem: (NSString *) _selectedItem {
  [_selectedItem retain_stub];
  [___selectedItem release_stub];
  ___selectedItem = _selectedItem;
  ___selectedItem_isset = YES;
}

- (BOOL) _selectedItemIsSet {
  return ___selectedItem_isset;
}

- (void) unset_selectedItem {
  [___selectedItem release_stub];
  ___selectedItem = nil;
  ___selectedItem_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          OpenZWaveRemoteValueID *fieldValue = [[OpenZWaveRemoteValueID alloc] init];
          [fieldValue read: inProtocol];
          [self set_id: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self set_selectedItem: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SetValueListSelection_args"];
  if (___id_isset) {
    if (___id != nil) {
      [outProtocol writeFieldBeginWithName: @"_id" type: TType_STRUCT fieldID: 1];
      [___id write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (___selectedItem_isset) {
    if (___selectedItem != nil) {
      [outProtocol writeFieldBeginWithName: @"_selectedItem" type: TType_STRING fieldID: 2];
      [outProtocol writeString: ___selectedItem];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SetValueListSelection_args("];
  [ms appendString: @"_id:"];
  [ms appendFormat: @"%@", ___id];
  [ms appendString: @",_selectedItem:"];
  [ms appendFormat: @"\"%@\"", ___selectedItem];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveSetValueListSelection_result : NSObject <NSCoding> {
  BOOL __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) BOOL success;
#endif

- (id) init;
- (id) initWithSuccess: (BOOL) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (BOOL) success;
- (void) setSuccess: (BOOL) success;
#endif
- (BOOL) successIsSet;

@end

@implementation OpenZWaveSetValueListSelection_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (BOOL) success
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeBoolForKey: @"success"];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeBool: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (BOOL) success {
  return __success;
}

- (void) setSuccess: (BOOL) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SetValueListSelection_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
    [outProtocol writeBool: __success];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SetValueListSelection_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveRefreshValue_args : NSObject <NSCoding> {
  OpenZWaveRemoteValueID * ___id;

  BOOL ___id_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=_id, setter=set_id:) OpenZWaveRemoteValueID * _id;
#endif

- (id) init;
- (id) initWith_id: (OpenZWaveRemoteValueID *) _id;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (OpenZWaveRemoteValueID *) _id;
- (void) set_id: (OpenZWaveRemoteValueID *) _id;
#endif
- (BOOL) _idIsSet;

@end

@implementation OpenZWaveRefreshValue_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_id: (OpenZWaveRemoteValueID *) _id
{
  self = [super init];
  ___id = [_id retain_stub];
  ___id_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_id"])
  {
    ___id = [[decoder decodeObjectForKey: @"_id"] retain_stub];
    ___id_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___id_isset)
  {
    [encoder encodeObject: ___id forKey: @"_id"];
  }
}

- (void) dealloc
{
  [___id release_stub];
  [super dealloc_stub];
}

- (OpenZWaveRemoteValueID *) _id {
  return [[___id retain_stub] autorelease_stub];
}

- (void) set_id: (OpenZWaveRemoteValueID *) _id {
  [_id retain_stub];
  [___id release_stub];
  ___id = _id;
  ___id_isset = YES;
}

- (BOOL) _idIsSet {
  return ___id_isset;
}

- (void) unset_id {
  [___id release_stub];
  ___id = nil;
  ___id_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          OpenZWaveRemoteValueID *fieldValue = [[OpenZWaveRemoteValueID alloc] init];
          [fieldValue read: inProtocol];
          [self set_id: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"RefreshValue_args"];
  if (___id_isset) {
    if (___id != nil) {
      [outProtocol writeFieldBeginWithName: @"_id" type: TType_STRUCT fieldID: 1];
      [___id write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RefreshValue_args("];
  [ms appendString: @"_id:"];
  [ms appendFormat: @"%@", ___id];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveRefreshValue_result : NSObject <NSCoding> {
  BOOL __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) BOOL success;
#endif

- (id) init;
- (id) initWithSuccess: (BOOL) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (BOOL) success;
- (void) setSuccess: (BOOL) success;
#endif
- (BOOL) successIsSet;

@end

@implementation OpenZWaveRefreshValue_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (BOOL) success
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeBoolForKey: @"success"];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeBool: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (BOOL) success {
  return __success;
}

- (void) setSuccess: (BOOL) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"RefreshValue_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
    [outProtocol writeBool: __success];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RefreshValue_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveSetChangeVerified_args : NSObject <NSCoding> {
  OpenZWaveRemoteValueID * ___id;
  BOOL ___verify;

  BOOL ___id_isset;
  BOOL ___verify_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=_id, setter=set_id:) OpenZWaveRemoteValueID * _id;
@property (nonatomic, getter=_verify, setter=set_verify:) BOOL _verify;
#endif

- (id) init;
- (id) initWith_id: (OpenZWaveRemoteValueID *) _id _verify: (BOOL) _verify;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (OpenZWaveRemoteValueID *) _id;
- (void) set_id: (OpenZWaveRemoteValueID *) _id;
#endif
- (BOOL) _idIsSet;

#if !__has_feature(objc_arc)
- (BOOL) _verify;
- (void) set_verify: (BOOL) _verify;
#endif
- (BOOL) _verifyIsSet;

@end

@implementation OpenZWaveSetChangeVerified_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_id: (OpenZWaveRemoteValueID *) _id _verify: (BOOL) _verify
{
  self = [super init];
  ___id = [_id retain_stub];
  ___id_isset = YES;
  ___verify = _verify;
  ___verify_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_id"])
  {
    ___id = [[decoder decodeObjectForKey: @"_id"] retain_stub];
    ___id_isset = YES;
  }
  if ([decoder containsValueForKey: @"_verify"])
  {
    ___verify = [decoder decodeBoolForKey: @"_verify"];
    ___verify_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___id_isset)
  {
    [encoder encodeObject: ___id forKey: @"_id"];
  }
  if (___verify_isset)
  {
    [encoder encodeBool: ___verify forKey: @"_verify"];
  }
}

- (void) dealloc
{
  [___id release_stub];
  [super dealloc_stub];
}

- (OpenZWaveRemoteValueID *) _id {
  return [[___id retain_stub] autorelease_stub];
}

- (void) set_id: (OpenZWaveRemoteValueID *) _id {
  [_id retain_stub];
  [___id release_stub];
  ___id = _id;
  ___id_isset = YES;
}

- (BOOL) _idIsSet {
  return ___id_isset;
}

- (void) unset_id {
  [___id release_stub];
  ___id = nil;
  ___id_isset = NO;
}

- (BOOL) _verify {
  return ___verify;
}

- (void) set_verify: (BOOL) _verify {
  ___verify = _verify;
  ___verify_isset = YES;
}

- (BOOL) _verifyIsSet {
  return ___verify_isset;
}

- (void) unset_verify {
  ___verify_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          OpenZWaveRemoteValueID *fieldValue = [[OpenZWaveRemoteValueID alloc] init];
          [fieldValue read: inProtocol];
          [self set_id: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self set_verify: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SetChangeVerified_args"];
  if (___id_isset) {
    if (___id != nil) {
      [outProtocol writeFieldBeginWithName: @"_id" type: TType_STRUCT fieldID: 1];
      [___id write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (___verify_isset) {
    [outProtocol writeFieldBeginWithName: @"_verify" type: TType_BOOL fieldID: 2];
    [outProtocol writeBool: ___verify];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SetChangeVerified_args("];
  [ms appendString: @"_id:"];
  [ms appendFormat: @"%@", ___id];
  [ms appendString: @",_verify:"];
  [ms appendFormat: @"%i", ___verify];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveSetChangeVerified_result : NSObject <NSCoding> {
}

- (id) init;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

@end

@implementation OpenZWaveSetChangeVerified_result

- (id) init
{
  self = [super init];
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SetChangeVerified_result"];

  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SetChangeVerified_result("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWavePressButton_args : NSObject <NSCoding> {
  OpenZWaveRemoteValueID * ___id;

  BOOL ___id_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=_id, setter=set_id:) OpenZWaveRemoteValueID * _id;
#endif

- (id) init;
- (id) initWith_id: (OpenZWaveRemoteValueID *) _id;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (OpenZWaveRemoteValueID *) _id;
- (void) set_id: (OpenZWaveRemoteValueID *) _id;
#endif
- (BOOL) _idIsSet;

@end

@implementation OpenZWavePressButton_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_id: (OpenZWaveRemoteValueID *) _id
{
  self = [super init];
  ___id = [_id retain_stub];
  ___id_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_id"])
  {
    ___id = [[decoder decodeObjectForKey: @"_id"] retain_stub];
    ___id_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___id_isset)
  {
    [encoder encodeObject: ___id forKey: @"_id"];
  }
}

- (void) dealloc
{
  [___id release_stub];
  [super dealloc_stub];
}

- (OpenZWaveRemoteValueID *) _id {
  return [[___id retain_stub] autorelease_stub];
}

- (void) set_id: (OpenZWaveRemoteValueID *) _id {
  [_id retain_stub];
  [___id release_stub];
  ___id = _id;
  ___id_isset = YES;
}

- (BOOL) _idIsSet {
  return ___id_isset;
}

- (void) unset_id {
  [___id release_stub];
  ___id = nil;
  ___id_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          OpenZWaveRemoteValueID *fieldValue = [[OpenZWaveRemoteValueID alloc] init];
          [fieldValue read: inProtocol];
          [self set_id: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"PressButton_args"];
  if (___id_isset) {
    if (___id != nil) {
      [outProtocol writeFieldBeginWithName: @"_id" type: TType_STRUCT fieldID: 1];
      [___id write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"PressButton_args("];
  [ms appendString: @"_id:"];
  [ms appendFormat: @"%@", ___id];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWavePressButton_result : NSObject <NSCoding> {
  BOOL __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) BOOL success;
#endif

- (id) init;
- (id) initWithSuccess: (BOOL) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (BOOL) success;
- (void) setSuccess: (BOOL) success;
#endif
- (BOOL) successIsSet;

@end

@implementation OpenZWavePressButton_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (BOOL) success
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeBoolForKey: @"success"];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeBool: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (BOOL) success {
  return __success;
}

- (void) setSuccess: (BOOL) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"PressButton_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
    [outProtocol writeBool: __success];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"PressButton_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveReleaseButton_args : NSObject <NSCoding> {
  OpenZWaveRemoteValueID * ___id;

  BOOL ___id_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=_id, setter=set_id:) OpenZWaveRemoteValueID * _id;
#endif

- (id) init;
- (id) initWith_id: (OpenZWaveRemoteValueID *) _id;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (OpenZWaveRemoteValueID *) _id;
- (void) set_id: (OpenZWaveRemoteValueID *) _id;
#endif
- (BOOL) _idIsSet;

@end

@implementation OpenZWaveReleaseButton_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_id: (OpenZWaveRemoteValueID *) _id
{
  self = [super init];
  ___id = [_id retain_stub];
  ___id_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_id"])
  {
    ___id = [[decoder decodeObjectForKey: @"_id"] retain_stub];
    ___id_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___id_isset)
  {
    [encoder encodeObject: ___id forKey: @"_id"];
  }
}

- (void) dealloc
{
  [___id release_stub];
  [super dealloc_stub];
}

- (OpenZWaveRemoteValueID *) _id {
  return [[___id retain_stub] autorelease_stub];
}

- (void) set_id: (OpenZWaveRemoteValueID *) _id {
  [_id retain_stub];
  [___id release_stub];
  ___id = _id;
  ___id_isset = YES;
}

- (BOOL) _idIsSet {
  return ___id_isset;
}

- (void) unset_id {
  [___id release_stub];
  ___id = nil;
  ___id_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          OpenZWaveRemoteValueID *fieldValue = [[OpenZWaveRemoteValueID alloc] init];
          [fieldValue read: inProtocol];
          [self set_id: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ReleaseButton_args"];
  if (___id_isset) {
    if (___id != nil) {
      [outProtocol writeFieldBeginWithName: @"_id" type: TType_STRUCT fieldID: 1];
      [___id write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ReleaseButton_args("];
  [ms appendString: @"_id:"];
  [ms appendFormat: @"%@", ___id];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveReleaseButton_result : NSObject <NSCoding> {
  BOOL __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) BOOL success;
#endif

- (id) init;
- (id) initWithSuccess: (BOOL) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (BOOL) success;
- (void) setSuccess: (BOOL) success;
#endif
- (BOOL) successIsSet;

@end

@implementation OpenZWaveReleaseButton_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (BOOL) success
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeBoolForKey: @"success"];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeBool: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (BOOL) success {
  return __success;
}

- (void) setSuccess: (BOOL) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ReleaseButton_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
    [outProtocol writeBool: __success];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ReleaseButton_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveGetNumSwitchPoints_args : NSObject <NSCoding> {
  OpenZWaveRemoteValueID * ___id;

  BOOL ___id_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=_id, setter=set_id:) OpenZWaveRemoteValueID * _id;
#endif

- (id) init;
- (id) initWith_id: (OpenZWaveRemoteValueID *) _id;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (OpenZWaveRemoteValueID *) _id;
- (void) set_id: (OpenZWaveRemoteValueID *) _id;
#endif
- (BOOL) _idIsSet;

@end

@implementation OpenZWaveGetNumSwitchPoints_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_id: (OpenZWaveRemoteValueID *) _id
{
  self = [super init];
  ___id = [_id retain_stub];
  ___id_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_id"])
  {
    ___id = [[decoder decodeObjectForKey: @"_id"] retain_stub];
    ___id_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___id_isset)
  {
    [encoder encodeObject: ___id forKey: @"_id"];
  }
}

- (void) dealloc
{
  [___id release_stub];
  [super dealloc_stub];
}

- (OpenZWaveRemoteValueID *) _id {
  return [[___id retain_stub] autorelease_stub];
}

- (void) set_id: (OpenZWaveRemoteValueID *) _id {
  [_id retain_stub];
  [___id release_stub];
  ___id = _id;
  ___id_isset = YES;
}

- (BOOL) _idIsSet {
  return ___id_isset;
}

- (void) unset_id {
  [___id release_stub];
  ___id = nil;
  ___id_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          OpenZWaveRemoteValueID *fieldValue = [[OpenZWaveRemoteValueID alloc] init];
          [fieldValue read: inProtocol];
          [self set_id: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetNumSwitchPoints_args"];
  if (___id_isset) {
    if (___id != nil) {
      [outProtocol writeFieldBeginWithName: @"_id" type: TType_STRUCT fieldID: 1];
      [___id write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetNumSwitchPoints_args("];
  [ms appendString: @"_id:"];
  [ms appendFormat: @"%@", ___id];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveGetNumSwitchPoints_result : NSObject <NSCoding> {
  uint8_t __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) uint8_t success;
#endif

- (id) init;
- (id) initWithSuccess: (uint8_t) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (uint8_t) success;
- (void) setSuccess: (uint8_t) success;
#endif
- (BOOL) successIsSet;

@end

@implementation OpenZWaveGetNumSwitchPoints_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (uint8_t) success
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeIntForKey: @"success"];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeInt: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (uint8_t) success {
  return __success;
}

- (void) setSuccess: (uint8_t) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetNumSwitchPoints_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_BYTE fieldID: 0];
    [outProtocol writeByte: __success];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetNumSwitchPoints_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveSetSwitchPoint_args : NSObject <NSCoding> {
  OpenZWaveRemoteValueID * ___id;
  uint8_t ___hours;
  uint8_t ___minutes;
  uint8_t ___setback;

  BOOL ___id_isset;
  BOOL ___hours_isset;
  BOOL ___minutes_isset;
  BOOL ___setback_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=_id, setter=set_id:) OpenZWaveRemoteValueID * _id;
@property (nonatomic, getter=_hours, setter=set_hours:) uint8_t _hours;
@property (nonatomic, getter=_minutes, setter=set_minutes:) uint8_t _minutes;
@property (nonatomic, getter=_setback, setter=set_setback:) uint8_t _setback;
#endif

- (id) init;
- (id) initWith_id: (OpenZWaveRemoteValueID *) _id _hours: (uint8_t) _hours _minutes: (uint8_t) _minutes _setback: (uint8_t) _setback;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (OpenZWaveRemoteValueID *) _id;
- (void) set_id: (OpenZWaveRemoteValueID *) _id;
#endif
- (BOOL) _idIsSet;

#if !__has_feature(objc_arc)
- (uint8_t) _hours;
- (void) set_hours: (uint8_t) _hours;
#endif
- (BOOL) _hoursIsSet;

#if !__has_feature(objc_arc)
- (uint8_t) _minutes;
- (void) set_minutes: (uint8_t) _minutes;
#endif
- (BOOL) _minutesIsSet;

#if !__has_feature(objc_arc)
- (uint8_t) _setback;
- (void) set_setback: (uint8_t) _setback;
#endif
- (BOOL) _setbackIsSet;

@end

@implementation OpenZWaveSetSwitchPoint_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_id: (OpenZWaveRemoteValueID *) _id _hours: (uint8_t) _hours _minutes: (uint8_t) _minutes _setback: (uint8_t) _setback
{
  self = [super init];
  ___id = [_id retain_stub];
  ___id_isset = YES;
  ___hours = _hours;
  ___hours_isset = YES;
  ___minutes = _minutes;
  ___minutes_isset = YES;
  ___setback = _setback;
  ___setback_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_id"])
  {
    ___id = [[decoder decodeObjectForKey: @"_id"] retain_stub];
    ___id_isset = YES;
  }
  if ([decoder containsValueForKey: @"_hours"])
  {
    ___hours = [decoder decodeIntForKey: @"_hours"];
    ___hours_isset = YES;
  }
  if ([decoder containsValueForKey: @"_minutes"])
  {
    ___minutes = [decoder decodeIntForKey: @"_minutes"];
    ___minutes_isset = YES;
  }
  if ([decoder containsValueForKey: @"_setback"])
  {
    ___setback = [decoder decodeIntForKey: @"_setback"];
    ___setback_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___id_isset)
  {
    [encoder encodeObject: ___id forKey: @"_id"];
  }
  if (___hours_isset)
  {
    [encoder encodeInt: ___hours forKey: @"_hours"];
  }
  if (___minutes_isset)
  {
    [encoder encodeInt: ___minutes forKey: @"_minutes"];
  }
  if (___setback_isset)
  {
    [encoder encodeInt: ___setback forKey: @"_setback"];
  }
}

- (void) dealloc
{
  [___id release_stub];
  [super dealloc_stub];
}

- (OpenZWaveRemoteValueID *) _id {
  return [[___id retain_stub] autorelease_stub];
}

- (void) set_id: (OpenZWaveRemoteValueID *) _id {
  [_id retain_stub];
  [___id release_stub];
  ___id = _id;
  ___id_isset = YES;
}

- (BOOL) _idIsSet {
  return ___id_isset;
}

- (void) unset_id {
  [___id release_stub];
  ___id = nil;
  ___id_isset = NO;
}

- (uint8_t) _hours {
  return ___hours;
}

- (void) set_hours: (uint8_t) _hours {
  ___hours = _hours;
  ___hours_isset = YES;
}

- (BOOL) _hoursIsSet {
  return ___hours_isset;
}

- (void) unset_hours {
  ___hours_isset = NO;
}

- (uint8_t) _minutes {
  return ___minutes;
}

- (void) set_minutes: (uint8_t) _minutes {
  ___minutes = _minutes;
  ___minutes_isset = YES;
}

- (BOOL) _minutesIsSet {
  return ___minutes_isset;
}

- (void) unset_minutes {
  ___minutes_isset = NO;
}

- (uint8_t) _setback {
  return ___setback;
}

- (void) set_setback: (uint8_t) _setback {
  ___setback = _setback;
  ___setback_isset = YES;
}

- (BOOL) _setbackIsSet {
  return ___setback_isset;
}

- (void) unset_setback {
  ___setback_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          OpenZWaveRemoteValueID *fieldValue = [[OpenZWaveRemoteValueID alloc] init];
          [fieldValue read: inProtocol];
          [self set_id: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self set_hours: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self set_minutes: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self set_setback: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SetSwitchPoint_args"];
  if (___id_isset) {
    if (___id != nil) {
      [outProtocol writeFieldBeginWithName: @"_id" type: TType_STRUCT fieldID: 1];
      [___id write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (___hours_isset) {
    [outProtocol writeFieldBeginWithName: @"_hours" type: TType_BYTE fieldID: 2];
    [outProtocol writeByte: ___hours];
    [outProtocol writeFieldEnd];
  }
  if (___minutes_isset) {
    [outProtocol writeFieldBeginWithName: @"_minutes" type: TType_BYTE fieldID: 3];
    [outProtocol writeByte: ___minutes];
    [outProtocol writeFieldEnd];
  }
  if (___setback_isset) {
    [outProtocol writeFieldBeginWithName: @"_setback" type: TType_BYTE fieldID: 4];
    [outProtocol writeByte: ___setback];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SetSwitchPoint_args("];
  [ms appendString: @"_id:"];
  [ms appendFormat: @"%@", ___id];
  [ms appendString: @",_hours:"];
  [ms appendFormat: @"%i", ___hours];
  [ms appendString: @",_minutes:"];
  [ms appendFormat: @"%i", ___minutes];
  [ms appendString: @",_setback:"];
  [ms appendFormat: @"%i", ___setback];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveSetSwitchPoint_result : NSObject <NSCoding> {
  BOOL __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) BOOL success;
#endif

- (id) init;
- (id) initWithSuccess: (BOOL) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (BOOL) success;
- (void) setSuccess: (BOOL) success;
#endif
- (BOOL) successIsSet;

@end

@implementation OpenZWaveSetSwitchPoint_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (BOOL) success
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeBoolForKey: @"success"];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeBool: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (BOOL) success {
  return __success;
}

- (void) setSuccess: (BOOL) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SetSwitchPoint_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
    [outProtocol writeBool: __success];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SetSwitchPoint_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveRemoveSwitchPoint_args : NSObject <NSCoding> {
  OpenZWaveRemoteValueID * ___id;
  uint8_t ___hours;
  uint8_t ___minutes;

  BOOL ___id_isset;
  BOOL ___hours_isset;
  BOOL ___minutes_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=_id, setter=set_id:) OpenZWaveRemoteValueID * _id;
@property (nonatomic, getter=_hours, setter=set_hours:) uint8_t _hours;
@property (nonatomic, getter=_minutes, setter=set_minutes:) uint8_t _minutes;
#endif

- (id) init;
- (id) initWith_id: (OpenZWaveRemoteValueID *) _id _hours: (uint8_t) _hours _minutes: (uint8_t) _minutes;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (OpenZWaveRemoteValueID *) _id;
- (void) set_id: (OpenZWaveRemoteValueID *) _id;
#endif
- (BOOL) _idIsSet;

#if !__has_feature(objc_arc)
- (uint8_t) _hours;
- (void) set_hours: (uint8_t) _hours;
#endif
- (BOOL) _hoursIsSet;

#if !__has_feature(objc_arc)
- (uint8_t) _minutes;
- (void) set_minutes: (uint8_t) _minutes;
#endif
- (BOOL) _minutesIsSet;

@end

@implementation OpenZWaveRemoveSwitchPoint_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_id: (OpenZWaveRemoteValueID *) _id _hours: (uint8_t) _hours _minutes: (uint8_t) _minutes
{
  self = [super init];
  ___id = [_id retain_stub];
  ___id_isset = YES;
  ___hours = _hours;
  ___hours_isset = YES;
  ___minutes = _minutes;
  ___minutes_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_id"])
  {
    ___id = [[decoder decodeObjectForKey: @"_id"] retain_stub];
    ___id_isset = YES;
  }
  if ([decoder containsValueForKey: @"_hours"])
  {
    ___hours = [decoder decodeIntForKey: @"_hours"];
    ___hours_isset = YES;
  }
  if ([decoder containsValueForKey: @"_minutes"])
  {
    ___minutes = [decoder decodeIntForKey: @"_minutes"];
    ___minutes_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___id_isset)
  {
    [encoder encodeObject: ___id forKey: @"_id"];
  }
  if (___hours_isset)
  {
    [encoder encodeInt: ___hours forKey: @"_hours"];
  }
  if (___minutes_isset)
  {
    [encoder encodeInt: ___minutes forKey: @"_minutes"];
  }
}

- (void) dealloc
{
  [___id release_stub];
  [super dealloc_stub];
}

- (OpenZWaveRemoteValueID *) _id {
  return [[___id retain_stub] autorelease_stub];
}

- (void) set_id: (OpenZWaveRemoteValueID *) _id {
  [_id retain_stub];
  [___id release_stub];
  ___id = _id;
  ___id_isset = YES;
}

- (BOOL) _idIsSet {
  return ___id_isset;
}

- (void) unset_id {
  [___id release_stub];
  ___id = nil;
  ___id_isset = NO;
}

- (uint8_t) _hours {
  return ___hours;
}

- (void) set_hours: (uint8_t) _hours {
  ___hours = _hours;
  ___hours_isset = YES;
}

- (BOOL) _hoursIsSet {
  return ___hours_isset;
}

- (void) unset_hours {
  ___hours_isset = NO;
}

- (uint8_t) _minutes {
  return ___minutes;
}

- (void) set_minutes: (uint8_t) _minutes {
  ___minutes = _minutes;
  ___minutes_isset = YES;
}

- (BOOL) _minutesIsSet {
  return ___minutes_isset;
}

- (void) unset_minutes {
  ___minutes_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          OpenZWaveRemoteValueID *fieldValue = [[OpenZWaveRemoteValueID alloc] init];
          [fieldValue read: inProtocol];
          [self set_id: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self set_hours: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self set_minutes: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"RemoveSwitchPoint_args"];
  if (___id_isset) {
    if (___id != nil) {
      [outProtocol writeFieldBeginWithName: @"_id" type: TType_STRUCT fieldID: 1];
      [___id write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (___hours_isset) {
    [outProtocol writeFieldBeginWithName: @"_hours" type: TType_BYTE fieldID: 2];
    [outProtocol writeByte: ___hours];
    [outProtocol writeFieldEnd];
  }
  if (___minutes_isset) {
    [outProtocol writeFieldBeginWithName: @"_minutes" type: TType_BYTE fieldID: 3];
    [outProtocol writeByte: ___minutes];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RemoveSwitchPoint_args("];
  [ms appendString: @"_id:"];
  [ms appendFormat: @"%@", ___id];
  [ms appendString: @",_hours:"];
  [ms appendFormat: @"%i", ___hours];
  [ms appendString: @",_minutes:"];
  [ms appendFormat: @"%i", ___minutes];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveRemoveSwitchPoint_result : NSObject <NSCoding> {
  BOOL __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) BOOL success;
#endif

- (id) init;
- (id) initWithSuccess: (BOOL) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (BOOL) success;
- (void) setSuccess: (BOOL) success;
#endif
- (BOOL) successIsSet;

@end

@implementation OpenZWaveRemoveSwitchPoint_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (BOOL) success
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeBoolForKey: @"success"];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeBool: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (BOOL) success {
  return __success;
}

- (void) setSuccess: (BOOL) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"RemoveSwitchPoint_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
    [outProtocol writeBool: __success];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RemoveSwitchPoint_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveClearSwitchPoints_args : NSObject <NSCoding> {
  OpenZWaveRemoteValueID * ___id;

  BOOL ___id_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=_id, setter=set_id:) OpenZWaveRemoteValueID * _id;
#endif

- (id) init;
- (id) initWith_id: (OpenZWaveRemoteValueID *) _id;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (OpenZWaveRemoteValueID *) _id;
- (void) set_id: (OpenZWaveRemoteValueID *) _id;
#endif
- (BOOL) _idIsSet;

@end

@implementation OpenZWaveClearSwitchPoints_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_id: (OpenZWaveRemoteValueID *) _id
{
  self = [super init];
  ___id = [_id retain_stub];
  ___id_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_id"])
  {
    ___id = [[decoder decodeObjectForKey: @"_id"] retain_stub];
    ___id_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___id_isset)
  {
    [encoder encodeObject: ___id forKey: @"_id"];
  }
}

- (void) dealloc
{
  [___id release_stub];
  [super dealloc_stub];
}

- (OpenZWaveRemoteValueID *) _id {
  return [[___id retain_stub] autorelease_stub];
}

- (void) set_id: (OpenZWaveRemoteValueID *) _id {
  [_id retain_stub];
  [___id release_stub];
  ___id = _id;
  ___id_isset = YES;
}

- (BOOL) _idIsSet {
  return ___id_isset;
}

- (void) unset_id {
  [___id release_stub];
  ___id = nil;
  ___id_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          OpenZWaveRemoteValueID *fieldValue = [[OpenZWaveRemoteValueID alloc] init];
          [fieldValue read: inProtocol];
          [self set_id: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ClearSwitchPoints_args"];
  if (___id_isset) {
    if (___id != nil) {
      [outProtocol writeFieldBeginWithName: @"_id" type: TType_STRUCT fieldID: 1];
      [___id write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ClearSwitchPoints_args("];
  [ms appendString: @"_id:"];
  [ms appendFormat: @"%@", ___id];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveClearSwitchPoints_result : NSObject <NSCoding> {
}

- (id) init;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

@end

@implementation OpenZWaveClearSwitchPoints_result

- (id) init
{
  self = [super init];
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ClearSwitchPoints_result"];

  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ClearSwitchPoints_result("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveGetSwitchPoint_args : NSObject <NSCoding> {
  OpenZWaveRemoteValueID * ___id;
  uint8_t ___idx;

  BOOL ___id_isset;
  BOOL ___idx_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=_id, setter=set_id:) OpenZWaveRemoteValueID * _id;
@property (nonatomic, getter=_idx, setter=set_idx:) uint8_t _idx;
#endif

- (id) init;
- (id) initWith_id: (OpenZWaveRemoteValueID *) _id _idx: (uint8_t) _idx;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (OpenZWaveRemoteValueID *) _id;
- (void) set_id: (OpenZWaveRemoteValueID *) _id;
#endif
- (BOOL) _idIsSet;

#if !__has_feature(objc_arc)
- (uint8_t) _idx;
- (void) set_idx: (uint8_t) _idx;
#endif
- (BOOL) _idxIsSet;

@end

@implementation OpenZWaveGetSwitchPoint_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_id: (OpenZWaveRemoteValueID *) _id _idx: (uint8_t) _idx
{
  self = [super init];
  ___id = [_id retain_stub];
  ___id_isset = YES;
  ___idx = _idx;
  ___idx_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_id"])
  {
    ___id = [[decoder decodeObjectForKey: @"_id"] retain_stub];
    ___id_isset = YES;
  }
  if ([decoder containsValueForKey: @"_idx"])
  {
    ___idx = [decoder decodeIntForKey: @"_idx"];
    ___idx_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___id_isset)
  {
    [encoder encodeObject: ___id forKey: @"_id"];
  }
  if (___idx_isset)
  {
    [encoder encodeInt: ___idx forKey: @"_idx"];
  }
}

- (void) dealloc
{
  [___id release_stub];
  [super dealloc_stub];
}

- (OpenZWaveRemoteValueID *) _id {
  return [[___id retain_stub] autorelease_stub];
}

- (void) set_id: (OpenZWaveRemoteValueID *) _id {
  [_id retain_stub];
  [___id release_stub];
  ___id = _id;
  ___id_isset = YES;
}

- (BOOL) _idIsSet {
  return ___id_isset;
}

- (void) unset_id {
  [___id release_stub];
  ___id = nil;
  ___id_isset = NO;
}

- (uint8_t) _idx {
  return ___idx;
}

- (void) set_idx: (uint8_t) _idx {
  ___idx = _idx;
  ___idx_isset = YES;
}

- (BOOL) _idxIsSet {
  return ___idx_isset;
}

- (void) unset_idx {
  ___idx_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          OpenZWaveRemoteValueID *fieldValue = [[OpenZWaveRemoteValueID alloc] init];
          [fieldValue read: inProtocol];
          [self set_id: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self set_idx: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetSwitchPoint_args"];
  if (___id_isset) {
    if (___id != nil) {
      [outProtocol writeFieldBeginWithName: @"_id" type: TType_STRUCT fieldID: 1];
      [___id write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (___idx_isset) {
    [outProtocol writeFieldBeginWithName: @"_idx" type: TType_BYTE fieldID: 2];
    [outProtocol writeByte: ___idx];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetSwitchPoint_args("];
  [ms appendString: @"_id:"];
  [ms appendFormat: @"%@", ___id];
  [ms appendString: @",_idx:"];
  [ms appendFormat: @"%i", ___idx];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveGetSwitchPoint_result : NSObject <NSCoding> {
  OpenZWaveGetSwitchPointReturnStruct * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) OpenZWaveGetSwitchPointReturnStruct * success;
#endif

- (id) init;
- (id) initWithSuccess: (OpenZWaveGetSwitchPointReturnStruct *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (OpenZWaveGetSwitchPointReturnStruct *) success;
- (void) setSuccess: (OpenZWaveGetSwitchPointReturnStruct *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation OpenZWaveGetSwitchPoint_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (OpenZWaveGetSwitchPointReturnStruct *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (OpenZWaveGetSwitchPointReturnStruct *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (OpenZWaveGetSwitchPointReturnStruct *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          OpenZWaveGetSwitchPointReturnStruct *fieldValue = [[OpenZWaveGetSwitchPointReturnStruct alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetSwitchPoint_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetSwitchPoint_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveSwitchAllOn_args : NSObject <NSCoding> {
  int32_t ___homeId;

  BOOL ___homeId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=_homeId, setter=set_homeId:) int32_t _homeId;
#endif

- (id) init;
- (id) initWith_homeId: (int32_t) _homeId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (int32_t) _homeId;
- (void) set_homeId: (int32_t) _homeId;
#endif
- (BOOL) _homeIdIsSet;

@end

@implementation OpenZWaveSwitchAllOn_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_homeId: (int32_t) _homeId
{
  self = [super init];
  ___homeId = _homeId;
  ___homeId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_homeId"])
  {
    ___homeId = [decoder decodeInt32ForKey: @"_homeId"];
    ___homeId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___homeId_isset)
  {
    [encoder encodeInt32: ___homeId forKey: @"_homeId"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (int32_t) _homeId {
  return ___homeId;
}

- (void) set_homeId: (int32_t) _homeId {
  ___homeId = _homeId;
  ___homeId_isset = YES;
}

- (BOOL) _homeIdIsSet {
  return ___homeId_isset;
}

- (void) unset_homeId {
  ___homeId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self set_homeId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SwitchAllOn_args"];
  if (___homeId_isset) {
    [outProtocol writeFieldBeginWithName: @"_homeId" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: ___homeId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SwitchAllOn_args("];
  [ms appendString: @"_homeId:"];
  [ms appendFormat: @"%i", ___homeId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveSwitchAllOn_result : NSObject <NSCoding> {
}

- (id) init;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

@end

@implementation OpenZWaveSwitchAllOn_result

- (id) init
{
  self = [super init];
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SwitchAllOn_result"];

  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SwitchAllOn_result("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveSwitchAllOff_args : NSObject <NSCoding> {
  int32_t ___homeId;

  BOOL ___homeId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=_homeId, setter=set_homeId:) int32_t _homeId;
#endif

- (id) init;
- (id) initWith_homeId: (int32_t) _homeId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (int32_t) _homeId;
- (void) set_homeId: (int32_t) _homeId;
#endif
- (BOOL) _homeIdIsSet;

@end

@implementation OpenZWaveSwitchAllOff_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_homeId: (int32_t) _homeId
{
  self = [super init];
  ___homeId = _homeId;
  ___homeId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_homeId"])
  {
    ___homeId = [decoder decodeInt32ForKey: @"_homeId"];
    ___homeId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___homeId_isset)
  {
    [encoder encodeInt32: ___homeId forKey: @"_homeId"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (int32_t) _homeId {
  return ___homeId;
}

- (void) set_homeId: (int32_t) _homeId {
  ___homeId = _homeId;
  ___homeId_isset = YES;
}

- (BOOL) _homeIdIsSet {
  return ___homeId_isset;
}

- (void) unset_homeId {
  ___homeId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self set_homeId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SwitchAllOff_args"];
  if (___homeId_isset) {
    [outProtocol writeFieldBeginWithName: @"_homeId" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: ___homeId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SwitchAllOff_args("];
  [ms appendString: @"_homeId:"];
  [ms appendFormat: @"%i", ___homeId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveSwitchAllOff_result : NSObject <NSCoding> {
}

- (id) init;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

@end

@implementation OpenZWaveSwitchAllOff_result

- (id) init
{
  self = [super init];
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SwitchAllOff_result"];

  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SwitchAllOff_result("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveSetConfigParam_args : NSObject <NSCoding> {
  int32_t ___homeId;
  uint8_t ___nodeId;
  uint8_t ___param;
  int32_t ___value;
  uint8_t ___size;

  BOOL ___homeId_isset;
  BOOL ___nodeId_isset;
  BOOL ___param_isset;
  BOOL ___value_isset;
  BOOL ___size_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=_homeId, setter=set_homeId:) int32_t _homeId;
@property (nonatomic, getter=_nodeId, setter=set_nodeId:) uint8_t _nodeId;
@property (nonatomic, getter=_param, setter=set_param:) uint8_t _param;
@property (nonatomic, getter=_value, setter=set_value:) int32_t _value;
@property (nonatomic, getter=_size, setter=set_size:) uint8_t _size;
#endif

- (id) init;
- (id) initWith_homeId: (int32_t) _homeId _nodeId: (uint8_t) _nodeId _param: (uint8_t) _param _value: (int32_t) _value _size: (uint8_t) _size;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (int32_t) _homeId;
- (void) set_homeId: (int32_t) _homeId;
#endif
- (BOOL) _homeIdIsSet;

#if !__has_feature(objc_arc)
- (uint8_t) _nodeId;
- (void) set_nodeId: (uint8_t) _nodeId;
#endif
- (BOOL) _nodeIdIsSet;

#if !__has_feature(objc_arc)
- (uint8_t) _param;
- (void) set_param: (uint8_t) _param;
#endif
- (BOOL) _paramIsSet;

#if !__has_feature(objc_arc)
- (int32_t) _value;
- (void) set_value: (int32_t) _value;
#endif
- (BOOL) _valueIsSet;

#if !__has_feature(objc_arc)
- (uint8_t) _size;
- (void) set_size: (uint8_t) _size;
#endif
- (BOOL) _sizeIsSet;

@end

@implementation OpenZWaveSetConfigParam_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self._size = 2;

#endif
  return self;
}

- (id) initWith_homeId: (int32_t) _homeId _nodeId: (uint8_t) _nodeId _param: (uint8_t) _param _value: (int32_t) _value _size: (uint8_t) _size
{
  self = [super init];
  ___homeId = _homeId;
  ___homeId_isset = YES;
  ___nodeId = _nodeId;
  ___nodeId_isset = YES;
  ___param = _param;
  ___param_isset = YES;
  ___value = _value;
  ___value_isset = YES;
  ___size = _size;
  ___size_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_homeId"])
  {
    ___homeId = [decoder decodeInt32ForKey: @"_homeId"];
    ___homeId_isset = YES;
  }
  if ([decoder containsValueForKey: @"_nodeId"])
  {
    ___nodeId = [decoder decodeIntForKey: @"_nodeId"];
    ___nodeId_isset = YES;
  }
  if ([decoder containsValueForKey: @"_param"])
  {
    ___param = [decoder decodeIntForKey: @"_param"];
    ___param_isset = YES;
  }
  if ([decoder containsValueForKey: @"_value"])
  {
    ___value = [decoder decodeInt32ForKey: @"_value"];
    ___value_isset = YES;
  }
  if ([decoder containsValueForKey: @"_size"])
  {
    ___size = [decoder decodeIntForKey: @"_size"];
    ___size_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___homeId_isset)
  {
    [encoder encodeInt32: ___homeId forKey: @"_homeId"];
  }
  if (___nodeId_isset)
  {
    [encoder encodeInt: ___nodeId forKey: @"_nodeId"];
  }
  if (___param_isset)
  {
    [encoder encodeInt: ___param forKey: @"_param"];
  }
  if (___value_isset)
  {
    [encoder encodeInt32: ___value forKey: @"_value"];
  }
  if (___size_isset)
  {
    [encoder encodeInt: ___size forKey: @"_size"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (int32_t) _homeId {
  return ___homeId;
}

- (void) set_homeId: (int32_t) _homeId {
  ___homeId = _homeId;
  ___homeId_isset = YES;
}

- (BOOL) _homeIdIsSet {
  return ___homeId_isset;
}

- (void) unset_homeId {
  ___homeId_isset = NO;
}

- (uint8_t) _nodeId {
  return ___nodeId;
}

- (void) set_nodeId: (uint8_t) _nodeId {
  ___nodeId = _nodeId;
  ___nodeId_isset = YES;
}

- (BOOL) _nodeIdIsSet {
  return ___nodeId_isset;
}

- (void) unset_nodeId {
  ___nodeId_isset = NO;
}

- (uint8_t) _param {
  return ___param;
}

- (void) set_param: (uint8_t) _param {
  ___param = _param;
  ___param_isset = YES;
}

- (BOOL) _paramIsSet {
  return ___param_isset;
}

- (void) unset_param {
  ___param_isset = NO;
}

- (int32_t) _value {
  return ___value;
}

- (void) set_value: (int32_t) _value {
  ___value = _value;
  ___value_isset = YES;
}

- (BOOL) _valueIsSet {
  return ___value_isset;
}

- (void) unset_value {
  ___value_isset = NO;
}

- (uint8_t) _size {
  return ___size;
}

- (void) set_size: (uint8_t) _size {
  ___size = _size;
  ___size_isset = YES;
}

- (BOOL) _sizeIsSet {
  return ___size_isset;
}

- (void) unset_size {
  ___size_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self set_homeId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self set_nodeId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self set_param: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self set_value: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self set_size: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SetConfigParam_args"];
  if (___homeId_isset) {
    [outProtocol writeFieldBeginWithName: @"_homeId" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: ___homeId];
    [outProtocol writeFieldEnd];
  }
  if (___nodeId_isset) {
    [outProtocol writeFieldBeginWithName: @"_nodeId" type: TType_BYTE fieldID: 2];
    [outProtocol writeByte: ___nodeId];
    [outProtocol writeFieldEnd];
  }
  if (___param_isset) {
    [outProtocol writeFieldBeginWithName: @"_param" type: TType_BYTE fieldID: 3];
    [outProtocol writeByte: ___param];
    [outProtocol writeFieldEnd];
  }
  if (___value_isset) {
    [outProtocol writeFieldBeginWithName: @"_value" type: TType_I32 fieldID: 4];
    [outProtocol writeI32: ___value];
    [outProtocol writeFieldEnd];
  }
  if (___size_isset) {
    [outProtocol writeFieldBeginWithName: @"_size" type: TType_BYTE fieldID: 5];
    [outProtocol writeByte: ___size];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SetConfigParam_args("];
  [ms appendString: @"_homeId:"];
  [ms appendFormat: @"%i", ___homeId];
  [ms appendString: @",_nodeId:"];
  [ms appendFormat: @"%i", ___nodeId];
  [ms appendString: @",_param:"];
  [ms appendFormat: @"%i", ___param];
  [ms appendString: @",_value:"];
  [ms appendFormat: @"%i", ___value];
  [ms appendString: @",_size:"];
  [ms appendFormat: @"%i", ___size];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveSetConfigParam_result : NSObject <NSCoding> {
  BOOL __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) BOOL success;
#endif

- (id) init;
- (id) initWithSuccess: (BOOL) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (BOOL) success;
- (void) setSuccess: (BOOL) success;
#endif
- (BOOL) successIsSet;

@end

@implementation OpenZWaveSetConfigParam_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (BOOL) success
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeBoolForKey: @"success"];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeBool: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (BOOL) success {
  return __success;
}

- (void) setSuccess: (BOOL) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SetConfigParam_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
    [outProtocol writeBool: __success];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SetConfigParam_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveRequestConfigParam_args : NSObject <NSCoding> {
  int32_t ___homeId;
  uint8_t ___nodeId;
  uint8_t ___param;

  BOOL ___homeId_isset;
  BOOL ___nodeId_isset;
  BOOL ___param_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=_homeId, setter=set_homeId:) int32_t _homeId;
@property (nonatomic, getter=_nodeId, setter=set_nodeId:) uint8_t _nodeId;
@property (nonatomic, getter=_param, setter=set_param:) uint8_t _param;
#endif

- (id) init;
- (id) initWith_homeId: (int32_t) _homeId _nodeId: (uint8_t) _nodeId _param: (uint8_t) _param;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (int32_t) _homeId;
- (void) set_homeId: (int32_t) _homeId;
#endif
- (BOOL) _homeIdIsSet;

#if !__has_feature(objc_arc)
- (uint8_t) _nodeId;
- (void) set_nodeId: (uint8_t) _nodeId;
#endif
- (BOOL) _nodeIdIsSet;

#if !__has_feature(objc_arc)
- (uint8_t) _param;
- (void) set_param: (uint8_t) _param;
#endif
- (BOOL) _paramIsSet;

@end

@implementation OpenZWaveRequestConfigParam_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_homeId: (int32_t) _homeId _nodeId: (uint8_t) _nodeId _param: (uint8_t) _param
{
  self = [super init];
  ___homeId = _homeId;
  ___homeId_isset = YES;
  ___nodeId = _nodeId;
  ___nodeId_isset = YES;
  ___param = _param;
  ___param_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_homeId"])
  {
    ___homeId = [decoder decodeInt32ForKey: @"_homeId"];
    ___homeId_isset = YES;
  }
  if ([decoder containsValueForKey: @"_nodeId"])
  {
    ___nodeId = [decoder decodeIntForKey: @"_nodeId"];
    ___nodeId_isset = YES;
  }
  if ([decoder containsValueForKey: @"_param"])
  {
    ___param = [decoder decodeIntForKey: @"_param"];
    ___param_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___homeId_isset)
  {
    [encoder encodeInt32: ___homeId forKey: @"_homeId"];
  }
  if (___nodeId_isset)
  {
    [encoder encodeInt: ___nodeId forKey: @"_nodeId"];
  }
  if (___param_isset)
  {
    [encoder encodeInt: ___param forKey: @"_param"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (int32_t) _homeId {
  return ___homeId;
}

- (void) set_homeId: (int32_t) _homeId {
  ___homeId = _homeId;
  ___homeId_isset = YES;
}

- (BOOL) _homeIdIsSet {
  return ___homeId_isset;
}

- (void) unset_homeId {
  ___homeId_isset = NO;
}

- (uint8_t) _nodeId {
  return ___nodeId;
}

- (void) set_nodeId: (uint8_t) _nodeId {
  ___nodeId = _nodeId;
  ___nodeId_isset = YES;
}

- (BOOL) _nodeIdIsSet {
  return ___nodeId_isset;
}

- (void) unset_nodeId {
  ___nodeId_isset = NO;
}

- (uint8_t) _param {
  return ___param;
}

- (void) set_param: (uint8_t) _param {
  ___param = _param;
  ___param_isset = YES;
}

- (BOOL) _paramIsSet {
  return ___param_isset;
}

- (void) unset_param {
  ___param_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self set_homeId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self set_nodeId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self set_param: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"RequestConfigParam_args"];
  if (___homeId_isset) {
    [outProtocol writeFieldBeginWithName: @"_homeId" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: ___homeId];
    [outProtocol writeFieldEnd];
  }
  if (___nodeId_isset) {
    [outProtocol writeFieldBeginWithName: @"_nodeId" type: TType_BYTE fieldID: 2];
    [outProtocol writeByte: ___nodeId];
    [outProtocol writeFieldEnd];
  }
  if (___param_isset) {
    [outProtocol writeFieldBeginWithName: @"_param" type: TType_BYTE fieldID: 3];
    [outProtocol writeByte: ___param];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RequestConfigParam_args("];
  [ms appendString: @"_homeId:"];
  [ms appendFormat: @"%i", ___homeId];
  [ms appendString: @",_nodeId:"];
  [ms appendFormat: @"%i", ___nodeId];
  [ms appendString: @",_param:"];
  [ms appendFormat: @"%i", ___param];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveRequestConfigParam_result : NSObject <NSCoding> {
}

- (id) init;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

@end

@implementation OpenZWaveRequestConfigParam_result

- (id) init
{
  self = [super init];
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"RequestConfigParam_result"];

  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RequestConfigParam_result("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveRequestAllConfigParams_args : NSObject <NSCoding> {
  int32_t ___homeId;
  uint8_t ___nodeId;

  BOOL ___homeId_isset;
  BOOL ___nodeId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=_homeId, setter=set_homeId:) int32_t _homeId;
@property (nonatomic, getter=_nodeId, setter=set_nodeId:) uint8_t _nodeId;
#endif

- (id) init;
- (id) initWith_homeId: (int32_t) _homeId _nodeId: (uint8_t) _nodeId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (int32_t) _homeId;
- (void) set_homeId: (int32_t) _homeId;
#endif
- (BOOL) _homeIdIsSet;

#if !__has_feature(objc_arc)
- (uint8_t) _nodeId;
- (void) set_nodeId: (uint8_t) _nodeId;
#endif
- (BOOL) _nodeIdIsSet;

@end

@implementation OpenZWaveRequestAllConfigParams_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_homeId: (int32_t) _homeId _nodeId: (uint8_t) _nodeId
{
  self = [super init];
  ___homeId = _homeId;
  ___homeId_isset = YES;
  ___nodeId = _nodeId;
  ___nodeId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_homeId"])
  {
    ___homeId = [decoder decodeInt32ForKey: @"_homeId"];
    ___homeId_isset = YES;
  }
  if ([decoder containsValueForKey: @"_nodeId"])
  {
    ___nodeId = [decoder decodeIntForKey: @"_nodeId"];
    ___nodeId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___homeId_isset)
  {
    [encoder encodeInt32: ___homeId forKey: @"_homeId"];
  }
  if (___nodeId_isset)
  {
    [encoder encodeInt: ___nodeId forKey: @"_nodeId"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (int32_t) _homeId {
  return ___homeId;
}

- (void) set_homeId: (int32_t) _homeId {
  ___homeId = _homeId;
  ___homeId_isset = YES;
}

- (BOOL) _homeIdIsSet {
  return ___homeId_isset;
}

- (void) unset_homeId {
  ___homeId_isset = NO;
}

- (uint8_t) _nodeId {
  return ___nodeId;
}

- (void) set_nodeId: (uint8_t) _nodeId {
  ___nodeId = _nodeId;
  ___nodeId_isset = YES;
}

- (BOOL) _nodeIdIsSet {
  return ___nodeId_isset;
}

- (void) unset_nodeId {
  ___nodeId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self set_homeId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self set_nodeId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"RequestAllConfigParams_args"];
  if (___homeId_isset) {
    [outProtocol writeFieldBeginWithName: @"_homeId" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: ___homeId];
    [outProtocol writeFieldEnd];
  }
  if (___nodeId_isset) {
    [outProtocol writeFieldBeginWithName: @"_nodeId" type: TType_BYTE fieldID: 2];
    [outProtocol writeByte: ___nodeId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RequestAllConfigParams_args("];
  [ms appendString: @"_homeId:"];
  [ms appendFormat: @"%i", ___homeId];
  [ms appendString: @",_nodeId:"];
  [ms appendFormat: @"%i", ___nodeId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveRequestAllConfigParams_result : NSObject <NSCoding> {
}

- (id) init;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

@end

@implementation OpenZWaveRequestAllConfigParams_result

- (id) init
{
  self = [super init];
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"RequestAllConfigParams_result"];

  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RequestAllConfigParams_result("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveGetNumGroups_args : NSObject <NSCoding> {
  int32_t ___homeId;
  uint8_t ___nodeId;

  BOOL ___homeId_isset;
  BOOL ___nodeId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=_homeId, setter=set_homeId:) int32_t _homeId;
@property (nonatomic, getter=_nodeId, setter=set_nodeId:) uint8_t _nodeId;
#endif

- (id) init;
- (id) initWith_homeId: (int32_t) _homeId _nodeId: (uint8_t) _nodeId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (int32_t) _homeId;
- (void) set_homeId: (int32_t) _homeId;
#endif
- (BOOL) _homeIdIsSet;

#if !__has_feature(objc_arc)
- (uint8_t) _nodeId;
- (void) set_nodeId: (uint8_t) _nodeId;
#endif
- (BOOL) _nodeIdIsSet;

@end

@implementation OpenZWaveGetNumGroups_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_homeId: (int32_t) _homeId _nodeId: (uint8_t) _nodeId
{
  self = [super init];
  ___homeId = _homeId;
  ___homeId_isset = YES;
  ___nodeId = _nodeId;
  ___nodeId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_homeId"])
  {
    ___homeId = [decoder decodeInt32ForKey: @"_homeId"];
    ___homeId_isset = YES;
  }
  if ([decoder containsValueForKey: @"_nodeId"])
  {
    ___nodeId = [decoder decodeIntForKey: @"_nodeId"];
    ___nodeId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___homeId_isset)
  {
    [encoder encodeInt32: ___homeId forKey: @"_homeId"];
  }
  if (___nodeId_isset)
  {
    [encoder encodeInt: ___nodeId forKey: @"_nodeId"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (int32_t) _homeId {
  return ___homeId;
}

- (void) set_homeId: (int32_t) _homeId {
  ___homeId = _homeId;
  ___homeId_isset = YES;
}

- (BOOL) _homeIdIsSet {
  return ___homeId_isset;
}

- (void) unset_homeId {
  ___homeId_isset = NO;
}

- (uint8_t) _nodeId {
  return ___nodeId;
}

- (void) set_nodeId: (uint8_t) _nodeId {
  ___nodeId = _nodeId;
  ___nodeId_isset = YES;
}

- (BOOL) _nodeIdIsSet {
  return ___nodeId_isset;
}

- (void) unset_nodeId {
  ___nodeId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self set_homeId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self set_nodeId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetNumGroups_args"];
  if (___homeId_isset) {
    [outProtocol writeFieldBeginWithName: @"_homeId" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: ___homeId];
    [outProtocol writeFieldEnd];
  }
  if (___nodeId_isset) {
    [outProtocol writeFieldBeginWithName: @"_nodeId" type: TType_BYTE fieldID: 2];
    [outProtocol writeByte: ___nodeId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetNumGroups_args("];
  [ms appendString: @"_homeId:"];
  [ms appendFormat: @"%i", ___homeId];
  [ms appendString: @",_nodeId:"];
  [ms appendFormat: @"%i", ___nodeId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveGetNumGroups_result : NSObject <NSCoding> {
  uint8_t __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) uint8_t success;
#endif

- (id) init;
- (id) initWithSuccess: (uint8_t) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (uint8_t) success;
- (void) setSuccess: (uint8_t) success;
#endif
- (BOOL) successIsSet;

@end

@implementation OpenZWaveGetNumGroups_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (uint8_t) success
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeIntForKey: @"success"];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeInt: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (uint8_t) success {
  return __success;
}

- (void) setSuccess: (uint8_t) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetNumGroups_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_BYTE fieldID: 0];
    [outProtocol writeByte: __success];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetNumGroups_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveGetAssociations_args : NSObject <NSCoding> {
  int32_t ___homeId;
  uint8_t ___nodeId;
  uint8_t ___groupIdx;

  BOOL ___homeId_isset;
  BOOL ___nodeId_isset;
  BOOL ___groupIdx_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=_homeId, setter=set_homeId:) int32_t _homeId;
@property (nonatomic, getter=_nodeId, setter=set_nodeId:) uint8_t _nodeId;
@property (nonatomic, getter=_groupIdx, setter=set_groupIdx:) uint8_t _groupIdx;
#endif

- (id) init;
- (id) initWith_homeId: (int32_t) _homeId _nodeId: (uint8_t) _nodeId _groupIdx: (uint8_t) _groupIdx;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (int32_t) _homeId;
- (void) set_homeId: (int32_t) _homeId;
#endif
- (BOOL) _homeIdIsSet;

#if !__has_feature(objc_arc)
- (uint8_t) _nodeId;
- (void) set_nodeId: (uint8_t) _nodeId;
#endif
- (BOOL) _nodeIdIsSet;

#if !__has_feature(objc_arc)
- (uint8_t) _groupIdx;
- (void) set_groupIdx: (uint8_t) _groupIdx;
#endif
- (BOOL) _groupIdxIsSet;

@end

@implementation OpenZWaveGetAssociations_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_homeId: (int32_t) _homeId _nodeId: (uint8_t) _nodeId _groupIdx: (uint8_t) _groupIdx
{
  self = [super init];
  ___homeId = _homeId;
  ___homeId_isset = YES;
  ___nodeId = _nodeId;
  ___nodeId_isset = YES;
  ___groupIdx = _groupIdx;
  ___groupIdx_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_homeId"])
  {
    ___homeId = [decoder decodeInt32ForKey: @"_homeId"];
    ___homeId_isset = YES;
  }
  if ([decoder containsValueForKey: @"_nodeId"])
  {
    ___nodeId = [decoder decodeIntForKey: @"_nodeId"];
    ___nodeId_isset = YES;
  }
  if ([decoder containsValueForKey: @"_groupIdx"])
  {
    ___groupIdx = [decoder decodeIntForKey: @"_groupIdx"];
    ___groupIdx_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___homeId_isset)
  {
    [encoder encodeInt32: ___homeId forKey: @"_homeId"];
  }
  if (___nodeId_isset)
  {
    [encoder encodeInt: ___nodeId forKey: @"_nodeId"];
  }
  if (___groupIdx_isset)
  {
    [encoder encodeInt: ___groupIdx forKey: @"_groupIdx"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (int32_t) _homeId {
  return ___homeId;
}

- (void) set_homeId: (int32_t) _homeId {
  ___homeId = _homeId;
  ___homeId_isset = YES;
}

- (BOOL) _homeIdIsSet {
  return ___homeId_isset;
}

- (void) unset_homeId {
  ___homeId_isset = NO;
}

- (uint8_t) _nodeId {
  return ___nodeId;
}

- (void) set_nodeId: (uint8_t) _nodeId {
  ___nodeId = _nodeId;
  ___nodeId_isset = YES;
}

- (BOOL) _nodeIdIsSet {
  return ___nodeId_isset;
}

- (void) unset_nodeId {
  ___nodeId_isset = NO;
}

- (uint8_t) _groupIdx {
  return ___groupIdx;
}

- (void) set_groupIdx: (uint8_t) _groupIdx {
  ___groupIdx = _groupIdx;
  ___groupIdx_isset = YES;
}

- (BOOL) _groupIdxIsSet {
  return ___groupIdx_isset;
}

- (void) unset_groupIdx {
  ___groupIdx_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self set_homeId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self set_nodeId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self set_groupIdx: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetAssociations_args"];
  if (___homeId_isset) {
    [outProtocol writeFieldBeginWithName: @"_homeId" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: ___homeId];
    [outProtocol writeFieldEnd];
  }
  if (___nodeId_isset) {
    [outProtocol writeFieldBeginWithName: @"_nodeId" type: TType_BYTE fieldID: 2];
    [outProtocol writeByte: ___nodeId];
    [outProtocol writeFieldEnd];
  }
  if (___groupIdx_isset) {
    [outProtocol writeFieldBeginWithName: @"_groupIdx" type: TType_BYTE fieldID: 3];
    [outProtocol writeByte: ___groupIdx];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetAssociations_args("];
  [ms appendString: @"_homeId:"];
  [ms appendFormat: @"%i", ___homeId];
  [ms appendString: @",_nodeId:"];
  [ms appendFormat: @"%i", ___nodeId];
  [ms appendString: @",_groupIdx:"];
  [ms appendFormat: @"%i", ___groupIdx];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveGetAssociations_result : NSObject <NSCoding> {
  OpenZWaveGetAssociationsReturnStruct * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) OpenZWaveGetAssociationsReturnStruct * success;
#endif

- (id) init;
- (id) initWithSuccess: (OpenZWaveGetAssociationsReturnStruct *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (OpenZWaveGetAssociationsReturnStruct *) success;
- (void) setSuccess: (OpenZWaveGetAssociationsReturnStruct *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation OpenZWaveGetAssociations_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (OpenZWaveGetAssociationsReturnStruct *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (OpenZWaveGetAssociationsReturnStruct *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (OpenZWaveGetAssociationsReturnStruct *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          OpenZWaveGetAssociationsReturnStruct *fieldValue = [[OpenZWaveGetAssociationsReturnStruct alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetAssociations_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetAssociations_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveGetMaxAssociations_args : NSObject <NSCoding> {
  int32_t ___homeId;
  uint8_t ___nodeId;
  uint8_t ___groupIdx;

  BOOL ___homeId_isset;
  BOOL ___nodeId_isset;
  BOOL ___groupIdx_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=_homeId, setter=set_homeId:) int32_t _homeId;
@property (nonatomic, getter=_nodeId, setter=set_nodeId:) uint8_t _nodeId;
@property (nonatomic, getter=_groupIdx, setter=set_groupIdx:) uint8_t _groupIdx;
#endif

- (id) init;
- (id) initWith_homeId: (int32_t) _homeId _nodeId: (uint8_t) _nodeId _groupIdx: (uint8_t) _groupIdx;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (int32_t) _homeId;
- (void) set_homeId: (int32_t) _homeId;
#endif
- (BOOL) _homeIdIsSet;

#if !__has_feature(objc_arc)
- (uint8_t) _nodeId;
- (void) set_nodeId: (uint8_t) _nodeId;
#endif
- (BOOL) _nodeIdIsSet;

#if !__has_feature(objc_arc)
- (uint8_t) _groupIdx;
- (void) set_groupIdx: (uint8_t) _groupIdx;
#endif
- (BOOL) _groupIdxIsSet;

@end

@implementation OpenZWaveGetMaxAssociations_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_homeId: (int32_t) _homeId _nodeId: (uint8_t) _nodeId _groupIdx: (uint8_t) _groupIdx
{
  self = [super init];
  ___homeId = _homeId;
  ___homeId_isset = YES;
  ___nodeId = _nodeId;
  ___nodeId_isset = YES;
  ___groupIdx = _groupIdx;
  ___groupIdx_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_homeId"])
  {
    ___homeId = [decoder decodeInt32ForKey: @"_homeId"];
    ___homeId_isset = YES;
  }
  if ([decoder containsValueForKey: @"_nodeId"])
  {
    ___nodeId = [decoder decodeIntForKey: @"_nodeId"];
    ___nodeId_isset = YES;
  }
  if ([decoder containsValueForKey: @"_groupIdx"])
  {
    ___groupIdx = [decoder decodeIntForKey: @"_groupIdx"];
    ___groupIdx_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___homeId_isset)
  {
    [encoder encodeInt32: ___homeId forKey: @"_homeId"];
  }
  if (___nodeId_isset)
  {
    [encoder encodeInt: ___nodeId forKey: @"_nodeId"];
  }
  if (___groupIdx_isset)
  {
    [encoder encodeInt: ___groupIdx forKey: @"_groupIdx"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (int32_t) _homeId {
  return ___homeId;
}

- (void) set_homeId: (int32_t) _homeId {
  ___homeId = _homeId;
  ___homeId_isset = YES;
}

- (BOOL) _homeIdIsSet {
  return ___homeId_isset;
}

- (void) unset_homeId {
  ___homeId_isset = NO;
}

- (uint8_t) _nodeId {
  return ___nodeId;
}

- (void) set_nodeId: (uint8_t) _nodeId {
  ___nodeId = _nodeId;
  ___nodeId_isset = YES;
}

- (BOOL) _nodeIdIsSet {
  return ___nodeId_isset;
}

- (void) unset_nodeId {
  ___nodeId_isset = NO;
}

- (uint8_t) _groupIdx {
  return ___groupIdx;
}

- (void) set_groupIdx: (uint8_t) _groupIdx {
  ___groupIdx = _groupIdx;
  ___groupIdx_isset = YES;
}

- (BOOL) _groupIdxIsSet {
  return ___groupIdx_isset;
}

- (void) unset_groupIdx {
  ___groupIdx_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self set_homeId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self set_nodeId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self set_groupIdx: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetMaxAssociations_args"];
  if (___homeId_isset) {
    [outProtocol writeFieldBeginWithName: @"_homeId" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: ___homeId];
    [outProtocol writeFieldEnd];
  }
  if (___nodeId_isset) {
    [outProtocol writeFieldBeginWithName: @"_nodeId" type: TType_BYTE fieldID: 2];
    [outProtocol writeByte: ___nodeId];
    [outProtocol writeFieldEnd];
  }
  if (___groupIdx_isset) {
    [outProtocol writeFieldBeginWithName: @"_groupIdx" type: TType_BYTE fieldID: 3];
    [outProtocol writeByte: ___groupIdx];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetMaxAssociations_args("];
  [ms appendString: @"_homeId:"];
  [ms appendFormat: @"%i", ___homeId];
  [ms appendString: @",_nodeId:"];
  [ms appendFormat: @"%i", ___nodeId];
  [ms appendString: @",_groupIdx:"];
  [ms appendFormat: @"%i", ___groupIdx];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveGetMaxAssociations_result : NSObject <NSCoding> {
  uint8_t __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) uint8_t success;
#endif

- (id) init;
- (id) initWithSuccess: (uint8_t) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (uint8_t) success;
- (void) setSuccess: (uint8_t) success;
#endif
- (BOOL) successIsSet;

@end

@implementation OpenZWaveGetMaxAssociations_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (uint8_t) success
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeIntForKey: @"success"];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeInt: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (uint8_t) success {
  return __success;
}

- (void) setSuccess: (uint8_t) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetMaxAssociations_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_BYTE fieldID: 0];
    [outProtocol writeByte: __success];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetMaxAssociations_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveGetGroupLabel_args : NSObject <NSCoding> {
  int32_t ___homeId;
  uint8_t ___nodeId;
  uint8_t ___groupIdx;

  BOOL ___homeId_isset;
  BOOL ___nodeId_isset;
  BOOL ___groupIdx_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=_homeId, setter=set_homeId:) int32_t _homeId;
@property (nonatomic, getter=_nodeId, setter=set_nodeId:) uint8_t _nodeId;
@property (nonatomic, getter=_groupIdx, setter=set_groupIdx:) uint8_t _groupIdx;
#endif

- (id) init;
- (id) initWith_homeId: (int32_t) _homeId _nodeId: (uint8_t) _nodeId _groupIdx: (uint8_t) _groupIdx;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (int32_t) _homeId;
- (void) set_homeId: (int32_t) _homeId;
#endif
- (BOOL) _homeIdIsSet;

#if !__has_feature(objc_arc)
- (uint8_t) _nodeId;
- (void) set_nodeId: (uint8_t) _nodeId;
#endif
- (BOOL) _nodeIdIsSet;

#if !__has_feature(objc_arc)
- (uint8_t) _groupIdx;
- (void) set_groupIdx: (uint8_t) _groupIdx;
#endif
- (BOOL) _groupIdxIsSet;

@end

@implementation OpenZWaveGetGroupLabel_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_homeId: (int32_t) _homeId _nodeId: (uint8_t) _nodeId _groupIdx: (uint8_t) _groupIdx
{
  self = [super init];
  ___homeId = _homeId;
  ___homeId_isset = YES;
  ___nodeId = _nodeId;
  ___nodeId_isset = YES;
  ___groupIdx = _groupIdx;
  ___groupIdx_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_homeId"])
  {
    ___homeId = [decoder decodeInt32ForKey: @"_homeId"];
    ___homeId_isset = YES;
  }
  if ([decoder containsValueForKey: @"_nodeId"])
  {
    ___nodeId = [decoder decodeIntForKey: @"_nodeId"];
    ___nodeId_isset = YES;
  }
  if ([decoder containsValueForKey: @"_groupIdx"])
  {
    ___groupIdx = [decoder decodeIntForKey: @"_groupIdx"];
    ___groupIdx_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___homeId_isset)
  {
    [encoder encodeInt32: ___homeId forKey: @"_homeId"];
  }
  if (___nodeId_isset)
  {
    [encoder encodeInt: ___nodeId forKey: @"_nodeId"];
  }
  if (___groupIdx_isset)
  {
    [encoder encodeInt: ___groupIdx forKey: @"_groupIdx"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (int32_t) _homeId {
  return ___homeId;
}

- (void) set_homeId: (int32_t) _homeId {
  ___homeId = _homeId;
  ___homeId_isset = YES;
}

- (BOOL) _homeIdIsSet {
  return ___homeId_isset;
}

- (void) unset_homeId {
  ___homeId_isset = NO;
}

- (uint8_t) _nodeId {
  return ___nodeId;
}

- (void) set_nodeId: (uint8_t) _nodeId {
  ___nodeId = _nodeId;
  ___nodeId_isset = YES;
}

- (BOOL) _nodeIdIsSet {
  return ___nodeId_isset;
}

- (void) unset_nodeId {
  ___nodeId_isset = NO;
}

- (uint8_t) _groupIdx {
  return ___groupIdx;
}

- (void) set_groupIdx: (uint8_t) _groupIdx {
  ___groupIdx = _groupIdx;
  ___groupIdx_isset = YES;
}

- (BOOL) _groupIdxIsSet {
  return ___groupIdx_isset;
}

- (void) unset_groupIdx {
  ___groupIdx_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self set_homeId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self set_nodeId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self set_groupIdx: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetGroupLabel_args"];
  if (___homeId_isset) {
    [outProtocol writeFieldBeginWithName: @"_homeId" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: ___homeId];
    [outProtocol writeFieldEnd];
  }
  if (___nodeId_isset) {
    [outProtocol writeFieldBeginWithName: @"_nodeId" type: TType_BYTE fieldID: 2];
    [outProtocol writeByte: ___nodeId];
    [outProtocol writeFieldEnd];
  }
  if (___groupIdx_isset) {
    [outProtocol writeFieldBeginWithName: @"_groupIdx" type: TType_BYTE fieldID: 3];
    [outProtocol writeByte: ___groupIdx];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetGroupLabel_args("];
  [ms appendString: @"_homeId:"];
  [ms appendFormat: @"%i", ___homeId];
  [ms appendString: @",_nodeId:"];
  [ms appendFormat: @"%i", ___nodeId];
  [ms appendString: @",_groupIdx:"];
  [ms appendFormat: @"%i", ___groupIdx];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveGetGroupLabel_result : NSObject <NSCoding> {
  NSString * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSString * success;
#endif

- (id) init;
- (id) initWithSuccess: (NSString *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (NSString *) success;
- (void) setSuccess: (NSString *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation OpenZWaveGetGroupLabel_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NSString *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (NSString *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSString *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetGroupLabel_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRING fieldID: 0];
      [outProtocol writeString: __success];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetGroupLabel_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"\"%@\"", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveAddAssociation_args : NSObject <NSCoding> {
  int32_t ___homeId;
  uint8_t ___nodeId;
  uint8_t ___groupIdx;
  uint8_t ___targetNodeId;

  BOOL ___homeId_isset;
  BOOL ___nodeId_isset;
  BOOL ___groupIdx_isset;
  BOOL ___targetNodeId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=_homeId, setter=set_homeId:) int32_t _homeId;
@property (nonatomic, getter=_nodeId, setter=set_nodeId:) uint8_t _nodeId;
@property (nonatomic, getter=_groupIdx, setter=set_groupIdx:) uint8_t _groupIdx;
@property (nonatomic, getter=_targetNodeId, setter=set_targetNodeId:) uint8_t _targetNodeId;
#endif

- (id) init;
- (id) initWith_homeId: (int32_t) _homeId _nodeId: (uint8_t) _nodeId _groupIdx: (uint8_t) _groupIdx _targetNodeId: (uint8_t) _targetNodeId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (int32_t) _homeId;
- (void) set_homeId: (int32_t) _homeId;
#endif
- (BOOL) _homeIdIsSet;

#if !__has_feature(objc_arc)
- (uint8_t) _nodeId;
- (void) set_nodeId: (uint8_t) _nodeId;
#endif
- (BOOL) _nodeIdIsSet;

#if !__has_feature(objc_arc)
- (uint8_t) _groupIdx;
- (void) set_groupIdx: (uint8_t) _groupIdx;
#endif
- (BOOL) _groupIdxIsSet;

#if !__has_feature(objc_arc)
- (uint8_t) _targetNodeId;
- (void) set_targetNodeId: (uint8_t) _targetNodeId;
#endif
- (BOOL) _targetNodeIdIsSet;

@end

@implementation OpenZWaveAddAssociation_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_homeId: (int32_t) _homeId _nodeId: (uint8_t) _nodeId _groupIdx: (uint8_t) _groupIdx _targetNodeId: (uint8_t) _targetNodeId
{
  self = [super init];
  ___homeId = _homeId;
  ___homeId_isset = YES;
  ___nodeId = _nodeId;
  ___nodeId_isset = YES;
  ___groupIdx = _groupIdx;
  ___groupIdx_isset = YES;
  ___targetNodeId = _targetNodeId;
  ___targetNodeId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_homeId"])
  {
    ___homeId = [decoder decodeInt32ForKey: @"_homeId"];
    ___homeId_isset = YES;
  }
  if ([decoder containsValueForKey: @"_nodeId"])
  {
    ___nodeId = [decoder decodeIntForKey: @"_nodeId"];
    ___nodeId_isset = YES;
  }
  if ([decoder containsValueForKey: @"_groupIdx"])
  {
    ___groupIdx = [decoder decodeIntForKey: @"_groupIdx"];
    ___groupIdx_isset = YES;
  }
  if ([decoder containsValueForKey: @"_targetNodeId"])
  {
    ___targetNodeId = [decoder decodeIntForKey: @"_targetNodeId"];
    ___targetNodeId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___homeId_isset)
  {
    [encoder encodeInt32: ___homeId forKey: @"_homeId"];
  }
  if (___nodeId_isset)
  {
    [encoder encodeInt: ___nodeId forKey: @"_nodeId"];
  }
  if (___groupIdx_isset)
  {
    [encoder encodeInt: ___groupIdx forKey: @"_groupIdx"];
  }
  if (___targetNodeId_isset)
  {
    [encoder encodeInt: ___targetNodeId forKey: @"_targetNodeId"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (int32_t) _homeId {
  return ___homeId;
}

- (void) set_homeId: (int32_t) _homeId {
  ___homeId = _homeId;
  ___homeId_isset = YES;
}

- (BOOL) _homeIdIsSet {
  return ___homeId_isset;
}

- (void) unset_homeId {
  ___homeId_isset = NO;
}

- (uint8_t) _nodeId {
  return ___nodeId;
}

- (void) set_nodeId: (uint8_t) _nodeId {
  ___nodeId = _nodeId;
  ___nodeId_isset = YES;
}

- (BOOL) _nodeIdIsSet {
  return ___nodeId_isset;
}

- (void) unset_nodeId {
  ___nodeId_isset = NO;
}

- (uint8_t) _groupIdx {
  return ___groupIdx;
}

- (void) set_groupIdx: (uint8_t) _groupIdx {
  ___groupIdx = _groupIdx;
  ___groupIdx_isset = YES;
}

- (BOOL) _groupIdxIsSet {
  return ___groupIdx_isset;
}

- (void) unset_groupIdx {
  ___groupIdx_isset = NO;
}

- (uint8_t) _targetNodeId {
  return ___targetNodeId;
}

- (void) set_targetNodeId: (uint8_t) _targetNodeId {
  ___targetNodeId = _targetNodeId;
  ___targetNodeId_isset = YES;
}

- (BOOL) _targetNodeIdIsSet {
  return ___targetNodeId_isset;
}

- (void) unset_targetNodeId {
  ___targetNodeId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self set_homeId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self set_nodeId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self set_groupIdx: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self set_targetNodeId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"AddAssociation_args"];
  if (___homeId_isset) {
    [outProtocol writeFieldBeginWithName: @"_homeId" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: ___homeId];
    [outProtocol writeFieldEnd];
  }
  if (___nodeId_isset) {
    [outProtocol writeFieldBeginWithName: @"_nodeId" type: TType_BYTE fieldID: 2];
    [outProtocol writeByte: ___nodeId];
    [outProtocol writeFieldEnd];
  }
  if (___groupIdx_isset) {
    [outProtocol writeFieldBeginWithName: @"_groupIdx" type: TType_BYTE fieldID: 3];
    [outProtocol writeByte: ___groupIdx];
    [outProtocol writeFieldEnd];
  }
  if (___targetNodeId_isset) {
    [outProtocol writeFieldBeginWithName: @"_targetNodeId" type: TType_BYTE fieldID: 4];
    [outProtocol writeByte: ___targetNodeId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AddAssociation_args("];
  [ms appendString: @"_homeId:"];
  [ms appendFormat: @"%i", ___homeId];
  [ms appendString: @",_nodeId:"];
  [ms appendFormat: @"%i", ___nodeId];
  [ms appendString: @",_groupIdx:"];
  [ms appendFormat: @"%i", ___groupIdx];
  [ms appendString: @",_targetNodeId:"];
  [ms appendFormat: @"%i", ___targetNodeId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveAddAssociation_result : NSObject <NSCoding> {
}

- (id) init;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

@end

@implementation OpenZWaveAddAssociation_result

- (id) init
{
  self = [super init];
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"AddAssociation_result"];

  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AddAssociation_result("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveRemoveAssociation_args : NSObject <NSCoding> {
  int32_t ___homeId;
  uint8_t ___nodeId;
  uint8_t ___groupIdx;
  uint8_t ___targetNodeId;

  BOOL ___homeId_isset;
  BOOL ___nodeId_isset;
  BOOL ___groupIdx_isset;
  BOOL ___targetNodeId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=_homeId, setter=set_homeId:) int32_t _homeId;
@property (nonatomic, getter=_nodeId, setter=set_nodeId:) uint8_t _nodeId;
@property (nonatomic, getter=_groupIdx, setter=set_groupIdx:) uint8_t _groupIdx;
@property (nonatomic, getter=_targetNodeId, setter=set_targetNodeId:) uint8_t _targetNodeId;
#endif

- (id) init;
- (id) initWith_homeId: (int32_t) _homeId _nodeId: (uint8_t) _nodeId _groupIdx: (uint8_t) _groupIdx _targetNodeId: (uint8_t) _targetNodeId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (int32_t) _homeId;
- (void) set_homeId: (int32_t) _homeId;
#endif
- (BOOL) _homeIdIsSet;

#if !__has_feature(objc_arc)
- (uint8_t) _nodeId;
- (void) set_nodeId: (uint8_t) _nodeId;
#endif
- (BOOL) _nodeIdIsSet;

#if !__has_feature(objc_arc)
- (uint8_t) _groupIdx;
- (void) set_groupIdx: (uint8_t) _groupIdx;
#endif
- (BOOL) _groupIdxIsSet;

#if !__has_feature(objc_arc)
- (uint8_t) _targetNodeId;
- (void) set_targetNodeId: (uint8_t) _targetNodeId;
#endif
- (BOOL) _targetNodeIdIsSet;

@end

@implementation OpenZWaveRemoveAssociation_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_homeId: (int32_t) _homeId _nodeId: (uint8_t) _nodeId _groupIdx: (uint8_t) _groupIdx _targetNodeId: (uint8_t) _targetNodeId
{
  self = [super init];
  ___homeId = _homeId;
  ___homeId_isset = YES;
  ___nodeId = _nodeId;
  ___nodeId_isset = YES;
  ___groupIdx = _groupIdx;
  ___groupIdx_isset = YES;
  ___targetNodeId = _targetNodeId;
  ___targetNodeId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_homeId"])
  {
    ___homeId = [decoder decodeInt32ForKey: @"_homeId"];
    ___homeId_isset = YES;
  }
  if ([decoder containsValueForKey: @"_nodeId"])
  {
    ___nodeId = [decoder decodeIntForKey: @"_nodeId"];
    ___nodeId_isset = YES;
  }
  if ([decoder containsValueForKey: @"_groupIdx"])
  {
    ___groupIdx = [decoder decodeIntForKey: @"_groupIdx"];
    ___groupIdx_isset = YES;
  }
  if ([decoder containsValueForKey: @"_targetNodeId"])
  {
    ___targetNodeId = [decoder decodeIntForKey: @"_targetNodeId"];
    ___targetNodeId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___homeId_isset)
  {
    [encoder encodeInt32: ___homeId forKey: @"_homeId"];
  }
  if (___nodeId_isset)
  {
    [encoder encodeInt: ___nodeId forKey: @"_nodeId"];
  }
  if (___groupIdx_isset)
  {
    [encoder encodeInt: ___groupIdx forKey: @"_groupIdx"];
  }
  if (___targetNodeId_isset)
  {
    [encoder encodeInt: ___targetNodeId forKey: @"_targetNodeId"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (int32_t) _homeId {
  return ___homeId;
}

- (void) set_homeId: (int32_t) _homeId {
  ___homeId = _homeId;
  ___homeId_isset = YES;
}

- (BOOL) _homeIdIsSet {
  return ___homeId_isset;
}

- (void) unset_homeId {
  ___homeId_isset = NO;
}

- (uint8_t) _nodeId {
  return ___nodeId;
}

- (void) set_nodeId: (uint8_t) _nodeId {
  ___nodeId = _nodeId;
  ___nodeId_isset = YES;
}

- (BOOL) _nodeIdIsSet {
  return ___nodeId_isset;
}

- (void) unset_nodeId {
  ___nodeId_isset = NO;
}

- (uint8_t) _groupIdx {
  return ___groupIdx;
}

- (void) set_groupIdx: (uint8_t) _groupIdx {
  ___groupIdx = _groupIdx;
  ___groupIdx_isset = YES;
}

- (BOOL) _groupIdxIsSet {
  return ___groupIdx_isset;
}

- (void) unset_groupIdx {
  ___groupIdx_isset = NO;
}

- (uint8_t) _targetNodeId {
  return ___targetNodeId;
}

- (void) set_targetNodeId: (uint8_t) _targetNodeId {
  ___targetNodeId = _targetNodeId;
  ___targetNodeId_isset = YES;
}

- (BOOL) _targetNodeIdIsSet {
  return ___targetNodeId_isset;
}

- (void) unset_targetNodeId {
  ___targetNodeId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self set_homeId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self set_nodeId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self set_groupIdx: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self set_targetNodeId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"RemoveAssociation_args"];
  if (___homeId_isset) {
    [outProtocol writeFieldBeginWithName: @"_homeId" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: ___homeId];
    [outProtocol writeFieldEnd];
  }
  if (___nodeId_isset) {
    [outProtocol writeFieldBeginWithName: @"_nodeId" type: TType_BYTE fieldID: 2];
    [outProtocol writeByte: ___nodeId];
    [outProtocol writeFieldEnd];
  }
  if (___groupIdx_isset) {
    [outProtocol writeFieldBeginWithName: @"_groupIdx" type: TType_BYTE fieldID: 3];
    [outProtocol writeByte: ___groupIdx];
    [outProtocol writeFieldEnd];
  }
  if (___targetNodeId_isset) {
    [outProtocol writeFieldBeginWithName: @"_targetNodeId" type: TType_BYTE fieldID: 4];
    [outProtocol writeByte: ___targetNodeId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RemoveAssociation_args("];
  [ms appendString: @"_homeId:"];
  [ms appendFormat: @"%i", ___homeId];
  [ms appendString: @",_nodeId:"];
  [ms appendFormat: @"%i", ___nodeId];
  [ms appendString: @",_groupIdx:"];
  [ms appendFormat: @"%i", ___groupIdx];
  [ms appendString: @",_targetNodeId:"];
  [ms appendFormat: @"%i", ___targetNodeId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveRemoveAssociation_result : NSObject <NSCoding> {
}

- (id) init;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

@end

@implementation OpenZWaveRemoveAssociation_result

- (id) init
{
  self = [super init];
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"RemoveAssociation_result"];

  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RemoveAssociation_result("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveResetController_args : NSObject <NSCoding> {
  int32_t ___homeId;

  BOOL ___homeId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=_homeId, setter=set_homeId:) int32_t _homeId;
#endif

- (id) init;
- (id) initWith_homeId: (int32_t) _homeId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (int32_t) _homeId;
- (void) set_homeId: (int32_t) _homeId;
#endif
- (BOOL) _homeIdIsSet;

@end

@implementation OpenZWaveResetController_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_homeId: (int32_t) _homeId
{
  self = [super init];
  ___homeId = _homeId;
  ___homeId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_homeId"])
  {
    ___homeId = [decoder decodeInt32ForKey: @"_homeId"];
    ___homeId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___homeId_isset)
  {
    [encoder encodeInt32: ___homeId forKey: @"_homeId"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (int32_t) _homeId {
  return ___homeId;
}

- (void) set_homeId: (int32_t) _homeId {
  ___homeId = _homeId;
  ___homeId_isset = YES;
}

- (BOOL) _homeIdIsSet {
  return ___homeId_isset;
}

- (void) unset_homeId {
  ___homeId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self set_homeId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ResetController_args"];
  if (___homeId_isset) {
    [outProtocol writeFieldBeginWithName: @"_homeId" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: ___homeId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ResetController_args("];
  [ms appendString: @"_homeId:"];
  [ms appendFormat: @"%i", ___homeId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveResetController_result : NSObject <NSCoding> {
}

- (id) init;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

@end

@implementation OpenZWaveResetController_result

- (id) init
{
  self = [super init];
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ResetController_result"];

  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ResetController_result("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveSoftReset_args : NSObject <NSCoding> {
  int32_t ___homeId;

  BOOL ___homeId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=_homeId, setter=set_homeId:) int32_t _homeId;
#endif

- (id) init;
- (id) initWith_homeId: (int32_t) _homeId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (int32_t) _homeId;
- (void) set_homeId: (int32_t) _homeId;
#endif
- (BOOL) _homeIdIsSet;

@end

@implementation OpenZWaveSoftReset_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_homeId: (int32_t) _homeId
{
  self = [super init];
  ___homeId = _homeId;
  ___homeId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_homeId"])
  {
    ___homeId = [decoder decodeInt32ForKey: @"_homeId"];
    ___homeId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___homeId_isset)
  {
    [encoder encodeInt32: ___homeId forKey: @"_homeId"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (int32_t) _homeId {
  return ___homeId;
}

- (void) set_homeId: (int32_t) _homeId {
  ___homeId = _homeId;
  ___homeId_isset = YES;
}

- (BOOL) _homeIdIsSet {
  return ___homeId_isset;
}

- (void) unset_homeId {
  ___homeId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self set_homeId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SoftReset_args"];
  if (___homeId_isset) {
    [outProtocol writeFieldBeginWithName: @"_homeId" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: ___homeId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SoftReset_args("];
  [ms appendString: @"_homeId:"];
  [ms appendFormat: @"%i", ___homeId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveSoftReset_result : NSObject <NSCoding> {
}

- (id) init;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

@end

@implementation OpenZWaveSoftReset_result

- (id) init
{
  self = [super init];
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SoftReset_result"];

  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SoftReset_result("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveBeginControllerCommand_args : NSObject <NSCoding> {
  int32_t ___homeId;
  int ___command;
  BOOL ___highPower;
  uint8_t ___nodeId;
  uint8_t ___arg;

  BOOL ___homeId_isset;
  BOOL ___command_isset;
  BOOL ___highPower_isset;
  BOOL ___nodeId_isset;
  BOOL ___arg_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=_homeId, setter=set_homeId:) int32_t _homeId;
@property (nonatomic, getter=_command, setter=set_command:) int _command;
@property (nonatomic, getter=_highPower, setter=set_highPower:) BOOL _highPower;
@property (nonatomic, getter=_nodeId, setter=set_nodeId:) uint8_t _nodeId;
@property (nonatomic, getter=_arg, setter=set_arg:) uint8_t _arg;
#endif

- (id) init;
- (id) initWith_homeId: (int32_t) _homeId _command: (int) _command _highPower: (BOOL) _highPower _nodeId: (uint8_t) _nodeId _arg: (uint8_t) _arg;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (int32_t) _homeId;
- (void) set_homeId: (int32_t) _homeId;
#endif
- (BOOL) _homeIdIsSet;

#if !__has_feature(objc_arc)
- (int) _command;
- (void) set_command: (int) _command;
#endif
- (BOOL) _commandIsSet;

#if !__has_feature(objc_arc)
- (BOOL) _highPower;
- (void) set_highPower: (BOOL) _highPower;
#endif
- (BOOL) _highPowerIsSet;

#if !__has_feature(objc_arc)
- (uint8_t) _nodeId;
- (void) set_nodeId: (uint8_t) _nodeId;
#endif
- (BOOL) _nodeIdIsSet;

#if !__has_feature(objc_arc)
- (uint8_t) _arg;
- (void) set_arg: (uint8_t) _arg;
#endif
- (BOOL) _argIsSet;

@end

@implementation OpenZWaveBeginControllerCommand_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_homeId: (int32_t) _homeId _command: (int) _command _highPower: (BOOL) _highPower _nodeId: (uint8_t) _nodeId _arg: (uint8_t) _arg
{
  self = [super init];
  ___homeId = _homeId;
  ___homeId_isset = YES;
  ___command = _command;
  ___command_isset = YES;
  ___highPower = _highPower;
  ___highPower_isset = YES;
  ___nodeId = _nodeId;
  ___nodeId_isset = YES;
  ___arg = _arg;
  ___arg_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_homeId"])
  {
    ___homeId = [decoder decodeInt32ForKey: @"_homeId"];
    ___homeId_isset = YES;
  }
  if ([decoder containsValueForKey: @"_command"])
  {
    ___command = [decoder decodeIntForKey: @"_command"];
    ___command_isset = YES;
  }
  if ([decoder containsValueForKey: @"_highPower"])
  {
    ___highPower = [decoder decodeBoolForKey: @"_highPower"];
    ___highPower_isset = YES;
  }
  if ([decoder containsValueForKey: @"_nodeId"])
  {
    ___nodeId = [decoder decodeIntForKey: @"_nodeId"];
    ___nodeId_isset = YES;
  }
  if ([decoder containsValueForKey: @"_arg"])
  {
    ___arg = [decoder decodeIntForKey: @"_arg"];
    ___arg_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___homeId_isset)
  {
    [encoder encodeInt32: ___homeId forKey: @"_homeId"];
  }
  if (___command_isset)
  {
    [encoder encodeInt: ___command forKey: @"_command"];
  }
  if (___highPower_isset)
  {
    [encoder encodeBool: ___highPower forKey: @"_highPower"];
  }
  if (___nodeId_isset)
  {
    [encoder encodeInt: ___nodeId forKey: @"_nodeId"];
  }
  if (___arg_isset)
  {
    [encoder encodeInt: ___arg forKey: @"_arg"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (int32_t) _homeId {
  return ___homeId;
}

- (void) set_homeId: (int32_t) _homeId {
  ___homeId = _homeId;
  ___homeId_isset = YES;
}

- (BOOL) _homeIdIsSet {
  return ___homeId_isset;
}

- (void) unset_homeId {
  ___homeId_isset = NO;
}

- (int) _command {
  return ___command;
}

- (void) set_command: (int) _command {
  ___command = _command;
  ___command_isset = YES;
}

- (BOOL) _commandIsSet {
  return ___command_isset;
}

- (void) unset_command {
  ___command_isset = NO;
}

- (BOOL) _highPower {
  return ___highPower;
}

- (void) set_highPower: (BOOL) _highPower {
  ___highPower = _highPower;
  ___highPower_isset = YES;
}

- (BOOL) _highPowerIsSet {
  return ___highPower_isset;
}

- (void) unset_highPower {
  ___highPower_isset = NO;
}

- (uint8_t) _nodeId {
  return ___nodeId;
}

- (void) set_nodeId: (uint8_t) _nodeId {
  ___nodeId = _nodeId;
  ___nodeId_isset = YES;
}

- (BOOL) _nodeIdIsSet {
  return ___nodeId_isset;
}

- (void) unset_nodeId {
  ___nodeId_isset = NO;
}

- (uint8_t) _arg {
  return ___arg;
}

- (void) set_arg: (uint8_t) _arg {
  ___arg = _arg;
  ___arg_isset = YES;
}

- (BOOL) _argIsSet {
  return ___arg_isset;
}

- (void) unset_arg {
  ___arg_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self set_homeId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self set_command: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self set_highPower: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self set_nodeId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self set_arg: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"BeginControllerCommand_args"];
  if (___homeId_isset) {
    [outProtocol writeFieldBeginWithName: @"_homeId" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: ___homeId];
    [outProtocol writeFieldEnd];
  }
  if (___command_isset) {
    [outProtocol writeFieldBeginWithName: @"_command" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: ___command];
    [outProtocol writeFieldEnd];
  }
  if (___highPower_isset) {
    [outProtocol writeFieldBeginWithName: @"_highPower" type: TType_BOOL fieldID: 3];
    [outProtocol writeBool: ___highPower];
    [outProtocol writeFieldEnd];
  }
  if (___nodeId_isset) {
    [outProtocol writeFieldBeginWithName: @"_nodeId" type: TType_BYTE fieldID: 4];
    [outProtocol writeByte: ___nodeId];
    [outProtocol writeFieldEnd];
  }
  if (___arg_isset) {
    [outProtocol writeFieldBeginWithName: @"_arg" type: TType_BYTE fieldID: 5];
    [outProtocol writeByte: ___arg];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BeginControllerCommand_args("];
  [ms appendString: @"_homeId:"];
  [ms appendFormat: @"%i", ___homeId];
  [ms appendString: @",_command:"];
  [ms appendFormat: @"%i", ___command];
  [ms appendString: @",_highPower:"];
  [ms appendFormat: @"%i", ___highPower];
  [ms appendString: @",_nodeId:"];
  [ms appendFormat: @"%i", ___nodeId];
  [ms appendString: @",_arg:"];
  [ms appendFormat: @"%i", ___arg];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveBeginControllerCommand_result : NSObject <NSCoding> {
  BOOL __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) BOOL success;
#endif

- (id) init;
- (id) initWithSuccess: (BOOL) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (BOOL) success;
- (void) setSuccess: (BOOL) success;
#endif
- (BOOL) successIsSet;

@end

@implementation OpenZWaveBeginControllerCommand_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (BOOL) success
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeBoolForKey: @"success"];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeBool: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (BOOL) success {
  return __success;
}

- (void) setSuccess: (BOOL) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"BeginControllerCommand_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
    [outProtocol writeBool: __success];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BeginControllerCommand_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveCancelControllerCommand_args : NSObject <NSCoding> {
  int32_t ___homeId;

  BOOL ___homeId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=_homeId, setter=set_homeId:) int32_t _homeId;
#endif

- (id) init;
- (id) initWith_homeId: (int32_t) _homeId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (int32_t) _homeId;
- (void) set_homeId: (int32_t) _homeId;
#endif
- (BOOL) _homeIdIsSet;

@end

@implementation OpenZWaveCancelControllerCommand_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_homeId: (int32_t) _homeId
{
  self = [super init];
  ___homeId = _homeId;
  ___homeId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_homeId"])
  {
    ___homeId = [decoder decodeInt32ForKey: @"_homeId"];
    ___homeId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___homeId_isset)
  {
    [encoder encodeInt32: ___homeId forKey: @"_homeId"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (int32_t) _homeId {
  return ___homeId;
}

- (void) set_homeId: (int32_t) _homeId {
  ___homeId = _homeId;
  ___homeId_isset = YES;
}

- (BOOL) _homeIdIsSet {
  return ___homeId_isset;
}

- (void) unset_homeId {
  ___homeId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self set_homeId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"CancelControllerCommand_args"];
  if (___homeId_isset) {
    [outProtocol writeFieldBeginWithName: @"_homeId" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: ___homeId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"CancelControllerCommand_args("];
  [ms appendString: @"_homeId:"];
  [ms appendFormat: @"%i", ___homeId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveCancelControllerCommand_result : NSObject <NSCoding> {
  BOOL __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) BOOL success;
#endif

- (id) init;
- (id) initWithSuccess: (BOOL) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (BOOL) success;
- (void) setSuccess: (BOOL) success;
#endif
- (BOOL) successIsSet;

@end

@implementation OpenZWaveCancelControllerCommand_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (BOOL) success
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeBoolForKey: @"success"];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeBool: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (BOOL) success {
  return __success;
}

- (void) setSuccess: (BOOL) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"CancelControllerCommand_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
    [outProtocol writeBool: __success];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"CancelControllerCommand_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveGetNumScenes_args : NSObject <NSCoding> {
}

- (id) init;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

@end

@implementation OpenZWaveGetNumScenes_args

- (id) init
{
  self = [super init];
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetNumScenes_args"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetNumScenes_args("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveGetNumScenes_result : NSObject <NSCoding> {
  uint8_t __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) uint8_t success;
#endif

- (id) init;
- (id) initWithSuccess: (uint8_t) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (uint8_t) success;
- (void) setSuccess: (uint8_t) success;
#endif
- (BOOL) successIsSet;

@end

@implementation OpenZWaveGetNumScenes_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (uint8_t) success
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeIntForKey: @"success"];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeInt: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (uint8_t) success {
  return __success;
}

- (void) setSuccess: (uint8_t) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetNumScenes_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_BYTE fieldID: 0];
    [outProtocol writeByte: __success];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetNumScenes_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveGetAllScenes_args : NSObject <NSCoding> {
}

- (id) init;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

@end

@implementation OpenZWaveGetAllScenes_args

- (id) init
{
  self = [super init];
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetAllScenes_args"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetAllScenes_args("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveGetAllScenes_result : NSObject <NSCoding> {
  OpenZWaveGetAllScenesReturnStruct * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) OpenZWaveGetAllScenesReturnStruct * success;
#endif

- (id) init;
- (id) initWithSuccess: (OpenZWaveGetAllScenesReturnStruct *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (OpenZWaveGetAllScenesReturnStruct *) success;
- (void) setSuccess: (OpenZWaveGetAllScenesReturnStruct *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation OpenZWaveGetAllScenes_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (OpenZWaveGetAllScenesReturnStruct *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (OpenZWaveGetAllScenesReturnStruct *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (OpenZWaveGetAllScenesReturnStruct *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          OpenZWaveGetAllScenesReturnStruct *fieldValue = [[OpenZWaveGetAllScenesReturnStruct alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetAllScenes_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetAllScenes_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveCreateScene_args : NSObject <NSCoding> {
}

- (id) init;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

@end

@implementation OpenZWaveCreateScene_args

- (id) init
{
  self = [super init];
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"CreateScene_args"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"CreateScene_args("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveCreateScene_result : NSObject <NSCoding> {
  uint8_t __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) uint8_t success;
#endif

- (id) init;
- (id) initWithSuccess: (uint8_t) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (uint8_t) success;
- (void) setSuccess: (uint8_t) success;
#endif
- (BOOL) successIsSet;

@end

@implementation OpenZWaveCreateScene_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (uint8_t) success
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeIntForKey: @"success"];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeInt: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (uint8_t) success {
  return __success;
}

- (void) setSuccess: (uint8_t) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"CreateScene_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_BYTE fieldID: 0];
    [outProtocol writeByte: __success];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"CreateScene_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveRemoveScene_args : NSObject <NSCoding> {
  uint8_t ___sceneId;

  BOOL ___sceneId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=_sceneId, setter=set_sceneId:) uint8_t _sceneId;
#endif

- (id) init;
- (id) initWith_sceneId: (uint8_t) _sceneId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (uint8_t) _sceneId;
- (void) set_sceneId: (uint8_t) _sceneId;
#endif
- (BOOL) _sceneIdIsSet;

@end

@implementation OpenZWaveRemoveScene_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_sceneId: (uint8_t) _sceneId
{
  self = [super init];
  ___sceneId = _sceneId;
  ___sceneId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_sceneId"])
  {
    ___sceneId = [decoder decodeIntForKey: @"_sceneId"];
    ___sceneId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___sceneId_isset)
  {
    [encoder encodeInt: ___sceneId forKey: @"_sceneId"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (uint8_t) _sceneId {
  return ___sceneId;
}

- (void) set_sceneId: (uint8_t) _sceneId {
  ___sceneId = _sceneId;
  ___sceneId_isset = YES;
}

- (BOOL) _sceneIdIsSet {
  return ___sceneId_isset;
}

- (void) unset_sceneId {
  ___sceneId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self set_sceneId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"RemoveScene_args"];
  if (___sceneId_isset) {
    [outProtocol writeFieldBeginWithName: @"_sceneId" type: TType_BYTE fieldID: 1];
    [outProtocol writeByte: ___sceneId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RemoveScene_args("];
  [ms appendString: @"_sceneId:"];
  [ms appendFormat: @"%i", ___sceneId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveRemoveScene_result : NSObject <NSCoding> {
  BOOL __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) BOOL success;
#endif

- (id) init;
- (id) initWithSuccess: (BOOL) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (BOOL) success;
- (void) setSuccess: (BOOL) success;
#endif
- (BOOL) successIsSet;

@end

@implementation OpenZWaveRemoveScene_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (BOOL) success
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeBoolForKey: @"success"];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeBool: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (BOOL) success {
  return __success;
}

- (void) setSuccess: (BOOL) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"RemoveScene_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
    [outProtocol writeBool: __success];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RemoveScene_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveAddSceneValue_Bool_args : NSObject <NSCoding> {
  uint8_t ___sceneId;
  OpenZWaveRemoteValueID * ___valueId;
  BOOL ___value;

  BOOL ___sceneId_isset;
  BOOL ___valueId_isset;
  BOOL ___value_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=_sceneId, setter=set_sceneId:) uint8_t _sceneId;
@property (nonatomic, retain, getter=_valueId, setter=set_valueId:) OpenZWaveRemoteValueID * _valueId;
@property (nonatomic, getter=_value, setter=set_value:) BOOL _value;
#endif

- (id) init;
- (id) initWith_sceneId: (uint8_t) _sceneId _valueId: (OpenZWaveRemoteValueID *) _valueId _value: (BOOL) _value;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (uint8_t) _sceneId;
- (void) set_sceneId: (uint8_t) _sceneId;
#endif
- (BOOL) _sceneIdIsSet;

#if !__has_feature(objc_arc)
- (OpenZWaveRemoteValueID *) _valueId;
- (void) set_valueId: (OpenZWaveRemoteValueID *) _valueId;
#endif
- (BOOL) _valueIdIsSet;

#if !__has_feature(objc_arc)
- (BOOL) _value;
- (void) set_value: (BOOL) _value;
#endif
- (BOOL) _valueIsSet;

@end

@implementation OpenZWaveAddSceneValue_Bool_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_sceneId: (uint8_t) _sceneId _valueId: (OpenZWaveRemoteValueID *) _valueId _value: (BOOL) _value
{
  self = [super init];
  ___sceneId = _sceneId;
  ___sceneId_isset = YES;
  ___valueId = [_valueId retain_stub];
  ___valueId_isset = YES;
  ___value = _value;
  ___value_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_sceneId"])
  {
    ___sceneId = [decoder decodeIntForKey: @"_sceneId"];
    ___sceneId_isset = YES;
  }
  if ([decoder containsValueForKey: @"_valueId"])
  {
    ___valueId = [[decoder decodeObjectForKey: @"_valueId"] retain_stub];
    ___valueId_isset = YES;
  }
  if ([decoder containsValueForKey: @"_value"])
  {
    ___value = [decoder decodeBoolForKey: @"_value"];
    ___value_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___sceneId_isset)
  {
    [encoder encodeInt: ___sceneId forKey: @"_sceneId"];
  }
  if (___valueId_isset)
  {
    [encoder encodeObject: ___valueId forKey: @"_valueId"];
  }
  if (___value_isset)
  {
    [encoder encodeBool: ___value forKey: @"_value"];
  }
}

- (void) dealloc
{
  [___valueId release_stub];
  [super dealloc_stub];
}

- (uint8_t) _sceneId {
  return ___sceneId;
}

- (void) set_sceneId: (uint8_t) _sceneId {
  ___sceneId = _sceneId;
  ___sceneId_isset = YES;
}

- (BOOL) _sceneIdIsSet {
  return ___sceneId_isset;
}

- (void) unset_sceneId {
  ___sceneId_isset = NO;
}

- (OpenZWaveRemoteValueID *) _valueId {
  return [[___valueId retain_stub] autorelease_stub];
}

- (void) set_valueId: (OpenZWaveRemoteValueID *) _valueId {
  [_valueId retain_stub];
  [___valueId release_stub];
  ___valueId = _valueId;
  ___valueId_isset = YES;
}

- (BOOL) _valueIdIsSet {
  return ___valueId_isset;
}

- (void) unset_valueId {
  [___valueId release_stub];
  ___valueId = nil;
  ___valueId_isset = NO;
}

- (BOOL) _value {
  return ___value;
}

- (void) set_value: (BOOL) _value {
  ___value = _value;
  ___value_isset = YES;
}

- (BOOL) _valueIsSet {
  return ___value_isset;
}

- (void) unset_value {
  ___value_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self set_sceneId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          OpenZWaveRemoteValueID *fieldValue = [[OpenZWaveRemoteValueID alloc] init];
          [fieldValue read: inProtocol];
          [self set_valueId: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self set_value: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"AddSceneValue_Bool_args"];
  if (___sceneId_isset) {
    [outProtocol writeFieldBeginWithName: @"_sceneId" type: TType_BYTE fieldID: 1];
    [outProtocol writeByte: ___sceneId];
    [outProtocol writeFieldEnd];
  }
  if (___valueId_isset) {
    if (___valueId != nil) {
      [outProtocol writeFieldBeginWithName: @"_valueId" type: TType_STRUCT fieldID: 2];
      [___valueId write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (___value_isset) {
    [outProtocol writeFieldBeginWithName: @"_value" type: TType_BOOL fieldID: 3];
    [outProtocol writeBool: ___value];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AddSceneValue_Bool_args("];
  [ms appendString: @"_sceneId:"];
  [ms appendFormat: @"%i", ___sceneId];
  [ms appendString: @",_valueId:"];
  [ms appendFormat: @"%@", ___valueId];
  [ms appendString: @",_value:"];
  [ms appendFormat: @"%i", ___value];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveAddSceneValue_Bool_result : NSObject <NSCoding> {
  BOOL __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) BOOL success;
#endif

- (id) init;
- (id) initWithSuccess: (BOOL) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (BOOL) success;
- (void) setSuccess: (BOOL) success;
#endif
- (BOOL) successIsSet;

@end

@implementation OpenZWaveAddSceneValue_Bool_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (BOOL) success
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeBoolForKey: @"success"];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeBool: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (BOOL) success {
  return __success;
}

- (void) setSuccess: (BOOL) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"AddSceneValue_Bool_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
    [outProtocol writeBool: __success];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AddSceneValue_Bool_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveAddSceneValue_Uint8_args : NSObject <NSCoding> {
  uint8_t ___sceneId;
  OpenZWaveRemoteValueID * ___valueId;
  uint8_t ___value;

  BOOL ___sceneId_isset;
  BOOL ___valueId_isset;
  BOOL ___value_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=_sceneId, setter=set_sceneId:) uint8_t _sceneId;
@property (nonatomic, retain, getter=_valueId, setter=set_valueId:) OpenZWaveRemoteValueID * _valueId;
@property (nonatomic, getter=_value, setter=set_value:) uint8_t _value;
#endif

- (id) init;
- (id) initWith_sceneId: (uint8_t) _sceneId _valueId: (OpenZWaveRemoteValueID *) _valueId _value: (uint8_t) _value;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (uint8_t) _sceneId;
- (void) set_sceneId: (uint8_t) _sceneId;
#endif
- (BOOL) _sceneIdIsSet;

#if !__has_feature(objc_arc)
- (OpenZWaveRemoteValueID *) _valueId;
- (void) set_valueId: (OpenZWaveRemoteValueID *) _valueId;
#endif
- (BOOL) _valueIdIsSet;

#if !__has_feature(objc_arc)
- (uint8_t) _value;
- (void) set_value: (uint8_t) _value;
#endif
- (BOOL) _valueIsSet;

@end

@implementation OpenZWaveAddSceneValue_Uint8_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_sceneId: (uint8_t) _sceneId _valueId: (OpenZWaveRemoteValueID *) _valueId _value: (uint8_t) _value
{
  self = [super init];
  ___sceneId = _sceneId;
  ___sceneId_isset = YES;
  ___valueId = [_valueId retain_stub];
  ___valueId_isset = YES;
  ___value = _value;
  ___value_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_sceneId"])
  {
    ___sceneId = [decoder decodeIntForKey: @"_sceneId"];
    ___sceneId_isset = YES;
  }
  if ([decoder containsValueForKey: @"_valueId"])
  {
    ___valueId = [[decoder decodeObjectForKey: @"_valueId"] retain_stub];
    ___valueId_isset = YES;
  }
  if ([decoder containsValueForKey: @"_value"])
  {
    ___value = [decoder decodeIntForKey: @"_value"];
    ___value_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___sceneId_isset)
  {
    [encoder encodeInt: ___sceneId forKey: @"_sceneId"];
  }
  if (___valueId_isset)
  {
    [encoder encodeObject: ___valueId forKey: @"_valueId"];
  }
  if (___value_isset)
  {
    [encoder encodeInt: ___value forKey: @"_value"];
  }
}

- (void) dealloc
{
  [___valueId release_stub];
  [super dealloc_stub];
}

- (uint8_t) _sceneId {
  return ___sceneId;
}

- (void) set_sceneId: (uint8_t) _sceneId {
  ___sceneId = _sceneId;
  ___sceneId_isset = YES;
}

- (BOOL) _sceneIdIsSet {
  return ___sceneId_isset;
}

- (void) unset_sceneId {
  ___sceneId_isset = NO;
}

- (OpenZWaveRemoteValueID *) _valueId {
  return [[___valueId retain_stub] autorelease_stub];
}

- (void) set_valueId: (OpenZWaveRemoteValueID *) _valueId {
  [_valueId retain_stub];
  [___valueId release_stub];
  ___valueId = _valueId;
  ___valueId_isset = YES;
}

- (BOOL) _valueIdIsSet {
  return ___valueId_isset;
}

- (void) unset_valueId {
  [___valueId release_stub];
  ___valueId = nil;
  ___valueId_isset = NO;
}

- (uint8_t) _value {
  return ___value;
}

- (void) set_value: (uint8_t) _value {
  ___value = _value;
  ___value_isset = YES;
}

- (BOOL) _valueIsSet {
  return ___value_isset;
}

- (void) unset_value {
  ___value_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self set_sceneId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          OpenZWaveRemoteValueID *fieldValue = [[OpenZWaveRemoteValueID alloc] init];
          [fieldValue read: inProtocol];
          [self set_valueId: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self set_value: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"AddSceneValue_Uint8_args"];
  if (___sceneId_isset) {
    [outProtocol writeFieldBeginWithName: @"_sceneId" type: TType_BYTE fieldID: 1];
    [outProtocol writeByte: ___sceneId];
    [outProtocol writeFieldEnd];
  }
  if (___valueId_isset) {
    if (___valueId != nil) {
      [outProtocol writeFieldBeginWithName: @"_valueId" type: TType_STRUCT fieldID: 2];
      [___valueId write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (___value_isset) {
    [outProtocol writeFieldBeginWithName: @"_value" type: TType_BYTE fieldID: 3];
    [outProtocol writeByte: ___value];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AddSceneValue_Uint8_args("];
  [ms appendString: @"_sceneId:"];
  [ms appendFormat: @"%i", ___sceneId];
  [ms appendString: @",_valueId:"];
  [ms appendFormat: @"%@", ___valueId];
  [ms appendString: @",_value:"];
  [ms appendFormat: @"%i", ___value];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveAddSceneValue_Uint8_result : NSObject <NSCoding> {
  BOOL __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) BOOL success;
#endif

- (id) init;
- (id) initWithSuccess: (BOOL) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (BOOL) success;
- (void) setSuccess: (BOOL) success;
#endif
- (BOOL) successIsSet;

@end

@implementation OpenZWaveAddSceneValue_Uint8_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (BOOL) success
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeBoolForKey: @"success"];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeBool: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (BOOL) success {
  return __success;
}

- (void) setSuccess: (BOOL) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"AddSceneValue_Uint8_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
    [outProtocol writeBool: __success];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AddSceneValue_Uint8_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveAddSceneValue_Float_args : NSObject <NSCoding> {
  uint8_t ___sceneId;
  OpenZWaveRemoteValueID * ___valueId;
  double ___value;

  BOOL ___sceneId_isset;
  BOOL ___valueId_isset;
  BOOL ___value_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=_sceneId, setter=set_sceneId:) uint8_t _sceneId;
@property (nonatomic, retain, getter=_valueId, setter=set_valueId:) OpenZWaveRemoteValueID * _valueId;
@property (nonatomic, getter=_value, setter=set_value:) double _value;
#endif

- (id) init;
- (id) initWith_sceneId: (uint8_t) _sceneId _valueId: (OpenZWaveRemoteValueID *) _valueId _value: (double) _value;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (uint8_t) _sceneId;
- (void) set_sceneId: (uint8_t) _sceneId;
#endif
- (BOOL) _sceneIdIsSet;

#if !__has_feature(objc_arc)
- (OpenZWaveRemoteValueID *) _valueId;
- (void) set_valueId: (OpenZWaveRemoteValueID *) _valueId;
#endif
- (BOOL) _valueIdIsSet;

#if !__has_feature(objc_arc)
- (double) _value;
- (void) set_value: (double) _value;
#endif
- (BOOL) _valueIsSet;

@end

@implementation OpenZWaveAddSceneValue_Float_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_sceneId: (uint8_t) _sceneId _valueId: (OpenZWaveRemoteValueID *) _valueId _value: (double) _value
{
  self = [super init];
  ___sceneId = _sceneId;
  ___sceneId_isset = YES;
  ___valueId = [_valueId retain_stub];
  ___valueId_isset = YES;
  ___value = _value;
  ___value_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_sceneId"])
  {
    ___sceneId = [decoder decodeIntForKey: @"_sceneId"];
    ___sceneId_isset = YES;
  }
  if ([decoder containsValueForKey: @"_valueId"])
  {
    ___valueId = [[decoder decodeObjectForKey: @"_valueId"] retain_stub];
    ___valueId_isset = YES;
  }
  if ([decoder containsValueForKey: @"_value"])
  {
    ___value = [decoder decodeDoubleForKey: @"_value"];
    ___value_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___sceneId_isset)
  {
    [encoder encodeInt: ___sceneId forKey: @"_sceneId"];
  }
  if (___valueId_isset)
  {
    [encoder encodeObject: ___valueId forKey: @"_valueId"];
  }
  if (___value_isset)
  {
    [encoder encodeDouble: ___value forKey: @"_value"];
  }
}

- (void) dealloc
{
  [___valueId release_stub];
  [super dealloc_stub];
}

- (uint8_t) _sceneId {
  return ___sceneId;
}

- (void) set_sceneId: (uint8_t) _sceneId {
  ___sceneId = _sceneId;
  ___sceneId_isset = YES;
}

- (BOOL) _sceneIdIsSet {
  return ___sceneId_isset;
}

- (void) unset_sceneId {
  ___sceneId_isset = NO;
}

- (OpenZWaveRemoteValueID *) _valueId {
  return [[___valueId retain_stub] autorelease_stub];
}

- (void) set_valueId: (OpenZWaveRemoteValueID *) _valueId {
  [_valueId retain_stub];
  [___valueId release_stub];
  ___valueId = _valueId;
  ___valueId_isset = YES;
}

- (BOOL) _valueIdIsSet {
  return ___valueId_isset;
}

- (void) unset_valueId {
  [___valueId release_stub];
  ___valueId = nil;
  ___valueId_isset = NO;
}

- (double) _value {
  return ___value;
}

- (void) set_value: (double) _value {
  ___value = _value;
  ___value_isset = YES;
}

- (BOOL) _valueIsSet {
  return ___value_isset;
}

- (void) unset_value {
  ___value_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self set_sceneId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          OpenZWaveRemoteValueID *fieldValue = [[OpenZWaveRemoteValueID alloc] init];
          [fieldValue read: inProtocol];
          [self set_valueId: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self set_value: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"AddSceneValue_Float_args"];
  if (___sceneId_isset) {
    [outProtocol writeFieldBeginWithName: @"_sceneId" type: TType_BYTE fieldID: 1];
    [outProtocol writeByte: ___sceneId];
    [outProtocol writeFieldEnd];
  }
  if (___valueId_isset) {
    if (___valueId != nil) {
      [outProtocol writeFieldBeginWithName: @"_valueId" type: TType_STRUCT fieldID: 2];
      [___valueId write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (___value_isset) {
    [outProtocol writeFieldBeginWithName: @"_value" type: TType_DOUBLE fieldID: 3];
    [outProtocol writeDouble: ___value];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AddSceneValue_Float_args("];
  [ms appendString: @"_sceneId:"];
  [ms appendFormat: @"%i", ___sceneId];
  [ms appendString: @",_valueId:"];
  [ms appendFormat: @"%@", ___valueId];
  [ms appendString: @",_value:"];
  [ms appendFormat: @"%f", ___value];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveAddSceneValue_Float_result : NSObject <NSCoding> {
  BOOL __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) BOOL success;
#endif

- (id) init;
- (id) initWithSuccess: (BOOL) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (BOOL) success;
- (void) setSuccess: (BOOL) success;
#endif
- (BOOL) successIsSet;

@end

@implementation OpenZWaveAddSceneValue_Float_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (BOOL) success
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeBoolForKey: @"success"];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeBool: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (BOOL) success {
  return __success;
}

- (void) setSuccess: (BOOL) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"AddSceneValue_Float_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
    [outProtocol writeBool: __success];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AddSceneValue_Float_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveAddSceneValue_Int32_args : NSObject <NSCoding> {
  uint8_t ___sceneId;
  OpenZWaveRemoteValueID * ___valueId;
  int32_t ___value;

  BOOL ___sceneId_isset;
  BOOL ___valueId_isset;
  BOOL ___value_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=_sceneId, setter=set_sceneId:) uint8_t _sceneId;
@property (nonatomic, retain, getter=_valueId, setter=set_valueId:) OpenZWaveRemoteValueID * _valueId;
@property (nonatomic, getter=_value, setter=set_value:) int32_t _value;
#endif

- (id) init;
- (id) initWith_sceneId: (uint8_t) _sceneId _valueId: (OpenZWaveRemoteValueID *) _valueId _value: (int32_t) _value;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (uint8_t) _sceneId;
- (void) set_sceneId: (uint8_t) _sceneId;
#endif
- (BOOL) _sceneIdIsSet;

#if !__has_feature(objc_arc)
- (OpenZWaveRemoteValueID *) _valueId;
- (void) set_valueId: (OpenZWaveRemoteValueID *) _valueId;
#endif
- (BOOL) _valueIdIsSet;

#if !__has_feature(objc_arc)
- (int32_t) _value;
- (void) set_value: (int32_t) _value;
#endif
- (BOOL) _valueIsSet;

@end

@implementation OpenZWaveAddSceneValue_Int32_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_sceneId: (uint8_t) _sceneId _valueId: (OpenZWaveRemoteValueID *) _valueId _value: (int32_t) _value
{
  self = [super init];
  ___sceneId = _sceneId;
  ___sceneId_isset = YES;
  ___valueId = [_valueId retain_stub];
  ___valueId_isset = YES;
  ___value = _value;
  ___value_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_sceneId"])
  {
    ___sceneId = [decoder decodeIntForKey: @"_sceneId"];
    ___sceneId_isset = YES;
  }
  if ([decoder containsValueForKey: @"_valueId"])
  {
    ___valueId = [[decoder decodeObjectForKey: @"_valueId"] retain_stub];
    ___valueId_isset = YES;
  }
  if ([decoder containsValueForKey: @"_value"])
  {
    ___value = [decoder decodeInt32ForKey: @"_value"];
    ___value_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___sceneId_isset)
  {
    [encoder encodeInt: ___sceneId forKey: @"_sceneId"];
  }
  if (___valueId_isset)
  {
    [encoder encodeObject: ___valueId forKey: @"_valueId"];
  }
  if (___value_isset)
  {
    [encoder encodeInt32: ___value forKey: @"_value"];
  }
}

- (void) dealloc
{
  [___valueId release_stub];
  [super dealloc_stub];
}

- (uint8_t) _sceneId {
  return ___sceneId;
}

- (void) set_sceneId: (uint8_t) _sceneId {
  ___sceneId = _sceneId;
  ___sceneId_isset = YES;
}

- (BOOL) _sceneIdIsSet {
  return ___sceneId_isset;
}

- (void) unset_sceneId {
  ___sceneId_isset = NO;
}

- (OpenZWaveRemoteValueID *) _valueId {
  return [[___valueId retain_stub] autorelease_stub];
}

- (void) set_valueId: (OpenZWaveRemoteValueID *) _valueId {
  [_valueId retain_stub];
  [___valueId release_stub];
  ___valueId = _valueId;
  ___valueId_isset = YES;
}

- (BOOL) _valueIdIsSet {
  return ___valueId_isset;
}

- (void) unset_valueId {
  [___valueId release_stub];
  ___valueId = nil;
  ___valueId_isset = NO;
}

- (int32_t) _value {
  return ___value;
}

- (void) set_value: (int32_t) _value {
  ___value = _value;
  ___value_isset = YES;
}

- (BOOL) _valueIsSet {
  return ___value_isset;
}

- (void) unset_value {
  ___value_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self set_sceneId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          OpenZWaveRemoteValueID *fieldValue = [[OpenZWaveRemoteValueID alloc] init];
          [fieldValue read: inProtocol];
          [self set_valueId: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self set_value: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"AddSceneValue_Int32_args"];
  if (___sceneId_isset) {
    [outProtocol writeFieldBeginWithName: @"_sceneId" type: TType_BYTE fieldID: 1];
    [outProtocol writeByte: ___sceneId];
    [outProtocol writeFieldEnd];
  }
  if (___valueId_isset) {
    if (___valueId != nil) {
      [outProtocol writeFieldBeginWithName: @"_valueId" type: TType_STRUCT fieldID: 2];
      [___valueId write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (___value_isset) {
    [outProtocol writeFieldBeginWithName: @"_value" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: ___value];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AddSceneValue_Int32_args("];
  [ms appendString: @"_sceneId:"];
  [ms appendFormat: @"%i", ___sceneId];
  [ms appendString: @",_valueId:"];
  [ms appendFormat: @"%@", ___valueId];
  [ms appendString: @",_value:"];
  [ms appendFormat: @"%i", ___value];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveAddSceneValue_Int32_result : NSObject <NSCoding> {
  BOOL __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) BOOL success;
#endif

- (id) init;
- (id) initWithSuccess: (BOOL) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (BOOL) success;
- (void) setSuccess: (BOOL) success;
#endif
- (BOOL) successIsSet;

@end

@implementation OpenZWaveAddSceneValue_Int32_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (BOOL) success
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeBoolForKey: @"success"];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeBool: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (BOOL) success {
  return __success;
}

- (void) setSuccess: (BOOL) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"AddSceneValue_Int32_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
    [outProtocol writeBool: __success];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AddSceneValue_Int32_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveAddSceneValue_Int16_args : NSObject <NSCoding> {
  uint8_t ___sceneId;
  OpenZWaveRemoteValueID * ___valueId;
  int16_t ___value;

  BOOL ___sceneId_isset;
  BOOL ___valueId_isset;
  BOOL ___value_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=_sceneId, setter=set_sceneId:) uint8_t _sceneId;
@property (nonatomic, retain, getter=_valueId, setter=set_valueId:) OpenZWaveRemoteValueID * _valueId;
@property (nonatomic, getter=_value, setter=set_value:) int16_t _value;
#endif

- (id) init;
- (id) initWith_sceneId: (uint8_t) _sceneId _valueId: (OpenZWaveRemoteValueID *) _valueId _value: (int16_t) _value;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (uint8_t) _sceneId;
- (void) set_sceneId: (uint8_t) _sceneId;
#endif
- (BOOL) _sceneIdIsSet;

#if !__has_feature(objc_arc)
- (OpenZWaveRemoteValueID *) _valueId;
- (void) set_valueId: (OpenZWaveRemoteValueID *) _valueId;
#endif
- (BOOL) _valueIdIsSet;

#if !__has_feature(objc_arc)
- (int16_t) _value;
- (void) set_value: (int16_t) _value;
#endif
- (BOOL) _valueIsSet;

@end

@implementation OpenZWaveAddSceneValue_Int16_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_sceneId: (uint8_t) _sceneId _valueId: (OpenZWaveRemoteValueID *) _valueId _value: (int16_t) _value
{
  self = [super init];
  ___sceneId = _sceneId;
  ___sceneId_isset = YES;
  ___valueId = [_valueId retain_stub];
  ___valueId_isset = YES;
  ___value = _value;
  ___value_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_sceneId"])
  {
    ___sceneId = [decoder decodeIntForKey: @"_sceneId"];
    ___sceneId_isset = YES;
  }
  if ([decoder containsValueForKey: @"_valueId"])
  {
    ___valueId = [[decoder decodeObjectForKey: @"_valueId"] retain_stub];
    ___valueId_isset = YES;
  }
  if ([decoder containsValueForKey: @"_value"])
  {
    ___value = [decoder decodeIntForKey: @"_value"];
    ___value_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___sceneId_isset)
  {
    [encoder encodeInt: ___sceneId forKey: @"_sceneId"];
  }
  if (___valueId_isset)
  {
    [encoder encodeObject: ___valueId forKey: @"_valueId"];
  }
  if (___value_isset)
  {
    [encoder encodeInt: ___value forKey: @"_value"];
  }
}

- (void) dealloc
{
  [___valueId release_stub];
  [super dealloc_stub];
}

- (uint8_t) _sceneId {
  return ___sceneId;
}

- (void) set_sceneId: (uint8_t) _sceneId {
  ___sceneId = _sceneId;
  ___sceneId_isset = YES;
}

- (BOOL) _sceneIdIsSet {
  return ___sceneId_isset;
}

- (void) unset_sceneId {
  ___sceneId_isset = NO;
}

- (OpenZWaveRemoteValueID *) _valueId {
  return [[___valueId retain_stub] autorelease_stub];
}

- (void) set_valueId: (OpenZWaveRemoteValueID *) _valueId {
  [_valueId retain_stub];
  [___valueId release_stub];
  ___valueId = _valueId;
  ___valueId_isset = YES;
}

- (BOOL) _valueIdIsSet {
  return ___valueId_isset;
}

- (void) unset_valueId {
  [___valueId release_stub];
  ___valueId = nil;
  ___valueId_isset = NO;
}

- (int16_t) _value {
  return ___value;
}

- (void) set_value: (int16_t) _value {
  ___value = _value;
  ___value_isset = YES;
}

- (BOOL) _valueIsSet {
  return ___value_isset;
}

- (void) unset_value {
  ___value_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self set_sceneId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          OpenZWaveRemoteValueID *fieldValue = [[OpenZWaveRemoteValueID alloc] init];
          [fieldValue read: inProtocol];
          [self set_valueId: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I16) {
          int16_t fieldValue = [inProtocol readI16];
          [self set_value: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"AddSceneValue_Int16_args"];
  if (___sceneId_isset) {
    [outProtocol writeFieldBeginWithName: @"_sceneId" type: TType_BYTE fieldID: 1];
    [outProtocol writeByte: ___sceneId];
    [outProtocol writeFieldEnd];
  }
  if (___valueId_isset) {
    if (___valueId != nil) {
      [outProtocol writeFieldBeginWithName: @"_valueId" type: TType_STRUCT fieldID: 2];
      [___valueId write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (___value_isset) {
    [outProtocol writeFieldBeginWithName: @"_value" type: TType_I16 fieldID: 3];
    [outProtocol writeI16: ___value];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AddSceneValue_Int16_args("];
  [ms appendString: @"_sceneId:"];
  [ms appendFormat: @"%i", ___sceneId];
  [ms appendString: @",_valueId:"];
  [ms appendFormat: @"%@", ___valueId];
  [ms appendString: @",_value:"];
  [ms appendFormat: @"%hi", ___value];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveAddSceneValue_Int16_result : NSObject <NSCoding> {
  BOOL __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) BOOL success;
#endif

- (id) init;
- (id) initWithSuccess: (BOOL) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (BOOL) success;
- (void) setSuccess: (BOOL) success;
#endif
- (BOOL) successIsSet;

@end

@implementation OpenZWaveAddSceneValue_Int16_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (BOOL) success
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeBoolForKey: @"success"];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeBool: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (BOOL) success {
  return __success;
}

- (void) setSuccess: (BOOL) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"AddSceneValue_Int16_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
    [outProtocol writeBool: __success];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AddSceneValue_Int16_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveAddSceneValue_String_args : NSObject <NSCoding> {
  uint8_t ___sceneId;
  OpenZWaveRemoteValueID * ___valueId;
  NSString * ___value;

  BOOL ___sceneId_isset;
  BOOL ___valueId_isset;
  BOOL ___value_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=_sceneId, setter=set_sceneId:) uint8_t _sceneId;
@property (nonatomic, retain, getter=_valueId, setter=set_valueId:) OpenZWaveRemoteValueID * _valueId;
@property (nonatomic, retain, getter=_value, setter=set_value:) NSString * _value;
#endif

- (id) init;
- (id) initWith_sceneId: (uint8_t) _sceneId _valueId: (OpenZWaveRemoteValueID *) _valueId _value: (NSString *) _value;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (uint8_t) _sceneId;
- (void) set_sceneId: (uint8_t) _sceneId;
#endif
- (BOOL) _sceneIdIsSet;

#if !__has_feature(objc_arc)
- (OpenZWaveRemoteValueID *) _valueId;
- (void) set_valueId: (OpenZWaveRemoteValueID *) _valueId;
#endif
- (BOOL) _valueIdIsSet;

#if !__has_feature(objc_arc)
- (NSString *) _value;
- (void) set_value: (NSString *) _value;
#endif
- (BOOL) _valueIsSet;

@end

@implementation OpenZWaveAddSceneValue_String_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_sceneId: (uint8_t) _sceneId _valueId: (OpenZWaveRemoteValueID *) _valueId _value: (NSString *) _value
{
  self = [super init];
  ___sceneId = _sceneId;
  ___sceneId_isset = YES;
  ___valueId = [_valueId retain_stub];
  ___valueId_isset = YES;
  ___value = [_value retain_stub];
  ___value_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_sceneId"])
  {
    ___sceneId = [decoder decodeIntForKey: @"_sceneId"];
    ___sceneId_isset = YES;
  }
  if ([decoder containsValueForKey: @"_valueId"])
  {
    ___valueId = [[decoder decodeObjectForKey: @"_valueId"] retain_stub];
    ___valueId_isset = YES;
  }
  if ([decoder containsValueForKey: @"_value"])
  {
    ___value = [[decoder decodeObjectForKey: @"_value"] retain_stub];
    ___value_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___sceneId_isset)
  {
    [encoder encodeInt: ___sceneId forKey: @"_sceneId"];
  }
  if (___valueId_isset)
  {
    [encoder encodeObject: ___valueId forKey: @"_valueId"];
  }
  if (___value_isset)
  {
    [encoder encodeObject: ___value forKey: @"_value"];
  }
}

- (void) dealloc
{
  [___valueId release_stub];
  [___value release_stub];
  [super dealloc_stub];
}

- (uint8_t) _sceneId {
  return ___sceneId;
}

- (void) set_sceneId: (uint8_t) _sceneId {
  ___sceneId = _sceneId;
  ___sceneId_isset = YES;
}

- (BOOL) _sceneIdIsSet {
  return ___sceneId_isset;
}

- (void) unset_sceneId {
  ___sceneId_isset = NO;
}

- (OpenZWaveRemoteValueID *) _valueId {
  return [[___valueId retain_stub] autorelease_stub];
}

- (void) set_valueId: (OpenZWaveRemoteValueID *) _valueId {
  [_valueId retain_stub];
  [___valueId release_stub];
  ___valueId = _valueId;
  ___valueId_isset = YES;
}

- (BOOL) _valueIdIsSet {
  return ___valueId_isset;
}

- (void) unset_valueId {
  [___valueId release_stub];
  ___valueId = nil;
  ___valueId_isset = NO;
}

- (NSString *) _value {
  return [[___value retain_stub] autorelease_stub];
}

- (void) set_value: (NSString *) _value {
  [_value retain_stub];
  [___value release_stub];
  ___value = _value;
  ___value_isset = YES;
}

- (BOOL) _valueIsSet {
  return ___value_isset;
}

- (void) unset_value {
  [___value release_stub];
  ___value = nil;
  ___value_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self set_sceneId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          OpenZWaveRemoteValueID *fieldValue = [[OpenZWaveRemoteValueID alloc] init];
          [fieldValue read: inProtocol];
          [self set_valueId: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self set_value: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"AddSceneValue_String_args"];
  if (___sceneId_isset) {
    [outProtocol writeFieldBeginWithName: @"_sceneId" type: TType_BYTE fieldID: 1];
    [outProtocol writeByte: ___sceneId];
    [outProtocol writeFieldEnd];
  }
  if (___valueId_isset) {
    if (___valueId != nil) {
      [outProtocol writeFieldBeginWithName: @"_valueId" type: TType_STRUCT fieldID: 2];
      [___valueId write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (___value_isset) {
    if (___value != nil) {
      [outProtocol writeFieldBeginWithName: @"_value" type: TType_STRING fieldID: 3];
      [outProtocol writeString: ___value];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AddSceneValue_String_args("];
  [ms appendString: @"_sceneId:"];
  [ms appendFormat: @"%i", ___sceneId];
  [ms appendString: @",_valueId:"];
  [ms appendFormat: @"%@", ___valueId];
  [ms appendString: @",_value:"];
  [ms appendFormat: @"\"%@\"", ___value];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveAddSceneValue_String_result : NSObject <NSCoding> {
  BOOL __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) BOOL success;
#endif

- (id) init;
- (id) initWithSuccess: (BOOL) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (BOOL) success;
- (void) setSuccess: (BOOL) success;
#endif
- (BOOL) successIsSet;

@end

@implementation OpenZWaveAddSceneValue_String_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (BOOL) success
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeBoolForKey: @"success"];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeBool: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (BOOL) success {
  return __success;
}

- (void) setSuccess: (BOOL) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"AddSceneValue_String_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
    [outProtocol writeBool: __success];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AddSceneValue_String_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveAddSceneValueListSelection_String_args : NSObject <NSCoding> {
  uint8_t ___sceneId;
  OpenZWaveRemoteValueID * ___valueId;
  NSString * ___value;

  BOOL ___sceneId_isset;
  BOOL ___valueId_isset;
  BOOL ___value_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=_sceneId, setter=set_sceneId:) uint8_t _sceneId;
@property (nonatomic, retain, getter=_valueId, setter=set_valueId:) OpenZWaveRemoteValueID * _valueId;
@property (nonatomic, retain, getter=_value, setter=set_value:) NSString * _value;
#endif

- (id) init;
- (id) initWith_sceneId: (uint8_t) _sceneId _valueId: (OpenZWaveRemoteValueID *) _valueId _value: (NSString *) _value;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (uint8_t) _sceneId;
- (void) set_sceneId: (uint8_t) _sceneId;
#endif
- (BOOL) _sceneIdIsSet;

#if !__has_feature(objc_arc)
- (OpenZWaveRemoteValueID *) _valueId;
- (void) set_valueId: (OpenZWaveRemoteValueID *) _valueId;
#endif
- (BOOL) _valueIdIsSet;

#if !__has_feature(objc_arc)
- (NSString *) _value;
- (void) set_value: (NSString *) _value;
#endif
- (BOOL) _valueIsSet;

@end

@implementation OpenZWaveAddSceneValueListSelection_String_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_sceneId: (uint8_t) _sceneId _valueId: (OpenZWaveRemoteValueID *) _valueId _value: (NSString *) _value
{
  self = [super init];
  ___sceneId = _sceneId;
  ___sceneId_isset = YES;
  ___valueId = [_valueId retain_stub];
  ___valueId_isset = YES;
  ___value = [_value retain_stub];
  ___value_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_sceneId"])
  {
    ___sceneId = [decoder decodeIntForKey: @"_sceneId"];
    ___sceneId_isset = YES;
  }
  if ([decoder containsValueForKey: @"_valueId"])
  {
    ___valueId = [[decoder decodeObjectForKey: @"_valueId"] retain_stub];
    ___valueId_isset = YES;
  }
  if ([decoder containsValueForKey: @"_value"])
  {
    ___value = [[decoder decodeObjectForKey: @"_value"] retain_stub];
    ___value_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___sceneId_isset)
  {
    [encoder encodeInt: ___sceneId forKey: @"_sceneId"];
  }
  if (___valueId_isset)
  {
    [encoder encodeObject: ___valueId forKey: @"_valueId"];
  }
  if (___value_isset)
  {
    [encoder encodeObject: ___value forKey: @"_value"];
  }
}

- (void) dealloc
{
  [___valueId release_stub];
  [___value release_stub];
  [super dealloc_stub];
}

- (uint8_t) _sceneId {
  return ___sceneId;
}

- (void) set_sceneId: (uint8_t) _sceneId {
  ___sceneId = _sceneId;
  ___sceneId_isset = YES;
}

- (BOOL) _sceneIdIsSet {
  return ___sceneId_isset;
}

- (void) unset_sceneId {
  ___sceneId_isset = NO;
}

- (OpenZWaveRemoteValueID *) _valueId {
  return [[___valueId retain_stub] autorelease_stub];
}

- (void) set_valueId: (OpenZWaveRemoteValueID *) _valueId {
  [_valueId retain_stub];
  [___valueId release_stub];
  ___valueId = _valueId;
  ___valueId_isset = YES;
}

- (BOOL) _valueIdIsSet {
  return ___valueId_isset;
}

- (void) unset_valueId {
  [___valueId release_stub];
  ___valueId = nil;
  ___valueId_isset = NO;
}

- (NSString *) _value {
  return [[___value retain_stub] autorelease_stub];
}

- (void) set_value: (NSString *) _value {
  [_value retain_stub];
  [___value release_stub];
  ___value = _value;
  ___value_isset = YES;
}

- (BOOL) _valueIsSet {
  return ___value_isset;
}

- (void) unset_value {
  [___value release_stub];
  ___value = nil;
  ___value_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self set_sceneId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          OpenZWaveRemoteValueID *fieldValue = [[OpenZWaveRemoteValueID alloc] init];
          [fieldValue read: inProtocol];
          [self set_valueId: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self set_value: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"AddSceneValueListSelection_String_args"];
  if (___sceneId_isset) {
    [outProtocol writeFieldBeginWithName: @"_sceneId" type: TType_BYTE fieldID: 1];
    [outProtocol writeByte: ___sceneId];
    [outProtocol writeFieldEnd];
  }
  if (___valueId_isset) {
    if (___valueId != nil) {
      [outProtocol writeFieldBeginWithName: @"_valueId" type: TType_STRUCT fieldID: 2];
      [___valueId write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (___value_isset) {
    if (___value != nil) {
      [outProtocol writeFieldBeginWithName: @"_value" type: TType_STRING fieldID: 3];
      [outProtocol writeString: ___value];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AddSceneValueListSelection_String_args("];
  [ms appendString: @"_sceneId:"];
  [ms appendFormat: @"%i", ___sceneId];
  [ms appendString: @",_valueId:"];
  [ms appendFormat: @"%@", ___valueId];
  [ms appendString: @",_value:"];
  [ms appendFormat: @"\"%@\"", ___value];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveAddSceneValueListSelection_String_result : NSObject <NSCoding> {
  BOOL __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) BOOL success;
#endif

- (id) init;
- (id) initWithSuccess: (BOOL) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (BOOL) success;
- (void) setSuccess: (BOOL) success;
#endif
- (BOOL) successIsSet;

@end

@implementation OpenZWaveAddSceneValueListSelection_String_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (BOOL) success
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeBoolForKey: @"success"];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeBool: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (BOOL) success {
  return __success;
}

- (void) setSuccess: (BOOL) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"AddSceneValueListSelection_String_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
    [outProtocol writeBool: __success];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AddSceneValueListSelection_String_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveAddSceneValueListSelection_Int32_args : NSObject <NSCoding> {
  uint8_t ___sceneId;
  OpenZWaveRemoteValueID * ___valueId;
  int32_t ___value;

  BOOL ___sceneId_isset;
  BOOL ___valueId_isset;
  BOOL ___value_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=_sceneId, setter=set_sceneId:) uint8_t _sceneId;
@property (nonatomic, retain, getter=_valueId, setter=set_valueId:) OpenZWaveRemoteValueID * _valueId;
@property (nonatomic, getter=_value, setter=set_value:) int32_t _value;
#endif

- (id) init;
- (id) initWith_sceneId: (uint8_t) _sceneId _valueId: (OpenZWaveRemoteValueID *) _valueId _value: (int32_t) _value;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (uint8_t) _sceneId;
- (void) set_sceneId: (uint8_t) _sceneId;
#endif
- (BOOL) _sceneIdIsSet;

#if !__has_feature(objc_arc)
- (OpenZWaveRemoteValueID *) _valueId;
- (void) set_valueId: (OpenZWaveRemoteValueID *) _valueId;
#endif
- (BOOL) _valueIdIsSet;

#if !__has_feature(objc_arc)
- (int32_t) _value;
- (void) set_value: (int32_t) _value;
#endif
- (BOOL) _valueIsSet;

@end

@implementation OpenZWaveAddSceneValueListSelection_Int32_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_sceneId: (uint8_t) _sceneId _valueId: (OpenZWaveRemoteValueID *) _valueId _value: (int32_t) _value
{
  self = [super init];
  ___sceneId = _sceneId;
  ___sceneId_isset = YES;
  ___valueId = [_valueId retain_stub];
  ___valueId_isset = YES;
  ___value = _value;
  ___value_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_sceneId"])
  {
    ___sceneId = [decoder decodeIntForKey: @"_sceneId"];
    ___sceneId_isset = YES;
  }
  if ([decoder containsValueForKey: @"_valueId"])
  {
    ___valueId = [[decoder decodeObjectForKey: @"_valueId"] retain_stub];
    ___valueId_isset = YES;
  }
  if ([decoder containsValueForKey: @"_value"])
  {
    ___value = [decoder decodeInt32ForKey: @"_value"];
    ___value_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___sceneId_isset)
  {
    [encoder encodeInt: ___sceneId forKey: @"_sceneId"];
  }
  if (___valueId_isset)
  {
    [encoder encodeObject: ___valueId forKey: @"_valueId"];
  }
  if (___value_isset)
  {
    [encoder encodeInt32: ___value forKey: @"_value"];
  }
}

- (void) dealloc
{
  [___valueId release_stub];
  [super dealloc_stub];
}

- (uint8_t) _sceneId {
  return ___sceneId;
}

- (void) set_sceneId: (uint8_t) _sceneId {
  ___sceneId = _sceneId;
  ___sceneId_isset = YES;
}

- (BOOL) _sceneIdIsSet {
  return ___sceneId_isset;
}

- (void) unset_sceneId {
  ___sceneId_isset = NO;
}

- (OpenZWaveRemoteValueID *) _valueId {
  return [[___valueId retain_stub] autorelease_stub];
}

- (void) set_valueId: (OpenZWaveRemoteValueID *) _valueId {
  [_valueId retain_stub];
  [___valueId release_stub];
  ___valueId = _valueId;
  ___valueId_isset = YES;
}

- (BOOL) _valueIdIsSet {
  return ___valueId_isset;
}

- (void) unset_valueId {
  [___valueId release_stub];
  ___valueId = nil;
  ___valueId_isset = NO;
}

- (int32_t) _value {
  return ___value;
}

- (void) set_value: (int32_t) _value {
  ___value = _value;
  ___value_isset = YES;
}

- (BOOL) _valueIsSet {
  return ___value_isset;
}

- (void) unset_value {
  ___value_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self set_sceneId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          OpenZWaveRemoteValueID *fieldValue = [[OpenZWaveRemoteValueID alloc] init];
          [fieldValue read: inProtocol];
          [self set_valueId: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self set_value: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"AddSceneValueListSelection_Int32_args"];
  if (___sceneId_isset) {
    [outProtocol writeFieldBeginWithName: @"_sceneId" type: TType_BYTE fieldID: 1];
    [outProtocol writeByte: ___sceneId];
    [outProtocol writeFieldEnd];
  }
  if (___valueId_isset) {
    if (___valueId != nil) {
      [outProtocol writeFieldBeginWithName: @"_valueId" type: TType_STRUCT fieldID: 2];
      [___valueId write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (___value_isset) {
    [outProtocol writeFieldBeginWithName: @"_value" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: ___value];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AddSceneValueListSelection_Int32_args("];
  [ms appendString: @"_sceneId:"];
  [ms appendFormat: @"%i", ___sceneId];
  [ms appendString: @",_valueId:"];
  [ms appendFormat: @"%@", ___valueId];
  [ms appendString: @",_value:"];
  [ms appendFormat: @"%i", ___value];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveAddSceneValueListSelection_Int32_result : NSObject <NSCoding> {
  BOOL __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) BOOL success;
#endif

- (id) init;
- (id) initWithSuccess: (BOOL) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (BOOL) success;
- (void) setSuccess: (BOOL) success;
#endif
- (BOOL) successIsSet;

@end

@implementation OpenZWaveAddSceneValueListSelection_Int32_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (BOOL) success
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeBoolForKey: @"success"];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeBool: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (BOOL) success {
  return __success;
}

- (void) setSuccess: (BOOL) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"AddSceneValueListSelection_Int32_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
    [outProtocol writeBool: __success];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AddSceneValueListSelection_Int32_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveRemoveSceneValue_args : NSObject <NSCoding> {
  uint8_t ___sceneId;
  OpenZWaveRemoteValueID * ___valueId;

  BOOL ___sceneId_isset;
  BOOL ___valueId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=_sceneId, setter=set_sceneId:) uint8_t _sceneId;
@property (nonatomic, retain, getter=_valueId, setter=set_valueId:) OpenZWaveRemoteValueID * _valueId;
#endif

- (id) init;
- (id) initWith_sceneId: (uint8_t) _sceneId _valueId: (OpenZWaveRemoteValueID *) _valueId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (uint8_t) _sceneId;
- (void) set_sceneId: (uint8_t) _sceneId;
#endif
- (BOOL) _sceneIdIsSet;

#if !__has_feature(objc_arc)
- (OpenZWaveRemoteValueID *) _valueId;
- (void) set_valueId: (OpenZWaveRemoteValueID *) _valueId;
#endif
- (BOOL) _valueIdIsSet;

@end

@implementation OpenZWaveRemoveSceneValue_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_sceneId: (uint8_t) _sceneId _valueId: (OpenZWaveRemoteValueID *) _valueId
{
  self = [super init];
  ___sceneId = _sceneId;
  ___sceneId_isset = YES;
  ___valueId = [_valueId retain_stub];
  ___valueId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_sceneId"])
  {
    ___sceneId = [decoder decodeIntForKey: @"_sceneId"];
    ___sceneId_isset = YES;
  }
  if ([decoder containsValueForKey: @"_valueId"])
  {
    ___valueId = [[decoder decodeObjectForKey: @"_valueId"] retain_stub];
    ___valueId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___sceneId_isset)
  {
    [encoder encodeInt: ___sceneId forKey: @"_sceneId"];
  }
  if (___valueId_isset)
  {
    [encoder encodeObject: ___valueId forKey: @"_valueId"];
  }
}

- (void) dealloc
{
  [___valueId release_stub];
  [super dealloc_stub];
}

- (uint8_t) _sceneId {
  return ___sceneId;
}

- (void) set_sceneId: (uint8_t) _sceneId {
  ___sceneId = _sceneId;
  ___sceneId_isset = YES;
}

- (BOOL) _sceneIdIsSet {
  return ___sceneId_isset;
}

- (void) unset_sceneId {
  ___sceneId_isset = NO;
}

- (OpenZWaveRemoteValueID *) _valueId {
  return [[___valueId retain_stub] autorelease_stub];
}

- (void) set_valueId: (OpenZWaveRemoteValueID *) _valueId {
  [_valueId retain_stub];
  [___valueId release_stub];
  ___valueId = _valueId;
  ___valueId_isset = YES;
}

- (BOOL) _valueIdIsSet {
  return ___valueId_isset;
}

- (void) unset_valueId {
  [___valueId release_stub];
  ___valueId = nil;
  ___valueId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self set_sceneId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          OpenZWaveRemoteValueID *fieldValue = [[OpenZWaveRemoteValueID alloc] init];
          [fieldValue read: inProtocol];
          [self set_valueId: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"RemoveSceneValue_args"];
  if (___sceneId_isset) {
    [outProtocol writeFieldBeginWithName: @"_sceneId" type: TType_BYTE fieldID: 1];
    [outProtocol writeByte: ___sceneId];
    [outProtocol writeFieldEnd];
  }
  if (___valueId_isset) {
    if (___valueId != nil) {
      [outProtocol writeFieldBeginWithName: @"_valueId" type: TType_STRUCT fieldID: 2];
      [___valueId write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RemoveSceneValue_args("];
  [ms appendString: @"_sceneId:"];
  [ms appendFormat: @"%i", ___sceneId];
  [ms appendString: @",_valueId:"];
  [ms appendFormat: @"%@", ___valueId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveRemoveSceneValue_result : NSObject <NSCoding> {
  BOOL __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) BOOL success;
#endif

- (id) init;
- (id) initWithSuccess: (BOOL) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (BOOL) success;
- (void) setSuccess: (BOOL) success;
#endif
- (BOOL) successIsSet;

@end

@implementation OpenZWaveRemoveSceneValue_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (BOOL) success
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeBoolForKey: @"success"];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeBool: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (BOOL) success {
  return __success;
}

- (void) setSuccess: (BOOL) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"RemoveSceneValue_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
    [outProtocol writeBool: __success];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RemoveSceneValue_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveSceneGetValues_args : NSObject <NSCoding> {
  uint8_t ___sceneId;

  BOOL ___sceneId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=_sceneId, setter=set_sceneId:) uint8_t _sceneId;
#endif

- (id) init;
- (id) initWith_sceneId: (uint8_t) _sceneId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (uint8_t) _sceneId;
- (void) set_sceneId: (uint8_t) _sceneId;
#endif
- (BOOL) _sceneIdIsSet;

@end

@implementation OpenZWaveSceneGetValues_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_sceneId: (uint8_t) _sceneId
{
  self = [super init];
  ___sceneId = _sceneId;
  ___sceneId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_sceneId"])
  {
    ___sceneId = [decoder decodeIntForKey: @"_sceneId"];
    ___sceneId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___sceneId_isset)
  {
    [encoder encodeInt: ___sceneId forKey: @"_sceneId"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (uint8_t) _sceneId {
  return ___sceneId;
}

- (void) set_sceneId: (uint8_t) _sceneId {
  ___sceneId = _sceneId;
  ___sceneId_isset = YES;
}

- (BOOL) _sceneIdIsSet {
  return ___sceneId_isset;
}

- (void) unset_sceneId {
  ___sceneId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self set_sceneId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SceneGetValues_args"];
  if (___sceneId_isset) {
    [outProtocol writeFieldBeginWithName: @"_sceneId" type: TType_BYTE fieldID: 1];
    [outProtocol writeByte: ___sceneId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SceneGetValues_args("];
  [ms appendString: @"_sceneId:"];
  [ms appendFormat: @"%i", ___sceneId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveSceneGetValues_result : NSObject <NSCoding> {
  OpenZWaveSceneGetValuesReturnStruct * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) OpenZWaveSceneGetValuesReturnStruct * success;
#endif

- (id) init;
- (id) initWithSuccess: (OpenZWaveSceneGetValuesReturnStruct *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (OpenZWaveSceneGetValuesReturnStruct *) success;
- (void) setSuccess: (OpenZWaveSceneGetValuesReturnStruct *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation OpenZWaveSceneGetValues_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (OpenZWaveSceneGetValuesReturnStruct *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (OpenZWaveSceneGetValuesReturnStruct *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (OpenZWaveSceneGetValuesReturnStruct *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          OpenZWaveSceneGetValuesReturnStruct *fieldValue = [[OpenZWaveSceneGetValuesReturnStruct alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SceneGetValues_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SceneGetValues_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveSceneGetValueAsBool_args : NSObject <NSCoding> {
  uint8_t ___sceneId;
  OpenZWaveRemoteValueID * ___valueId;

  BOOL ___sceneId_isset;
  BOOL ___valueId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=_sceneId, setter=set_sceneId:) uint8_t _sceneId;
@property (nonatomic, retain, getter=_valueId, setter=set_valueId:) OpenZWaveRemoteValueID * _valueId;
#endif

- (id) init;
- (id) initWith_sceneId: (uint8_t) _sceneId _valueId: (OpenZWaveRemoteValueID *) _valueId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (uint8_t) _sceneId;
- (void) set_sceneId: (uint8_t) _sceneId;
#endif
- (BOOL) _sceneIdIsSet;

#if !__has_feature(objc_arc)
- (OpenZWaveRemoteValueID *) _valueId;
- (void) set_valueId: (OpenZWaveRemoteValueID *) _valueId;
#endif
- (BOOL) _valueIdIsSet;

@end

@implementation OpenZWaveSceneGetValueAsBool_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_sceneId: (uint8_t) _sceneId _valueId: (OpenZWaveRemoteValueID *) _valueId
{
  self = [super init];
  ___sceneId = _sceneId;
  ___sceneId_isset = YES;
  ___valueId = [_valueId retain_stub];
  ___valueId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_sceneId"])
  {
    ___sceneId = [decoder decodeIntForKey: @"_sceneId"];
    ___sceneId_isset = YES;
  }
  if ([decoder containsValueForKey: @"_valueId"])
  {
    ___valueId = [[decoder decodeObjectForKey: @"_valueId"] retain_stub];
    ___valueId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___sceneId_isset)
  {
    [encoder encodeInt: ___sceneId forKey: @"_sceneId"];
  }
  if (___valueId_isset)
  {
    [encoder encodeObject: ___valueId forKey: @"_valueId"];
  }
}

- (void) dealloc
{
  [___valueId release_stub];
  [super dealloc_stub];
}

- (uint8_t) _sceneId {
  return ___sceneId;
}

- (void) set_sceneId: (uint8_t) _sceneId {
  ___sceneId = _sceneId;
  ___sceneId_isset = YES;
}

- (BOOL) _sceneIdIsSet {
  return ___sceneId_isset;
}

- (void) unset_sceneId {
  ___sceneId_isset = NO;
}

- (OpenZWaveRemoteValueID *) _valueId {
  return [[___valueId retain_stub] autorelease_stub];
}

- (void) set_valueId: (OpenZWaveRemoteValueID *) _valueId {
  [_valueId retain_stub];
  [___valueId release_stub];
  ___valueId = _valueId;
  ___valueId_isset = YES;
}

- (BOOL) _valueIdIsSet {
  return ___valueId_isset;
}

- (void) unset_valueId {
  [___valueId release_stub];
  ___valueId = nil;
  ___valueId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self set_sceneId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          OpenZWaveRemoteValueID *fieldValue = [[OpenZWaveRemoteValueID alloc] init];
          [fieldValue read: inProtocol];
          [self set_valueId: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SceneGetValueAsBool_args"];
  if (___sceneId_isset) {
    [outProtocol writeFieldBeginWithName: @"_sceneId" type: TType_BYTE fieldID: 1];
    [outProtocol writeByte: ___sceneId];
    [outProtocol writeFieldEnd];
  }
  if (___valueId_isset) {
    if (___valueId != nil) {
      [outProtocol writeFieldBeginWithName: @"_valueId" type: TType_STRUCT fieldID: 2];
      [___valueId write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SceneGetValueAsBool_args("];
  [ms appendString: @"_sceneId:"];
  [ms appendFormat: @"%i", ___sceneId];
  [ms appendString: @",_valueId:"];
  [ms appendFormat: @"%@", ___valueId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveSceneGetValueAsBool_result : NSObject <NSCoding> {
  OpenZWaveBool_Bool * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) OpenZWaveBool_Bool * success;
#endif

- (id) init;
- (id) initWithSuccess: (OpenZWaveBool_Bool *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (OpenZWaveBool_Bool *) success;
- (void) setSuccess: (OpenZWaveBool_Bool *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation OpenZWaveSceneGetValueAsBool_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (OpenZWaveBool_Bool *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (OpenZWaveBool_Bool *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (OpenZWaveBool_Bool *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          OpenZWaveBool_Bool *fieldValue = [[OpenZWaveBool_Bool alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SceneGetValueAsBool_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SceneGetValueAsBool_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveSceneGetValueAsByte_args : NSObject <NSCoding> {
  uint8_t ___sceneId;
  OpenZWaveRemoteValueID * ___valueId;

  BOOL ___sceneId_isset;
  BOOL ___valueId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=_sceneId, setter=set_sceneId:) uint8_t _sceneId;
@property (nonatomic, retain, getter=_valueId, setter=set_valueId:) OpenZWaveRemoteValueID * _valueId;
#endif

- (id) init;
- (id) initWith_sceneId: (uint8_t) _sceneId _valueId: (OpenZWaveRemoteValueID *) _valueId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (uint8_t) _sceneId;
- (void) set_sceneId: (uint8_t) _sceneId;
#endif
- (BOOL) _sceneIdIsSet;

#if !__has_feature(objc_arc)
- (OpenZWaveRemoteValueID *) _valueId;
- (void) set_valueId: (OpenZWaveRemoteValueID *) _valueId;
#endif
- (BOOL) _valueIdIsSet;

@end

@implementation OpenZWaveSceneGetValueAsByte_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_sceneId: (uint8_t) _sceneId _valueId: (OpenZWaveRemoteValueID *) _valueId
{
  self = [super init];
  ___sceneId = _sceneId;
  ___sceneId_isset = YES;
  ___valueId = [_valueId retain_stub];
  ___valueId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_sceneId"])
  {
    ___sceneId = [decoder decodeIntForKey: @"_sceneId"];
    ___sceneId_isset = YES;
  }
  if ([decoder containsValueForKey: @"_valueId"])
  {
    ___valueId = [[decoder decodeObjectForKey: @"_valueId"] retain_stub];
    ___valueId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___sceneId_isset)
  {
    [encoder encodeInt: ___sceneId forKey: @"_sceneId"];
  }
  if (___valueId_isset)
  {
    [encoder encodeObject: ___valueId forKey: @"_valueId"];
  }
}

- (void) dealloc
{
  [___valueId release_stub];
  [super dealloc_stub];
}

- (uint8_t) _sceneId {
  return ___sceneId;
}

- (void) set_sceneId: (uint8_t) _sceneId {
  ___sceneId = _sceneId;
  ___sceneId_isset = YES;
}

- (BOOL) _sceneIdIsSet {
  return ___sceneId_isset;
}

- (void) unset_sceneId {
  ___sceneId_isset = NO;
}

- (OpenZWaveRemoteValueID *) _valueId {
  return [[___valueId retain_stub] autorelease_stub];
}

- (void) set_valueId: (OpenZWaveRemoteValueID *) _valueId {
  [_valueId retain_stub];
  [___valueId release_stub];
  ___valueId = _valueId;
  ___valueId_isset = YES;
}

- (BOOL) _valueIdIsSet {
  return ___valueId_isset;
}

- (void) unset_valueId {
  [___valueId release_stub];
  ___valueId = nil;
  ___valueId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self set_sceneId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          OpenZWaveRemoteValueID *fieldValue = [[OpenZWaveRemoteValueID alloc] init];
          [fieldValue read: inProtocol];
          [self set_valueId: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SceneGetValueAsByte_args"];
  if (___sceneId_isset) {
    [outProtocol writeFieldBeginWithName: @"_sceneId" type: TType_BYTE fieldID: 1];
    [outProtocol writeByte: ___sceneId];
    [outProtocol writeFieldEnd];
  }
  if (___valueId_isset) {
    if (___valueId != nil) {
      [outProtocol writeFieldBeginWithName: @"_valueId" type: TType_STRUCT fieldID: 2];
      [___valueId write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SceneGetValueAsByte_args("];
  [ms appendString: @"_sceneId:"];
  [ms appendFormat: @"%i", ___sceneId];
  [ms appendString: @",_valueId:"];
  [ms appendFormat: @"%@", ___valueId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveSceneGetValueAsByte_result : NSObject <NSCoding> {
  OpenZWaveBool_UInt8 * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) OpenZWaveBool_UInt8 * success;
#endif

- (id) init;
- (id) initWithSuccess: (OpenZWaveBool_UInt8 *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (OpenZWaveBool_UInt8 *) success;
- (void) setSuccess: (OpenZWaveBool_UInt8 *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation OpenZWaveSceneGetValueAsByte_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (OpenZWaveBool_UInt8 *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (OpenZWaveBool_UInt8 *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (OpenZWaveBool_UInt8 *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          OpenZWaveBool_UInt8 *fieldValue = [[OpenZWaveBool_UInt8 alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SceneGetValueAsByte_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SceneGetValueAsByte_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveSceneGetValueAsFloat_args : NSObject <NSCoding> {
  uint8_t ___sceneId;
  OpenZWaveRemoteValueID * ___valueId;

  BOOL ___sceneId_isset;
  BOOL ___valueId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=_sceneId, setter=set_sceneId:) uint8_t _sceneId;
@property (nonatomic, retain, getter=_valueId, setter=set_valueId:) OpenZWaveRemoteValueID * _valueId;
#endif

- (id) init;
- (id) initWith_sceneId: (uint8_t) _sceneId _valueId: (OpenZWaveRemoteValueID *) _valueId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (uint8_t) _sceneId;
- (void) set_sceneId: (uint8_t) _sceneId;
#endif
- (BOOL) _sceneIdIsSet;

#if !__has_feature(objc_arc)
- (OpenZWaveRemoteValueID *) _valueId;
- (void) set_valueId: (OpenZWaveRemoteValueID *) _valueId;
#endif
- (BOOL) _valueIdIsSet;

@end

@implementation OpenZWaveSceneGetValueAsFloat_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_sceneId: (uint8_t) _sceneId _valueId: (OpenZWaveRemoteValueID *) _valueId
{
  self = [super init];
  ___sceneId = _sceneId;
  ___sceneId_isset = YES;
  ___valueId = [_valueId retain_stub];
  ___valueId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_sceneId"])
  {
    ___sceneId = [decoder decodeIntForKey: @"_sceneId"];
    ___sceneId_isset = YES;
  }
  if ([decoder containsValueForKey: @"_valueId"])
  {
    ___valueId = [[decoder decodeObjectForKey: @"_valueId"] retain_stub];
    ___valueId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___sceneId_isset)
  {
    [encoder encodeInt: ___sceneId forKey: @"_sceneId"];
  }
  if (___valueId_isset)
  {
    [encoder encodeObject: ___valueId forKey: @"_valueId"];
  }
}

- (void) dealloc
{
  [___valueId release_stub];
  [super dealloc_stub];
}

- (uint8_t) _sceneId {
  return ___sceneId;
}

- (void) set_sceneId: (uint8_t) _sceneId {
  ___sceneId = _sceneId;
  ___sceneId_isset = YES;
}

- (BOOL) _sceneIdIsSet {
  return ___sceneId_isset;
}

- (void) unset_sceneId {
  ___sceneId_isset = NO;
}

- (OpenZWaveRemoteValueID *) _valueId {
  return [[___valueId retain_stub] autorelease_stub];
}

- (void) set_valueId: (OpenZWaveRemoteValueID *) _valueId {
  [_valueId retain_stub];
  [___valueId release_stub];
  ___valueId = _valueId;
  ___valueId_isset = YES;
}

- (BOOL) _valueIdIsSet {
  return ___valueId_isset;
}

- (void) unset_valueId {
  [___valueId release_stub];
  ___valueId = nil;
  ___valueId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self set_sceneId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          OpenZWaveRemoteValueID *fieldValue = [[OpenZWaveRemoteValueID alloc] init];
          [fieldValue read: inProtocol];
          [self set_valueId: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SceneGetValueAsFloat_args"];
  if (___sceneId_isset) {
    [outProtocol writeFieldBeginWithName: @"_sceneId" type: TType_BYTE fieldID: 1];
    [outProtocol writeByte: ___sceneId];
    [outProtocol writeFieldEnd];
  }
  if (___valueId_isset) {
    if (___valueId != nil) {
      [outProtocol writeFieldBeginWithName: @"_valueId" type: TType_STRUCT fieldID: 2];
      [___valueId write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SceneGetValueAsFloat_args("];
  [ms appendString: @"_sceneId:"];
  [ms appendFormat: @"%i", ___sceneId];
  [ms appendString: @",_valueId:"];
  [ms appendFormat: @"%@", ___valueId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveSceneGetValueAsFloat_result : NSObject <NSCoding> {
  OpenZWaveBool_Float * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) OpenZWaveBool_Float * success;
#endif

- (id) init;
- (id) initWithSuccess: (OpenZWaveBool_Float *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (OpenZWaveBool_Float *) success;
- (void) setSuccess: (OpenZWaveBool_Float *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation OpenZWaveSceneGetValueAsFloat_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (OpenZWaveBool_Float *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (OpenZWaveBool_Float *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (OpenZWaveBool_Float *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          OpenZWaveBool_Float *fieldValue = [[OpenZWaveBool_Float alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SceneGetValueAsFloat_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SceneGetValueAsFloat_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveSceneGetValueAsInt_args : NSObject <NSCoding> {
  uint8_t ___sceneId;
  OpenZWaveRemoteValueID * ___valueId;

  BOOL ___sceneId_isset;
  BOOL ___valueId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=_sceneId, setter=set_sceneId:) uint8_t _sceneId;
@property (nonatomic, retain, getter=_valueId, setter=set_valueId:) OpenZWaveRemoteValueID * _valueId;
#endif

- (id) init;
- (id) initWith_sceneId: (uint8_t) _sceneId _valueId: (OpenZWaveRemoteValueID *) _valueId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (uint8_t) _sceneId;
- (void) set_sceneId: (uint8_t) _sceneId;
#endif
- (BOOL) _sceneIdIsSet;

#if !__has_feature(objc_arc)
- (OpenZWaveRemoteValueID *) _valueId;
- (void) set_valueId: (OpenZWaveRemoteValueID *) _valueId;
#endif
- (BOOL) _valueIdIsSet;

@end

@implementation OpenZWaveSceneGetValueAsInt_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_sceneId: (uint8_t) _sceneId _valueId: (OpenZWaveRemoteValueID *) _valueId
{
  self = [super init];
  ___sceneId = _sceneId;
  ___sceneId_isset = YES;
  ___valueId = [_valueId retain_stub];
  ___valueId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_sceneId"])
  {
    ___sceneId = [decoder decodeIntForKey: @"_sceneId"];
    ___sceneId_isset = YES;
  }
  if ([decoder containsValueForKey: @"_valueId"])
  {
    ___valueId = [[decoder decodeObjectForKey: @"_valueId"] retain_stub];
    ___valueId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___sceneId_isset)
  {
    [encoder encodeInt: ___sceneId forKey: @"_sceneId"];
  }
  if (___valueId_isset)
  {
    [encoder encodeObject: ___valueId forKey: @"_valueId"];
  }
}

- (void) dealloc
{
  [___valueId release_stub];
  [super dealloc_stub];
}

- (uint8_t) _sceneId {
  return ___sceneId;
}

- (void) set_sceneId: (uint8_t) _sceneId {
  ___sceneId = _sceneId;
  ___sceneId_isset = YES;
}

- (BOOL) _sceneIdIsSet {
  return ___sceneId_isset;
}

- (void) unset_sceneId {
  ___sceneId_isset = NO;
}

- (OpenZWaveRemoteValueID *) _valueId {
  return [[___valueId retain_stub] autorelease_stub];
}

- (void) set_valueId: (OpenZWaveRemoteValueID *) _valueId {
  [_valueId retain_stub];
  [___valueId release_stub];
  ___valueId = _valueId;
  ___valueId_isset = YES;
}

- (BOOL) _valueIdIsSet {
  return ___valueId_isset;
}

- (void) unset_valueId {
  [___valueId release_stub];
  ___valueId = nil;
  ___valueId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self set_sceneId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          OpenZWaveRemoteValueID *fieldValue = [[OpenZWaveRemoteValueID alloc] init];
          [fieldValue read: inProtocol];
          [self set_valueId: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SceneGetValueAsInt_args"];
  if (___sceneId_isset) {
    [outProtocol writeFieldBeginWithName: @"_sceneId" type: TType_BYTE fieldID: 1];
    [outProtocol writeByte: ___sceneId];
    [outProtocol writeFieldEnd];
  }
  if (___valueId_isset) {
    if (___valueId != nil) {
      [outProtocol writeFieldBeginWithName: @"_valueId" type: TType_STRUCT fieldID: 2];
      [___valueId write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SceneGetValueAsInt_args("];
  [ms appendString: @"_sceneId:"];
  [ms appendFormat: @"%i", ___sceneId];
  [ms appendString: @",_valueId:"];
  [ms appendFormat: @"%@", ___valueId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveSceneGetValueAsInt_result : NSObject <NSCoding> {
  OpenZWaveBool_Int * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) OpenZWaveBool_Int * success;
#endif

- (id) init;
- (id) initWithSuccess: (OpenZWaveBool_Int *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (OpenZWaveBool_Int *) success;
- (void) setSuccess: (OpenZWaveBool_Int *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation OpenZWaveSceneGetValueAsInt_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (OpenZWaveBool_Int *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (OpenZWaveBool_Int *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (OpenZWaveBool_Int *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          OpenZWaveBool_Int *fieldValue = [[OpenZWaveBool_Int alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SceneGetValueAsInt_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SceneGetValueAsInt_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveSceneGetValueAsShort_args : NSObject <NSCoding> {
  uint8_t ___sceneId;
  OpenZWaveRemoteValueID * ___valueId;

  BOOL ___sceneId_isset;
  BOOL ___valueId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=_sceneId, setter=set_sceneId:) uint8_t _sceneId;
@property (nonatomic, retain, getter=_valueId, setter=set_valueId:) OpenZWaveRemoteValueID * _valueId;
#endif

- (id) init;
- (id) initWith_sceneId: (uint8_t) _sceneId _valueId: (OpenZWaveRemoteValueID *) _valueId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (uint8_t) _sceneId;
- (void) set_sceneId: (uint8_t) _sceneId;
#endif
- (BOOL) _sceneIdIsSet;

#if !__has_feature(objc_arc)
- (OpenZWaveRemoteValueID *) _valueId;
- (void) set_valueId: (OpenZWaveRemoteValueID *) _valueId;
#endif
- (BOOL) _valueIdIsSet;

@end

@implementation OpenZWaveSceneGetValueAsShort_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_sceneId: (uint8_t) _sceneId _valueId: (OpenZWaveRemoteValueID *) _valueId
{
  self = [super init];
  ___sceneId = _sceneId;
  ___sceneId_isset = YES;
  ___valueId = [_valueId retain_stub];
  ___valueId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_sceneId"])
  {
    ___sceneId = [decoder decodeIntForKey: @"_sceneId"];
    ___sceneId_isset = YES;
  }
  if ([decoder containsValueForKey: @"_valueId"])
  {
    ___valueId = [[decoder decodeObjectForKey: @"_valueId"] retain_stub];
    ___valueId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___sceneId_isset)
  {
    [encoder encodeInt: ___sceneId forKey: @"_sceneId"];
  }
  if (___valueId_isset)
  {
    [encoder encodeObject: ___valueId forKey: @"_valueId"];
  }
}

- (void) dealloc
{
  [___valueId release_stub];
  [super dealloc_stub];
}

- (uint8_t) _sceneId {
  return ___sceneId;
}

- (void) set_sceneId: (uint8_t) _sceneId {
  ___sceneId = _sceneId;
  ___sceneId_isset = YES;
}

- (BOOL) _sceneIdIsSet {
  return ___sceneId_isset;
}

- (void) unset_sceneId {
  ___sceneId_isset = NO;
}

- (OpenZWaveRemoteValueID *) _valueId {
  return [[___valueId retain_stub] autorelease_stub];
}

- (void) set_valueId: (OpenZWaveRemoteValueID *) _valueId {
  [_valueId retain_stub];
  [___valueId release_stub];
  ___valueId = _valueId;
  ___valueId_isset = YES;
}

- (BOOL) _valueIdIsSet {
  return ___valueId_isset;
}

- (void) unset_valueId {
  [___valueId release_stub];
  ___valueId = nil;
  ___valueId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self set_sceneId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          OpenZWaveRemoteValueID *fieldValue = [[OpenZWaveRemoteValueID alloc] init];
          [fieldValue read: inProtocol];
          [self set_valueId: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SceneGetValueAsShort_args"];
  if (___sceneId_isset) {
    [outProtocol writeFieldBeginWithName: @"_sceneId" type: TType_BYTE fieldID: 1];
    [outProtocol writeByte: ___sceneId];
    [outProtocol writeFieldEnd];
  }
  if (___valueId_isset) {
    if (___valueId != nil) {
      [outProtocol writeFieldBeginWithName: @"_valueId" type: TType_STRUCT fieldID: 2];
      [___valueId write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SceneGetValueAsShort_args("];
  [ms appendString: @"_sceneId:"];
  [ms appendFormat: @"%i", ___sceneId];
  [ms appendString: @",_valueId:"];
  [ms appendFormat: @"%@", ___valueId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveSceneGetValueAsShort_result : NSObject <NSCoding> {
  OpenZWaveBool_Int16 * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) OpenZWaveBool_Int16 * success;
#endif

- (id) init;
- (id) initWithSuccess: (OpenZWaveBool_Int16 *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (OpenZWaveBool_Int16 *) success;
- (void) setSuccess: (OpenZWaveBool_Int16 *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation OpenZWaveSceneGetValueAsShort_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (OpenZWaveBool_Int16 *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (OpenZWaveBool_Int16 *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (OpenZWaveBool_Int16 *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          OpenZWaveBool_Int16 *fieldValue = [[OpenZWaveBool_Int16 alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SceneGetValueAsShort_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SceneGetValueAsShort_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveSceneGetValueAsString_args : NSObject <NSCoding> {
  uint8_t ___sceneId;
  OpenZWaveRemoteValueID * ___valueId;

  BOOL ___sceneId_isset;
  BOOL ___valueId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=_sceneId, setter=set_sceneId:) uint8_t _sceneId;
@property (nonatomic, retain, getter=_valueId, setter=set_valueId:) OpenZWaveRemoteValueID * _valueId;
#endif

- (id) init;
- (id) initWith_sceneId: (uint8_t) _sceneId _valueId: (OpenZWaveRemoteValueID *) _valueId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (uint8_t) _sceneId;
- (void) set_sceneId: (uint8_t) _sceneId;
#endif
- (BOOL) _sceneIdIsSet;

#if !__has_feature(objc_arc)
- (OpenZWaveRemoteValueID *) _valueId;
- (void) set_valueId: (OpenZWaveRemoteValueID *) _valueId;
#endif
- (BOOL) _valueIdIsSet;

@end

@implementation OpenZWaveSceneGetValueAsString_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_sceneId: (uint8_t) _sceneId _valueId: (OpenZWaveRemoteValueID *) _valueId
{
  self = [super init];
  ___sceneId = _sceneId;
  ___sceneId_isset = YES;
  ___valueId = [_valueId retain_stub];
  ___valueId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_sceneId"])
  {
    ___sceneId = [decoder decodeIntForKey: @"_sceneId"];
    ___sceneId_isset = YES;
  }
  if ([decoder containsValueForKey: @"_valueId"])
  {
    ___valueId = [[decoder decodeObjectForKey: @"_valueId"] retain_stub];
    ___valueId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___sceneId_isset)
  {
    [encoder encodeInt: ___sceneId forKey: @"_sceneId"];
  }
  if (___valueId_isset)
  {
    [encoder encodeObject: ___valueId forKey: @"_valueId"];
  }
}

- (void) dealloc
{
  [___valueId release_stub];
  [super dealloc_stub];
}

- (uint8_t) _sceneId {
  return ___sceneId;
}

- (void) set_sceneId: (uint8_t) _sceneId {
  ___sceneId = _sceneId;
  ___sceneId_isset = YES;
}

- (BOOL) _sceneIdIsSet {
  return ___sceneId_isset;
}

- (void) unset_sceneId {
  ___sceneId_isset = NO;
}

- (OpenZWaveRemoteValueID *) _valueId {
  return [[___valueId retain_stub] autorelease_stub];
}

- (void) set_valueId: (OpenZWaveRemoteValueID *) _valueId {
  [_valueId retain_stub];
  [___valueId release_stub];
  ___valueId = _valueId;
  ___valueId_isset = YES;
}

- (BOOL) _valueIdIsSet {
  return ___valueId_isset;
}

- (void) unset_valueId {
  [___valueId release_stub];
  ___valueId = nil;
  ___valueId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self set_sceneId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          OpenZWaveRemoteValueID *fieldValue = [[OpenZWaveRemoteValueID alloc] init];
          [fieldValue read: inProtocol];
          [self set_valueId: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SceneGetValueAsString_args"];
  if (___sceneId_isset) {
    [outProtocol writeFieldBeginWithName: @"_sceneId" type: TType_BYTE fieldID: 1];
    [outProtocol writeByte: ___sceneId];
    [outProtocol writeFieldEnd];
  }
  if (___valueId_isset) {
    if (___valueId != nil) {
      [outProtocol writeFieldBeginWithName: @"_valueId" type: TType_STRUCT fieldID: 2];
      [___valueId write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SceneGetValueAsString_args("];
  [ms appendString: @"_sceneId:"];
  [ms appendFormat: @"%i", ___sceneId];
  [ms appendString: @",_valueId:"];
  [ms appendFormat: @"%@", ___valueId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveSceneGetValueAsString_result : NSObject <NSCoding> {
  OpenZWaveBool_String * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) OpenZWaveBool_String * success;
#endif

- (id) init;
- (id) initWithSuccess: (OpenZWaveBool_String *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (OpenZWaveBool_String *) success;
- (void) setSuccess: (OpenZWaveBool_String *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation OpenZWaveSceneGetValueAsString_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (OpenZWaveBool_String *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (OpenZWaveBool_String *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (OpenZWaveBool_String *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          OpenZWaveBool_String *fieldValue = [[OpenZWaveBool_String alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SceneGetValueAsString_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SceneGetValueAsString_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveSceneGetValueListSelection_String_args : NSObject <NSCoding> {
  uint8_t ___sceneId;
  OpenZWaveRemoteValueID * ___valueId;

  BOOL ___sceneId_isset;
  BOOL ___valueId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=_sceneId, setter=set_sceneId:) uint8_t _sceneId;
@property (nonatomic, retain, getter=_valueId, setter=set_valueId:) OpenZWaveRemoteValueID * _valueId;
#endif

- (id) init;
- (id) initWith_sceneId: (uint8_t) _sceneId _valueId: (OpenZWaveRemoteValueID *) _valueId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (uint8_t) _sceneId;
- (void) set_sceneId: (uint8_t) _sceneId;
#endif
- (BOOL) _sceneIdIsSet;

#if !__has_feature(objc_arc)
- (OpenZWaveRemoteValueID *) _valueId;
- (void) set_valueId: (OpenZWaveRemoteValueID *) _valueId;
#endif
- (BOOL) _valueIdIsSet;

@end

@implementation OpenZWaveSceneGetValueListSelection_String_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_sceneId: (uint8_t) _sceneId _valueId: (OpenZWaveRemoteValueID *) _valueId
{
  self = [super init];
  ___sceneId = _sceneId;
  ___sceneId_isset = YES;
  ___valueId = [_valueId retain_stub];
  ___valueId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_sceneId"])
  {
    ___sceneId = [decoder decodeIntForKey: @"_sceneId"];
    ___sceneId_isset = YES;
  }
  if ([decoder containsValueForKey: @"_valueId"])
  {
    ___valueId = [[decoder decodeObjectForKey: @"_valueId"] retain_stub];
    ___valueId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___sceneId_isset)
  {
    [encoder encodeInt: ___sceneId forKey: @"_sceneId"];
  }
  if (___valueId_isset)
  {
    [encoder encodeObject: ___valueId forKey: @"_valueId"];
  }
}

- (void) dealloc
{
  [___valueId release_stub];
  [super dealloc_stub];
}

- (uint8_t) _sceneId {
  return ___sceneId;
}

- (void) set_sceneId: (uint8_t) _sceneId {
  ___sceneId = _sceneId;
  ___sceneId_isset = YES;
}

- (BOOL) _sceneIdIsSet {
  return ___sceneId_isset;
}

- (void) unset_sceneId {
  ___sceneId_isset = NO;
}

- (OpenZWaveRemoteValueID *) _valueId {
  return [[___valueId retain_stub] autorelease_stub];
}

- (void) set_valueId: (OpenZWaveRemoteValueID *) _valueId {
  [_valueId retain_stub];
  [___valueId release_stub];
  ___valueId = _valueId;
  ___valueId_isset = YES;
}

- (BOOL) _valueIdIsSet {
  return ___valueId_isset;
}

- (void) unset_valueId {
  [___valueId release_stub];
  ___valueId = nil;
  ___valueId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self set_sceneId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          OpenZWaveRemoteValueID *fieldValue = [[OpenZWaveRemoteValueID alloc] init];
          [fieldValue read: inProtocol];
          [self set_valueId: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SceneGetValueListSelection_String_args"];
  if (___sceneId_isset) {
    [outProtocol writeFieldBeginWithName: @"_sceneId" type: TType_BYTE fieldID: 1];
    [outProtocol writeByte: ___sceneId];
    [outProtocol writeFieldEnd];
  }
  if (___valueId_isset) {
    if (___valueId != nil) {
      [outProtocol writeFieldBeginWithName: @"_valueId" type: TType_STRUCT fieldID: 2];
      [___valueId write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SceneGetValueListSelection_String_args("];
  [ms appendString: @"_sceneId:"];
  [ms appendFormat: @"%i", ___sceneId];
  [ms appendString: @",_valueId:"];
  [ms appendFormat: @"%@", ___valueId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveSceneGetValueListSelection_String_result : NSObject <NSCoding> {
  OpenZWaveBool_String * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) OpenZWaveBool_String * success;
#endif

- (id) init;
- (id) initWithSuccess: (OpenZWaveBool_String *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (OpenZWaveBool_String *) success;
- (void) setSuccess: (OpenZWaveBool_String *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation OpenZWaveSceneGetValueListSelection_String_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (OpenZWaveBool_String *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (OpenZWaveBool_String *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (OpenZWaveBool_String *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          OpenZWaveBool_String *fieldValue = [[OpenZWaveBool_String alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SceneGetValueListSelection_String_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SceneGetValueListSelection_String_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveSceneGetValueListSelection_Int32_args : NSObject <NSCoding> {
  uint8_t ___sceneId;
  OpenZWaveRemoteValueID * ___valueId;

  BOOL ___sceneId_isset;
  BOOL ___valueId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=_sceneId, setter=set_sceneId:) uint8_t _sceneId;
@property (nonatomic, retain, getter=_valueId, setter=set_valueId:) OpenZWaveRemoteValueID * _valueId;
#endif

- (id) init;
- (id) initWith_sceneId: (uint8_t) _sceneId _valueId: (OpenZWaveRemoteValueID *) _valueId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (uint8_t) _sceneId;
- (void) set_sceneId: (uint8_t) _sceneId;
#endif
- (BOOL) _sceneIdIsSet;

#if !__has_feature(objc_arc)
- (OpenZWaveRemoteValueID *) _valueId;
- (void) set_valueId: (OpenZWaveRemoteValueID *) _valueId;
#endif
- (BOOL) _valueIdIsSet;

@end

@implementation OpenZWaveSceneGetValueListSelection_Int32_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_sceneId: (uint8_t) _sceneId _valueId: (OpenZWaveRemoteValueID *) _valueId
{
  self = [super init];
  ___sceneId = _sceneId;
  ___sceneId_isset = YES;
  ___valueId = [_valueId retain_stub];
  ___valueId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_sceneId"])
  {
    ___sceneId = [decoder decodeIntForKey: @"_sceneId"];
    ___sceneId_isset = YES;
  }
  if ([decoder containsValueForKey: @"_valueId"])
  {
    ___valueId = [[decoder decodeObjectForKey: @"_valueId"] retain_stub];
    ___valueId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___sceneId_isset)
  {
    [encoder encodeInt: ___sceneId forKey: @"_sceneId"];
  }
  if (___valueId_isset)
  {
    [encoder encodeObject: ___valueId forKey: @"_valueId"];
  }
}

- (void) dealloc
{
  [___valueId release_stub];
  [super dealloc_stub];
}

- (uint8_t) _sceneId {
  return ___sceneId;
}

- (void) set_sceneId: (uint8_t) _sceneId {
  ___sceneId = _sceneId;
  ___sceneId_isset = YES;
}

- (BOOL) _sceneIdIsSet {
  return ___sceneId_isset;
}

- (void) unset_sceneId {
  ___sceneId_isset = NO;
}

- (OpenZWaveRemoteValueID *) _valueId {
  return [[___valueId retain_stub] autorelease_stub];
}

- (void) set_valueId: (OpenZWaveRemoteValueID *) _valueId {
  [_valueId retain_stub];
  [___valueId release_stub];
  ___valueId = _valueId;
  ___valueId_isset = YES;
}

- (BOOL) _valueIdIsSet {
  return ___valueId_isset;
}

- (void) unset_valueId {
  [___valueId release_stub];
  ___valueId = nil;
  ___valueId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self set_sceneId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          OpenZWaveRemoteValueID *fieldValue = [[OpenZWaveRemoteValueID alloc] init];
          [fieldValue read: inProtocol];
          [self set_valueId: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SceneGetValueListSelection_Int32_args"];
  if (___sceneId_isset) {
    [outProtocol writeFieldBeginWithName: @"_sceneId" type: TType_BYTE fieldID: 1];
    [outProtocol writeByte: ___sceneId];
    [outProtocol writeFieldEnd];
  }
  if (___valueId_isset) {
    if (___valueId != nil) {
      [outProtocol writeFieldBeginWithName: @"_valueId" type: TType_STRUCT fieldID: 2];
      [___valueId write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SceneGetValueListSelection_Int32_args("];
  [ms appendString: @"_sceneId:"];
  [ms appendFormat: @"%i", ___sceneId];
  [ms appendString: @",_valueId:"];
  [ms appendFormat: @"%@", ___valueId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveSceneGetValueListSelection_Int32_result : NSObject <NSCoding> {
  OpenZWaveBool_Int * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) OpenZWaveBool_Int * success;
#endif

- (id) init;
- (id) initWithSuccess: (OpenZWaveBool_Int *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (OpenZWaveBool_Int *) success;
- (void) setSuccess: (OpenZWaveBool_Int *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation OpenZWaveSceneGetValueListSelection_Int32_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (OpenZWaveBool_Int *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (OpenZWaveBool_Int *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (OpenZWaveBool_Int *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          OpenZWaveBool_Int *fieldValue = [[OpenZWaveBool_Int alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SceneGetValueListSelection_Int32_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SceneGetValueListSelection_Int32_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveSetSceneValue_Bool_args : NSObject <NSCoding> {
  uint8_t ___sceneId;
  OpenZWaveRemoteValueID * ___valueId;
  BOOL ___value;

  BOOL ___sceneId_isset;
  BOOL ___valueId_isset;
  BOOL ___value_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=_sceneId, setter=set_sceneId:) uint8_t _sceneId;
@property (nonatomic, retain, getter=_valueId, setter=set_valueId:) OpenZWaveRemoteValueID * _valueId;
@property (nonatomic, getter=_value, setter=set_value:) BOOL _value;
#endif

- (id) init;
- (id) initWith_sceneId: (uint8_t) _sceneId _valueId: (OpenZWaveRemoteValueID *) _valueId _value: (BOOL) _value;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (uint8_t) _sceneId;
- (void) set_sceneId: (uint8_t) _sceneId;
#endif
- (BOOL) _sceneIdIsSet;

#if !__has_feature(objc_arc)
- (OpenZWaveRemoteValueID *) _valueId;
- (void) set_valueId: (OpenZWaveRemoteValueID *) _valueId;
#endif
- (BOOL) _valueIdIsSet;

#if !__has_feature(objc_arc)
- (BOOL) _value;
- (void) set_value: (BOOL) _value;
#endif
- (BOOL) _valueIsSet;

@end

@implementation OpenZWaveSetSceneValue_Bool_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_sceneId: (uint8_t) _sceneId _valueId: (OpenZWaveRemoteValueID *) _valueId _value: (BOOL) _value
{
  self = [super init];
  ___sceneId = _sceneId;
  ___sceneId_isset = YES;
  ___valueId = [_valueId retain_stub];
  ___valueId_isset = YES;
  ___value = _value;
  ___value_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_sceneId"])
  {
    ___sceneId = [decoder decodeIntForKey: @"_sceneId"];
    ___sceneId_isset = YES;
  }
  if ([decoder containsValueForKey: @"_valueId"])
  {
    ___valueId = [[decoder decodeObjectForKey: @"_valueId"] retain_stub];
    ___valueId_isset = YES;
  }
  if ([decoder containsValueForKey: @"_value"])
  {
    ___value = [decoder decodeBoolForKey: @"_value"];
    ___value_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___sceneId_isset)
  {
    [encoder encodeInt: ___sceneId forKey: @"_sceneId"];
  }
  if (___valueId_isset)
  {
    [encoder encodeObject: ___valueId forKey: @"_valueId"];
  }
  if (___value_isset)
  {
    [encoder encodeBool: ___value forKey: @"_value"];
  }
}

- (void) dealloc
{
  [___valueId release_stub];
  [super dealloc_stub];
}

- (uint8_t) _sceneId {
  return ___sceneId;
}

- (void) set_sceneId: (uint8_t) _sceneId {
  ___sceneId = _sceneId;
  ___sceneId_isset = YES;
}

- (BOOL) _sceneIdIsSet {
  return ___sceneId_isset;
}

- (void) unset_sceneId {
  ___sceneId_isset = NO;
}

- (OpenZWaveRemoteValueID *) _valueId {
  return [[___valueId retain_stub] autorelease_stub];
}

- (void) set_valueId: (OpenZWaveRemoteValueID *) _valueId {
  [_valueId retain_stub];
  [___valueId release_stub];
  ___valueId = _valueId;
  ___valueId_isset = YES;
}

- (BOOL) _valueIdIsSet {
  return ___valueId_isset;
}

- (void) unset_valueId {
  [___valueId release_stub];
  ___valueId = nil;
  ___valueId_isset = NO;
}

- (BOOL) _value {
  return ___value;
}

- (void) set_value: (BOOL) _value {
  ___value = _value;
  ___value_isset = YES;
}

- (BOOL) _valueIsSet {
  return ___value_isset;
}

- (void) unset_value {
  ___value_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self set_sceneId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          OpenZWaveRemoteValueID *fieldValue = [[OpenZWaveRemoteValueID alloc] init];
          [fieldValue read: inProtocol];
          [self set_valueId: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self set_value: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SetSceneValue_Bool_args"];
  if (___sceneId_isset) {
    [outProtocol writeFieldBeginWithName: @"_sceneId" type: TType_BYTE fieldID: 1];
    [outProtocol writeByte: ___sceneId];
    [outProtocol writeFieldEnd];
  }
  if (___valueId_isset) {
    if (___valueId != nil) {
      [outProtocol writeFieldBeginWithName: @"_valueId" type: TType_STRUCT fieldID: 2];
      [___valueId write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (___value_isset) {
    [outProtocol writeFieldBeginWithName: @"_value" type: TType_BOOL fieldID: 3];
    [outProtocol writeBool: ___value];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SetSceneValue_Bool_args("];
  [ms appendString: @"_sceneId:"];
  [ms appendFormat: @"%i", ___sceneId];
  [ms appendString: @",_valueId:"];
  [ms appendFormat: @"%@", ___valueId];
  [ms appendString: @",_value:"];
  [ms appendFormat: @"%i", ___value];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveSetSceneValue_Bool_result : NSObject <NSCoding> {
  BOOL __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) BOOL success;
#endif

- (id) init;
- (id) initWithSuccess: (BOOL) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (BOOL) success;
- (void) setSuccess: (BOOL) success;
#endif
- (BOOL) successIsSet;

@end

@implementation OpenZWaveSetSceneValue_Bool_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (BOOL) success
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeBoolForKey: @"success"];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeBool: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (BOOL) success {
  return __success;
}

- (void) setSuccess: (BOOL) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SetSceneValue_Bool_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
    [outProtocol writeBool: __success];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SetSceneValue_Bool_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveSetSceneValue_Uint8_args : NSObject <NSCoding> {
  uint8_t ___sceneId;
  OpenZWaveRemoteValueID * ___valueId;
  uint8_t ___value;

  BOOL ___sceneId_isset;
  BOOL ___valueId_isset;
  BOOL ___value_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=_sceneId, setter=set_sceneId:) uint8_t _sceneId;
@property (nonatomic, retain, getter=_valueId, setter=set_valueId:) OpenZWaveRemoteValueID * _valueId;
@property (nonatomic, getter=_value, setter=set_value:) uint8_t _value;
#endif

- (id) init;
- (id) initWith_sceneId: (uint8_t) _sceneId _valueId: (OpenZWaveRemoteValueID *) _valueId _value: (uint8_t) _value;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (uint8_t) _sceneId;
- (void) set_sceneId: (uint8_t) _sceneId;
#endif
- (BOOL) _sceneIdIsSet;

#if !__has_feature(objc_arc)
- (OpenZWaveRemoteValueID *) _valueId;
- (void) set_valueId: (OpenZWaveRemoteValueID *) _valueId;
#endif
- (BOOL) _valueIdIsSet;

#if !__has_feature(objc_arc)
- (uint8_t) _value;
- (void) set_value: (uint8_t) _value;
#endif
- (BOOL) _valueIsSet;

@end

@implementation OpenZWaveSetSceneValue_Uint8_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_sceneId: (uint8_t) _sceneId _valueId: (OpenZWaveRemoteValueID *) _valueId _value: (uint8_t) _value
{
  self = [super init];
  ___sceneId = _sceneId;
  ___sceneId_isset = YES;
  ___valueId = [_valueId retain_stub];
  ___valueId_isset = YES;
  ___value = _value;
  ___value_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_sceneId"])
  {
    ___sceneId = [decoder decodeIntForKey: @"_sceneId"];
    ___sceneId_isset = YES;
  }
  if ([decoder containsValueForKey: @"_valueId"])
  {
    ___valueId = [[decoder decodeObjectForKey: @"_valueId"] retain_stub];
    ___valueId_isset = YES;
  }
  if ([decoder containsValueForKey: @"_value"])
  {
    ___value = [decoder decodeIntForKey: @"_value"];
    ___value_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___sceneId_isset)
  {
    [encoder encodeInt: ___sceneId forKey: @"_sceneId"];
  }
  if (___valueId_isset)
  {
    [encoder encodeObject: ___valueId forKey: @"_valueId"];
  }
  if (___value_isset)
  {
    [encoder encodeInt: ___value forKey: @"_value"];
  }
}

- (void) dealloc
{
  [___valueId release_stub];
  [super dealloc_stub];
}

- (uint8_t) _sceneId {
  return ___sceneId;
}

- (void) set_sceneId: (uint8_t) _sceneId {
  ___sceneId = _sceneId;
  ___sceneId_isset = YES;
}

- (BOOL) _sceneIdIsSet {
  return ___sceneId_isset;
}

- (void) unset_sceneId {
  ___sceneId_isset = NO;
}

- (OpenZWaveRemoteValueID *) _valueId {
  return [[___valueId retain_stub] autorelease_stub];
}

- (void) set_valueId: (OpenZWaveRemoteValueID *) _valueId {
  [_valueId retain_stub];
  [___valueId release_stub];
  ___valueId = _valueId;
  ___valueId_isset = YES;
}

- (BOOL) _valueIdIsSet {
  return ___valueId_isset;
}

- (void) unset_valueId {
  [___valueId release_stub];
  ___valueId = nil;
  ___valueId_isset = NO;
}

- (uint8_t) _value {
  return ___value;
}

- (void) set_value: (uint8_t) _value {
  ___value = _value;
  ___value_isset = YES;
}

- (BOOL) _valueIsSet {
  return ___value_isset;
}

- (void) unset_value {
  ___value_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self set_sceneId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          OpenZWaveRemoteValueID *fieldValue = [[OpenZWaveRemoteValueID alloc] init];
          [fieldValue read: inProtocol];
          [self set_valueId: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self set_value: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SetSceneValue_Uint8_args"];
  if (___sceneId_isset) {
    [outProtocol writeFieldBeginWithName: @"_sceneId" type: TType_BYTE fieldID: 1];
    [outProtocol writeByte: ___sceneId];
    [outProtocol writeFieldEnd];
  }
  if (___valueId_isset) {
    if (___valueId != nil) {
      [outProtocol writeFieldBeginWithName: @"_valueId" type: TType_STRUCT fieldID: 2];
      [___valueId write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (___value_isset) {
    [outProtocol writeFieldBeginWithName: @"_value" type: TType_BYTE fieldID: 3];
    [outProtocol writeByte: ___value];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SetSceneValue_Uint8_args("];
  [ms appendString: @"_sceneId:"];
  [ms appendFormat: @"%i", ___sceneId];
  [ms appendString: @",_valueId:"];
  [ms appendFormat: @"%@", ___valueId];
  [ms appendString: @",_value:"];
  [ms appendFormat: @"%i", ___value];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveSetSceneValue_Uint8_result : NSObject <NSCoding> {
  BOOL __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) BOOL success;
#endif

- (id) init;
- (id) initWithSuccess: (BOOL) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (BOOL) success;
- (void) setSuccess: (BOOL) success;
#endif
- (BOOL) successIsSet;

@end

@implementation OpenZWaveSetSceneValue_Uint8_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (BOOL) success
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeBoolForKey: @"success"];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeBool: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (BOOL) success {
  return __success;
}

- (void) setSuccess: (BOOL) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SetSceneValue_Uint8_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
    [outProtocol writeBool: __success];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SetSceneValue_Uint8_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveSetSceneValue_Float_args : NSObject <NSCoding> {
  uint8_t ___sceneId;
  OpenZWaveRemoteValueID * ___valueId;
  double ___value;

  BOOL ___sceneId_isset;
  BOOL ___valueId_isset;
  BOOL ___value_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=_sceneId, setter=set_sceneId:) uint8_t _sceneId;
@property (nonatomic, retain, getter=_valueId, setter=set_valueId:) OpenZWaveRemoteValueID * _valueId;
@property (nonatomic, getter=_value, setter=set_value:) double _value;
#endif

- (id) init;
- (id) initWith_sceneId: (uint8_t) _sceneId _valueId: (OpenZWaveRemoteValueID *) _valueId _value: (double) _value;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (uint8_t) _sceneId;
- (void) set_sceneId: (uint8_t) _sceneId;
#endif
- (BOOL) _sceneIdIsSet;

#if !__has_feature(objc_arc)
- (OpenZWaveRemoteValueID *) _valueId;
- (void) set_valueId: (OpenZWaveRemoteValueID *) _valueId;
#endif
- (BOOL) _valueIdIsSet;

#if !__has_feature(objc_arc)
- (double) _value;
- (void) set_value: (double) _value;
#endif
- (BOOL) _valueIsSet;

@end

@implementation OpenZWaveSetSceneValue_Float_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_sceneId: (uint8_t) _sceneId _valueId: (OpenZWaveRemoteValueID *) _valueId _value: (double) _value
{
  self = [super init];
  ___sceneId = _sceneId;
  ___sceneId_isset = YES;
  ___valueId = [_valueId retain_stub];
  ___valueId_isset = YES;
  ___value = _value;
  ___value_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_sceneId"])
  {
    ___sceneId = [decoder decodeIntForKey: @"_sceneId"];
    ___sceneId_isset = YES;
  }
  if ([decoder containsValueForKey: @"_valueId"])
  {
    ___valueId = [[decoder decodeObjectForKey: @"_valueId"] retain_stub];
    ___valueId_isset = YES;
  }
  if ([decoder containsValueForKey: @"_value"])
  {
    ___value = [decoder decodeDoubleForKey: @"_value"];
    ___value_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___sceneId_isset)
  {
    [encoder encodeInt: ___sceneId forKey: @"_sceneId"];
  }
  if (___valueId_isset)
  {
    [encoder encodeObject: ___valueId forKey: @"_valueId"];
  }
  if (___value_isset)
  {
    [encoder encodeDouble: ___value forKey: @"_value"];
  }
}

- (void) dealloc
{
  [___valueId release_stub];
  [super dealloc_stub];
}

- (uint8_t) _sceneId {
  return ___sceneId;
}

- (void) set_sceneId: (uint8_t) _sceneId {
  ___sceneId = _sceneId;
  ___sceneId_isset = YES;
}

- (BOOL) _sceneIdIsSet {
  return ___sceneId_isset;
}

- (void) unset_sceneId {
  ___sceneId_isset = NO;
}

- (OpenZWaveRemoteValueID *) _valueId {
  return [[___valueId retain_stub] autorelease_stub];
}

- (void) set_valueId: (OpenZWaveRemoteValueID *) _valueId {
  [_valueId retain_stub];
  [___valueId release_stub];
  ___valueId = _valueId;
  ___valueId_isset = YES;
}

- (BOOL) _valueIdIsSet {
  return ___valueId_isset;
}

- (void) unset_valueId {
  [___valueId release_stub];
  ___valueId = nil;
  ___valueId_isset = NO;
}

- (double) _value {
  return ___value;
}

- (void) set_value: (double) _value {
  ___value = _value;
  ___value_isset = YES;
}

- (BOOL) _valueIsSet {
  return ___value_isset;
}

- (void) unset_value {
  ___value_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self set_sceneId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          OpenZWaveRemoteValueID *fieldValue = [[OpenZWaveRemoteValueID alloc] init];
          [fieldValue read: inProtocol];
          [self set_valueId: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self set_value: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SetSceneValue_Float_args"];
  if (___sceneId_isset) {
    [outProtocol writeFieldBeginWithName: @"_sceneId" type: TType_BYTE fieldID: 1];
    [outProtocol writeByte: ___sceneId];
    [outProtocol writeFieldEnd];
  }
  if (___valueId_isset) {
    if (___valueId != nil) {
      [outProtocol writeFieldBeginWithName: @"_valueId" type: TType_STRUCT fieldID: 2];
      [___valueId write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (___value_isset) {
    [outProtocol writeFieldBeginWithName: @"_value" type: TType_DOUBLE fieldID: 3];
    [outProtocol writeDouble: ___value];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SetSceneValue_Float_args("];
  [ms appendString: @"_sceneId:"];
  [ms appendFormat: @"%i", ___sceneId];
  [ms appendString: @",_valueId:"];
  [ms appendFormat: @"%@", ___valueId];
  [ms appendString: @",_value:"];
  [ms appendFormat: @"%f", ___value];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveSetSceneValue_Float_result : NSObject <NSCoding> {
  BOOL __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) BOOL success;
#endif

- (id) init;
- (id) initWithSuccess: (BOOL) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (BOOL) success;
- (void) setSuccess: (BOOL) success;
#endif
- (BOOL) successIsSet;

@end

@implementation OpenZWaveSetSceneValue_Float_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (BOOL) success
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeBoolForKey: @"success"];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeBool: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (BOOL) success {
  return __success;
}

- (void) setSuccess: (BOOL) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SetSceneValue_Float_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
    [outProtocol writeBool: __success];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SetSceneValue_Float_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveSetSceneValue_Int32_args : NSObject <NSCoding> {
  uint8_t ___sceneId;
  OpenZWaveRemoteValueID * ___valueId;
  int32_t ___value;

  BOOL ___sceneId_isset;
  BOOL ___valueId_isset;
  BOOL ___value_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=_sceneId, setter=set_sceneId:) uint8_t _sceneId;
@property (nonatomic, retain, getter=_valueId, setter=set_valueId:) OpenZWaveRemoteValueID * _valueId;
@property (nonatomic, getter=_value, setter=set_value:) int32_t _value;
#endif

- (id) init;
- (id) initWith_sceneId: (uint8_t) _sceneId _valueId: (OpenZWaveRemoteValueID *) _valueId _value: (int32_t) _value;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (uint8_t) _sceneId;
- (void) set_sceneId: (uint8_t) _sceneId;
#endif
- (BOOL) _sceneIdIsSet;

#if !__has_feature(objc_arc)
- (OpenZWaveRemoteValueID *) _valueId;
- (void) set_valueId: (OpenZWaveRemoteValueID *) _valueId;
#endif
- (BOOL) _valueIdIsSet;

#if !__has_feature(objc_arc)
- (int32_t) _value;
- (void) set_value: (int32_t) _value;
#endif
- (BOOL) _valueIsSet;

@end

@implementation OpenZWaveSetSceneValue_Int32_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_sceneId: (uint8_t) _sceneId _valueId: (OpenZWaveRemoteValueID *) _valueId _value: (int32_t) _value
{
  self = [super init];
  ___sceneId = _sceneId;
  ___sceneId_isset = YES;
  ___valueId = [_valueId retain_stub];
  ___valueId_isset = YES;
  ___value = _value;
  ___value_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_sceneId"])
  {
    ___sceneId = [decoder decodeIntForKey: @"_sceneId"];
    ___sceneId_isset = YES;
  }
  if ([decoder containsValueForKey: @"_valueId"])
  {
    ___valueId = [[decoder decodeObjectForKey: @"_valueId"] retain_stub];
    ___valueId_isset = YES;
  }
  if ([decoder containsValueForKey: @"_value"])
  {
    ___value = [decoder decodeInt32ForKey: @"_value"];
    ___value_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___sceneId_isset)
  {
    [encoder encodeInt: ___sceneId forKey: @"_sceneId"];
  }
  if (___valueId_isset)
  {
    [encoder encodeObject: ___valueId forKey: @"_valueId"];
  }
  if (___value_isset)
  {
    [encoder encodeInt32: ___value forKey: @"_value"];
  }
}

- (void) dealloc
{
  [___valueId release_stub];
  [super dealloc_stub];
}

- (uint8_t) _sceneId {
  return ___sceneId;
}

- (void) set_sceneId: (uint8_t) _sceneId {
  ___sceneId = _sceneId;
  ___sceneId_isset = YES;
}

- (BOOL) _sceneIdIsSet {
  return ___sceneId_isset;
}

- (void) unset_sceneId {
  ___sceneId_isset = NO;
}

- (OpenZWaveRemoteValueID *) _valueId {
  return [[___valueId retain_stub] autorelease_stub];
}

- (void) set_valueId: (OpenZWaveRemoteValueID *) _valueId {
  [_valueId retain_stub];
  [___valueId release_stub];
  ___valueId = _valueId;
  ___valueId_isset = YES;
}

- (BOOL) _valueIdIsSet {
  return ___valueId_isset;
}

- (void) unset_valueId {
  [___valueId release_stub];
  ___valueId = nil;
  ___valueId_isset = NO;
}

- (int32_t) _value {
  return ___value;
}

- (void) set_value: (int32_t) _value {
  ___value = _value;
  ___value_isset = YES;
}

- (BOOL) _valueIsSet {
  return ___value_isset;
}

- (void) unset_value {
  ___value_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self set_sceneId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          OpenZWaveRemoteValueID *fieldValue = [[OpenZWaveRemoteValueID alloc] init];
          [fieldValue read: inProtocol];
          [self set_valueId: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self set_value: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SetSceneValue_Int32_args"];
  if (___sceneId_isset) {
    [outProtocol writeFieldBeginWithName: @"_sceneId" type: TType_BYTE fieldID: 1];
    [outProtocol writeByte: ___sceneId];
    [outProtocol writeFieldEnd];
  }
  if (___valueId_isset) {
    if (___valueId != nil) {
      [outProtocol writeFieldBeginWithName: @"_valueId" type: TType_STRUCT fieldID: 2];
      [___valueId write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (___value_isset) {
    [outProtocol writeFieldBeginWithName: @"_value" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: ___value];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SetSceneValue_Int32_args("];
  [ms appendString: @"_sceneId:"];
  [ms appendFormat: @"%i", ___sceneId];
  [ms appendString: @",_valueId:"];
  [ms appendFormat: @"%@", ___valueId];
  [ms appendString: @",_value:"];
  [ms appendFormat: @"%i", ___value];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveSetSceneValue_Int32_result : NSObject <NSCoding> {
  BOOL __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) BOOL success;
#endif

- (id) init;
- (id) initWithSuccess: (BOOL) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (BOOL) success;
- (void) setSuccess: (BOOL) success;
#endif
- (BOOL) successIsSet;

@end

@implementation OpenZWaveSetSceneValue_Int32_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (BOOL) success
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeBoolForKey: @"success"];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeBool: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (BOOL) success {
  return __success;
}

- (void) setSuccess: (BOOL) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SetSceneValue_Int32_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
    [outProtocol writeBool: __success];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SetSceneValue_Int32_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveSetSceneValue_Int16_args : NSObject <NSCoding> {
  uint8_t ___sceneId;
  OpenZWaveRemoteValueID * ___valueId;
  int16_t ___value;

  BOOL ___sceneId_isset;
  BOOL ___valueId_isset;
  BOOL ___value_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=_sceneId, setter=set_sceneId:) uint8_t _sceneId;
@property (nonatomic, retain, getter=_valueId, setter=set_valueId:) OpenZWaveRemoteValueID * _valueId;
@property (nonatomic, getter=_value, setter=set_value:) int16_t _value;
#endif

- (id) init;
- (id) initWith_sceneId: (uint8_t) _sceneId _valueId: (OpenZWaveRemoteValueID *) _valueId _value: (int16_t) _value;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (uint8_t) _sceneId;
- (void) set_sceneId: (uint8_t) _sceneId;
#endif
- (BOOL) _sceneIdIsSet;

#if !__has_feature(objc_arc)
- (OpenZWaveRemoteValueID *) _valueId;
- (void) set_valueId: (OpenZWaveRemoteValueID *) _valueId;
#endif
- (BOOL) _valueIdIsSet;

#if !__has_feature(objc_arc)
- (int16_t) _value;
- (void) set_value: (int16_t) _value;
#endif
- (BOOL) _valueIsSet;

@end

@implementation OpenZWaveSetSceneValue_Int16_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_sceneId: (uint8_t) _sceneId _valueId: (OpenZWaveRemoteValueID *) _valueId _value: (int16_t) _value
{
  self = [super init];
  ___sceneId = _sceneId;
  ___sceneId_isset = YES;
  ___valueId = [_valueId retain_stub];
  ___valueId_isset = YES;
  ___value = _value;
  ___value_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_sceneId"])
  {
    ___sceneId = [decoder decodeIntForKey: @"_sceneId"];
    ___sceneId_isset = YES;
  }
  if ([decoder containsValueForKey: @"_valueId"])
  {
    ___valueId = [[decoder decodeObjectForKey: @"_valueId"] retain_stub];
    ___valueId_isset = YES;
  }
  if ([decoder containsValueForKey: @"_value"])
  {
    ___value = [decoder decodeIntForKey: @"_value"];
    ___value_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___sceneId_isset)
  {
    [encoder encodeInt: ___sceneId forKey: @"_sceneId"];
  }
  if (___valueId_isset)
  {
    [encoder encodeObject: ___valueId forKey: @"_valueId"];
  }
  if (___value_isset)
  {
    [encoder encodeInt: ___value forKey: @"_value"];
  }
}

- (void) dealloc
{
  [___valueId release_stub];
  [super dealloc_stub];
}

- (uint8_t) _sceneId {
  return ___sceneId;
}

- (void) set_sceneId: (uint8_t) _sceneId {
  ___sceneId = _sceneId;
  ___sceneId_isset = YES;
}

- (BOOL) _sceneIdIsSet {
  return ___sceneId_isset;
}

- (void) unset_sceneId {
  ___sceneId_isset = NO;
}

- (OpenZWaveRemoteValueID *) _valueId {
  return [[___valueId retain_stub] autorelease_stub];
}

- (void) set_valueId: (OpenZWaveRemoteValueID *) _valueId {
  [_valueId retain_stub];
  [___valueId release_stub];
  ___valueId = _valueId;
  ___valueId_isset = YES;
}

- (BOOL) _valueIdIsSet {
  return ___valueId_isset;
}

- (void) unset_valueId {
  [___valueId release_stub];
  ___valueId = nil;
  ___valueId_isset = NO;
}

- (int16_t) _value {
  return ___value;
}

- (void) set_value: (int16_t) _value {
  ___value = _value;
  ___value_isset = YES;
}

- (BOOL) _valueIsSet {
  return ___value_isset;
}

- (void) unset_value {
  ___value_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self set_sceneId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          OpenZWaveRemoteValueID *fieldValue = [[OpenZWaveRemoteValueID alloc] init];
          [fieldValue read: inProtocol];
          [self set_valueId: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I16) {
          int16_t fieldValue = [inProtocol readI16];
          [self set_value: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SetSceneValue_Int16_args"];
  if (___sceneId_isset) {
    [outProtocol writeFieldBeginWithName: @"_sceneId" type: TType_BYTE fieldID: 1];
    [outProtocol writeByte: ___sceneId];
    [outProtocol writeFieldEnd];
  }
  if (___valueId_isset) {
    if (___valueId != nil) {
      [outProtocol writeFieldBeginWithName: @"_valueId" type: TType_STRUCT fieldID: 2];
      [___valueId write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (___value_isset) {
    [outProtocol writeFieldBeginWithName: @"_value" type: TType_I16 fieldID: 3];
    [outProtocol writeI16: ___value];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SetSceneValue_Int16_args("];
  [ms appendString: @"_sceneId:"];
  [ms appendFormat: @"%i", ___sceneId];
  [ms appendString: @",_valueId:"];
  [ms appendFormat: @"%@", ___valueId];
  [ms appendString: @",_value:"];
  [ms appendFormat: @"%hi", ___value];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveSetSceneValue_Int16_result : NSObject <NSCoding> {
  BOOL __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) BOOL success;
#endif

- (id) init;
- (id) initWithSuccess: (BOOL) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (BOOL) success;
- (void) setSuccess: (BOOL) success;
#endif
- (BOOL) successIsSet;

@end

@implementation OpenZWaveSetSceneValue_Int16_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (BOOL) success
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeBoolForKey: @"success"];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeBool: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (BOOL) success {
  return __success;
}

- (void) setSuccess: (BOOL) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SetSceneValue_Int16_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
    [outProtocol writeBool: __success];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SetSceneValue_Int16_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveSetSceneValue_String_args : NSObject <NSCoding> {
  uint8_t ___sceneId;
  OpenZWaveRemoteValueID * ___valueId;
  NSString * ___value;

  BOOL ___sceneId_isset;
  BOOL ___valueId_isset;
  BOOL ___value_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=_sceneId, setter=set_sceneId:) uint8_t _sceneId;
@property (nonatomic, retain, getter=_valueId, setter=set_valueId:) OpenZWaveRemoteValueID * _valueId;
@property (nonatomic, retain, getter=_value, setter=set_value:) NSString * _value;
#endif

- (id) init;
- (id) initWith_sceneId: (uint8_t) _sceneId _valueId: (OpenZWaveRemoteValueID *) _valueId _value: (NSString *) _value;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (uint8_t) _sceneId;
- (void) set_sceneId: (uint8_t) _sceneId;
#endif
- (BOOL) _sceneIdIsSet;

#if !__has_feature(objc_arc)
- (OpenZWaveRemoteValueID *) _valueId;
- (void) set_valueId: (OpenZWaveRemoteValueID *) _valueId;
#endif
- (BOOL) _valueIdIsSet;

#if !__has_feature(objc_arc)
- (NSString *) _value;
- (void) set_value: (NSString *) _value;
#endif
- (BOOL) _valueIsSet;

@end

@implementation OpenZWaveSetSceneValue_String_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_sceneId: (uint8_t) _sceneId _valueId: (OpenZWaveRemoteValueID *) _valueId _value: (NSString *) _value
{
  self = [super init];
  ___sceneId = _sceneId;
  ___sceneId_isset = YES;
  ___valueId = [_valueId retain_stub];
  ___valueId_isset = YES;
  ___value = [_value retain_stub];
  ___value_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_sceneId"])
  {
    ___sceneId = [decoder decodeIntForKey: @"_sceneId"];
    ___sceneId_isset = YES;
  }
  if ([decoder containsValueForKey: @"_valueId"])
  {
    ___valueId = [[decoder decodeObjectForKey: @"_valueId"] retain_stub];
    ___valueId_isset = YES;
  }
  if ([decoder containsValueForKey: @"_value"])
  {
    ___value = [[decoder decodeObjectForKey: @"_value"] retain_stub];
    ___value_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___sceneId_isset)
  {
    [encoder encodeInt: ___sceneId forKey: @"_sceneId"];
  }
  if (___valueId_isset)
  {
    [encoder encodeObject: ___valueId forKey: @"_valueId"];
  }
  if (___value_isset)
  {
    [encoder encodeObject: ___value forKey: @"_value"];
  }
}

- (void) dealloc
{
  [___valueId release_stub];
  [___value release_stub];
  [super dealloc_stub];
}

- (uint8_t) _sceneId {
  return ___sceneId;
}

- (void) set_sceneId: (uint8_t) _sceneId {
  ___sceneId = _sceneId;
  ___sceneId_isset = YES;
}

- (BOOL) _sceneIdIsSet {
  return ___sceneId_isset;
}

- (void) unset_sceneId {
  ___sceneId_isset = NO;
}

- (OpenZWaveRemoteValueID *) _valueId {
  return [[___valueId retain_stub] autorelease_stub];
}

- (void) set_valueId: (OpenZWaveRemoteValueID *) _valueId {
  [_valueId retain_stub];
  [___valueId release_stub];
  ___valueId = _valueId;
  ___valueId_isset = YES;
}

- (BOOL) _valueIdIsSet {
  return ___valueId_isset;
}

- (void) unset_valueId {
  [___valueId release_stub];
  ___valueId = nil;
  ___valueId_isset = NO;
}

- (NSString *) _value {
  return [[___value retain_stub] autorelease_stub];
}

- (void) set_value: (NSString *) _value {
  [_value retain_stub];
  [___value release_stub];
  ___value = _value;
  ___value_isset = YES;
}

- (BOOL) _valueIsSet {
  return ___value_isset;
}

- (void) unset_value {
  [___value release_stub];
  ___value = nil;
  ___value_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self set_sceneId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          OpenZWaveRemoteValueID *fieldValue = [[OpenZWaveRemoteValueID alloc] init];
          [fieldValue read: inProtocol];
          [self set_valueId: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self set_value: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SetSceneValue_String_args"];
  if (___sceneId_isset) {
    [outProtocol writeFieldBeginWithName: @"_sceneId" type: TType_BYTE fieldID: 1];
    [outProtocol writeByte: ___sceneId];
    [outProtocol writeFieldEnd];
  }
  if (___valueId_isset) {
    if (___valueId != nil) {
      [outProtocol writeFieldBeginWithName: @"_valueId" type: TType_STRUCT fieldID: 2];
      [___valueId write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (___value_isset) {
    if (___value != nil) {
      [outProtocol writeFieldBeginWithName: @"_value" type: TType_STRING fieldID: 3];
      [outProtocol writeString: ___value];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SetSceneValue_String_args("];
  [ms appendString: @"_sceneId:"];
  [ms appendFormat: @"%i", ___sceneId];
  [ms appendString: @",_valueId:"];
  [ms appendFormat: @"%@", ___valueId];
  [ms appendString: @",_value:"];
  [ms appendFormat: @"\"%@\"", ___value];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveSetSceneValue_String_result : NSObject <NSCoding> {
  BOOL __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) BOOL success;
#endif

- (id) init;
- (id) initWithSuccess: (BOOL) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (BOOL) success;
- (void) setSuccess: (BOOL) success;
#endif
- (BOOL) successIsSet;

@end

@implementation OpenZWaveSetSceneValue_String_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (BOOL) success
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeBoolForKey: @"success"];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeBool: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (BOOL) success {
  return __success;
}

- (void) setSuccess: (BOOL) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SetSceneValue_String_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
    [outProtocol writeBool: __success];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SetSceneValue_String_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveSetSceneValueListSelection_String_args : NSObject <NSCoding> {
  uint8_t ___sceneId;
  OpenZWaveRemoteValueID * ___valueId;
  NSString * ___value;

  BOOL ___sceneId_isset;
  BOOL ___valueId_isset;
  BOOL ___value_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=_sceneId, setter=set_sceneId:) uint8_t _sceneId;
@property (nonatomic, retain, getter=_valueId, setter=set_valueId:) OpenZWaveRemoteValueID * _valueId;
@property (nonatomic, retain, getter=_value, setter=set_value:) NSString * _value;
#endif

- (id) init;
- (id) initWith_sceneId: (uint8_t) _sceneId _valueId: (OpenZWaveRemoteValueID *) _valueId _value: (NSString *) _value;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (uint8_t) _sceneId;
- (void) set_sceneId: (uint8_t) _sceneId;
#endif
- (BOOL) _sceneIdIsSet;

#if !__has_feature(objc_arc)
- (OpenZWaveRemoteValueID *) _valueId;
- (void) set_valueId: (OpenZWaveRemoteValueID *) _valueId;
#endif
- (BOOL) _valueIdIsSet;

#if !__has_feature(objc_arc)
- (NSString *) _value;
- (void) set_value: (NSString *) _value;
#endif
- (BOOL) _valueIsSet;

@end

@implementation OpenZWaveSetSceneValueListSelection_String_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_sceneId: (uint8_t) _sceneId _valueId: (OpenZWaveRemoteValueID *) _valueId _value: (NSString *) _value
{
  self = [super init];
  ___sceneId = _sceneId;
  ___sceneId_isset = YES;
  ___valueId = [_valueId retain_stub];
  ___valueId_isset = YES;
  ___value = [_value retain_stub];
  ___value_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_sceneId"])
  {
    ___sceneId = [decoder decodeIntForKey: @"_sceneId"];
    ___sceneId_isset = YES;
  }
  if ([decoder containsValueForKey: @"_valueId"])
  {
    ___valueId = [[decoder decodeObjectForKey: @"_valueId"] retain_stub];
    ___valueId_isset = YES;
  }
  if ([decoder containsValueForKey: @"_value"])
  {
    ___value = [[decoder decodeObjectForKey: @"_value"] retain_stub];
    ___value_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___sceneId_isset)
  {
    [encoder encodeInt: ___sceneId forKey: @"_sceneId"];
  }
  if (___valueId_isset)
  {
    [encoder encodeObject: ___valueId forKey: @"_valueId"];
  }
  if (___value_isset)
  {
    [encoder encodeObject: ___value forKey: @"_value"];
  }
}

- (void) dealloc
{
  [___valueId release_stub];
  [___value release_stub];
  [super dealloc_stub];
}

- (uint8_t) _sceneId {
  return ___sceneId;
}

- (void) set_sceneId: (uint8_t) _sceneId {
  ___sceneId = _sceneId;
  ___sceneId_isset = YES;
}

- (BOOL) _sceneIdIsSet {
  return ___sceneId_isset;
}

- (void) unset_sceneId {
  ___sceneId_isset = NO;
}

- (OpenZWaveRemoteValueID *) _valueId {
  return [[___valueId retain_stub] autorelease_stub];
}

- (void) set_valueId: (OpenZWaveRemoteValueID *) _valueId {
  [_valueId retain_stub];
  [___valueId release_stub];
  ___valueId = _valueId;
  ___valueId_isset = YES;
}

- (BOOL) _valueIdIsSet {
  return ___valueId_isset;
}

- (void) unset_valueId {
  [___valueId release_stub];
  ___valueId = nil;
  ___valueId_isset = NO;
}

- (NSString *) _value {
  return [[___value retain_stub] autorelease_stub];
}

- (void) set_value: (NSString *) _value {
  [_value retain_stub];
  [___value release_stub];
  ___value = _value;
  ___value_isset = YES;
}

- (BOOL) _valueIsSet {
  return ___value_isset;
}

- (void) unset_value {
  [___value release_stub];
  ___value = nil;
  ___value_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self set_sceneId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          OpenZWaveRemoteValueID *fieldValue = [[OpenZWaveRemoteValueID alloc] init];
          [fieldValue read: inProtocol];
          [self set_valueId: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self set_value: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SetSceneValueListSelection_String_args"];
  if (___sceneId_isset) {
    [outProtocol writeFieldBeginWithName: @"_sceneId" type: TType_BYTE fieldID: 1];
    [outProtocol writeByte: ___sceneId];
    [outProtocol writeFieldEnd];
  }
  if (___valueId_isset) {
    if (___valueId != nil) {
      [outProtocol writeFieldBeginWithName: @"_valueId" type: TType_STRUCT fieldID: 2];
      [___valueId write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (___value_isset) {
    if (___value != nil) {
      [outProtocol writeFieldBeginWithName: @"_value" type: TType_STRING fieldID: 3];
      [outProtocol writeString: ___value];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SetSceneValueListSelection_String_args("];
  [ms appendString: @"_sceneId:"];
  [ms appendFormat: @"%i", ___sceneId];
  [ms appendString: @",_valueId:"];
  [ms appendFormat: @"%@", ___valueId];
  [ms appendString: @",_value:"];
  [ms appendFormat: @"\"%@\"", ___value];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveSetSceneValueListSelection_String_result : NSObject <NSCoding> {
  BOOL __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) BOOL success;
#endif

- (id) init;
- (id) initWithSuccess: (BOOL) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (BOOL) success;
- (void) setSuccess: (BOOL) success;
#endif
- (BOOL) successIsSet;

@end

@implementation OpenZWaveSetSceneValueListSelection_String_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (BOOL) success
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeBoolForKey: @"success"];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeBool: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (BOOL) success {
  return __success;
}

- (void) setSuccess: (BOOL) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SetSceneValueListSelection_String_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
    [outProtocol writeBool: __success];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SetSceneValueListSelection_String_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveSetSceneValueListSelection_Int32_args : NSObject <NSCoding> {
  uint8_t ___sceneId;
  OpenZWaveRemoteValueID * ___valueId;
  int32_t ___value;

  BOOL ___sceneId_isset;
  BOOL ___valueId_isset;
  BOOL ___value_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=_sceneId, setter=set_sceneId:) uint8_t _sceneId;
@property (nonatomic, retain, getter=_valueId, setter=set_valueId:) OpenZWaveRemoteValueID * _valueId;
@property (nonatomic, getter=_value, setter=set_value:) int32_t _value;
#endif

- (id) init;
- (id) initWith_sceneId: (uint8_t) _sceneId _valueId: (OpenZWaveRemoteValueID *) _valueId _value: (int32_t) _value;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (uint8_t) _sceneId;
- (void) set_sceneId: (uint8_t) _sceneId;
#endif
- (BOOL) _sceneIdIsSet;

#if !__has_feature(objc_arc)
- (OpenZWaveRemoteValueID *) _valueId;
- (void) set_valueId: (OpenZWaveRemoteValueID *) _valueId;
#endif
- (BOOL) _valueIdIsSet;

#if !__has_feature(objc_arc)
- (int32_t) _value;
- (void) set_value: (int32_t) _value;
#endif
- (BOOL) _valueIsSet;

@end

@implementation OpenZWaveSetSceneValueListSelection_Int32_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_sceneId: (uint8_t) _sceneId _valueId: (OpenZWaveRemoteValueID *) _valueId _value: (int32_t) _value
{
  self = [super init];
  ___sceneId = _sceneId;
  ___sceneId_isset = YES;
  ___valueId = [_valueId retain_stub];
  ___valueId_isset = YES;
  ___value = _value;
  ___value_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_sceneId"])
  {
    ___sceneId = [decoder decodeIntForKey: @"_sceneId"];
    ___sceneId_isset = YES;
  }
  if ([decoder containsValueForKey: @"_valueId"])
  {
    ___valueId = [[decoder decodeObjectForKey: @"_valueId"] retain_stub];
    ___valueId_isset = YES;
  }
  if ([decoder containsValueForKey: @"_value"])
  {
    ___value = [decoder decodeInt32ForKey: @"_value"];
    ___value_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___sceneId_isset)
  {
    [encoder encodeInt: ___sceneId forKey: @"_sceneId"];
  }
  if (___valueId_isset)
  {
    [encoder encodeObject: ___valueId forKey: @"_valueId"];
  }
  if (___value_isset)
  {
    [encoder encodeInt32: ___value forKey: @"_value"];
  }
}

- (void) dealloc
{
  [___valueId release_stub];
  [super dealloc_stub];
}

- (uint8_t) _sceneId {
  return ___sceneId;
}

- (void) set_sceneId: (uint8_t) _sceneId {
  ___sceneId = _sceneId;
  ___sceneId_isset = YES;
}

- (BOOL) _sceneIdIsSet {
  return ___sceneId_isset;
}

- (void) unset_sceneId {
  ___sceneId_isset = NO;
}

- (OpenZWaveRemoteValueID *) _valueId {
  return [[___valueId retain_stub] autorelease_stub];
}

- (void) set_valueId: (OpenZWaveRemoteValueID *) _valueId {
  [_valueId retain_stub];
  [___valueId release_stub];
  ___valueId = _valueId;
  ___valueId_isset = YES;
}

- (BOOL) _valueIdIsSet {
  return ___valueId_isset;
}

- (void) unset_valueId {
  [___valueId release_stub];
  ___valueId = nil;
  ___valueId_isset = NO;
}

- (int32_t) _value {
  return ___value;
}

- (void) set_value: (int32_t) _value {
  ___value = _value;
  ___value_isset = YES;
}

- (BOOL) _valueIsSet {
  return ___value_isset;
}

- (void) unset_value {
  ___value_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self set_sceneId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          OpenZWaveRemoteValueID *fieldValue = [[OpenZWaveRemoteValueID alloc] init];
          [fieldValue read: inProtocol];
          [self set_valueId: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self set_value: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SetSceneValueListSelection_Int32_args"];
  if (___sceneId_isset) {
    [outProtocol writeFieldBeginWithName: @"_sceneId" type: TType_BYTE fieldID: 1];
    [outProtocol writeByte: ___sceneId];
    [outProtocol writeFieldEnd];
  }
  if (___valueId_isset) {
    if (___valueId != nil) {
      [outProtocol writeFieldBeginWithName: @"_valueId" type: TType_STRUCT fieldID: 2];
      [___valueId write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (___value_isset) {
    [outProtocol writeFieldBeginWithName: @"_value" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: ___value];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SetSceneValueListSelection_Int32_args("];
  [ms appendString: @"_sceneId:"];
  [ms appendFormat: @"%i", ___sceneId];
  [ms appendString: @",_valueId:"];
  [ms appendFormat: @"%@", ___valueId];
  [ms appendString: @",_value:"];
  [ms appendFormat: @"%i", ___value];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveSetSceneValueListSelection_Int32_result : NSObject <NSCoding> {
  BOOL __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) BOOL success;
#endif

- (id) init;
- (id) initWithSuccess: (BOOL) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (BOOL) success;
- (void) setSuccess: (BOOL) success;
#endif
- (BOOL) successIsSet;

@end

@implementation OpenZWaveSetSceneValueListSelection_Int32_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (BOOL) success
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeBoolForKey: @"success"];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeBool: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (BOOL) success {
  return __success;
}

- (void) setSuccess: (BOOL) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SetSceneValueListSelection_Int32_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
    [outProtocol writeBool: __success];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SetSceneValueListSelection_Int32_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveGetSceneLabel_args : NSObject <NSCoding> {
  uint8_t ___sceneId;

  BOOL ___sceneId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=_sceneId, setter=set_sceneId:) uint8_t _sceneId;
#endif

- (id) init;
- (id) initWith_sceneId: (uint8_t) _sceneId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (uint8_t) _sceneId;
- (void) set_sceneId: (uint8_t) _sceneId;
#endif
- (BOOL) _sceneIdIsSet;

@end

@implementation OpenZWaveGetSceneLabel_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_sceneId: (uint8_t) _sceneId
{
  self = [super init];
  ___sceneId = _sceneId;
  ___sceneId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_sceneId"])
  {
    ___sceneId = [decoder decodeIntForKey: @"_sceneId"];
    ___sceneId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___sceneId_isset)
  {
    [encoder encodeInt: ___sceneId forKey: @"_sceneId"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (uint8_t) _sceneId {
  return ___sceneId;
}

- (void) set_sceneId: (uint8_t) _sceneId {
  ___sceneId = _sceneId;
  ___sceneId_isset = YES;
}

- (BOOL) _sceneIdIsSet {
  return ___sceneId_isset;
}

- (void) unset_sceneId {
  ___sceneId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self set_sceneId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetSceneLabel_args"];
  if (___sceneId_isset) {
    [outProtocol writeFieldBeginWithName: @"_sceneId" type: TType_BYTE fieldID: 1];
    [outProtocol writeByte: ___sceneId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetSceneLabel_args("];
  [ms appendString: @"_sceneId:"];
  [ms appendFormat: @"%i", ___sceneId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveGetSceneLabel_result : NSObject <NSCoding> {
  NSString * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSString * success;
#endif

- (id) init;
- (id) initWithSuccess: (NSString *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (NSString *) success;
- (void) setSuccess: (NSString *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation OpenZWaveGetSceneLabel_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NSString *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (NSString *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSString *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetSceneLabel_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRING fieldID: 0];
      [outProtocol writeString: __success];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetSceneLabel_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"\"%@\"", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveSetSceneLabel_args : NSObject <NSCoding> {
  uint8_t ___sceneId;
  NSString * ___value;

  BOOL ___sceneId_isset;
  BOOL ___value_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=_sceneId, setter=set_sceneId:) uint8_t _sceneId;
@property (nonatomic, retain, getter=_value, setter=set_value:) NSString * _value;
#endif

- (id) init;
- (id) initWith_sceneId: (uint8_t) _sceneId _value: (NSString *) _value;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (uint8_t) _sceneId;
- (void) set_sceneId: (uint8_t) _sceneId;
#endif
- (BOOL) _sceneIdIsSet;

#if !__has_feature(objc_arc)
- (NSString *) _value;
- (void) set_value: (NSString *) _value;
#endif
- (BOOL) _valueIsSet;

@end

@implementation OpenZWaveSetSceneLabel_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_sceneId: (uint8_t) _sceneId _value: (NSString *) _value
{
  self = [super init];
  ___sceneId = _sceneId;
  ___sceneId_isset = YES;
  ___value = [_value retain_stub];
  ___value_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_sceneId"])
  {
    ___sceneId = [decoder decodeIntForKey: @"_sceneId"];
    ___sceneId_isset = YES;
  }
  if ([decoder containsValueForKey: @"_value"])
  {
    ___value = [[decoder decodeObjectForKey: @"_value"] retain_stub];
    ___value_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___sceneId_isset)
  {
    [encoder encodeInt: ___sceneId forKey: @"_sceneId"];
  }
  if (___value_isset)
  {
    [encoder encodeObject: ___value forKey: @"_value"];
  }
}

- (void) dealloc
{
  [___value release_stub];
  [super dealloc_stub];
}

- (uint8_t) _sceneId {
  return ___sceneId;
}

- (void) set_sceneId: (uint8_t) _sceneId {
  ___sceneId = _sceneId;
  ___sceneId_isset = YES;
}

- (BOOL) _sceneIdIsSet {
  return ___sceneId_isset;
}

- (void) unset_sceneId {
  ___sceneId_isset = NO;
}

- (NSString *) _value {
  return [[___value retain_stub] autorelease_stub];
}

- (void) set_value: (NSString *) _value {
  [_value retain_stub];
  [___value release_stub];
  ___value = _value;
  ___value_isset = YES;
}

- (BOOL) _valueIsSet {
  return ___value_isset;
}

- (void) unset_value {
  [___value release_stub];
  ___value = nil;
  ___value_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self set_sceneId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self set_value: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SetSceneLabel_args"];
  if (___sceneId_isset) {
    [outProtocol writeFieldBeginWithName: @"_sceneId" type: TType_BYTE fieldID: 1];
    [outProtocol writeByte: ___sceneId];
    [outProtocol writeFieldEnd];
  }
  if (___value_isset) {
    if (___value != nil) {
      [outProtocol writeFieldBeginWithName: @"_value" type: TType_STRING fieldID: 2];
      [outProtocol writeString: ___value];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SetSceneLabel_args("];
  [ms appendString: @"_sceneId:"];
  [ms appendFormat: @"%i", ___sceneId];
  [ms appendString: @",_value:"];
  [ms appendFormat: @"\"%@\"", ___value];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveSetSceneLabel_result : NSObject <NSCoding> {
}

- (id) init;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

@end

@implementation OpenZWaveSetSceneLabel_result

- (id) init
{
  self = [super init];
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SetSceneLabel_result"];

  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SetSceneLabel_result("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveSceneExists_args : NSObject <NSCoding> {
  uint8_t ___sceneId;

  BOOL ___sceneId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=_sceneId, setter=set_sceneId:) uint8_t _sceneId;
#endif

- (id) init;
- (id) initWith_sceneId: (uint8_t) _sceneId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (uint8_t) _sceneId;
- (void) set_sceneId: (uint8_t) _sceneId;
#endif
- (BOOL) _sceneIdIsSet;

@end

@implementation OpenZWaveSceneExists_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_sceneId: (uint8_t) _sceneId
{
  self = [super init];
  ___sceneId = _sceneId;
  ___sceneId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_sceneId"])
  {
    ___sceneId = [decoder decodeIntForKey: @"_sceneId"];
    ___sceneId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___sceneId_isset)
  {
    [encoder encodeInt: ___sceneId forKey: @"_sceneId"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (uint8_t) _sceneId {
  return ___sceneId;
}

- (void) set_sceneId: (uint8_t) _sceneId {
  ___sceneId = _sceneId;
  ___sceneId_isset = YES;
}

- (BOOL) _sceneIdIsSet {
  return ___sceneId_isset;
}

- (void) unset_sceneId {
  ___sceneId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self set_sceneId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SceneExists_args"];
  if (___sceneId_isset) {
    [outProtocol writeFieldBeginWithName: @"_sceneId" type: TType_BYTE fieldID: 1];
    [outProtocol writeByte: ___sceneId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SceneExists_args("];
  [ms appendString: @"_sceneId:"];
  [ms appendFormat: @"%i", ___sceneId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveSceneExists_result : NSObject <NSCoding> {
  BOOL __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) BOOL success;
#endif

- (id) init;
- (id) initWithSuccess: (BOOL) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (BOOL) success;
- (void) setSuccess: (BOOL) success;
#endif
- (BOOL) successIsSet;

@end

@implementation OpenZWaveSceneExists_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (BOOL) success
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeBoolForKey: @"success"];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeBool: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (BOOL) success {
  return __success;
}

- (void) setSuccess: (BOOL) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SceneExists_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
    [outProtocol writeBool: __success];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SceneExists_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveActivateScene_args : NSObject <NSCoding> {
  uint8_t ___sceneId;

  BOOL ___sceneId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=_sceneId, setter=set_sceneId:) uint8_t _sceneId;
#endif

- (id) init;
- (id) initWith_sceneId: (uint8_t) _sceneId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (uint8_t) _sceneId;
- (void) set_sceneId: (uint8_t) _sceneId;
#endif
- (BOOL) _sceneIdIsSet;

@end

@implementation OpenZWaveActivateScene_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_sceneId: (uint8_t) _sceneId
{
  self = [super init];
  ___sceneId = _sceneId;
  ___sceneId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_sceneId"])
  {
    ___sceneId = [decoder decodeIntForKey: @"_sceneId"];
    ___sceneId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___sceneId_isset)
  {
    [encoder encodeInt: ___sceneId forKey: @"_sceneId"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (uint8_t) _sceneId {
  return ___sceneId;
}

- (void) set_sceneId: (uint8_t) _sceneId {
  ___sceneId = _sceneId;
  ___sceneId_isset = YES;
}

- (BOOL) _sceneIdIsSet {
  return ___sceneId_isset;
}

- (void) unset_sceneId {
  ___sceneId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self set_sceneId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ActivateScene_args"];
  if (___sceneId_isset) {
    [outProtocol writeFieldBeginWithName: @"_sceneId" type: TType_BYTE fieldID: 1];
    [outProtocol writeByte: ___sceneId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ActivateScene_args("];
  [ms appendString: @"_sceneId:"];
  [ms appendFormat: @"%i", ___sceneId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveActivateScene_result : NSObject <NSCoding> {
  BOOL __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) BOOL success;
#endif

- (id) init;
- (id) initWithSuccess: (BOOL) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (BOOL) success;
- (void) setSuccess: (BOOL) success;
#endif
- (BOOL) successIsSet;

@end

@implementation OpenZWaveActivateScene_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (BOOL) success
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeBoolForKey: @"success"];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeBool: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (BOOL) success {
  return __success;
}

- (void) setSuccess: (BOOL) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ActivateScene_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
    [outProtocol writeBool: __success];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ActivateScene_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveGetDriverStatistics_args : NSObject <NSCoding> {
  int32_t ___homeId;

  BOOL ___homeId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=_homeId, setter=set_homeId:) int32_t _homeId;
#endif

- (id) init;
- (id) initWith_homeId: (int32_t) _homeId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (int32_t) _homeId;
- (void) set_homeId: (int32_t) _homeId;
#endif
- (BOOL) _homeIdIsSet;

@end

@implementation OpenZWaveGetDriverStatistics_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWith_homeId: (int32_t) _homeId
{
  self = [super init];
  ___homeId = _homeId;
  ___homeId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_homeId"])
  {
    ___homeId = [decoder decodeInt32ForKey: @"_homeId"];
    ___homeId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___homeId_isset)
  {
    [encoder encodeInt32: ___homeId forKey: @"_homeId"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (int32_t) _homeId {
  return ___homeId;
}

- (void) set_homeId: (int32_t) _homeId {
  ___homeId = _homeId;
  ___homeId_isset = YES;
}

- (BOOL) _homeIdIsSet {
  return ___homeId_isset;
}

- (void) unset_homeId {
  ___homeId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self set_homeId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetDriverStatistics_args"];
  if (___homeId_isset) {
    [outProtocol writeFieldBeginWithName: @"_homeId" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: ___homeId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetDriverStatistics_args("];
  [ms appendString: @"_homeId:"];
  [ms appendFormat: @"%i", ___homeId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveGetDriverStatistics_result : NSObject <NSCoding> {
  OpenZWaveGetDriverStatisticsReturnStruct * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) OpenZWaveGetDriverStatisticsReturnStruct * success;
#endif

- (id) init;
- (id) initWithSuccess: (OpenZWaveGetDriverStatisticsReturnStruct *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (OpenZWaveGetDriverStatisticsReturnStruct *) success;
- (void) setSuccess: (OpenZWaveGetDriverStatisticsReturnStruct *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation OpenZWaveGetDriverStatistics_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (OpenZWaveGetDriverStatisticsReturnStruct *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (OpenZWaveGetDriverStatisticsReturnStruct *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (OpenZWaveGetDriverStatisticsReturnStruct *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          OpenZWaveGetDriverStatisticsReturnStruct *fieldValue = [[OpenZWaveGetDriverStatisticsReturnStruct alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetDriverStatistics_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetDriverStatistics_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveSendAllValues_args : NSObject <NSCoding> {
}

- (id) init;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

@end

@implementation OpenZWaveSendAllValues_args

- (id) init
{
  self = [super init];
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SendAllValues_args"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SendAllValues_args("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface OpenZWaveSendAllValues_result : NSObject <NSCoding> {
}

- (id) init;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

@end

@implementation OpenZWaveSendAllValues_result

- (id) init
{
  self = [super init];
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SendAllValues_result"];

  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SendAllValues_result("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation OpenZWaveRemoteManagerClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
  return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
  self = [super init];
  inProtocol = [anInProtocol retain_stub];
  outProtocol = [anOutProtocol retain_stub];
  return self;
}

- (void) dealloc
{
  [inProtocol release_stub];
  [outProtocol release_stub];
  [super dealloc_stub];
}

- (void) send_WriteConfig: (int32_t) _homeId
{
  [outProtocol writeMessageBeginWithName: @"WriteConfig" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"WriteConfig_args"];
  [outProtocol writeFieldBeginWithName: @"_homeId" type: TType_I32 fieldID: 1];
  [outProtocol writeI32: _homeId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (void) recv_WriteConfig
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveWriteConfig_result * result = [[[OpenZWaveWriteConfig_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  return;
}

- (void) WriteConfig: (int32_t) _homeId
{
  [self send_WriteConfig: _homeId];
  [self recv_WriteConfig];
}

- (void) send_GetControllerNodeId: (int32_t) _homeId
{
  [outProtocol writeMessageBeginWithName: @"GetControllerNodeId" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"GetControllerNodeId_args"];
  [outProtocol writeFieldBeginWithName: @"_homeId" type: TType_I32 fieldID: 1];
  [outProtocol writeI32: _homeId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (uint8_t) recv_GetControllerNodeId
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveGetControllerNodeId_result * result = [[[OpenZWaveGetControllerNodeId_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"GetControllerNodeId failed: unknown result"];
}

- (uint8_t) GetControllerNodeId: (int32_t) _homeId
{
  [self send_GetControllerNodeId: _homeId];
  return [self recv_GetControllerNodeId];
}

- (void) send_IsPrimaryController: (int32_t) _homeId
{
  [outProtocol writeMessageBeginWithName: @"IsPrimaryController" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"IsPrimaryController_args"];
  [outProtocol writeFieldBeginWithName: @"_homeId" type: TType_I32 fieldID: 1];
  [outProtocol writeI32: _homeId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (BOOL) recv_IsPrimaryController
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveIsPrimaryController_result * result = [[[OpenZWaveIsPrimaryController_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"IsPrimaryController failed: unknown result"];
}

- (BOOL) IsPrimaryController: (int32_t) _homeId
{
  [self send_IsPrimaryController: _homeId];
  return [self recv_IsPrimaryController];
}

- (void) send_IsStaticUpdateController: (int32_t) _homeId
{
  [outProtocol writeMessageBeginWithName: @"IsStaticUpdateController" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"IsStaticUpdateController_args"];
  [outProtocol writeFieldBeginWithName: @"_homeId" type: TType_I32 fieldID: 1];
  [outProtocol writeI32: _homeId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (BOOL) recv_IsStaticUpdateController
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveIsStaticUpdateController_result * result = [[[OpenZWaveIsStaticUpdateController_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"IsStaticUpdateController failed: unknown result"];
}

- (BOOL) IsStaticUpdateController: (int32_t) _homeId
{
  [self send_IsStaticUpdateController: _homeId];
  return [self recv_IsStaticUpdateController];
}

- (void) send_IsBridgeController: (int32_t) _homeId
{
  [outProtocol writeMessageBeginWithName: @"IsBridgeController" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"IsBridgeController_args"];
  [outProtocol writeFieldBeginWithName: @"_homeId" type: TType_I32 fieldID: 1];
  [outProtocol writeI32: _homeId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (BOOL) recv_IsBridgeController
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveIsBridgeController_result * result = [[[OpenZWaveIsBridgeController_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"IsBridgeController failed: unknown result"];
}

- (BOOL) IsBridgeController: (int32_t) _homeId
{
  [self send_IsBridgeController: _homeId];
  return [self recv_IsBridgeController];
}

- (void) send_GetLibraryVersion: (int32_t) _homeId
{
  [outProtocol writeMessageBeginWithName: @"GetLibraryVersion" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"GetLibraryVersion_args"];
  [outProtocol writeFieldBeginWithName: @"_homeId" type: TType_I32 fieldID: 1];
  [outProtocol writeI32: _homeId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSString *) recv_GetLibraryVersion
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveGetLibraryVersion_result * result = [[[OpenZWaveGetLibraryVersion_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"GetLibraryVersion failed: unknown result"];
}

- (NSString *) GetLibraryVersion: (int32_t) _homeId
{
  [self send_GetLibraryVersion: _homeId];
  return [self recv_GetLibraryVersion];
}

- (void) send_GetLibraryTypeName: (int32_t) _homeId
{
  [outProtocol writeMessageBeginWithName: @"GetLibraryTypeName" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"GetLibraryTypeName_args"];
  [outProtocol writeFieldBeginWithName: @"_homeId" type: TType_I32 fieldID: 1];
  [outProtocol writeI32: _homeId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSString *) recv_GetLibraryTypeName
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveGetLibraryTypeName_result * result = [[[OpenZWaveGetLibraryTypeName_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"GetLibraryTypeName failed: unknown result"];
}

- (NSString *) GetLibraryTypeName: (int32_t) _homeId
{
  [self send_GetLibraryTypeName: _homeId];
  return [self recv_GetLibraryTypeName];
}

- (void) send_GetSendQueueCount: (int32_t) _homeId
{
  [outProtocol writeMessageBeginWithName: @"GetSendQueueCount" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"GetSendQueueCount_args"];
  [outProtocol writeFieldBeginWithName: @"_homeId" type: TType_I32 fieldID: 1];
  [outProtocol writeI32: _homeId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (int32_t) recv_GetSendQueueCount
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveGetSendQueueCount_result * result = [[[OpenZWaveGetSendQueueCount_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"GetSendQueueCount failed: unknown result"];
}

- (int32_t) GetSendQueueCount: (int32_t) _homeId
{
  [self send_GetSendQueueCount: _homeId];
  return [self recv_GetSendQueueCount];
}

- (void) send_LogDriverStatistics: (int32_t) _homeId
{
  [outProtocol writeMessageBeginWithName: @"LogDriverStatistics" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"LogDriverStatistics_args"];
  [outProtocol writeFieldBeginWithName: @"_homeId" type: TType_I32 fieldID: 1];
  [outProtocol writeI32: _homeId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (void) recv_LogDriverStatistics
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveLogDriverStatistics_result * result = [[[OpenZWaveLogDriverStatistics_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  return;
}

- (void) LogDriverStatistics: (int32_t) _homeId
{
  [self send_LogDriverStatistics: _homeId];
  [self recv_LogDriverStatistics];
}

- (void) send_GetPollInterval
{
  [outProtocol writeMessageBeginWithName: @"GetPollInterval" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"GetPollInterval_args"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (int32_t) recv_GetPollInterval
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveGetPollInterval_result * result = [[[OpenZWaveGetPollInterval_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"GetPollInterval failed: unknown result"];
}

- (int32_t) GetPollInterval
{
  [self send_GetPollInterval];
  return [self recv_GetPollInterval];
}

- (void) send_SetPollInterval: (int32_t) _milliseconds : (BOOL) _bIntervalBetweenPolls
{
  [outProtocol writeMessageBeginWithName: @"SetPollInterval" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"SetPollInterval_args"];
  [outProtocol writeFieldBeginWithName: @"_milliseconds" type: TType_I32 fieldID: 1];
  [outProtocol writeI32: _milliseconds];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"_bIntervalBetweenPolls" type: TType_BOOL fieldID: 2];
  [outProtocol writeBool: _bIntervalBetweenPolls];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (void) recv_SetPollInterval
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveSetPollInterval_result * result = [[[OpenZWaveSetPollInterval_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  return;
}

- (void) SetPollInterval: (int32_t) _milliseconds : (BOOL) _bIntervalBetweenPolls
{
  [self send_SetPollInterval: _milliseconds : _bIntervalBetweenPolls];
  [self recv_SetPollInterval];
}

- (void) send_EnablePoll: (OpenZWaveRemoteValueID *) _valueId : (uint8_t) _intensity
{
  [outProtocol writeMessageBeginWithName: @"EnablePoll" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"EnablePoll_args"];
  if (_valueId != nil)  {
    [outProtocol writeFieldBeginWithName: @"_valueId" type: TType_STRUCT fieldID: 1];
    [_valueId write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"_intensity" type: TType_BYTE fieldID: 2];
  [outProtocol writeByte: _intensity];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (BOOL) recv_EnablePoll
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveEnablePoll_result * result = [[[OpenZWaveEnablePoll_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"EnablePoll failed: unknown result"];
}

- (BOOL) EnablePoll: (OpenZWaveRemoteValueID *) _valueId : (uint8_t) _intensity
{
  [self send_EnablePoll: _valueId : _intensity];
  return [self recv_EnablePoll];
}

- (void) send_DisablePoll: (OpenZWaveRemoteValueID *) _valueId
{
  [outProtocol writeMessageBeginWithName: @"DisablePoll" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"DisablePoll_args"];
  if (_valueId != nil)  {
    [outProtocol writeFieldBeginWithName: @"_valueId" type: TType_STRUCT fieldID: 1];
    [_valueId write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (BOOL) recv_DisablePoll
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveDisablePoll_result * result = [[[OpenZWaveDisablePoll_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"DisablePoll failed: unknown result"];
}

- (BOOL) DisablePoll: (OpenZWaveRemoteValueID *) _valueId
{
  [self send_DisablePoll: _valueId];
  return [self recv_DisablePoll];
}

- (void) send_isPolled: (OpenZWaveRemoteValueID *) _valueId
{
  [outProtocol writeMessageBeginWithName: @"isPolled" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"isPolled_args"];
  if (_valueId != nil)  {
    [outProtocol writeFieldBeginWithName: @"_valueId" type: TType_STRUCT fieldID: 1];
    [_valueId write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (BOOL) recv_isPolled
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveIsPolled_result * result = [[[OpenZWaveIsPolled_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"isPolled failed: unknown result"];
}

- (BOOL) isPolled: (OpenZWaveRemoteValueID *) _valueId
{
  [self send_isPolled: _valueId];
  return [self recv_isPolled];
}

- (void) send_SetPollIntensity: (OpenZWaveRemoteValueID *) _valueId : (uint8_t) _intensity
{
  [outProtocol writeMessageBeginWithName: @"SetPollIntensity" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"SetPollIntensity_args"];
  if (_valueId != nil)  {
    [outProtocol writeFieldBeginWithName: @"_valueId" type: TType_STRUCT fieldID: 1];
    [_valueId write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"_intensity" type: TType_BYTE fieldID: 2];
  [outProtocol writeByte: _intensity];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (void) recv_SetPollIntensity
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveSetPollIntensity_result * result = [[[OpenZWaveSetPollIntensity_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  return;
}

- (void) SetPollIntensity: (OpenZWaveRemoteValueID *) _valueId : (uint8_t) _intensity
{
  [self send_SetPollIntensity: _valueId : _intensity];
  [self recv_SetPollIntensity];
}

- (void) send_RefreshNodeInfo: (int32_t) _homeId : (uint8_t) _nodeId
{
  [outProtocol writeMessageBeginWithName: @"RefreshNodeInfo" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"RefreshNodeInfo_args"];
  [outProtocol writeFieldBeginWithName: @"_homeId" type: TType_I32 fieldID: 1];
  [outProtocol writeI32: _homeId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"_nodeId" type: TType_BYTE fieldID: 2];
  [outProtocol writeByte: _nodeId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (BOOL) recv_RefreshNodeInfo
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveRefreshNodeInfo_result * result = [[[OpenZWaveRefreshNodeInfo_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"RefreshNodeInfo failed: unknown result"];
}

- (BOOL) RefreshNodeInfo: (int32_t) _homeId : (uint8_t) _nodeId
{
  [self send_RefreshNodeInfo: _homeId : _nodeId];
  return [self recv_RefreshNodeInfo];
}

- (void) send_RequestNodeState: (int32_t) _homeId : (uint8_t) _nodeId
{
  [outProtocol writeMessageBeginWithName: @"RequestNodeState" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"RequestNodeState_args"];
  [outProtocol writeFieldBeginWithName: @"_homeId" type: TType_I32 fieldID: 1];
  [outProtocol writeI32: _homeId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"_nodeId" type: TType_BYTE fieldID: 2];
  [outProtocol writeByte: _nodeId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (BOOL) recv_RequestNodeState
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveRequestNodeState_result * result = [[[OpenZWaveRequestNodeState_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"RequestNodeState failed: unknown result"];
}

- (BOOL) RequestNodeState: (int32_t) _homeId : (uint8_t) _nodeId
{
  [self send_RequestNodeState: _homeId : _nodeId];
  return [self recv_RequestNodeState];
}

- (void) send_RequestNodeDynamic: (int32_t) _homeId : (uint8_t) _nodeId
{
  [outProtocol writeMessageBeginWithName: @"RequestNodeDynamic" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"RequestNodeDynamic_args"];
  [outProtocol writeFieldBeginWithName: @"_homeId" type: TType_I32 fieldID: 1];
  [outProtocol writeI32: _homeId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"_nodeId" type: TType_BYTE fieldID: 2];
  [outProtocol writeByte: _nodeId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (BOOL) recv_RequestNodeDynamic
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveRequestNodeDynamic_result * result = [[[OpenZWaveRequestNodeDynamic_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"RequestNodeDynamic failed: unknown result"];
}

- (BOOL) RequestNodeDynamic: (int32_t) _homeId : (uint8_t) _nodeId
{
  [self send_RequestNodeDynamic: _homeId : _nodeId];
  return [self recv_RequestNodeDynamic];
}

- (void) send_IsNodeListeningDevice: (int32_t) _homeId : (uint8_t) _nodeId
{
  [outProtocol writeMessageBeginWithName: @"IsNodeListeningDevice" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"IsNodeListeningDevice_args"];
  [outProtocol writeFieldBeginWithName: @"_homeId" type: TType_I32 fieldID: 1];
  [outProtocol writeI32: _homeId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"_nodeId" type: TType_BYTE fieldID: 2];
  [outProtocol writeByte: _nodeId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (BOOL) recv_IsNodeListeningDevice
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveIsNodeListeningDevice_result * result = [[[OpenZWaveIsNodeListeningDevice_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"IsNodeListeningDevice failed: unknown result"];
}

- (BOOL) IsNodeListeningDevice: (int32_t) _homeId : (uint8_t) _nodeId
{
  [self send_IsNodeListeningDevice: _homeId : _nodeId];
  return [self recv_IsNodeListeningDevice];
}

- (void) send_IsNodeFrequentListeningDevice: (int32_t) _homeId : (uint8_t) _nodeId
{
  [outProtocol writeMessageBeginWithName: @"IsNodeFrequentListeningDevice" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"IsNodeFrequentListeningDevice_args"];
  [outProtocol writeFieldBeginWithName: @"_homeId" type: TType_I32 fieldID: 1];
  [outProtocol writeI32: _homeId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"_nodeId" type: TType_BYTE fieldID: 2];
  [outProtocol writeByte: _nodeId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (BOOL) recv_IsNodeFrequentListeningDevice
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveIsNodeFrequentListeningDevice_result * result = [[[OpenZWaveIsNodeFrequentListeningDevice_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"IsNodeFrequentListeningDevice failed: unknown result"];
}

- (BOOL) IsNodeFrequentListeningDevice: (int32_t) _homeId : (uint8_t) _nodeId
{
  [self send_IsNodeFrequentListeningDevice: _homeId : _nodeId];
  return [self recv_IsNodeFrequentListeningDevice];
}

- (void) send_IsNodeBeamingDevice: (int32_t) _homeId : (uint8_t) _nodeId
{
  [outProtocol writeMessageBeginWithName: @"IsNodeBeamingDevice" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"IsNodeBeamingDevice_args"];
  [outProtocol writeFieldBeginWithName: @"_homeId" type: TType_I32 fieldID: 1];
  [outProtocol writeI32: _homeId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"_nodeId" type: TType_BYTE fieldID: 2];
  [outProtocol writeByte: _nodeId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (BOOL) recv_IsNodeBeamingDevice
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveIsNodeBeamingDevice_result * result = [[[OpenZWaveIsNodeBeamingDevice_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"IsNodeBeamingDevice failed: unknown result"];
}

- (BOOL) IsNodeBeamingDevice: (int32_t) _homeId : (uint8_t) _nodeId
{
  [self send_IsNodeBeamingDevice: _homeId : _nodeId];
  return [self recv_IsNodeBeamingDevice];
}

- (void) send_IsNodeRoutingDevice: (int32_t) _homeId : (uint8_t) _nodeId
{
  [outProtocol writeMessageBeginWithName: @"IsNodeRoutingDevice" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"IsNodeRoutingDevice_args"];
  [outProtocol writeFieldBeginWithName: @"_homeId" type: TType_I32 fieldID: 1];
  [outProtocol writeI32: _homeId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"_nodeId" type: TType_BYTE fieldID: 2];
  [outProtocol writeByte: _nodeId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (BOOL) recv_IsNodeRoutingDevice
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveIsNodeRoutingDevice_result * result = [[[OpenZWaveIsNodeRoutingDevice_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"IsNodeRoutingDevice failed: unknown result"];
}

- (BOOL) IsNodeRoutingDevice: (int32_t) _homeId : (uint8_t) _nodeId
{
  [self send_IsNodeRoutingDevice: _homeId : _nodeId];
  return [self recv_IsNodeRoutingDevice];
}

- (void) send_IsNodeSecurityDevice: (int32_t) _homeId : (uint8_t) _nodeId
{
  [outProtocol writeMessageBeginWithName: @"IsNodeSecurityDevice" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"IsNodeSecurityDevice_args"];
  [outProtocol writeFieldBeginWithName: @"_homeId" type: TType_I32 fieldID: 1];
  [outProtocol writeI32: _homeId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"_nodeId" type: TType_BYTE fieldID: 2];
  [outProtocol writeByte: _nodeId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (BOOL) recv_IsNodeSecurityDevice
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveIsNodeSecurityDevice_result * result = [[[OpenZWaveIsNodeSecurityDevice_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"IsNodeSecurityDevice failed: unknown result"];
}

- (BOOL) IsNodeSecurityDevice: (int32_t) _homeId : (uint8_t) _nodeId
{
  [self send_IsNodeSecurityDevice: _homeId : _nodeId];
  return [self recv_IsNodeSecurityDevice];
}

- (void) send_GetNodeMaxBaudRate: (int32_t) _homeId : (uint8_t) _nodeId
{
  [outProtocol writeMessageBeginWithName: @"GetNodeMaxBaudRate" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"GetNodeMaxBaudRate_args"];
  [outProtocol writeFieldBeginWithName: @"_homeId" type: TType_I32 fieldID: 1];
  [outProtocol writeI32: _homeId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"_nodeId" type: TType_BYTE fieldID: 2];
  [outProtocol writeByte: _nodeId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (int32_t) recv_GetNodeMaxBaudRate
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveGetNodeMaxBaudRate_result * result = [[[OpenZWaveGetNodeMaxBaudRate_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"GetNodeMaxBaudRate failed: unknown result"];
}

- (int32_t) GetNodeMaxBaudRate: (int32_t) _homeId : (uint8_t) _nodeId
{
  [self send_GetNodeMaxBaudRate: _homeId : _nodeId];
  return [self recv_GetNodeMaxBaudRate];
}

- (void) send_GetNodeVersion: (int32_t) _homeId : (uint8_t) _nodeId
{
  [outProtocol writeMessageBeginWithName: @"GetNodeVersion" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"GetNodeVersion_args"];
  [outProtocol writeFieldBeginWithName: @"_homeId" type: TType_I32 fieldID: 1];
  [outProtocol writeI32: _homeId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"_nodeId" type: TType_BYTE fieldID: 2];
  [outProtocol writeByte: _nodeId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (uint8_t) recv_GetNodeVersion
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveGetNodeVersion_result * result = [[[OpenZWaveGetNodeVersion_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"GetNodeVersion failed: unknown result"];
}

- (uint8_t) GetNodeVersion: (int32_t) _homeId : (uint8_t) _nodeId
{
  [self send_GetNodeVersion: _homeId : _nodeId];
  return [self recv_GetNodeVersion];
}

- (void) send_GetNodeSecurity: (int32_t) _homeId : (uint8_t) _nodeId
{
  [outProtocol writeMessageBeginWithName: @"GetNodeSecurity" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"GetNodeSecurity_args"];
  [outProtocol writeFieldBeginWithName: @"_homeId" type: TType_I32 fieldID: 1];
  [outProtocol writeI32: _homeId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"_nodeId" type: TType_BYTE fieldID: 2];
  [outProtocol writeByte: _nodeId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (uint8_t) recv_GetNodeSecurity
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveGetNodeSecurity_result * result = [[[OpenZWaveGetNodeSecurity_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"GetNodeSecurity failed: unknown result"];
}

- (uint8_t) GetNodeSecurity: (int32_t) _homeId : (uint8_t) _nodeId
{
  [self send_GetNodeSecurity: _homeId : _nodeId];
  return [self recv_GetNodeSecurity];
}

- (void) send_GetNodeBasic: (int32_t) _homeId : (uint8_t) _nodeId
{
  [outProtocol writeMessageBeginWithName: @"GetNodeBasic" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"GetNodeBasic_args"];
  [outProtocol writeFieldBeginWithName: @"_homeId" type: TType_I32 fieldID: 1];
  [outProtocol writeI32: _homeId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"_nodeId" type: TType_BYTE fieldID: 2];
  [outProtocol writeByte: _nodeId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (uint8_t) recv_GetNodeBasic
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveGetNodeBasic_result * result = [[[OpenZWaveGetNodeBasic_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"GetNodeBasic failed: unknown result"];
}

- (uint8_t) GetNodeBasic: (int32_t) _homeId : (uint8_t) _nodeId
{
  [self send_GetNodeBasic: _homeId : _nodeId];
  return [self recv_GetNodeBasic];
}

- (void) send_GetNodeGeneric: (int32_t) _homeId : (uint8_t) _nodeId
{
  [outProtocol writeMessageBeginWithName: @"GetNodeGeneric" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"GetNodeGeneric_args"];
  [outProtocol writeFieldBeginWithName: @"_homeId" type: TType_I32 fieldID: 1];
  [outProtocol writeI32: _homeId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"_nodeId" type: TType_BYTE fieldID: 2];
  [outProtocol writeByte: _nodeId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (uint8_t) recv_GetNodeGeneric
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveGetNodeGeneric_result * result = [[[OpenZWaveGetNodeGeneric_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"GetNodeGeneric failed: unknown result"];
}

- (uint8_t) GetNodeGeneric: (int32_t) _homeId : (uint8_t) _nodeId
{
  [self send_GetNodeGeneric: _homeId : _nodeId];
  return [self recv_GetNodeGeneric];
}

- (void) send_GetNodeSpecific: (int32_t) _homeId : (uint8_t) _nodeId
{
  [outProtocol writeMessageBeginWithName: @"GetNodeSpecific" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"GetNodeSpecific_args"];
  [outProtocol writeFieldBeginWithName: @"_homeId" type: TType_I32 fieldID: 1];
  [outProtocol writeI32: _homeId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"_nodeId" type: TType_BYTE fieldID: 2];
  [outProtocol writeByte: _nodeId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (uint8_t) recv_GetNodeSpecific
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveGetNodeSpecific_result * result = [[[OpenZWaveGetNodeSpecific_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"GetNodeSpecific failed: unknown result"];
}

- (uint8_t) GetNodeSpecific: (int32_t) _homeId : (uint8_t) _nodeId
{
  [self send_GetNodeSpecific: _homeId : _nodeId];
  return [self recv_GetNodeSpecific];
}

- (void) send_GetNodeType: (int32_t) _homeId : (uint8_t) _nodeId
{
  [outProtocol writeMessageBeginWithName: @"GetNodeType" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"GetNodeType_args"];
  [outProtocol writeFieldBeginWithName: @"_homeId" type: TType_I32 fieldID: 1];
  [outProtocol writeI32: _homeId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"_nodeId" type: TType_BYTE fieldID: 2];
  [outProtocol writeByte: _nodeId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSString *) recv_GetNodeType
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveGetNodeType_result * result = [[[OpenZWaveGetNodeType_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"GetNodeType failed: unknown result"];
}

- (NSString *) GetNodeType: (int32_t) _homeId : (uint8_t) _nodeId
{
  [self send_GetNodeType: _homeId : _nodeId];
  return [self recv_GetNodeType];
}

- (void) send_GetNodeNeighbors: (int32_t) _homeId : (uint8_t) _nodeId
{
  [outProtocol writeMessageBeginWithName: @"GetNodeNeighbors" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"GetNodeNeighbors_args"];
  [outProtocol writeFieldBeginWithName: @"_homeId" type: TType_I32 fieldID: 1];
  [outProtocol writeI32: _homeId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"_nodeId" type: TType_BYTE fieldID: 2];
  [outProtocol writeByte: _nodeId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (OpenZWaveUInt32_ListByte *) recv_GetNodeNeighbors
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveGetNodeNeighbors_result * result = [[[OpenZWaveGetNodeNeighbors_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"GetNodeNeighbors failed: unknown result"];
}

- (OpenZWaveUInt32_ListByte *) GetNodeNeighbors: (int32_t) _homeId : (uint8_t) _nodeId
{
  [self send_GetNodeNeighbors: _homeId : _nodeId];
  return [self recv_GetNodeNeighbors];
}

- (void) send_GetNodeManufacturerName: (int32_t) _homeId : (uint8_t) _nodeId
{
  [outProtocol writeMessageBeginWithName: @"GetNodeManufacturerName" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"GetNodeManufacturerName_args"];
  [outProtocol writeFieldBeginWithName: @"_homeId" type: TType_I32 fieldID: 1];
  [outProtocol writeI32: _homeId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"_nodeId" type: TType_BYTE fieldID: 2];
  [outProtocol writeByte: _nodeId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSString *) recv_GetNodeManufacturerName
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveGetNodeManufacturerName_result * result = [[[OpenZWaveGetNodeManufacturerName_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"GetNodeManufacturerName failed: unknown result"];
}

- (NSString *) GetNodeManufacturerName: (int32_t) _homeId : (uint8_t) _nodeId
{
  [self send_GetNodeManufacturerName: _homeId : _nodeId];
  return [self recv_GetNodeManufacturerName];
}

- (void) send_GetNodeProductName: (int32_t) _homeId : (uint8_t) _nodeId
{
  [outProtocol writeMessageBeginWithName: @"GetNodeProductName" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"GetNodeProductName_args"];
  [outProtocol writeFieldBeginWithName: @"_homeId" type: TType_I32 fieldID: 1];
  [outProtocol writeI32: _homeId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"_nodeId" type: TType_BYTE fieldID: 2];
  [outProtocol writeByte: _nodeId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSString *) recv_GetNodeProductName
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveGetNodeProductName_result * result = [[[OpenZWaveGetNodeProductName_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"GetNodeProductName failed: unknown result"];
}

- (NSString *) GetNodeProductName: (int32_t) _homeId : (uint8_t) _nodeId
{
  [self send_GetNodeProductName: _homeId : _nodeId];
  return [self recv_GetNodeProductName];
}

- (void) send_GetNodeName: (int32_t) _homeId : (uint8_t) _nodeId
{
  [outProtocol writeMessageBeginWithName: @"GetNodeName" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"GetNodeName_args"];
  [outProtocol writeFieldBeginWithName: @"_homeId" type: TType_I32 fieldID: 1];
  [outProtocol writeI32: _homeId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"_nodeId" type: TType_BYTE fieldID: 2];
  [outProtocol writeByte: _nodeId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSString *) recv_GetNodeName
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveGetNodeName_result * result = [[[OpenZWaveGetNodeName_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"GetNodeName failed: unknown result"];
}

- (NSString *) GetNodeName: (int32_t) _homeId : (uint8_t) _nodeId
{
  [self send_GetNodeName: _homeId : _nodeId];
  return [self recv_GetNodeName];
}

- (void) send_GetNodeLocation: (int32_t) _homeId : (uint8_t) _nodeId
{
  [outProtocol writeMessageBeginWithName: @"GetNodeLocation" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"GetNodeLocation_args"];
  [outProtocol writeFieldBeginWithName: @"_homeId" type: TType_I32 fieldID: 1];
  [outProtocol writeI32: _homeId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"_nodeId" type: TType_BYTE fieldID: 2];
  [outProtocol writeByte: _nodeId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSString *) recv_GetNodeLocation
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveGetNodeLocation_result * result = [[[OpenZWaveGetNodeLocation_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"GetNodeLocation failed: unknown result"];
}

- (NSString *) GetNodeLocation: (int32_t) _homeId : (uint8_t) _nodeId
{
  [self send_GetNodeLocation: _homeId : _nodeId];
  return [self recv_GetNodeLocation];
}

- (void) send_GetNodeManufacturerId: (int32_t) _homeId : (uint8_t) _nodeId
{
  [outProtocol writeMessageBeginWithName: @"GetNodeManufacturerId" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"GetNodeManufacturerId_args"];
  [outProtocol writeFieldBeginWithName: @"_homeId" type: TType_I32 fieldID: 1];
  [outProtocol writeI32: _homeId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"_nodeId" type: TType_BYTE fieldID: 2];
  [outProtocol writeByte: _nodeId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSString *) recv_GetNodeManufacturerId
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveGetNodeManufacturerId_result * result = [[[OpenZWaveGetNodeManufacturerId_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"GetNodeManufacturerId failed: unknown result"];
}

- (NSString *) GetNodeManufacturerId: (int32_t) _homeId : (uint8_t) _nodeId
{
  [self send_GetNodeManufacturerId: _homeId : _nodeId];
  return [self recv_GetNodeManufacturerId];
}

- (void) send_GetNodeProductType: (int32_t) _homeId : (uint8_t) _nodeId
{
  [outProtocol writeMessageBeginWithName: @"GetNodeProductType" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"GetNodeProductType_args"];
  [outProtocol writeFieldBeginWithName: @"_homeId" type: TType_I32 fieldID: 1];
  [outProtocol writeI32: _homeId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"_nodeId" type: TType_BYTE fieldID: 2];
  [outProtocol writeByte: _nodeId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSString *) recv_GetNodeProductType
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveGetNodeProductType_result * result = [[[OpenZWaveGetNodeProductType_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"GetNodeProductType failed: unknown result"];
}

- (NSString *) GetNodeProductType: (int32_t) _homeId : (uint8_t) _nodeId
{
  [self send_GetNodeProductType: _homeId : _nodeId];
  return [self recv_GetNodeProductType];
}

- (void) send_GetNodeProductId: (int32_t) _homeId : (uint8_t) _nodeId
{
  [outProtocol writeMessageBeginWithName: @"GetNodeProductId" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"GetNodeProductId_args"];
  [outProtocol writeFieldBeginWithName: @"_homeId" type: TType_I32 fieldID: 1];
  [outProtocol writeI32: _homeId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"_nodeId" type: TType_BYTE fieldID: 2];
  [outProtocol writeByte: _nodeId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSString *) recv_GetNodeProductId
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveGetNodeProductId_result * result = [[[OpenZWaveGetNodeProductId_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"GetNodeProductId failed: unknown result"];
}

- (NSString *) GetNodeProductId: (int32_t) _homeId : (uint8_t) _nodeId
{
  [self send_GetNodeProductId: _homeId : _nodeId];
  return [self recv_GetNodeProductId];
}

- (void) send_SetNodeManufacturerName: (int32_t) _homeId : (uint8_t) _nodeId : (NSString *) _manufacturerName
{
  [outProtocol writeMessageBeginWithName: @"SetNodeManufacturerName" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"SetNodeManufacturerName_args"];
  [outProtocol writeFieldBeginWithName: @"_homeId" type: TType_I32 fieldID: 1];
  [outProtocol writeI32: _homeId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"_nodeId" type: TType_BYTE fieldID: 2];
  [outProtocol writeByte: _nodeId];
  [outProtocol writeFieldEnd];
  if (_manufacturerName != nil)  {
    [outProtocol writeFieldBeginWithName: @"_manufacturerName" type: TType_STRING fieldID: 3];
    [outProtocol writeString: _manufacturerName];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (void) recv_SetNodeManufacturerName
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveSetNodeManufacturerName_result * result = [[[OpenZWaveSetNodeManufacturerName_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  return;
}

- (void) SetNodeManufacturerName: (int32_t) _homeId : (uint8_t) _nodeId : (NSString *) _manufacturerName
{
  [self send_SetNodeManufacturerName: _homeId : _nodeId : _manufacturerName];
  [self recv_SetNodeManufacturerName];
}

- (void) send_SetNodeProductName: (int32_t) _homeId : (uint8_t) _nodeId : (NSString *) _productName
{
  [outProtocol writeMessageBeginWithName: @"SetNodeProductName" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"SetNodeProductName_args"];
  [outProtocol writeFieldBeginWithName: @"_homeId" type: TType_I32 fieldID: 1];
  [outProtocol writeI32: _homeId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"_nodeId" type: TType_BYTE fieldID: 2];
  [outProtocol writeByte: _nodeId];
  [outProtocol writeFieldEnd];
  if (_productName != nil)  {
    [outProtocol writeFieldBeginWithName: @"_productName" type: TType_STRING fieldID: 3];
    [outProtocol writeString: _productName];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (void) recv_SetNodeProductName
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveSetNodeProductName_result * result = [[[OpenZWaveSetNodeProductName_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  return;
}

- (void) SetNodeProductName: (int32_t) _homeId : (uint8_t) _nodeId : (NSString *) _productName
{
  [self send_SetNodeProductName: _homeId : _nodeId : _productName];
  [self recv_SetNodeProductName];
}

- (void) send_SetNodeName: (int32_t) _homeId : (uint8_t) _nodeId : (NSString *) _nodeName
{
  [outProtocol writeMessageBeginWithName: @"SetNodeName" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"SetNodeName_args"];
  [outProtocol writeFieldBeginWithName: @"_homeId" type: TType_I32 fieldID: 1];
  [outProtocol writeI32: _homeId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"_nodeId" type: TType_BYTE fieldID: 2];
  [outProtocol writeByte: _nodeId];
  [outProtocol writeFieldEnd];
  if (_nodeName != nil)  {
    [outProtocol writeFieldBeginWithName: @"_nodeName" type: TType_STRING fieldID: 3];
    [outProtocol writeString: _nodeName];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (void) recv_SetNodeName
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveSetNodeName_result * result = [[[OpenZWaveSetNodeName_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  return;
}

- (void) SetNodeName: (int32_t) _homeId : (uint8_t) _nodeId : (NSString *) _nodeName
{
  [self send_SetNodeName: _homeId : _nodeId : _nodeName];
  [self recv_SetNodeName];
}

- (void) send_SetNodeLocation: (int32_t) _homeId : (uint8_t) _nodeId : (NSString *) _location
{
  [outProtocol writeMessageBeginWithName: @"SetNodeLocation" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"SetNodeLocation_args"];
  [outProtocol writeFieldBeginWithName: @"_homeId" type: TType_I32 fieldID: 1];
  [outProtocol writeI32: _homeId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"_nodeId" type: TType_BYTE fieldID: 2];
  [outProtocol writeByte: _nodeId];
  [outProtocol writeFieldEnd];
  if (_location != nil)  {
    [outProtocol writeFieldBeginWithName: @"_location" type: TType_STRING fieldID: 3];
    [outProtocol writeString: _location];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (void) recv_SetNodeLocation
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveSetNodeLocation_result * result = [[[OpenZWaveSetNodeLocation_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  return;
}

- (void) SetNodeLocation: (int32_t) _homeId : (uint8_t) _nodeId : (NSString *) _location
{
  [self send_SetNodeLocation: _homeId : _nodeId : _location];
  [self recv_SetNodeLocation];
}

- (void) send_SetNodeOn: (int32_t) _homeId : (uint8_t) _nodeId
{
  [outProtocol writeMessageBeginWithName: @"SetNodeOn" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"SetNodeOn_args"];
  [outProtocol writeFieldBeginWithName: @"_homeId" type: TType_I32 fieldID: 1];
  [outProtocol writeI32: _homeId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"_nodeId" type: TType_BYTE fieldID: 2];
  [outProtocol writeByte: _nodeId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (void) recv_SetNodeOn
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveSetNodeOn_result * result = [[[OpenZWaveSetNodeOn_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  return;
}

- (void) SetNodeOn: (int32_t) _homeId : (uint8_t) _nodeId
{
  [self send_SetNodeOn: _homeId : _nodeId];
  [self recv_SetNodeOn];
}

- (void) send_SetNodeOff: (int32_t) _homeId : (uint8_t) _nodeId
{
  [outProtocol writeMessageBeginWithName: @"SetNodeOff" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"SetNodeOff_args"];
  [outProtocol writeFieldBeginWithName: @"_homeId" type: TType_I32 fieldID: 1];
  [outProtocol writeI32: _homeId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"_nodeId" type: TType_BYTE fieldID: 2];
  [outProtocol writeByte: _nodeId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (void) recv_SetNodeOff
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveSetNodeOff_result * result = [[[OpenZWaveSetNodeOff_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  return;
}

- (void) SetNodeOff: (int32_t) _homeId : (uint8_t) _nodeId
{
  [self send_SetNodeOff: _homeId : _nodeId];
  [self recv_SetNodeOff];
}

- (void) send_SetNodeLevel: (int32_t) _homeId : (uint8_t) _nodeId : (uint8_t) _level
{
  [outProtocol writeMessageBeginWithName: @"SetNodeLevel" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"SetNodeLevel_args"];
  [outProtocol writeFieldBeginWithName: @"_homeId" type: TType_I32 fieldID: 1];
  [outProtocol writeI32: _homeId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"_nodeId" type: TType_BYTE fieldID: 2];
  [outProtocol writeByte: _nodeId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"_level" type: TType_BYTE fieldID: 3];
  [outProtocol writeByte: _level];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (void) recv_SetNodeLevel
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveSetNodeLevel_result * result = [[[OpenZWaveSetNodeLevel_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  return;
}

- (void) SetNodeLevel: (int32_t) _homeId : (uint8_t) _nodeId : (uint8_t) _level
{
  [self send_SetNodeLevel: _homeId : _nodeId : _level];
  [self recv_SetNodeLevel];
}

- (void) send_IsNodeInfoReceived: (int32_t) _homeId : (uint8_t) _nodeId
{
  [outProtocol writeMessageBeginWithName: @"IsNodeInfoReceived" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"IsNodeInfoReceived_args"];
  [outProtocol writeFieldBeginWithName: @"_homeId" type: TType_I32 fieldID: 1];
  [outProtocol writeI32: _homeId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"_nodeId" type: TType_BYTE fieldID: 2];
  [outProtocol writeByte: _nodeId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (BOOL) recv_IsNodeInfoReceived
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveIsNodeInfoReceived_result * result = [[[OpenZWaveIsNodeInfoReceived_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"IsNodeInfoReceived failed: unknown result"];
}

- (BOOL) IsNodeInfoReceived: (int32_t) _homeId : (uint8_t) _nodeId
{
  [self send_IsNodeInfoReceived: _homeId : _nodeId];
  return [self recv_IsNodeInfoReceived];
}

- (void) send_GetNodeClassInformation: (int32_t) _homeId : (uint8_t) _nodeId : (uint8_t) _commandClassId
{
  [outProtocol writeMessageBeginWithName: @"GetNodeClassInformation" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"GetNodeClassInformation_args"];
  [outProtocol writeFieldBeginWithName: @"_homeId" type: TType_I32 fieldID: 1];
  [outProtocol writeI32: _homeId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"_nodeId" type: TType_BYTE fieldID: 2];
  [outProtocol writeByte: _nodeId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"_commandClassId" type: TType_BYTE fieldID: 3];
  [outProtocol writeByte: _commandClassId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (OpenZWaveBool_GetNodeClassInformation *) recv_GetNodeClassInformation
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveGetNodeClassInformation_result * result = [[[OpenZWaveGetNodeClassInformation_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"GetNodeClassInformation failed: unknown result"];
}

- (OpenZWaveBool_GetNodeClassInformation *) GetNodeClassInformation: (int32_t) _homeId : (uint8_t) _nodeId : (uint8_t) _commandClassId
{
  [self send_GetNodeClassInformation: _homeId : _nodeId : _commandClassId];
  return [self recv_GetNodeClassInformation];
}

- (void) send_GetValueLabel: (OpenZWaveRemoteValueID *) _id
{
  [outProtocol writeMessageBeginWithName: @"GetValueLabel" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"GetValueLabel_args"];
  if (_id != nil)  {
    [outProtocol writeFieldBeginWithName: @"_id" type: TType_STRUCT fieldID: 1];
    [_id write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSString *) recv_GetValueLabel
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveGetValueLabel_result * result = [[[OpenZWaveGetValueLabel_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"GetValueLabel failed: unknown result"];
}

- (NSString *) GetValueLabel: (OpenZWaveRemoteValueID *) _id
{
  [self send_GetValueLabel: _id];
  return [self recv_GetValueLabel];
}

- (void) send_SetValueLabel: (OpenZWaveRemoteValueID *) _id : (NSString *) _value
{
  [outProtocol writeMessageBeginWithName: @"SetValueLabel" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"SetValueLabel_args"];
  if (_id != nil)  {
    [outProtocol writeFieldBeginWithName: @"_id" type: TType_STRUCT fieldID: 1];
    [_id write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  if (_value != nil)  {
    [outProtocol writeFieldBeginWithName: @"_value" type: TType_STRING fieldID: 2];
    [outProtocol writeString: _value];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (void) recv_SetValueLabel
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveSetValueLabel_result * result = [[[OpenZWaveSetValueLabel_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  return;
}

- (void) SetValueLabel: (OpenZWaveRemoteValueID *) _id : (NSString *) _value
{
  [self send_SetValueLabel: _id : _value];
  [self recv_SetValueLabel];
}

- (void) send_GetValueUnits: (OpenZWaveRemoteValueID *) _id
{
  [outProtocol writeMessageBeginWithName: @"GetValueUnits" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"GetValueUnits_args"];
  if (_id != nil)  {
    [outProtocol writeFieldBeginWithName: @"_id" type: TType_STRUCT fieldID: 1];
    [_id write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSString *) recv_GetValueUnits
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveGetValueUnits_result * result = [[[OpenZWaveGetValueUnits_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"GetValueUnits failed: unknown result"];
}

- (NSString *) GetValueUnits: (OpenZWaveRemoteValueID *) _id
{
  [self send_GetValueUnits: _id];
  return [self recv_GetValueUnits];
}

- (void) send_SetValueUnits: (OpenZWaveRemoteValueID *) _id : (NSString *) _value
{
  [outProtocol writeMessageBeginWithName: @"SetValueUnits" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"SetValueUnits_args"];
  if (_id != nil)  {
    [outProtocol writeFieldBeginWithName: @"_id" type: TType_STRUCT fieldID: 1];
    [_id write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  if (_value != nil)  {
    [outProtocol writeFieldBeginWithName: @"_value" type: TType_STRING fieldID: 2];
    [outProtocol writeString: _value];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (void) recv_SetValueUnits
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveSetValueUnits_result * result = [[[OpenZWaveSetValueUnits_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  return;
}

- (void) SetValueUnits: (OpenZWaveRemoteValueID *) _id : (NSString *) _value
{
  [self send_SetValueUnits: _id : _value];
  [self recv_SetValueUnits];
}

- (void) send_GetValueHelp: (OpenZWaveRemoteValueID *) _id
{
  [outProtocol writeMessageBeginWithName: @"GetValueHelp" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"GetValueHelp_args"];
  if (_id != nil)  {
    [outProtocol writeFieldBeginWithName: @"_id" type: TType_STRUCT fieldID: 1];
    [_id write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSString *) recv_GetValueHelp
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveGetValueHelp_result * result = [[[OpenZWaveGetValueHelp_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"GetValueHelp failed: unknown result"];
}

- (NSString *) GetValueHelp: (OpenZWaveRemoteValueID *) _id
{
  [self send_GetValueHelp: _id];
  return [self recv_GetValueHelp];
}

- (void) send_SetValueHelp: (OpenZWaveRemoteValueID *) _id : (NSString *) _value
{
  [outProtocol writeMessageBeginWithName: @"SetValueHelp" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"SetValueHelp_args"];
  if (_id != nil)  {
    [outProtocol writeFieldBeginWithName: @"_id" type: TType_STRUCT fieldID: 1];
    [_id write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  if (_value != nil)  {
    [outProtocol writeFieldBeginWithName: @"_value" type: TType_STRING fieldID: 2];
    [outProtocol writeString: _value];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (void) recv_SetValueHelp
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveSetValueHelp_result * result = [[[OpenZWaveSetValueHelp_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  return;
}

- (void) SetValueHelp: (OpenZWaveRemoteValueID *) _id : (NSString *) _value
{
  [self send_SetValueHelp: _id : _value];
  [self recv_SetValueHelp];
}

- (void) send_GetValueMin: (OpenZWaveRemoteValueID *) _id
{
  [outProtocol writeMessageBeginWithName: @"GetValueMin" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"GetValueMin_args"];
  if (_id != nil)  {
    [outProtocol writeFieldBeginWithName: @"_id" type: TType_STRUCT fieldID: 1];
    [_id write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (int32_t) recv_GetValueMin
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveGetValueMin_result * result = [[[OpenZWaveGetValueMin_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"GetValueMin failed: unknown result"];
}

- (int32_t) GetValueMin: (OpenZWaveRemoteValueID *) _id
{
  [self send_GetValueMin: _id];
  return [self recv_GetValueMin];
}

- (void) send_GetValueMax: (OpenZWaveRemoteValueID *) _id
{
  [outProtocol writeMessageBeginWithName: @"GetValueMax" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"GetValueMax_args"];
  if (_id != nil)  {
    [outProtocol writeFieldBeginWithName: @"_id" type: TType_STRUCT fieldID: 1];
    [_id write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (int32_t) recv_GetValueMax
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveGetValueMax_result * result = [[[OpenZWaveGetValueMax_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"GetValueMax failed: unknown result"];
}

- (int32_t) GetValueMax: (OpenZWaveRemoteValueID *) _id
{
  [self send_GetValueMax: _id];
  return [self recv_GetValueMax];
}

- (void) send_IsValueReadOnly: (OpenZWaveRemoteValueID *) _id
{
  [outProtocol writeMessageBeginWithName: @"IsValueReadOnly" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"IsValueReadOnly_args"];
  if (_id != nil)  {
    [outProtocol writeFieldBeginWithName: @"_id" type: TType_STRUCT fieldID: 1];
    [_id write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (BOOL) recv_IsValueReadOnly
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveIsValueReadOnly_result * result = [[[OpenZWaveIsValueReadOnly_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"IsValueReadOnly failed: unknown result"];
}

- (BOOL) IsValueReadOnly: (OpenZWaveRemoteValueID *) _id
{
  [self send_IsValueReadOnly: _id];
  return [self recv_IsValueReadOnly];
}

- (void) send_IsValueWriteOnly: (OpenZWaveRemoteValueID *) _id
{
  [outProtocol writeMessageBeginWithName: @"IsValueWriteOnly" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"IsValueWriteOnly_args"];
  if (_id != nil)  {
    [outProtocol writeFieldBeginWithName: @"_id" type: TType_STRUCT fieldID: 1];
    [_id write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (BOOL) recv_IsValueWriteOnly
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveIsValueWriteOnly_result * result = [[[OpenZWaveIsValueWriteOnly_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"IsValueWriteOnly failed: unknown result"];
}

- (BOOL) IsValueWriteOnly: (OpenZWaveRemoteValueID *) _id
{
  [self send_IsValueWriteOnly: _id];
  return [self recv_IsValueWriteOnly];
}

- (void) send_IsValueSet: (OpenZWaveRemoteValueID *) _id
{
  [outProtocol writeMessageBeginWithName: @"IsValueSet" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"IsValueSet_args"];
  if (_id != nil)  {
    [outProtocol writeFieldBeginWithName: @"_id" type: TType_STRUCT fieldID: 1];
    [_id write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (BOOL) recv_IsValueSet
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveIsValueSet_result * result = [[[OpenZWaveIsValueSet_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"IsValueSet failed: unknown result"];
}

- (BOOL) IsValueSet: (OpenZWaveRemoteValueID *) _id
{
  [self send_IsValueSet: _id];
  return [self recv_IsValueSet];
}

- (void) send_IsValuePolled: (OpenZWaveRemoteValueID *) _id
{
  [outProtocol writeMessageBeginWithName: @"IsValuePolled" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"IsValuePolled_args"];
  if (_id != nil)  {
    [outProtocol writeFieldBeginWithName: @"_id" type: TType_STRUCT fieldID: 1];
    [_id write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (BOOL) recv_IsValuePolled
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveIsValuePolled_result * result = [[[OpenZWaveIsValuePolled_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"IsValuePolled failed: unknown result"];
}

- (BOOL) IsValuePolled: (OpenZWaveRemoteValueID *) _id
{
  [self send_IsValuePolled: _id];
  return [self recv_IsValuePolled];
}

- (void) send_GetValueAsBool: (OpenZWaveRemoteValueID *) _id
{
  [outProtocol writeMessageBeginWithName: @"GetValueAsBool" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"GetValueAsBool_args"];
  if (_id != nil)  {
    [outProtocol writeFieldBeginWithName: @"_id" type: TType_STRUCT fieldID: 1];
    [_id write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (OpenZWaveBool_Bool *) recv_GetValueAsBool
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveGetValueAsBool_result * result = [[[OpenZWaveGetValueAsBool_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"GetValueAsBool failed: unknown result"];
}

- (OpenZWaveBool_Bool *) GetValueAsBool: (OpenZWaveRemoteValueID *) _id
{
  [self send_GetValueAsBool: _id];
  return [self recv_GetValueAsBool];
}

- (void) send_GetValueAsByte: (OpenZWaveRemoteValueID *) _id
{
  [outProtocol writeMessageBeginWithName: @"GetValueAsByte" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"GetValueAsByte_args"];
  if (_id != nil)  {
    [outProtocol writeFieldBeginWithName: @"_id" type: TType_STRUCT fieldID: 1];
    [_id write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (OpenZWaveBool_UInt8 *) recv_GetValueAsByte
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveGetValueAsByte_result * result = [[[OpenZWaveGetValueAsByte_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"GetValueAsByte failed: unknown result"];
}

- (OpenZWaveBool_UInt8 *) GetValueAsByte: (OpenZWaveRemoteValueID *) _id
{
  [self send_GetValueAsByte: _id];
  return [self recv_GetValueAsByte];
}

- (void) send_GetValueAsFloat: (OpenZWaveRemoteValueID *) _id
{
  [outProtocol writeMessageBeginWithName: @"GetValueAsFloat" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"GetValueAsFloat_args"];
  if (_id != nil)  {
    [outProtocol writeFieldBeginWithName: @"_id" type: TType_STRUCT fieldID: 1];
    [_id write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (OpenZWaveBool_Float *) recv_GetValueAsFloat
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveGetValueAsFloat_result * result = [[[OpenZWaveGetValueAsFloat_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"GetValueAsFloat failed: unknown result"];
}

- (OpenZWaveBool_Float *) GetValueAsFloat: (OpenZWaveRemoteValueID *) _id
{
  [self send_GetValueAsFloat: _id];
  return [self recv_GetValueAsFloat];
}

- (void) send_GetValueAsInt: (OpenZWaveRemoteValueID *) _id
{
  [outProtocol writeMessageBeginWithName: @"GetValueAsInt" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"GetValueAsInt_args"];
  if (_id != nil)  {
    [outProtocol writeFieldBeginWithName: @"_id" type: TType_STRUCT fieldID: 1];
    [_id write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (OpenZWaveBool_Int *) recv_GetValueAsInt
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveGetValueAsInt_result * result = [[[OpenZWaveGetValueAsInt_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"GetValueAsInt failed: unknown result"];
}

- (OpenZWaveBool_Int *) GetValueAsInt: (OpenZWaveRemoteValueID *) _id
{
  [self send_GetValueAsInt: _id];
  return [self recv_GetValueAsInt];
}

- (void) send_GetValueAsShort: (OpenZWaveRemoteValueID *) _id
{
  [outProtocol writeMessageBeginWithName: @"GetValueAsShort" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"GetValueAsShort_args"];
  if (_id != nil)  {
    [outProtocol writeFieldBeginWithName: @"_id" type: TType_STRUCT fieldID: 1];
    [_id write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (OpenZWaveBool_Int16 *) recv_GetValueAsShort
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveGetValueAsShort_result * result = [[[OpenZWaveGetValueAsShort_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"GetValueAsShort failed: unknown result"];
}

- (OpenZWaveBool_Int16 *) GetValueAsShort: (OpenZWaveRemoteValueID *) _id
{
  [self send_GetValueAsShort: _id];
  return [self recv_GetValueAsShort];
}

- (void) send_GetValueAsString: (OpenZWaveRemoteValueID *) _id
{
  [outProtocol writeMessageBeginWithName: @"GetValueAsString" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"GetValueAsString_args"];
  if (_id != nil)  {
    [outProtocol writeFieldBeginWithName: @"_id" type: TType_STRUCT fieldID: 1];
    [_id write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (OpenZWaveBool_String *) recv_GetValueAsString
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveGetValueAsString_result * result = [[[OpenZWaveGetValueAsString_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"GetValueAsString failed: unknown result"];
}

- (OpenZWaveBool_String *) GetValueAsString: (OpenZWaveRemoteValueID *) _id
{
  [self send_GetValueAsString: _id];
  return [self recv_GetValueAsString];
}

- (void) send_GetValueListSelection_String: (OpenZWaveRemoteValueID *) _id
{
  [outProtocol writeMessageBeginWithName: @"GetValueListSelection_String" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"GetValueListSelection_String_args"];
  if (_id != nil)  {
    [outProtocol writeFieldBeginWithName: @"_id" type: TType_STRUCT fieldID: 1];
    [_id write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (OpenZWaveBool_String *) recv_GetValueListSelection_String
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveGetValueListSelection_String_result * result = [[[OpenZWaveGetValueListSelection_String_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"GetValueListSelection_String failed: unknown result"];
}

- (OpenZWaveBool_String *) GetValueListSelection_String: (OpenZWaveRemoteValueID *) _id
{
  [self send_GetValueListSelection_String: _id];
  return [self recv_GetValueListSelection_String];
}

- (void) send_GetValueListSelection_Int32: (OpenZWaveRemoteValueID *) _id
{
  [outProtocol writeMessageBeginWithName: @"GetValueListSelection_Int32" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"GetValueListSelection_Int32_args"];
  if (_id != nil)  {
    [outProtocol writeFieldBeginWithName: @"_id" type: TType_STRUCT fieldID: 1];
    [_id write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (OpenZWaveBool_Int *) recv_GetValueListSelection_Int32
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveGetValueListSelection_Int32_result * result = [[[OpenZWaveGetValueListSelection_Int32_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"GetValueListSelection_Int32 failed: unknown result"];
}

- (OpenZWaveBool_Int *) GetValueListSelection_Int32: (OpenZWaveRemoteValueID *) _id
{
  [self send_GetValueListSelection_Int32: _id];
  return [self recv_GetValueListSelection_Int32];
}

- (void) send_GetValueListItems: (OpenZWaveRemoteValueID *) _id
{
  [outProtocol writeMessageBeginWithName: @"GetValueListItems" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"GetValueListItems_args"];
  if (_id != nil)  {
    [outProtocol writeFieldBeginWithName: @"_id" type: TType_STRUCT fieldID: 1];
    [_id write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (OpenZWaveBool_ListString *) recv_GetValueListItems
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveGetValueListItems_result * result = [[[OpenZWaveGetValueListItems_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"GetValueListItems failed: unknown result"];
}

- (OpenZWaveBool_ListString *) GetValueListItems: (OpenZWaveRemoteValueID *) _id
{
  [self send_GetValueListItems: _id];
  return [self recv_GetValueListItems];
}

- (void) send_GetValueFloatPrecision: (OpenZWaveRemoteValueID *) _id
{
  [outProtocol writeMessageBeginWithName: @"GetValueFloatPrecision" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"GetValueFloatPrecision_args"];
  if (_id != nil)  {
    [outProtocol writeFieldBeginWithName: @"_id" type: TType_STRUCT fieldID: 1];
    [_id write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (OpenZWaveBool_UInt8 *) recv_GetValueFloatPrecision
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveGetValueFloatPrecision_result * result = [[[OpenZWaveGetValueFloatPrecision_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"GetValueFloatPrecision failed: unknown result"];
}

- (OpenZWaveBool_UInt8 *) GetValueFloatPrecision: (OpenZWaveRemoteValueID *) _id
{
  [self send_GetValueFloatPrecision: _id];
  return [self recv_GetValueFloatPrecision];
}

- (void) send_SetValue_Bool: (OpenZWaveRemoteValueID *) _id : (BOOL) _value
{
  [outProtocol writeMessageBeginWithName: @"SetValue_Bool" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"SetValue_Bool_args"];
  if (_id != nil)  {
    [outProtocol writeFieldBeginWithName: @"_id" type: TType_STRUCT fieldID: 1];
    [_id write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"_value" type: TType_BOOL fieldID: 2];
  [outProtocol writeBool: _value];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (BOOL) recv_SetValue_Bool
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveSetValue_Bool_result * result = [[[OpenZWaveSetValue_Bool_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"SetValue_Bool failed: unknown result"];
}

- (BOOL) SetValue_Bool: (OpenZWaveRemoteValueID *) _id : (BOOL) _value
{
  [self send_SetValue_Bool: _id : _value];
  return [self recv_SetValue_Bool];
}

- (void) send_SetValue_UInt8: (OpenZWaveRemoteValueID *) _id : (uint8_t) _value
{
  [outProtocol writeMessageBeginWithName: @"SetValue_UInt8" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"SetValue_UInt8_args"];
  if (_id != nil)  {
    [outProtocol writeFieldBeginWithName: @"_id" type: TType_STRUCT fieldID: 1];
    [_id write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"_value" type: TType_BYTE fieldID: 2];
  [outProtocol writeByte: _value];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (BOOL) recv_SetValue_UInt8
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveSetValue_UInt8_result * result = [[[OpenZWaveSetValue_UInt8_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"SetValue_UInt8 failed: unknown result"];
}

- (BOOL) SetValue_UInt8: (OpenZWaveRemoteValueID *) _id : (uint8_t) _value
{
  [self send_SetValue_UInt8: _id : _value];
  return [self recv_SetValue_UInt8];
}

- (void) send_SetValue_Float: (OpenZWaveRemoteValueID *) _id : (double) _value
{
  [outProtocol writeMessageBeginWithName: @"SetValue_Float" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"SetValue_Float_args"];
  if (_id != nil)  {
    [outProtocol writeFieldBeginWithName: @"_id" type: TType_STRUCT fieldID: 1];
    [_id write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"_value" type: TType_DOUBLE fieldID: 2];
  [outProtocol writeDouble: _value];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (BOOL) recv_SetValue_Float
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveSetValue_Float_result * result = [[[OpenZWaveSetValue_Float_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"SetValue_Float failed: unknown result"];
}

- (BOOL) SetValue_Float: (OpenZWaveRemoteValueID *) _id : (double) _value
{
  [self send_SetValue_Float: _id : _value];
  return [self recv_SetValue_Float];
}

- (void) send_SetValue_Int32: (OpenZWaveRemoteValueID *) _id : (int32_t) _value
{
  [outProtocol writeMessageBeginWithName: @"SetValue_Int32" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"SetValue_Int32_args"];
  if (_id != nil)  {
    [outProtocol writeFieldBeginWithName: @"_id" type: TType_STRUCT fieldID: 1];
    [_id write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"_value" type: TType_I32 fieldID: 2];
  [outProtocol writeI32: _value];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (BOOL) recv_SetValue_Int32
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveSetValue_Int32_result * result = [[[OpenZWaveSetValue_Int32_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"SetValue_Int32 failed: unknown result"];
}

- (BOOL) SetValue_Int32: (OpenZWaveRemoteValueID *) _id : (int32_t) _value
{
  [self send_SetValue_Int32: _id : _value];
  return [self recv_SetValue_Int32];
}

- (void) send_SetValue_Int16: (OpenZWaveRemoteValueID *) _id : (int16_t) _value
{
  [outProtocol writeMessageBeginWithName: @"SetValue_Int16" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"SetValue_Int16_args"];
  if (_id != nil)  {
    [outProtocol writeFieldBeginWithName: @"_id" type: TType_STRUCT fieldID: 1];
    [_id write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"_value" type: TType_I16 fieldID: 2];
  [outProtocol writeI16: _value];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (BOOL) recv_SetValue_Int16
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveSetValue_Int16_result * result = [[[OpenZWaveSetValue_Int16_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"SetValue_Int16 failed: unknown result"];
}

- (BOOL) SetValue_Int16: (OpenZWaveRemoteValueID *) _id : (int16_t) _value
{
  [self send_SetValue_Int16: _id : _value];
  return [self recv_SetValue_Int16];
}

- (void) send_SetValue_String: (OpenZWaveRemoteValueID *) _id : (NSString *) _value
{
  [outProtocol writeMessageBeginWithName: @"SetValue_String" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"SetValue_String_args"];
  if (_id != nil)  {
    [outProtocol writeFieldBeginWithName: @"_id" type: TType_STRUCT fieldID: 1];
    [_id write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  if (_value != nil)  {
    [outProtocol writeFieldBeginWithName: @"_value" type: TType_STRING fieldID: 2];
    [outProtocol writeString: _value];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (BOOL) recv_SetValue_String
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveSetValue_String_result * result = [[[OpenZWaveSetValue_String_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"SetValue_String failed: unknown result"];
}

- (BOOL) SetValue_String: (OpenZWaveRemoteValueID *) _id : (NSString *) _value
{
  [self send_SetValue_String: _id : _value];
  return [self recv_SetValue_String];
}

- (void) send_SetValueListSelection: (OpenZWaveRemoteValueID *) _id : (NSString *) _selectedItem
{
  [outProtocol writeMessageBeginWithName: @"SetValueListSelection" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"SetValueListSelection_args"];
  if (_id != nil)  {
    [outProtocol writeFieldBeginWithName: @"_id" type: TType_STRUCT fieldID: 1];
    [_id write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  if (_selectedItem != nil)  {
    [outProtocol writeFieldBeginWithName: @"_selectedItem" type: TType_STRING fieldID: 2];
    [outProtocol writeString: _selectedItem];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (BOOL) recv_SetValueListSelection
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveSetValueListSelection_result * result = [[[OpenZWaveSetValueListSelection_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"SetValueListSelection failed: unknown result"];
}

- (BOOL) SetValueListSelection: (OpenZWaveRemoteValueID *) _id : (NSString *) _selectedItem
{
  [self send_SetValueListSelection: _id : _selectedItem];
  return [self recv_SetValueListSelection];
}

- (void) send_RefreshValue: (OpenZWaveRemoteValueID *) _id
{
  [outProtocol writeMessageBeginWithName: @"RefreshValue" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"RefreshValue_args"];
  if (_id != nil)  {
    [outProtocol writeFieldBeginWithName: @"_id" type: TType_STRUCT fieldID: 1];
    [_id write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (BOOL) recv_RefreshValue
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveRefreshValue_result * result = [[[OpenZWaveRefreshValue_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"RefreshValue failed: unknown result"];
}

- (BOOL) RefreshValue: (OpenZWaveRemoteValueID *) _id
{
  [self send_RefreshValue: _id];
  return [self recv_RefreshValue];
}

- (void) send_SetChangeVerified: (OpenZWaveRemoteValueID *) _id : (BOOL) _verify
{
  [outProtocol writeMessageBeginWithName: @"SetChangeVerified" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"SetChangeVerified_args"];
  if (_id != nil)  {
    [outProtocol writeFieldBeginWithName: @"_id" type: TType_STRUCT fieldID: 1];
    [_id write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"_verify" type: TType_BOOL fieldID: 2];
  [outProtocol writeBool: _verify];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (void) recv_SetChangeVerified
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveSetChangeVerified_result * result = [[[OpenZWaveSetChangeVerified_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  return;
}

- (void) SetChangeVerified: (OpenZWaveRemoteValueID *) _id : (BOOL) _verify
{
  [self send_SetChangeVerified: _id : _verify];
  [self recv_SetChangeVerified];
}

- (void) send_PressButton: (OpenZWaveRemoteValueID *) _id
{
  [outProtocol writeMessageBeginWithName: @"PressButton" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"PressButton_args"];
  if (_id != nil)  {
    [outProtocol writeFieldBeginWithName: @"_id" type: TType_STRUCT fieldID: 1];
    [_id write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (BOOL) recv_PressButton
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWavePressButton_result * result = [[[OpenZWavePressButton_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"PressButton failed: unknown result"];
}

- (BOOL) PressButton: (OpenZWaveRemoteValueID *) _id
{
  [self send_PressButton: _id];
  return [self recv_PressButton];
}

- (void) send_ReleaseButton: (OpenZWaveRemoteValueID *) _id
{
  [outProtocol writeMessageBeginWithName: @"ReleaseButton" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"ReleaseButton_args"];
  if (_id != nil)  {
    [outProtocol writeFieldBeginWithName: @"_id" type: TType_STRUCT fieldID: 1];
    [_id write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (BOOL) recv_ReleaseButton
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveReleaseButton_result * result = [[[OpenZWaveReleaseButton_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"ReleaseButton failed: unknown result"];
}

- (BOOL) ReleaseButton: (OpenZWaveRemoteValueID *) _id
{
  [self send_ReleaseButton: _id];
  return [self recv_ReleaseButton];
}

- (void) send_GetNumSwitchPoints: (OpenZWaveRemoteValueID *) _id
{
  [outProtocol writeMessageBeginWithName: @"GetNumSwitchPoints" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"GetNumSwitchPoints_args"];
  if (_id != nil)  {
    [outProtocol writeFieldBeginWithName: @"_id" type: TType_STRUCT fieldID: 1];
    [_id write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (uint8_t) recv_GetNumSwitchPoints
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveGetNumSwitchPoints_result * result = [[[OpenZWaveGetNumSwitchPoints_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"GetNumSwitchPoints failed: unknown result"];
}

- (uint8_t) GetNumSwitchPoints: (OpenZWaveRemoteValueID *) _id
{
  [self send_GetNumSwitchPoints: _id];
  return [self recv_GetNumSwitchPoints];
}

- (void) send_SetSwitchPoint: (OpenZWaveRemoteValueID *) _id : (uint8_t) _hours : (uint8_t) _minutes : (uint8_t) _setback
{
  [outProtocol writeMessageBeginWithName: @"SetSwitchPoint" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"SetSwitchPoint_args"];
  if (_id != nil)  {
    [outProtocol writeFieldBeginWithName: @"_id" type: TType_STRUCT fieldID: 1];
    [_id write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"_hours" type: TType_BYTE fieldID: 2];
  [outProtocol writeByte: _hours];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"_minutes" type: TType_BYTE fieldID: 3];
  [outProtocol writeByte: _minutes];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"_setback" type: TType_BYTE fieldID: 4];
  [outProtocol writeByte: _setback];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (BOOL) recv_SetSwitchPoint
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveSetSwitchPoint_result * result = [[[OpenZWaveSetSwitchPoint_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"SetSwitchPoint failed: unknown result"];
}

- (BOOL) SetSwitchPoint: (OpenZWaveRemoteValueID *) _id : (uint8_t) _hours : (uint8_t) _minutes : (uint8_t) _setback
{
  [self send_SetSwitchPoint: _id : _hours : _minutes : _setback];
  return [self recv_SetSwitchPoint];
}

- (void) send_RemoveSwitchPoint: (OpenZWaveRemoteValueID *) _id : (uint8_t) _hours : (uint8_t) _minutes
{
  [outProtocol writeMessageBeginWithName: @"RemoveSwitchPoint" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"RemoveSwitchPoint_args"];
  if (_id != nil)  {
    [outProtocol writeFieldBeginWithName: @"_id" type: TType_STRUCT fieldID: 1];
    [_id write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"_hours" type: TType_BYTE fieldID: 2];
  [outProtocol writeByte: _hours];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"_minutes" type: TType_BYTE fieldID: 3];
  [outProtocol writeByte: _minutes];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (BOOL) recv_RemoveSwitchPoint
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveRemoveSwitchPoint_result * result = [[[OpenZWaveRemoveSwitchPoint_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"RemoveSwitchPoint failed: unknown result"];
}

- (BOOL) RemoveSwitchPoint: (OpenZWaveRemoteValueID *) _id : (uint8_t) _hours : (uint8_t) _minutes
{
  [self send_RemoveSwitchPoint: _id : _hours : _minutes];
  return [self recv_RemoveSwitchPoint];
}

- (void) send_ClearSwitchPoints: (OpenZWaveRemoteValueID *) _id
{
  [outProtocol writeMessageBeginWithName: @"ClearSwitchPoints" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"ClearSwitchPoints_args"];
  if (_id != nil)  {
    [outProtocol writeFieldBeginWithName: @"_id" type: TType_STRUCT fieldID: 1];
    [_id write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (void) recv_ClearSwitchPoints
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveClearSwitchPoints_result * result = [[[OpenZWaveClearSwitchPoints_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  return;
}

- (void) ClearSwitchPoints: (OpenZWaveRemoteValueID *) _id
{
  [self send_ClearSwitchPoints: _id];
  [self recv_ClearSwitchPoints];
}

- (void) send_GetSwitchPoint: (OpenZWaveRemoteValueID *) _id : (uint8_t) _idx
{
  [outProtocol writeMessageBeginWithName: @"GetSwitchPoint" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"GetSwitchPoint_args"];
  if (_id != nil)  {
    [outProtocol writeFieldBeginWithName: @"_id" type: TType_STRUCT fieldID: 1];
    [_id write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"_idx" type: TType_BYTE fieldID: 2];
  [outProtocol writeByte: _idx];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (OpenZWaveGetSwitchPointReturnStruct *) recv_GetSwitchPoint
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveGetSwitchPoint_result * result = [[[OpenZWaveGetSwitchPoint_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"GetSwitchPoint failed: unknown result"];
}

- (OpenZWaveGetSwitchPointReturnStruct *) GetSwitchPoint: (OpenZWaveRemoteValueID *) _id : (uint8_t) _idx
{
  [self send_GetSwitchPoint: _id : _idx];
  return [self recv_GetSwitchPoint];
}

- (void) send_SwitchAllOn: (int32_t) _homeId
{
  [outProtocol writeMessageBeginWithName: @"SwitchAllOn" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"SwitchAllOn_args"];
  [outProtocol writeFieldBeginWithName: @"_homeId" type: TType_I32 fieldID: 1];
  [outProtocol writeI32: _homeId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (void) recv_SwitchAllOn
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveSwitchAllOn_result * result = [[[OpenZWaveSwitchAllOn_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  return;
}

- (void) SwitchAllOn: (int32_t) _homeId
{
  [self send_SwitchAllOn: _homeId];
  [self recv_SwitchAllOn];
}

- (void) send_SwitchAllOff: (int32_t) _homeId
{
  [outProtocol writeMessageBeginWithName: @"SwitchAllOff" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"SwitchAllOff_args"];
  [outProtocol writeFieldBeginWithName: @"_homeId" type: TType_I32 fieldID: 1];
  [outProtocol writeI32: _homeId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (void) recv_SwitchAllOff
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveSwitchAllOff_result * result = [[[OpenZWaveSwitchAllOff_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  return;
}

- (void) SwitchAllOff: (int32_t) _homeId
{
  [self send_SwitchAllOff: _homeId];
  [self recv_SwitchAllOff];
}

- (void) send_SetConfigParam: (int32_t) _homeId : (uint8_t) _nodeId : (uint8_t) _param : (int32_t) _value : (uint8_t) _size
{
  [outProtocol writeMessageBeginWithName: @"SetConfigParam" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"SetConfigParam_args"];
  [outProtocol writeFieldBeginWithName: @"_homeId" type: TType_I32 fieldID: 1];
  [outProtocol writeI32: _homeId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"_nodeId" type: TType_BYTE fieldID: 2];
  [outProtocol writeByte: _nodeId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"_param" type: TType_BYTE fieldID: 3];
  [outProtocol writeByte: _param];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"_value" type: TType_I32 fieldID: 4];
  [outProtocol writeI32: _value];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"_size" type: TType_BYTE fieldID: 5];
  [outProtocol writeByte: _size];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (BOOL) recv_SetConfigParam
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveSetConfigParam_result * result = [[[OpenZWaveSetConfigParam_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"SetConfigParam failed: unknown result"];
}

- (BOOL) SetConfigParam: (int32_t) _homeId : (uint8_t) _nodeId : (uint8_t) _param : (int32_t) _value : (uint8_t) _size
{
  [self send_SetConfigParam: _homeId : _nodeId : _param : _value : _size];
  return [self recv_SetConfigParam];
}

- (void) send_RequestConfigParam: (int32_t) _homeId : (uint8_t) _nodeId : (uint8_t) _param
{
  [outProtocol writeMessageBeginWithName: @"RequestConfigParam" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"RequestConfigParam_args"];
  [outProtocol writeFieldBeginWithName: @"_homeId" type: TType_I32 fieldID: 1];
  [outProtocol writeI32: _homeId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"_nodeId" type: TType_BYTE fieldID: 2];
  [outProtocol writeByte: _nodeId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"_param" type: TType_BYTE fieldID: 3];
  [outProtocol writeByte: _param];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (void) recv_RequestConfigParam
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveRequestConfigParam_result * result = [[[OpenZWaveRequestConfigParam_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  return;
}

- (void) RequestConfigParam: (int32_t) _homeId : (uint8_t) _nodeId : (uint8_t) _param
{
  [self send_RequestConfigParam: _homeId : _nodeId : _param];
  [self recv_RequestConfigParam];
}

- (void) send_RequestAllConfigParams: (int32_t) _homeId : (uint8_t) _nodeId
{
  [outProtocol writeMessageBeginWithName: @"RequestAllConfigParams" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"RequestAllConfigParams_args"];
  [outProtocol writeFieldBeginWithName: @"_homeId" type: TType_I32 fieldID: 1];
  [outProtocol writeI32: _homeId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"_nodeId" type: TType_BYTE fieldID: 2];
  [outProtocol writeByte: _nodeId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (void) recv_RequestAllConfigParams
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveRequestAllConfigParams_result * result = [[[OpenZWaveRequestAllConfigParams_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  return;
}

- (void) RequestAllConfigParams: (int32_t) _homeId : (uint8_t) _nodeId
{
  [self send_RequestAllConfigParams: _homeId : _nodeId];
  [self recv_RequestAllConfigParams];
}

- (void) send_GetNumGroups: (int32_t) _homeId : (uint8_t) _nodeId
{
  [outProtocol writeMessageBeginWithName: @"GetNumGroups" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"GetNumGroups_args"];
  [outProtocol writeFieldBeginWithName: @"_homeId" type: TType_I32 fieldID: 1];
  [outProtocol writeI32: _homeId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"_nodeId" type: TType_BYTE fieldID: 2];
  [outProtocol writeByte: _nodeId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (uint8_t) recv_GetNumGroups
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveGetNumGroups_result * result = [[[OpenZWaveGetNumGroups_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"GetNumGroups failed: unknown result"];
}

- (uint8_t) GetNumGroups: (int32_t) _homeId : (uint8_t) _nodeId
{
  [self send_GetNumGroups: _homeId : _nodeId];
  return [self recv_GetNumGroups];
}

- (void) send_GetAssociations: (int32_t) _homeId : (uint8_t) _nodeId : (uint8_t) _groupIdx
{
  [outProtocol writeMessageBeginWithName: @"GetAssociations" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"GetAssociations_args"];
  [outProtocol writeFieldBeginWithName: @"_homeId" type: TType_I32 fieldID: 1];
  [outProtocol writeI32: _homeId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"_nodeId" type: TType_BYTE fieldID: 2];
  [outProtocol writeByte: _nodeId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"_groupIdx" type: TType_BYTE fieldID: 3];
  [outProtocol writeByte: _groupIdx];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (OpenZWaveGetAssociationsReturnStruct *) recv_GetAssociations
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveGetAssociations_result * result = [[[OpenZWaveGetAssociations_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"GetAssociations failed: unknown result"];
}

- (OpenZWaveGetAssociationsReturnStruct *) GetAssociations: (int32_t) _homeId : (uint8_t) _nodeId : (uint8_t) _groupIdx
{
  [self send_GetAssociations: _homeId : _nodeId : _groupIdx];
  return [self recv_GetAssociations];
}

- (void) send_GetMaxAssociations: (int32_t) _homeId : (uint8_t) _nodeId : (uint8_t) _groupIdx
{
  [outProtocol writeMessageBeginWithName: @"GetMaxAssociations" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"GetMaxAssociations_args"];
  [outProtocol writeFieldBeginWithName: @"_homeId" type: TType_I32 fieldID: 1];
  [outProtocol writeI32: _homeId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"_nodeId" type: TType_BYTE fieldID: 2];
  [outProtocol writeByte: _nodeId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"_groupIdx" type: TType_BYTE fieldID: 3];
  [outProtocol writeByte: _groupIdx];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (uint8_t) recv_GetMaxAssociations
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveGetMaxAssociations_result * result = [[[OpenZWaveGetMaxAssociations_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"GetMaxAssociations failed: unknown result"];
}

- (uint8_t) GetMaxAssociations: (int32_t) _homeId : (uint8_t) _nodeId : (uint8_t) _groupIdx
{
  [self send_GetMaxAssociations: _homeId : _nodeId : _groupIdx];
  return [self recv_GetMaxAssociations];
}

- (void) send_GetGroupLabel: (int32_t) _homeId : (uint8_t) _nodeId : (uint8_t) _groupIdx
{
  [outProtocol writeMessageBeginWithName: @"GetGroupLabel" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"GetGroupLabel_args"];
  [outProtocol writeFieldBeginWithName: @"_homeId" type: TType_I32 fieldID: 1];
  [outProtocol writeI32: _homeId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"_nodeId" type: TType_BYTE fieldID: 2];
  [outProtocol writeByte: _nodeId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"_groupIdx" type: TType_BYTE fieldID: 3];
  [outProtocol writeByte: _groupIdx];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSString *) recv_GetGroupLabel
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveGetGroupLabel_result * result = [[[OpenZWaveGetGroupLabel_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"GetGroupLabel failed: unknown result"];
}

- (NSString *) GetGroupLabel: (int32_t) _homeId : (uint8_t) _nodeId : (uint8_t) _groupIdx
{
  [self send_GetGroupLabel: _homeId : _nodeId : _groupIdx];
  return [self recv_GetGroupLabel];
}

- (void) send_AddAssociation: (int32_t) _homeId : (uint8_t) _nodeId : (uint8_t) _groupIdx : (uint8_t) _targetNodeId
{
  [outProtocol writeMessageBeginWithName: @"AddAssociation" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"AddAssociation_args"];
  [outProtocol writeFieldBeginWithName: @"_homeId" type: TType_I32 fieldID: 1];
  [outProtocol writeI32: _homeId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"_nodeId" type: TType_BYTE fieldID: 2];
  [outProtocol writeByte: _nodeId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"_groupIdx" type: TType_BYTE fieldID: 3];
  [outProtocol writeByte: _groupIdx];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"_targetNodeId" type: TType_BYTE fieldID: 4];
  [outProtocol writeByte: _targetNodeId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (void) recv_AddAssociation
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveAddAssociation_result * result = [[[OpenZWaveAddAssociation_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  return;
}

- (void) AddAssociation: (int32_t) _homeId : (uint8_t) _nodeId : (uint8_t) _groupIdx : (uint8_t) _targetNodeId
{
  [self send_AddAssociation: _homeId : _nodeId : _groupIdx : _targetNodeId];
  [self recv_AddAssociation];
}

- (void) send_RemoveAssociation: (int32_t) _homeId : (uint8_t) _nodeId : (uint8_t) _groupIdx : (uint8_t) _targetNodeId
{
  [outProtocol writeMessageBeginWithName: @"RemoveAssociation" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"RemoveAssociation_args"];
  [outProtocol writeFieldBeginWithName: @"_homeId" type: TType_I32 fieldID: 1];
  [outProtocol writeI32: _homeId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"_nodeId" type: TType_BYTE fieldID: 2];
  [outProtocol writeByte: _nodeId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"_groupIdx" type: TType_BYTE fieldID: 3];
  [outProtocol writeByte: _groupIdx];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"_targetNodeId" type: TType_BYTE fieldID: 4];
  [outProtocol writeByte: _targetNodeId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (void) recv_RemoveAssociation
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveRemoveAssociation_result * result = [[[OpenZWaveRemoveAssociation_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  return;
}

- (void) RemoveAssociation: (int32_t) _homeId : (uint8_t) _nodeId : (uint8_t) _groupIdx : (uint8_t) _targetNodeId
{
  [self send_RemoveAssociation: _homeId : _nodeId : _groupIdx : _targetNodeId];
  [self recv_RemoveAssociation];
}

- (void) send_ResetController: (int32_t) _homeId
{
  [outProtocol writeMessageBeginWithName: @"ResetController" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"ResetController_args"];
  [outProtocol writeFieldBeginWithName: @"_homeId" type: TType_I32 fieldID: 1];
  [outProtocol writeI32: _homeId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (void) recv_ResetController
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveResetController_result * result = [[[OpenZWaveResetController_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  return;
}

- (void) ResetController: (int32_t) _homeId
{
  [self send_ResetController: _homeId];
  [self recv_ResetController];
}

- (void) send_SoftReset: (int32_t) _homeId
{
  [outProtocol writeMessageBeginWithName: @"SoftReset" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"SoftReset_args"];
  [outProtocol writeFieldBeginWithName: @"_homeId" type: TType_I32 fieldID: 1];
  [outProtocol writeI32: _homeId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (void) recv_SoftReset
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveSoftReset_result * result = [[[OpenZWaveSoftReset_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  return;
}

- (void) SoftReset: (int32_t) _homeId
{
  [self send_SoftReset: _homeId];
  [self recv_SoftReset];
}

- (void) send_BeginControllerCommand: (int32_t) _homeId : (int) _command : (BOOL) _highPower : (uint8_t) _nodeId : (uint8_t) _arg
{
  [outProtocol writeMessageBeginWithName: @"BeginControllerCommand" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"BeginControllerCommand_args"];
  [outProtocol writeFieldBeginWithName: @"_homeId" type: TType_I32 fieldID: 1];
  [outProtocol writeI32: _homeId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"_command" type: TType_I32 fieldID: 2];
  [outProtocol writeI32: _command];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"_highPower" type: TType_BOOL fieldID: 3];
  [outProtocol writeBool: _highPower];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"_nodeId" type: TType_BYTE fieldID: 4];
  [outProtocol writeByte: _nodeId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"_arg" type: TType_BYTE fieldID: 5];
  [outProtocol writeByte: _arg];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (BOOL) recv_BeginControllerCommand
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveBeginControllerCommand_result * result = [[[OpenZWaveBeginControllerCommand_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"BeginControllerCommand failed: unknown result"];
}

- (BOOL) BeginControllerCommand: (int32_t) _homeId : (int) _command : (BOOL) _highPower : (uint8_t) _nodeId : (uint8_t) _arg
{
  [self send_BeginControllerCommand: _homeId : _command : _highPower : _nodeId : _arg];
  return [self recv_BeginControllerCommand];
}

- (void) send_CancelControllerCommand: (int32_t) _homeId
{
  [outProtocol writeMessageBeginWithName: @"CancelControllerCommand" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"CancelControllerCommand_args"];
  [outProtocol writeFieldBeginWithName: @"_homeId" type: TType_I32 fieldID: 1];
  [outProtocol writeI32: _homeId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (BOOL) recv_CancelControllerCommand
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveCancelControllerCommand_result * result = [[[OpenZWaveCancelControllerCommand_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"CancelControllerCommand failed: unknown result"];
}

- (BOOL) CancelControllerCommand: (int32_t) _homeId
{
  [self send_CancelControllerCommand: _homeId];
  return [self recv_CancelControllerCommand];
}

- (void) send_GetNumScenes
{
  [outProtocol writeMessageBeginWithName: @"GetNumScenes" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"GetNumScenes_args"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (uint8_t) recv_GetNumScenes
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveGetNumScenes_result * result = [[[OpenZWaveGetNumScenes_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"GetNumScenes failed: unknown result"];
}

- (uint8_t) GetNumScenes
{
  [self send_GetNumScenes];
  return [self recv_GetNumScenes];
}

- (void) send_GetAllScenes
{
  [outProtocol writeMessageBeginWithName: @"GetAllScenes" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"GetAllScenes_args"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (OpenZWaveGetAllScenesReturnStruct *) recv_GetAllScenes
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveGetAllScenes_result * result = [[[OpenZWaveGetAllScenes_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"GetAllScenes failed: unknown result"];
}

- (OpenZWaveGetAllScenesReturnStruct *) GetAllScenes
{
  [self send_GetAllScenes];
  return [self recv_GetAllScenes];
}

- (void) send_CreateScene
{
  [outProtocol writeMessageBeginWithName: @"CreateScene" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"CreateScene_args"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (uint8_t) recv_CreateScene
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveCreateScene_result * result = [[[OpenZWaveCreateScene_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"CreateScene failed: unknown result"];
}

- (uint8_t) CreateScene
{
  [self send_CreateScene];
  return [self recv_CreateScene];
}

- (void) send_RemoveScene: (uint8_t) _sceneId
{
  [outProtocol writeMessageBeginWithName: @"RemoveScene" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"RemoveScene_args"];
  [outProtocol writeFieldBeginWithName: @"_sceneId" type: TType_BYTE fieldID: 1];
  [outProtocol writeByte: _sceneId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (BOOL) recv_RemoveScene
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveRemoveScene_result * result = [[[OpenZWaveRemoveScene_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"RemoveScene failed: unknown result"];
}

- (BOOL) RemoveScene: (uint8_t) _sceneId
{
  [self send_RemoveScene: _sceneId];
  return [self recv_RemoveScene];
}

- (void) send_AddSceneValue_Bool: (uint8_t) _sceneId : (OpenZWaveRemoteValueID *) _valueId : (BOOL) _value
{
  [outProtocol writeMessageBeginWithName: @"AddSceneValue_Bool" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"AddSceneValue_Bool_args"];
  [outProtocol writeFieldBeginWithName: @"_sceneId" type: TType_BYTE fieldID: 1];
  [outProtocol writeByte: _sceneId];
  [outProtocol writeFieldEnd];
  if (_valueId != nil)  {
    [outProtocol writeFieldBeginWithName: @"_valueId" type: TType_STRUCT fieldID: 2];
    [_valueId write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"_value" type: TType_BOOL fieldID: 3];
  [outProtocol writeBool: _value];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (BOOL) recv_AddSceneValue_Bool
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveAddSceneValue_Bool_result * result = [[[OpenZWaveAddSceneValue_Bool_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"AddSceneValue_Bool failed: unknown result"];
}

- (BOOL) AddSceneValue_Bool: (uint8_t) _sceneId : (OpenZWaveRemoteValueID *) _valueId : (BOOL) _value
{
  [self send_AddSceneValue_Bool: _sceneId : _valueId : _value];
  return [self recv_AddSceneValue_Bool];
}

- (void) send_AddSceneValue_Uint8: (uint8_t) _sceneId : (OpenZWaveRemoteValueID *) _valueId : (uint8_t) _value
{
  [outProtocol writeMessageBeginWithName: @"AddSceneValue_Uint8" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"AddSceneValue_Uint8_args"];
  [outProtocol writeFieldBeginWithName: @"_sceneId" type: TType_BYTE fieldID: 1];
  [outProtocol writeByte: _sceneId];
  [outProtocol writeFieldEnd];
  if (_valueId != nil)  {
    [outProtocol writeFieldBeginWithName: @"_valueId" type: TType_STRUCT fieldID: 2];
    [_valueId write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"_value" type: TType_BYTE fieldID: 3];
  [outProtocol writeByte: _value];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (BOOL) recv_AddSceneValue_Uint8
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveAddSceneValue_Uint8_result * result = [[[OpenZWaveAddSceneValue_Uint8_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"AddSceneValue_Uint8 failed: unknown result"];
}

- (BOOL) AddSceneValue_Uint8: (uint8_t) _sceneId : (OpenZWaveRemoteValueID *) _valueId : (uint8_t) _value
{
  [self send_AddSceneValue_Uint8: _sceneId : _valueId : _value];
  return [self recv_AddSceneValue_Uint8];
}

- (void) send_AddSceneValue_Float: (uint8_t) _sceneId : (OpenZWaveRemoteValueID *) _valueId : (double) _value
{
  [outProtocol writeMessageBeginWithName: @"AddSceneValue_Float" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"AddSceneValue_Float_args"];
  [outProtocol writeFieldBeginWithName: @"_sceneId" type: TType_BYTE fieldID: 1];
  [outProtocol writeByte: _sceneId];
  [outProtocol writeFieldEnd];
  if (_valueId != nil)  {
    [outProtocol writeFieldBeginWithName: @"_valueId" type: TType_STRUCT fieldID: 2];
    [_valueId write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"_value" type: TType_DOUBLE fieldID: 3];
  [outProtocol writeDouble: _value];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (BOOL) recv_AddSceneValue_Float
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveAddSceneValue_Float_result * result = [[[OpenZWaveAddSceneValue_Float_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"AddSceneValue_Float failed: unknown result"];
}

- (BOOL) AddSceneValue_Float: (uint8_t) _sceneId : (OpenZWaveRemoteValueID *) _valueId : (double) _value
{
  [self send_AddSceneValue_Float: _sceneId : _valueId : _value];
  return [self recv_AddSceneValue_Float];
}

- (void) send_AddSceneValue_Int32: (uint8_t) _sceneId : (OpenZWaveRemoteValueID *) _valueId : (int32_t) _value
{
  [outProtocol writeMessageBeginWithName: @"AddSceneValue_Int32" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"AddSceneValue_Int32_args"];
  [outProtocol writeFieldBeginWithName: @"_sceneId" type: TType_BYTE fieldID: 1];
  [outProtocol writeByte: _sceneId];
  [outProtocol writeFieldEnd];
  if (_valueId != nil)  {
    [outProtocol writeFieldBeginWithName: @"_valueId" type: TType_STRUCT fieldID: 2];
    [_valueId write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"_value" type: TType_I32 fieldID: 3];
  [outProtocol writeI32: _value];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (BOOL) recv_AddSceneValue_Int32
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveAddSceneValue_Int32_result * result = [[[OpenZWaveAddSceneValue_Int32_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"AddSceneValue_Int32 failed: unknown result"];
}

- (BOOL) AddSceneValue_Int32: (uint8_t) _sceneId : (OpenZWaveRemoteValueID *) _valueId : (int32_t) _value
{
  [self send_AddSceneValue_Int32: _sceneId : _valueId : _value];
  return [self recv_AddSceneValue_Int32];
}

- (void) send_AddSceneValue_Int16: (uint8_t) _sceneId : (OpenZWaveRemoteValueID *) _valueId : (int16_t) _value
{
  [outProtocol writeMessageBeginWithName: @"AddSceneValue_Int16" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"AddSceneValue_Int16_args"];
  [outProtocol writeFieldBeginWithName: @"_sceneId" type: TType_BYTE fieldID: 1];
  [outProtocol writeByte: _sceneId];
  [outProtocol writeFieldEnd];
  if (_valueId != nil)  {
    [outProtocol writeFieldBeginWithName: @"_valueId" type: TType_STRUCT fieldID: 2];
    [_valueId write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"_value" type: TType_I16 fieldID: 3];
  [outProtocol writeI16: _value];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (BOOL) recv_AddSceneValue_Int16
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveAddSceneValue_Int16_result * result = [[[OpenZWaveAddSceneValue_Int16_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"AddSceneValue_Int16 failed: unknown result"];
}

- (BOOL) AddSceneValue_Int16: (uint8_t) _sceneId : (OpenZWaveRemoteValueID *) _valueId : (int16_t) _value
{
  [self send_AddSceneValue_Int16: _sceneId : _valueId : _value];
  return [self recv_AddSceneValue_Int16];
}

- (void) send_AddSceneValue_String: (uint8_t) _sceneId : (OpenZWaveRemoteValueID *) _valueId : (NSString *) _value
{
  [outProtocol writeMessageBeginWithName: @"AddSceneValue_String" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"AddSceneValue_String_args"];
  [outProtocol writeFieldBeginWithName: @"_sceneId" type: TType_BYTE fieldID: 1];
  [outProtocol writeByte: _sceneId];
  [outProtocol writeFieldEnd];
  if (_valueId != nil)  {
    [outProtocol writeFieldBeginWithName: @"_valueId" type: TType_STRUCT fieldID: 2];
    [_valueId write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  if (_value != nil)  {
    [outProtocol writeFieldBeginWithName: @"_value" type: TType_STRING fieldID: 3];
    [outProtocol writeString: _value];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (BOOL) recv_AddSceneValue_String
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveAddSceneValue_String_result * result = [[[OpenZWaveAddSceneValue_String_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"AddSceneValue_String failed: unknown result"];
}

- (BOOL) AddSceneValue_String: (uint8_t) _sceneId : (OpenZWaveRemoteValueID *) _valueId : (NSString *) _value
{
  [self send_AddSceneValue_String: _sceneId : _valueId : _value];
  return [self recv_AddSceneValue_String];
}

- (void) send_AddSceneValueListSelection_String: (uint8_t) _sceneId : (OpenZWaveRemoteValueID *) _valueId : (NSString *) _value
{
  [outProtocol writeMessageBeginWithName: @"AddSceneValueListSelection_String" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"AddSceneValueListSelection_String_args"];
  [outProtocol writeFieldBeginWithName: @"_sceneId" type: TType_BYTE fieldID: 1];
  [outProtocol writeByte: _sceneId];
  [outProtocol writeFieldEnd];
  if (_valueId != nil)  {
    [outProtocol writeFieldBeginWithName: @"_valueId" type: TType_STRUCT fieldID: 2];
    [_valueId write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  if (_value != nil)  {
    [outProtocol writeFieldBeginWithName: @"_value" type: TType_STRING fieldID: 3];
    [outProtocol writeString: _value];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (BOOL) recv_AddSceneValueListSelection_String
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveAddSceneValueListSelection_String_result * result = [[[OpenZWaveAddSceneValueListSelection_String_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"AddSceneValueListSelection_String failed: unknown result"];
}

- (BOOL) AddSceneValueListSelection_String: (uint8_t) _sceneId : (OpenZWaveRemoteValueID *) _valueId : (NSString *) _value
{
  [self send_AddSceneValueListSelection_String: _sceneId : _valueId : _value];
  return [self recv_AddSceneValueListSelection_String];
}

- (void) send_AddSceneValueListSelection_Int32: (uint8_t) _sceneId : (OpenZWaveRemoteValueID *) _valueId : (int32_t) _value
{
  [outProtocol writeMessageBeginWithName: @"AddSceneValueListSelection_Int32" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"AddSceneValueListSelection_Int32_args"];
  [outProtocol writeFieldBeginWithName: @"_sceneId" type: TType_BYTE fieldID: 1];
  [outProtocol writeByte: _sceneId];
  [outProtocol writeFieldEnd];
  if (_valueId != nil)  {
    [outProtocol writeFieldBeginWithName: @"_valueId" type: TType_STRUCT fieldID: 2];
    [_valueId write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"_value" type: TType_I32 fieldID: 3];
  [outProtocol writeI32: _value];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (BOOL) recv_AddSceneValueListSelection_Int32
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveAddSceneValueListSelection_Int32_result * result = [[[OpenZWaveAddSceneValueListSelection_Int32_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"AddSceneValueListSelection_Int32 failed: unknown result"];
}

- (BOOL) AddSceneValueListSelection_Int32: (uint8_t) _sceneId : (OpenZWaveRemoteValueID *) _valueId : (int32_t) _value
{
  [self send_AddSceneValueListSelection_Int32: _sceneId : _valueId : _value];
  return [self recv_AddSceneValueListSelection_Int32];
}

- (void) send_RemoveSceneValue: (uint8_t) _sceneId : (OpenZWaveRemoteValueID *) _valueId
{
  [outProtocol writeMessageBeginWithName: @"RemoveSceneValue" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"RemoveSceneValue_args"];
  [outProtocol writeFieldBeginWithName: @"_sceneId" type: TType_BYTE fieldID: 1];
  [outProtocol writeByte: _sceneId];
  [outProtocol writeFieldEnd];
  if (_valueId != nil)  {
    [outProtocol writeFieldBeginWithName: @"_valueId" type: TType_STRUCT fieldID: 2];
    [_valueId write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (BOOL) recv_RemoveSceneValue
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveRemoveSceneValue_result * result = [[[OpenZWaveRemoveSceneValue_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"RemoveSceneValue failed: unknown result"];
}

- (BOOL) RemoveSceneValue: (uint8_t) _sceneId : (OpenZWaveRemoteValueID *) _valueId
{
  [self send_RemoveSceneValue: _sceneId : _valueId];
  return [self recv_RemoveSceneValue];
}

- (void) send_SceneGetValues: (uint8_t) _sceneId
{
  [outProtocol writeMessageBeginWithName: @"SceneGetValues" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"SceneGetValues_args"];
  [outProtocol writeFieldBeginWithName: @"_sceneId" type: TType_BYTE fieldID: 1];
  [outProtocol writeByte: _sceneId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (OpenZWaveSceneGetValuesReturnStruct *) recv_SceneGetValues
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveSceneGetValues_result * result = [[[OpenZWaveSceneGetValues_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"SceneGetValues failed: unknown result"];
}

- (OpenZWaveSceneGetValuesReturnStruct *) SceneGetValues: (uint8_t) _sceneId
{
  [self send_SceneGetValues: _sceneId];
  return [self recv_SceneGetValues];
}

- (void) send_SceneGetValueAsBool: (uint8_t) _sceneId : (OpenZWaveRemoteValueID *) _valueId
{
  [outProtocol writeMessageBeginWithName: @"SceneGetValueAsBool" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"SceneGetValueAsBool_args"];
  [outProtocol writeFieldBeginWithName: @"_sceneId" type: TType_BYTE fieldID: 1];
  [outProtocol writeByte: _sceneId];
  [outProtocol writeFieldEnd];
  if (_valueId != nil)  {
    [outProtocol writeFieldBeginWithName: @"_valueId" type: TType_STRUCT fieldID: 2];
    [_valueId write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (OpenZWaveBool_Bool *) recv_SceneGetValueAsBool
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveSceneGetValueAsBool_result * result = [[[OpenZWaveSceneGetValueAsBool_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"SceneGetValueAsBool failed: unknown result"];
}

- (OpenZWaveBool_Bool *) SceneGetValueAsBool: (uint8_t) _sceneId : (OpenZWaveRemoteValueID *) _valueId
{
  [self send_SceneGetValueAsBool: _sceneId : _valueId];
  return [self recv_SceneGetValueAsBool];
}

- (void) send_SceneGetValueAsByte: (uint8_t) _sceneId : (OpenZWaveRemoteValueID *) _valueId
{
  [outProtocol writeMessageBeginWithName: @"SceneGetValueAsByte" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"SceneGetValueAsByte_args"];
  [outProtocol writeFieldBeginWithName: @"_sceneId" type: TType_BYTE fieldID: 1];
  [outProtocol writeByte: _sceneId];
  [outProtocol writeFieldEnd];
  if (_valueId != nil)  {
    [outProtocol writeFieldBeginWithName: @"_valueId" type: TType_STRUCT fieldID: 2];
    [_valueId write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (OpenZWaveBool_UInt8 *) recv_SceneGetValueAsByte
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveSceneGetValueAsByte_result * result = [[[OpenZWaveSceneGetValueAsByte_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"SceneGetValueAsByte failed: unknown result"];
}

- (OpenZWaveBool_UInt8 *) SceneGetValueAsByte: (uint8_t) _sceneId : (OpenZWaveRemoteValueID *) _valueId
{
  [self send_SceneGetValueAsByte: _sceneId : _valueId];
  return [self recv_SceneGetValueAsByte];
}

- (void) send_SceneGetValueAsFloat: (uint8_t) _sceneId : (OpenZWaveRemoteValueID *) _valueId
{
  [outProtocol writeMessageBeginWithName: @"SceneGetValueAsFloat" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"SceneGetValueAsFloat_args"];
  [outProtocol writeFieldBeginWithName: @"_sceneId" type: TType_BYTE fieldID: 1];
  [outProtocol writeByte: _sceneId];
  [outProtocol writeFieldEnd];
  if (_valueId != nil)  {
    [outProtocol writeFieldBeginWithName: @"_valueId" type: TType_STRUCT fieldID: 2];
    [_valueId write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (OpenZWaveBool_Float *) recv_SceneGetValueAsFloat
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveSceneGetValueAsFloat_result * result = [[[OpenZWaveSceneGetValueAsFloat_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"SceneGetValueAsFloat failed: unknown result"];
}

- (OpenZWaveBool_Float *) SceneGetValueAsFloat: (uint8_t) _sceneId : (OpenZWaveRemoteValueID *) _valueId
{
  [self send_SceneGetValueAsFloat: _sceneId : _valueId];
  return [self recv_SceneGetValueAsFloat];
}

- (void) send_SceneGetValueAsInt: (uint8_t) _sceneId : (OpenZWaveRemoteValueID *) _valueId
{
  [outProtocol writeMessageBeginWithName: @"SceneGetValueAsInt" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"SceneGetValueAsInt_args"];
  [outProtocol writeFieldBeginWithName: @"_sceneId" type: TType_BYTE fieldID: 1];
  [outProtocol writeByte: _sceneId];
  [outProtocol writeFieldEnd];
  if (_valueId != nil)  {
    [outProtocol writeFieldBeginWithName: @"_valueId" type: TType_STRUCT fieldID: 2];
    [_valueId write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (OpenZWaveBool_Int *) recv_SceneGetValueAsInt
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveSceneGetValueAsInt_result * result = [[[OpenZWaveSceneGetValueAsInt_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"SceneGetValueAsInt failed: unknown result"];
}

- (OpenZWaveBool_Int *) SceneGetValueAsInt: (uint8_t) _sceneId : (OpenZWaveRemoteValueID *) _valueId
{
  [self send_SceneGetValueAsInt: _sceneId : _valueId];
  return [self recv_SceneGetValueAsInt];
}

- (void) send_SceneGetValueAsShort: (uint8_t) _sceneId : (OpenZWaveRemoteValueID *) _valueId
{
  [outProtocol writeMessageBeginWithName: @"SceneGetValueAsShort" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"SceneGetValueAsShort_args"];
  [outProtocol writeFieldBeginWithName: @"_sceneId" type: TType_BYTE fieldID: 1];
  [outProtocol writeByte: _sceneId];
  [outProtocol writeFieldEnd];
  if (_valueId != nil)  {
    [outProtocol writeFieldBeginWithName: @"_valueId" type: TType_STRUCT fieldID: 2];
    [_valueId write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (OpenZWaveBool_Int16 *) recv_SceneGetValueAsShort
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveSceneGetValueAsShort_result * result = [[[OpenZWaveSceneGetValueAsShort_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"SceneGetValueAsShort failed: unknown result"];
}

- (OpenZWaveBool_Int16 *) SceneGetValueAsShort: (uint8_t) _sceneId : (OpenZWaveRemoteValueID *) _valueId
{
  [self send_SceneGetValueAsShort: _sceneId : _valueId];
  return [self recv_SceneGetValueAsShort];
}

- (void) send_SceneGetValueAsString: (uint8_t) _sceneId : (OpenZWaveRemoteValueID *) _valueId
{
  [outProtocol writeMessageBeginWithName: @"SceneGetValueAsString" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"SceneGetValueAsString_args"];
  [outProtocol writeFieldBeginWithName: @"_sceneId" type: TType_BYTE fieldID: 1];
  [outProtocol writeByte: _sceneId];
  [outProtocol writeFieldEnd];
  if (_valueId != nil)  {
    [outProtocol writeFieldBeginWithName: @"_valueId" type: TType_STRUCT fieldID: 2];
    [_valueId write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (OpenZWaveBool_String *) recv_SceneGetValueAsString
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveSceneGetValueAsString_result * result = [[[OpenZWaveSceneGetValueAsString_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"SceneGetValueAsString failed: unknown result"];
}

- (OpenZWaveBool_String *) SceneGetValueAsString: (uint8_t) _sceneId : (OpenZWaveRemoteValueID *) _valueId
{
  [self send_SceneGetValueAsString: _sceneId : _valueId];
  return [self recv_SceneGetValueAsString];
}

- (void) send_SceneGetValueListSelection_String: (uint8_t) _sceneId : (OpenZWaveRemoteValueID *) _valueId
{
  [outProtocol writeMessageBeginWithName: @"SceneGetValueListSelection_String" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"SceneGetValueListSelection_String_args"];
  [outProtocol writeFieldBeginWithName: @"_sceneId" type: TType_BYTE fieldID: 1];
  [outProtocol writeByte: _sceneId];
  [outProtocol writeFieldEnd];
  if (_valueId != nil)  {
    [outProtocol writeFieldBeginWithName: @"_valueId" type: TType_STRUCT fieldID: 2];
    [_valueId write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (OpenZWaveBool_String *) recv_SceneGetValueListSelection_String
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveSceneGetValueListSelection_String_result * result = [[[OpenZWaveSceneGetValueListSelection_String_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"SceneGetValueListSelection_String failed: unknown result"];
}

- (OpenZWaveBool_String *) SceneGetValueListSelection_String: (uint8_t) _sceneId : (OpenZWaveRemoteValueID *) _valueId
{
  [self send_SceneGetValueListSelection_String: _sceneId : _valueId];
  return [self recv_SceneGetValueListSelection_String];
}

- (void) send_SceneGetValueListSelection_Int32: (uint8_t) _sceneId : (OpenZWaveRemoteValueID *) _valueId
{
  [outProtocol writeMessageBeginWithName: @"SceneGetValueListSelection_Int32" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"SceneGetValueListSelection_Int32_args"];
  [outProtocol writeFieldBeginWithName: @"_sceneId" type: TType_BYTE fieldID: 1];
  [outProtocol writeByte: _sceneId];
  [outProtocol writeFieldEnd];
  if (_valueId != nil)  {
    [outProtocol writeFieldBeginWithName: @"_valueId" type: TType_STRUCT fieldID: 2];
    [_valueId write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (OpenZWaveBool_Int *) recv_SceneGetValueListSelection_Int32
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveSceneGetValueListSelection_Int32_result * result = [[[OpenZWaveSceneGetValueListSelection_Int32_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"SceneGetValueListSelection_Int32 failed: unknown result"];
}

- (OpenZWaveBool_Int *) SceneGetValueListSelection_Int32: (uint8_t) _sceneId : (OpenZWaveRemoteValueID *) _valueId
{
  [self send_SceneGetValueListSelection_Int32: _sceneId : _valueId];
  return [self recv_SceneGetValueListSelection_Int32];
}

- (void) send_SetSceneValue_Bool: (uint8_t) _sceneId : (OpenZWaveRemoteValueID *) _valueId : (BOOL) _value
{
  [outProtocol writeMessageBeginWithName: @"SetSceneValue_Bool" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"SetSceneValue_Bool_args"];
  [outProtocol writeFieldBeginWithName: @"_sceneId" type: TType_BYTE fieldID: 1];
  [outProtocol writeByte: _sceneId];
  [outProtocol writeFieldEnd];
  if (_valueId != nil)  {
    [outProtocol writeFieldBeginWithName: @"_valueId" type: TType_STRUCT fieldID: 2];
    [_valueId write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"_value" type: TType_BOOL fieldID: 3];
  [outProtocol writeBool: _value];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (BOOL) recv_SetSceneValue_Bool
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveSetSceneValue_Bool_result * result = [[[OpenZWaveSetSceneValue_Bool_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"SetSceneValue_Bool failed: unknown result"];
}

- (BOOL) SetSceneValue_Bool: (uint8_t) _sceneId : (OpenZWaveRemoteValueID *) _valueId : (BOOL) _value
{
  [self send_SetSceneValue_Bool: _sceneId : _valueId : _value];
  return [self recv_SetSceneValue_Bool];
}

- (void) send_SetSceneValue_Uint8: (uint8_t) _sceneId : (OpenZWaveRemoteValueID *) _valueId : (uint8_t) _value
{
  [outProtocol writeMessageBeginWithName: @"SetSceneValue_Uint8" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"SetSceneValue_Uint8_args"];
  [outProtocol writeFieldBeginWithName: @"_sceneId" type: TType_BYTE fieldID: 1];
  [outProtocol writeByte: _sceneId];
  [outProtocol writeFieldEnd];
  if (_valueId != nil)  {
    [outProtocol writeFieldBeginWithName: @"_valueId" type: TType_STRUCT fieldID: 2];
    [_valueId write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"_value" type: TType_BYTE fieldID: 3];
  [outProtocol writeByte: _value];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (BOOL) recv_SetSceneValue_Uint8
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveSetSceneValue_Uint8_result * result = [[[OpenZWaveSetSceneValue_Uint8_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"SetSceneValue_Uint8 failed: unknown result"];
}

- (BOOL) SetSceneValue_Uint8: (uint8_t) _sceneId : (OpenZWaveRemoteValueID *) _valueId : (uint8_t) _value
{
  [self send_SetSceneValue_Uint8: _sceneId : _valueId : _value];
  return [self recv_SetSceneValue_Uint8];
}

- (void) send_SetSceneValue_Float: (uint8_t) _sceneId : (OpenZWaveRemoteValueID *) _valueId : (double) _value
{
  [outProtocol writeMessageBeginWithName: @"SetSceneValue_Float" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"SetSceneValue_Float_args"];
  [outProtocol writeFieldBeginWithName: @"_sceneId" type: TType_BYTE fieldID: 1];
  [outProtocol writeByte: _sceneId];
  [outProtocol writeFieldEnd];
  if (_valueId != nil)  {
    [outProtocol writeFieldBeginWithName: @"_valueId" type: TType_STRUCT fieldID: 2];
    [_valueId write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"_value" type: TType_DOUBLE fieldID: 3];
  [outProtocol writeDouble: _value];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (BOOL) recv_SetSceneValue_Float
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveSetSceneValue_Float_result * result = [[[OpenZWaveSetSceneValue_Float_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"SetSceneValue_Float failed: unknown result"];
}

- (BOOL) SetSceneValue_Float: (uint8_t) _sceneId : (OpenZWaveRemoteValueID *) _valueId : (double) _value
{
  [self send_SetSceneValue_Float: _sceneId : _valueId : _value];
  return [self recv_SetSceneValue_Float];
}

- (void) send_SetSceneValue_Int32: (uint8_t) _sceneId : (OpenZWaveRemoteValueID *) _valueId : (int32_t) _value
{
  [outProtocol writeMessageBeginWithName: @"SetSceneValue_Int32" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"SetSceneValue_Int32_args"];
  [outProtocol writeFieldBeginWithName: @"_sceneId" type: TType_BYTE fieldID: 1];
  [outProtocol writeByte: _sceneId];
  [outProtocol writeFieldEnd];
  if (_valueId != nil)  {
    [outProtocol writeFieldBeginWithName: @"_valueId" type: TType_STRUCT fieldID: 2];
    [_valueId write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"_value" type: TType_I32 fieldID: 3];
  [outProtocol writeI32: _value];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (BOOL) recv_SetSceneValue_Int32
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveSetSceneValue_Int32_result * result = [[[OpenZWaveSetSceneValue_Int32_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"SetSceneValue_Int32 failed: unknown result"];
}

- (BOOL) SetSceneValue_Int32: (uint8_t) _sceneId : (OpenZWaveRemoteValueID *) _valueId : (int32_t) _value
{
  [self send_SetSceneValue_Int32: _sceneId : _valueId : _value];
  return [self recv_SetSceneValue_Int32];
}

- (void) send_SetSceneValue_Int16: (uint8_t) _sceneId : (OpenZWaveRemoteValueID *) _valueId : (int16_t) _value
{
  [outProtocol writeMessageBeginWithName: @"SetSceneValue_Int16" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"SetSceneValue_Int16_args"];
  [outProtocol writeFieldBeginWithName: @"_sceneId" type: TType_BYTE fieldID: 1];
  [outProtocol writeByte: _sceneId];
  [outProtocol writeFieldEnd];
  if (_valueId != nil)  {
    [outProtocol writeFieldBeginWithName: @"_valueId" type: TType_STRUCT fieldID: 2];
    [_valueId write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"_value" type: TType_I16 fieldID: 3];
  [outProtocol writeI16: _value];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (BOOL) recv_SetSceneValue_Int16
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveSetSceneValue_Int16_result * result = [[[OpenZWaveSetSceneValue_Int16_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"SetSceneValue_Int16 failed: unknown result"];
}

- (BOOL) SetSceneValue_Int16: (uint8_t) _sceneId : (OpenZWaveRemoteValueID *) _valueId : (int16_t) _value
{
  [self send_SetSceneValue_Int16: _sceneId : _valueId : _value];
  return [self recv_SetSceneValue_Int16];
}

- (void) send_SetSceneValue_String: (uint8_t) _sceneId : (OpenZWaveRemoteValueID *) _valueId : (NSString *) _value
{
  [outProtocol writeMessageBeginWithName: @"SetSceneValue_String" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"SetSceneValue_String_args"];
  [outProtocol writeFieldBeginWithName: @"_sceneId" type: TType_BYTE fieldID: 1];
  [outProtocol writeByte: _sceneId];
  [outProtocol writeFieldEnd];
  if (_valueId != nil)  {
    [outProtocol writeFieldBeginWithName: @"_valueId" type: TType_STRUCT fieldID: 2];
    [_valueId write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  if (_value != nil)  {
    [outProtocol writeFieldBeginWithName: @"_value" type: TType_STRING fieldID: 3];
    [outProtocol writeString: _value];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (BOOL) recv_SetSceneValue_String
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveSetSceneValue_String_result * result = [[[OpenZWaveSetSceneValue_String_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"SetSceneValue_String failed: unknown result"];
}

- (BOOL) SetSceneValue_String: (uint8_t) _sceneId : (OpenZWaveRemoteValueID *) _valueId : (NSString *) _value
{
  [self send_SetSceneValue_String: _sceneId : _valueId : _value];
  return [self recv_SetSceneValue_String];
}

- (void) send_SetSceneValueListSelection_String: (uint8_t) _sceneId : (OpenZWaveRemoteValueID *) _valueId : (NSString *) _value
{
  [outProtocol writeMessageBeginWithName: @"SetSceneValueListSelection_String" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"SetSceneValueListSelection_String_args"];
  [outProtocol writeFieldBeginWithName: @"_sceneId" type: TType_BYTE fieldID: 1];
  [outProtocol writeByte: _sceneId];
  [outProtocol writeFieldEnd];
  if (_valueId != nil)  {
    [outProtocol writeFieldBeginWithName: @"_valueId" type: TType_STRUCT fieldID: 2];
    [_valueId write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  if (_value != nil)  {
    [outProtocol writeFieldBeginWithName: @"_value" type: TType_STRING fieldID: 3];
    [outProtocol writeString: _value];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (BOOL) recv_SetSceneValueListSelection_String
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveSetSceneValueListSelection_String_result * result = [[[OpenZWaveSetSceneValueListSelection_String_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"SetSceneValueListSelection_String failed: unknown result"];
}

- (BOOL) SetSceneValueListSelection_String: (uint8_t) _sceneId : (OpenZWaveRemoteValueID *) _valueId : (NSString *) _value
{
  [self send_SetSceneValueListSelection_String: _sceneId : _valueId : _value];
  return [self recv_SetSceneValueListSelection_String];
}

- (void) send_SetSceneValueListSelection_Int32: (uint8_t) _sceneId : (OpenZWaveRemoteValueID *) _valueId : (int32_t) _value
{
  [outProtocol writeMessageBeginWithName: @"SetSceneValueListSelection_Int32" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"SetSceneValueListSelection_Int32_args"];
  [outProtocol writeFieldBeginWithName: @"_sceneId" type: TType_BYTE fieldID: 1];
  [outProtocol writeByte: _sceneId];
  [outProtocol writeFieldEnd];
  if (_valueId != nil)  {
    [outProtocol writeFieldBeginWithName: @"_valueId" type: TType_STRUCT fieldID: 2];
    [_valueId write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"_value" type: TType_I32 fieldID: 3];
  [outProtocol writeI32: _value];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (BOOL) recv_SetSceneValueListSelection_Int32
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveSetSceneValueListSelection_Int32_result * result = [[[OpenZWaveSetSceneValueListSelection_Int32_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"SetSceneValueListSelection_Int32 failed: unknown result"];
}

- (BOOL) SetSceneValueListSelection_Int32: (uint8_t) _sceneId : (OpenZWaveRemoteValueID *) _valueId : (int32_t) _value
{
  [self send_SetSceneValueListSelection_Int32: _sceneId : _valueId : _value];
  return [self recv_SetSceneValueListSelection_Int32];
}

- (void) send_GetSceneLabel: (uint8_t) _sceneId
{
  [outProtocol writeMessageBeginWithName: @"GetSceneLabel" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"GetSceneLabel_args"];
  [outProtocol writeFieldBeginWithName: @"_sceneId" type: TType_BYTE fieldID: 1];
  [outProtocol writeByte: _sceneId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSString *) recv_GetSceneLabel
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveGetSceneLabel_result * result = [[[OpenZWaveGetSceneLabel_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"GetSceneLabel failed: unknown result"];
}

- (NSString *) GetSceneLabel: (uint8_t) _sceneId
{
  [self send_GetSceneLabel: _sceneId];
  return [self recv_GetSceneLabel];
}

- (void) send_SetSceneLabel: (uint8_t) _sceneId : (NSString *) _value
{
  [outProtocol writeMessageBeginWithName: @"SetSceneLabel" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"SetSceneLabel_args"];
  [outProtocol writeFieldBeginWithName: @"_sceneId" type: TType_BYTE fieldID: 1];
  [outProtocol writeByte: _sceneId];
  [outProtocol writeFieldEnd];
  if (_value != nil)  {
    [outProtocol writeFieldBeginWithName: @"_value" type: TType_STRING fieldID: 2];
    [outProtocol writeString: _value];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (void) recv_SetSceneLabel
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveSetSceneLabel_result * result = [[[OpenZWaveSetSceneLabel_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  return;
}

- (void) SetSceneLabel: (uint8_t) _sceneId : (NSString *) _value
{
  [self send_SetSceneLabel: _sceneId : _value];
  [self recv_SetSceneLabel];
}

- (void) send_SceneExists: (uint8_t) _sceneId
{
  [outProtocol writeMessageBeginWithName: @"SceneExists" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"SceneExists_args"];
  [outProtocol writeFieldBeginWithName: @"_sceneId" type: TType_BYTE fieldID: 1];
  [outProtocol writeByte: _sceneId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (BOOL) recv_SceneExists
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveSceneExists_result * result = [[[OpenZWaveSceneExists_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"SceneExists failed: unknown result"];
}

- (BOOL) SceneExists: (uint8_t) _sceneId
{
  [self send_SceneExists: _sceneId];
  return [self recv_SceneExists];
}

- (void) send_ActivateScene: (uint8_t) _sceneId
{
  [outProtocol writeMessageBeginWithName: @"ActivateScene" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"ActivateScene_args"];
  [outProtocol writeFieldBeginWithName: @"_sceneId" type: TType_BYTE fieldID: 1];
  [outProtocol writeByte: _sceneId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (BOOL) recv_ActivateScene
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveActivateScene_result * result = [[[OpenZWaveActivateScene_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"ActivateScene failed: unknown result"];
}

- (BOOL) ActivateScene: (uint8_t) _sceneId
{
  [self send_ActivateScene: _sceneId];
  return [self recv_ActivateScene];
}

- (void) send_GetDriverStatistics: (int32_t) _homeId
{
  [outProtocol writeMessageBeginWithName: @"GetDriverStatistics" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"GetDriverStatistics_args"];
  [outProtocol writeFieldBeginWithName: @"_homeId" type: TType_I32 fieldID: 1];
  [outProtocol writeI32: _homeId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (OpenZWaveGetDriverStatisticsReturnStruct *) recv_GetDriverStatistics
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveGetDriverStatistics_result * result = [[[OpenZWaveGetDriverStatistics_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"GetDriverStatistics failed: unknown result"];
}

- (OpenZWaveGetDriverStatisticsReturnStruct *) GetDriverStatistics: (int32_t) _homeId
{
  [self send_GetDriverStatistics: _homeId];
  return [self recv_GetDriverStatistics];
}

- (void) send_SendAllValues
{
  [outProtocol writeMessageBeginWithName: @"SendAllValues" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"SendAllValues_args"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (void) recv_SendAllValues
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  OpenZWaveSendAllValues_result * result = [[[OpenZWaveSendAllValues_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  return;
}

- (void) SendAllValues
{
  [self send_SendAllValues];
  [self recv_SendAllValues];
}

@end

@implementation OpenZWaveRemoteManagerProcessor

- (id) initWithRemoteManager: (id <OpenZWaveRemoteManager>) service
{
  self = [super init];
  if (!self) {
    return nil;
  }
  mService = [service retain_stub];
  mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
  {
    SEL s = @selector(process_WriteConfig_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"WriteConfig"];
  }
  {
    SEL s = @selector(process_GetControllerNodeId_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"GetControllerNodeId"];
  }
  {
    SEL s = @selector(process_IsPrimaryController_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"IsPrimaryController"];
  }
  {
    SEL s = @selector(process_IsStaticUpdateController_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"IsStaticUpdateController"];
  }
  {
    SEL s = @selector(process_IsBridgeController_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"IsBridgeController"];
  }
  {
    SEL s = @selector(process_GetLibraryVersion_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"GetLibraryVersion"];
  }
  {
    SEL s = @selector(process_GetLibraryTypeName_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"GetLibraryTypeName"];
  }
  {
    SEL s = @selector(process_GetSendQueueCount_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"GetSendQueueCount"];
  }
  {
    SEL s = @selector(process_LogDriverStatistics_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"LogDriverStatistics"];
  }
  {
    SEL s = @selector(process_GetPollInterval_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"GetPollInterval"];
  }
  {
    SEL s = @selector(process_SetPollInterval_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"SetPollInterval"];
  }
  {
    SEL s = @selector(process_EnablePoll_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"EnablePoll"];
  }
  {
    SEL s = @selector(process_DisablePoll_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"DisablePoll"];
  }
  {
    SEL s = @selector(process_isPolled_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"isPolled"];
  }
  {
    SEL s = @selector(process_SetPollIntensity_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"SetPollIntensity"];
  }
  {
    SEL s = @selector(process_RefreshNodeInfo_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"RefreshNodeInfo"];
  }
  {
    SEL s = @selector(process_RequestNodeState_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"RequestNodeState"];
  }
  {
    SEL s = @selector(process_RequestNodeDynamic_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"RequestNodeDynamic"];
  }
  {
    SEL s = @selector(process_IsNodeListeningDevice_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"IsNodeListeningDevice"];
  }
  {
    SEL s = @selector(process_IsNodeFrequentListeningDevice_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"IsNodeFrequentListeningDevice"];
  }
  {
    SEL s = @selector(process_IsNodeBeamingDevice_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"IsNodeBeamingDevice"];
  }
  {
    SEL s = @selector(process_IsNodeRoutingDevice_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"IsNodeRoutingDevice"];
  }
  {
    SEL s = @selector(process_IsNodeSecurityDevice_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"IsNodeSecurityDevice"];
  }
  {
    SEL s = @selector(process_GetNodeMaxBaudRate_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"GetNodeMaxBaudRate"];
  }
  {
    SEL s = @selector(process_GetNodeVersion_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"GetNodeVersion"];
  }
  {
    SEL s = @selector(process_GetNodeSecurity_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"GetNodeSecurity"];
  }
  {
    SEL s = @selector(process_GetNodeBasic_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"GetNodeBasic"];
  }
  {
    SEL s = @selector(process_GetNodeGeneric_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"GetNodeGeneric"];
  }
  {
    SEL s = @selector(process_GetNodeSpecific_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"GetNodeSpecific"];
  }
  {
    SEL s = @selector(process_GetNodeType_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"GetNodeType"];
  }
  {
    SEL s = @selector(process_GetNodeNeighbors_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"GetNodeNeighbors"];
  }
  {
    SEL s = @selector(process_GetNodeManufacturerName_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"GetNodeManufacturerName"];
  }
  {
    SEL s = @selector(process_GetNodeProductName_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"GetNodeProductName"];
  }
  {
    SEL s = @selector(process_GetNodeName_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"GetNodeName"];
  }
  {
    SEL s = @selector(process_GetNodeLocation_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"GetNodeLocation"];
  }
  {
    SEL s = @selector(process_GetNodeManufacturerId_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"GetNodeManufacturerId"];
  }
  {
    SEL s = @selector(process_GetNodeProductType_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"GetNodeProductType"];
  }
  {
    SEL s = @selector(process_GetNodeProductId_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"GetNodeProductId"];
  }
  {
    SEL s = @selector(process_SetNodeManufacturerName_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"SetNodeManufacturerName"];
  }
  {
    SEL s = @selector(process_SetNodeProductName_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"SetNodeProductName"];
  }
  {
    SEL s = @selector(process_SetNodeName_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"SetNodeName"];
  }
  {
    SEL s = @selector(process_SetNodeLocation_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"SetNodeLocation"];
  }
  {
    SEL s = @selector(process_SetNodeOn_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"SetNodeOn"];
  }
  {
    SEL s = @selector(process_SetNodeOff_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"SetNodeOff"];
  }
  {
    SEL s = @selector(process_SetNodeLevel_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"SetNodeLevel"];
  }
  {
    SEL s = @selector(process_IsNodeInfoReceived_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"IsNodeInfoReceived"];
  }
  {
    SEL s = @selector(process_GetNodeClassInformation_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"GetNodeClassInformation"];
  }
  {
    SEL s = @selector(process_GetValueLabel_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"GetValueLabel"];
  }
  {
    SEL s = @selector(process_SetValueLabel_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"SetValueLabel"];
  }
  {
    SEL s = @selector(process_GetValueUnits_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"GetValueUnits"];
  }
  {
    SEL s = @selector(process_SetValueUnits_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"SetValueUnits"];
  }
  {
    SEL s = @selector(process_GetValueHelp_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"GetValueHelp"];
  }
  {
    SEL s = @selector(process_SetValueHelp_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"SetValueHelp"];
  }
  {
    SEL s = @selector(process_GetValueMin_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"GetValueMin"];
  }
  {
    SEL s = @selector(process_GetValueMax_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"GetValueMax"];
  }
  {
    SEL s = @selector(process_IsValueReadOnly_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"IsValueReadOnly"];
  }
  {
    SEL s = @selector(process_IsValueWriteOnly_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"IsValueWriteOnly"];
  }
  {
    SEL s = @selector(process_IsValueSet_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"IsValueSet"];
  }
  {
    SEL s = @selector(process_IsValuePolled_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"IsValuePolled"];
  }
  {
    SEL s = @selector(process_GetValueAsBool_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"GetValueAsBool"];
  }
  {
    SEL s = @selector(process_GetValueAsByte_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"GetValueAsByte"];
  }
  {
    SEL s = @selector(process_GetValueAsFloat_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"GetValueAsFloat"];
  }
  {
    SEL s = @selector(process_GetValueAsInt_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"GetValueAsInt"];
  }
  {
    SEL s = @selector(process_GetValueAsShort_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"GetValueAsShort"];
  }
  {
    SEL s = @selector(process_GetValueAsString_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"GetValueAsString"];
  }
  {
    SEL s = @selector(process_GetValueListSelection_String_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"GetValueListSelection_String"];
  }
  {
    SEL s = @selector(process_GetValueListSelection_Int32_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"GetValueListSelection_Int32"];
  }
  {
    SEL s = @selector(process_GetValueListItems_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"GetValueListItems"];
  }
  {
    SEL s = @selector(process_GetValueFloatPrecision_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"GetValueFloatPrecision"];
  }
  {
    SEL s = @selector(process_SetValue_Bool_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"SetValue_Bool"];
  }
  {
    SEL s = @selector(process_SetValue_UInt8_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"SetValue_UInt8"];
  }
  {
    SEL s = @selector(process_SetValue_Float_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"SetValue_Float"];
  }
  {
    SEL s = @selector(process_SetValue_Int32_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"SetValue_Int32"];
  }
  {
    SEL s = @selector(process_SetValue_Int16_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"SetValue_Int16"];
  }
  {
    SEL s = @selector(process_SetValue_String_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"SetValue_String"];
  }
  {
    SEL s = @selector(process_SetValueListSelection_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"SetValueListSelection"];
  }
  {
    SEL s = @selector(process_RefreshValue_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"RefreshValue"];
  }
  {
    SEL s = @selector(process_SetChangeVerified_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"SetChangeVerified"];
  }
  {
    SEL s = @selector(process_PressButton_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"PressButton"];
  }
  {
    SEL s = @selector(process_ReleaseButton_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"ReleaseButton"];
  }
  {
    SEL s = @selector(process_GetNumSwitchPoints_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"GetNumSwitchPoints"];
  }
  {
    SEL s = @selector(process_SetSwitchPoint_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"SetSwitchPoint"];
  }
  {
    SEL s = @selector(process_RemoveSwitchPoint_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"RemoveSwitchPoint"];
  }
  {
    SEL s = @selector(process_ClearSwitchPoints_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"ClearSwitchPoints"];
  }
  {
    SEL s = @selector(process_GetSwitchPoint_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"GetSwitchPoint"];
  }
  {
    SEL s = @selector(process_SwitchAllOn_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"SwitchAllOn"];
  }
  {
    SEL s = @selector(process_SwitchAllOff_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"SwitchAllOff"];
  }
  {
    SEL s = @selector(process_SetConfigParam_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"SetConfigParam"];
  }
  {
    SEL s = @selector(process_RequestConfigParam_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"RequestConfigParam"];
  }
  {
    SEL s = @selector(process_RequestAllConfigParams_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"RequestAllConfigParams"];
  }
  {
    SEL s = @selector(process_GetNumGroups_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"GetNumGroups"];
  }
  {
    SEL s = @selector(process_GetAssociations_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"GetAssociations"];
  }
  {
    SEL s = @selector(process_GetMaxAssociations_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"GetMaxAssociations"];
  }
  {
    SEL s = @selector(process_GetGroupLabel_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"GetGroupLabel"];
  }
  {
    SEL s = @selector(process_AddAssociation_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"AddAssociation"];
  }
  {
    SEL s = @selector(process_RemoveAssociation_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"RemoveAssociation"];
  }
  {
    SEL s = @selector(process_ResetController_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"ResetController"];
  }
  {
    SEL s = @selector(process_SoftReset_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"SoftReset"];
  }
  {
    SEL s = @selector(process_BeginControllerCommand_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"BeginControllerCommand"];
  }
  {
    SEL s = @selector(process_CancelControllerCommand_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"CancelControllerCommand"];
  }
  {
    SEL s = @selector(process_GetNumScenes_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"GetNumScenes"];
  }
  {
    SEL s = @selector(process_GetAllScenes_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"GetAllScenes"];
  }
  {
    SEL s = @selector(process_CreateScene_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"CreateScene"];
  }
  {
    SEL s = @selector(process_RemoveScene_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"RemoveScene"];
  }
  {
    SEL s = @selector(process_AddSceneValue_Bool_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"AddSceneValue_Bool"];
  }
  {
    SEL s = @selector(process_AddSceneValue_Uint8_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"AddSceneValue_Uint8"];
  }
  {
    SEL s = @selector(process_AddSceneValue_Float_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"AddSceneValue_Float"];
  }
  {
    SEL s = @selector(process_AddSceneValue_Int32_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"AddSceneValue_Int32"];
  }
  {
    SEL s = @selector(process_AddSceneValue_Int16_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"AddSceneValue_Int16"];
  }
  {
    SEL s = @selector(process_AddSceneValue_String_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"AddSceneValue_String"];
  }
  {
    SEL s = @selector(process_AddSceneValueListSelection_String_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"AddSceneValueListSelection_String"];
  }
  {
    SEL s = @selector(process_AddSceneValueListSelection_Int32_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"AddSceneValueListSelection_Int32"];
  }
  {
    SEL s = @selector(process_RemoveSceneValue_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"RemoveSceneValue"];
  }
  {
    SEL s = @selector(process_SceneGetValues_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"SceneGetValues"];
  }
  {
    SEL s = @selector(process_SceneGetValueAsBool_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"SceneGetValueAsBool"];
  }
  {
    SEL s = @selector(process_SceneGetValueAsByte_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"SceneGetValueAsByte"];
  }
  {
    SEL s = @selector(process_SceneGetValueAsFloat_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"SceneGetValueAsFloat"];
  }
  {
    SEL s = @selector(process_SceneGetValueAsInt_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"SceneGetValueAsInt"];
  }
  {
    SEL s = @selector(process_SceneGetValueAsShort_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"SceneGetValueAsShort"];
  }
  {
    SEL s = @selector(process_SceneGetValueAsString_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"SceneGetValueAsString"];
  }
  {
    SEL s = @selector(process_SceneGetValueListSelection_String_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"SceneGetValueListSelection_String"];
  }
  {
    SEL s = @selector(process_SceneGetValueListSelection_Int32_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"SceneGetValueListSelection_Int32"];
  }
  {
    SEL s = @selector(process_SetSceneValue_Bool_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"SetSceneValue_Bool"];
  }
  {
    SEL s = @selector(process_SetSceneValue_Uint8_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"SetSceneValue_Uint8"];
  }
  {
    SEL s = @selector(process_SetSceneValue_Float_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"SetSceneValue_Float"];
  }
  {
    SEL s = @selector(process_SetSceneValue_Int32_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"SetSceneValue_Int32"];
  }
  {
    SEL s = @selector(process_SetSceneValue_Int16_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"SetSceneValue_Int16"];
  }
  {
    SEL s = @selector(process_SetSceneValue_String_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"SetSceneValue_String"];
  }
  {
    SEL s = @selector(process_SetSceneValueListSelection_String_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"SetSceneValueListSelection_String"];
  }
  {
    SEL s = @selector(process_SetSceneValueListSelection_Int32_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"SetSceneValueListSelection_Int32"];
  }
  {
    SEL s = @selector(process_GetSceneLabel_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"GetSceneLabel"];
  }
  {
    SEL s = @selector(process_SetSceneLabel_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"SetSceneLabel"];
  }
  {
    SEL s = @selector(process_SceneExists_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"SceneExists"];
  }
  {
    SEL s = @selector(process_ActivateScene_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"ActivateScene"];
  }
  {
    SEL s = @selector(process_GetDriverStatistics_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"GetDriverStatistics"];
  }
  {
    SEL s = @selector(process_SendAllValues_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"SendAllValues"];
  }
  return self;
}

- (id<OpenZWaveRemoteManager>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_WriteConfig_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveWriteConfig_args * args = [[OpenZWaveWriteConfig_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveWriteConfig_result * result = [[OpenZWaveWriteConfig_result alloc] init];
  [mService WriteConfig: [args _homeId]];
  [outProtocol writeMessageBeginWithName: @"WriteConfig"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_GetControllerNodeId_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveGetControllerNodeId_args * args = [[OpenZWaveGetControllerNodeId_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveGetControllerNodeId_result * result = [[OpenZWaveGetControllerNodeId_result alloc] init];
  [result setSuccess: [mService GetControllerNodeId: [args _homeId]]];
  [outProtocol writeMessageBeginWithName: @"GetControllerNodeId"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_IsPrimaryController_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveIsPrimaryController_args * args = [[OpenZWaveIsPrimaryController_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveIsPrimaryController_result * result = [[OpenZWaveIsPrimaryController_result alloc] init];
  [result setSuccess: [mService IsPrimaryController: [args _homeId]]];
  [outProtocol writeMessageBeginWithName: @"IsPrimaryController"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_IsStaticUpdateController_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveIsStaticUpdateController_args * args = [[OpenZWaveIsStaticUpdateController_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveIsStaticUpdateController_result * result = [[OpenZWaveIsStaticUpdateController_result alloc] init];
  [result setSuccess: [mService IsStaticUpdateController: [args _homeId]]];
  [outProtocol writeMessageBeginWithName: @"IsStaticUpdateController"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_IsBridgeController_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveIsBridgeController_args * args = [[OpenZWaveIsBridgeController_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveIsBridgeController_result * result = [[OpenZWaveIsBridgeController_result alloc] init];
  [result setSuccess: [mService IsBridgeController: [args _homeId]]];
  [outProtocol writeMessageBeginWithName: @"IsBridgeController"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_GetLibraryVersion_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveGetLibraryVersion_args * args = [[OpenZWaveGetLibraryVersion_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveGetLibraryVersion_result * result = [[OpenZWaveGetLibraryVersion_result alloc] init];
  [result setSuccess: [mService GetLibraryVersion: [args _homeId]]];
  [outProtocol writeMessageBeginWithName: @"GetLibraryVersion"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_GetLibraryTypeName_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveGetLibraryTypeName_args * args = [[OpenZWaveGetLibraryTypeName_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveGetLibraryTypeName_result * result = [[OpenZWaveGetLibraryTypeName_result alloc] init];
  [result setSuccess: [mService GetLibraryTypeName: [args _homeId]]];
  [outProtocol writeMessageBeginWithName: @"GetLibraryTypeName"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_GetSendQueueCount_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveGetSendQueueCount_args * args = [[OpenZWaveGetSendQueueCount_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveGetSendQueueCount_result * result = [[OpenZWaveGetSendQueueCount_result alloc] init];
  [result setSuccess: [mService GetSendQueueCount: [args _homeId]]];
  [outProtocol writeMessageBeginWithName: @"GetSendQueueCount"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_LogDriverStatistics_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveLogDriverStatistics_args * args = [[OpenZWaveLogDriverStatistics_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveLogDriverStatistics_result * result = [[OpenZWaveLogDriverStatistics_result alloc] init];
  [mService LogDriverStatistics: [args _homeId]];
  [outProtocol writeMessageBeginWithName: @"LogDriverStatistics"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_GetPollInterval_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveGetPollInterval_args * args = [[OpenZWaveGetPollInterval_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveGetPollInterval_result * result = [[OpenZWaveGetPollInterval_result alloc] init];
  [result setSuccess: [mService GetPollInterval]];
  [outProtocol writeMessageBeginWithName: @"GetPollInterval"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_SetPollInterval_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveSetPollInterval_args * args = [[OpenZWaveSetPollInterval_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveSetPollInterval_result * result = [[OpenZWaveSetPollInterval_result alloc] init];
  [mService SetPollInterval: [args _milliseconds]: [args _bIntervalBetweenPolls]];
  [outProtocol writeMessageBeginWithName: @"SetPollInterval"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_EnablePoll_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveEnablePoll_args * args = [[OpenZWaveEnablePoll_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveEnablePoll_result * result = [[OpenZWaveEnablePoll_result alloc] init];
  [result setSuccess: [mService EnablePoll: [args _valueId]: [args _intensity]]];
  [outProtocol writeMessageBeginWithName: @"EnablePoll"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_DisablePoll_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveDisablePoll_args * args = [[OpenZWaveDisablePoll_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveDisablePoll_result * result = [[OpenZWaveDisablePoll_result alloc] init];
  [result setSuccess: [mService DisablePoll: [args _valueId]]];
  [outProtocol writeMessageBeginWithName: @"DisablePoll"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_isPolled_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveisPolled_args * args = [[OpenZWaveisPolled_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveIsPolled_result * result = [[OpenZWaveIsPolled_result alloc] init];
  [result setSuccess: [mService isPolled: [args _valueId]]];
  [outProtocol writeMessageBeginWithName: @"isPolled"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_SetPollIntensity_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveSetPollIntensity_args * args = [[OpenZWaveSetPollIntensity_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveSetPollIntensity_result * result = [[OpenZWaveSetPollIntensity_result alloc] init];
  [mService SetPollIntensity: [args _valueId]: [args _intensity]];
  [outProtocol writeMessageBeginWithName: @"SetPollIntensity"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_RefreshNodeInfo_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveRefreshNodeInfo_args * args = [[OpenZWaveRefreshNodeInfo_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveRefreshNodeInfo_result * result = [[OpenZWaveRefreshNodeInfo_result alloc] init];
  [result setSuccess: [mService RefreshNodeInfo: [args _homeId]: [args _nodeId]]];
  [outProtocol writeMessageBeginWithName: @"RefreshNodeInfo"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_RequestNodeState_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveRequestNodeState_args * args = [[OpenZWaveRequestNodeState_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveRequestNodeState_result * result = [[OpenZWaveRequestNodeState_result alloc] init];
  [result setSuccess: [mService RequestNodeState: [args _homeId]: [args _nodeId]]];
  [outProtocol writeMessageBeginWithName: @"RequestNodeState"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_RequestNodeDynamic_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveRequestNodeDynamic_args * args = [[OpenZWaveRequestNodeDynamic_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveRequestNodeDynamic_result * result = [[OpenZWaveRequestNodeDynamic_result alloc] init];
  [result setSuccess: [mService RequestNodeDynamic: [args _homeId]: [args _nodeId]]];
  [outProtocol writeMessageBeginWithName: @"RequestNodeDynamic"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_IsNodeListeningDevice_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveIsNodeListeningDevice_args * args = [[OpenZWaveIsNodeListeningDevice_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveIsNodeListeningDevice_result * result = [[OpenZWaveIsNodeListeningDevice_result alloc] init];
  [result setSuccess: [mService IsNodeListeningDevice: [args _homeId]: [args _nodeId]]];
  [outProtocol writeMessageBeginWithName: @"IsNodeListeningDevice"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_IsNodeFrequentListeningDevice_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveIsNodeFrequentListeningDevice_args * args = [[OpenZWaveIsNodeFrequentListeningDevice_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveIsNodeFrequentListeningDevice_result * result = [[OpenZWaveIsNodeFrequentListeningDevice_result alloc] init];
  [result setSuccess: [mService IsNodeFrequentListeningDevice: [args _homeId]: [args _nodeId]]];
  [outProtocol writeMessageBeginWithName: @"IsNodeFrequentListeningDevice"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_IsNodeBeamingDevice_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveIsNodeBeamingDevice_args * args = [[OpenZWaveIsNodeBeamingDevice_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveIsNodeBeamingDevice_result * result = [[OpenZWaveIsNodeBeamingDevice_result alloc] init];
  [result setSuccess: [mService IsNodeBeamingDevice: [args _homeId]: [args _nodeId]]];
  [outProtocol writeMessageBeginWithName: @"IsNodeBeamingDevice"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_IsNodeRoutingDevice_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveIsNodeRoutingDevice_args * args = [[OpenZWaveIsNodeRoutingDevice_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveIsNodeRoutingDevice_result * result = [[OpenZWaveIsNodeRoutingDevice_result alloc] init];
  [result setSuccess: [mService IsNodeRoutingDevice: [args _homeId]: [args _nodeId]]];
  [outProtocol writeMessageBeginWithName: @"IsNodeRoutingDevice"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_IsNodeSecurityDevice_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveIsNodeSecurityDevice_args * args = [[OpenZWaveIsNodeSecurityDevice_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveIsNodeSecurityDevice_result * result = [[OpenZWaveIsNodeSecurityDevice_result alloc] init];
  [result setSuccess: [mService IsNodeSecurityDevice: [args _homeId]: [args _nodeId]]];
  [outProtocol writeMessageBeginWithName: @"IsNodeSecurityDevice"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_GetNodeMaxBaudRate_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveGetNodeMaxBaudRate_args * args = [[OpenZWaveGetNodeMaxBaudRate_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveGetNodeMaxBaudRate_result * result = [[OpenZWaveGetNodeMaxBaudRate_result alloc] init];
  [result setSuccess: [mService GetNodeMaxBaudRate: [args _homeId]: [args _nodeId]]];
  [outProtocol writeMessageBeginWithName: @"GetNodeMaxBaudRate"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_GetNodeVersion_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveGetNodeVersion_args * args = [[OpenZWaveGetNodeVersion_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveGetNodeVersion_result * result = [[OpenZWaveGetNodeVersion_result alloc] init];
  [result setSuccess: [mService GetNodeVersion: [args _homeId]: [args _nodeId]]];
  [outProtocol writeMessageBeginWithName: @"GetNodeVersion"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_GetNodeSecurity_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveGetNodeSecurity_args * args = [[OpenZWaveGetNodeSecurity_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveGetNodeSecurity_result * result = [[OpenZWaveGetNodeSecurity_result alloc] init];
  [result setSuccess: [mService GetNodeSecurity: [args _homeId]: [args _nodeId]]];
  [outProtocol writeMessageBeginWithName: @"GetNodeSecurity"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_GetNodeBasic_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveGetNodeBasic_args * args = [[OpenZWaveGetNodeBasic_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveGetNodeBasic_result * result = [[OpenZWaveGetNodeBasic_result alloc] init];
  [result setSuccess: [mService GetNodeBasic: [args _homeId]: [args _nodeId]]];
  [outProtocol writeMessageBeginWithName: @"GetNodeBasic"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_GetNodeGeneric_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveGetNodeGeneric_args * args = [[OpenZWaveGetNodeGeneric_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveGetNodeGeneric_result * result = [[OpenZWaveGetNodeGeneric_result alloc] init];
  [result setSuccess: [mService GetNodeGeneric: [args _homeId]: [args _nodeId]]];
  [outProtocol writeMessageBeginWithName: @"GetNodeGeneric"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_GetNodeSpecific_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveGetNodeSpecific_args * args = [[OpenZWaveGetNodeSpecific_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveGetNodeSpecific_result * result = [[OpenZWaveGetNodeSpecific_result alloc] init];
  [result setSuccess: [mService GetNodeSpecific: [args _homeId]: [args _nodeId]]];
  [outProtocol writeMessageBeginWithName: @"GetNodeSpecific"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_GetNodeType_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveGetNodeType_args * args = [[OpenZWaveGetNodeType_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveGetNodeType_result * result = [[OpenZWaveGetNodeType_result alloc] init];
  [result setSuccess: [mService GetNodeType: [args _homeId]: [args _nodeId]]];
  [outProtocol writeMessageBeginWithName: @"GetNodeType"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_GetNodeNeighbors_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveGetNodeNeighbors_args * args = [[OpenZWaveGetNodeNeighbors_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveGetNodeNeighbors_result * result = [[OpenZWaveGetNodeNeighbors_result alloc] init];
  [result setSuccess: [mService GetNodeNeighbors: [args _homeId]: [args _nodeId]]];
  [outProtocol writeMessageBeginWithName: @"GetNodeNeighbors"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_GetNodeManufacturerName_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveGetNodeManufacturerName_args * args = [[OpenZWaveGetNodeManufacturerName_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveGetNodeManufacturerName_result * result = [[OpenZWaveGetNodeManufacturerName_result alloc] init];
  [result setSuccess: [mService GetNodeManufacturerName: [args _homeId]: [args _nodeId]]];
  [outProtocol writeMessageBeginWithName: @"GetNodeManufacturerName"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_GetNodeProductName_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveGetNodeProductName_args * args = [[OpenZWaveGetNodeProductName_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveGetNodeProductName_result * result = [[OpenZWaveGetNodeProductName_result alloc] init];
  [result setSuccess: [mService GetNodeProductName: [args _homeId]: [args _nodeId]]];
  [outProtocol writeMessageBeginWithName: @"GetNodeProductName"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_GetNodeName_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveGetNodeName_args * args = [[OpenZWaveGetNodeName_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveGetNodeName_result * result = [[OpenZWaveGetNodeName_result alloc] init];
  [result setSuccess: [mService GetNodeName: [args _homeId]: [args _nodeId]]];
  [outProtocol writeMessageBeginWithName: @"GetNodeName"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_GetNodeLocation_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveGetNodeLocation_args * args = [[OpenZWaveGetNodeLocation_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveGetNodeLocation_result * result = [[OpenZWaveGetNodeLocation_result alloc] init];
  [result setSuccess: [mService GetNodeLocation: [args _homeId]: [args _nodeId]]];
  [outProtocol writeMessageBeginWithName: @"GetNodeLocation"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_GetNodeManufacturerId_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveGetNodeManufacturerId_args * args = [[OpenZWaveGetNodeManufacturerId_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveGetNodeManufacturerId_result * result = [[OpenZWaveGetNodeManufacturerId_result alloc] init];
  [result setSuccess: [mService GetNodeManufacturerId: [args _homeId]: [args _nodeId]]];
  [outProtocol writeMessageBeginWithName: @"GetNodeManufacturerId"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_GetNodeProductType_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveGetNodeProductType_args * args = [[OpenZWaveGetNodeProductType_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveGetNodeProductType_result * result = [[OpenZWaveGetNodeProductType_result alloc] init];
  [result setSuccess: [mService GetNodeProductType: [args _homeId]: [args _nodeId]]];
  [outProtocol writeMessageBeginWithName: @"GetNodeProductType"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_GetNodeProductId_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveGetNodeProductId_args * args = [[OpenZWaveGetNodeProductId_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveGetNodeProductId_result * result = [[OpenZWaveGetNodeProductId_result alloc] init];
  [result setSuccess: [mService GetNodeProductId: [args _homeId]: [args _nodeId]]];
  [outProtocol writeMessageBeginWithName: @"GetNodeProductId"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_SetNodeManufacturerName_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveSetNodeManufacturerName_args * args = [[OpenZWaveSetNodeManufacturerName_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveSetNodeManufacturerName_result * result = [[OpenZWaveSetNodeManufacturerName_result alloc] init];
  [mService SetNodeManufacturerName: [args _homeId]: [args _nodeId]: [args _manufacturerName]];
  [outProtocol writeMessageBeginWithName: @"SetNodeManufacturerName"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_SetNodeProductName_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveSetNodeProductName_args * args = [[OpenZWaveSetNodeProductName_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveSetNodeProductName_result * result = [[OpenZWaveSetNodeProductName_result alloc] init];
  [mService SetNodeProductName: [args _homeId]: [args _nodeId]: [args _productName]];
  [outProtocol writeMessageBeginWithName: @"SetNodeProductName"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_SetNodeName_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveSetNodeName_args * args = [[OpenZWaveSetNodeName_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveSetNodeName_result * result = [[OpenZWaveSetNodeName_result alloc] init];
  [mService SetNodeName: [args _homeId]: [args _nodeId]: [args _nodeName]];
  [outProtocol writeMessageBeginWithName: @"SetNodeName"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_SetNodeLocation_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveSetNodeLocation_args * args = [[OpenZWaveSetNodeLocation_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveSetNodeLocation_result * result = [[OpenZWaveSetNodeLocation_result alloc] init];
  [mService SetNodeLocation: [args _homeId]: [args _nodeId]: [args _location]];
  [outProtocol writeMessageBeginWithName: @"SetNodeLocation"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_SetNodeOn_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveSetNodeOn_args * args = [[OpenZWaveSetNodeOn_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveSetNodeOn_result * result = [[OpenZWaveSetNodeOn_result alloc] init];
  [mService SetNodeOn: [args _homeId]: [args _nodeId]];
  [outProtocol writeMessageBeginWithName: @"SetNodeOn"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_SetNodeOff_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveSetNodeOff_args * args = [[OpenZWaveSetNodeOff_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveSetNodeOff_result * result = [[OpenZWaveSetNodeOff_result alloc] init];
  [mService SetNodeOff: [args _homeId]: [args _nodeId]];
  [outProtocol writeMessageBeginWithName: @"SetNodeOff"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_SetNodeLevel_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveSetNodeLevel_args * args = [[OpenZWaveSetNodeLevel_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveSetNodeLevel_result * result = [[OpenZWaveSetNodeLevel_result alloc] init];
  [mService SetNodeLevel: [args _homeId]: [args _nodeId]: [args _level]];
  [outProtocol writeMessageBeginWithName: @"SetNodeLevel"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_IsNodeInfoReceived_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveIsNodeInfoReceived_args * args = [[OpenZWaveIsNodeInfoReceived_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveIsNodeInfoReceived_result * result = [[OpenZWaveIsNodeInfoReceived_result alloc] init];
  [result setSuccess: [mService IsNodeInfoReceived: [args _homeId]: [args _nodeId]]];
  [outProtocol writeMessageBeginWithName: @"IsNodeInfoReceived"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_GetNodeClassInformation_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveGetNodeClassInformation_args * args = [[OpenZWaveGetNodeClassInformation_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveGetNodeClassInformation_result * result = [[OpenZWaveGetNodeClassInformation_result alloc] init];
  [result setSuccess: [mService GetNodeClassInformation: [args _homeId]: [args _nodeId]: [args _commandClassId]]];
  [outProtocol writeMessageBeginWithName: @"GetNodeClassInformation"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_GetValueLabel_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveGetValueLabel_args * args = [[OpenZWaveGetValueLabel_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveGetValueLabel_result * result = [[OpenZWaveGetValueLabel_result alloc] init];
  [result setSuccess: [mService GetValueLabel: [args _id]]];
  [outProtocol writeMessageBeginWithName: @"GetValueLabel"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_SetValueLabel_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveSetValueLabel_args * args = [[OpenZWaveSetValueLabel_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveSetValueLabel_result * result = [[OpenZWaveSetValueLabel_result alloc] init];
  [mService SetValueLabel: [args _id]: [args _value]];
  [outProtocol writeMessageBeginWithName: @"SetValueLabel"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_GetValueUnits_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveGetValueUnits_args * args = [[OpenZWaveGetValueUnits_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveGetValueUnits_result * result = [[OpenZWaveGetValueUnits_result alloc] init];
  [result setSuccess: [mService GetValueUnits: [args _id]]];
  [outProtocol writeMessageBeginWithName: @"GetValueUnits"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_SetValueUnits_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveSetValueUnits_args * args = [[OpenZWaveSetValueUnits_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveSetValueUnits_result * result = [[OpenZWaveSetValueUnits_result alloc] init];
  [mService SetValueUnits: [args _id]: [args _value]];
  [outProtocol writeMessageBeginWithName: @"SetValueUnits"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_GetValueHelp_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveGetValueHelp_args * args = [[OpenZWaveGetValueHelp_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveGetValueHelp_result * result = [[OpenZWaveGetValueHelp_result alloc] init];
  [result setSuccess: [mService GetValueHelp: [args _id]]];
  [outProtocol writeMessageBeginWithName: @"GetValueHelp"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_SetValueHelp_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveSetValueHelp_args * args = [[OpenZWaveSetValueHelp_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveSetValueHelp_result * result = [[OpenZWaveSetValueHelp_result alloc] init];
  [mService SetValueHelp: [args _id]: [args _value]];
  [outProtocol writeMessageBeginWithName: @"SetValueHelp"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_GetValueMin_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveGetValueMin_args * args = [[OpenZWaveGetValueMin_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveGetValueMin_result * result = [[OpenZWaveGetValueMin_result alloc] init];
  [result setSuccess: [mService GetValueMin: [args _id]]];
  [outProtocol writeMessageBeginWithName: @"GetValueMin"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_GetValueMax_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveGetValueMax_args * args = [[OpenZWaveGetValueMax_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveGetValueMax_result * result = [[OpenZWaveGetValueMax_result alloc] init];
  [result setSuccess: [mService GetValueMax: [args _id]]];
  [outProtocol writeMessageBeginWithName: @"GetValueMax"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_IsValueReadOnly_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveIsValueReadOnly_args * args = [[OpenZWaveIsValueReadOnly_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveIsValueReadOnly_result * result = [[OpenZWaveIsValueReadOnly_result alloc] init];
  [result setSuccess: [mService IsValueReadOnly: [args _id]]];
  [outProtocol writeMessageBeginWithName: @"IsValueReadOnly"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_IsValueWriteOnly_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveIsValueWriteOnly_args * args = [[OpenZWaveIsValueWriteOnly_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveIsValueWriteOnly_result * result = [[OpenZWaveIsValueWriteOnly_result alloc] init];
  [result setSuccess: [mService IsValueWriteOnly: [args _id]]];
  [outProtocol writeMessageBeginWithName: @"IsValueWriteOnly"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_IsValueSet_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveIsValueSet_args * args = [[OpenZWaveIsValueSet_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveIsValueSet_result * result = [[OpenZWaveIsValueSet_result alloc] init];
  [result setSuccess: [mService IsValueSet: [args _id]]];
  [outProtocol writeMessageBeginWithName: @"IsValueSet"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_IsValuePolled_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveIsValuePolled_args * args = [[OpenZWaveIsValuePolled_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveIsValuePolled_result * result = [[OpenZWaveIsValuePolled_result alloc] init];
  [result setSuccess: [mService IsValuePolled: [args _id]]];
  [outProtocol writeMessageBeginWithName: @"IsValuePolled"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_GetValueAsBool_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveGetValueAsBool_args * args = [[OpenZWaveGetValueAsBool_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveGetValueAsBool_result * result = [[OpenZWaveGetValueAsBool_result alloc] init];
  [result setSuccess: [mService GetValueAsBool: [args _id]]];
  [outProtocol writeMessageBeginWithName: @"GetValueAsBool"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_GetValueAsByte_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveGetValueAsByte_args * args = [[OpenZWaveGetValueAsByte_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveGetValueAsByte_result * result = [[OpenZWaveGetValueAsByte_result alloc] init];
  [result setSuccess: [mService GetValueAsByte: [args _id]]];
  [outProtocol writeMessageBeginWithName: @"GetValueAsByte"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_GetValueAsFloat_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveGetValueAsFloat_args * args = [[OpenZWaveGetValueAsFloat_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveGetValueAsFloat_result * result = [[OpenZWaveGetValueAsFloat_result alloc] init];
  [result setSuccess: [mService GetValueAsFloat: [args _id]]];
  [outProtocol writeMessageBeginWithName: @"GetValueAsFloat"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_GetValueAsInt_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveGetValueAsInt_args * args = [[OpenZWaveGetValueAsInt_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveGetValueAsInt_result * result = [[OpenZWaveGetValueAsInt_result alloc] init];
  [result setSuccess: [mService GetValueAsInt: [args _id]]];
  [outProtocol writeMessageBeginWithName: @"GetValueAsInt"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_GetValueAsShort_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveGetValueAsShort_args * args = [[OpenZWaveGetValueAsShort_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveGetValueAsShort_result * result = [[OpenZWaveGetValueAsShort_result alloc] init];
  [result setSuccess: [mService GetValueAsShort: [args _id]]];
  [outProtocol writeMessageBeginWithName: @"GetValueAsShort"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_GetValueAsString_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveGetValueAsString_args * args = [[OpenZWaveGetValueAsString_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveGetValueAsString_result * result = [[OpenZWaveGetValueAsString_result alloc] init];
  [result setSuccess: [mService GetValueAsString: [args _id]]];
  [outProtocol writeMessageBeginWithName: @"GetValueAsString"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_GetValueListSelection_String_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveGetValueListSelection_String_args * args = [[OpenZWaveGetValueListSelection_String_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveGetValueListSelection_String_result * result = [[OpenZWaveGetValueListSelection_String_result alloc] init];
  [result setSuccess: [mService GetValueListSelection_String: [args _id]]];
  [outProtocol writeMessageBeginWithName: @"GetValueListSelection_String"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_GetValueListSelection_Int32_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveGetValueListSelection_Int32_args * args = [[OpenZWaveGetValueListSelection_Int32_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveGetValueListSelection_Int32_result * result = [[OpenZWaveGetValueListSelection_Int32_result alloc] init];
  [result setSuccess: [mService GetValueListSelection_Int32: [args _id]]];
  [outProtocol writeMessageBeginWithName: @"GetValueListSelection_Int32"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_GetValueListItems_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveGetValueListItems_args * args = [[OpenZWaveGetValueListItems_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveGetValueListItems_result * result = [[OpenZWaveGetValueListItems_result alloc] init];
  [result setSuccess: [mService GetValueListItems: [args _id]]];
  [outProtocol writeMessageBeginWithName: @"GetValueListItems"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_GetValueFloatPrecision_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveGetValueFloatPrecision_args * args = [[OpenZWaveGetValueFloatPrecision_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveGetValueFloatPrecision_result * result = [[OpenZWaveGetValueFloatPrecision_result alloc] init];
  [result setSuccess: [mService GetValueFloatPrecision: [args _id]]];
  [outProtocol writeMessageBeginWithName: @"GetValueFloatPrecision"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_SetValue_Bool_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveSetValue_Bool_args * args = [[OpenZWaveSetValue_Bool_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveSetValue_Bool_result * result = [[OpenZWaveSetValue_Bool_result alloc] init];
  [result setSuccess: [mService SetValue_Bool: [args _id]: [args _value]]];
  [outProtocol writeMessageBeginWithName: @"SetValue_Bool"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_SetValue_UInt8_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveSetValue_UInt8_args * args = [[OpenZWaveSetValue_UInt8_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveSetValue_UInt8_result * result = [[OpenZWaveSetValue_UInt8_result alloc] init];
  [result setSuccess: [mService SetValue_UInt8: [args _id]: [args _value]]];
  [outProtocol writeMessageBeginWithName: @"SetValue_UInt8"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_SetValue_Float_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveSetValue_Float_args * args = [[OpenZWaveSetValue_Float_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveSetValue_Float_result * result = [[OpenZWaveSetValue_Float_result alloc] init];
  [result setSuccess: [mService SetValue_Float: [args _id]: [args _value]]];
  [outProtocol writeMessageBeginWithName: @"SetValue_Float"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_SetValue_Int32_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveSetValue_Int32_args * args = [[OpenZWaveSetValue_Int32_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveSetValue_Int32_result * result = [[OpenZWaveSetValue_Int32_result alloc] init];
  [result setSuccess: [mService SetValue_Int32: [args _id]: [args _value]]];
  [outProtocol writeMessageBeginWithName: @"SetValue_Int32"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_SetValue_Int16_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveSetValue_Int16_args * args = [[OpenZWaveSetValue_Int16_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveSetValue_Int16_result * result = [[OpenZWaveSetValue_Int16_result alloc] init];
  [result setSuccess: [mService SetValue_Int16: [args _id]: [args _value]]];
  [outProtocol writeMessageBeginWithName: @"SetValue_Int16"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_SetValue_String_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveSetValue_String_args * args = [[OpenZWaveSetValue_String_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveSetValue_String_result * result = [[OpenZWaveSetValue_String_result alloc] init];
  [result setSuccess: [mService SetValue_String: [args _id]: [args _value]]];
  [outProtocol writeMessageBeginWithName: @"SetValue_String"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_SetValueListSelection_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveSetValueListSelection_args * args = [[OpenZWaveSetValueListSelection_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveSetValueListSelection_result * result = [[OpenZWaveSetValueListSelection_result alloc] init];
  [result setSuccess: [mService SetValueListSelection: [args _id]: [args _selectedItem]]];
  [outProtocol writeMessageBeginWithName: @"SetValueListSelection"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_RefreshValue_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveRefreshValue_args * args = [[OpenZWaveRefreshValue_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveRefreshValue_result * result = [[OpenZWaveRefreshValue_result alloc] init];
  [result setSuccess: [mService RefreshValue: [args _id]]];
  [outProtocol writeMessageBeginWithName: @"RefreshValue"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_SetChangeVerified_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveSetChangeVerified_args * args = [[OpenZWaveSetChangeVerified_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveSetChangeVerified_result * result = [[OpenZWaveSetChangeVerified_result alloc] init];
  [mService SetChangeVerified: [args _id]: [args _verify]];
  [outProtocol writeMessageBeginWithName: @"SetChangeVerified"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_PressButton_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWavePressButton_args * args = [[OpenZWavePressButton_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWavePressButton_result * result = [[OpenZWavePressButton_result alloc] init];
  [result setSuccess: [mService PressButton: [args _id]]];
  [outProtocol writeMessageBeginWithName: @"PressButton"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_ReleaseButton_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveReleaseButton_args * args = [[OpenZWaveReleaseButton_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveReleaseButton_result * result = [[OpenZWaveReleaseButton_result alloc] init];
  [result setSuccess: [mService ReleaseButton: [args _id]]];
  [outProtocol writeMessageBeginWithName: @"ReleaseButton"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_GetNumSwitchPoints_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveGetNumSwitchPoints_args * args = [[OpenZWaveGetNumSwitchPoints_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveGetNumSwitchPoints_result * result = [[OpenZWaveGetNumSwitchPoints_result alloc] init];
  [result setSuccess: [mService GetNumSwitchPoints: [args _id]]];
  [outProtocol writeMessageBeginWithName: @"GetNumSwitchPoints"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_SetSwitchPoint_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveSetSwitchPoint_args * args = [[OpenZWaveSetSwitchPoint_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveSetSwitchPoint_result * result = [[OpenZWaveSetSwitchPoint_result alloc] init];
  [result setSuccess: [mService SetSwitchPoint: [args _id]: [args _hours]: [args _minutes]: [args _setback]]];
  [outProtocol writeMessageBeginWithName: @"SetSwitchPoint"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_RemoveSwitchPoint_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveRemoveSwitchPoint_args * args = [[OpenZWaveRemoveSwitchPoint_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveRemoveSwitchPoint_result * result = [[OpenZWaveRemoveSwitchPoint_result alloc] init];
  [result setSuccess: [mService RemoveSwitchPoint: [args _id]: [args _hours]: [args _minutes]]];
  [outProtocol writeMessageBeginWithName: @"RemoveSwitchPoint"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_ClearSwitchPoints_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveClearSwitchPoints_args * args = [[OpenZWaveClearSwitchPoints_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveClearSwitchPoints_result * result = [[OpenZWaveClearSwitchPoints_result alloc] init];
  [mService ClearSwitchPoints: [args _id]];
  [outProtocol writeMessageBeginWithName: @"ClearSwitchPoints"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_GetSwitchPoint_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveGetSwitchPoint_args * args = [[OpenZWaveGetSwitchPoint_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveGetSwitchPoint_result * result = [[OpenZWaveGetSwitchPoint_result alloc] init];
  [result setSuccess: [mService GetSwitchPoint: [args _id]: [args _idx]]];
  [outProtocol writeMessageBeginWithName: @"GetSwitchPoint"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_SwitchAllOn_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveSwitchAllOn_args * args = [[OpenZWaveSwitchAllOn_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveSwitchAllOn_result * result = [[OpenZWaveSwitchAllOn_result alloc] init];
  [mService SwitchAllOn: [args _homeId]];
  [outProtocol writeMessageBeginWithName: @"SwitchAllOn"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_SwitchAllOff_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveSwitchAllOff_args * args = [[OpenZWaveSwitchAllOff_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveSwitchAllOff_result * result = [[OpenZWaveSwitchAllOff_result alloc] init];
  [mService SwitchAllOff: [args _homeId]];
  [outProtocol writeMessageBeginWithName: @"SwitchAllOff"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_SetConfigParam_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveSetConfigParam_args * args = [[OpenZWaveSetConfigParam_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveSetConfigParam_result * result = [[OpenZWaveSetConfigParam_result alloc] init];
  [result setSuccess: [mService SetConfigParam: [args _homeId]: [args _nodeId]: [args _param]: [args _value]: [args _size]]];
  [outProtocol writeMessageBeginWithName: @"SetConfigParam"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_RequestConfigParam_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveRequestConfigParam_args * args = [[OpenZWaveRequestConfigParam_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveRequestConfigParam_result * result = [[OpenZWaveRequestConfigParam_result alloc] init];
  [mService RequestConfigParam: [args _homeId]: [args _nodeId]: [args _param]];
  [outProtocol writeMessageBeginWithName: @"RequestConfigParam"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_RequestAllConfigParams_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveRequestAllConfigParams_args * args = [[OpenZWaveRequestAllConfigParams_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveRequestAllConfigParams_result * result = [[OpenZWaveRequestAllConfigParams_result alloc] init];
  [mService RequestAllConfigParams: [args _homeId]: [args _nodeId]];
  [outProtocol writeMessageBeginWithName: @"RequestAllConfigParams"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_GetNumGroups_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveGetNumGroups_args * args = [[OpenZWaveGetNumGroups_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveGetNumGroups_result * result = [[OpenZWaveGetNumGroups_result alloc] init];
  [result setSuccess: [mService GetNumGroups: [args _homeId]: [args _nodeId]]];
  [outProtocol writeMessageBeginWithName: @"GetNumGroups"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_GetAssociations_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveGetAssociations_args * args = [[OpenZWaveGetAssociations_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveGetAssociations_result * result = [[OpenZWaveGetAssociations_result alloc] init];
  [result setSuccess: [mService GetAssociations: [args _homeId]: [args _nodeId]: [args _groupIdx]]];
  [outProtocol writeMessageBeginWithName: @"GetAssociations"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_GetMaxAssociations_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveGetMaxAssociations_args * args = [[OpenZWaveGetMaxAssociations_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveGetMaxAssociations_result * result = [[OpenZWaveGetMaxAssociations_result alloc] init];
  [result setSuccess: [mService GetMaxAssociations: [args _homeId]: [args _nodeId]: [args _groupIdx]]];
  [outProtocol writeMessageBeginWithName: @"GetMaxAssociations"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_GetGroupLabel_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveGetGroupLabel_args * args = [[OpenZWaveGetGroupLabel_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveGetGroupLabel_result * result = [[OpenZWaveGetGroupLabel_result alloc] init];
  [result setSuccess: [mService GetGroupLabel: [args _homeId]: [args _nodeId]: [args _groupIdx]]];
  [outProtocol writeMessageBeginWithName: @"GetGroupLabel"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_AddAssociation_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveAddAssociation_args * args = [[OpenZWaveAddAssociation_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveAddAssociation_result * result = [[OpenZWaveAddAssociation_result alloc] init];
  [mService AddAssociation: [args _homeId]: [args _nodeId]: [args _groupIdx]: [args _targetNodeId]];
  [outProtocol writeMessageBeginWithName: @"AddAssociation"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_RemoveAssociation_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveRemoveAssociation_args * args = [[OpenZWaveRemoveAssociation_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveRemoveAssociation_result * result = [[OpenZWaveRemoveAssociation_result alloc] init];
  [mService RemoveAssociation: [args _homeId]: [args _nodeId]: [args _groupIdx]: [args _targetNodeId]];
  [outProtocol writeMessageBeginWithName: @"RemoveAssociation"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_ResetController_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveResetController_args * args = [[OpenZWaveResetController_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveResetController_result * result = [[OpenZWaveResetController_result alloc] init];
  [mService ResetController: [args _homeId]];
  [outProtocol writeMessageBeginWithName: @"ResetController"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_SoftReset_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveSoftReset_args * args = [[OpenZWaveSoftReset_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveSoftReset_result * result = [[OpenZWaveSoftReset_result alloc] init];
  [mService SoftReset: [args _homeId]];
  [outProtocol writeMessageBeginWithName: @"SoftReset"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_BeginControllerCommand_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveBeginControllerCommand_args * args = [[OpenZWaveBeginControllerCommand_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveBeginControllerCommand_result * result = [[OpenZWaveBeginControllerCommand_result alloc] init];
  [result setSuccess: [mService BeginControllerCommand: [args _homeId]: [args _command]: [args _highPower]: [args _nodeId]: [args _arg]]];
  [outProtocol writeMessageBeginWithName: @"BeginControllerCommand"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_CancelControllerCommand_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveCancelControllerCommand_args * args = [[OpenZWaveCancelControllerCommand_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveCancelControllerCommand_result * result = [[OpenZWaveCancelControllerCommand_result alloc] init];
  [result setSuccess: [mService CancelControllerCommand: [args _homeId]]];
  [outProtocol writeMessageBeginWithName: @"CancelControllerCommand"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_GetNumScenes_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveGetNumScenes_args * args = [[OpenZWaveGetNumScenes_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveGetNumScenes_result * result = [[OpenZWaveGetNumScenes_result alloc] init];
  [result setSuccess: [mService GetNumScenes]];
  [outProtocol writeMessageBeginWithName: @"GetNumScenes"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_GetAllScenes_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveGetAllScenes_args * args = [[OpenZWaveGetAllScenes_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveGetAllScenes_result * result = [[OpenZWaveGetAllScenes_result alloc] init];
  [result setSuccess: [mService GetAllScenes]];
  [outProtocol writeMessageBeginWithName: @"GetAllScenes"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_CreateScene_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveCreateScene_args * args = [[OpenZWaveCreateScene_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveCreateScene_result * result = [[OpenZWaveCreateScene_result alloc] init];
  [result setSuccess: [mService CreateScene]];
  [outProtocol writeMessageBeginWithName: @"CreateScene"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_RemoveScene_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveRemoveScene_args * args = [[OpenZWaveRemoveScene_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveRemoveScene_result * result = [[OpenZWaveRemoveScene_result alloc] init];
  [result setSuccess: [mService RemoveScene: [args _sceneId]]];
  [outProtocol writeMessageBeginWithName: @"RemoveScene"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_AddSceneValue_Bool_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveAddSceneValue_Bool_args * args = [[OpenZWaveAddSceneValue_Bool_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveAddSceneValue_Bool_result * result = [[OpenZWaveAddSceneValue_Bool_result alloc] init];
  [result setSuccess: [mService AddSceneValue_Bool: [args _sceneId]: [args _valueId]: [args _value]]];
  [outProtocol writeMessageBeginWithName: @"AddSceneValue_Bool"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_AddSceneValue_Uint8_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveAddSceneValue_Uint8_args * args = [[OpenZWaveAddSceneValue_Uint8_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveAddSceneValue_Uint8_result * result = [[OpenZWaveAddSceneValue_Uint8_result alloc] init];
  [result setSuccess: [mService AddSceneValue_Uint8: [args _sceneId]: [args _valueId]: [args _value]]];
  [outProtocol writeMessageBeginWithName: @"AddSceneValue_Uint8"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_AddSceneValue_Float_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveAddSceneValue_Float_args * args = [[OpenZWaveAddSceneValue_Float_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveAddSceneValue_Float_result * result = [[OpenZWaveAddSceneValue_Float_result alloc] init];
  [result setSuccess: [mService AddSceneValue_Float: [args _sceneId]: [args _valueId]: [args _value]]];
  [outProtocol writeMessageBeginWithName: @"AddSceneValue_Float"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_AddSceneValue_Int32_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveAddSceneValue_Int32_args * args = [[OpenZWaveAddSceneValue_Int32_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveAddSceneValue_Int32_result * result = [[OpenZWaveAddSceneValue_Int32_result alloc] init];
  [result setSuccess: [mService AddSceneValue_Int32: [args _sceneId]: [args _valueId]: [args _value]]];
  [outProtocol writeMessageBeginWithName: @"AddSceneValue_Int32"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_AddSceneValue_Int16_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveAddSceneValue_Int16_args * args = [[OpenZWaveAddSceneValue_Int16_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveAddSceneValue_Int16_result * result = [[OpenZWaveAddSceneValue_Int16_result alloc] init];
  [result setSuccess: [mService AddSceneValue_Int16: [args _sceneId]: [args _valueId]: [args _value]]];
  [outProtocol writeMessageBeginWithName: @"AddSceneValue_Int16"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_AddSceneValue_String_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveAddSceneValue_String_args * args = [[OpenZWaveAddSceneValue_String_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveAddSceneValue_String_result * result = [[OpenZWaveAddSceneValue_String_result alloc] init];
  [result setSuccess: [mService AddSceneValue_String: [args _sceneId]: [args _valueId]: [args _value]]];
  [outProtocol writeMessageBeginWithName: @"AddSceneValue_String"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_AddSceneValueListSelection_String_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveAddSceneValueListSelection_String_args * args = [[OpenZWaveAddSceneValueListSelection_String_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveAddSceneValueListSelection_String_result * result = [[OpenZWaveAddSceneValueListSelection_String_result alloc] init];
  [result setSuccess: [mService AddSceneValueListSelection_String: [args _sceneId]: [args _valueId]: [args _value]]];
  [outProtocol writeMessageBeginWithName: @"AddSceneValueListSelection_String"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_AddSceneValueListSelection_Int32_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveAddSceneValueListSelection_Int32_args * args = [[OpenZWaveAddSceneValueListSelection_Int32_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveAddSceneValueListSelection_Int32_result * result = [[OpenZWaveAddSceneValueListSelection_Int32_result alloc] init];
  [result setSuccess: [mService AddSceneValueListSelection_Int32: [args _sceneId]: [args _valueId]: [args _value]]];
  [outProtocol writeMessageBeginWithName: @"AddSceneValueListSelection_Int32"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_RemoveSceneValue_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveRemoveSceneValue_args * args = [[OpenZWaveRemoveSceneValue_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveRemoveSceneValue_result * result = [[OpenZWaveRemoveSceneValue_result alloc] init];
  [result setSuccess: [mService RemoveSceneValue: [args _sceneId]: [args _valueId]]];
  [outProtocol writeMessageBeginWithName: @"RemoveSceneValue"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_SceneGetValues_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveSceneGetValues_args * args = [[OpenZWaveSceneGetValues_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveSceneGetValues_result * result = [[OpenZWaveSceneGetValues_result alloc] init];
  [result setSuccess: [mService SceneGetValues: [args _sceneId]]];
  [outProtocol writeMessageBeginWithName: @"SceneGetValues"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_SceneGetValueAsBool_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveSceneGetValueAsBool_args * args = [[OpenZWaveSceneGetValueAsBool_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveSceneGetValueAsBool_result * result = [[OpenZWaveSceneGetValueAsBool_result alloc] init];
  [result setSuccess: [mService SceneGetValueAsBool: [args _sceneId]: [args _valueId]]];
  [outProtocol writeMessageBeginWithName: @"SceneGetValueAsBool"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_SceneGetValueAsByte_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveSceneGetValueAsByte_args * args = [[OpenZWaveSceneGetValueAsByte_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveSceneGetValueAsByte_result * result = [[OpenZWaveSceneGetValueAsByte_result alloc] init];
  [result setSuccess: [mService SceneGetValueAsByte: [args _sceneId]: [args _valueId]]];
  [outProtocol writeMessageBeginWithName: @"SceneGetValueAsByte"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_SceneGetValueAsFloat_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveSceneGetValueAsFloat_args * args = [[OpenZWaveSceneGetValueAsFloat_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveSceneGetValueAsFloat_result * result = [[OpenZWaveSceneGetValueAsFloat_result alloc] init];
  [result setSuccess: [mService SceneGetValueAsFloat: [args _sceneId]: [args _valueId]]];
  [outProtocol writeMessageBeginWithName: @"SceneGetValueAsFloat"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_SceneGetValueAsInt_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveSceneGetValueAsInt_args * args = [[OpenZWaveSceneGetValueAsInt_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveSceneGetValueAsInt_result * result = [[OpenZWaveSceneGetValueAsInt_result alloc] init];
  [result setSuccess: [mService SceneGetValueAsInt: [args _sceneId]: [args _valueId]]];
  [outProtocol writeMessageBeginWithName: @"SceneGetValueAsInt"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_SceneGetValueAsShort_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveSceneGetValueAsShort_args * args = [[OpenZWaveSceneGetValueAsShort_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveSceneGetValueAsShort_result * result = [[OpenZWaveSceneGetValueAsShort_result alloc] init];
  [result setSuccess: [mService SceneGetValueAsShort: [args _sceneId]: [args _valueId]]];
  [outProtocol writeMessageBeginWithName: @"SceneGetValueAsShort"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_SceneGetValueAsString_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveSceneGetValueAsString_args * args = [[OpenZWaveSceneGetValueAsString_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveSceneGetValueAsString_result * result = [[OpenZWaveSceneGetValueAsString_result alloc] init];
  [result setSuccess: [mService SceneGetValueAsString: [args _sceneId]: [args _valueId]]];
  [outProtocol writeMessageBeginWithName: @"SceneGetValueAsString"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_SceneGetValueListSelection_String_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveSceneGetValueListSelection_String_args * args = [[OpenZWaveSceneGetValueListSelection_String_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveSceneGetValueListSelection_String_result * result = [[OpenZWaveSceneGetValueListSelection_String_result alloc] init];
  [result setSuccess: [mService SceneGetValueListSelection_String: [args _sceneId]: [args _valueId]]];
  [outProtocol writeMessageBeginWithName: @"SceneGetValueListSelection_String"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_SceneGetValueListSelection_Int32_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveSceneGetValueListSelection_Int32_args * args = [[OpenZWaveSceneGetValueListSelection_Int32_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveSceneGetValueListSelection_Int32_result * result = [[OpenZWaveSceneGetValueListSelection_Int32_result alloc] init];
  [result setSuccess: [mService SceneGetValueListSelection_Int32: [args _sceneId]: [args _valueId]]];
  [outProtocol writeMessageBeginWithName: @"SceneGetValueListSelection_Int32"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_SetSceneValue_Bool_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveSetSceneValue_Bool_args * args = [[OpenZWaveSetSceneValue_Bool_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveSetSceneValue_Bool_result * result = [[OpenZWaveSetSceneValue_Bool_result alloc] init];
  [result setSuccess: [mService SetSceneValue_Bool: [args _sceneId]: [args _valueId]: [args _value]]];
  [outProtocol writeMessageBeginWithName: @"SetSceneValue_Bool"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_SetSceneValue_Uint8_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveSetSceneValue_Uint8_args * args = [[OpenZWaveSetSceneValue_Uint8_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveSetSceneValue_Uint8_result * result = [[OpenZWaveSetSceneValue_Uint8_result alloc] init];
  [result setSuccess: [mService SetSceneValue_Uint8: [args _sceneId]: [args _valueId]: [args _value]]];
  [outProtocol writeMessageBeginWithName: @"SetSceneValue_Uint8"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_SetSceneValue_Float_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveSetSceneValue_Float_args * args = [[OpenZWaveSetSceneValue_Float_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveSetSceneValue_Float_result * result = [[OpenZWaveSetSceneValue_Float_result alloc] init];
  [result setSuccess: [mService SetSceneValue_Float: [args _sceneId]: [args _valueId]: [args _value]]];
  [outProtocol writeMessageBeginWithName: @"SetSceneValue_Float"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_SetSceneValue_Int32_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveSetSceneValue_Int32_args * args = [[OpenZWaveSetSceneValue_Int32_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveSetSceneValue_Int32_result * result = [[OpenZWaveSetSceneValue_Int32_result alloc] init];
  [result setSuccess: [mService SetSceneValue_Int32: [args _sceneId]: [args _valueId]: [args _value]]];
  [outProtocol writeMessageBeginWithName: @"SetSceneValue_Int32"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_SetSceneValue_Int16_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveSetSceneValue_Int16_args * args = [[OpenZWaveSetSceneValue_Int16_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveSetSceneValue_Int16_result * result = [[OpenZWaveSetSceneValue_Int16_result alloc] init];
  [result setSuccess: [mService SetSceneValue_Int16: [args _sceneId]: [args _valueId]: [args _value]]];
  [outProtocol writeMessageBeginWithName: @"SetSceneValue_Int16"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_SetSceneValue_String_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveSetSceneValue_String_args * args = [[OpenZWaveSetSceneValue_String_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveSetSceneValue_String_result * result = [[OpenZWaveSetSceneValue_String_result alloc] init];
  [result setSuccess: [mService SetSceneValue_String: [args _sceneId]: [args _valueId]: [args _value]]];
  [outProtocol writeMessageBeginWithName: @"SetSceneValue_String"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_SetSceneValueListSelection_String_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveSetSceneValueListSelection_String_args * args = [[OpenZWaveSetSceneValueListSelection_String_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveSetSceneValueListSelection_String_result * result = [[OpenZWaveSetSceneValueListSelection_String_result alloc] init];
  [result setSuccess: [mService SetSceneValueListSelection_String: [args _sceneId]: [args _valueId]: [args _value]]];
  [outProtocol writeMessageBeginWithName: @"SetSceneValueListSelection_String"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_SetSceneValueListSelection_Int32_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveSetSceneValueListSelection_Int32_args * args = [[OpenZWaveSetSceneValueListSelection_Int32_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveSetSceneValueListSelection_Int32_result * result = [[OpenZWaveSetSceneValueListSelection_Int32_result alloc] init];
  [result setSuccess: [mService SetSceneValueListSelection_Int32: [args _sceneId]: [args _valueId]: [args _value]]];
  [outProtocol writeMessageBeginWithName: @"SetSceneValueListSelection_Int32"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_GetSceneLabel_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveGetSceneLabel_args * args = [[OpenZWaveGetSceneLabel_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveGetSceneLabel_result * result = [[OpenZWaveGetSceneLabel_result alloc] init];
  [result setSuccess: [mService GetSceneLabel: [args _sceneId]]];
  [outProtocol writeMessageBeginWithName: @"GetSceneLabel"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_SetSceneLabel_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveSetSceneLabel_args * args = [[OpenZWaveSetSceneLabel_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveSetSceneLabel_result * result = [[OpenZWaveSetSceneLabel_result alloc] init];
  [mService SetSceneLabel: [args _sceneId]: [args _value]];
  [outProtocol writeMessageBeginWithName: @"SetSceneLabel"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_SceneExists_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveSceneExists_args * args = [[OpenZWaveSceneExists_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveSceneExists_result * result = [[OpenZWaveSceneExists_result alloc] init];
  [result setSuccess: [mService SceneExists: [args _sceneId]]];
  [outProtocol writeMessageBeginWithName: @"SceneExists"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_ActivateScene_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveActivateScene_args * args = [[OpenZWaveActivateScene_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveActivateScene_result * result = [[OpenZWaveActivateScene_result alloc] init];
  [result setSuccess: [mService ActivateScene: [args _sceneId]]];
  [outProtocol writeMessageBeginWithName: @"ActivateScene"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_GetDriverStatistics_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveGetDriverStatistics_args * args = [[OpenZWaveGetDriverStatistics_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveGetDriverStatistics_result * result = [[OpenZWaveGetDriverStatistics_result alloc] init];
  [result setSuccess: [mService GetDriverStatistics: [args _homeId]]];
  [outProtocol writeMessageBeginWithName: @"GetDriverStatistics"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_SendAllValues_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  OpenZWaveSendAllValues_args * args = [[OpenZWaveSendAllValues_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  OpenZWaveSendAllValues_result * result = [[OpenZWaveSendAllValues_result alloc] init];
  [mService SendAllValues];
  [outProtocol writeMessageBeginWithName: @"SendAllValues"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) dealloc
{
  [mService release_stub];
  [mMethodMap release_stub];
  [super dealloc_stub];
}

@end

