// Autogenerated by Thrift Compiler (1.0.0-dev)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package OpenZWave

import (
	"fmt"
	"math"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = math.MinInt32
var _ = thrift.ZERO
var _ = fmt.Printf

var GoUnusedProtection__ int;

type RemoteValueGenre int64
const (
  RemoteValueGenre_ValueGenre_Basic RemoteValueGenre = 0
  RemoteValueGenre_ValueGenre_User RemoteValueGenre = 1
  RemoteValueGenre_ValueGenre_Config RemoteValueGenre = 2
  RemoteValueGenre_ValueGenre_System RemoteValueGenre = 3
  RemoteValueGenre_ValueGenre_Count RemoteValueGenre = 4
)

func (p RemoteValueGenre) String() string {
  switch p {
  case RemoteValueGenre_ValueGenre_Basic: return "RemoteValueGenre_ValueGenre_Basic"
  case RemoteValueGenre_ValueGenre_User: return "RemoteValueGenre_ValueGenre_User"
  case RemoteValueGenre_ValueGenre_Config: return "RemoteValueGenre_ValueGenre_Config"
  case RemoteValueGenre_ValueGenre_System: return "RemoteValueGenre_ValueGenre_System"
  case RemoteValueGenre_ValueGenre_Count: return "RemoteValueGenre_ValueGenre_Count"
  }
  return "<UNSET>"
}

func RemoteValueGenreFromString(s string) (RemoteValueGenre, error) {
  switch s {
  case "RemoteValueGenre_ValueGenre_Basic": return RemoteValueGenre_ValueGenre_Basic, nil 
  case "RemoteValueGenre_ValueGenre_User": return RemoteValueGenre_ValueGenre_User, nil 
  case "RemoteValueGenre_ValueGenre_Config": return RemoteValueGenre_ValueGenre_Config, nil 
  case "RemoteValueGenre_ValueGenre_System": return RemoteValueGenre_ValueGenre_System, nil 
  case "RemoteValueGenre_ValueGenre_Count": return RemoteValueGenre_ValueGenre_Count, nil 
  }
  return RemoteValueGenre(math.MinInt32 - 1), fmt.Errorf("not a valid RemoteValueGenre string")
}


type RemoteValueType int64
const (
  RemoteValueType_ValueType_Bool RemoteValueType = 0
  RemoteValueType_ValueType_Byte RemoteValueType = 1
  RemoteValueType_ValueType_Decimal RemoteValueType = 2
  RemoteValueType_ValueType_Int RemoteValueType = 3
  RemoteValueType_ValueType_List RemoteValueType = 4
  RemoteValueType_ValueType_Schedule RemoteValueType = 5
  RemoteValueType_ValueType_Short RemoteValueType = 6
  RemoteValueType_ValueType_String RemoteValueType = 7
  RemoteValueType_ValueType_Button RemoteValueType = 8
  RemoteValueType_ValueType_Raw RemoteValueType = 9
)

func (p RemoteValueType) String() string {
  switch p {
  case RemoteValueType_ValueType_Bool: return "RemoteValueType_ValueType_Bool"
  case RemoteValueType_ValueType_Byte: return "RemoteValueType_ValueType_Byte"
  case RemoteValueType_ValueType_Decimal: return "RemoteValueType_ValueType_Decimal"
  case RemoteValueType_ValueType_Int: return "RemoteValueType_ValueType_Int"
  case RemoteValueType_ValueType_List: return "RemoteValueType_ValueType_List"
  case RemoteValueType_ValueType_Schedule: return "RemoteValueType_ValueType_Schedule"
  case RemoteValueType_ValueType_Short: return "RemoteValueType_ValueType_Short"
  case RemoteValueType_ValueType_String: return "RemoteValueType_ValueType_String"
  case RemoteValueType_ValueType_Button: return "RemoteValueType_ValueType_Button"
  case RemoteValueType_ValueType_Raw: return "RemoteValueType_ValueType_Raw"
  }
  return "<UNSET>"
}

func RemoteValueTypeFromString(s string) (RemoteValueType, error) {
  switch s {
  case "RemoteValueType_ValueType_Bool": return RemoteValueType_ValueType_Bool, nil 
  case "RemoteValueType_ValueType_Byte": return RemoteValueType_ValueType_Byte, nil 
  case "RemoteValueType_ValueType_Decimal": return RemoteValueType_ValueType_Decimal, nil 
  case "RemoteValueType_ValueType_Int": return RemoteValueType_ValueType_Int, nil 
  case "RemoteValueType_ValueType_List": return RemoteValueType_ValueType_List, nil 
  case "RemoteValueType_ValueType_Schedule": return RemoteValueType_ValueType_Schedule, nil 
  case "RemoteValueType_ValueType_Short": return RemoteValueType_ValueType_Short, nil 
  case "RemoteValueType_ValueType_String": return RemoteValueType_ValueType_String, nil 
  case "RemoteValueType_ValueType_Button": return RemoteValueType_ValueType_Button, nil 
  case "RemoteValueType_ValueType_Raw": return RemoteValueType_ValueType_Raw, nil 
  }
  return RemoteValueType(math.MinInt32 - 1), fmt.Errorf("not a valid RemoteValueType string")
}


//< A collection of bytes
type DriverControllerCommand int64
const (
  DriverControllerCommand_ControllerCommand_None DriverControllerCommand = 0
  DriverControllerCommand_ControllerCommand_AddDevice DriverControllerCommand = 1
  DriverControllerCommand_ControllerCommand_CreateNewPrimary DriverControllerCommand = 2
  DriverControllerCommand_ControllerCommand_ReceiveConfiguration DriverControllerCommand = 3
  DriverControllerCommand_ControllerCommand_RemoveDevice DriverControllerCommand = 4
  DriverControllerCommand_ControllerCommand_RemoveFailedNode DriverControllerCommand = 5
  DriverControllerCommand_ControllerCommand_HasNodeFailed DriverControllerCommand = 6
  DriverControllerCommand_ControllerCommand_ReplaceFailedNode DriverControllerCommand = 7
  DriverControllerCommand_ControllerCommand_TransferPrimaryRole DriverControllerCommand = 8
  DriverControllerCommand_ControllerCommand_RequestNetworkUpdate DriverControllerCommand = 9
  DriverControllerCommand_ControllerCommand_RequestNodeNeighborUpdate DriverControllerCommand = 10
  DriverControllerCommand_ControllerCommand_AssignReturnRoute DriverControllerCommand = 11
  DriverControllerCommand_ControllerCommand_DeleteAllReturnRoutes DriverControllerCommand = 12
  DriverControllerCommand_ControllerCommand_SendNodeInformation DriverControllerCommand = 13
  DriverControllerCommand_ControllerCommand_ReplicationSend DriverControllerCommand = 14
  DriverControllerCommand_ControllerCommand_CreateButton DriverControllerCommand = 15
  DriverControllerCommand_ControllerCommand_DeleteButton DriverControllerCommand = 16
)

func (p DriverControllerCommand) String() string {
  switch p {
  case DriverControllerCommand_ControllerCommand_None: return "DriverControllerCommand_ControllerCommand_None"
  case DriverControllerCommand_ControllerCommand_AddDevice: return "DriverControllerCommand_ControllerCommand_AddDevice"
  case DriverControllerCommand_ControllerCommand_CreateNewPrimary: return "DriverControllerCommand_ControllerCommand_CreateNewPrimary"
  case DriverControllerCommand_ControllerCommand_ReceiveConfiguration: return "DriverControllerCommand_ControllerCommand_ReceiveConfiguration"
  case DriverControllerCommand_ControllerCommand_RemoveDevice: return "DriverControllerCommand_ControllerCommand_RemoveDevice"
  case DriverControllerCommand_ControllerCommand_RemoveFailedNode: return "DriverControllerCommand_ControllerCommand_RemoveFailedNode"
  case DriverControllerCommand_ControllerCommand_HasNodeFailed: return "DriverControllerCommand_ControllerCommand_HasNodeFailed"
  case DriverControllerCommand_ControllerCommand_ReplaceFailedNode: return "DriverControllerCommand_ControllerCommand_ReplaceFailedNode"
  case DriverControllerCommand_ControllerCommand_TransferPrimaryRole: return "DriverControllerCommand_ControllerCommand_TransferPrimaryRole"
  case DriverControllerCommand_ControllerCommand_RequestNetworkUpdate: return "DriverControllerCommand_ControllerCommand_RequestNetworkUpdate"
  case DriverControllerCommand_ControllerCommand_RequestNodeNeighborUpdate: return "DriverControllerCommand_ControllerCommand_RequestNodeNeighborUpdate"
  case DriverControllerCommand_ControllerCommand_AssignReturnRoute: return "DriverControllerCommand_ControllerCommand_AssignReturnRoute"
  case DriverControllerCommand_ControllerCommand_DeleteAllReturnRoutes: return "DriverControllerCommand_ControllerCommand_DeleteAllReturnRoutes"
  case DriverControllerCommand_ControllerCommand_SendNodeInformation: return "DriverControllerCommand_ControllerCommand_SendNodeInformation"
  case DriverControllerCommand_ControllerCommand_ReplicationSend: return "DriverControllerCommand_ControllerCommand_ReplicationSend"
  case DriverControllerCommand_ControllerCommand_CreateButton: return "DriverControllerCommand_ControllerCommand_CreateButton"
  case DriverControllerCommand_ControllerCommand_DeleteButton: return "DriverControllerCommand_ControllerCommand_DeleteButton"
  }
  return "<UNSET>"
}

func DriverControllerCommandFromString(s string) (DriverControllerCommand, error) {
  switch s {
  case "DriverControllerCommand_ControllerCommand_None": return DriverControllerCommand_ControllerCommand_None, nil 
  case "DriverControllerCommand_ControllerCommand_AddDevice": return DriverControllerCommand_ControllerCommand_AddDevice, nil 
  case "DriverControllerCommand_ControllerCommand_CreateNewPrimary": return DriverControllerCommand_ControllerCommand_CreateNewPrimary, nil 
  case "DriverControllerCommand_ControllerCommand_ReceiveConfiguration": return DriverControllerCommand_ControllerCommand_ReceiveConfiguration, nil 
  case "DriverControllerCommand_ControllerCommand_RemoveDevice": return DriverControllerCommand_ControllerCommand_RemoveDevice, nil 
  case "DriverControllerCommand_ControllerCommand_RemoveFailedNode": return DriverControllerCommand_ControllerCommand_RemoveFailedNode, nil 
  case "DriverControllerCommand_ControllerCommand_HasNodeFailed": return DriverControllerCommand_ControllerCommand_HasNodeFailed, nil 
  case "DriverControllerCommand_ControllerCommand_ReplaceFailedNode": return DriverControllerCommand_ControllerCommand_ReplaceFailedNode, nil 
  case "DriverControllerCommand_ControllerCommand_TransferPrimaryRole": return DriverControllerCommand_ControllerCommand_TransferPrimaryRole, nil 
  case "DriverControllerCommand_ControllerCommand_RequestNetworkUpdate": return DriverControllerCommand_ControllerCommand_RequestNetworkUpdate, nil 
  case "DriverControllerCommand_ControllerCommand_RequestNodeNeighborUpdate": return DriverControllerCommand_ControllerCommand_RequestNodeNeighborUpdate, nil 
  case "DriverControllerCommand_ControllerCommand_AssignReturnRoute": return DriverControllerCommand_ControllerCommand_AssignReturnRoute, nil 
  case "DriverControllerCommand_ControllerCommand_DeleteAllReturnRoutes": return DriverControllerCommand_ControllerCommand_DeleteAllReturnRoutes, nil 
  case "DriverControllerCommand_ControllerCommand_SendNodeInformation": return DriverControllerCommand_ControllerCommand_SendNodeInformation, nil 
  case "DriverControllerCommand_ControllerCommand_ReplicationSend": return DriverControllerCommand_ControllerCommand_ReplicationSend, nil 
  case "DriverControllerCommand_ControllerCommand_CreateButton": return DriverControllerCommand_ControllerCommand_CreateButton, nil 
  case "DriverControllerCommand_ControllerCommand_DeleteButton": return DriverControllerCommand_ControllerCommand_DeleteButton, nil 
  }
  return DriverControllerCommand(math.MinInt32 - 1), fmt.Errorf("not a valid DriverControllerCommand string")
}


//< Delete id that tracks handheld button presses
type DriverControllerState int64
const (
  DriverControllerState_ControllerState_Normal DriverControllerState = 0
  DriverControllerState_ControllerState_Starting DriverControllerState = 1
  DriverControllerState_ControllerState_Cancel DriverControllerState = 2
  DriverControllerState_ControllerState_Error DriverControllerState = 3
  DriverControllerState_ControllerState_Waiting DriverControllerState = 4
  DriverControllerState_ControllerState_Sleeping DriverControllerState = 5
  DriverControllerState_ControllerState_InProgress DriverControllerState = 6
  DriverControllerState_ControllerState_Completed DriverControllerState = 7
  DriverControllerState_ControllerState_Failed DriverControllerState = 8
  DriverControllerState_ControllerState_NodeOK DriverControllerState = 9
  DriverControllerState_ControllerState_NodeFailed DriverControllerState = 10
)

func (p DriverControllerState) String() string {
  switch p {
  case DriverControllerState_ControllerState_Normal: return "DriverControllerState_ControllerState_Normal"
  case DriverControllerState_ControllerState_Starting: return "DriverControllerState_ControllerState_Starting"
  case DriverControllerState_ControllerState_Cancel: return "DriverControllerState_ControllerState_Cancel"
  case DriverControllerState_ControllerState_Error: return "DriverControllerState_ControllerState_Error"
  case DriverControllerState_ControllerState_Waiting: return "DriverControllerState_ControllerState_Waiting"
  case DriverControllerState_ControllerState_Sleeping: return "DriverControllerState_ControllerState_Sleeping"
  case DriverControllerState_ControllerState_InProgress: return "DriverControllerState_ControllerState_InProgress"
  case DriverControllerState_ControllerState_Completed: return "DriverControllerState_ControllerState_Completed"
  case DriverControllerState_ControllerState_Failed: return "DriverControllerState_ControllerState_Failed"
  case DriverControllerState_ControllerState_NodeOK: return "DriverControllerState_ControllerState_NodeOK"
  case DriverControllerState_ControllerState_NodeFailed: return "DriverControllerState_ControllerState_NodeFailed"
  }
  return "<UNSET>"
}

func DriverControllerStateFromString(s string) (DriverControllerState, error) {
  switch s {
  case "DriverControllerState_ControllerState_Normal": return DriverControllerState_ControllerState_Normal, nil 
  case "DriverControllerState_ControllerState_Starting": return DriverControllerState_ControllerState_Starting, nil 
  case "DriverControllerState_ControllerState_Cancel": return DriverControllerState_ControllerState_Cancel, nil 
  case "DriverControllerState_ControllerState_Error": return DriverControllerState_ControllerState_Error, nil 
  case "DriverControllerState_ControllerState_Waiting": return DriverControllerState_ControllerState_Waiting, nil 
  case "DriverControllerState_ControllerState_Sleeping": return DriverControllerState_ControllerState_Sleeping, nil 
  case "DriverControllerState_ControllerState_InProgress": return DriverControllerState_ControllerState_InProgress, nil 
  case "DriverControllerState_ControllerState_Completed": return DriverControllerState_ControllerState_Completed, nil 
  case "DriverControllerState_ControllerState_Failed": return DriverControllerState_ControllerState_Failed, nil 
  case "DriverControllerState_ControllerState_NodeOK": return DriverControllerState_ControllerState_NodeOK, nil 
  case "DriverControllerState_ControllerState_NodeFailed": return DriverControllerState_ControllerState_NodeFailed, nil 
  }
  return DriverControllerState(math.MinInt32 - 1), fmt.Errorf("not a valid DriverControllerState string")
}


//< Used only with ControllerCommand_HasNodeFailed to indicate that the controller thinks the node has failed.
type DriverControllerError int64
const (
  DriverControllerError_ControllerError_None DriverControllerError = 0
  DriverControllerError_ControllerError_ButtonNotFound DriverControllerError = 1
  DriverControllerError_ControllerError_NodeNotFound DriverControllerError = 2
  DriverControllerError_ControllerError_NotBridge DriverControllerError = 3
  DriverControllerError_ControllerError_NotSUC DriverControllerError = 4
  DriverControllerError_ControllerError_NotSecondary DriverControllerError = 5
  DriverControllerError_ControllerError_NotPrimary DriverControllerError = 6
  DriverControllerError_ControllerError_IsPrimary DriverControllerError = 7
  DriverControllerError_ControllerError_NotFound DriverControllerError = 8
  DriverControllerError_ControllerError_Busy DriverControllerError = 9
  DriverControllerError_ControllerError_Failed DriverControllerError = 10
  DriverControllerError_ControllerError_Disabled DriverControllerError = 11
  DriverControllerError_ControllerError_Overflow DriverControllerError = 12
)

func (p DriverControllerError) String() string {
  switch p {
  case DriverControllerError_ControllerError_None: return "DriverControllerError_ControllerError_None"
  case DriverControllerError_ControllerError_ButtonNotFound: return "DriverControllerError_ControllerError_ButtonNotFound"
  case DriverControllerError_ControllerError_NodeNotFound: return "DriverControllerError_ControllerError_NodeNotFound"
  case DriverControllerError_ControllerError_NotBridge: return "DriverControllerError_ControllerError_NotBridge"
  case DriverControllerError_ControllerError_NotSUC: return "DriverControllerError_ControllerError_NotSUC"
  case DriverControllerError_ControllerError_NotSecondary: return "DriverControllerError_ControllerError_NotSecondary"
  case DriverControllerError_ControllerError_NotPrimary: return "DriverControllerError_ControllerError_NotPrimary"
  case DriverControllerError_ControllerError_IsPrimary: return "DriverControllerError_ControllerError_IsPrimary"
  case DriverControllerError_ControllerError_NotFound: return "DriverControllerError_ControllerError_NotFound"
  case DriverControllerError_ControllerError_Busy: return "DriverControllerError_ControllerError_Busy"
  case DriverControllerError_ControllerError_Failed: return "DriverControllerError_ControllerError_Failed"
  case DriverControllerError_ControllerError_Disabled: return "DriverControllerError_ControllerError_Disabled"
  case DriverControllerError_ControllerError_Overflow: return "DriverControllerError_ControllerError_Overflow"
  }
  return "<UNSET>"
}

func DriverControllerErrorFromString(s string) (DriverControllerError, error) {
  switch s {
  case "DriverControllerError_ControllerError_None": return DriverControllerError_ControllerError_None, nil 
  case "DriverControllerError_ControllerError_ButtonNotFound": return DriverControllerError_ControllerError_ButtonNotFound, nil 
  case "DriverControllerError_ControllerError_NodeNotFound": return DriverControllerError_ControllerError_NodeNotFound, nil 
  case "DriverControllerError_ControllerError_NotBridge": return DriverControllerError_ControllerError_NotBridge, nil 
  case "DriverControllerError_ControllerError_NotSUC": return DriverControllerError_ControllerError_NotSUC, nil 
  case "DriverControllerError_ControllerError_NotSecondary": return DriverControllerError_ControllerError_NotSecondary, nil 
  case "DriverControllerError_ControllerError_NotPrimary": return DriverControllerError_ControllerError_NotPrimary, nil 
  case "DriverControllerError_ControllerError_IsPrimary": return DriverControllerError_ControllerError_IsPrimary, nil 
  case "DriverControllerError_ControllerError_NotFound": return DriverControllerError_ControllerError_NotFound, nil 
  case "DriverControllerError_ControllerError_Busy": return DriverControllerError_ControllerError_Busy, nil 
  case "DriverControllerError_ControllerError_Failed": return DriverControllerError_ControllerError_Failed, nil 
  case "DriverControllerError_ControllerError_Disabled": return DriverControllerError_ControllerError_Disabled, nil 
  case "DriverControllerError_ControllerError_Overflow": return DriverControllerError_ControllerError_Overflow, nil 
  }
  return DriverControllerError(math.MinInt32 - 1), fmt.Errorf("not a valid DriverControllerError string")
}


//< RequestNetworkUpdate error
type DriverControllerInterface int64
const (
  DriverControllerInterface_ControllerInterface_Unknown DriverControllerInterface = 0
  DriverControllerInterface_ControllerInterface_Serial DriverControllerInterface = 1
  DriverControllerInterface_ControllerInterface_Hid DriverControllerInterface = 2
)

func (p DriverControllerInterface) String() string {
  switch p {
  case DriverControllerInterface_ControllerInterface_Unknown: return "DriverControllerInterface_ControllerInterface_Unknown"
  case DriverControllerInterface_ControllerInterface_Serial: return "DriverControllerInterface_ControllerInterface_Serial"
  case DriverControllerInterface_ControllerInterface_Hid: return "DriverControllerInterface_ControllerInterface_Hid"
  }
  return "<UNSET>"
}

func DriverControllerInterfaceFromString(s string) (DriverControllerInterface, error) {
  switch s {
  case "DriverControllerInterface_ControllerInterface_Unknown": return DriverControllerInterface_ControllerInterface_Unknown, nil 
  case "DriverControllerInterface_ControllerInterface_Serial": return DriverControllerInterface_ControllerInterface_Serial, nil 
  case "DriverControllerInterface_ControllerInterface_Hid": return DriverControllerInterface_ControllerInterface_Hid, nil 
  }
  return DriverControllerInterface(math.MinInt32 - 1), fmt.Errorf("not a valid DriverControllerInterface string")
}


type RemoteValueID struct {
  _homeId int32 `thrift:"_homeId,1"`
  _nodeId int8 `thrift:"_nodeId,2"`
  _genre RemoteValueGenre `thrift:"_genre,3"`
  _commandClassId int8 `thrift:"_commandClassId,4"`
  _instance int8 `thrift:"_instance,5"`
  _valueIndex int8 `thrift:"_valueIndex,6"`
  _type RemoteValueType `thrift:"_type,7"`
}

func NewRemoteValueID() *RemoteValueID {
  return &RemoteValueID{
_genre: math.MinInt32 - 1, // unset sentinal value

_type: math.MinInt32 - 1, // unset sentinal value
}
}

func (p *RemoteValueID) IsSet_genre() bool {
  return int64(p._genre) != math.MinInt32 - 1
}

func (p *RemoteValueID) IsSet_type() bool {
  return int64(p._type) != math.MinInt32 - 1
}

func (p *RemoteValueID) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return fmt.Errorf("%T read error: %s", p, err)
  }
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
case 1:
      if err := p.readField1(iprot); err != nil {
        return err
      }
case 2:
      if err := p.readField2(iprot); err != nil {
        return err
      }
case 3:
      if err := p.readField3(iprot); err != nil {
        return err
      }
case 4:
      if err := p.readField4(iprot); err != nil {
        return err
      }
case 5:
      if err := p.readField5(iprot); err != nil {
        return err
      }
case 6:
      if err := p.readField6(iprot); err != nil {
        return err
      }
case 7:
      if err := p.readField7(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return fmt.Errorf("%T read struct end error: %s", p, err)
  }
  return nil
}

func (p *RemoteValueID)  readField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return fmt.Errorf("error reading field 1: %s")
} else {
  p._homeId = v
}
  return nil
}

func (p *RemoteValueID)  readField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(); err != nil {
  return fmt.Errorf("error reading field 2: %s")
} else {
  p._nodeId = int8(v)
}
  return nil
}

func (p *RemoteValueID)  readField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return fmt.Errorf("error reading field 3: %s")
} else {
  p._genre = RemoteValueGenre(v)
}
  return nil
}

func (p *RemoteValueID)  readField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(); err != nil {
  return fmt.Errorf("error reading field 4: %s")
} else {
  p._commandClassId = int8(v)
}
  return nil
}

func (p *RemoteValueID)  readField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(); err != nil {
  return fmt.Errorf("error reading field 5: %s")
} else {
  p._instance = int8(v)
}
  return nil
}

func (p *RemoteValueID)  readField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(); err != nil {
  return fmt.Errorf("error reading field 6: %s")
} else {
  p._valueIndex = int8(v)
}
  return nil
}

func (p *RemoteValueID)  readField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return fmt.Errorf("error reading field 7: %s")
} else {
  p._type = RemoteValueType(v)
}
  return nil
}

func (p *RemoteValueID) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("RemoteValueID"); err != nil {
    return fmt.Errorf("%T write struct begin error: %s", p, err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := p.writeField6(oprot); err != nil { return err }
  if err := p.writeField7(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return fmt.Errorf("%T write field stop error: %s", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return fmt.Errorf("%T write struct stop error: %s", err) }
  return nil
}

func (p *RemoteValueID) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("_homeId", thrift.I32, 1); err != nil {
    return fmt.Errorf("%T write field begin error 1:_homeId: %s", p, err); }
  if err := oprot.WriteI32(int32(p._homeId)); err != nil {
  return fmt.Errorf("%T._homeId (1) field write error: %s", p) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return fmt.Errorf("%T write field end error 1:_homeId: %s", p, err); }
  return err
}

func (p *RemoteValueID) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("_nodeId", thrift.BYTE, 2); err != nil {
    return fmt.Errorf("%T write field begin error 2:_nodeId: %s", p, err); }
  if err := oprot.WriteByte(byte(p._nodeId)); err != nil {
  return fmt.Errorf("%T._nodeId (2) field write error: %s", p) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return fmt.Errorf("%T write field end error 2:_nodeId: %s", p, err); }
  return err
}

func (p *RemoteValueID) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSet_genre() {
    if err := oprot.WriteFieldBegin("_genre", thrift.I32, 3); err != nil {
      return fmt.Errorf("%T write field begin error 3:_genre: %s", p, err); }
    if err := oprot.WriteI32(int32(p._genre)); err != nil {
    return fmt.Errorf("%T._genre (3) field write error: %s", p) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 3:_genre: %s", p, err); }
  }
  return err
}

func (p *RemoteValueID) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("_commandClassId", thrift.BYTE, 4); err != nil {
    return fmt.Errorf("%T write field begin error 4:_commandClassId: %s", p, err); }
  if err := oprot.WriteByte(byte(p._commandClassId)); err != nil {
  return fmt.Errorf("%T._commandClassId (4) field write error: %s", p) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return fmt.Errorf("%T write field end error 4:_commandClassId: %s", p, err); }
  return err
}

func (p *RemoteValueID) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("_instance", thrift.BYTE, 5); err != nil {
    return fmt.Errorf("%T write field begin error 5:_instance: %s", p, err); }
  if err := oprot.WriteByte(byte(p._instance)); err != nil {
  return fmt.Errorf("%T._instance (5) field write error: %s", p) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return fmt.Errorf("%T write field end error 5:_instance: %s", p, err); }
  return err
}

func (p *RemoteValueID) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("_valueIndex", thrift.BYTE, 6); err != nil {
    return fmt.Errorf("%T write field begin error 6:_valueIndex: %s", p, err); }
  if err := oprot.WriteByte(byte(p._valueIndex)); err != nil {
  return fmt.Errorf("%T._valueIndex (6) field write error: %s", p) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return fmt.Errorf("%T write field end error 6:_valueIndex: %s", p, err); }
  return err
}

func (p *RemoteValueID) writeField7(oprot thrift.TProtocol) (err error) {
  if p.IsSet_type() {
    if err := oprot.WriteFieldBegin("_type", thrift.I32, 7); err != nil {
      return fmt.Errorf("%T write field begin error 7:_type: %s", p, err); }
    if err := oprot.WriteI32(int32(p._type)); err != nil {
    return fmt.Errorf("%T._type (7) field write error: %s", p) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 7:_type: %s", p, err); }
  }
  return err
}

func (p *RemoteValueID) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RemoteValueID(%+v)", *p)
}

type DriverData struct {
  S_SOFCnt int32 `thrift:"s_SOFCnt,1"`
  S_ACKWaiting int32 `thrift:"s_ACKWaiting,2"`
  SReadAborts int32 `thrift:"s_readAborts,3"`
  SBadChecksum int32 `thrift:"s_badChecksum,4"`
  SReadCnt int32 `thrift:"s_readCnt,5"`
  SWriteCnt int32 `thrift:"s_writeCnt,6"`
  S_CANCnt int32 `thrift:"s_CANCnt,7"`
  S_NAKCnt int32 `thrift:"s_NAKCnt,8"`
  S_ACKCnt int32 `thrift:"s_ACKCnt,9"`
  S_OOFCnt int32 `thrift:"s_OOFCnt,10"`
  SDropped int32 `thrift:"s_dropped,11"`
  SRetries int32 `thrift:"s_retries,12"`
  SControllerReadCnt int32 `thrift:"s_controllerReadCnt,13"`
  SControllerWriteCnt int32 `thrift:"s_controllerWriteCnt,14"`
}

func NewDriverData() *DriverData {
  return &DriverData{}
}

func (p *DriverData) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return fmt.Errorf("%T read error: %s", p, err)
  }
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
case 1:
      if err := p.readField1(iprot); err != nil {
        return err
      }
case 2:
      if err := p.readField2(iprot); err != nil {
        return err
      }
case 3:
      if err := p.readField3(iprot); err != nil {
        return err
      }
case 4:
      if err := p.readField4(iprot); err != nil {
        return err
      }
case 5:
      if err := p.readField5(iprot); err != nil {
        return err
      }
case 6:
      if err := p.readField6(iprot); err != nil {
        return err
      }
case 7:
      if err := p.readField7(iprot); err != nil {
        return err
      }
case 8:
      if err := p.readField8(iprot); err != nil {
        return err
      }
case 9:
      if err := p.readField9(iprot); err != nil {
        return err
      }
case 10:
      if err := p.readField10(iprot); err != nil {
        return err
      }
case 11:
      if err := p.readField11(iprot); err != nil {
        return err
      }
case 12:
      if err := p.readField12(iprot); err != nil {
        return err
      }
case 13:
      if err := p.readField13(iprot); err != nil {
        return err
      }
case 14:
      if err := p.readField14(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return fmt.Errorf("%T read struct end error: %s", p, err)
  }
  return nil
}

func (p *DriverData)  readField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return fmt.Errorf("error reading field 1: %s")
} else {
  p.S_SOFCnt = v
}
  return nil
}

func (p *DriverData)  readField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return fmt.Errorf("error reading field 2: %s")
} else {
  p.S_ACKWaiting = v
}
  return nil
}

func (p *DriverData)  readField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return fmt.Errorf("error reading field 3: %s")
} else {
  p.SReadAborts = v
}
  return nil
}

func (p *DriverData)  readField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return fmt.Errorf("error reading field 4: %s")
} else {
  p.SBadChecksum = v
}
  return nil
}

func (p *DriverData)  readField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return fmt.Errorf("error reading field 5: %s")
} else {
  p.SReadCnt = v
}
  return nil
}

func (p *DriverData)  readField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return fmt.Errorf("error reading field 6: %s")
} else {
  p.SWriteCnt = v
}
  return nil
}

func (p *DriverData)  readField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return fmt.Errorf("error reading field 7: %s")
} else {
  p.S_CANCnt = v
}
  return nil
}

func (p *DriverData)  readField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return fmt.Errorf("error reading field 8: %s")
} else {
  p.S_NAKCnt = v
}
  return nil
}

func (p *DriverData)  readField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return fmt.Errorf("error reading field 9: %s")
} else {
  p.S_ACKCnt = v
}
  return nil
}

func (p *DriverData)  readField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return fmt.Errorf("error reading field 10: %s")
} else {
  p.S_OOFCnt = v
}
  return nil
}

func (p *DriverData)  readField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return fmt.Errorf("error reading field 11: %s")
} else {
  p.SDropped = v
}
  return nil
}

func (p *DriverData)  readField12(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return fmt.Errorf("error reading field 12: %s")
} else {
  p.SRetries = v
}
  return nil
}

func (p *DriverData)  readField13(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return fmt.Errorf("error reading field 13: %s")
} else {
  p.SControllerReadCnt = v
}
  return nil
}

func (p *DriverData)  readField14(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return fmt.Errorf("error reading field 14: %s")
} else {
  p.SControllerWriteCnt = v
}
  return nil
}

func (p *DriverData) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("DriverData"); err != nil {
    return fmt.Errorf("%T write struct begin error: %s", p, err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := p.writeField6(oprot); err != nil { return err }
  if err := p.writeField7(oprot); err != nil { return err }
  if err := p.writeField8(oprot); err != nil { return err }
  if err := p.writeField9(oprot); err != nil { return err }
  if err := p.writeField10(oprot); err != nil { return err }
  if err := p.writeField11(oprot); err != nil { return err }
  if err := p.writeField12(oprot); err != nil { return err }
  if err := p.writeField13(oprot); err != nil { return err }
  if err := p.writeField14(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return fmt.Errorf("%T write field stop error: %s", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return fmt.Errorf("%T write struct stop error: %s", err) }
  return nil
}

func (p *DriverData) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("s_SOFCnt", thrift.I32, 1); err != nil {
    return fmt.Errorf("%T write field begin error 1:s_SOFCnt: %s", p, err); }
  if err := oprot.WriteI32(int32(p.S_SOFCnt)); err != nil {
  return fmt.Errorf("%T.s_SOFCnt (1) field write error: %s", p) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return fmt.Errorf("%T write field end error 1:s_SOFCnt: %s", p, err); }
  return err
}

func (p *DriverData) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("s_ACKWaiting", thrift.I32, 2); err != nil {
    return fmt.Errorf("%T write field begin error 2:s_ACKWaiting: %s", p, err); }
  if err := oprot.WriteI32(int32(p.S_ACKWaiting)); err != nil {
  return fmt.Errorf("%T.s_ACKWaiting (2) field write error: %s", p) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return fmt.Errorf("%T write field end error 2:s_ACKWaiting: %s", p, err); }
  return err
}

func (p *DriverData) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("s_readAborts", thrift.I32, 3); err != nil {
    return fmt.Errorf("%T write field begin error 3:s_readAborts: %s", p, err); }
  if err := oprot.WriteI32(int32(p.SReadAborts)); err != nil {
  return fmt.Errorf("%T.s_readAborts (3) field write error: %s", p) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return fmt.Errorf("%T write field end error 3:s_readAborts: %s", p, err); }
  return err
}

func (p *DriverData) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("s_badChecksum", thrift.I32, 4); err != nil {
    return fmt.Errorf("%T write field begin error 4:s_badChecksum: %s", p, err); }
  if err := oprot.WriteI32(int32(p.SBadChecksum)); err != nil {
  return fmt.Errorf("%T.s_badChecksum (4) field write error: %s", p) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return fmt.Errorf("%T write field end error 4:s_badChecksum: %s", p, err); }
  return err
}

func (p *DriverData) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("s_readCnt", thrift.I32, 5); err != nil {
    return fmt.Errorf("%T write field begin error 5:s_readCnt: %s", p, err); }
  if err := oprot.WriteI32(int32(p.SReadCnt)); err != nil {
  return fmt.Errorf("%T.s_readCnt (5) field write error: %s", p) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return fmt.Errorf("%T write field end error 5:s_readCnt: %s", p, err); }
  return err
}

func (p *DriverData) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("s_writeCnt", thrift.I32, 6); err != nil {
    return fmt.Errorf("%T write field begin error 6:s_writeCnt: %s", p, err); }
  if err := oprot.WriteI32(int32(p.SWriteCnt)); err != nil {
  return fmt.Errorf("%T.s_writeCnt (6) field write error: %s", p) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return fmt.Errorf("%T write field end error 6:s_writeCnt: %s", p, err); }
  return err
}

func (p *DriverData) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("s_CANCnt", thrift.I32, 7); err != nil {
    return fmt.Errorf("%T write field begin error 7:s_CANCnt: %s", p, err); }
  if err := oprot.WriteI32(int32(p.S_CANCnt)); err != nil {
  return fmt.Errorf("%T.s_CANCnt (7) field write error: %s", p) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return fmt.Errorf("%T write field end error 7:s_CANCnt: %s", p, err); }
  return err
}

func (p *DriverData) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("s_NAKCnt", thrift.I32, 8); err != nil {
    return fmt.Errorf("%T write field begin error 8:s_NAKCnt: %s", p, err); }
  if err := oprot.WriteI32(int32(p.S_NAKCnt)); err != nil {
  return fmt.Errorf("%T.s_NAKCnt (8) field write error: %s", p) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return fmt.Errorf("%T write field end error 8:s_NAKCnt: %s", p, err); }
  return err
}

func (p *DriverData) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("s_ACKCnt", thrift.I32, 9); err != nil {
    return fmt.Errorf("%T write field begin error 9:s_ACKCnt: %s", p, err); }
  if err := oprot.WriteI32(int32(p.S_ACKCnt)); err != nil {
  return fmt.Errorf("%T.s_ACKCnt (9) field write error: %s", p) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return fmt.Errorf("%T write field end error 9:s_ACKCnt: %s", p, err); }
  return err
}

func (p *DriverData) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("s_OOFCnt", thrift.I32, 10); err != nil {
    return fmt.Errorf("%T write field begin error 10:s_OOFCnt: %s", p, err); }
  if err := oprot.WriteI32(int32(p.S_OOFCnt)); err != nil {
  return fmt.Errorf("%T.s_OOFCnt (10) field write error: %s", p) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return fmt.Errorf("%T write field end error 10:s_OOFCnt: %s", p, err); }
  return err
}

func (p *DriverData) writeField11(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("s_dropped", thrift.I32, 11); err != nil {
    return fmt.Errorf("%T write field begin error 11:s_dropped: %s", p, err); }
  if err := oprot.WriteI32(int32(p.SDropped)); err != nil {
  return fmt.Errorf("%T.s_dropped (11) field write error: %s", p) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return fmt.Errorf("%T write field end error 11:s_dropped: %s", p, err); }
  return err
}

func (p *DriverData) writeField12(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("s_retries", thrift.I32, 12); err != nil {
    return fmt.Errorf("%T write field begin error 12:s_retries: %s", p, err); }
  if err := oprot.WriteI32(int32(p.SRetries)); err != nil {
  return fmt.Errorf("%T.s_retries (12) field write error: %s", p) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return fmt.Errorf("%T write field end error 12:s_retries: %s", p, err); }
  return err
}

func (p *DriverData) writeField13(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("s_controllerReadCnt", thrift.I32, 13); err != nil {
    return fmt.Errorf("%T write field begin error 13:s_controllerReadCnt: %s", p, err); }
  if err := oprot.WriteI32(int32(p.SControllerReadCnt)); err != nil {
  return fmt.Errorf("%T.s_controllerReadCnt (13) field write error: %s", p) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return fmt.Errorf("%T write field end error 13:s_controllerReadCnt: %s", p, err); }
  return err
}

func (p *DriverData) writeField14(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("s_controllerWriteCnt", thrift.I32, 14); err != nil {
    return fmt.Errorf("%T write field begin error 14:s_controllerWriteCnt: %s", p, err); }
  if err := oprot.WriteI32(int32(p.SControllerWriteCnt)); err != nil {
  return fmt.Errorf("%T.s_controllerWriteCnt (14) field write error: %s", p) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return fmt.Errorf("%T write field end error 14:s_controllerWriteCnt: %s", p, err); }
  return err
}

func (p *DriverData) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DriverData(%+v)", *p)
}

type GetDriverStatisticsReturnStruct struct {
  _data *DriverData `thrift:"_data,1"`
}

func NewGetDriverStatisticsReturnStruct() *GetDriverStatisticsReturnStruct {
  return &GetDriverStatisticsReturnStruct{}
}

func (p *GetDriverStatisticsReturnStruct) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return fmt.Errorf("%T read error: %s", p, err)
  }
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
case 1:
      if err := p.readField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return fmt.Errorf("%T read struct end error: %s", p, err)
  }
  return nil
}

func (p *GetDriverStatisticsReturnStruct)  readField1(iprot thrift.TProtocol) error {
  p._data = NewDriverData()
  if err := p._data.Read(iprot); err != nil {
    return fmt.Errorf("%T error reading struct: %s", p._data)
  }
  return nil
}

func (p *GetDriverStatisticsReturnStruct) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetDriverStatisticsReturnStruct"); err != nil {
    return fmt.Errorf("%T write struct begin error: %s", p, err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return fmt.Errorf("%T write field stop error: %s", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return fmt.Errorf("%T write struct stop error: %s", err) }
  return nil
}

func (p *GetDriverStatisticsReturnStruct) writeField1(oprot thrift.TProtocol) (err error) {
  if p._data != nil {
    if err := oprot.WriteFieldBegin("_data", thrift.STRUCT, 1); err != nil {
      return fmt.Errorf("%T write field begin error 1:_data: %s", p, err); }
    if err := p._data.Write(oprot); err != nil {
      return fmt.Errorf("%T error writing struct: %s", p._data)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 1:_data: %s", p, err); }
  }
  return err
}

func (p *GetDriverStatisticsReturnStruct) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetDriverStatisticsReturnStruct(%+v)", *p)
}

type CommandClassData struct {
  MCommandClassId int8 `thrift:"m_commandClassId,1"`
  MSentCnt int32 `thrift:"m_sentCnt,2"`
  MReceivedCnt int32 `thrift:"m_receivedCnt,3"`
}

func NewCommandClassData() *CommandClassData {
  return &CommandClassData{}
}

func (p *CommandClassData) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return fmt.Errorf("%T read error: %s", p, err)
  }
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
case 1:
      if err := p.readField1(iprot); err != nil {
        return err
      }
case 2:
      if err := p.readField2(iprot); err != nil {
        return err
      }
case 3:
      if err := p.readField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return fmt.Errorf("%T read struct end error: %s", p, err)
  }
  return nil
}

func (p *CommandClassData)  readField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(); err != nil {
  return fmt.Errorf("error reading field 1: %s")
} else {
  p.MCommandClassId = int8(v)
}
  return nil
}

func (p *CommandClassData)  readField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return fmt.Errorf("error reading field 2: %s")
} else {
  p.MSentCnt = v
}
  return nil
}

func (p *CommandClassData)  readField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return fmt.Errorf("error reading field 3: %s")
} else {
  p.MReceivedCnt = v
}
  return nil
}

func (p *CommandClassData) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("CommandClassData"); err != nil {
    return fmt.Errorf("%T write struct begin error: %s", p, err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return fmt.Errorf("%T write field stop error: %s", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return fmt.Errorf("%T write struct stop error: %s", err) }
  return nil
}

func (p *CommandClassData) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("m_commandClassId", thrift.BYTE, 1); err != nil {
    return fmt.Errorf("%T write field begin error 1:m_commandClassId: %s", p, err); }
  if err := oprot.WriteByte(byte(p.MCommandClassId)); err != nil {
  return fmt.Errorf("%T.m_commandClassId (1) field write error: %s", p) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return fmt.Errorf("%T write field end error 1:m_commandClassId: %s", p, err); }
  return err
}

func (p *CommandClassData) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("m_sentCnt", thrift.I32, 2); err != nil {
    return fmt.Errorf("%T write field begin error 2:m_sentCnt: %s", p, err); }
  if err := oprot.WriteI32(int32(p.MSentCnt)); err != nil {
  return fmt.Errorf("%T.m_sentCnt (2) field write error: %s", p) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return fmt.Errorf("%T write field end error 2:m_sentCnt: %s", p, err); }
  return err
}

func (p *CommandClassData) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("m_receivedCnt", thrift.I32, 3); err != nil {
    return fmt.Errorf("%T write field begin error 3:m_receivedCnt: %s", p, err); }
  if err := oprot.WriteI32(int32(p.MReceivedCnt)); err != nil {
  return fmt.Errorf("%T.m_receivedCnt (3) field write error: %s", p) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return fmt.Errorf("%T write field end error 3:m_receivedCnt: %s", p, err); }
  return err
}

func (p *CommandClassData) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CommandClassData(%+v)", *p)
}

type NodeData struct {
  MSentCnt int32 `thrift:"m_sentCnt,1"`
  MSentFailed int32 `thrift:"m_sentFailed,2"`
  MRetries int32 `thrift:"m_retries,3"`
  MReceivedCnt int32 `thrift:"m_receivedCnt,4"`
  MReceivedDups int32 `thrift:"m_receivedDups,5"`
  MRtt int32 `thrift:"m_rtt,6"`
  MSentTS string `thrift:"m_sentTS,7"`
  MReceivedTS string `thrift:"m_receivedTS,8"`
  MLastRTT int32 `thrift:"m_lastRTT,9"`
  MAverageRTT int32 `thrift:"m_averageRTT,10"`
  MQuality int8 `thrift:"m_quality,11"`
  MLastReceivedMessage []int8 `thrift:"m_lastReceivedMessage,12"`
  MCcData []*CommandClassData `thrift:"m_ccData,13"`
}

func NewNodeData() *NodeData {
  return &NodeData{}
}

func (p *NodeData) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return fmt.Errorf("%T read error: %s", p, err)
  }
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
case 1:
      if err := p.readField1(iprot); err != nil {
        return err
      }
case 2:
      if err := p.readField2(iprot); err != nil {
        return err
      }
case 3:
      if err := p.readField3(iprot); err != nil {
        return err
      }
case 4:
      if err := p.readField4(iprot); err != nil {
        return err
      }
case 5:
      if err := p.readField5(iprot); err != nil {
        return err
      }
case 6:
      if err := p.readField6(iprot); err != nil {
        return err
      }
case 7:
      if err := p.readField7(iprot); err != nil {
        return err
      }
case 8:
      if err := p.readField8(iprot); err != nil {
        return err
      }
case 9:
      if err := p.readField9(iprot); err != nil {
        return err
      }
case 10:
      if err := p.readField10(iprot); err != nil {
        return err
      }
case 11:
      if err := p.readField11(iprot); err != nil {
        return err
      }
case 12:
      if err := p.readField12(iprot); err != nil {
        return err
      }
case 13:
      if err := p.readField13(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return fmt.Errorf("%T read struct end error: %s", p, err)
  }
  return nil
}

func (p *NodeData)  readField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return fmt.Errorf("error reading field 1: %s")
} else {
  p.MSentCnt = v
}
  return nil
}

func (p *NodeData)  readField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return fmt.Errorf("error reading field 2: %s")
} else {
  p.MSentFailed = v
}
  return nil
}

func (p *NodeData)  readField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return fmt.Errorf("error reading field 3: %s")
} else {
  p.MRetries = v
}
  return nil
}

func (p *NodeData)  readField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return fmt.Errorf("error reading field 4: %s")
} else {
  p.MReceivedCnt = v
}
  return nil
}

func (p *NodeData)  readField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return fmt.Errorf("error reading field 5: %s")
} else {
  p.MReceivedDups = v
}
  return nil
}

func (p *NodeData)  readField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return fmt.Errorf("error reading field 6: %s")
} else {
  p.MRtt = v
}
  return nil
}

func (p *NodeData)  readField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return fmt.Errorf("error reading field 7: %s")
} else {
  p.MSentTS = v
}
  return nil
}

func (p *NodeData)  readField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return fmt.Errorf("error reading field 8: %s")
} else {
  p.MReceivedTS = v
}
  return nil
}

func (p *NodeData)  readField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return fmt.Errorf("error reading field 9: %s")
} else {
  p.MLastRTT = v
}
  return nil
}

func (p *NodeData)  readField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return fmt.Errorf("error reading field 10: %s")
} else {
  p.MAverageRTT = v
}
  return nil
}

func (p *NodeData)  readField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(); err != nil {
  return fmt.Errorf("error reading field 11: %s")
} else {
  p.MQuality = int8(v)
}
  return nil
}

func (p *NodeData)  readField12(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return fmt.Errorf("error reading list being: %s")
  }
  p.MLastReceivedMessage = make([]int8, 0, size)
  for i := 0; i < size; i ++ {
var _elem0 int8
    if v, err := iprot.ReadByte(); err != nil {
    return fmt.Errorf("error reading field 0: %s")
} else {
    _elem0 = int8(v)
}
    p.MLastReceivedMessage = append(p.MLastReceivedMessage, _elem0)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return fmt.Errorf("error reading list end: %s")
  }
  return nil
}

func (p *NodeData)  readField13(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return fmt.Errorf("error reading list being: %s")
  }
  p.MCcData = make([]*CommandClassData, 0, size)
  for i := 0; i < size; i ++ {
    _elem1 := NewCommandClassData()
    if err := _elem1.Read(iprot); err != nil {
      return fmt.Errorf("%T error reading struct: %s", _elem1)
    }
    p.MCcData = append(p.MCcData, _elem1)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return fmt.Errorf("error reading list end: %s")
  }
  return nil
}

func (p *NodeData) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("NodeData"); err != nil {
    return fmt.Errorf("%T write struct begin error: %s", p, err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := p.writeField6(oprot); err != nil { return err }
  if err := p.writeField7(oprot); err != nil { return err }
  if err := p.writeField8(oprot); err != nil { return err }
  if err := p.writeField9(oprot); err != nil { return err }
  if err := p.writeField10(oprot); err != nil { return err }
  if err := p.writeField11(oprot); err != nil { return err }
  if err := p.writeField12(oprot); err != nil { return err }
  if err := p.writeField13(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return fmt.Errorf("%T write field stop error: %s", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return fmt.Errorf("%T write struct stop error: %s", err) }
  return nil
}

func (p *NodeData) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("m_sentCnt", thrift.I32, 1); err != nil {
    return fmt.Errorf("%T write field begin error 1:m_sentCnt: %s", p, err); }
  if err := oprot.WriteI32(int32(p.MSentCnt)); err != nil {
  return fmt.Errorf("%T.m_sentCnt (1) field write error: %s", p) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return fmt.Errorf("%T write field end error 1:m_sentCnt: %s", p, err); }
  return err
}

func (p *NodeData) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("m_sentFailed", thrift.I32, 2); err != nil {
    return fmt.Errorf("%T write field begin error 2:m_sentFailed: %s", p, err); }
  if err := oprot.WriteI32(int32(p.MSentFailed)); err != nil {
  return fmt.Errorf("%T.m_sentFailed (2) field write error: %s", p) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return fmt.Errorf("%T write field end error 2:m_sentFailed: %s", p, err); }
  return err
}

func (p *NodeData) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("m_retries", thrift.I32, 3); err != nil {
    return fmt.Errorf("%T write field begin error 3:m_retries: %s", p, err); }
  if err := oprot.WriteI32(int32(p.MRetries)); err != nil {
  return fmt.Errorf("%T.m_retries (3) field write error: %s", p) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return fmt.Errorf("%T write field end error 3:m_retries: %s", p, err); }
  return err
}

func (p *NodeData) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("m_receivedCnt", thrift.I32, 4); err != nil {
    return fmt.Errorf("%T write field begin error 4:m_receivedCnt: %s", p, err); }
  if err := oprot.WriteI32(int32(p.MReceivedCnt)); err != nil {
  return fmt.Errorf("%T.m_receivedCnt (4) field write error: %s", p) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return fmt.Errorf("%T write field end error 4:m_receivedCnt: %s", p, err); }
  return err
}

func (p *NodeData) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("m_receivedDups", thrift.I32, 5); err != nil {
    return fmt.Errorf("%T write field begin error 5:m_receivedDups: %s", p, err); }
  if err := oprot.WriteI32(int32(p.MReceivedDups)); err != nil {
  return fmt.Errorf("%T.m_receivedDups (5) field write error: %s", p) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return fmt.Errorf("%T write field end error 5:m_receivedDups: %s", p, err); }
  return err
}

func (p *NodeData) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("m_rtt", thrift.I32, 6); err != nil {
    return fmt.Errorf("%T write field begin error 6:m_rtt: %s", p, err); }
  if err := oprot.WriteI32(int32(p.MRtt)); err != nil {
  return fmt.Errorf("%T.m_rtt (6) field write error: %s", p) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return fmt.Errorf("%T write field end error 6:m_rtt: %s", p, err); }
  return err
}

func (p *NodeData) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("m_sentTS", thrift.STRING, 7); err != nil {
    return fmt.Errorf("%T write field begin error 7:m_sentTS: %s", p, err); }
  if err := oprot.WriteString(string(p.MSentTS)); err != nil {
  return fmt.Errorf("%T.m_sentTS (7) field write error: %s", p) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return fmt.Errorf("%T write field end error 7:m_sentTS: %s", p, err); }
  return err
}

func (p *NodeData) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("m_receivedTS", thrift.STRING, 8); err != nil {
    return fmt.Errorf("%T write field begin error 8:m_receivedTS: %s", p, err); }
  if err := oprot.WriteString(string(p.MReceivedTS)); err != nil {
  return fmt.Errorf("%T.m_receivedTS (8) field write error: %s", p) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return fmt.Errorf("%T write field end error 8:m_receivedTS: %s", p, err); }
  return err
}

func (p *NodeData) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("m_lastRTT", thrift.I32, 9); err != nil {
    return fmt.Errorf("%T write field begin error 9:m_lastRTT: %s", p, err); }
  if err := oprot.WriteI32(int32(p.MLastRTT)); err != nil {
  return fmt.Errorf("%T.m_lastRTT (9) field write error: %s", p) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return fmt.Errorf("%T write field end error 9:m_lastRTT: %s", p, err); }
  return err
}

func (p *NodeData) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("m_averageRTT", thrift.I32, 10); err != nil {
    return fmt.Errorf("%T write field begin error 10:m_averageRTT: %s", p, err); }
  if err := oprot.WriteI32(int32(p.MAverageRTT)); err != nil {
  return fmt.Errorf("%T.m_averageRTT (10) field write error: %s", p) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return fmt.Errorf("%T write field end error 10:m_averageRTT: %s", p, err); }
  return err
}

func (p *NodeData) writeField11(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("m_quality", thrift.BYTE, 11); err != nil {
    return fmt.Errorf("%T write field begin error 11:m_quality: %s", p, err); }
  if err := oprot.WriteByte(byte(p.MQuality)); err != nil {
  return fmt.Errorf("%T.m_quality (11) field write error: %s", p) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return fmt.Errorf("%T write field end error 11:m_quality: %s", p, err); }
  return err
}

func (p *NodeData) writeField12(oprot thrift.TProtocol) (err error) {
  if p.MLastReceivedMessage != nil {
    if err := oprot.WriteFieldBegin("m_lastReceivedMessage", thrift.LIST, 12); err != nil {
      return fmt.Errorf("%T write field begin error 12:m_lastReceivedMessage: %s", p, err); }
    if err := oprot.WriteListBegin(thrift.BYTE, len(p.MLastReceivedMessage)); err != nil {
      return fmt.Errorf("error writing list begin: %s")
    }
    for _, v := range p.MLastReceivedMessage {
      if err := oprot.WriteByte(byte(v)); err != nil {
      return fmt.Errorf("%T. (0) field write error: %s", p) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return fmt.Errorf("error writing list end: %s")
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 12:m_lastReceivedMessage: %s", p, err); }
  }
  return err
}

func (p *NodeData) writeField13(oprot thrift.TProtocol) (err error) {
  if p.MCcData != nil {
    if err := oprot.WriteFieldBegin("m_ccData", thrift.LIST, 13); err != nil {
      return fmt.Errorf("%T write field begin error 13:m_ccData: %s", p, err); }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.MCcData)); err != nil {
      return fmt.Errorf("error writing list begin: %s")
    }
    for _, v := range p.MCcData {
      if err := v.Write(oprot); err != nil {
        return fmt.Errorf("%T error writing struct: %s", v)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return fmt.Errorf("error writing list end: %s")
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 13:m_ccData: %s", p, err); }
  }
  return err
}

func (p *NodeData) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("NodeData(%+v)", *p)
}

type GetNodeStatisticsReturnStruct struct {
  _data *NodeData `thrift:"_data,1"`
}

func NewGetNodeStatisticsReturnStruct() *GetNodeStatisticsReturnStruct {
  return &GetNodeStatisticsReturnStruct{}
}

func (p *GetNodeStatisticsReturnStruct) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return fmt.Errorf("%T read error: %s", p, err)
  }
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
case 1:
      if err := p.readField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return fmt.Errorf("%T read struct end error: %s", p, err)
  }
  return nil
}

func (p *GetNodeStatisticsReturnStruct)  readField1(iprot thrift.TProtocol) error {
  p._data = NewNodeData()
  if err := p._data.Read(iprot); err != nil {
    return fmt.Errorf("%T error reading struct: %s", p._data)
  }
  return nil
}

func (p *GetNodeStatisticsReturnStruct) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetNodeStatisticsReturnStruct"); err != nil {
    return fmt.Errorf("%T write struct begin error: %s", p, err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return fmt.Errorf("%T write field stop error: %s", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return fmt.Errorf("%T write struct stop error: %s", err) }
  return nil
}

func (p *GetNodeStatisticsReturnStruct) writeField1(oprot thrift.TProtocol) (err error) {
  if p._data != nil {
    if err := oprot.WriteFieldBegin("_data", thrift.STRUCT, 1); err != nil {
      return fmt.Errorf("%T write field begin error 1:_data: %s", p, err); }
    if err := p._data.Write(oprot); err != nil {
      return fmt.Errorf("%T error writing struct: %s", p._data)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 1:_data: %s", p, err); }
  }
  return err
}

func (p *GetNodeStatisticsReturnStruct) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetNodeStatisticsReturnStruct(%+v)", *p)
}

type GetSwitchPointReturnStruct struct {
  Retval bool `thrift:"retval,1"`
  OHours int8 `thrift:"o_hours,2"`
  OMinutes int8 `thrift:"o_minutes,3"`
  OSetback int8 `thrift:"o_setback,4"`
}

func NewGetSwitchPointReturnStruct() *GetSwitchPointReturnStruct {
  return &GetSwitchPointReturnStruct{}
}

func (p *GetSwitchPointReturnStruct) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return fmt.Errorf("%T read error: %s", p, err)
  }
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
case 1:
      if err := p.readField1(iprot); err != nil {
        return err
      }
case 2:
      if err := p.readField2(iprot); err != nil {
        return err
      }
case 3:
      if err := p.readField3(iprot); err != nil {
        return err
      }
case 4:
      if err := p.readField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return fmt.Errorf("%T read struct end error: %s", p, err)
  }
  return nil
}

func (p *GetSwitchPointReturnStruct)  readField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return fmt.Errorf("error reading field 1: %s")
} else {
  p.Retval = v
}
  return nil
}

func (p *GetSwitchPointReturnStruct)  readField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(); err != nil {
  return fmt.Errorf("error reading field 2: %s")
} else {
  p.OHours = int8(v)
}
  return nil
}

func (p *GetSwitchPointReturnStruct)  readField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(); err != nil {
  return fmt.Errorf("error reading field 3: %s")
} else {
  p.OMinutes = int8(v)
}
  return nil
}

func (p *GetSwitchPointReturnStruct)  readField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(); err != nil {
  return fmt.Errorf("error reading field 4: %s")
} else {
  p.OSetback = int8(v)
}
  return nil
}

func (p *GetSwitchPointReturnStruct) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetSwitchPointReturnStruct"); err != nil {
    return fmt.Errorf("%T write struct begin error: %s", p, err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return fmt.Errorf("%T write field stop error: %s", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return fmt.Errorf("%T write struct stop error: %s", err) }
  return nil
}

func (p *GetSwitchPointReturnStruct) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("retval", thrift.BOOL, 1); err != nil {
    return fmt.Errorf("%T write field begin error 1:retval: %s", p, err); }
  if err := oprot.WriteBool(bool(p.Retval)); err != nil {
  return fmt.Errorf("%T.retval (1) field write error: %s", p) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return fmt.Errorf("%T write field end error 1:retval: %s", p, err); }
  return err
}

func (p *GetSwitchPointReturnStruct) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("o_hours", thrift.BYTE, 2); err != nil {
    return fmt.Errorf("%T write field begin error 2:o_hours: %s", p, err); }
  if err := oprot.WriteByte(byte(p.OHours)); err != nil {
  return fmt.Errorf("%T.o_hours (2) field write error: %s", p) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return fmt.Errorf("%T write field end error 2:o_hours: %s", p, err); }
  return err
}

func (p *GetSwitchPointReturnStruct) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("o_minutes", thrift.BYTE, 3); err != nil {
    return fmt.Errorf("%T write field begin error 3:o_minutes: %s", p, err); }
  if err := oprot.WriteByte(byte(p.OMinutes)); err != nil {
  return fmt.Errorf("%T.o_minutes (3) field write error: %s", p) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return fmt.Errorf("%T write field end error 3:o_minutes: %s", p, err); }
  return err
}

func (p *GetSwitchPointReturnStruct) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("o_setback", thrift.BYTE, 4); err != nil {
    return fmt.Errorf("%T write field begin error 4:o_setback: %s", p, err); }
  if err := oprot.WriteByte(byte(p.OSetback)); err != nil {
  return fmt.Errorf("%T.o_setback (4) field write error: %s", p) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return fmt.Errorf("%T write field end error 4:o_setback: %s", p, err); }
  return err
}

func (p *GetSwitchPointReturnStruct) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetSwitchPointReturnStruct(%+v)", *p)
}

type Bool_Bool struct {
  Retval bool `thrift:"retval,1"`
  OValue bool `thrift:"o_value,2"`
}

func NewBool_Bool() *Bool_Bool {
  return &Bool_Bool{}
}

func (p *Bool_Bool) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return fmt.Errorf("%T read error: %s", p, err)
  }
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
case 1:
      if err := p.readField1(iprot); err != nil {
        return err
      }
case 2:
      if err := p.readField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return fmt.Errorf("%T read struct end error: %s", p, err)
  }
  return nil
}

func (p *Bool_Bool)  readField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return fmt.Errorf("error reading field 1: %s")
} else {
  p.Retval = v
}
  return nil
}

func (p *Bool_Bool)  readField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return fmt.Errorf("error reading field 2: %s")
} else {
  p.OValue = v
}
  return nil
}

func (p *Bool_Bool) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Bool_Bool"); err != nil {
    return fmt.Errorf("%T write struct begin error: %s", p, err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return fmt.Errorf("%T write field stop error: %s", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return fmt.Errorf("%T write struct stop error: %s", err) }
  return nil
}

func (p *Bool_Bool) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("retval", thrift.BOOL, 1); err != nil {
    return fmt.Errorf("%T write field begin error 1:retval: %s", p, err); }
  if err := oprot.WriteBool(bool(p.Retval)); err != nil {
  return fmt.Errorf("%T.retval (1) field write error: %s", p) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return fmt.Errorf("%T write field end error 1:retval: %s", p, err); }
  return err
}

func (p *Bool_Bool) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("o_value", thrift.BOOL, 2); err != nil {
    return fmt.Errorf("%T write field begin error 2:o_value: %s", p, err); }
  if err := oprot.WriteBool(bool(p.OValue)); err != nil {
  return fmt.Errorf("%T.o_value (2) field write error: %s", p) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return fmt.Errorf("%T write field end error 2:o_value: %s", p, err); }
  return err
}

func (p *Bool_Bool) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Bool_Bool(%+v)", *p)
}

type Bool_UInt8 struct {
  Retval bool `thrift:"retval,1"`
  OValue int8 `thrift:"o_value,2"`
}

func NewBool_UInt8() *Bool_UInt8 {
  return &Bool_UInt8{}
}

func (p *Bool_UInt8) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return fmt.Errorf("%T read error: %s", p, err)
  }
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
case 1:
      if err := p.readField1(iprot); err != nil {
        return err
      }
case 2:
      if err := p.readField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return fmt.Errorf("%T read struct end error: %s", p, err)
  }
  return nil
}

func (p *Bool_UInt8)  readField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return fmt.Errorf("error reading field 1: %s")
} else {
  p.Retval = v
}
  return nil
}

func (p *Bool_UInt8)  readField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(); err != nil {
  return fmt.Errorf("error reading field 2: %s")
} else {
  p.OValue = int8(v)
}
  return nil
}

func (p *Bool_UInt8) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Bool_UInt8"); err != nil {
    return fmt.Errorf("%T write struct begin error: %s", p, err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return fmt.Errorf("%T write field stop error: %s", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return fmt.Errorf("%T write struct stop error: %s", err) }
  return nil
}

func (p *Bool_UInt8) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("retval", thrift.BOOL, 1); err != nil {
    return fmt.Errorf("%T write field begin error 1:retval: %s", p, err); }
  if err := oprot.WriteBool(bool(p.Retval)); err != nil {
  return fmt.Errorf("%T.retval (1) field write error: %s", p) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return fmt.Errorf("%T write field end error 1:retval: %s", p, err); }
  return err
}

func (p *Bool_UInt8) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("o_value", thrift.BYTE, 2); err != nil {
    return fmt.Errorf("%T write field begin error 2:o_value: %s", p, err); }
  if err := oprot.WriteByte(byte(p.OValue)); err != nil {
  return fmt.Errorf("%T.o_value (2) field write error: %s", p) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return fmt.Errorf("%T write field end error 2:o_value: %s", p, err); }
  return err
}

func (p *Bool_UInt8) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Bool_UInt8(%+v)", *p)
}

type Bool_Float struct {
  Retval bool `thrift:"retval,1"`
  OValue float64 `thrift:"o_value,2"`
}

func NewBool_Float() *Bool_Float {
  return &Bool_Float{}
}

func (p *Bool_Float) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return fmt.Errorf("%T read error: %s", p, err)
  }
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
case 1:
      if err := p.readField1(iprot); err != nil {
        return err
      }
case 2:
      if err := p.readField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return fmt.Errorf("%T read struct end error: %s", p, err)
  }
  return nil
}

func (p *Bool_Float)  readField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return fmt.Errorf("error reading field 1: %s")
} else {
  p.Retval = v
}
  return nil
}

func (p *Bool_Float)  readField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return fmt.Errorf("error reading field 2: %s")
} else {
  p.OValue = v
}
  return nil
}

func (p *Bool_Float) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Bool_Float"); err != nil {
    return fmt.Errorf("%T write struct begin error: %s", p, err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return fmt.Errorf("%T write field stop error: %s", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return fmt.Errorf("%T write struct stop error: %s", err) }
  return nil
}

func (p *Bool_Float) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("retval", thrift.BOOL, 1); err != nil {
    return fmt.Errorf("%T write field begin error 1:retval: %s", p, err); }
  if err := oprot.WriteBool(bool(p.Retval)); err != nil {
  return fmt.Errorf("%T.retval (1) field write error: %s", p) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return fmt.Errorf("%T write field end error 1:retval: %s", p, err); }
  return err
}

func (p *Bool_Float) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("o_value", thrift.DOUBLE, 2); err != nil {
    return fmt.Errorf("%T write field begin error 2:o_value: %s", p, err); }
  if err := oprot.WriteDouble(float64(p.OValue)); err != nil {
  return fmt.Errorf("%T.o_value (2) field write error: %s", p) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return fmt.Errorf("%T write field end error 2:o_value: %s", p, err); }
  return err
}

func (p *Bool_Float) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Bool_Float(%+v)", *p)
}

type Bool_Int struct {
  Retval bool `thrift:"retval,1"`
  OValue int32 `thrift:"o_value,2"`
}

func NewBool_Int() *Bool_Int {
  return &Bool_Int{}
}

func (p *Bool_Int) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return fmt.Errorf("%T read error: %s", p, err)
  }
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
case 1:
      if err := p.readField1(iprot); err != nil {
        return err
      }
case 2:
      if err := p.readField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return fmt.Errorf("%T read struct end error: %s", p, err)
  }
  return nil
}

func (p *Bool_Int)  readField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return fmt.Errorf("error reading field 1: %s")
} else {
  p.Retval = v
}
  return nil
}

func (p *Bool_Int)  readField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return fmt.Errorf("error reading field 2: %s")
} else {
  p.OValue = v
}
  return nil
}

func (p *Bool_Int) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Bool_Int"); err != nil {
    return fmt.Errorf("%T write struct begin error: %s", p, err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return fmt.Errorf("%T write field stop error: %s", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return fmt.Errorf("%T write struct stop error: %s", err) }
  return nil
}

func (p *Bool_Int) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("retval", thrift.BOOL, 1); err != nil {
    return fmt.Errorf("%T write field begin error 1:retval: %s", p, err); }
  if err := oprot.WriteBool(bool(p.Retval)); err != nil {
  return fmt.Errorf("%T.retval (1) field write error: %s", p) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return fmt.Errorf("%T write field end error 1:retval: %s", p, err); }
  return err
}

func (p *Bool_Int) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("o_value", thrift.I32, 2); err != nil {
    return fmt.Errorf("%T write field begin error 2:o_value: %s", p, err); }
  if err := oprot.WriteI32(int32(p.OValue)); err != nil {
  return fmt.Errorf("%T.o_value (2) field write error: %s", p) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return fmt.Errorf("%T write field end error 2:o_value: %s", p, err); }
  return err
}

func (p *Bool_Int) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Bool_Int(%+v)", *p)
}

type Bool_Int16 struct {
  Retval bool `thrift:"retval,1"`
  OValue int16 `thrift:"o_value,2"`
}

func NewBool_Int16() *Bool_Int16 {
  return &Bool_Int16{}
}

func (p *Bool_Int16) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return fmt.Errorf("%T read error: %s", p, err)
  }
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
case 1:
      if err := p.readField1(iprot); err != nil {
        return err
      }
case 2:
      if err := p.readField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return fmt.Errorf("%T read struct end error: %s", p, err)
  }
  return nil
}

func (p *Bool_Int16)  readField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return fmt.Errorf("error reading field 1: %s")
} else {
  p.Retval = v
}
  return nil
}

func (p *Bool_Int16)  readField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(); err != nil {
  return fmt.Errorf("error reading field 2: %s")
} else {
  p.OValue = v
}
  return nil
}

func (p *Bool_Int16) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Bool_Int16"); err != nil {
    return fmt.Errorf("%T write struct begin error: %s", p, err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return fmt.Errorf("%T write field stop error: %s", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return fmt.Errorf("%T write struct stop error: %s", err) }
  return nil
}

func (p *Bool_Int16) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("retval", thrift.BOOL, 1); err != nil {
    return fmt.Errorf("%T write field begin error 1:retval: %s", p, err); }
  if err := oprot.WriteBool(bool(p.Retval)); err != nil {
  return fmt.Errorf("%T.retval (1) field write error: %s", p) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return fmt.Errorf("%T write field end error 1:retval: %s", p, err); }
  return err
}

func (p *Bool_Int16) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("o_value", thrift.I16, 2); err != nil {
    return fmt.Errorf("%T write field begin error 2:o_value: %s", p, err); }
  if err := oprot.WriteI16(int16(p.OValue)); err != nil {
  return fmt.Errorf("%T.o_value (2) field write error: %s", p) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return fmt.Errorf("%T write field end error 2:o_value: %s", p, err); }
  return err
}

func (p *Bool_Int16) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Bool_Int16(%+v)", *p)
}

type Bool_String struct {
  Retval bool `thrift:"retval,1"`
  OValue string `thrift:"o_value,2"`
}

func NewBool_String() *Bool_String {
  return &Bool_String{}
}

func (p *Bool_String) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return fmt.Errorf("%T read error: %s", p, err)
  }
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
case 1:
      if err := p.readField1(iprot); err != nil {
        return err
      }
case 2:
      if err := p.readField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return fmt.Errorf("%T read struct end error: %s", p, err)
  }
  return nil
}

func (p *Bool_String)  readField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return fmt.Errorf("error reading field 1: %s")
} else {
  p.Retval = v
}
  return nil
}

func (p *Bool_String)  readField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return fmt.Errorf("error reading field 2: %s")
} else {
  p.OValue = v
}
  return nil
}

func (p *Bool_String) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Bool_String"); err != nil {
    return fmt.Errorf("%T write struct begin error: %s", p, err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return fmt.Errorf("%T write field stop error: %s", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return fmt.Errorf("%T write struct stop error: %s", err) }
  return nil
}

func (p *Bool_String) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("retval", thrift.BOOL, 1); err != nil {
    return fmt.Errorf("%T write field begin error 1:retval: %s", p, err); }
  if err := oprot.WriteBool(bool(p.Retval)); err != nil {
  return fmt.Errorf("%T.retval (1) field write error: %s", p) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return fmt.Errorf("%T write field end error 1:retval: %s", p, err); }
  return err
}

func (p *Bool_String) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("o_value", thrift.STRING, 2); err != nil {
    return fmt.Errorf("%T write field begin error 2:o_value: %s", p, err); }
  if err := oprot.WriteString(string(p.OValue)); err != nil {
  return fmt.Errorf("%T.o_value (2) field write error: %s", p) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return fmt.Errorf("%T write field end error 2:o_value: %s", p, err); }
  return err
}

func (p *Bool_String) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Bool_String(%+v)", *p)
}

type Bool_ListString struct {
  Retval bool `thrift:"retval,1"`
  OValue []string `thrift:"o_value,2"`
}

func NewBool_ListString() *Bool_ListString {
  return &Bool_ListString{}
}

func (p *Bool_ListString) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return fmt.Errorf("%T read error: %s", p, err)
  }
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
case 1:
      if err := p.readField1(iprot); err != nil {
        return err
      }
case 2:
      if err := p.readField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return fmt.Errorf("%T read struct end error: %s", p, err)
  }
  return nil
}

func (p *Bool_ListString)  readField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return fmt.Errorf("error reading field 1: %s")
} else {
  p.Retval = v
}
  return nil
}

func (p *Bool_ListString)  readField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return fmt.Errorf("error reading list being: %s")
  }
  p.OValue = make([]string, 0, size)
  for i := 0; i < size; i ++ {
var _elem2 string
    if v, err := iprot.ReadString(); err != nil {
    return fmt.Errorf("error reading field 0: %s")
} else {
    _elem2 = v
}
    p.OValue = append(p.OValue, _elem2)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return fmt.Errorf("error reading list end: %s")
  }
  return nil
}

func (p *Bool_ListString) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Bool_ListString"); err != nil {
    return fmt.Errorf("%T write struct begin error: %s", p, err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return fmt.Errorf("%T write field stop error: %s", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return fmt.Errorf("%T write struct stop error: %s", err) }
  return nil
}

func (p *Bool_ListString) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("retval", thrift.BOOL, 1); err != nil {
    return fmt.Errorf("%T write field begin error 1:retval: %s", p, err); }
  if err := oprot.WriteBool(bool(p.Retval)); err != nil {
  return fmt.Errorf("%T.retval (1) field write error: %s", p) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return fmt.Errorf("%T write field end error 1:retval: %s", p, err); }
  return err
}

func (p *Bool_ListString) writeField2(oprot thrift.TProtocol) (err error) {
  if p.OValue != nil {
    if err := oprot.WriteFieldBegin("o_value", thrift.LIST, 2); err != nil {
      return fmt.Errorf("%T write field begin error 2:o_value: %s", p, err); }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.OValue)); err != nil {
      return fmt.Errorf("error writing list begin: %s")
    }
    for _, v := range p.OValue {
      if err := oprot.WriteString(string(v)); err != nil {
      return fmt.Errorf("%T. (0) field write error: %s", p) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return fmt.Errorf("error writing list end: %s")
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 2:o_value: %s", p, err); }
  }
  return err
}

func (p *Bool_ListString) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Bool_ListString(%+v)", *p)
}

type ListUInt8_Byte struct {
  _value []int8 `thrift:"_value,1"`
  _length int8 `thrift:"_length,2"`
}

func NewListUInt8_Byte() *ListUInt8_Byte {
  return &ListUInt8_Byte{}
}

func (p *ListUInt8_Byte) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return fmt.Errorf("%T read error: %s", p, err)
  }
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
case 1:
      if err := p.readField1(iprot); err != nil {
        return err
      }
case 2:
      if err := p.readField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return fmt.Errorf("%T read struct end error: %s", p, err)
  }
  return nil
}

func (p *ListUInt8_Byte)  readField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return fmt.Errorf("error reading list being: %s")
  }
  p._value = make([]int8, 0, size)
  for i := 0; i < size; i ++ {
var _elem3 int8
    if v, err := iprot.ReadByte(); err != nil {
    return fmt.Errorf("error reading field 0: %s")
} else {
    _elem3 = int8(v)
}
    p._value = append(p._value, _elem3)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return fmt.Errorf("error reading list end: %s")
  }
  return nil
}

func (p *ListUInt8_Byte)  readField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(); err != nil {
  return fmt.Errorf("error reading field 2: %s")
} else {
  p._length = int8(v)
}
  return nil
}

func (p *ListUInt8_Byte) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ListUInt8_Byte"); err != nil {
    return fmt.Errorf("%T write struct begin error: %s", p, err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return fmt.Errorf("%T write field stop error: %s", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return fmt.Errorf("%T write struct stop error: %s", err) }
  return nil
}

func (p *ListUInt8_Byte) writeField1(oprot thrift.TProtocol) (err error) {
  if p._value != nil {
    if err := oprot.WriteFieldBegin("_value", thrift.LIST, 1); err != nil {
      return fmt.Errorf("%T write field begin error 1:_value: %s", p, err); }
    if err := oprot.WriteListBegin(thrift.BYTE, len(p._value)); err != nil {
      return fmt.Errorf("error writing list begin: %s")
    }
    for _, v := range p._value {
      if err := oprot.WriteByte(byte(v)); err != nil {
      return fmt.Errorf("%T. (0) field write error: %s", p) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return fmt.Errorf("error writing list end: %s")
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 1:_value: %s", p, err); }
  }
  return err
}

func (p *ListUInt8_Byte) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("_length", thrift.BYTE, 2); err != nil {
    return fmt.Errorf("%T write field begin error 2:_length: %s", p, err); }
  if err := oprot.WriteByte(byte(p._length)); err != nil {
  return fmt.Errorf("%T._length (2) field write error: %s", p) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return fmt.Errorf("%T write field end error 2:_length: %s", p, err); }
  return err
}

func (p *ListUInt8_Byte) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ListUInt8_Byte(%+v)", *p)
}

type UInt32_ListByte struct {
  Retval int32 `thrift:"retval,1"`
  _nodeNeighbors []int8 `thrift:"_nodeNeighbors,2"`
}

func NewUInt32_ListByte() *UInt32_ListByte {
  return &UInt32_ListByte{}
}

func (p *UInt32_ListByte) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return fmt.Errorf("%T read error: %s", p, err)
  }
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
case 1:
      if err := p.readField1(iprot); err != nil {
        return err
      }
case 2:
      if err := p.readField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return fmt.Errorf("%T read struct end error: %s", p, err)
  }
  return nil
}

func (p *UInt32_ListByte)  readField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return fmt.Errorf("error reading field 1: %s")
} else {
  p.Retval = v
}
  return nil
}

func (p *UInt32_ListByte)  readField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return fmt.Errorf("error reading list being: %s")
  }
  p._nodeNeighbors = make([]int8, 0, size)
  for i := 0; i < size; i ++ {
var _elem4 int8
    if v, err := iprot.ReadByte(); err != nil {
    return fmt.Errorf("error reading field 0: %s")
} else {
    _elem4 = int8(v)
}
    p._nodeNeighbors = append(p._nodeNeighbors, _elem4)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return fmt.Errorf("error reading list end: %s")
  }
  return nil
}

func (p *UInt32_ListByte) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("UInt32_ListByte"); err != nil {
    return fmt.Errorf("%T write struct begin error: %s", p, err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return fmt.Errorf("%T write field stop error: %s", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return fmt.Errorf("%T write struct stop error: %s", err) }
  return nil
}

func (p *UInt32_ListByte) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("retval", thrift.I32, 1); err != nil {
    return fmt.Errorf("%T write field begin error 1:retval: %s", p, err); }
  if err := oprot.WriteI32(int32(p.Retval)); err != nil {
  return fmt.Errorf("%T.retval (1) field write error: %s", p) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return fmt.Errorf("%T write field end error 1:retval: %s", p, err); }
  return err
}

func (p *UInt32_ListByte) writeField2(oprot thrift.TProtocol) (err error) {
  if p._nodeNeighbors != nil {
    if err := oprot.WriteFieldBegin("_nodeNeighbors", thrift.LIST, 2); err != nil {
      return fmt.Errorf("%T write field begin error 2:_nodeNeighbors: %s", p, err); }
    if err := oprot.WriteListBegin(thrift.BYTE, len(p._nodeNeighbors)); err != nil {
      return fmt.Errorf("error writing list begin: %s")
    }
    for _, v := range p._nodeNeighbors {
      if err := oprot.WriteByte(byte(v)); err != nil {
      return fmt.Errorf("%T. (0) field write error: %s", p) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return fmt.Errorf("error writing list end: %s")
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 2:_nodeNeighbors: %s", p, err); }
  }
  return err
}

func (p *UInt32_ListByte) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UInt32_ListByte(%+v)", *p)
}

type Bool_GetNodeClassInformation struct {
  Retval bool `thrift:"retval,1"`
  _className string `thrift:"_className,2"`
  _classVersion int8 `thrift:"_classVersion,3"`
}

func NewBool_GetNodeClassInformation() *Bool_GetNodeClassInformation {
  return &Bool_GetNodeClassInformation{}
}

func (p *Bool_GetNodeClassInformation) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return fmt.Errorf("%T read error: %s", p, err)
  }
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
case 1:
      if err := p.readField1(iprot); err != nil {
        return err
      }
case 2:
      if err := p.readField2(iprot); err != nil {
        return err
      }
case 3:
      if err := p.readField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return fmt.Errorf("%T read struct end error: %s", p, err)
  }
  return nil
}

func (p *Bool_GetNodeClassInformation)  readField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return fmt.Errorf("error reading field 1: %s")
} else {
  p.Retval = v
}
  return nil
}

func (p *Bool_GetNodeClassInformation)  readField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return fmt.Errorf("error reading field 2: %s")
} else {
  p._className = v
}
  return nil
}

func (p *Bool_GetNodeClassInformation)  readField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(); err != nil {
  return fmt.Errorf("error reading field 3: %s")
} else {
  p._classVersion = int8(v)
}
  return nil
}

func (p *Bool_GetNodeClassInformation) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Bool_GetNodeClassInformation"); err != nil {
    return fmt.Errorf("%T write struct begin error: %s", p, err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return fmt.Errorf("%T write field stop error: %s", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return fmt.Errorf("%T write struct stop error: %s", err) }
  return nil
}

func (p *Bool_GetNodeClassInformation) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("retval", thrift.BOOL, 1); err != nil {
    return fmt.Errorf("%T write field begin error 1:retval: %s", p, err); }
  if err := oprot.WriteBool(bool(p.Retval)); err != nil {
  return fmt.Errorf("%T.retval (1) field write error: %s", p) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return fmt.Errorf("%T write field end error 1:retval: %s", p, err); }
  return err
}

func (p *Bool_GetNodeClassInformation) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("_className", thrift.STRING, 2); err != nil {
    return fmt.Errorf("%T write field begin error 2:_className: %s", p, err); }
  if err := oprot.WriteString(string(p._className)); err != nil {
  return fmt.Errorf("%T._className (2) field write error: %s", p) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return fmt.Errorf("%T write field end error 2:_className: %s", p, err); }
  return err
}

func (p *Bool_GetNodeClassInformation) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("_classVersion", thrift.BYTE, 3); err != nil {
    return fmt.Errorf("%T write field begin error 3:_classVersion: %s", p, err); }
  if err := oprot.WriteByte(byte(p._classVersion)); err != nil {
  return fmt.Errorf("%T._classVersion (3) field write error: %s", p) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return fmt.Errorf("%T write field end error 3:_classVersion: %s", p, err); }
  return err
}

func (p *Bool_GetNodeClassInformation) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Bool_GetNodeClassInformation(%+v)", *p)
}

type GetAssociationsReturnStruct struct {
  Retval int32 `thrift:"retval,1"`
  OAssociations []int8 `thrift:"o_associations,2"`
}

func NewGetAssociationsReturnStruct() *GetAssociationsReturnStruct {
  return &GetAssociationsReturnStruct{}
}

func (p *GetAssociationsReturnStruct) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return fmt.Errorf("%T read error: %s", p, err)
  }
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
case 1:
      if err := p.readField1(iprot); err != nil {
        return err
      }
case 2:
      if err := p.readField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return fmt.Errorf("%T read struct end error: %s", p, err)
  }
  return nil
}

func (p *GetAssociationsReturnStruct)  readField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return fmt.Errorf("error reading field 1: %s")
} else {
  p.Retval = v
}
  return nil
}

func (p *GetAssociationsReturnStruct)  readField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return fmt.Errorf("error reading list being: %s")
  }
  p.OAssociations = make([]int8, 0, size)
  for i := 0; i < size; i ++ {
var _elem5 int8
    if v, err := iprot.ReadByte(); err != nil {
    return fmt.Errorf("error reading field 0: %s")
} else {
    _elem5 = int8(v)
}
    p.OAssociations = append(p.OAssociations, _elem5)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return fmt.Errorf("error reading list end: %s")
  }
  return nil
}

func (p *GetAssociationsReturnStruct) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetAssociationsReturnStruct"); err != nil {
    return fmt.Errorf("%T write struct begin error: %s", p, err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return fmt.Errorf("%T write field stop error: %s", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return fmt.Errorf("%T write struct stop error: %s", err) }
  return nil
}

func (p *GetAssociationsReturnStruct) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("retval", thrift.I32, 1); err != nil {
    return fmt.Errorf("%T write field begin error 1:retval: %s", p, err); }
  if err := oprot.WriteI32(int32(p.Retval)); err != nil {
  return fmt.Errorf("%T.retval (1) field write error: %s", p) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return fmt.Errorf("%T write field end error 1:retval: %s", p, err); }
  return err
}

func (p *GetAssociationsReturnStruct) writeField2(oprot thrift.TProtocol) (err error) {
  if p.OAssociations != nil {
    if err := oprot.WriteFieldBegin("o_associations", thrift.LIST, 2); err != nil {
      return fmt.Errorf("%T write field begin error 2:o_associations: %s", p, err); }
    if err := oprot.WriteListBegin(thrift.BYTE, len(p.OAssociations)); err != nil {
      return fmt.Errorf("error writing list begin: %s")
    }
    for _, v := range p.OAssociations {
      if err := oprot.WriteByte(byte(v)); err != nil {
      return fmt.Errorf("%T. (0) field write error: %s", p) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return fmt.Errorf("error writing list end: %s")
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 2:o_associations: %s", p, err); }
  }
  return err
}

func (p *GetAssociationsReturnStruct) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetAssociationsReturnStruct(%+v)", *p)
}

type GetAllScenesReturnStruct struct {
  Retval int8 `thrift:"retval,1"`
  _sceneIds []int8 `thrift:"_sceneIds,2"`
}

func NewGetAllScenesReturnStruct() *GetAllScenesReturnStruct {
  return &GetAllScenesReturnStruct{}
}

func (p *GetAllScenesReturnStruct) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return fmt.Errorf("%T read error: %s", p, err)
  }
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
case 1:
      if err := p.readField1(iprot); err != nil {
        return err
      }
case 2:
      if err := p.readField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return fmt.Errorf("%T read struct end error: %s", p, err)
  }
  return nil
}

func (p *GetAllScenesReturnStruct)  readField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(); err != nil {
  return fmt.Errorf("error reading field 1: %s")
} else {
  p.Retval = int8(v)
}
  return nil
}

func (p *GetAllScenesReturnStruct)  readField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return fmt.Errorf("error reading list being: %s")
  }
  p._sceneIds = make([]int8, 0, size)
  for i := 0; i < size; i ++ {
var _elem6 int8
    if v, err := iprot.ReadByte(); err != nil {
    return fmt.Errorf("error reading field 0: %s")
} else {
    _elem6 = int8(v)
}
    p._sceneIds = append(p._sceneIds, _elem6)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return fmt.Errorf("error reading list end: %s")
  }
  return nil
}

func (p *GetAllScenesReturnStruct) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetAllScenesReturnStruct"); err != nil {
    return fmt.Errorf("%T write struct begin error: %s", p, err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return fmt.Errorf("%T write field stop error: %s", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return fmt.Errorf("%T write struct stop error: %s", err) }
  return nil
}

func (p *GetAllScenesReturnStruct) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("retval", thrift.BYTE, 1); err != nil {
    return fmt.Errorf("%T write field begin error 1:retval: %s", p, err); }
  if err := oprot.WriteByte(byte(p.Retval)); err != nil {
  return fmt.Errorf("%T.retval (1) field write error: %s", p) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return fmt.Errorf("%T write field end error 1:retval: %s", p, err); }
  return err
}

func (p *GetAllScenesReturnStruct) writeField2(oprot thrift.TProtocol) (err error) {
  if p._sceneIds != nil {
    if err := oprot.WriteFieldBegin("_sceneIds", thrift.LIST, 2); err != nil {
      return fmt.Errorf("%T write field begin error 2:_sceneIds: %s", p, err); }
    if err := oprot.WriteListBegin(thrift.BYTE, len(p._sceneIds)); err != nil {
      return fmt.Errorf("error writing list begin: %s")
    }
    for _, v := range p._sceneIds {
      if err := oprot.WriteByte(byte(v)); err != nil {
      return fmt.Errorf("%T. (0) field write error: %s", p) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return fmt.Errorf("error writing list end: %s")
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 2:_sceneIds: %s", p, err); }
  }
  return err
}

func (p *GetAllScenesReturnStruct) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetAllScenesReturnStruct(%+v)", *p)
}

type SceneGetValuesReturnStruct struct {
  Retval int32 `thrift:"retval,1"`
  OValue []*RemoteValueID `thrift:"o_value,2"`
}

func NewSceneGetValuesReturnStruct() *SceneGetValuesReturnStruct {
  return &SceneGetValuesReturnStruct{}
}

func (p *SceneGetValuesReturnStruct) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return fmt.Errorf("%T read error: %s", p, err)
  }
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
case 1:
      if err := p.readField1(iprot); err != nil {
        return err
      }
case 2:
      if err := p.readField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return fmt.Errorf("%T read struct end error: %s", p, err)
  }
  return nil
}

func (p *SceneGetValuesReturnStruct)  readField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return fmt.Errorf("error reading field 1: %s")
} else {
  p.Retval = v
}
  return nil
}

func (p *SceneGetValuesReturnStruct)  readField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return fmt.Errorf("error reading list being: %s")
  }
  p.OValue = make([]*RemoteValueID, 0, size)
  for i := 0; i < size; i ++ {
    _elem7 := NewRemoteValueID()
    if err := _elem7.Read(iprot); err != nil {
      return fmt.Errorf("%T error reading struct: %s", _elem7)
    }
    p.OValue = append(p.OValue, _elem7)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return fmt.Errorf("error reading list end: %s")
  }
  return nil
}

func (p *SceneGetValuesReturnStruct) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SceneGetValuesReturnStruct"); err != nil {
    return fmt.Errorf("%T write struct begin error: %s", p, err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return fmt.Errorf("%T write field stop error: %s", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return fmt.Errorf("%T write struct stop error: %s", err) }
  return nil
}

func (p *SceneGetValuesReturnStruct) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("retval", thrift.I32, 1); err != nil {
    return fmt.Errorf("%T write field begin error 1:retval: %s", p, err); }
  if err := oprot.WriteI32(int32(p.Retval)); err != nil {
  return fmt.Errorf("%T.retval (1) field write error: %s", p) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return fmt.Errorf("%T write field end error 1:retval: %s", p, err); }
  return err
}

func (p *SceneGetValuesReturnStruct) writeField2(oprot thrift.TProtocol) (err error) {
  if p.OValue != nil {
    if err := oprot.WriteFieldBegin("o_value", thrift.LIST, 2); err != nil {
      return fmt.Errorf("%T write field begin error 2:o_value: %s", p, err); }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.OValue)); err != nil {
      return fmt.Errorf("error writing list begin: %s")
    }
    for _, v := range p.OValue {
      if err := v.Write(oprot); err != nil {
        return fmt.Errorf("%T error writing struct: %s", v)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return fmt.Errorf("error writing list end: %s")
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 2:o_value: %s", p, err); }
  }
  return err
}

func (p *SceneGetValuesReturnStruct) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SceneGetValuesReturnStruct(%+v)", *p)
}

