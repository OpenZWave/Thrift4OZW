/* Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package OpenZWave;

import (
        "thrift"
        "fmt"
)



type RemoteValueGenre int
const (
  ValueGenre_Basic RemoteValueGenre = 0
  ValueGenre_User RemoteValueGenre = 1
  ValueGenre_Config RemoteValueGenre = 2
  ValueGenre_System RemoteValueGenre = 3
  ValueGenre_Count RemoteValueGenre = 4
)
func (p RemoteValueGenre) String() string {
  switch p {
  case ValueGenre_Basic: return "ValueGenre_Basic"
  case ValueGenre_User: return "ValueGenre_User"
  case ValueGenre_Config: return "ValueGenre_Config"
  case ValueGenre_System: return "ValueGenre_System"
  case ValueGenre_Count: return "ValueGenre_Count"
  }
  return ""
}

func FromRemoteValueGenreString(s string) RemoteValueGenre {
  switch s {
  case "ValueGenre_Basic": return ValueGenre_Basic
  case "ValueGenre_User": return ValueGenre_User
  case "ValueGenre_Config": return ValueGenre_Config
  case "ValueGenre_System": return ValueGenre_System
  case "ValueGenre_Count": return ValueGenre_Count
  }
  return RemoteValueGenre(-10000)
}

func (p RemoteValueGenre) Value() int {
  return int(p)
}

func (p RemoteValueGenre) IsEnum() bool {
  return true
}

type RemoteValueType int
const (
  ValueType_Bool RemoteValueType = 0
  ValueType_Byte RemoteValueType = 1
  ValueType_Decimal RemoteValueType = 2
  ValueType_Int RemoteValueType = 3
  ValueType_List RemoteValueType = 4
  ValueType_Schedule RemoteValueType = 5
  ValueType_Short RemoteValueType = 6
  ValueType_String RemoteValueType = 7
  ValueType_Button RemoteValueType = 8
  ValueType_Max RemoteValueType = 8
)
func (p RemoteValueType) String() string {
  switch p {
  case ValueType_Bool: return "ValueType_Bool"
  case ValueType_Byte: return "ValueType_Byte"
  case ValueType_Decimal: return "ValueType_Decimal"
  case ValueType_Int: return "ValueType_Int"
  case ValueType_List: return "ValueType_List"
  case ValueType_Schedule: return "ValueType_Schedule"
  case ValueType_Short: return "ValueType_Short"
  case ValueType_String: return "ValueType_String"
  case ValueType_Button: return "ValueType_Button"
  case ValueType_Max: return "ValueType_Max"
  }
  return ""
}

func FromRemoteValueTypeString(s string) RemoteValueType {
  switch s {
  case "ValueType_Bool": return ValueType_Bool
  case "ValueType_Byte": return ValueType_Byte
  case "ValueType_Decimal": return ValueType_Decimal
  case "ValueType_Int": return ValueType_Int
  case "ValueType_List": return ValueType_List
  case "ValueType_Schedule": return ValueType_Schedule
  case "ValueType_Short": return ValueType_Short
  case "ValueType_String": return ValueType_String
  case "ValueType_Button": return ValueType_Button
  case "ValueType_Max": return ValueType_Max
  }
  return RemoteValueType(-10000)
}

func (p RemoteValueType) Value() int {
  return int(p)
}

func (p RemoteValueType) IsEnum() bool {
  return true
}

/**
 * Attributes:
 *  - _homeId
 *  - _nodeId
 *  - _genre
 *  - _commandClassId
 *  - _instance
 *  - _valueIndex
 *  - _type
 */
type RemoteValueID struct {
  thrift.TStruct
  _homeId int32 "_homeId"; // 1
  _nodeId byte "_nodeId"; // 2
  _genre RemoteValueGenre "_genre"; // 3
  _commandClassId byte "_commandClassId"; // 4
  _instance byte "_instance"; // 5
  _valueIndex byte "_valueIndex"; // 6
  _type RemoteValueType "_type"; // 7
}

func NewRemoteValueID() *RemoteValueID {
  output := &RemoteValueID{
    TStruct:thrift.NewTStruct("RemoteValueID", []thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    thrift.NewTField("_genre", thrift.I32, 3),
    thrift.NewTField("_commandClassId", thrift.BYTE, 4),
    thrift.NewTField("_instance", thrift.BYTE, 5),
    thrift.NewTField("_valueIndex", thrift.BYTE, 6),
    thrift.NewTField("_type", thrift.I32, 7),
    }),
  }
  {
  }
  return output
}

func (p *RemoteValueID) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_homeId" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_nodeId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "_genre" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 4 || fieldName == "_commandClassId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 5 || fieldName == "_instance" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField5(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField5(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 6 || fieldName == "_valueIndex" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField6(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField6(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 7 || fieldName == "_type" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField7(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField7(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *RemoteValueID) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v0, err1 := iprot.ReadI32()
  if err1 != nil { return thrift.NewTProtocolExceptionReadField(1, "_homeId", p.ThriftName(), err1); }
  p._homeId = v0
  return err
}

func (p *RemoteValueID) ReadField_homeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *RemoteValueID) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v2, err3 := iprot.ReadByte()
  if err3 != nil { return thrift.NewTProtocolExceptionReadField(2, "_nodeId", p.ThriftName(), err3); }
  p._nodeId = v2
  return err
}

func (p *RemoteValueID) ReadField_nodeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *RemoteValueID) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v4, err5 := iprot.ReadI32()
  if err5 != nil { return thrift.NewTProtocolExceptionReadField(3, "_genre", p.ThriftName(), err5); }
  p._genre = RemoteValueGenre(v4)
  return err
}

func (p *RemoteValueID) ReadField_genre(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *RemoteValueID) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v6, err7 := iprot.ReadByte()
  if err7 != nil { return thrift.NewTProtocolExceptionReadField(4, "_commandClassId", p.ThriftName(), err7); }
  p._commandClassId = v6
  return err
}

func (p *RemoteValueID) ReadField_commandClassId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField4(iprot)
}

func (p *RemoteValueID) ReadField5(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v8, err9 := iprot.ReadByte()
  if err9 != nil { return thrift.NewTProtocolExceptionReadField(5, "_instance", p.ThriftName(), err9); }
  p._instance = v8
  return err
}

func (p *RemoteValueID) ReadField_instance(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField5(iprot)
}

func (p *RemoteValueID) ReadField6(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v10, err11 := iprot.ReadByte()
  if err11 != nil { return thrift.NewTProtocolExceptionReadField(6, "_valueIndex", p.ThriftName(), err11); }
  p._valueIndex = v10
  return err
}

func (p *RemoteValueID) ReadField_valueIndex(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField6(iprot)
}

func (p *RemoteValueID) ReadField7(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v12, err13 := iprot.ReadI32()
  if err13 != nil { return thrift.NewTProtocolExceptionReadField(7, "_type", p.ThriftName(), err13); }
  p._type = RemoteValueType(v12)
  return err
}

func (p *RemoteValueID) ReadField_type(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField7(iprot)
}

func (p *RemoteValueID) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("RemoteValueID")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = p.WriteField4(oprot)
  if err != nil { return err }
  err = p.WriteField5(oprot)
  if err != nil { return err }
  err = p.WriteField6(oprot)
  if err != nil { return err }
  err = p.WriteField7(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *RemoteValueID) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_homeId", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._homeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  return err
}

func (p *RemoteValueID) WriteField_homeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *RemoteValueID) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_nodeId", thrift.BYTE, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._nodeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  return err
}

func (p *RemoteValueID) WriteField_nodeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *RemoteValueID) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_genre", thrift.I32, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_genre", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._genre))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_genre", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_genre", p.ThriftName(), err); }
  return err
}

func (p *RemoteValueID) WriteField_genre(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *RemoteValueID) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_commandClassId", thrift.BYTE, 4)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "_commandClassId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._commandClassId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "_commandClassId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "_commandClassId", p.ThriftName(), err); }
  return err
}

func (p *RemoteValueID) WriteField_commandClassId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField4(oprot)
}

func (p *RemoteValueID) WriteField5(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_instance", thrift.BYTE, 5)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "_instance", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._instance))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "_instance", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "_instance", p.ThriftName(), err); }
  return err
}

func (p *RemoteValueID) WriteField_instance(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField5(oprot)
}

func (p *RemoteValueID) WriteField6(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_valueIndex", thrift.BYTE, 6)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(6, "_valueIndex", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._valueIndex))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(6, "_valueIndex", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(6, "_valueIndex", p.ThriftName(), err); }
  return err
}

func (p *RemoteValueID) WriteField_valueIndex(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField6(oprot)
}

func (p *RemoteValueID) WriteField7(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_type", thrift.I32, 7)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(7, "_type", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._type))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(7, "_type", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(7, "_type", p.ThriftName(), err); }
  return err
}

func (p *RemoteValueID) WriteField_type(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField7(oprot)
}

func (p *RemoteValueID) TStructName() string {
  return "RemoteValueID"
}

func (p *RemoteValueID) ThriftName() string {
  return "RemoteValueID"
}

func (p *RemoteValueID) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RemoteValueID(%+v)", *p)
}

func (p *RemoteValueID) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*RemoteValueID)
  if !ok {
    return 0, false
  }
  if p._homeId != data._homeId {
    if p._homeId < data._homeId {
      return -1, true
    }
    return 1, true
  }
  if p._nodeId != data._nodeId {
    if p._nodeId < data._nodeId {
      return -1, true
    }
    return 1, true
  }
  if p._genre != data._genre {
    if p._genre < data._genre {
      return -1, true
    }
    return 1, true
  }
  if p._commandClassId != data._commandClassId {
    if p._commandClassId < data._commandClassId {
      return -1, true
    }
    return 1, true
  }
  if p._instance != data._instance {
    if p._instance < data._instance {
      return -1, true
    }
    return 1, true
  }
  if p._valueIndex != data._valueIndex {
    if p._valueIndex < data._valueIndex {
      return -1, true
    }
    return 1, true
  }
  if p._type != data._type {
    if p._type < data._type {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *RemoteValueID) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._homeId
  case 2: return p._nodeId
  case 3: return p._genre
  case 4: return p._commandClassId
  case 5: return p._instance
  case 6: return p._valueIndex
  case 7: return p._type
  }
  return nil
}

func (p *RemoteValueID) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    thrift.NewTField("_genre", thrift.I32, 3),
    thrift.NewTField("_commandClassId", thrift.BYTE, 4),
    thrift.NewTField("_instance", thrift.BYTE, 5),
    thrift.NewTField("_valueIndex", thrift.BYTE, 6),
    thrift.NewTField("_type", thrift.I32, 7),
    })
}

/**
 * Attributes:
 *  - Retval
 *  - OHours
 *  - OMinutes
 *  - OSetback
 */
type GetSwitchPointReturnStruct struct {
  thrift.TStruct
  Retval bool "retval"; // 1
  OHours byte "o_hours"; // 2
  OMinutes byte "o_minutes"; // 3
  OSetback byte "o_setback"; // 4
}

func NewGetSwitchPointReturnStruct() *GetSwitchPointReturnStruct {
  output := &GetSwitchPointReturnStruct{
    TStruct:thrift.NewTStruct("GetSwitchPointReturnStruct", []thrift.TField{
    thrift.NewTField("retval", thrift.BOOL, 1),
    thrift.NewTField("o_hours", thrift.BYTE, 2),
    thrift.NewTField("o_minutes", thrift.BYTE, 3),
    thrift.NewTField("o_setback", thrift.BYTE, 4),
    }),
  }
  {
  }
  return output
}

func (p *GetSwitchPointReturnStruct) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "retval" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "o_hours" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "o_minutes" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 4 || fieldName == "o_setback" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetSwitchPointReturnStruct) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v14, err15 := iprot.ReadBool()
  if err15 != nil { return thrift.NewTProtocolExceptionReadField(1, "retval", p.ThriftName(), err15); }
  p.Retval = v14
  return err
}

func (p *GetSwitchPointReturnStruct) ReadFieldRetval(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetSwitchPointReturnStruct) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v16, err17 := iprot.ReadByte()
  if err17 != nil { return thrift.NewTProtocolExceptionReadField(2, "o_hours", p.ThriftName(), err17); }
  p.OHours = v16
  return err
}

func (p *GetSwitchPointReturnStruct) ReadFieldOHours(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *GetSwitchPointReturnStruct) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v18, err19 := iprot.ReadByte()
  if err19 != nil { return thrift.NewTProtocolExceptionReadField(3, "o_minutes", p.ThriftName(), err19); }
  p.OMinutes = v18
  return err
}

func (p *GetSwitchPointReturnStruct) ReadFieldOMinutes(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *GetSwitchPointReturnStruct) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v20, err21 := iprot.ReadByte()
  if err21 != nil { return thrift.NewTProtocolExceptionReadField(4, "o_setback", p.ThriftName(), err21); }
  p.OSetback = v20
  return err
}

func (p *GetSwitchPointReturnStruct) ReadFieldOSetback(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField4(iprot)
}

func (p *GetSwitchPointReturnStruct) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetSwitchPointReturnStruct")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = p.WriteField4(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetSwitchPointReturnStruct) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("retval", thrift.BOOL, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "retval", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Retval))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "retval", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "retval", p.ThriftName(), err); }
  return err
}

func (p *GetSwitchPointReturnStruct) WriteFieldRetval(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetSwitchPointReturnStruct) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("o_hours", thrift.BYTE, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "o_hours", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p.OHours))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "o_hours", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "o_hours", p.ThriftName(), err); }
  return err
}

func (p *GetSwitchPointReturnStruct) WriteFieldOHours(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *GetSwitchPointReturnStruct) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("o_minutes", thrift.BYTE, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "o_minutes", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p.OMinutes))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "o_minutes", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "o_minutes", p.ThriftName(), err); }
  return err
}

func (p *GetSwitchPointReturnStruct) WriteFieldOMinutes(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *GetSwitchPointReturnStruct) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("o_setback", thrift.BYTE, 4)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "o_setback", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p.OSetback))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "o_setback", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "o_setback", p.ThriftName(), err); }
  return err
}

func (p *GetSwitchPointReturnStruct) WriteFieldOSetback(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField4(oprot)
}

func (p *GetSwitchPointReturnStruct) TStructName() string {
  return "GetSwitchPointReturnStruct"
}

func (p *GetSwitchPointReturnStruct) ThriftName() string {
  return "GetSwitchPointReturnStruct"
}

func (p *GetSwitchPointReturnStruct) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetSwitchPointReturnStruct(%+v)", *p)
}

func (p *GetSwitchPointReturnStruct) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetSwitchPointReturnStruct)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Retval, data.Retval); cmp != 0 {
    return cmp, true
  }
  if p.OHours != data.OHours {
    if p.OHours < data.OHours {
      return -1, true
    }
    return 1, true
  }
  if p.OMinutes != data.OMinutes {
    if p.OMinutes < data.OMinutes {
      return -1, true
    }
    return 1, true
  }
  if p.OSetback != data.OSetback {
    if p.OSetback < data.OSetback {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetSwitchPointReturnStruct) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Retval
  case 2: return p.OHours
  case 3: return p.OMinutes
  case 4: return p.OSetback
  }
  return nil
}

func (p *GetSwitchPointReturnStruct) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("retval", thrift.BOOL, 1),
    thrift.NewTField("o_hours", thrift.BYTE, 2),
    thrift.NewTField("o_minutes", thrift.BYTE, 3),
    thrift.NewTField("o_setback", thrift.BYTE, 4),
    })
}

/**
 * Attributes:
 *  - Retval
 *  - OValue
 */
type BoolBool struct {
  thrift.TStruct
  Retval bool "retval"; // 1
  OValue bool "o_value"; // 2
}

func NewBoolBool() *BoolBool {
  output := &BoolBool{
    TStruct:thrift.NewTStruct("Bool_Bool", []thrift.TField{
    thrift.NewTField("retval", thrift.BOOL, 1),
    thrift.NewTField("o_value", thrift.BOOL, 2),
    }),
  }
  {
  }
  return output
}

func (p *BoolBool) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "retval" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "o_value" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *BoolBool) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v22, err23 := iprot.ReadBool()
  if err23 != nil { return thrift.NewTProtocolExceptionReadField(1, "retval", p.ThriftName(), err23); }
  p.Retval = v22
  return err
}

func (p *BoolBool) ReadFieldRetval(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *BoolBool) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v24, err25 := iprot.ReadBool()
  if err25 != nil { return thrift.NewTProtocolExceptionReadField(2, "o_value", p.ThriftName(), err25); }
  p.OValue = v24
  return err
}

func (p *BoolBool) ReadFieldOValue(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *BoolBool) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("Bool_Bool")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *BoolBool) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("retval", thrift.BOOL, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "retval", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Retval))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "retval", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "retval", p.ThriftName(), err); }
  return err
}

func (p *BoolBool) WriteFieldRetval(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *BoolBool) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("o_value", thrift.BOOL, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "o_value", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.OValue))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "o_value", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "o_value", p.ThriftName(), err); }
  return err
}

func (p *BoolBool) WriteFieldOValue(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *BoolBool) TStructName() string {
  return "BoolBool"
}

func (p *BoolBool) ThriftName() string {
  return "Bool_Bool"
}

func (p *BoolBool) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoolBool(%+v)", *p)
}

func (p *BoolBool) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*BoolBool)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Retval, data.Retval); cmp != 0 {
    return cmp, true
  }
  if cmp := thrift.CompareBool(p.OValue, data.OValue); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *BoolBool) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Retval
  case 2: return p.OValue
  }
  return nil
}

func (p *BoolBool) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("retval", thrift.BOOL, 1),
    thrift.NewTField("o_value", thrift.BOOL, 2),
    })
}

/**
 * Attributes:
 *  - Retval
 *  - OValue
 */
type BoolUInt8 struct {
  thrift.TStruct
  Retval bool "retval"; // 1
  OValue byte "o_value"; // 2
}

func NewBoolUInt8() *BoolUInt8 {
  output := &BoolUInt8{
    TStruct:thrift.NewTStruct("Bool_UInt8", []thrift.TField{
    thrift.NewTField("retval", thrift.BOOL, 1),
    thrift.NewTField("o_value", thrift.BYTE, 2),
    }),
  }
  {
  }
  return output
}

func (p *BoolUInt8) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "retval" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "o_value" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *BoolUInt8) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v26, err27 := iprot.ReadBool()
  if err27 != nil { return thrift.NewTProtocolExceptionReadField(1, "retval", p.ThriftName(), err27); }
  p.Retval = v26
  return err
}

func (p *BoolUInt8) ReadFieldRetval(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *BoolUInt8) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v28, err29 := iprot.ReadByte()
  if err29 != nil { return thrift.NewTProtocolExceptionReadField(2, "o_value", p.ThriftName(), err29); }
  p.OValue = v28
  return err
}

func (p *BoolUInt8) ReadFieldOValue(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *BoolUInt8) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("Bool_UInt8")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *BoolUInt8) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("retval", thrift.BOOL, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "retval", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Retval))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "retval", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "retval", p.ThriftName(), err); }
  return err
}

func (p *BoolUInt8) WriteFieldRetval(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *BoolUInt8) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("o_value", thrift.BYTE, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "o_value", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p.OValue))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "o_value", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "o_value", p.ThriftName(), err); }
  return err
}

func (p *BoolUInt8) WriteFieldOValue(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *BoolUInt8) TStructName() string {
  return "BoolUInt8"
}

func (p *BoolUInt8) ThriftName() string {
  return "Bool_UInt8"
}

func (p *BoolUInt8) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoolUInt8(%+v)", *p)
}

func (p *BoolUInt8) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*BoolUInt8)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Retval, data.Retval); cmp != 0 {
    return cmp, true
  }
  if p.OValue != data.OValue {
    if p.OValue < data.OValue {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *BoolUInt8) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Retval
  case 2: return p.OValue
  }
  return nil
}

func (p *BoolUInt8) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("retval", thrift.BOOL, 1),
    thrift.NewTField("o_value", thrift.BYTE, 2),
    })
}

/**
 * Attributes:
 *  - Retval
 *  - OValue
 */
type BoolFloat struct {
  thrift.TStruct
  Retval bool "retval"; // 1
  OValue float64 "o_value"; // 2
}

func NewBoolFloat() *BoolFloat {
  output := &BoolFloat{
    TStruct:thrift.NewTStruct("Bool_Float", []thrift.TField{
    thrift.NewTField("retval", thrift.BOOL, 1),
    thrift.NewTField("o_value", thrift.DOUBLE, 2),
    }),
  }
  {
  }
  return output
}

func (p *BoolFloat) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "retval" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "o_value" {
      if fieldTypeId == thrift.DOUBLE {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *BoolFloat) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v30, err31 := iprot.ReadBool()
  if err31 != nil { return thrift.NewTProtocolExceptionReadField(1, "retval", p.ThriftName(), err31); }
  p.Retval = v30
  return err
}

func (p *BoolFloat) ReadFieldRetval(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *BoolFloat) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v32, err33 := iprot.ReadDouble()
  if err33 != nil { return thrift.NewTProtocolExceptionReadField(2, "o_value", p.ThriftName(), err33); }
  p.OValue = v32
  return err
}

func (p *BoolFloat) ReadFieldOValue(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *BoolFloat) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("Bool_Float")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *BoolFloat) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("retval", thrift.BOOL, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "retval", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Retval))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "retval", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "retval", p.ThriftName(), err); }
  return err
}

func (p *BoolFloat) WriteFieldRetval(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *BoolFloat) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("o_value", thrift.DOUBLE, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "o_value", p.ThriftName(), err); }
  err = oprot.WriteDouble(float64(p.OValue))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "o_value", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "o_value", p.ThriftName(), err); }
  return err
}

func (p *BoolFloat) WriteFieldOValue(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *BoolFloat) TStructName() string {
  return "BoolFloat"
}

func (p *BoolFloat) ThriftName() string {
  return "Bool_Float"
}

func (p *BoolFloat) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoolFloat(%+v)", *p)
}

func (p *BoolFloat) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*BoolFloat)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Retval, data.Retval); cmp != 0 {
    return cmp, true
  }
  if p.OValue != data.OValue {
    if p.OValue < data.OValue {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *BoolFloat) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Retval
  case 2: return p.OValue
  }
  return nil
}

func (p *BoolFloat) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("retval", thrift.BOOL, 1),
    thrift.NewTField("o_value", thrift.DOUBLE, 2),
    })
}

/**
 * Attributes:
 *  - Retval
 *  - OValue
 */
type BoolInt struct {
  thrift.TStruct
  Retval bool "retval"; // 1
  OValue int32 "o_value"; // 2
}

func NewBoolInt() *BoolInt {
  output := &BoolInt{
    TStruct:thrift.NewTStruct("Bool_Int", []thrift.TField{
    thrift.NewTField("retval", thrift.BOOL, 1),
    thrift.NewTField("o_value", thrift.I32, 2),
    }),
  }
  {
  }
  return output
}

func (p *BoolInt) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "retval" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "o_value" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *BoolInt) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v34, err35 := iprot.ReadBool()
  if err35 != nil { return thrift.NewTProtocolExceptionReadField(1, "retval", p.ThriftName(), err35); }
  p.Retval = v34
  return err
}

func (p *BoolInt) ReadFieldRetval(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *BoolInt) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v36, err37 := iprot.ReadI32()
  if err37 != nil { return thrift.NewTProtocolExceptionReadField(2, "o_value", p.ThriftName(), err37); }
  p.OValue = v36
  return err
}

func (p *BoolInt) ReadFieldOValue(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *BoolInt) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("Bool_Int")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *BoolInt) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("retval", thrift.BOOL, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "retval", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Retval))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "retval", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "retval", p.ThriftName(), err); }
  return err
}

func (p *BoolInt) WriteFieldRetval(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *BoolInt) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("o_value", thrift.I32, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "o_value", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.OValue))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "o_value", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "o_value", p.ThriftName(), err); }
  return err
}

func (p *BoolInt) WriteFieldOValue(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *BoolInt) TStructName() string {
  return "BoolInt"
}

func (p *BoolInt) ThriftName() string {
  return "Bool_Int"
}

func (p *BoolInt) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoolInt(%+v)", *p)
}

func (p *BoolInt) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*BoolInt)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Retval, data.Retval); cmp != 0 {
    return cmp, true
  }
  if p.OValue != data.OValue {
    if p.OValue < data.OValue {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *BoolInt) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Retval
  case 2: return p.OValue
  }
  return nil
}

func (p *BoolInt) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("retval", thrift.BOOL, 1),
    thrift.NewTField("o_value", thrift.I32, 2),
    })
}

/**
 * Attributes:
 *  - Retval
 *  - OValue
 */
type BoolInt16 struct {
  thrift.TStruct
  Retval bool "retval"; // 1
  OValue int16 "o_value"; // 2
}

func NewBoolInt16() *BoolInt16 {
  output := &BoolInt16{
    TStruct:thrift.NewTStruct("Bool_Int16", []thrift.TField{
    thrift.NewTField("retval", thrift.BOOL, 1),
    thrift.NewTField("o_value", thrift.I16, 2),
    }),
  }
  {
  }
  return output
}

func (p *BoolInt16) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "retval" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "o_value" {
      if fieldTypeId == thrift.I16 {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *BoolInt16) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v38, err39 := iprot.ReadBool()
  if err39 != nil { return thrift.NewTProtocolExceptionReadField(1, "retval", p.ThriftName(), err39); }
  p.Retval = v38
  return err
}

func (p *BoolInt16) ReadFieldRetval(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *BoolInt16) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v40, err41 := iprot.ReadI16()
  if err41 != nil { return thrift.NewTProtocolExceptionReadField(2, "o_value", p.ThriftName(), err41); }
  p.OValue = v40
  return err
}

func (p *BoolInt16) ReadFieldOValue(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *BoolInt16) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("Bool_Int16")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *BoolInt16) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("retval", thrift.BOOL, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "retval", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Retval))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "retval", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "retval", p.ThriftName(), err); }
  return err
}

func (p *BoolInt16) WriteFieldRetval(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *BoolInt16) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("o_value", thrift.I16, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "o_value", p.ThriftName(), err); }
  err = oprot.WriteI16(int16(p.OValue))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "o_value", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "o_value", p.ThriftName(), err); }
  return err
}

func (p *BoolInt16) WriteFieldOValue(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *BoolInt16) TStructName() string {
  return "BoolInt16"
}

func (p *BoolInt16) ThriftName() string {
  return "Bool_Int16"
}

func (p *BoolInt16) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoolInt16(%+v)", *p)
}

func (p *BoolInt16) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*BoolInt16)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Retval, data.Retval); cmp != 0 {
    return cmp, true
  }
  if p.OValue != data.OValue {
    if p.OValue < data.OValue {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *BoolInt16) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Retval
  case 2: return p.OValue
  }
  return nil
}

func (p *BoolInt16) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("retval", thrift.BOOL, 1),
    thrift.NewTField("o_value", thrift.I16, 2),
    })
}

/**
 * Attributes:
 *  - Retval
 *  - OValue
 */
type BoolString struct {
  thrift.TStruct
  Retval bool "retval"; // 1
  OValue string "o_value"; // 2
}

func NewBoolString() *BoolString {
  output := &BoolString{
    TStruct:thrift.NewTStruct("Bool_String", []thrift.TField{
    thrift.NewTField("retval", thrift.BOOL, 1),
    thrift.NewTField("o_value", thrift.STRING, 2),
    }),
  }
  {
  }
  return output
}

func (p *BoolString) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "retval" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "o_value" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *BoolString) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v42, err43 := iprot.ReadBool()
  if err43 != nil { return thrift.NewTProtocolExceptionReadField(1, "retval", p.ThriftName(), err43); }
  p.Retval = v42
  return err
}

func (p *BoolString) ReadFieldRetval(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *BoolString) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v44, err45 := iprot.ReadString()
  if err45 != nil { return thrift.NewTProtocolExceptionReadField(2, "o_value", p.ThriftName(), err45); }
  p.OValue = v44
  return err
}

func (p *BoolString) ReadFieldOValue(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *BoolString) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("Bool_String")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *BoolString) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("retval", thrift.BOOL, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "retval", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Retval))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "retval", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "retval", p.ThriftName(), err); }
  return err
}

func (p *BoolString) WriteFieldRetval(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *BoolString) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("o_value", thrift.STRING, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "o_value", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.OValue))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "o_value", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "o_value", p.ThriftName(), err); }
  return err
}

func (p *BoolString) WriteFieldOValue(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *BoolString) TStructName() string {
  return "BoolString"
}

func (p *BoolString) ThriftName() string {
  return "Bool_String"
}

func (p *BoolString) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoolString(%+v)", *p)
}

func (p *BoolString) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*BoolString)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Retval, data.Retval); cmp != 0 {
    return cmp, true
  }
  if p.OValue != data.OValue {
    if p.OValue < data.OValue {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *BoolString) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Retval
  case 2: return p.OValue
  }
  return nil
}

func (p *BoolString) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("retval", thrift.BOOL, 1),
    thrift.NewTField("o_value", thrift.STRING, 2),
    })
}

/**
 * Attributes:
 *  - Retval
 *  - OValue
 */
type BoolListString struct {
  thrift.TStruct
  Retval bool "retval"; // 1
  OValue thrift.TList "o_value"; // 2
}

func NewBoolListString() *BoolListString {
  output := &BoolListString{
    TStruct:thrift.NewTStruct("Bool_ListString", []thrift.TField{
    thrift.NewTField("retval", thrift.BOOL, 1),
    thrift.NewTField("o_value", thrift.LIST, 2),
    }),
  }
  {
  }
  return output
}

func (p *BoolListString) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "retval" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "o_value" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *BoolListString) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v46, err47 := iprot.ReadBool()
  if err47 != nil { return thrift.NewTProtocolExceptionReadField(1, "retval", p.ThriftName(), err47); }
  p.Retval = v46
  return err
}

func (p *BoolListString) ReadFieldRetval(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *BoolListString) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype53, _size50, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.OValue", "", err)
  }
  p.OValue = thrift.NewTList(_etype53, _size50)
  for _i54:= 0; _i54 < _size50; _i54++ {
    v56, err57 := iprot.ReadString()
    if err57 != nil { return thrift.NewTProtocolExceptionReadField(0, "_elem55", "", err57); }
    _elem55 := v56
    p.OValue.Push(_elem55)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *BoolListString) ReadFieldOValue(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *BoolListString) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("Bool_ListString")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *BoolListString) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("retval", thrift.BOOL, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "retval", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Retval))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "retval", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "retval", p.ThriftName(), err); }
  return err
}

func (p *BoolListString) WriteFieldRetval(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *BoolListString) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.OValue != nil {
    err = oprot.WriteFieldBegin("o_value", thrift.LIST, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "o_value", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRING, p.OValue.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter58 := range p.OValue.Iter() {
      Iter59 := Iter58.(string)
      err = oprot.WriteString(string(Iter59))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Iter59", "", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "o_value", p.ThriftName(), err); }
  }
  return err
}

func (p *BoolListString) WriteFieldOValue(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *BoolListString) TStructName() string {
  return "BoolListString"
}

func (p *BoolListString) ThriftName() string {
  return "Bool_ListString"
}

func (p *BoolListString) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoolListString(%+v)", *p)
}

func (p *BoolListString) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*BoolListString)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Retval, data.Retval); cmp != 0 {
    return cmp, true
  }
  if cmp, ok := p.OValue.CompareTo(data.OValue); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *BoolListString) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Retval
  case 2: return p.OValue
  }
  return nil
}

func (p *BoolListString) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("retval", thrift.BOOL, 1),
    thrift.NewTField("o_value", thrift.LIST, 2),
    })
}

/**
 * Attributes:
 *  - Retval
 *  - _nodeNeighbors
 */
type UInt32ListByte struct {
  thrift.TStruct
  Retval int32 "retval"; // 1
  _nodeNeighbors thrift.TList "_nodeNeighbors"; // 2
}

func NewUInt32ListByte() *UInt32ListByte {
  output := &UInt32ListByte{
    TStruct:thrift.NewTStruct("UInt32_ListByte", []thrift.TField{
    thrift.NewTField("retval", thrift.I32, 1),
    thrift.NewTField("_nodeNeighbors", thrift.LIST, 2),
    }),
  }
  {
  }
  return output
}

func (p *UInt32ListByte) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "retval" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_nodeNeighbors" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *UInt32ListByte) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v60, err61 := iprot.ReadI32()
  if err61 != nil { return thrift.NewTProtocolExceptionReadField(1, "retval", p.ThriftName(), err61); }
  p.Retval = v60
  return err
}

func (p *UInt32ListByte) ReadFieldRetval(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *UInt32ListByte) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype67, _size64, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p._nodeNeighbors", "", err)
  }
  p._nodeNeighbors = thrift.NewTList(_etype67, _size64)
  for _i68:= 0; _i68 < _size64; _i68++ {
    v70, err71 := iprot.ReadByte()
    if err71 != nil { return thrift.NewTProtocolExceptionReadField(0, "_elem69", "", err71); }
    _elem69 := v70
    p._nodeNeighbors.Push(_elem69)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *UInt32ListByte) ReadField_nodeNeighbors(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *UInt32ListByte) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("UInt32_ListByte")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *UInt32ListByte) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("retval", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "retval", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.Retval))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "retval", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "retval", p.ThriftName(), err); }
  return err
}

func (p *UInt32ListByte) WriteFieldRetval(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *UInt32ListByte) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._nodeNeighbors != nil {
    err = oprot.WriteFieldBegin("_nodeNeighbors", thrift.LIST, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeNeighbors", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.BYTE, p._nodeNeighbors.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter72 := range p._nodeNeighbors.Iter() {
      Iter73 := Iter72.(byte)
      err = oprot.WriteByte(byte(Iter73))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Iter73", "", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeNeighbors", p.ThriftName(), err); }
  }
  return err
}

func (p *UInt32ListByte) WriteField_nodeNeighbors(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *UInt32ListByte) TStructName() string {
  return "UInt32ListByte"
}

func (p *UInt32ListByte) ThriftName() string {
  return "UInt32_ListByte"
}

func (p *UInt32ListByte) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UInt32ListByte(%+v)", *p)
}

func (p *UInt32ListByte) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*UInt32ListByte)
  if !ok {
    return 0, false
  }
  if p.Retval != data.Retval {
    if p.Retval < data.Retval {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p._nodeNeighbors.CompareTo(data._nodeNeighbors); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *UInt32ListByte) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Retval
  case 2: return p._nodeNeighbors
  }
  return nil
}

func (p *UInt32ListByte) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("retval", thrift.I32, 1),
    thrift.NewTField("_nodeNeighbors", thrift.LIST, 2),
    })
}

/**
 * Attributes:
 *  - Retval
 *  - _className
 *  - _classVersion
 */
type BoolGetNodeClassInformation struct {
  thrift.TStruct
  Retval bool "retval"; // 1
  _className string "_className"; // 2
  _classVersion byte "_classVersion"; // 3
}

func NewBoolGetNodeClassInformation() *BoolGetNodeClassInformation {
  output := &BoolGetNodeClassInformation{
    TStruct:thrift.NewTStruct("Bool_GetNodeClassInformation", []thrift.TField{
    thrift.NewTField("retval", thrift.BOOL, 1),
    thrift.NewTField("_className", thrift.STRING, 2),
    thrift.NewTField("_classVersion", thrift.BYTE, 3),
    }),
  }
  {
  }
  return output
}

func (p *BoolGetNodeClassInformation) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "retval" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_className" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "_classVersion" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *BoolGetNodeClassInformation) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v74, err75 := iprot.ReadBool()
  if err75 != nil { return thrift.NewTProtocolExceptionReadField(1, "retval", p.ThriftName(), err75); }
  p.Retval = v74
  return err
}

func (p *BoolGetNodeClassInformation) ReadFieldRetval(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *BoolGetNodeClassInformation) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v76, err77 := iprot.ReadString()
  if err77 != nil { return thrift.NewTProtocolExceptionReadField(2, "_className", p.ThriftName(), err77); }
  p._className = v76
  return err
}

func (p *BoolGetNodeClassInformation) ReadField_className(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *BoolGetNodeClassInformation) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v78, err79 := iprot.ReadByte()
  if err79 != nil { return thrift.NewTProtocolExceptionReadField(3, "_classVersion", p.ThriftName(), err79); }
  p._classVersion = v78
  return err
}

func (p *BoolGetNodeClassInformation) ReadField_classVersion(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *BoolGetNodeClassInformation) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("Bool_GetNodeClassInformation")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *BoolGetNodeClassInformation) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("retval", thrift.BOOL, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "retval", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Retval))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "retval", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "retval", p.ThriftName(), err); }
  return err
}

func (p *BoolGetNodeClassInformation) WriteFieldRetval(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *BoolGetNodeClassInformation) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_className", thrift.STRING, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_className", p.ThriftName(), err); }
  err = oprot.WriteString(string(p._className))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_className", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_className", p.ThriftName(), err); }
  return err
}

func (p *BoolGetNodeClassInformation) WriteField_className(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *BoolGetNodeClassInformation) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_classVersion", thrift.BYTE, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_classVersion", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._classVersion))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_classVersion", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_classVersion", p.ThriftName(), err); }
  return err
}

func (p *BoolGetNodeClassInformation) WriteField_classVersion(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *BoolGetNodeClassInformation) TStructName() string {
  return "BoolGetNodeClassInformation"
}

func (p *BoolGetNodeClassInformation) ThriftName() string {
  return "Bool_GetNodeClassInformation"
}

func (p *BoolGetNodeClassInformation) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoolGetNodeClassInformation(%+v)", *p)
}

func (p *BoolGetNodeClassInformation) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*BoolGetNodeClassInformation)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Retval, data.Retval); cmp != 0 {
    return cmp, true
  }
  if p._className != data._className {
    if p._className < data._className {
      return -1, true
    }
    return 1, true
  }
  if p._classVersion != data._classVersion {
    if p._classVersion < data._classVersion {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *BoolGetNodeClassInformation) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Retval
  case 2: return p._className
  case 3: return p._classVersion
  }
  return nil
}

func (p *BoolGetNodeClassInformation) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("retval", thrift.BOOL, 1),
    thrift.NewTField("_className", thrift.STRING, 2),
    thrift.NewTField("_classVersion", thrift.BYTE, 3),
    })
}

/**
 * Attributes:
 *  - Retval
 *  - OAssociations
 */
type GetAssociationsReturnStruct struct {
  thrift.TStruct
  Retval int32 "retval"; // 1
  OAssociations thrift.TList "o_associations"; // 2
}

func NewGetAssociationsReturnStruct() *GetAssociationsReturnStruct {
  output := &GetAssociationsReturnStruct{
    TStruct:thrift.NewTStruct("GetAssociationsReturnStruct", []thrift.TField{
    thrift.NewTField("retval", thrift.I32, 1),
    thrift.NewTField("o_associations", thrift.LIST, 2),
    }),
  }
  {
  }
  return output
}

func (p *GetAssociationsReturnStruct) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "retval" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "o_associations" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetAssociationsReturnStruct) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v80, err81 := iprot.ReadI32()
  if err81 != nil { return thrift.NewTProtocolExceptionReadField(1, "retval", p.ThriftName(), err81); }
  p.Retval = v80
  return err
}

func (p *GetAssociationsReturnStruct) ReadFieldRetval(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetAssociationsReturnStruct) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype87, _size84, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.OAssociations", "", err)
  }
  p.OAssociations = thrift.NewTList(_etype87, _size84)
  for _i88:= 0; _i88 < _size84; _i88++ {
    v90, err91 := iprot.ReadByte()
    if err91 != nil { return thrift.NewTProtocolExceptionReadField(0, "_elem89", "", err91); }
    _elem89 := v90
    p.OAssociations.Push(_elem89)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *GetAssociationsReturnStruct) ReadFieldOAssociations(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *GetAssociationsReturnStruct) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetAssociationsReturnStruct")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetAssociationsReturnStruct) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("retval", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "retval", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.Retval))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "retval", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "retval", p.ThriftName(), err); }
  return err
}

func (p *GetAssociationsReturnStruct) WriteFieldRetval(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetAssociationsReturnStruct) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.OAssociations != nil {
    err = oprot.WriteFieldBegin("o_associations", thrift.LIST, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "o_associations", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.BYTE, p.OAssociations.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter92 := range p.OAssociations.Iter() {
      Iter93 := Iter92.(byte)
      err = oprot.WriteByte(byte(Iter93))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Iter93", "", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "o_associations", p.ThriftName(), err); }
  }
  return err
}

func (p *GetAssociationsReturnStruct) WriteFieldOAssociations(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *GetAssociationsReturnStruct) TStructName() string {
  return "GetAssociationsReturnStruct"
}

func (p *GetAssociationsReturnStruct) ThriftName() string {
  return "GetAssociationsReturnStruct"
}

func (p *GetAssociationsReturnStruct) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetAssociationsReturnStruct(%+v)", *p)
}

func (p *GetAssociationsReturnStruct) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetAssociationsReturnStruct)
  if !ok {
    return 0, false
  }
  if p.Retval != data.Retval {
    if p.Retval < data.Retval {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.OAssociations.CompareTo(data.OAssociations); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetAssociationsReturnStruct) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Retval
  case 2: return p.OAssociations
  }
  return nil
}

func (p *GetAssociationsReturnStruct) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("retval", thrift.I32, 1),
    thrift.NewTField("o_associations", thrift.LIST, 2),
    })
}

/**
 * Attributes:
 *  - Retval
 *  - _sceneIds
 */
type GetAllScenesReturnStruct struct {
  thrift.TStruct
  Retval byte "retval"; // 1
  _sceneIds thrift.TList "_sceneIds"; // 2
}

func NewGetAllScenesReturnStruct() *GetAllScenesReturnStruct {
  output := &GetAllScenesReturnStruct{
    TStruct:thrift.NewTStruct("GetAllScenesReturnStruct", []thrift.TField{
    thrift.NewTField("retval", thrift.BYTE, 1),
    thrift.NewTField("_sceneIds", thrift.LIST, 2),
    }),
  }
  {
  }
  return output
}

func (p *GetAllScenesReturnStruct) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "retval" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_sceneIds" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetAllScenesReturnStruct) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v94, err95 := iprot.ReadByte()
  if err95 != nil { return thrift.NewTProtocolExceptionReadField(1, "retval", p.ThriftName(), err95); }
  p.Retval = v94
  return err
}

func (p *GetAllScenesReturnStruct) ReadFieldRetval(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetAllScenesReturnStruct) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype101, _size98, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p._sceneIds", "", err)
  }
  p._sceneIds = thrift.NewTList(_etype101, _size98)
  for _i102:= 0; _i102 < _size98; _i102++ {
    v104, err105 := iprot.ReadByte()
    if err105 != nil { return thrift.NewTProtocolExceptionReadField(0, "_elem103", "", err105); }
    _elem103 := v104
    p._sceneIds.Push(_elem103)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *GetAllScenesReturnStruct) ReadField_sceneIds(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *GetAllScenesReturnStruct) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetAllScenesReturnStruct")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetAllScenesReturnStruct) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("retval", thrift.BYTE, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "retval", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p.Retval))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "retval", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "retval", p.ThriftName(), err); }
  return err
}

func (p *GetAllScenesReturnStruct) WriteFieldRetval(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetAllScenesReturnStruct) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._sceneIds != nil {
    err = oprot.WriteFieldBegin("_sceneIds", thrift.LIST, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_sceneIds", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.BYTE, p._sceneIds.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter106 := range p._sceneIds.Iter() {
      Iter107 := Iter106.(byte)
      err = oprot.WriteByte(byte(Iter107))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Iter107", "", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_sceneIds", p.ThriftName(), err); }
  }
  return err
}

func (p *GetAllScenesReturnStruct) WriteField_sceneIds(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *GetAllScenesReturnStruct) TStructName() string {
  return "GetAllScenesReturnStruct"
}

func (p *GetAllScenesReturnStruct) ThriftName() string {
  return "GetAllScenesReturnStruct"
}

func (p *GetAllScenesReturnStruct) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetAllScenesReturnStruct(%+v)", *p)
}

func (p *GetAllScenesReturnStruct) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetAllScenesReturnStruct)
  if !ok {
    return 0, false
  }
  if p.Retval != data.Retval {
    if p.Retval < data.Retval {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p._sceneIds.CompareTo(data._sceneIds); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetAllScenesReturnStruct) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Retval
  case 2: return p._sceneIds
  }
  return nil
}

func (p *GetAllScenesReturnStruct) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("retval", thrift.BYTE, 1),
    thrift.NewTField("_sceneIds", thrift.LIST, 2),
    })
}

/**
 * Attributes:
 *  - Retval
 *  - OValue
 */
type SceneGetValuesReturnStruct struct {
  thrift.TStruct
  Retval int32 "retval"; // 1
  OValue thrift.TList "o_value"; // 2
}

func NewSceneGetValuesReturnStruct() *SceneGetValuesReturnStruct {
  output := &SceneGetValuesReturnStruct{
    TStruct:thrift.NewTStruct("SceneGetValuesReturnStruct", []thrift.TField{
    thrift.NewTField("retval", thrift.I32, 1),
    thrift.NewTField("o_value", thrift.LIST, 2),
    }),
  }
  {
  }
  return output
}

func (p *SceneGetValuesReturnStruct) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "retval" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "o_value" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SceneGetValuesReturnStruct) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v108, err109 := iprot.ReadI32()
  if err109 != nil { return thrift.NewTProtocolExceptionReadField(1, "retval", p.ThriftName(), err109); }
  p.Retval = v108
  return err
}

func (p *SceneGetValuesReturnStruct) ReadFieldRetval(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *SceneGetValuesReturnStruct) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype115, _size112, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.OValue", "", err)
  }
  p.OValue = thrift.NewTList(_etype115, _size112)
  for _i116:= 0; _i116 < _size112; _i116++ {
    _elem117 := NewRemoteValueID()
    err120 := _elem117.Read(iprot)
    if err120 != nil { return thrift.NewTProtocolExceptionReadStruct("_elem117RemoteValueID", err120); }
    p.OValue.Push(_elem117)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *SceneGetValuesReturnStruct) ReadFieldOValue(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *SceneGetValuesReturnStruct) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SceneGetValuesReturnStruct")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SceneGetValuesReturnStruct) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("retval", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "retval", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.Retval))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "retval", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "retval", p.ThriftName(), err); }
  return err
}

func (p *SceneGetValuesReturnStruct) WriteFieldRetval(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *SceneGetValuesReturnStruct) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.OValue != nil {
    err = oprot.WriteFieldBegin("o_value", thrift.LIST, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "o_value", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRUCT, p.OValue.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter121 := range p.OValue.Iter() {
      Iter122 := Iter121.(*RemoteValueID)
      err = Iter122.Write(oprot)
      if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RemoteValueID", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "o_value", p.ThriftName(), err); }
  }
  return err
}

func (p *SceneGetValuesReturnStruct) WriteFieldOValue(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *SceneGetValuesReturnStruct) TStructName() string {
  return "SceneGetValuesReturnStruct"
}

func (p *SceneGetValuesReturnStruct) ThriftName() string {
  return "SceneGetValuesReturnStruct"
}

func (p *SceneGetValuesReturnStruct) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SceneGetValuesReturnStruct(%+v)", *p)
}

func (p *SceneGetValuesReturnStruct) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SceneGetValuesReturnStruct)
  if !ok {
    return 0, false
  }
  if p.Retval != data.Retval {
    if p.Retval < data.Retval {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.OValue.CompareTo(data.OValue); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *SceneGetValuesReturnStruct) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Retval
  case 2: return p.OValue
  }
  return nil
}

func (p *SceneGetValuesReturnStruct) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("retval", thrift.I32, 1),
    thrift.NewTField("o_value", thrift.LIST, 2),
    })
}

func init() {
}

