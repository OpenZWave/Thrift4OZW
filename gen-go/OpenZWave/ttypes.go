/* Autogenerated by Thrift Compiler (0.9.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package OpenZWave;

import (
        "thrift"
        "fmt"
)



type RemoteValueGenre int
const (
  ValueGenre_Basic RemoteValueGenre = 0
  ValueGenre_User RemoteValueGenre = 1
  ValueGenre_Config RemoteValueGenre = 2
  ValueGenre_System RemoteValueGenre = 3
  ValueGenre_Count RemoteValueGenre = 4
)
func (p RemoteValueGenre) String() string {
  switch p {
  case ValueGenre_Basic: return "ValueGenre_Basic"
  case ValueGenre_User: return "ValueGenre_User"
  case ValueGenre_Config: return "ValueGenre_Config"
  case ValueGenre_System: return "ValueGenre_System"
  case ValueGenre_Count: return "ValueGenre_Count"
  }
  return ""
}

func FromRemoteValueGenreString(s string) RemoteValueGenre {
  switch s {
  case "ValueGenre_Basic": return ValueGenre_Basic
  case "ValueGenre_User": return ValueGenre_User
  case "ValueGenre_Config": return ValueGenre_Config
  case "ValueGenre_System": return ValueGenre_System
  case "ValueGenre_Count": return ValueGenre_Count
  }
  return RemoteValueGenre(-10000)
}

func (p RemoteValueGenre) Value() int {
  return int(p)
}

func (p RemoteValueGenre) IsEnum() bool {
  return true
}

type RemoteValueType int
const (
  ValueType_Bool RemoteValueType = 0
  ValueType_Byte RemoteValueType = 1
  ValueType_Decimal RemoteValueType = 2
  ValueType_Int RemoteValueType = 3
  ValueType_List RemoteValueType = 4
  ValueType_Schedule RemoteValueType = 5
  ValueType_Short RemoteValueType = 6
  ValueType_String RemoteValueType = 7
  ValueType_Button RemoteValueType = 8
  ValueType_Max RemoteValueType = 8
)
func (p RemoteValueType) String() string {
  switch p {
  case ValueType_Bool: return "ValueType_Bool"
  case ValueType_Byte: return "ValueType_Byte"
  case ValueType_Decimal: return "ValueType_Decimal"
  case ValueType_Int: return "ValueType_Int"
  case ValueType_List: return "ValueType_List"
  case ValueType_Schedule: return "ValueType_Schedule"
  case ValueType_Short: return "ValueType_Short"
  case ValueType_String: return "ValueType_String"
  case ValueType_Button: return "ValueType_Button"
  case ValueType_Max: return "ValueType_Max"
  }
  return ""
}

func FromRemoteValueTypeString(s string) RemoteValueType {
  switch s {
  case "ValueType_Bool": return ValueType_Bool
  case "ValueType_Byte": return ValueType_Byte
  case "ValueType_Decimal": return ValueType_Decimal
  case "ValueType_Int": return ValueType_Int
  case "ValueType_List": return ValueType_List
  case "ValueType_Schedule": return ValueType_Schedule
  case "ValueType_Short": return ValueType_Short
  case "ValueType_String": return ValueType_String
  case "ValueType_Button": return ValueType_Button
  case "ValueType_Max": return ValueType_Max
  }
  return RemoteValueType(-10000)
}

func (p RemoteValueType) Value() int {
  return int(p)
}

func (p RemoteValueType) IsEnum() bool {
  return true
}

type DriverControllerCommand int
const (
  ControllerCommand_None DriverControllerCommand = 0
  ControllerCommand_AddController DriverControllerCommand = 1
  ControllerCommand_AddDevice DriverControllerCommand = 2
  ControllerCommand_CreateNewPrimary DriverControllerCommand = 3
  ControllerCommand_ReceiveConfiguration DriverControllerCommand = 4
  ControllerCommand_RemoveController DriverControllerCommand = 5
  ControllerCommand_RemoveDevice DriverControllerCommand = 6
  ControllerCommand_RemoveFailedNode DriverControllerCommand = 7
  ControllerCommand_HasNodeFailed DriverControllerCommand = 8
  ControllerCommand_ReplaceFailedNode DriverControllerCommand = 9
  ControllerCommand_TransferPrimaryRole DriverControllerCommand = 10
  ControllerCommand_RequestNetworkUpdate DriverControllerCommand = 11
  ControllerCommand_RequestNodeNeighborUpdate DriverControllerCommand = 12
  ControllerCommand_AssignReturnRoute DriverControllerCommand = 13
  ControllerCommand_DeleteAllReturnRoutes DriverControllerCommand = 14
  ControllerCommand_CreateButton DriverControllerCommand = 15
  ControllerCommand_DeleteButton DriverControllerCommand = 16
)
func (p DriverControllerCommand) String() string {
  switch p {
  case ControllerCommand_None: return "ControllerCommand_None"
  case ControllerCommand_AddController: return "ControllerCommand_AddController"
  case ControllerCommand_AddDevice: return "ControllerCommand_AddDevice"
  case ControllerCommand_CreateNewPrimary: return "ControllerCommand_CreateNewPrimary"
  case ControllerCommand_ReceiveConfiguration: return "ControllerCommand_ReceiveConfiguration"
  case ControllerCommand_RemoveController: return "ControllerCommand_RemoveController"
  case ControllerCommand_RemoveDevice: return "ControllerCommand_RemoveDevice"
  case ControllerCommand_RemoveFailedNode: return "ControllerCommand_RemoveFailedNode"
  case ControllerCommand_HasNodeFailed: return "ControllerCommand_HasNodeFailed"
  case ControllerCommand_ReplaceFailedNode: return "ControllerCommand_ReplaceFailedNode"
  case ControllerCommand_TransferPrimaryRole: return "ControllerCommand_TransferPrimaryRole"
  case ControllerCommand_RequestNetworkUpdate: return "ControllerCommand_RequestNetworkUpdate"
  case ControllerCommand_RequestNodeNeighborUpdate: return "ControllerCommand_RequestNodeNeighborUpdate"
  case ControllerCommand_AssignReturnRoute: return "ControllerCommand_AssignReturnRoute"
  case ControllerCommand_DeleteAllReturnRoutes: return "ControllerCommand_DeleteAllReturnRoutes"
  case ControllerCommand_CreateButton: return "ControllerCommand_CreateButton"
  case ControllerCommand_DeleteButton: return "ControllerCommand_DeleteButton"
  }
  return ""
}

func FromDriverControllerCommandString(s string) DriverControllerCommand {
  switch s {
  case "ControllerCommand_None": return ControllerCommand_None
  case "ControllerCommand_AddController": return ControllerCommand_AddController
  case "ControllerCommand_AddDevice": return ControllerCommand_AddDevice
  case "ControllerCommand_CreateNewPrimary": return ControllerCommand_CreateNewPrimary
  case "ControllerCommand_ReceiveConfiguration": return ControllerCommand_ReceiveConfiguration
  case "ControllerCommand_RemoveController": return ControllerCommand_RemoveController
  case "ControllerCommand_RemoveDevice": return ControllerCommand_RemoveDevice
  case "ControllerCommand_RemoveFailedNode": return ControllerCommand_RemoveFailedNode
  case "ControllerCommand_HasNodeFailed": return ControllerCommand_HasNodeFailed
  case "ControllerCommand_ReplaceFailedNode": return ControllerCommand_ReplaceFailedNode
  case "ControllerCommand_TransferPrimaryRole": return ControllerCommand_TransferPrimaryRole
  case "ControllerCommand_RequestNetworkUpdate": return ControllerCommand_RequestNetworkUpdate
  case "ControllerCommand_RequestNodeNeighborUpdate": return ControllerCommand_RequestNodeNeighborUpdate
  case "ControllerCommand_AssignReturnRoute": return ControllerCommand_AssignReturnRoute
  case "ControllerCommand_DeleteAllReturnRoutes": return ControllerCommand_DeleteAllReturnRoutes
  case "ControllerCommand_CreateButton": return ControllerCommand_CreateButton
  case "ControllerCommand_DeleteButton": return ControllerCommand_DeleteButton
  }
  return DriverControllerCommand(-10000)
}

func (p DriverControllerCommand) Value() int {
  return int(p)
}

func (p DriverControllerCommand) IsEnum() bool {
  return true
}

/**
 * Delete a handheld button id.
 * 
 * Attributes:
 *  - _homeId
 *  - _nodeId
 *  - _genre
 *  - _commandClassId
 *  - _instance
 *  - _valueIndex
 *  - _type
 */
type RemoteValueID struct {
  thrift.TStruct
  _homeId int32 "_homeId"; // 1
  _nodeId byte "_nodeId"; // 2
  _genre RemoteValueGenre "_genre"; // 3
  _commandClassId byte "_commandClassId"; // 4
  _instance byte "_instance"; // 5
  _valueIndex byte "_valueIndex"; // 6
  _type RemoteValueType "_type"; // 7
}

func NewRemoteValueID() *RemoteValueID {
  output := &RemoteValueID{
    TStruct:thrift.NewTStruct("RemoteValueID", []thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    thrift.NewTField("_genre", thrift.I32, 3),
    thrift.NewTField("_commandClassId", thrift.BYTE, 4),
    thrift.NewTField("_instance", thrift.BYTE, 5),
    thrift.NewTField("_valueIndex", thrift.BYTE, 6),
    thrift.NewTField("_type", thrift.I32, 7),
    }),
  }
  {
  }
  return output
}

func (p *RemoteValueID) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_homeId" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_nodeId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "_genre" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 4 || fieldName == "_commandClassId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 5 || fieldName == "_instance" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField5(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField5(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 6 || fieldName == "_valueIndex" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField6(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField6(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 7 || fieldName == "_type" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField7(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField7(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *RemoteValueID) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v0, err1 := iprot.ReadI32()
  if err1 != nil { return thrift.NewTProtocolExceptionReadField(1, "_homeId", p.ThriftName(), err1); }
  p._homeId = v0
  return err
}

func (p *RemoteValueID) ReadField_homeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *RemoteValueID) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v2, err3 := iprot.ReadByte()
  if err3 != nil { return thrift.NewTProtocolExceptionReadField(2, "_nodeId", p.ThriftName(), err3); }
  p._nodeId = v2
  return err
}

func (p *RemoteValueID) ReadField_nodeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *RemoteValueID) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v4, err5 := iprot.ReadI32()
  if err5 != nil { return thrift.NewTProtocolExceptionReadField(3, "_genre", p.ThriftName(), err5); }
  p._genre = RemoteValueGenre(v4)
  return err
}

func (p *RemoteValueID) ReadField_genre(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *RemoteValueID) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v6, err7 := iprot.ReadByte()
  if err7 != nil { return thrift.NewTProtocolExceptionReadField(4, "_commandClassId", p.ThriftName(), err7); }
  p._commandClassId = v6
  return err
}

func (p *RemoteValueID) ReadField_commandClassId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField4(iprot)
}

func (p *RemoteValueID) ReadField5(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v8, err9 := iprot.ReadByte()
  if err9 != nil { return thrift.NewTProtocolExceptionReadField(5, "_instance", p.ThriftName(), err9); }
  p._instance = v8
  return err
}

func (p *RemoteValueID) ReadField_instance(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField5(iprot)
}

func (p *RemoteValueID) ReadField6(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v10, err11 := iprot.ReadByte()
  if err11 != nil { return thrift.NewTProtocolExceptionReadField(6, "_valueIndex", p.ThriftName(), err11); }
  p._valueIndex = v10
  return err
}

func (p *RemoteValueID) ReadField_valueIndex(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField6(iprot)
}

func (p *RemoteValueID) ReadField7(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v12, err13 := iprot.ReadI32()
  if err13 != nil { return thrift.NewTProtocolExceptionReadField(7, "_type", p.ThriftName(), err13); }
  p._type = RemoteValueType(v12)
  return err
}

func (p *RemoteValueID) ReadField_type(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField7(iprot)
}

func (p *RemoteValueID) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("RemoteValueID")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = p.WriteField4(oprot)
  if err != nil { return err }
  err = p.WriteField5(oprot)
  if err != nil { return err }
  err = p.WriteField6(oprot)
  if err != nil { return err }
  err = p.WriteField7(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *RemoteValueID) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_homeId", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._homeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  return err
}

func (p *RemoteValueID) WriteField_homeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *RemoteValueID) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_nodeId", thrift.BYTE, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._nodeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  return err
}

func (p *RemoteValueID) WriteField_nodeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *RemoteValueID) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_genre", thrift.I32, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_genre", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._genre))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_genre", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_genre", p.ThriftName(), err); }
  return err
}

func (p *RemoteValueID) WriteField_genre(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *RemoteValueID) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_commandClassId", thrift.BYTE, 4)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "_commandClassId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._commandClassId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "_commandClassId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "_commandClassId", p.ThriftName(), err); }
  return err
}

func (p *RemoteValueID) WriteField_commandClassId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField4(oprot)
}

func (p *RemoteValueID) WriteField5(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_instance", thrift.BYTE, 5)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "_instance", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._instance))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "_instance", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "_instance", p.ThriftName(), err); }
  return err
}

func (p *RemoteValueID) WriteField_instance(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField5(oprot)
}

func (p *RemoteValueID) WriteField6(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_valueIndex", thrift.BYTE, 6)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(6, "_valueIndex", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._valueIndex))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(6, "_valueIndex", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(6, "_valueIndex", p.ThriftName(), err); }
  return err
}

func (p *RemoteValueID) WriteField_valueIndex(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField6(oprot)
}

func (p *RemoteValueID) WriteField7(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_type", thrift.I32, 7)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(7, "_type", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._type))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(7, "_type", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(7, "_type", p.ThriftName(), err); }
  return err
}

func (p *RemoteValueID) WriteField_type(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField7(oprot)
}

func (p *RemoteValueID) TStructName() string {
  return "RemoteValueID"
}

func (p *RemoteValueID) ThriftName() string {
  return "RemoteValueID"
}

func (p *RemoteValueID) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RemoteValueID(%+v)", *p)
}

func (p *RemoteValueID) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*RemoteValueID)
  if !ok {
    return 0, false
  }
  if p._homeId != data._homeId {
    if p._homeId < data._homeId {
      return -1, true
    }
    return 1, true
  }
  if p._nodeId != data._nodeId {
    if p._nodeId < data._nodeId {
      return -1, true
    }
    return 1, true
  }
  if p._genre != data._genre {
    if p._genre < data._genre {
      return -1, true
    }
    return 1, true
  }
  if p._commandClassId != data._commandClassId {
    if p._commandClassId < data._commandClassId {
      return -1, true
    }
    return 1, true
  }
  if p._instance != data._instance {
    if p._instance < data._instance {
      return -1, true
    }
    return 1, true
  }
  if p._valueIndex != data._valueIndex {
    if p._valueIndex < data._valueIndex {
      return -1, true
    }
    return 1, true
  }
  if p._type != data._type {
    if p._type < data._type {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *RemoteValueID) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._homeId
  case 2: return p._nodeId
  case 3: return p._genre
  case 4: return p._commandClassId
  case 5: return p._instance
  case 6: return p._valueIndex
  case 7: return p._type
  }
  return nil
}

func (p *RemoteValueID) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    thrift.NewTField("_genre", thrift.I32, 3),
    thrift.NewTField("_commandClassId", thrift.BYTE, 4),
    thrift.NewTField("_instance", thrift.BYTE, 5),
    thrift.NewTField("_valueIndex", thrift.BYTE, 6),
    thrift.NewTField("_type", thrift.I32, 7),
    })
}

/**
 * Attributes:
 *  - SSOFCnt
 *  - SACKWaiting
 *  - SReadAborts
 *  - SBadChecksum
 *  - SReadCnt
 *  - SWriteCnt
 *  - SCANCnt
 *  - SNAKCnt
 *  - SACKCnt
 *  - SOOFCnt
 *  - SDropped
 *  - SRetries
 *  - SControllerReadCnt
 *  - SControllerWriteCnt
 */
type DriverData struct {
  thrift.TStruct
  SSOFCnt int32 "s_SOFCnt"; // 1
  SACKWaiting int32 "s_ACKWaiting"; // 2
  SReadAborts int32 "s_readAborts"; // 3
  SBadChecksum int32 "s_badChecksum"; // 4
  SReadCnt int32 "s_readCnt"; // 5
  SWriteCnt int32 "s_writeCnt"; // 6
  SCANCnt int32 "s_CANCnt"; // 7
  SNAKCnt int32 "s_NAKCnt"; // 8
  SACKCnt int32 "s_ACKCnt"; // 9
  SOOFCnt int32 "s_OOFCnt"; // 10
  SDropped int32 "s_dropped"; // 11
  SRetries int32 "s_retries"; // 12
  SControllerReadCnt int32 "s_controllerReadCnt"; // 13
  SControllerWriteCnt int32 "s_controllerWriteCnt"; // 14
}

func NewDriverData() *DriverData {
  output := &DriverData{
    TStruct:thrift.NewTStruct("DriverData", []thrift.TField{
    thrift.NewTField("s_SOFCnt", thrift.I32, 1),
    thrift.NewTField("s_ACKWaiting", thrift.I32, 2),
    thrift.NewTField("s_readAborts", thrift.I32, 3),
    thrift.NewTField("s_badChecksum", thrift.I32, 4),
    thrift.NewTField("s_readCnt", thrift.I32, 5),
    thrift.NewTField("s_writeCnt", thrift.I32, 6),
    thrift.NewTField("s_CANCnt", thrift.I32, 7),
    thrift.NewTField("s_NAKCnt", thrift.I32, 8),
    thrift.NewTField("s_ACKCnt", thrift.I32, 9),
    thrift.NewTField("s_OOFCnt", thrift.I32, 10),
    thrift.NewTField("s_dropped", thrift.I32, 11),
    thrift.NewTField("s_retries", thrift.I32, 12),
    thrift.NewTField("s_controllerReadCnt", thrift.I32, 13),
    thrift.NewTField("s_controllerWriteCnt", thrift.I32, 14),
    }),
  }
  {
  }
  return output
}

func (p *DriverData) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "s_SOFCnt" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "s_ACKWaiting" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "s_readAborts" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 4 || fieldName == "s_badChecksum" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 5 || fieldName == "s_readCnt" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField5(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField5(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 6 || fieldName == "s_writeCnt" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField6(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField6(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 7 || fieldName == "s_CANCnt" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField7(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField7(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 8 || fieldName == "s_NAKCnt" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField8(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField8(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 9 || fieldName == "s_ACKCnt" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField9(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField9(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 10 || fieldName == "s_OOFCnt" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField10(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField10(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 11 || fieldName == "s_dropped" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField11(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField11(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 12 || fieldName == "s_retries" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField12(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField12(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 13 || fieldName == "s_controllerReadCnt" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField13(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField13(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 14 || fieldName == "s_controllerWriteCnt" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField14(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField14(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *DriverData) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v14, err15 := iprot.ReadI32()
  if err15 != nil { return thrift.NewTProtocolExceptionReadField(1, "s_SOFCnt", p.ThriftName(), err15); }
  p.SSOFCnt = v14
  return err
}

func (p *DriverData) ReadFieldSSOFCnt(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *DriverData) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v16, err17 := iprot.ReadI32()
  if err17 != nil { return thrift.NewTProtocolExceptionReadField(2, "s_ACKWaiting", p.ThriftName(), err17); }
  p.SACKWaiting = v16
  return err
}

func (p *DriverData) ReadFieldSACKWaiting(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *DriverData) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v18, err19 := iprot.ReadI32()
  if err19 != nil { return thrift.NewTProtocolExceptionReadField(3, "s_readAborts", p.ThriftName(), err19); }
  p.SReadAborts = v18
  return err
}

func (p *DriverData) ReadFieldSReadAborts(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *DriverData) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v20, err21 := iprot.ReadI32()
  if err21 != nil { return thrift.NewTProtocolExceptionReadField(4, "s_badChecksum", p.ThriftName(), err21); }
  p.SBadChecksum = v20
  return err
}

func (p *DriverData) ReadFieldSBadChecksum(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField4(iprot)
}

func (p *DriverData) ReadField5(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v22, err23 := iprot.ReadI32()
  if err23 != nil { return thrift.NewTProtocolExceptionReadField(5, "s_readCnt", p.ThriftName(), err23); }
  p.SReadCnt = v22
  return err
}

func (p *DriverData) ReadFieldSReadCnt(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField5(iprot)
}

func (p *DriverData) ReadField6(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v24, err25 := iprot.ReadI32()
  if err25 != nil { return thrift.NewTProtocolExceptionReadField(6, "s_writeCnt", p.ThriftName(), err25); }
  p.SWriteCnt = v24
  return err
}

func (p *DriverData) ReadFieldSWriteCnt(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField6(iprot)
}

func (p *DriverData) ReadField7(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v26, err27 := iprot.ReadI32()
  if err27 != nil { return thrift.NewTProtocolExceptionReadField(7, "s_CANCnt", p.ThriftName(), err27); }
  p.SCANCnt = v26
  return err
}

func (p *DriverData) ReadFieldSCANCnt(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField7(iprot)
}

func (p *DriverData) ReadField8(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v28, err29 := iprot.ReadI32()
  if err29 != nil { return thrift.NewTProtocolExceptionReadField(8, "s_NAKCnt", p.ThriftName(), err29); }
  p.SNAKCnt = v28
  return err
}

func (p *DriverData) ReadFieldSNAKCnt(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField8(iprot)
}

func (p *DriverData) ReadField9(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v30, err31 := iprot.ReadI32()
  if err31 != nil { return thrift.NewTProtocolExceptionReadField(9, "s_ACKCnt", p.ThriftName(), err31); }
  p.SACKCnt = v30
  return err
}

func (p *DriverData) ReadFieldSACKCnt(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField9(iprot)
}

func (p *DriverData) ReadField10(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v32, err33 := iprot.ReadI32()
  if err33 != nil { return thrift.NewTProtocolExceptionReadField(10, "s_OOFCnt", p.ThriftName(), err33); }
  p.SOOFCnt = v32
  return err
}

func (p *DriverData) ReadFieldSOOFCnt(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField10(iprot)
}

func (p *DriverData) ReadField11(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v34, err35 := iprot.ReadI32()
  if err35 != nil { return thrift.NewTProtocolExceptionReadField(11, "s_dropped", p.ThriftName(), err35); }
  p.SDropped = v34
  return err
}

func (p *DriverData) ReadFieldSDropped(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField11(iprot)
}

func (p *DriverData) ReadField12(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v36, err37 := iprot.ReadI32()
  if err37 != nil { return thrift.NewTProtocolExceptionReadField(12, "s_retries", p.ThriftName(), err37); }
  p.SRetries = v36
  return err
}

func (p *DriverData) ReadFieldSRetries(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField12(iprot)
}

func (p *DriverData) ReadField13(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v38, err39 := iprot.ReadI32()
  if err39 != nil { return thrift.NewTProtocolExceptionReadField(13, "s_controllerReadCnt", p.ThriftName(), err39); }
  p.SControllerReadCnt = v38
  return err
}

func (p *DriverData) ReadFieldSControllerReadCnt(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField13(iprot)
}

func (p *DriverData) ReadField14(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v40, err41 := iprot.ReadI32()
  if err41 != nil { return thrift.NewTProtocolExceptionReadField(14, "s_controllerWriteCnt", p.ThriftName(), err41); }
  p.SControllerWriteCnt = v40
  return err
}

func (p *DriverData) ReadFieldSControllerWriteCnt(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField14(iprot)
}

func (p *DriverData) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("DriverData")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = p.WriteField4(oprot)
  if err != nil { return err }
  err = p.WriteField5(oprot)
  if err != nil { return err }
  err = p.WriteField6(oprot)
  if err != nil { return err }
  err = p.WriteField7(oprot)
  if err != nil { return err }
  err = p.WriteField8(oprot)
  if err != nil { return err }
  err = p.WriteField9(oprot)
  if err != nil { return err }
  err = p.WriteField10(oprot)
  if err != nil { return err }
  err = p.WriteField11(oprot)
  if err != nil { return err }
  err = p.WriteField12(oprot)
  if err != nil { return err }
  err = p.WriteField13(oprot)
  if err != nil { return err }
  err = p.WriteField14(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *DriverData) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("s_SOFCnt", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "s_SOFCnt", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.SSOFCnt))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "s_SOFCnt", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "s_SOFCnt", p.ThriftName(), err); }
  return err
}

func (p *DriverData) WriteFieldSSOFCnt(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *DriverData) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("s_ACKWaiting", thrift.I32, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "s_ACKWaiting", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.SACKWaiting))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "s_ACKWaiting", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "s_ACKWaiting", p.ThriftName(), err); }
  return err
}

func (p *DriverData) WriteFieldSACKWaiting(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *DriverData) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("s_readAborts", thrift.I32, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "s_readAborts", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.SReadAborts))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "s_readAborts", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "s_readAborts", p.ThriftName(), err); }
  return err
}

func (p *DriverData) WriteFieldSReadAborts(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *DriverData) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("s_badChecksum", thrift.I32, 4)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "s_badChecksum", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.SBadChecksum))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "s_badChecksum", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "s_badChecksum", p.ThriftName(), err); }
  return err
}

func (p *DriverData) WriteFieldSBadChecksum(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField4(oprot)
}

func (p *DriverData) WriteField5(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("s_readCnt", thrift.I32, 5)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "s_readCnt", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.SReadCnt))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "s_readCnt", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "s_readCnt", p.ThriftName(), err); }
  return err
}

func (p *DriverData) WriteFieldSReadCnt(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField5(oprot)
}

func (p *DriverData) WriteField6(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("s_writeCnt", thrift.I32, 6)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(6, "s_writeCnt", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.SWriteCnt))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(6, "s_writeCnt", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(6, "s_writeCnt", p.ThriftName(), err); }
  return err
}

func (p *DriverData) WriteFieldSWriteCnt(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField6(oprot)
}

func (p *DriverData) WriteField7(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("s_CANCnt", thrift.I32, 7)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(7, "s_CANCnt", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.SCANCnt))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(7, "s_CANCnt", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(7, "s_CANCnt", p.ThriftName(), err); }
  return err
}

func (p *DriverData) WriteFieldSCANCnt(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField7(oprot)
}

func (p *DriverData) WriteField8(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("s_NAKCnt", thrift.I32, 8)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(8, "s_NAKCnt", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.SNAKCnt))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(8, "s_NAKCnt", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(8, "s_NAKCnt", p.ThriftName(), err); }
  return err
}

func (p *DriverData) WriteFieldSNAKCnt(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField8(oprot)
}

func (p *DriverData) WriteField9(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("s_ACKCnt", thrift.I32, 9)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(9, "s_ACKCnt", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.SACKCnt))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(9, "s_ACKCnt", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(9, "s_ACKCnt", p.ThriftName(), err); }
  return err
}

func (p *DriverData) WriteFieldSACKCnt(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField9(oprot)
}

func (p *DriverData) WriteField10(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("s_OOFCnt", thrift.I32, 10)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(10, "s_OOFCnt", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.SOOFCnt))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(10, "s_OOFCnt", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(10, "s_OOFCnt", p.ThriftName(), err); }
  return err
}

func (p *DriverData) WriteFieldSOOFCnt(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField10(oprot)
}

func (p *DriverData) WriteField11(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("s_dropped", thrift.I32, 11)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(11, "s_dropped", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.SDropped))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(11, "s_dropped", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(11, "s_dropped", p.ThriftName(), err); }
  return err
}

func (p *DriverData) WriteFieldSDropped(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField11(oprot)
}

func (p *DriverData) WriteField12(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("s_retries", thrift.I32, 12)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(12, "s_retries", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.SRetries))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(12, "s_retries", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(12, "s_retries", p.ThriftName(), err); }
  return err
}

func (p *DriverData) WriteFieldSRetries(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField12(oprot)
}

func (p *DriverData) WriteField13(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("s_controllerReadCnt", thrift.I32, 13)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(13, "s_controllerReadCnt", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.SControllerReadCnt))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(13, "s_controllerReadCnt", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(13, "s_controllerReadCnt", p.ThriftName(), err); }
  return err
}

func (p *DriverData) WriteFieldSControllerReadCnt(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField13(oprot)
}

func (p *DriverData) WriteField14(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("s_controllerWriteCnt", thrift.I32, 14)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(14, "s_controllerWriteCnt", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.SControllerWriteCnt))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(14, "s_controllerWriteCnt", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(14, "s_controllerWriteCnt", p.ThriftName(), err); }
  return err
}

func (p *DriverData) WriteFieldSControllerWriteCnt(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField14(oprot)
}

func (p *DriverData) TStructName() string {
  return "DriverData"
}

func (p *DriverData) ThriftName() string {
  return "DriverData"
}

func (p *DriverData) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DriverData(%+v)", *p)
}

func (p *DriverData) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*DriverData)
  if !ok {
    return 0, false
  }
  if p.SSOFCnt != data.SSOFCnt {
    if p.SSOFCnt < data.SSOFCnt {
      return -1, true
    }
    return 1, true
  }
  if p.SACKWaiting != data.SACKWaiting {
    if p.SACKWaiting < data.SACKWaiting {
      return -1, true
    }
    return 1, true
  }
  if p.SReadAborts != data.SReadAborts {
    if p.SReadAborts < data.SReadAborts {
      return -1, true
    }
    return 1, true
  }
  if p.SBadChecksum != data.SBadChecksum {
    if p.SBadChecksum < data.SBadChecksum {
      return -1, true
    }
    return 1, true
  }
  if p.SReadCnt != data.SReadCnt {
    if p.SReadCnt < data.SReadCnt {
      return -1, true
    }
    return 1, true
  }
  if p.SWriteCnt != data.SWriteCnt {
    if p.SWriteCnt < data.SWriteCnt {
      return -1, true
    }
    return 1, true
  }
  if p.SCANCnt != data.SCANCnt {
    if p.SCANCnt < data.SCANCnt {
      return -1, true
    }
    return 1, true
  }
  if p.SNAKCnt != data.SNAKCnt {
    if p.SNAKCnt < data.SNAKCnt {
      return -1, true
    }
    return 1, true
  }
  if p.SACKCnt != data.SACKCnt {
    if p.SACKCnt < data.SACKCnt {
      return -1, true
    }
    return 1, true
  }
  if p.SOOFCnt != data.SOOFCnt {
    if p.SOOFCnt < data.SOOFCnt {
      return -1, true
    }
    return 1, true
  }
  if p.SDropped != data.SDropped {
    if p.SDropped < data.SDropped {
      return -1, true
    }
    return 1, true
  }
  if p.SRetries != data.SRetries {
    if p.SRetries < data.SRetries {
      return -1, true
    }
    return 1, true
  }
  if p.SControllerReadCnt != data.SControllerReadCnt {
    if p.SControllerReadCnt < data.SControllerReadCnt {
      return -1, true
    }
    return 1, true
  }
  if p.SControllerWriteCnt != data.SControllerWriteCnt {
    if p.SControllerWriteCnt < data.SControllerWriteCnt {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *DriverData) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.SSOFCnt
  case 2: return p.SACKWaiting
  case 3: return p.SReadAborts
  case 4: return p.SBadChecksum
  case 5: return p.SReadCnt
  case 6: return p.SWriteCnt
  case 7: return p.SCANCnt
  case 8: return p.SNAKCnt
  case 9: return p.SACKCnt
  case 10: return p.SOOFCnt
  case 11: return p.SDropped
  case 12: return p.SRetries
  case 13: return p.SControllerReadCnt
  case 14: return p.SControllerWriteCnt
  }
  return nil
}

func (p *DriverData) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("s_SOFCnt", thrift.I32, 1),
    thrift.NewTField("s_ACKWaiting", thrift.I32, 2),
    thrift.NewTField("s_readAborts", thrift.I32, 3),
    thrift.NewTField("s_badChecksum", thrift.I32, 4),
    thrift.NewTField("s_readCnt", thrift.I32, 5),
    thrift.NewTField("s_writeCnt", thrift.I32, 6),
    thrift.NewTField("s_CANCnt", thrift.I32, 7),
    thrift.NewTField("s_NAKCnt", thrift.I32, 8),
    thrift.NewTField("s_ACKCnt", thrift.I32, 9),
    thrift.NewTField("s_OOFCnt", thrift.I32, 10),
    thrift.NewTField("s_dropped", thrift.I32, 11),
    thrift.NewTField("s_retries", thrift.I32, 12),
    thrift.NewTField("s_controllerReadCnt", thrift.I32, 13),
    thrift.NewTField("s_controllerWriteCnt", thrift.I32, 14),
    })
}

/**
 * Attributes:
 *  - _data
 */
type GetDriverStatisticsReturnStruct struct {
  thrift.TStruct
  _data *DriverData "_data"; // 1
}

func NewGetDriverStatisticsReturnStruct() *GetDriverStatisticsReturnStruct {
  output := &GetDriverStatisticsReturnStruct{
    TStruct:thrift.NewTStruct("GetDriverStatisticsReturnStruct", []thrift.TField{
    thrift.NewTField("_data", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetDriverStatisticsReturnStruct) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_data" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetDriverStatisticsReturnStruct) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p._data = NewDriverData()
  err44 := p._data.Read(iprot)
  if err44 != nil { return thrift.NewTProtocolExceptionReadStruct("p._dataDriverData", err44); }
  return err
}

func (p *GetDriverStatisticsReturnStruct) ReadField_data(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetDriverStatisticsReturnStruct) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetDriverStatisticsReturnStruct")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetDriverStatisticsReturnStruct) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._data != nil {
    err = oprot.WriteFieldBegin("_data", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_data", p.ThriftName(), err); }
    err = p._data.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("DriverData", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_data", p.ThriftName(), err); }
  }
  return err
}

func (p *GetDriverStatisticsReturnStruct) WriteField_data(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetDriverStatisticsReturnStruct) TStructName() string {
  return "GetDriverStatisticsReturnStruct"
}

func (p *GetDriverStatisticsReturnStruct) ThriftName() string {
  return "GetDriverStatisticsReturnStruct"
}

func (p *GetDriverStatisticsReturnStruct) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetDriverStatisticsReturnStruct(%+v)", *p)
}

func (p *GetDriverStatisticsReturnStruct) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetDriverStatisticsReturnStruct)
  if !ok {
    return 0, false
  }
  if cmp, ok := p._data.CompareTo(data._data); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetDriverStatisticsReturnStruct) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._data
  }
  return nil
}

func (p *GetDriverStatisticsReturnStruct) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_data", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - MCommandClassId
 *  - MSentCnt
 *  - MReceivedCnt
 */
type CommandClassData struct {
  thrift.TStruct
  MCommandClassId byte "m_commandClassId"; // 1
  MSentCnt int32 "m_sentCnt"; // 2
  MReceivedCnt int32 "m_receivedCnt"; // 3
}

func NewCommandClassData() *CommandClassData {
  output := &CommandClassData{
    TStruct:thrift.NewTStruct("CommandClassData", []thrift.TField{
    thrift.NewTField("m_commandClassId", thrift.BYTE, 1),
    thrift.NewTField("m_sentCnt", thrift.I32, 2),
    thrift.NewTField("m_receivedCnt", thrift.I32, 3),
    }),
  }
  {
  }
  return output
}

func (p *CommandClassData) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "m_commandClassId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "m_sentCnt" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "m_receivedCnt" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *CommandClassData) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v45, err46 := iprot.ReadByte()
  if err46 != nil { return thrift.NewTProtocolExceptionReadField(1, "m_commandClassId", p.ThriftName(), err46); }
  p.MCommandClassId = v45
  return err
}

func (p *CommandClassData) ReadFieldMCommandClassId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *CommandClassData) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v47, err48 := iprot.ReadI32()
  if err48 != nil { return thrift.NewTProtocolExceptionReadField(2, "m_sentCnt", p.ThriftName(), err48); }
  p.MSentCnt = v47
  return err
}

func (p *CommandClassData) ReadFieldMSentCnt(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *CommandClassData) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v49, err50 := iprot.ReadI32()
  if err50 != nil { return thrift.NewTProtocolExceptionReadField(3, "m_receivedCnt", p.ThriftName(), err50); }
  p.MReceivedCnt = v49
  return err
}

func (p *CommandClassData) ReadFieldMReceivedCnt(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *CommandClassData) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("CommandClassData")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *CommandClassData) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("m_commandClassId", thrift.BYTE, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "m_commandClassId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p.MCommandClassId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "m_commandClassId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "m_commandClassId", p.ThriftName(), err); }
  return err
}

func (p *CommandClassData) WriteFieldMCommandClassId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *CommandClassData) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("m_sentCnt", thrift.I32, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "m_sentCnt", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.MSentCnt))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "m_sentCnt", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "m_sentCnt", p.ThriftName(), err); }
  return err
}

func (p *CommandClassData) WriteFieldMSentCnt(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *CommandClassData) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("m_receivedCnt", thrift.I32, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "m_receivedCnt", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.MReceivedCnt))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "m_receivedCnt", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "m_receivedCnt", p.ThriftName(), err); }
  return err
}

func (p *CommandClassData) WriteFieldMReceivedCnt(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *CommandClassData) TStructName() string {
  return "CommandClassData"
}

func (p *CommandClassData) ThriftName() string {
  return "CommandClassData"
}

func (p *CommandClassData) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CommandClassData(%+v)", *p)
}

func (p *CommandClassData) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*CommandClassData)
  if !ok {
    return 0, false
  }
  if p.MCommandClassId != data.MCommandClassId {
    if p.MCommandClassId < data.MCommandClassId {
      return -1, true
    }
    return 1, true
  }
  if p.MSentCnt != data.MSentCnt {
    if p.MSentCnt < data.MSentCnt {
      return -1, true
    }
    return 1, true
  }
  if p.MReceivedCnt != data.MReceivedCnt {
    if p.MReceivedCnt < data.MReceivedCnt {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *CommandClassData) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.MCommandClassId
  case 2: return p.MSentCnt
  case 3: return p.MReceivedCnt
  }
  return nil
}

func (p *CommandClassData) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("m_commandClassId", thrift.BYTE, 1),
    thrift.NewTField("m_sentCnt", thrift.I32, 2),
    thrift.NewTField("m_receivedCnt", thrift.I32, 3),
    })
}

/**
 * Attributes:
 *  - MSentCnt
 *  - MSentFailed
 *  - MRetries
 *  - MReceivedCnt
 *  - MReceivedDups
 *  - MRtt
 *  - MSentTS
 *  - MReceivedTS
 *  - MLastRTT
 *  - MAverageRTT
 *  - MQuality
 *  - MLastReceivedMessage
 *  - MCcData
 */
type NodeData struct {
  thrift.TStruct
  MSentCnt int32 "m_sentCnt"; // 1
  MSentFailed int32 "m_sentFailed"; // 2
  MRetries int32 "m_retries"; // 3
  MReceivedCnt int32 "m_receivedCnt"; // 4
  MReceivedDups int32 "m_receivedDups"; // 5
  MRtt int32 "m_rtt"; // 6
  MSentTS string "m_sentTS"; // 7
  MReceivedTS string "m_receivedTS"; // 8
  MLastRTT int32 "m_lastRTT"; // 9
  MAverageRTT int32 "m_averageRTT"; // 10
  MQuality byte "m_quality"; // 11
  MLastReceivedMessage thrift.TList "m_lastReceivedMessage"; // 12
  MCcData thrift.TList "m_ccData"; // 13
}

func NewNodeData() *NodeData {
  output := &NodeData{
    TStruct:thrift.NewTStruct("NodeData", []thrift.TField{
    thrift.NewTField("m_sentCnt", thrift.I32, 1),
    thrift.NewTField("m_sentFailed", thrift.I32, 2),
    thrift.NewTField("m_retries", thrift.I32, 3),
    thrift.NewTField("m_receivedCnt", thrift.I32, 4),
    thrift.NewTField("m_receivedDups", thrift.I32, 5),
    thrift.NewTField("m_rtt", thrift.I32, 6),
    thrift.NewTField("m_sentTS", thrift.STRING, 7),
    thrift.NewTField("m_receivedTS", thrift.STRING, 8),
    thrift.NewTField("m_lastRTT", thrift.I32, 9),
    thrift.NewTField("m_averageRTT", thrift.I32, 10),
    thrift.NewTField("m_quality", thrift.BYTE, 11),
    thrift.NewTField("m_lastReceivedMessage", thrift.LIST, 12),
    thrift.NewTField("m_ccData", thrift.LIST, 13),
    }),
  }
  {
  }
  return output
}

func (p *NodeData) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "m_sentCnt" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "m_sentFailed" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "m_retries" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 4 || fieldName == "m_receivedCnt" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 5 || fieldName == "m_receivedDups" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField5(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField5(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 6 || fieldName == "m_rtt" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField6(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField6(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 7 || fieldName == "m_sentTS" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField7(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField7(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 8 || fieldName == "m_receivedTS" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField8(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField8(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 9 || fieldName == "m_lastRTT" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField9(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField9(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 10 || fieldName == "m_averageRTT" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField10(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField10(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 11 || fieldName == "m_quality" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField11(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField11(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 12 || fieldName == "m_lastReceivedMessage" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField12(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField12(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 13 || fieldName == "m_ccData" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField13(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField13(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *NodeData) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v51, err52 := iprot.ReadI32()
  if err52 != nil { return thrift.NewTProtocolExceptionReadField(1, "m_sentCnt", p.ThriftName(), err52); }
  p.MSentCnt = v51
  return err
}

func (p *NodeData) ReadFieldMSentCnt(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *NodeData) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v53, err54 := iprot.ReadI32()
  if err54 != nil { return thrift.NewTProtocolExceptionReadField(2, "m_sentFailed", p.ThriftName(), err54); }
  p.MSentFailed = v53
  return err
}

func (p *NodeData) ReadFieldMSentFailed(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *NodeData) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v55, err56 := iprot.ReadI32()
  if err56 != nil { return thrift.NewTProtocolExceptionReadField(3, "m_retries", p.ThriftName(), err56); }
  p.MRetries = v55
  return err
}

func (p *NodeData) ReadFieldMRetries(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *NodeData) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v57, err58 := iprot.ReadI32()
  if err58 != nil { return thrift.NewTProtocolExceptionReadField(4, "m_receivedCnt", p.ThriftName(), err58); }
  p.MReceivedCnt = v57
  return err
}

func (p *NodeData) ReadFieldMReceivedCnt(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField4(iprot)
}

func (p *NodeData) ReadField5(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v59, err60 := iprot.ReadI32()
  if err60 != nil { return thrift.NewTProtocolExceptionReadField(5, "m_receivedDups", p.ThriftName(), err60); }
  p.MReceivedDups = v59
  return err
}

func (p *NodeData) ReadFieldMReceivedDups(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField5(iprot)
}

func (p *NodeData) ReadField6(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v61, err62 := iprot.ReadI32()
  if err62 != nil { return thrift.NewTProtocolExceptionReadField(6, "m_rtt", p.ThriftName(), err62); }
  p.MRtt = v61
  return err
}

func (p *NodeData) ReadFieldMRtt(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField6(iprot)
}

func (p *NodeData) ReadField7(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v63, err64 := iprot.ReadString()
  if err64 != nil { return thrift.NewTProtocolExceptionReadField(7, "m_sentTS", p.ThriftName(), err64); }
  p.MSentTS = v63
  return err
}

func (p *NodeData) ReadFieldMSentTS(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField7(iprot)
}

func (p *NodeData) ReadField8(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v65, err66 := iprot.ReadString()
  if err66 != nil { return thrift.NewTProtocolExceptionReadField(8, "m_receivedTS", p.ThriftName(), err66); }
  p.MReceivedTS = v65
  return err
}

func (p *NodeData) ReadFieldMReceivedTS(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField8(iprot)
}

func (p *NodeData) ReadField9(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v67, err68 := iprot.ReadI32()
  if err68 != nil { return thrift.NewTProtocolExceptionReadField(9, "m_lastRTT", p.ThriftName(), err68); }
  p.MLastRTT = v67
  return err
}

func (p *NodeData) ReadFieldMLastRTT(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField9(iprot)
}

func (p *NodeData) ReadField10(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v69, err70 := iprot.ReadI32()
  if err70 != nil { return thrift.NewTProtocolExceptionReadField(10, "m_averageRTT", p.ThriftName(), err70); }
  p.MAverageRTT = v69
  return err
}

func (p *NodeData) ReadFieldMAverageRTT(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField10(iprot)
}

func (p *NodeData) ReadField11(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v71, err72 := iprot.ReadByte()
  if err72 != nil { return thrift.NewTProtocolExceptionReadField(11, "m_quality", p.ThriftName(), err72); }
  p.MQuality = v71
  return err
}

func (p *NodeData) ReadFieldMQuality(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField11(iprot)
}

func (p *NodeData) ReadField12(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype78, _size75, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.MLastReceivedMessage", "", err)
  }
  p.MLastReceivedMessage = thrift.NewTList(_etype78, _size75)
  for _i79:= 0; _i79 < _size75; _i79++ {
    v81, err82 := iprot.ReadByte()
    if err82 != nil { return thrift.NewTProtocolExceptionReadField(0, "_elem80", "", err82); }
    _elem80 := v81
    p.MLastReceivedMessage.Push(_elem80)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *NodeData) ReadFieldMLastReceivedMessage(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField12(iprot)
}

func (p *NodeData) ReadField13(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype88, _size85, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.MCcData", "", err)
  }
  p.MCcData = thrift.NewTList(_etype88, _size85)
  for _i89:= 0; _i89 < _size85; _i89++ {
    _elem90 := NewCommandClassData()
    err93 := _elem90.Read(iprot)
    if err93 != nil { return thrift.NewTProtocolExceptionReadStruct("_elem90CommandClassData", err93); }
    p.MCcData.Push(_elem90)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *NodeData) ReadFieldMCcData(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField13(iprot)
}

func (p *NodeData) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("NodeData")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = p.WriteField4(oprot)
  if err != nil { return err }
  err = p.WriteField5(oprot)
  if err != nil { return err }
  err = p.WriteField6(oprot)
  if err != nil { return err }
  err = p.WriteField7(oprot)
  if err != nil { return err }
  err = p.WriteField8(oprot)
  if err != nil { return err }
  err = p.WriteField9(oprot)
  if err != nil { return err }
  err = p.WriteField10(oprot)
  if err != nil { return err }
  err = p.WriteField11(oprot)
  if err != nil { return err }
  err = p.WriteField12(oprot)
  if err != nil { return err }
  err = p.WriteField13(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *NodeData) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("m_sentCnt", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "m_sentCnt", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.MSentCnt))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "m_sentCnt", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "m_sentCnt", p.ThriftName(), err); }
  return err
}

func (p *NodeData) WriteFieldMSentCnt(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *NodeData) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("m_sentFailed", thrift.I32, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "m_sentFailed", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.MSentFailed))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "m_sentFailed", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "m_sentFailed", p.ThriftName(), err); }
  return err
}

func (p *NodeData) WriteFieldMSentFailed(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *NodeData) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("m_retries", thrift.I32, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "m_retries", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.MRetries))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "m_retries", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "m_retries", p.ThriftName(), err); }
  return err
}

func (p *NodeData) WriteFieldMRetries(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *NodeData) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("m_receivedCnt", thrift.I32, 4)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "m_receivedCnt", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.MReceivedCnt))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "m_receivedCnt", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "m_receivedCnt", p.ThriftName(), err); }
  return err
}

func (p *NodeData) WriteFieldMReceivedCnt(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField4(oprot)
}

func (p *NodeData) WriteField5(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("m_receivedDups", thrift.I32, 5)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "m_receivedDups", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.MReceivedDups))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "m_receivedDups", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "m_receivedDups", p.ThriftName(), err); }
  return err
}

func (p *NodeData) WriteFieldMReceivedDups(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField5(oprot)
}

func (p *NodeData) WriteField6(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("m_rtt", thrift.I32, 6)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(6, "m_rtt", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.MRtt))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(6, "m_rtt", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(6, "m_rtt", p.ThriftName(), err); }
  return err
}

func (p *NodeData) WriteFieldMRtt(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField6(oprot)
}

func (p *NodeData) WriteField7(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("m_sentTS", thrift.STRING, 7)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(7, "m_sentTS", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.MSentTS))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(7, "m_sentTS", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(7, "m_sentTS", p.ThriftName(), err); }
  return err
}

func (p *NodeData) WriteFieldMSentTS(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField7(oprot)
}

func (p *NodeData) WriteField8(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("m_receivedTS", thrift.STRING, 8)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(8, "m_receivedTS", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.MReceivedTS))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(8, "m_receivedTS", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(8, "m_receivedTS", p.ThriftName(), err); }
  return err
}

func (p *NodeData) WriteFieldMReceivedTS(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField8(oprot)
}

func (p *NodeData) WriteField9(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("m_lastRTT", thrift.I32, 9)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(9, "m_lastRTT", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.MLastRTT))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(9, "m_lastRTT", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(9, "m_lastRTT", p.ThriftName(), err); }
  return err
}

func (p *NodeData) WriteFieldMLastRTT(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField9(oprot)
}

func (p *NodeData) WriteField10(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("m_averageRTT", thrift.I32, 10)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(10, "m_averageRTT", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.MAverageRTT))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(10, "m_averageRTT", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(10, "m_averageRTT", p.ThriftName(), err); }
  return err
}

func (p *NodeData) WriteFieldMAverageRTT(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField10(oprot)
}

func (p *NodeData) WriteField11(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("m_quality", thrift.BYTE, 11)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(11, "m_quality", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p.MQuality))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(11, "m_quality", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(11, "m_quality", p.ThriftName(), err); }
  return err
}

func (p *NodeData) WriteFieldMQuality(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField11(oprot)
}

func (p *NodeData) WriteField12(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.MLastReceivedMessage != nil {
    err = oprot.WriteFieldBegin("m_lastReceivedMessage", thrift.LIST, 12)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(12, "m_lastReceivedMessage", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.BYTE, p.MLastReceivedMessage.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter94 := range p.MLastReceivedMessage.Iter() {
      Iter95 := Iter94.(byte)
      err = oprot.WriteByte(byte(Iter95))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Iter95", "", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(12, "m_lastReceivedMessage", p.ThriftName(), err); }
  }
  return err
}

func (p *NodeData) WriteFieldMLastReceivedMessage(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField12(oprot)
}

func (p *NodeData) WriteField13(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.MCcData != nil {
    err = oprot.WriteFieldBegin("m_ccData", thrift.LIST, 13)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(13, "m_ccData", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRUCT, p.MCcData.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter96 := range p.MCcData.Iter() {
      Iter97 := Iter96.(*CommandClassData)
      err = Iter97.Write(oprot)
      if err != nil { return thrift.NewTProtocolExceptionWriteStruct("CommandClassData", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(13, "m_ccData", p.ThriftName(), err); }
  }
  return err
}

func (p *NodeData) WriteFieldMCcData(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField13(oprot)
}

func (p *NodeData) TStructName() string {
  return "NodeData"
}

func (p *NodeData) ThriftName() string {
  return "NodeData"
}

func (p *NodeData) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("NodeData(%+v)", *p)
}

func (p *NodeData) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*NodeData)
  if !ok {
    return 0, false
  }
  if p.MSentCnt != data.MSentCnt {
    if p.MSentCnt < data.MSentCnt {
      return -1, true
    }
    return 1, true
  }
  if p.MSentFailed != data.MSentFailed {
    if p.MSentFailed < data.MSentFailed {
      return -1, true
    }
    return 1, true
  }
  if p.MRetries != data.MRetries {
    if p.MRetries < data.MRetries {
      return -1, true
    }
    return 1, true
  }
  if p.MReceivedCnt != data.MReceivedCnt {
    if p.MReceivedCnt < data.MReceivedCnt {
      return -1, true
    }
    return 1, true
  }
  if p.MReceivedDups != data.MReceivedDups {
    if p.MReceivedDups < data.MReceivedDups {
      return -1, true
    }
    return 1, true
  }
  if p.MRtt != data.MRtt {
    if p.MRtt < data.MRtt {
      return -1, true
    }
    return 1, true
  }
  if p.MSentTS != data.MSentTS {
    if p.MSentTS < data.MSentTS {
      return -1, true
    }
    return 1, true
  }
  if p.MReceivedTS != data.MReceivedTS {
    if p.MReceivedTS < data.MReceivedTS {
      return -1, true
    }
    return 1, true
  }
  if p.MLastRTT != data.MLastRTT {
    if p.MLastRTT < data.MLastRTT {
      return -1, true
    }
    return 1, true
  }
  if p.MAverageRTT != data.MAverageRTT {
    if p.MAverageRTT < data.MAverageRTT {
      return -1, true
    }
    return 1, true
  }
  if p.MQuality != data.MQuality {
    if p.MQuality < data.MQuality {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.MLastReceivedMessage.CompareTo(data.MLastReceivedMessage); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.MCcData.CompareTo(data.MCcData); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *NodeData) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.MSentCnt
  case 2: return p.MSentFailed
  case 3: return p.MRetries
  case 4: return p.MReceivedCnt
  case 5: return p.MReceivedDups
  case 6: return p.MRtt
  case 7: return p.MSentTS
  case 8: return p.MReceivedTS
  case 9: return p.MLastRTT
  case 10: return p.MAverageRTT
  case 11: return p.MQuality
  case 12: return p.MLastReceivedMessage
  case 13: return p.MCcData
  }
  return nil
}

func (p *NodeData) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("m_sentCnt", thrift.I32, 1),
    thrift.NewTField("m_sentFailed", thrift.I32, 2),
    thrift.NewTField("m_retries", thrift.I32, 3),
    thrift.NewTField("m_receivedCnt", thrift.I32, 4),
    thrift.NewTField("m_receivedDups", thrift.I32, 5),
    thrift.NewTField("m_rtt", thrift.I32, 6),
    thrift.NewTField("m_sentTS", thrift.STRING, 7),
    thrift.NewTField("m_receivedTS", thrift.STRING, 8),
    thrift.NewTField("m_lastRTT", thrift.I32, 9),
    thrift.NewTField("m_averageRTT", thrift.I32, 10),
    thrift.NewTField("m_quality", thrift.BYTE, 11),
    thrift.NewTField("m_lastReceivedMessage", thrift.LIST, 12),
    thrift.NewTField("m_ccData", thrift.LIST, 13),
    })
}

/**
 * Attributes:
 *  - _data
 */
type GetNodeStatisticsReturnStruct struct {
  thrift.TStruct
  _data *NodeData "_data"; // 1
}

func NewGetNodeStatisticsReturnStruct() *GetNodeStatisticsReturnStruct {
  output := &GetNodeStatisticsReturnStruct{
    TStruct:thrift.NewTStruct("GetNodeStatisticsReturnStruct", []thrift.TField{
    thrift.NewTField("_data", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetNodeStatisticsReturnStruct) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_data" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNodeStatisticsReturnStruct) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p._data = NewNodeData()
  err100 := p._data.Read(iprot)
  if err100 != nil { return thrift.NewTProtocolExceptionReadStruct("p._dataNodeData", err100); }
  return err
}

func (p *GetNodeStatisticsReturnStruct) ReadField_data(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetNodeStatisticsReturnStruct) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetNodeStatisticsReturnStruct")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNodeStatisticsReturnStruct) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._data != nil {
    err = oprot.WriteFieldBegin("_data", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_data", p.ThriftName(), err); }
    err = p._data.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("NodeData", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_data", p.ThriftName(), err); }
  }
  return err
}

func (p *GetNodeStatisticsReturnStruct) WriteField_data(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetNodeStatisticsReturnStruct) TStructName() string {
  return "GetNodeStatisticsReturnStruct"
}

func (p *GetNodeStatisticsReturnStruct) ThriftName() string {
  return "GetNodeStatisticsReturnStruct"
}

func (p *GetNodeStatisticsReturnStruct) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetNodeStatisticsReturnStruct(%+v)", *p)
}

func (p *GetNodeStatisticsReturnStruct) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetNodeStatisticsReturnStruct)
  if !ok {
    return 0, false
  }
  if cmp, ok := p._data.CompareTo(data._data); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetNodeStatisticsReturnStruct) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._data
  }
  return nil
}

func (p *GetNodeStatisticsReturnStruct) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_data", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - Retval
 *  - OHours
 *  - OMinutes
 *  - OSetback
 */
type GetSwitchPointReturnStruct struct {
  thrift.TStruct
  Retval bool "retval"; // 1
  OHours byte "o_hours"; // 2
  OMinutes byte "o_minutes"; // 3
  OSetback byte "o_setback"; // 4
}

func NewGetSwitchPointReturnStruct() *GetSwitchPointReturnStruct {
  output := &GetSwitchPointReturnStruct{
    TStruct:thrift.NewTStruct("GetSwitchPointReturnStruct", []thrift.TField{
    thrift.NewTField("retval", thrift.BOOL, 1),
    thrift.NewTField("o_hours", thrift.BYTE, 2),
    thrift.NewTField("o_minutes", thrift.BYTE, 3),
    thrift.NewTField("o_setback", thrift.BYTE, 4),
    }),
  }
  {
  }
  return output
}

func (p *GetSwitchPointReturnStruct) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "retval" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "o_hours" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "o_minutes" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 4 || fieldName == "o_setback" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetSwitchPointReturnStruct) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v101, err102 := iprot.ReadBool()
  if err102 != nil { return thrift.NewTProtocolExceptionReadField(1, "retval", p.ThriftName(), err102); }
  p.Retval = v101
  return err
}

func (p *GetSwitchPointReturnStruct) ReadFieldRetval(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetSwitchPointReturnStruct) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v103, err104 := iprot.ReadByte()
  if err104 != nil { return thrift.NewTProtocolExceptionReadField(2, "o_hours", p.ThriftName(), err104); }
  p.OHours = v103
  return err
}

func (p *GetSwitchPointReturnStruct) ReadFieldOHours(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *GetSwitchPointReturnStruct) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v105, err106 := iprot.ReadByte()
  if err106 != nil { return thrift.NewTProtocolExceptionReadField(3, "o_minutes", p.ThriftName(), err106); }
  p.OMinutes = v105
  return err
}

func (p *GetSwitchPointReturnStruct) ReadFieldOMinutes(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *GetSwitchPointReturnStruct) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v107, err108 := iprot.ReadByte()
  if err108 != nil { return thrift.NewTProtocolExceptionReadField(4, "o_setback", p.ThriftName(), err108); }
  p.OSetback = v107
  return err
}

func (p *GetSwitchPointReturnStruct) ReadFieldOSetback(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField4(iprot)
}

func (p *GetSwitchPointReturnStruct) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetSwitchPointReturnStruct")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = p.WriteField4(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetSwitchPointReturnStruct) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("retval", thrift.BOOL, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "retval", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Retval))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "retval", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "retval", p.ThriftName(), err); }
  return err
}

func (p *GetSwitchPointReturnStruct) WriteFieldRetval(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetSwitchPointReturnStruct) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("o_hours", thrift.BYTE, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "o_hours", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p.OHours))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "o_hours", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "o_hours", p.ThriftName(), err); }
  return err
}

func (p *GetSwitchPointReturnStruct) WriteFieldOHours(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *GetSwitchPointReturnStruct) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("o_minutes", thrift.BYTE, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "o_minutes", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p.OMinutes))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "o_minutes", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "o_minutes", p.ThriftName(), err); }
  return err
}

func (p *GetSwitchPointReturnStruct) WriteFieldOMinutes(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *GetSwitchPointReturnStruct) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("o_setback", thrift.BYTE, 4)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "o_setback", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p.OSetback))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "o_setback", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "o_setback", p.ThriftName(), err); }
  return err
}

func (p *GetSwitchPointReturnStruct) WriteFieldOSetback(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField4(oprot)
}

func (p *GetSwitchPointReturnStruct) TStructName() string {
  return "GetSwitchPointReturnStruct"
}

func (p *GetSwitchPointReturnStruct) ThriftName() string {
  return "GetSwitchPointReturnStruct"
}

func (p *GetSwitchPointReturnStruct) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetSwitchPointReturnStruct(%+v)", *p)
}

func (p *GetSwitchPointReturnStruct) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetSwitchPointReturnStruct)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Retval, data.Retval); cmp != 0 {
    return cmp, true
  }
  if p.OHours != data.OHours {
    if p.OHours < data.OHours {
      return -1, true
    }
    return 1, true
  }
  if p.OMinutes != data.OMinutes {
    if p.OMinutes < data.OMinutes {
      return -1, true
    }
    return 1, true
  }
  if p.OSetback != data.OSetback {
    if p.OSetback < data.OSetback {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetSwitchPointReturnStruct) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Retval
  case 2: return p.OHours
  case 3: return p.OMinutes
  case 4: return p.OSetback
  }
  return nil
}

func (p *GetSwitchPointReturnStruct) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("retval", thrift.BOOL, 1),
    thrift.NewTField("o_hours", thrift.BYTE, 2),
    thrift.NewTField("o_minutes", thrift.BYTE, 3),
    thrift.NewTField("o_setback", thrift.BYTE, 4),
    })
}

/**
 * Attributes:
 *  - Retval
 *  - OValue
 */
type BoolBool struct {
  thrift.TStruct
  Retval bool "retval"; // 1
  OValue bool "o_value"; // 2
}

func NewBoolBool() *BoolBool {
  output := &BoolBool{
    TStruct:thrift.NewTStruct("Bool_Bool", []thrift.TField{
    thrift.NewTField("retval", thrift.BOOL, 1),
    thrift.NewTField("o_value", thrift.BOOL, 2),
    }),
  }
  {
  }
  return output
}

func (p *BoolBool) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "retval" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "o_value" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *BoolBool) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v109, err110 := iprot.ReadBool()
  if err110 != nil { return thrift.NewTProtocolExceptionReadField(1, "retval", p.ThriftName(), err110); }
  p.Retval = v109
  return err
}

func (p *BoolBool) ReadFieldRetval(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *BoolBool) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v111, err112 := iprot.ReadBool()
  if err112 != nil { return thrift.NewTProtocolExceptionReadField(2, "o_value", p.ThriftName(), err112); }
  p.OValue = v111
  return err
}

func (p *BoolBool) ReadFieldOValue(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *BoolBool) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("Bool_Bool")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *BoolBool) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("retval", thrift.BOOL, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "retval", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Retval))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "retval", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "retval", p.ThriftName(), err); }
  return err
}

func (p *BoolBool) WriteFieldRetval(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *BoolBool) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("o_value", thrift.BOOL, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "o_value", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.OValue))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "o_value", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "o_value", p.ThriftName(), err); }
  return err
}

func (p *BoolBool) WriteFieldOValue(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *BoolBool) TStructName() string {
  return "BoolBool"
}

func (p *BoolBool) ThriftName() string {
  return "Bool_Bool"
}

func (p *BoolBool) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoolBool(%+v)", *p)
}

func (p *BoolBool) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*BoolBool)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Retval, data.Retval); cmp != 0 {
    return cmp, true
  }
  if cmp := thrift.CompareBool(p.OValue, data.OValue); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *BoolBool) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Retval
  case 2: return p.OValue
  }
  return nil
}

func (p *BoolBool) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("retval", thrift.BOOL, 1),
    thrift.NewTField("o_value", thrift.BOOL, 2),
    })
}

/**
 * Attributes:
 *  - Retval
 *  - OValue
 */
type BoolUInt8 struct {
  thrift.TStruct
  Retval bool "retval"; // 1
  OValue byte "o_value"; // 2
}

func NewBoolUInt8() *BoolUInt8 {
  output := &BoolUInt8{
    TStruct:thrift.NewTStruct("Bool_UInt8", []thrift.TField{
    thrift.NewTField("retval", thrift.BOOL, 1),
    thrift.NewTField("o_value", thrift.BYTE, 2),
    }),
  }
  {
  }
  return output
}

func (p *BoolUInt8) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "retval" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "o_value" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *BoolUInt8) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v113, err114 := iprot.ReadBool()
  if err114 != nil { return thrift.NewTProtocolExceptionReadField(1, "retval", p.ThriftName(), err114); }
  p.Retval = v113
  return err
}

func (p *BoolUInt8) ReadFieldRetval(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *BoolUInt8) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v115, err116 := iprot.ReadByte()
  if err116 != nil { return thrift.NewTProtocolExceptionReadField(2, "o_value", p.ThriftName(), err116); }
  p.OValue = v115
  return err
}

func (p *BoolUInt8) ReadFieldOValue(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *BoolUInt8) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("Bool_UInt8")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *BoolUInt8) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("retval", thrift.BOOL, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "retval", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Retval))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "retval", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "retval", p.ThriftName(), err); }
  return err
}

func (p *BoolUInt8) WriteFieldRetval(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *BoolUInt8) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("o_value", thrift.BYTE, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "o_value", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p.OValue))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "o_value", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "o_value", p.ThriftName(), err); }
  return err
}

func (p *BoolUInt8) WriteFieldOValue(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *BoolUInt8) TStructName() string {
  return "BoolUInt8"
}

func (p *BoolUInt8) ThriftName() string {
  return "Bool_UInt8"
}

func (p *BoolUInt8) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoolUInt8(%+v)", *p)
}

func (p *BoolUInt8) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*BoolUInt8)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Retval, data.Retval); cmp != 0 {
    return cmp, true
  }
  if p.OValue != data.OValue {
    if p.OValue < data.OValue {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *BoolUInt8) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Retval
  case 2: return p.OValue
  }
  return nil
}

func (p *BoolUInt8) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("retval", thrift.BOOL, 1),
    thrift.NewTField("o_value", thrift.BYTE, 2),
    })
}

/**
 * Attributes:
 *  - Retval
 *  - OValue
 */
type BoolFloat struct {
  thrift.TStruct
  Retval bool "retval"; // 1
  OValue float64 "o_value"; // 2
}

func NewBoolFloat() *BoolFloat {
  output := &BoolFloat{
    TStruct:thrift.NewTStruct("Bool_Float", []thrift.TField{
    thrift.NewTField("retval", thrift.BOOL, 1),
    thrift.NewTField("o_value", thrift.DOUBLE, 2),
    }),
  }
  {
  }
  return output
}

func (p *BoolFloat) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "retval" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "o_value" {
      if fieldTypeId == thrift.DOUBLE {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *BoolFloat) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v117, err118 := iprot.ReadBool()
  if err118 != nil { return thrift.NewTProtocolExceptionReadField(1, "retval", p.ThriftName(), err118); }
  p.Retval = v117
  return err
}

func (p *BoolFloat) ReadFieldRetval(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *BoolFloat) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v119, err120 := iprot.ReadDouble()
  if err120 != nil { return thrift.NewTProtocolExceptionReadField(2, "o_value", p.ThriftName(), err120); }
  p.OValue = v119
  return err
}

func (p *BoolFloat) ReadFieldOValue(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *BoolFloat) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("Bool_Float")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *BoolFloat) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("retval", thrift.BOOL, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "retval", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Retval))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "retval", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "retval", p.ThriftName(), err); }
  return err
}

func (p *BoolFloat) WriteFieldRetval(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *BoolFloat) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("o_value", thrift.DOUBLE, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "o_value", p.ThriftName(), err); }
  err = oprot.WriteDouble(float64(p.OValue))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "o_value", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "o_value", p.ThriftName(), err); }
  return err
}

func (p *BoolFloat) WriteFieldOValue(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *BoolFloat) TStructName() string {
  return "BoolFloat"
}

func (p *BoolFloat) ThriftName() string {
  return "Bool_Float"
}

func (p *BoolFloat) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoolFloat(%+v)", *p)
}

func (p *BoolFloat) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*BoolFloat)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Retval, data.Retval); cmp != 0 {
    return cmp, true
  }
  if p.OValue != data.OValue {
    if p.OValue < data.OValue {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *BoolFloat) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Retval
  case 2: return p.OValue
  }
  return nil
}

func (p *BoolFloat) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("retval", thrift.BOOL, 1),
    thrift.NewTField("o_value", thrift.DOUBLE, 2),
    })
}

/**
 * Attributes:
 *  - Retval
 *  - OValue
 */
type BoolInt struct {
  thrift.TStruct
  Retval bool "retval"; // 1
  OValue int32 "o_value"; // 2
}

func NewBoolInt() *BoolInt {
  output := &BoolInt{
    TStruct:thrift.NewTStruct("Bool_Int", []thrift.TField{
    thrift.NewTField("retval", thrift.BOOL, 1),
    thrift.NewTField("o_value", thrift.I32, 2),
    }),
  }
  {
  }
  return output
}

func (p *BoolInt) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "retval" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "o_value" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *BoolInt) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v121, err122 := iprot.ReadBool()
  if err122 != nil { return thrift.NewTProtocolExceptionReadField(1, "retval", p.ThriftName(), err122); }
  p.Retval = v121
  return err
}

func (p *BoolInt) ReadFieldRetval(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *BoolInt) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v123, err124 := iprot.ReadI32()
  if err124 != nil { return thrift.NewTProtocolExceptionReadField(2, "o_value", p.ThriftName(), err124); }
  p.OValue = v123
  return err
}

func (p *BoolInt) ReadFieldOValue(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *BoolInt) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("Bool_Int")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *BoolInt) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("retval", thrift.BOOL, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "retval", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Retval))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "retval", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "retval", p.ThriftName(), err); }
  return err
}

func (p *BoolInt) WriteFieldRetval(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *BoolInt) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("o_value", thrift.I32, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "o_value", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.OValue))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "o_value", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "o_value", p.ThriftName(), err); }
  return err
}

func (p *BoolInt) WriteFieldOValue(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *BoolInt) TStructName() string {
  return "BoolInt"
}

func (p *BoolInt) ThriftName() string {
  return "Bool_Int"
}

func (p *BoolInt) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoolInt(%+v)", *p)
}

func (p *BoolInt) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*BoolInt)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Retval, data.Retval); cmp != 0 {
    return cmp, true
  }
  if p.OValue != data.OValue {
    if p.OValue < data.OValue {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *BoolInt) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Retval
  case 2: return p.OValue
  }
  return nil
}

func (p *BoolInt) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("retval", thrift.BOOL, 1),
    thrift.NewTField("o_value", thrift.I32, 2),
    })
}

/**
 * Attributes:
 *  - Retval
 *  - OValue
 */
type BoolInt16 struct {
  thrift.TStruct
  Retval bool "retval"; // 1
  OValue int16 "o_value"; // 2
}

func NewBoolInt16() *BoolInt16 {
  output := &BoolInt16{
    TStruct:thrift.NewTStruct("Bool_Int16", []thrift.TField{
    thrift.NewTField("retval", thrift.BOOL, 1),
    thrift.NewTField("o_value", thrift.I16, 2),
    }),
  }
  {
  }
  return output
}

func (p *BoolInt16) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "retval" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "o_value" {
      if fieldTypeId == thrift.I16 {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *BoolInt16) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v125, err126 := iprot.ReadBool()
  if err126 != nil { return thrift.NewTProtocolExceptionReadField(1, "retval", p.ThriftName(), err126); }
  p.Retval = v125
  return err
}

func (p *BoolInt16) ReadFieldRetval(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *BoolInt16) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v127, err128 := iprot.ReadI16()
  if err128 != nil { return thrift.NewTProtocolExceptionReadField(2, "o_value", p.ThriftName(), err128); }
  p.OValue = v127
  return err
}

func (p *BoolInt16) ReadFieldOValue(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *BoolInt16) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("Bool_Int16")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *BoolInt16) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("retval", thrift.BOOL, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "retval", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Retval))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "retval", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "retval", p.ThriftName(), err); }
  return err
}

func (p *BoolInt16) WriteFieldRetval(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *BoolInt16) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("o_value", thrift.I16, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "o_value", p.ThriftName(), err); }
  err = oprot.WriteI16(int16(p.OValue))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "o_value", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "o_value", p.ThriftName(), err); }
  return err
}

func (p *BoolInt16) WriteFieldOValue(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *BoolInt16) TStructName() string {
  return "BoolInt16"
}

func (p *BoolInt16) ThriftName() string {
  return "Bool_Int16"
}

func (p *BoolInt16) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoolInt16(%+v)", *p)
}

func (p *BoolInt16) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*BoolInt16)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Retval, data.Retval); cmp != 0 {
    return cmp, true
  }
  if p.OValue != data.OValue {
    if p.OValue < data.OValue {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *BoolInt16) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Retval
  case 2: return p.OValue
  }
  return nil
}

func (p *BoolInt16) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("retval", thrift.BOOL, 1),
    thrift.NewTField("o_value", thrift.I16, 2),
    })
}

/**
 * Attributes:
 *  - Retval
 *  - OValue
 */
type BoolString struct {
  thrift.TStruct
  Retval bool "retval"; // 1
  OValue string "o_value"; // 2
}

func NewBoolString() *BoolString {
  output := &BoolString{
    TStruct:thrift.NewTStruct("Bool_String", []thrift.TField{
    thrift.NewTField("retval", thrift.BOOL, 1),
    thrift.NewTField("o_value", thrift.STRING, 2),
    }),
  }
  {
  }
  return output
}

func (p *BoolString) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "retval" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "o_value" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *BoolString) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v129, err130 := iprot.ReadBool()
  if err130 != nil { return thrift.NewTProtocolExceptionReadField(1, "retval", p.ThriftName(), err130); }
  p.Retval = v129
  return err
}

func (p *BoolString) ReadFieldRetval(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *BoolString) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v131, err132 := iprot.ReadString()
  if err132 != nil { return thrift.NewTProtocolExceptionReadField(2, "o_value", p.ThriftName(), err132); }
  p.OValue = v131
  return err
}

func (p *BoolString) ReadFieldOValue(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *BoolString) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("Bool_String")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *BoolString) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("retval", thrift.BOOL, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "retval", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Retval))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "retval", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "retval", p.ThriftName(), err); }
  return err
}

func (p *BoolString) WriteFieldRetval(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *BoolString) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("o_value", thrift.STRING, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "o_value", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.OValue))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "o_value", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "o_value", p.ThriftName(), err); }
  return err
}

func (p *BoolString) WriteFieldOValue(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *BoolString) TStructName() string {
  return "BoolString"
}

func (p *BoolString) ThriftName() string {
  return "Bool_String"
}

func (p *BoolString) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoolString(%+v)", *p)
}

func (p *BoolString) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*BoolString)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Retval, data.Retval); cmp != 0 {
    return cmp, true
  }
  if p.OValue != data.OValue {
    if p.OValue < data.OValue {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *BoolString) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Retval
  case 2: return p.OValue
  }
  return nil
}

func (p *BoolString) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("retval", thrift.BOOL, 1),
    thrift.NewTField("o_value", thrift.STRING, 2),
    })
}

/**
 * Attributes:
 *  - Retval
 *  - OValue
 */
type BoolListString struct {
  thrift.TStruct
  Retval bool "retval"; // 1
  OValue thrift.TList "o_value"; // 2
}

func NewBoolListString() *BoolListString {
  output := &BoolListString{
    TStruct:thrift.NewTStruct("Bool_ListString", []thrift.TField{
    thrift.NewTField("retval", thrift.BOOL, 1),
    thrift.NewTField("o_value", thrift.LIST, 2),
    }),
  }
  {
  }
  return output
}

func (p *BoolListString) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "retval" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "o_value" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *BoolListString) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v133, err134 := iprot.ReadBool()
  if err134 != nil { return thrift.NewTProtocolExceptionReadField(1, "retval", p.ThriftName(), err134); }
  p.Retval = v133
  return err
}

func (p *BoolListString) ReadFieldRetval(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *BoolListString) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype140, _size137, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.OValue", "", err)
  }
  p.OValue = thrift.NewTList(_etype140, _size137)
  for _i141:= 0; _i141 < _size137; _i141++ {
    v143, err144 := iprot.ReadString()
    if err144 != nil { return thrift.NewTProtocolExceptionReadField(0, "_elem142", "", err144); }
    _elem142 := v143
    p.OValue.Push(_elem142)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *BoolListString) ReadFieldOValue(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *BoolListString) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("Bool_ListString")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *BoolListString) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("retval", thrift.BOOL, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "retval", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Retval))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "retval", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "retval", p.ThriftName(), err); }
  return err
}

func (p *BoolListString) WriteFieldRetval(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *BoolListString) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.OValue != nil {
    err = oprot.WriteFieldBegin("o_value", thrift.LIST, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "o_value", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRING, p.OValue.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter145 := range p.OValue.Iter() {
      Iter146 := Iter145.(string)
      err = oprot.WriteString(string(Iter146))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Iter146", "", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "o_value", p.ThriftName(), err); }
  }
  return err
}

func (p *BoolListString) WriteFieldOValue(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *BoolListString) TStructName() string {
  return "BoolListString"
}

func (p *BoolListString) ThriftName() string {
  return "Bool_ListString"
}

func (p *BoolListString) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoolListString(%+v)", *p)
}

func (p *BoolListString) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*BoolListString)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Retval, data.Retval); cmp != 0 {
    return cmp, true
  }
  if cmp, ok := p.OValue.CompareTo(data.OValue); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *BoolListString) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Retval
  case 2: return p.OValue
  }
  return nil
}

func (p *BoolListString) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("retval", thrift.BOOL, 1),
    thrift.NewTField("o_value", thrift.LIST, 2),
    })
}

/**
 * Attributes:
 *  - Retval
 *  - _nodeNeighbors
 */
type UInt32ListByte struct {
  thrift.TStruct
  Retval int32 "retval"; // 1
  _nodeNeighbors thrift.TList "_nodeNeighbors"; // 2
}

func NewUInt32ListByte() *UInt32ListByte {
  output := &UInt32ListByte{
    TStruct:thrift.NewTStruct("UInt32_ListByte", []thrift.TField{
    thrift.NewTField("retval", thrift.I32, 1),
    thrift.NewTField("_nodeNeighbors", thrift.LIST, 2),
    }),
  }
  {
  }
  return output
}

func (p *UInt32ListByte) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "retval" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_nodeNeighbors" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *UInt32ListByte) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v147, err148 := iprot.ReadI32()
  if err148 != nil { return thrift.NewTProtocolExceptionReadField(1, "retval", p.ThriftName(), err148); }
  p.Retval = v147
  return err
}

func (p *UInt32ListByte) ReadFieldRetval(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *UInt32ListByte) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype154, _size151, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p._nodeNeighbors", "", err)
  }
  p._nodeNeighbors = thrift.NewTList(_etype154, _size151)
  for _i155:= 0; _i155 < _size151; _i155++ {
    v157, err158 := iprot.ReadByte()
    if err158 != nil { return thrift.NewTProtocolExceptionReadField(0, "_elem156", "", err158); }
    _elem156 := v157
    p._nodeNeighbors.Push(_elem156)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *UInt32ListByte) ReadField_nodeNeighbors(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *UInt32ListByte) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("UInt32_ListByte")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *UInt32ListByte) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("retval", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "retval", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.Retval))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "retval", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "retval", p.ThriftName(), err); }
  return err
}

func (p *UInt32ListByte) WriteFieldRetval(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *UInt32ListByte) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._nodeNeighbors != nil {
    err = oprot.WriteFieldBegin("_nodeNeighbors", thrift.LIST, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeNeighbors", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.BYTE, p._nodeNeighbors.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter159 := range p._nodeNeighbors.Iter() {
      Iter160 := Iter159.(byte)
      err = oprot.WriteByte(byte(Iter160))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Iter160", "", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeNeighbors", p.ThriftName(), err); }
  }
  return err
}

func (p *UInt32ListByte) WriteField_nodeNeighbors(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *UInt32ListByte) TStructName() string {
  return "UInt32ListByte"
}

func (p *UInt32ListByte) ThriftName() string {
  return "UInt32_ListByte"
}

func (p *UInt32ListByte) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UInt32ListByte(%+v)", *p)
}

func (p *UInt32ListByte) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*UInt32ListByte)
  if !ok {
    return 0, false
  }
  if p.Retval != data.Retval {
    if p.Retval < data.Retval {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p._nodeNeighbors.CompareTo(data._nodeNeighbors); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *UInt32ListByte) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Retval
  case 2: return p._nodeNeighbors
  }
  return nil
}

func (p *UInt32ListByte) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("retval", thrift.I32, 1),
    thrift.NewTField("_nodeNeighbors", thrift.LIST, 2),
    })
}

/**
 * Attributes:
 *  - Retval
 *  - _className
 *  - _classVersion
 */
type BoolGetNodeClassInformation struct {
  thrift.TStruct
  Retval bool "retval"; // 1
  _className string "_className"; // 2
  _classVersion byte "_classVersion"; // 3
}

func NewBoolGetNodeClassInformation() *BoolGetNodeClassInformation {
  output := &BoolGetNodeClassInformation{
    TStruct:thrift.NewTStruct("Bool_GetNodeClassInformation", []thrift.TField{
    thrift.NewTField("retval", thrift.BOOL, 1),
    thrift.NewTField("_className", thrift.STRING, 2),
    thrift.NewTField("_classVersion", thrift.BYTE, 3),
    }),
  }
  {
  }
  return output
}

func (p *BoolGetNodeClassInformation) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "retval" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_className" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "_classVersion" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *BoolGetNodeClassInformation) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v161, err162 := iprot.ReadBool()
  if err162 != nil { return thrift.NewTProtocolExceptionReadField(1, "retval", p.ThriftName(), err162); }
  p.Retval = v161
  return err
}

func (p *BoolGetNodeClassInformation) ReadFieldRetval(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *BoolGetNodeClassInformation) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v163, err164 := iprot.ReadString()
  if err164 != nil { return thrift.NewTProtocolExceptionReadField(2, "_className", p.ThriftName(), err164); }
  p._className = v163
  return err
}

func (p *BoolGetNodeClassInformation) ReadField_className(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *BoolGetNodeClassInformation) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v165, err166 := iprot.ReadByte()
  if err166 != nil { return thrift.NewTProtocolExceptionReadField(3, "_classVersion", p.ThriftName(), err166); }
  p._classVersion = v165
  return err
}

func (p *BoolGetNodeClassInformation) ReadField_classVersion(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *BoolGetNodeClassInformation) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("Bool_GetNodeClassInformation")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *BoolGetNodeClassInformation) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("retval", thrift.BOOL, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "retval", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Retval))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "retval", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "retval", p.ThriftName(), err); }
  return err
}

func (p *BoolGetNodeClassInformation) WriteFieldRetval(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *BoolGetNodeClassInformation) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_className", thrift.STRING, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_className", p.ThriftName(), err); }
  err = oprot.WriteString(string(p._className))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_className", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_className", p.ThriftName(), err); }
  return err
}

func (p *BoolGetNodeClassInformation) WriteField_className(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *BoolGetNodeClassInformation) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_classVersion", thrift.BYTE, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_classVersion", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._classVersion))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_classVersion", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_classVersion", p.ThriftName(), err); }
  return err
}

func (p *BoolGetNodeClassInformation) WriteField_classVersion(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *BoolGetNodeClassInformation) TStructName() string {
  return "BoolGetNodeClassInformation"
}

func (p *BoolGetNodeClassInformation) ThriftName() string {
  return "Bool_GetNodeClassInformation"
}

func (p *BoolGetNodeClassInformation) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoolGetNodeClassInformation(%+v)", *p)
}

func (p *BoolGetNodeClassInformation) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*BoolGetNodeClassInformation)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Retval, data.Retval); cmp != 0 {
    return cmp, true
  }
  if p._className != data._className {
    if p._className < data._className {
      return -1, true
    }
    return 1, true
  }
  if p._classVersion != data._classVersion {
    if p._classVersion < data._classVersion {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *BoolGetNodeClassInformation) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Retval
  case 2: return p._className
  case 3: return p._classVersion
  }
  return nil
}

func (p *BoolGetNodeClassInformation) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("retval", thrift.BOOL, 1),
    thrift.NewTField("_className", thrift.STRING, 2),
    thrift.NewTField("_classVersion", thrift.BYTE, 3),
    })
}

/**
 * Attributes:
 *  - Retval
 *  - OAssociations
 */
type GetAssociationsReturnStruct struct {
  thrift.TStruct
  Retval int32 "retval"; // 1
  OAssociations thrift.TList "o_associations"; // 2
}

func NewGetAssociationsReturnStruct() *GetAssociationsReturnStruct {
  output := &GetAssociationsReturnStruct{
    TStruct:thrift.NewTStruct("GetAssociationsReturnStruct", []thrift.TField{
    thrift.NewTField("retval", thrift.I32, 1),
    thrift.NewTField("o_associations", thrift.LIST, 2),
    }),
  }
  {
  }
  return output
}

func (p *GetAssociationsReturnStruct) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "retval" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "o_associations" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetAssociationsReturnStruct) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v167, err168 := iprot.ReadI32()
  if err168 != nil { return thrift.NewTProtocolExceptionReadField(1, "retval", p.ThriftName(), err168); }
  p.Retval = v167
  return err
}

func (p *GetAssociationsReturnStruct) ReadFieldRetval(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetAssociationsReturnStruct) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype174, _size171, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.OAssociations", "", err)
  }
  p.OAssociations = thrift.NewTList(_etype174, _size171)
  for _i175:= 0; _i175 < _size171; _i175++ {
    v177, err178 := iprot.ReadByte()
    if err178 != nil { return thrift.NewTProtocolExceptionReadField(0, "_elem176", "", err178); }
    _elem176 := v177
    p.OAssociations.Push(_elem176)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *GetAssociationsReturnStruct) ReadFieldOAssociations(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *GetAssociationsReturnStruct) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetAssociationsReturnStruct")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetAssociationsReturnStruct) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("retval", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "retval", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.Retval))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "retval", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "retval", p.ThriftName(), err); }
  return err
}

func (p *GetAssociationsReturnStruct) WriteFieldRetval(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetAssociationsReturnStruct) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.OAssociations != nil {
    err = oprot.WriteFieldBegin("o_associations", thrift.LIST, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "o_associations", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.BYTE, p.OAssociations.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter179 := range p.OAssociations.Iter() {
      Iter180 := Iter179.(byte)
      err = oprot.WriteByte(byte(Iter180))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Iter180", "", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "o_associations", p.ThriftName(), err); }
  }
  return err
}

func (p *GetAssociationsReturnStruct) WriteFieldOAssociations(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *GetAssociationsReturnStruct) TStructName() string {
  return "GetAssociationsReturnStruct"
}

func (p *GetAssociationsReturnStruct) ThriftName() string {
  return "GetAssociationsReturnStruct"
}

func (p *GetAssociationsReturnStruct) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetAssociationsReturnStruct(%+v)", *p)
}

func (p *GetAssociationsReturnStruct) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetAssociationsReturnStruct)
  if !ok {
    return 0, false
  }
  if p.Retval != data.Retval {
    if p.Retval < data.Retval {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.OAssociations.CompareTo(data.OAssociations); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetAssociationsReturnStruct) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Retval
  case 2: return p.OAssociations
  }
  return nil
}

func (p *GetAssociationsReturnStruct) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("retval", thrift.I32, 1),
    thrift.NewTField("o_associations", thrift.LIST, 2),
    })
}

/**
 * Attributes:
 *  - Retval
 *  - _sceneIds
 */
type GetAllScenesReturnStruct struct {
  thrift.TStruct
  Retval byte "retval"; // 1
  _sceneIds thrift.TList "_sceneIds"; // 2
}

func NewGetAllScenesReturnStruct() *GetAllScenesReturnStruct {
  output := &GetAllScenesReturnStruct{
    TStruct:thrift.NewTStruct("GetAllScenesReturnStruct", []thrift.TField{
    thrift.NewTField("retval", thrift.BYTE, 1),
    thrift.NewTField("_sceneIds", thrift.LIST, 2),
    }),
  }
  {
  }
  return output
}

func (p *GetAllScenesReturnStruct) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "retval" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_sceneIds" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetAllScenesReturnStruct) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v181, err182 := iprot.ReadByte()
  if err182 != nil { return thrift.NewTProtocolExceptionReadField(1, "retval", p.ThriftName(), err182); }
  p.Retval = v181
  return err
}

func (p *GetAllScenesReturnStruct) ReadFieldRetval(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetAllScenesReturnStruct) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype188, _size185, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p._sceneIds", "", err)
  }
  p._sceneIds = thrift.NewTList(_etype188, _size185)
  for _i189:= 0; _i189 < _size185; _i189++ {
    v191, err192 := iprot.ReadByte()
    if err192 != nil { return thrift.NewTProtocolExceptionReadField(0, "_elem190", "", err192); }
    _elem190 := v191
    p._sceneIds.Push(_elem190)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *GetAllScenesReturnStruct) ReadField_sceneIds(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *GetAllScenesReturnStruct) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetAllScenesReturnStruct")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetAllScenesReturnStruct) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("retval", thrift.BYTE, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "retval", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p.Retval))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "retval", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "retval", p.ThriftName(), err); }
  return err
}

func (p *GetAllScenesReturnStruct) WriteFieldRetval(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetAllScenesReturnStruct) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._sceneIds != nil {
    err = oprot.WriteFieldBegin("_sceneIds", thrift.LIST, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_sceneIds", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.BYTE, p._sceneIds.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter193 := range p._sceneIds.Iter() {
      Iter194 := Iter193.(byte)
      err = oprot.WriteByte(byte(Iter194))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Iter194", "", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_sceneIds", p.ThriftName(), err); }
  }
  return err
}

func (p *GetAllScenesReturnStruct) WriteField_sceneIds(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *GetAllScenesReturnStruct) TStructName() string {
  return "GetAllScenesReturnStruct"
}

func (p *GetAllScenesReturnStruct) ThriftName() string {
  return "GetAllScenesReturnStruct"
}

func (p *GetAllScenesReturnStruct) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetAllScenesReturnStruct(%+v)", *p)
}

func (p *GetAllScenesReturnStruct) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetAllScenesReturnStruct)
  if !ok {
    return 0, false
  }
  if p.Retval != data.Retval {
    if p.Retval < data.Retval {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p._sceneIds.CompareTo(data._sceneIds); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetAllScenesReturnStruct) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Retval
  case 2: return p._sceneIds
  }
  return nil
}

func (p *GetAllScenesReturnStruct) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("retval", thrift.BYTE, 1),
    thrift.NewTField("_sceneIds", thrift.LIST, 2),
    })
}

/**
 * Attributes:
 *  - Retval
 *  - OValue
 */
type SceneGetValuesReturnStruct struct {
  thrift.TStruct
  Retval int32 "retval"; // 1
  OValue thrift.TList "o_value"; // 2
}

func NewSceneGetValuesReturnStruct() *SceneGetValuesReturnStruct {
  output := &SceneGetValuesReturnStruct{
    TStruct:thrift.NewTStruct("SceneGetValuesReturnStruct", []thrift.TField{
    thrift.NewTField("retval", thrift.I32, 1),
    thrift.NewTField("o_value", thrift.LIST, 2),
    }),
  }
  {
  }
  return output
}

func (p *SceneGetValuesReturnStruct) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "retval" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "o_value" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SceneGetValuesReturnStruct) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v195, err196 := iprot.ReadI32()
  if err196 != nil { return thrift.NewTProtocolExceptionReadField(1, "retval", p.ThriftName(), err196); }
  p.Retval = v195
  return err
}

func (p *SceneGetValuesReturnStruct) ReadFieldRetval(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *SceneGetValuesReturnStruct) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype202, _size199, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.OValue", "", err)
  }
  p.OValue = thrift.NewTList(_etype202, _size199)
  for _i203:= 0; _i203 < _size199; _i203++ {
    _elem204 := NewRemoteValueID()
    err207 := _elem204.Read(iprot)
    if err207 != nil { return thrift.NewTProtocolExceptionReadStruct("_elem204RemoteValueID", err207); }
    p.OValue.Push(_elem204)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *SceneGetValuesReturnStruct) ReadFieldOValue(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *SceneGetValuesReturnStruct) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SceneGetValuesReturnStruct")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SceneGetValuesReturnStruct) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("retval", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "retval", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.Retval))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "retval", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "retval", p.ThriftName(), err); }
  return err
}

func (p *SceneGetValuesReturnStruct) WriteFieldRetval(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *SceneGetValuesReturnStruct) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.OValue != nil {
    err = oprot.WriteFieldBegin("o_value", thrift.LIST, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "o_value", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRUCT, p.OValue.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter208 := range p.OValue.Iter() {
      Iter209 := Iter208.(*RemoteValueID)
      err = Iter209.Write(oprot)
      if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RemoteValueID", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "o_value", p.ThriftName(), err); }
  }
  return err
}

func (p *SceneGetValuesReturnStruct) WriteFieldOValue(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *SceneGetValuesReturnStruct) TStructName() string {
  return "SceneGetValuesReturnStruct"
}

func (p *SceneGetValuesReturnStruct) ThriftName() string {
  return "SceneGetValuesReturnStruct"
}

func (p *SceneGetValuesReturnStruct) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SceneGetValuesReturnStruct(%+v)", *p)
}

func (p *SceneGetValuesReturnStruct) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SceneGetValuesReturnStruct)
  if !ok {
    return 0, false
  }
  if p.Retval != data.Retval {
    if p.Retval < data.Retval {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.OValue.CompareTo(data.OValue); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *SceneGetValuesReturnStruct) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Retval
  case 2: return p.OValue
  }
  return nil
}

func (p *SceneGetValuesReturnStruct) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("retval", thrift.I32, 1),
    thrift.NewTField("o_value", thrift.LIST, 2),
    })
}

func init() {
}

