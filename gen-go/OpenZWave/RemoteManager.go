/* Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package OpenZWave;

import (
        "thrift"
        "fmt"
)

import (
        "os"
)


type IRemoteManager interface {
  /**
   * \name Configuration
   * For saving the Z-Wave network configuration so that the entire network does not need to be
   * polled every time the application starts.
   * 
   * Parameters:
   *  - _homeId
   */
  WriteConfig(_homeId int32) (err os.Error)
  /**
   * \name Drivers
   * Methods for adding and removing drivers and obtaining basic controller information.
   * 
   * Parameters:
   *  - _homeId
   */
  GetControllerNodeId(_homeId int32) (retval155 byte, err os.Error)
  /**
   * Parameters:
   *  - _homeId
   */
  IsPrimaryController(_homeId int32) (retval156 bool, err os.Error)
  /**
   * Parameters:
   *  - _homeId
   */
  IsStaticUpdateController(_homeId int32) (retval157 bool, err os.Error)
  /**
   * Parameters:
   *  - _homeId
   */
  IsBridgeController(_homeId int32) (retval158 bool, err os.Error)
  /**
   * Parameters:
   *  - _homeId
   */
  GetLibraryVersion(_homeId int32) (retval159 string, err os.Error)
  /**
   * Parameters:
   *  - _homeId
   */
  GetLibraryTypeName(_homeId int32) (retval160 string, err os.Error)
  /**
   * Parameters:
   *  - _homeId
   */
  GetSendQueueCount(_homeId int32) (retval161 int32, err os.Error)
  GetPollInterval() (retval162 int32, err os.Error)
  /**
   * Parameters:
   *  - _seconds
   */
  SetPollInterval(_seconds int32) (err os.Error)
  /**
   * Parameters:
   *  - _valueId
   */
  EnablePoll(_valueId *RemoteValueID) (retval164 bool, err os.Error)
  /**
   * Parameters:
   *  - _valueId
   */
  DisablePoll(_valueId *RemoteValueID) (retval165 bool, err os.Error)
  /**
   * Parameters:
   *  - _valueId
   */
  IsPolled(_valueId *RemoteValueID) (retval166 bool, err os.Error)
  /**
   * Parameters:
   *  - _homeId
   *  - _nodeId
   */
  RefreshNodeInfo(_homeId int32, _nodeId byte) (retval167 bool, err os.Error)
  /**
   * Parameters:
   *  - _homeId
   *  - _nodeId
   */
  RequestNodeState(_homeId int32, _nodeId byte) (retval168 bool, err os.Error)
  /**
   * Parameters:
   *  - _homeId
   *  - _nodeId
   */
  RequestNodeDynamic(_homeId int32, _nodeId byte) (retval169 bool, err os.Error)
  /**
   * Parameters:
   *  - _homeId
   *  - _nodeId
   */
  IsNodeListeningDevice(_homeId int32, _nodeId byte) (retval170 bool, err os.Error)
  /**
   * Parameters:
   *  - _homeId
   *  - _nodeId
   */
  IsNodeFrequentListeningDevice(_homeId int32, _nodeId byte) (retval171 bool, err os.Error)
  /**
   * Parameters:
   *  - _homeId
   *  - _nodeId
   */
  IsNodeBeamingDevice(_homeId int32, _nodeId byte) (retval172 bool, err os.Error)
  /**
   * Parameters:
   *  - _homeId
   *  - _nodeId
   */
  IsNodeRoutingDevice(_homeId int32, _nodeId byte) (retval173 bool, err os.Error)
  /**
   * Parameters:
   *  - _homeId
   *  - _nodeId
   */
  IsNodeSecurityDevice(_homeId int32, _nodeId byte) (retval174 bool, err os.Error)
  /**
   * Parameters:
   *  - _homeId
   *  - _nodeId
   */
  GetNodeMaxBaudRate(_homeId int32, _nodeId byte) (retval175 int32, err os.Error)
  /**
   * Parameters:
   *  - _homeId
   *  - _nodeId
   */
  GetNodeVersion(_homeId int32, _nodeId byte) (retval176 byte, err os.Error)
  /**
   * Parameters:
   *  - _homeId
   *  - _nodeId
   */
  GetNodeBasic(_homeId int32, _nodeId byte) (retval177 byte, err os.Error)
  /**
   * Parameters:
   *  - _homeId
   *  - _nodeId
   */
  GetNodeGeneric(_homeId int32, _nodeId byte) (retval178 byte, err os.Error)
  /**
   * Parameters:
   *  - _homeId
   *  - _nodeId
   */
  GetNodeSpecific(_homeId int32, _nodeId byte) (retval179 byte, err os.Error)
  /**
   * Parameters:
   *  - _homeId
   *  - _nodeId
   */
  GetNodeType(_homeId int32, _nodeId byte) (retval180 string, err os.Error)
  /**
   * Parameters:
   *  - _homeId
   *  - _nodeId
   */
  GetNodeNeighbors(_homeId int32, _nodeId byte) (retval181 *UInt32ListByte, err os.Error)
  /**
   * Parameters:
   *  - _homeId
   *  - _nodeId
   */
  GetNodeManufacturerName(_homeId int32, _nodeId byte) (retval182 string, err os.Error)
  /**
   * Parameters:
   *  - _homeId
   *  - _nodeId
   */
  GetNodeProductName(_homeId int32, _nodeId byte) (retval183 string, err os.Error)
  /**
   * Parameters:
   *  - _homeId
   *  - _nodeId
   */
  GetNodeName(_homeId int32, _nodeId byte) (retval184 string, err os.Error)
  /**
   * Parameters:
   *  - _homeId
   *  - _nodeId
   */
  GetNodeLocation(_homeId int32, _nodeId byte) (retval185 string, err os.Error)
  /**
   * Parameters:
   *  - _homeId
   *  - _nodeId
   */
  GetNodeManufacturerId(_homeId int32, _nodeId byte) (retval186 string, err os.Error)
  /**
   * Parameters:
   *  - _homeId
   *  - _nodeId
   */
  GetNodeProductType(_homeId int32, _nodeId byte) (retval187 string, err os.Error)
  /**
   * Parameters:
   *  - _homeId
   *  - _nodeId
   */
  GetNodeProductId(_homeId int32, _nodeId byte) (retval188 string, err os.Error)
  /**
   * Parameters:
   *  - _homeId
   *  - _nodeId
   *  - _manufacturerName
   */
  SetNodeManufacturerName(_homeId int32, _nodeId byte, _manufacturerName string) (err os.Error)
  /**
   * Parameters:
   *  - _homeId
   *  - _nodeId
   *  - _productName
   */
  SetNodeProductName(_homeId int32, _nodeId byte, _productName string) (err os.Error)
  /**
   * Parameters:
   *  - _homeId
   *  - _nodeId
   *  - _nodeName
   */
  SetNodeName(_homeId int32, _nodeId byte, _nodeName string) (err os.Error)
  /**
   * Parameters:
   *  - _homeId
   *  - _nodeId
   *  - _location
   */
  SetNodeLocation(_homeId int32, _nodeId byte, _location string) (err os.Error)
  /**
   * Parameters:
   *  - _homeId
   *  - _nodeId
   */
  SetNodeOn(_homeId int32, _nodeId byte) (err os.Error)
  /**
   * Parameters:
   *  - _homeId
   *  - _nodeId
   */
  SetNodeOff(_homeId int32, _nodeId byte) (err os.Error)
  /**
   * Parameters:
   *  - _homeId
   *  - _nodeId
   *  - _level
   */
  SetNodeLevel(_homeId int32, _nodeId byte, _level byte) (err os.Error)
  /**
   * Parameters:
   *  - _homeId
   *  - _nodeId
   */
  IsNodeInfoReceived(_homeId int32, _nodeId byte) (retval196 bool, err os.Error)
  /**
   * Parameters:
   *  - _homeId
   *  - _nodeId
   *  - _commandClassId
   */
  GetNodeClassInformation(_homeId int32, _nodeId byte, _commandClassId byte) (retval197 *BoolGetNodeClassInformation, err os.Error)
  /**
   * Parameters:
   *  - _id
   */
  GetValueLabel(_id *RemoteValueID) (retval198 string, err os.Error)
  /**
   * Parameters:
   *  - _id
   *  - _value
   */
  SetValueLabel(_id *RemoteValueID, _value string) (err os.Error)
  /**
   * Parameters:
   *  - _id
   */
  GetValueUnits(_id *RemoteValueID) (retval200 string, err os.Error)
  /**
   * Parameters:
   *  - _id
   *  - _value
   */
  SetValueUnits(_id *RemoteValueID, _value string) (err os.Error)
  /**
   * Parameters:
   *  - _id
   */
  GetValueHelp(_id *RemoteValueID) (retval202 string, err os.Error)
  /**
   * Parameters:
   *  - _id
   *  - _value
   */
  SetValueHelp(_id *RemoteValueID, _value string) (err os.Error)
  /**
   * Parameters:
   *  - _id
   */
  GetValueMin(_id *RemoteValueID) (retval204 int32, err os.Error)
  /**
   * Parameters:
   *  - _id
   */
  GetValueMax(_id *RemoteValueID) (retval205 int32, err os.Error)
  /**
   * Parameters:
   *  - _id
   */
  IsValueReadOnly(_id *RemoteValueID) (retval206 bool, err os.Error)
  /**
   * Parameters:
   *  - _id
   */
  IsValueWriteOnly(_id *RemoteValueID) (retval207 bool, err os.Error)
  /**
   * Parameters:
   *  - _id
   */
  IsValueSet(_id *RemoteValueID) (retval208 bool, err os.Error)
  /**
   * Parameters:
   *  - _id
   */
  GetValueAsBool(_id *RemoteValueID) (retval209 *BoolBool, err os.Error)
  /**
   * Parameters:
   *  - _id
   */
  GetValueAsByte(_id *RemoteValueID) (retval210 *BoolUInt8, err os.Error)
  /**
   * Parameters:
   *  - _id
   */
  GetValueAsFloat(_id *RemoteValueID) (retval211 *BoolFloat, err os.Error)
  /**
   * Parameters:
   *  - _id
   */
  GetValueAsInt(_id *RemoteValueID) (retval212 *BoolInt, err os.Error)
  /**
   * Parameters:
   *  - _id
   */
  GetValueAsShort(_id *RemoteValueID) (retval213 *BoolInt16, err os.Error)
  /**
   * Parameters:
   *  - _id
   */
  GetValueAsString(_id *RemoteValueID) (retval214 *BoolString, err os.Error)
  /**
   * Parameters:
   *  - _id
   */
  GetValueListSelectionString(_id *RemoteValueID) (retval215 *BoolString, err os.Error)
  /**
   * Parameters:
   *  - _id
   */
  GetValueListSelectionInt32(_id *RemoteValueID) (retval216 *BoolInt, err os.Error)
  /**
   * Parameters:
   *  - _id
   */
  GetValueListItems(_id *RemoteValueID) (retval217 *BoolListString, err os.Error)
  /**
   * Parameters:
   *  - _id
   */
  GetValueFloatPrecision(_id *RemoteValueID) (retval218 *BoolUInt8, err os.Error)
  /**
   * Parameters:
   *  - _id
   *  - _value
   */
  SetValueBool(_id *RemoteValueID, _value bool) (retval219 bool, err os.Error)
  /**
   * Parameters:
   *  - _id
   *  - _value
   */
  SetValueUInt8(_id *RemoteValueID, _value byte) (retval220 bool, err os.Error)
  /**
   * Parameters:
   *  - _id
   *  - _value
   */
  SetValueFloat(_id *RemoteValueID, _value float64) (retval221 bool, err os.Error)
  /**
   * Parameters:
   *  - _id
   *  - _value
   */
  SetValueInt32(_id *RemoteValueID, _value int32) (retval222 bool, err os.Error)
  /**
   * Parameters:
   *  - _id
   *  - _value
   */
  SetValueInt16(_id *RemoteValueID, _value int16) (retval223 bool, err os.Error)
  /**
   * Parameters:
   *  - _id
   *  - _value
   */
  SetValueString(_id *RemoteValueID, _value string) (retval224 bool, err os.Error)
  /**
   * Parameters:
   *  - _id
   *  - _selectedItem
   */
  SetValueListSelection(_id *RemoteValueID, _selectedItem string) (retval225 bool, err os.Error)
  /**
   * Parameters:
   *  - _id
   */
  RefreshValue(_id *RemoteValueID) (retval226 bool, err os.Error)
  /**
   * Parameters:
   *  - _id
   */
  PressButton(_id *RemoteValueID) (retval227 bool, err os.Error)
  /**
   * Parameters:
   *  - _id
   */
  ReleaseButton(_id *RemoteValueID) (retval228 bool, err os.Error)
  /**
   * Parameters:
   *  - _id
   */
  GetNumSwitchPoints(_id *RemoteValueID) (retval229 byte, err os.Error)
  /**
   * Parameters:
   *  - _id
   *  - _hours
   *  - _minutes
   *  - _setback
   */
  SetSwitchPoint(_id *RemoteValueID, _hours byte, _minutes byte, _setback byte) (retval230 bool, err os.Error)
  /**
   * Parameters:
   *  - _id
   *  - _hours
   *  - _minutes
   */
  RemoveSwitchPoint(_id *RemoteValueID, _hours byte, _minutes byte) (retval231 bool, err os.Error)
  /**
   * Parameters:
   *  - _id
   */
  ClearSwitchPoints(_id *RemoteValueID) (err os.Error)
  /**
   * Parameters:
   *  - _id
   *  - _idx
   */
  GetSwitchPoint(_id *RemoteValueID, _idx byte) (retval233 *GetSwitchPointReturnStruct, err os.Error)
  /**
   * Parameters:
   *  - _homeId
   */
  SwitchAllOn(_homeId int32) (err os.Error)
  /**
   * Parameters:
   *  - _homeId
   */
  SwitchAllOff(_homeId int32) (err os.Error)
  /**
   * Parameters:
   *  - _homeId
   *  - _nodeId
   *  - _param
   *  - _value
   *  - _size
   */
  SetConfigParam(_homeId int32, _nodeId byte, _param byte, _value int32, _size byte) (retval236 bool, err os.Error)
  /**
   * Parameters:
   *  - _homeId
   *  - _nodeId
   *  - _param
   */
  RequestConfigParam(_homeId int32, _nodeId byte, _param byte) (err os.Error)
  /**
   * Parameters:
   *  - _homeId
   *  - _nodeId
   */
  RequestAllConfigParams(_homeId int32, _nodeId byte) (err os.Error)
  /**
   * Parameters:
   *  - _homeId
   *  - _nodeId
   */
  GetNumGroups(_homeId int32, _nodeId byte) (retval239 byte, err os.Error)
  /**
   * Parameters:
   *  - _homeId
   *  - _nodeId
   *  - _groupIdx
   */
  GetAssociations(_homeId int32, _nodeId byte, _groupIdx byte) (retval240 *GetAssociationsReturnStruct, err os.Error)
  /**
   * Parameters:
   *  - _homeId
   *  - _nodeId
   *  - _groupIdx
   */
  GetMaxAssociations(_homeId int32, _nodeId byte, _groupIdx byte) (retval241 byte, err os.Error)
  /**
   * Parameters:
   *  - _homeId
   *  - _nodeId
   *  - _groupIdx
   */
  GetGroupLabel(_homeId int32, _nodeId byte, _groupIdx byte) (retval242 string, err os.Error)
  /**
   * Parameters:
   *  - _homeId
   *  - _nodeId
   *  - _groupIdx
   *  - _targetNodeId
   */
  AddAssociation(_homeId int32, _nodeId byte, _groupIdx byte, _targetNodeId byte) (err os.Error)
  /**
   * Parameters:
   *  - _homeId
   *  - _nodeId
   *  - _groupIdx
   *  - _targetNodeId
   */
  RemoveAssociation(_homeId int32, _nodeId byte, _groupIdx byte, _targetNodeId byte) (err os.Error)
  /**
   * Parameters:
   *  - _homeId
   */
  ResetController(_homeId int32) (err os.Error)
  /**
   * Parameters:
   *  - _homeId
   */
  SoftReset(_homeId int32) (err os.Error)
  /**
   * Parameters:
   *  - _homeId
   *  - _command
   *  - _highPower
   *  - _nodeId
   *  - _arg
   */
  BeginControllerCommand(_homeId int32, _command DriverControllerCommand, _highPower bool, _nodeId byte, _arg byte) (retval247 bool, err os.Error)
  /**
   * Parameters:
   *  - _homeId
   */
  CancelControllerCommand(_homeId int32) (retval248 bool, err os.Error)
  GetNumScenes() (retval249 byte, err os.Error)
  GetAllScenes() (retval250 *GetAllScenesReturnStruct, err os.Error)
  CreateScene() (retval251 byte, err os.Error)
  /**
   * Parameters:
   *  - _sceneId
   */
  RemoveScene(_sceneId byte) (retval252 bool, err os.Error)
  /**
   * Parameters:
   *  - _sceneId
   *  - _valueId
   *  - _value
   */
  AddSceneValueBool(_sceneId byte, _valueId *RemoteValueID, _value bool) (retval253 bool, err os.Error)
  /**
   * Parameters:
   *  - _sceneId
   *  - _valueId
   *  - _value
   */
  AddSceneValueUint8(_sceneId byte, _valueId *RemoteValueID, _value byte) (retval254 bool, err os.Error)
  /**
   * Parameters:
   *  - _sceneId
   *  - _valueId
   *  - _value
   */
  AddSceneValueFloat(_sceneId byte, _valueId *RemoteValueID, _value float64) (retval255 bool, err os.Error)
  /**
   * Parameters:
   *  - _sceneId
   *  - _valueId
   *  - _value
   */
  AddSceneValueInt32(_sceneId byte, _valueId *RemoteValueID, _value int32) (retval256 bool, err os.Error)
  /**
   * Parameters:
   *  - _sceneId
   *  - _valueId
   *  - _value
   */
  AddSceneValueInt16(_sceneId byte, _valueId *RemoteValueID, _value int16) (retval257 bool, err os.Error)
  /**
   * Parameters:
   *  - _sceneId
   *  - _valueId
   *  - _value
   */
  AddSceneValueString(_sceneId byte, _valueId *RemoteValueID, _value string) (retval258 bool, err os.Error)
  /**
   * Parameters:
   *  - _sceneId
   *  - _valueId
   *  - _value
   */
  AddSceneValueListSelectionString(_sceneId byte, _valueId *RemoteValueID, _value string) (retval259 bool, err os.Error)
  /**
   * Parameters:
   *  - _sceneId
   *  - _valueId
   *  - _value
   */
  AddSceneValueListSelectionInt32(_sceneId byte, _valueId *RemoteValueID, _value int32) (retval260 bool, err os.Error)
  /**
   * Parameters:
   *  - _sceneId
   *  - _valueId
   */
  RemoveSceneValue(_sceneId byte, _valueId *RemoteValueID) (retval261 bool, err os.Error)
  /**
   * Parameters:
   *  - _sceneId
   */
  SceneGetValues(_sceneId byte) (retval262 *SceneGetValuesReturnStruct, err os.Error)
  /**
   * Parameters:
   *  - _sceneId
   *  - _valueId
   */
  SceneGetValueAsBool(_sceneId byte, _valueId *RemoteValueID) (retval263 *BoolBool, err os.Error)
  /**
   * Parameters:
   *  - _sceneId
   *  - _valueId
   */
  SceneGetValueAsByte(_sceneId byte, _valueId *RemoteValueID) (retval264 *BoolUInt8, err os.Error)
  /**
   * Parameters:
   *  - _sceneId
   *  - _valueId
   */
  SceneGetValueAsFloat(_sceneId byte, _valueId *RemoteValueID) (retval265 *BoolFloat, err os.Error)
  /**
   * Parameters:
   *  - _sceneId
   *  - _valueId
   */
  SceneGetValueAsInt(_sceneId byte, _valueId *RemoteValueID) (retval266 *BoolInt, err os.Error)
  /**
   * Parameters:
   *  - _sceneId
   *  - _valueId
   */
  SceneGetValueAsShort(_sceneId byte, _valueId *RemoteValueID) (retval267 *BoolInt16, err os.Error)
  /**
   * Parameters:
   *  - _sceneId
   *  - _valueId
   */
  SceneGetValueAsString(_sceneId byte, _valueId *RemoteValueID) (retval268 *BoolString, err os.Error)
  /**
   * Parameters:
   *  - _sceneId
   *  - _valueId
   */
  SceneGetValueListSelectionString(_sceneId byte, _valueId *RemoteValueID) (retval269 *BoolString, err os.Error)
  /**
   * Parameters:
   *  - _sceneId
   *  - _valueId
   */
  SceneGetValueListSelectionInt32(_sceneId byte, _valueId *RemoteValueID) (retval270 *BoolInt, err os.Error)
  /**
   * Parameters:
   *  - _sceneId
   *  - _valueId
   *  - _value
   */
  SetSceneValueBool(_sceneId byte, _valueId *RemoteValueID, _value bool) (retval271 bool, err os.Error)
  /**
   * Parameters:
   *  - _sceneId
   *  - _valueId
   *  - _value
   */
  SetSceneValueUint8(_sceneId byte, _valueId *RemoteValueID, _value byte) (retval272 bool, err os.Error)
  /**
   * Parameters:
   *  - _sceneId
   *  - _valueId
   *  - _value
   */
  SetSceneValueFloat(_sceneId byte, _valueId *RemoteValueID, _value float64) (retval273 bool, err os.Error)
  /**
   * Parameters:
   *  - _sceneId
   *  - _valueId
   *  - _value
   */
  SetSceneValueInt32(_sceneId byte, _valueId *RemoteValueID, _value int32) (retval274 bool, err os.Error)
  /**
   * Parameters:
   *  - _sceneId
   *  - _valueId
   *  - _value
   */
  SetSceneValueInt16(_sceneId byte, _valueId *RemoteValueID, _value int16) (retval275 bool, err os.Error)
  /**
   * Parameters:
   *  - _sceneId
   *  - _valueId
   *  - _value
   */
  SetSceneValueString(_sceneId byte, _valueId *RemoteValueID, _value string) (retval276 bool, err os.Error)
  /**
   * Parameters:
   *  - _sceneId
   *  - _valueId
   *  - _value
   */
  SetSceneValueListSelectionString(_sceneId byte, _valueId *RemoteValueID, _value string) (retval277 bool, err os.Error)
  /**
   * Parameters:
   *  - _sceneId
   *  - _valueId
   *  - _value
   */
  SetSceneValueListSelectionInt32(_sceneId byte, _valueId *RemoteValueID, _value int32) (retval278 bool, err os.Error)
  /**
   * Parameters:
   *  - _sceneId
   */
  GetSceneLabel(_sceneId byte) (retval279 string, err os.Error)
  /**
   * Parameters:
   *  - _sceneId
   *  - _value
   */
  SetSceneLabel(_sceneId byte, _value string) (err os.Error)
  /**
   * Parameters:
   *  - _sceneId
   */
  SceneExists(_sceneId byte) (retval281 bool, err os.Error)
  /**
   * Parameters:
   *  - _sceneId
   */
  ActivateScene(_sceneId byte) (retval282 bool, err os.Error)
  /**
   * Parameters:
   *  - _homeId
   */
  GetDriverStatistics(_homeId int32) (retval283 *GetDriverStatisticsReturnStruct, err os.Error)
  SendAllValues() (err os.Error)
}

type RemoteManagerClient struct {
  Transport thrift.TTransport
  ProtocolFactory thrift.TProtocolFactory
  InputProtocol thrift.TProtocol
  OutputProtocol thrift.TProtocol
  SeqId int32
}

func NewRemoteManagerClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *RemoteManagerClient {
  return &RemoteManagerClient{Transport: t,
    ProtocolFactory: f,
    InputProtocol: f.GetProtocol(t),
    OutputProtocol: f.GetProtocol(t),
    SeqId: 0,
  }
}

func NewRemoteManagerClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *RemoteManagerClient {
  return &RemoteManagerClient{Transport: t,
    ProtocolFactory: nil,
    InputProtocol: iprot,
    OutputProtocol: oprot,
    SeqId: 0,
  }
}

/**
 * \name Configuration
 * For saving the Z-Wave network configuration so that the entire network does not need to be
 * polled every time the application starts.
 * 
 * Parameters:
 *  - _homeId
 */
func (p *RemoteManagerClient) WriteConfig(_homeId int32) (err os.Error) {
  err = p.SendWriteConfig(_homeId)
  if err != nil { return }
  return p.RecvWriteConfig()
}

func (p *RemoteManagerClient) SendWriteConfig(_homeId int32)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("WriteConfig", thrift.CALL, p.SeqId)
  args286 := NewWriteConfigArgs()
  args286._homeId = _homeId
  err = args286.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvWriteConfig() (err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error288 := thrift.NewTApplicationExceptionDefault()
    error289, err := error288.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error289
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result287 := NewWriteConfigResult()
  err = result287.Read(iprot)
  iprot.ReadMessageEnd()
  return
}

/**
 * \name Drivers
 * Methods for adding and removing drivers and obtaining basic controller information.
 * 
 * Parameters:
 *  - _homeId
 */
func (p *RemoteManagerClient) GetControllerNodeId(_homeId int32) (retval290 byte, err os.Error) {
  err = p.SendGetControllerNodeId(_homeId)
  if err != nil { return }
  return p.RecvGetControllerNodeId()
}

func (p *RemoteManagerClient) SendGetControllerNodeId(_homeId int32)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("GetControllerNodeId", thrift.CALL, p.SeqId)
  args291 := NewGetControllerNodeIdArgs()
  args291._homeId = _homeId
  err = args291.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvGetControllerNodeId() (value byte, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error293 := thrift.NewTApplicationExceptionDefault()
    error294, err := error293.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error294
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result292 := NewGetControllerNodeIdResult()
  err = result292.Read(iprot)
  iprot.ReadMessageEnd()
  value = result292.Success
  return
}

/**
 * Parameters:
 *  - _homeId
 */
func (p *RemoteManagerClient) IsPrimaryController(_homeId int32) (retval295 bool, err os.Error) {
  err = p.SendIsPrimaryController(_homeId)
  if err != nil { return }
  return p.RecvIsPrimaryController()
}

func (p *RemoteManagerClient) SendIsPrimaryController(_homeId int32)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("IsPrimaryController", thrift.CALL, p.SeqId)
  args296 := NewIsPrimaryControllerArgs()
  args296._homeId = _homeId
  err = args296.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvIsPrimaryController() (value bool, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error298 := thrift.NewTApplicationExceptionDefault()
    error299, err := error298.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error299
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result297 := NewIsPrimaryControllerResult()
  err = result297.Read(iprot)
  iprot.ReadMessageEnd()
  value = result297.Success
  return
}

/**
 * Parameters:
 *  - _homeId
 */
func (p *RemoteManagerClient) IsStaticUpdateController(_homeId int32) (retval300 bool, err os.Error) {
  err = p.SendIsStaticUpdateController(_homeId)
  if err != nil { return }
  return p.RecvIsStaticUpdateController()
}

func (p *RemoteManagerClient) SendIsStaticUpdateController(_homeId int32)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("IsStaticUpdateController", thrift.CALL, p.SeqId)
  args301 := NewIsStaticUpdateControllerArgs()
  args301._homeId = _homeId
  err = args301.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvIsStaticUpdateController() (value bool, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error303 := thrift.NewTApplicationExceptionDefault()
    error304, err := error303.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error304
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result302 := NewIsStaticUpdateControllerResult()
  err = result302.Read(iprot)
  iprot.ReadMessageEnd()
  value = result302.Success
  return
}

/**
 * Parameters:
 *  - _homeId
 */
func (p *RemoteManagerClient) IsBridgeController(_homeId int32) (retval305 bool, err os.Error) {
  err = p.SendIsBridgeController(_homeId)
  if err != nil { return }
  return p.RecvIsBridgeController()
}

func (p *RemoteManagerClient) SendIsBridgeController(_homeId int32)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("IsBridgeController", thrift.CALL, p.SeqId)
  args306 := NewIsBridgeControllerArgs()
  args306._homeId = _homeId
  err = args306.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvIsBridgeController() (value bool, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error308 := thrift.NewTApplicationExceptionDefault()
    error309, err := error308.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error309
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result307 := NewIsBridgeControllerResult()
  err = result307.Read(iprot)
  iprot.ReadMessageEnd()
  value = result307.Success
  return
}

/**
 * Parameters:
 *  - _homeId
 */
func (p *RemoteManagerClient) GetLibraryVersion(_homeId int32) (retval310 string, err os.Error) {
  err = p.SendGetLibraryVersion(_homeId)
  if err != nil { return }
  return p.RecvGetLibraryVersion()
}

func (p *RemoteManagerClient) SendGetLibraryVersion(_homeId int32)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("GetLibraryVersion", thrift.CALL, p.SeqId)
  args311 := NewGetLibraryVersionArgs()
  args311._homeId = _homeId
  err = args311.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvGetLibraryVersion() (value string, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error313 := thrift.NewTApplicationExceptionDefault()
    error314, err := error313.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error314
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result312 := NewGetLibraryVersionResult()
  err = result312.Read(iprot)
  iprot.ReadMessageEnd()
  value = result312.Success
  return
}

/**
 * Parameters:
 *  - _homeId
 */
func (p *RemoteManagerClient) GetLibraryTypeName(_homeId int32) (retval315 string, err os.Error) {
  err = p.SendGetLibraryTypeName(_homeId)
  if err != nil { return }
  return p.RecvGetLibraryTypeName()
}

func (p *RemoteManagerClient) SendGetLibraryTypeName(_homeId int32)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("GetLibraryTypeName", thrift.CALL, p.SeqId)
  args316 := NewGetLibraryTypeNameArgs()
  args316._homeId = _homeId
  err = args316.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvGetLibraryTypeName() (value string, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error318 := thrift.NewTApplicationExceptionDefault()
    error319, err := error318.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error319
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result317 := NewGetLibraryTypeNameResult()
  err = result317.Read(iprot)
  iprot.ReadMessageEnd()
  value = result317.Success
  return
}

/**
 * Parameters:
 *  - _homeId
 */
func (p *RemoteManagerClient) GetSendQueueCount(_homeId int32) (retval320 int32, err os.Error) {
  err = p.SendGetSendQueueCount(_homeId)
  if err != nil { return }
  return p.RecvGetSendQueueCount()
}

func (p *RemoteManagerClient) SendGetSendQueueCount(_homeId int32)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("GetSendQueueCount", thrift.CALL, p.SeqId)
  args321 := NewGetSendQueueCountArgs()
  args321._homeId = _homeId
  err = args321.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvGetSendQueueCount() (value int32, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error323 := thrift.NewTApplicationExceptionDefault()
    error324, err := error323.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error324
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result322 := NewGetSendQueueCountResult()
  err = result322.Read(iprot)
  iprot.ReadMessageEnd()
  value = result322.Success
  return
}

func (p *RemoteManagerClient) GetPollInterval() (retval325 int32, err os.Error) {
  err = p.SendGetPollInterval()
  if err != nil { return }
  return p.RecvGetPollInterval()
}

func (p *RemoteManagerClient) SendGetPollInterval()(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("GetPollInterval", thrift.CALL, p.SeqId)
  args326 := NewGetPollIntervalArgs()
  err = args326.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvGetPollInterval() (value int32, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error328 := thrift.NewTApplicationExceptionDefault()
    error329, err := error328.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error329
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result327 := NewGetPollIntervalResult()
  err = result327.Read(iprot)
  iprot.ReadMessageEnd()
  value = result327.Success
  return
}

/**
 * Parameters:
 *  - _seconds
 */
func (p *RemoteManagerClient) SetPollInterval(_seconds int32) (err os.Error) {
  err = p.SendSetPollInterval(_seconds)
  if err != nil { return }
  return p.RecvSetPollInterval()
}

func (p *RemoteManagerClient) SendSetPollInterval(_seconds int32)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("SetPollInterval", thrift.CALL, p.SeqId)
  args331 := NewSetPollIntervalArgs()
  args331._seconds = _seconds
  err = args331.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvSetPollInterval() (err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error333 := thrift.NewTApplicationExceptionDefault()
    error334, err := error333.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error334
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result332 := NewSetPollIntervalResult()
  err = result332.Read(iprot)
  iprot.ReadMessageEnd()
  return
}

/**
 * Parameters:
 *  - _valueId
 */
func (p *RemoteManagerClient) EnablePoll(_valueId *RemoteValueID) (retval335 bool, err os.Error) {
  err = p.SendEnablePoll(_valueId)
  if err != nil { return }
  return p.RecvEnablePoll()
}

func (p *RemoteManagerClient) SendEnablePoll(_valueId *RemoteValueID)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("EnablePoll", thrift.CALL, p.SeqId)
  args336 := NewEnablePollArgs()
  args336._valueId = _valueId
  err = args336.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvEnablePoll() (value bool, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error338 := thrift.NewTApplicationExceptionDefault()
    error339, err := error338.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error339
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result337 := NewEnablePollResult()
  err = result337.Read(iprot)
  iprot.ReadMessageEnd()
  value = result337.Success
  return
}

/**
 * Parameters:
 *  - _valueId
 */
func (p *RemoteManagerClient) DisablePoll(_valueId *RemoteValueID) (retval340 bool, err os.Error) {
  err = p.SendDisablePoll(_valueId)
  if err != nil { return }
  return p.RecvDisablePoll()
}

func (p *RemoteManagerClient) SendDisablePoll(_valueId *RemoteValueID)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("DisablePoll", thrift.CALL, p.SeqId)
  args341 := NewDisablePollArgs()
  args341._valueId = _valueId
  err = args341.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvDisablePoll() (value bool, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error343 := thrift.NewTApplicationExceptionDefault()
    error344, err := error343.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error344
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result342 := NewDisablePollResult()
  err = result342.Read(iprot)
  iprot.ReadMessageEnd()
  value = result342.Success
  return
}

/**
 * Parameters:
 *  - _valueId
 */
func (p *RemoteManagerClient) IsPolled(_valueId *RemoteValueID) (retval345 bool, err os.Error) {
  err = p.SendIsPolled(_valueId)
  if err != nil { return }
  return p.RecvIsPolled()
}

func (p *RemoteManagerClient) SendIsPolled(_valueId *RemoteValueID)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("isPolled", thrift.CALL, p.SeqId)
  args346 := NewIsPolledArgs()
  args346._valueId = _valueId
  err = args346.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvIsPolled() (value bool, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error348 := thrift.NewTApplicationExceptionDefault()
    error349, err := error348.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error349
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result347 := NewIsPolledResult()
  err = result347.Read(iprot)
  iprot.ReadMessageEnd()
  value = result347.Success
  return
}

/**
 * Parameters:
 *  - _homeId
 *  - _nodeId
 */
func (p *RemoteManagerClient) RefreshNodeInfo(_homeId int32, _nodeId byte) (retval350 bool, err os.Error) {
  err = p.SendRefreshNodeInfo(_homeId, _nodeId)
  if err != nil { return }
  return p.RecvRefreshNodeInfo()
}

func (p *RemoteManagerClient) SendRefreshNodeInfo(_homeId int32, _nodeId byte)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("RefreshNodeInfo", thrift.CALL, p.SeqId)
  args351 := NewRefreshNodeInfoArgs()
  args351._homeId = _homeId
  args351._nodeId = _nodeId
  err = args351.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvRefreshNodeInfo() (value bool, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error353 := thrift.NewTApplicationExceptionDefault()
    error354, err := error353.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error354
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result352 := NewRefreshNodeInfoResult()
  err = result352.Read(iprot)
  iprot.ReadMessageEnd()
  value = result352.Success
  return
}

/**
 * Parameters:
 *  - _homeId
 *  - _nodeId
 */
func (p *RemoteManagerClient) RequestNodeState(_homeId int32, _nodeId byte) (retval355 bool, err os.Error) {
  err = p.SendRequestNodeState(_homeId, _nodeId)
  if err != nil { return }
  return p.RecvRequestNodeState()
}

func (p *RemoteManagerClient) SendRequestNodeState(_homeId int32, _nodeId byte)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("RequestNodeState", thrift.CALL, p.SeqId)
  args356 := NewRequestNodeStateArgs()
  args356._homeId = _homeId
  args356._nodeId = _nodeId
  err = args356.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvRequestNodeState() (value bool, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error358 := thrift.NewTApplicationExceptionDefault()
    error359, err := error358.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error359
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result357 := NewRequestNodeStateResult()
  err = result357.Read(iprot)
  iprot.ReadMessageEnd()
  value = result357.Success
  return
}

/**
 * Parameters:
 *  - _homeId
 *  - _nodeId
 */
func (p *RemoteManagerClient) RequestNodeDynamic(_homeId int32, _nodeId byte) (retval360 bool, err os.Error) {
  err = p.SendRequestNodeDynamic(_homeId, _nodeId)
  if err != nil { return }
  return p.RecvRequestNodeDynamic()
}

func (p *RemoteManagerClient) SendRequestNodeDynamic(_homeId int32, _nodeId byte)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("RequestNodeDynamic", thrift.CALL, p.SeqId)
  args361 := NewRequestNodeDynamicArgs()
  args361._homeId = _homeId
  args361._nodeId = _nodeId
  err = args361.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvRequestNodeDynamic() (value bool, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error363 := thrift.NewTApplicationExceptionDefault()
    error364, err := error363.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error364
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result362 := NewRequestNodeDynamicResult()
  err = result362.Read(iprot)
  iprot.ReadMessageEnd()
  value = result362.Success
  return
}

/**
 * Parameters:
 *  - _homeId
 *  - _nodeId
 */
func (p *RemoteManagerClient) IsNodeListeningDevice(_homeId int32, _nodeId byte) (retval365 bool, err os.Error) {
  err = p.SendIsNodeListeningDevice(_homeId, _nodeId)
  if err != nil { return }
  return p.RecvIsNodeListeningDevice()
}

func (p *RemoteManagerClient) SendIsNodeListeningDevice(_homeId int32, _nodeId byte)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("IsNodeListeningDevice", thrift.CALL, p.SeqId)
  args366 := NewIsNodeListeningDeviceArgs()
  args366._homeId = _homeId
  args366._nodeId = _nodeId
  err = args366.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvIsNodeListeningDevice() (value bool, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error368 := thrift.NewTApplicationExceptionDefault()
    error369, err := error368.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error369
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result367 := NewIsNodeListeningDeviceResult()
  err = result367.Read(iprot)
  iprot.ReadMessageEnd()
  value = result367.Success
  return
}

/**
 * Parameters:
 *  - _homeId
 *  - _nodeId
 */
func (p *RemoteManagerClient) IsNodeFrequentListeningDevice(_homeId int32, _nodeId byte) (retval370 bool, err os.Error) {
  err = p.SendIsNodeFrequentListeningDevice(_homeId, _nodeId)
  if err != nil { return }
  return p.RecvIsNodeFrequentListeningDevice()
}

func (p *RemoteManagerClient) SendIsNodeFrequentListeningDevice(_homeId int32, _nodeId byte)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("IsNodeFrequentListeningDevice", thrift.CALL, p.SeqId)
  args371 := NewIsNodeFrequentListeningDeviceArgs()
  args371._homeId = _homeId
  args371._nodeId = _nodeId
  err = args371.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvIsNodeFrequentListeningDevice() (value bool, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error373 := thrift.NewTApplicationExceptionDefault()
    error374, err := error373.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error374
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result372 := NewIsNodeFrequentListeningDeviceResult()
  err = result372.Read(iprot)
  iprot.ReadMessageEnd()
  value = result372.Success
  return
}

/**
 * Parameters:
 *  - _homeId
 *  - _nodeId
 */
func (p *RemoteManagerClient) IsNodeBeamingDevice(_homeId int32, _nodeId byte) (retval375 bool, err os.Error) {
  err = p.SendIsNodeBeamingDevice(_homeId, _nodeId)
  if err != nil { return }
  return p.RecvIsNodeBeamingDevice()
}

func (p *RemoteManagerClient) SendIsNodeBeamingDevice(_homeId int32, _nodeId byte)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("IsNodeBeamingDevice", thrift.CALL, p.SeqId)
  args376 := NewIsNodeBeamingDeviceArgs()
  args376._homeId = _homeId
  args376._nodeId = _nodeId
  err = args376.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvIsNodeBeamingDevice() (value bool, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error378 := thrift.NewTApplicationExceptionDefault()
    error379, err := error378.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error379
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result377 := NewIsNodeBeamingDeviceResult()
  err = result377.Read(iprot)
  iprot.ReadMessageEnd()
  value = result377.Success
  return
}

/**
 * Parameters:
 *  - _homeId
 *  - _nodeId
 */
func (p *RemoteManagerClient) IsNodeRoutingDevice(_homeId int32, _nodeId byte) (retval380 bool, err os.Error) {
  err = p.SendIsNodeRoutingDevice(_homeId, _nodeId)
  if err != nil { return }
  return p.RecvIsNodeRoutingDevice()
}

func (p *RemoteManagerClient) SendIsNodeRoutingDevice(_homeId int32, _nodeId byte)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("IsNodeRoutingDevice", thrift.CALL, p.SeqId)
  args381 := NewIsNodeRoutingDeviceArgs()
  args381._homeId = _homeId
  args381._nodeId = _nodeId
  err = args381.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvIsNodeRoutingDevice() (value bool, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error383 := thrift.NewTApplicationExceptionDefault()
    error384, err := error383.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error384
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result382 := NewIsNodeRoutingDeviceResult()
  err = result382.Read(iprot)
  iprot.ReadMessageEnd()
  value = result382.Success
  return
}

/**
 * Parameters:
 *  - _homeId
 *  - _nodeId
 */
func (p *RemoteManagerClient) IsNodeSecurityDevice(_homeId int32, _nodeId byte) (retval385 bool, err os.Error) {
  err = p.SendIsNodeSecurityDevice(_homeId, _nodeId)
  if err != nil { return }
  return p.RecvIsNodeSecurityDevice()
}

func (p *RemoteManagerClient) SendIsNodeSecurityDevice(_homeId int32, _nodeId byte)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("IsNodeSecurityDevice", thrift.CALL, p.SeqId)
  args386 := NewIsNodeSecurityDeviceArgs()
  args386._homeId = _homeId
  args386._nodeId = _nodeId
  err = args386.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvIsNodeSecurityDevice() (value bool, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error388 := thrift.NewTApplicationExceptionDefault()
    error389, err := error388.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error389
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result387 := NewIsNodeSecurityDeviceResult()
  err = result387.Read(iprot)
  iprot.ReadMessageEnd()
  value = result387.Success
  return
}

/**
 * Parameters:
 *  - _homeId
 *  - _nodeId
 */
func (p *RemoteManagerClient) GetNodeMaxBaudRate(_homeId int32, _nodeId byte) (retval390 int32, err os.Error) {
  err = p.SendGetNodeMaxBaudRate(_homeId, _nodeId)
  if err != nil { return }
  return p.RecvGetNodeMaxBaudRate()
}

func (p *RemoteManagerClient) SendGetNodeMaxBaudRate(_homeId int32, _nodeId byte)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("GetNodeMaxBaudRate", thrift.CALL, p.SeqId)
  args391 := NewGetNodeMaxBaudRateArgs()
  args391._homeId = _homeId
  args391._nodeId = _nodeId
  err = args391.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvGetNodeMaxBaudRate() (value int32, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error393 := thrift.NewTApplicationExceptionDefault()
    error394, err := error393.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error394
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result392 := NewGetNodeMaxBaudRateResult()
  err = result392.Read(iprot)
  iprot.ReadMessageEnd()
  value = result392.Success
  return
}

/**
 * Parameters:
 *  - _homeId
 *  - _nodeId
 */
func (p *RemoteManagerClient) GetNodeVersion(_homeId int32, _nodeId byte) (retval395 byte, err os.Error) {
  err = p.SendGetNodeVersion(_homeId, _nodeId)
  if err != nil { return }
  return p.RecvGetNodeVersion()
}

func (p *RemoteManagerClient) SendGetNodeVersion(_homeId int32, _nodeId byte)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("GetNodeVersion", thrift.CALL, p.SeqId)
  args396 := NewGetNodeVersionArgs()
  args396._homeId = _homeId
  args396._nodeId = _nodeId
  err = args396.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvGetNodeVersion() (value byte, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error398 := thrift.NewTApplicationExceptionDefault()
    error399, err := error398.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error399
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result397 := NewGetNodeVersionResult()
  err = result397.Read(iprot)
  iprot.ReadMessageEnd()
  value = result397.Success
  return
}

/**
 * Parameters:
 *  - _homeId
 *  - _nodeId
 */
func (p *RemoteManagerClient) GetNodeBasic(_homeId int32, _nodeId byte) (retval400 byte, err os.Error) {
  err = p.SendGetNodeBasic(_homeId, _nodeId)
  if err != nil { return }
  return p.RecvGetNodeBasic()
}

func (p *RemoteManagerClient) SendGetNodeBasic(_homeId int32, _nodeId byte)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("GetNodeBasic", thrift.CALL, p.SeqId)
  args401 := NewGetNodeBasicArgs()
  args401._homeId = _homeId
  args401._nodeId = _nodeId
  err = args401.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvGetNodeBasic() (value byte, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error403 := thrift.NewTApplicationExceptionDefault()
    error404, err := error403.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error404
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result402 := NewGetNodeBasicResult()
  err = result402.Read(iprot)
  iprot.ReadMessageEnd()
  value = result402.Success
  return
}

/**
 * Parameters:
 *  - _homeId
 *  - _nodeId
 */
func (p *RemoteManagerClient) GetNodeGeneric(_homeId int32, _nodeId byte) (retval405 byte, err os.Error) {
  err = p.SendGetNodeGeneric(_homeId, _nodeId)
  if err != nil { return }
  return p.RecvGetNodeGeneric()
}

func (p *RemoteManagerClient) SendGetNodeGeneric(_homeId int32, _nodeId byte)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("GetNodeGeneric", thrift.CALL, p.SeqId)
  args406 := NewGetNodeGenericArgs()
  args406._homeId = _homeId
  args406._nodeId = _nodeId
  err = args406.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvGetNodeGeneric() (value byte, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error408 := thrift.NewTApplicationExceptionDefault()
    error409, err := error408.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error409
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result407 := NewGetNodeGenericResult()
  err = result407.Read(iprot)
  iprot.ReadMessageEnd()
  value = result407.Success
  return
}

/**
 * Parameters:
 *  - _homeId
 *  - _nodeId
 */
func (p *RemoteManagerClient) GetNodeSpecific(_homeId int32, _nodeId byte) (retval410 byte, err os.Error) {
  err = p.SendGetNodeSpecific(_homeId, _nodeId)
  if err != nil { return }
  return p.RecvGetNodeSpecific()
}

func (p *RemoteManagerClient) SendGetNodeSpecific(_homeId int32, _nodeId byte)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("GetNodeSpecific", thrift.CALL, p.SeqId)
  args411 := NewGetNodeSpecificArgs()
  args411._homeId = _homeId
  args411._nodeId = _nodeId
  err = args411.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvGetNodeSpecific() (value byte, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error413 := thrift.NewTApplicationExceptionDefault()
    error414, err := error413.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error414
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result412 := NewGetNodeSpecificResult()
  err = result412.Read(iprot)
  iprot.ReadMessageEnd()
  value = result412.Success
  return
}

/**
 * Parameters:
 *  - _homeId
 *  - _nodeId
 */
func (p *RemoteManagerClient) GetNodeType(_homeId int32, _nodeId byte) (retval415 string, err os.Error) {
  err = p.SendGetNodeType(_homeId, _nodeId)
  if err != nil { return }
  return p.RecvGetNodeType()
}

func (p *RemoteManagerClient) SendGetNodeType(_homeId int32, _nodeId byte)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("GetNodeType", thrift.CALL, p.SeqId)
  args416 := NewGetNodeTypeArgs()
  args416._homeId = _homeId
  args416._nodeId = _nodeId
  err = args416.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvGetNodeType() (value string, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error418 := thrift.NewTApplicationExceptionDefault()
    error419, err := error418.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error419
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result417 := NewGetNodeTypeResult()
  err = result417.Read(iprot)
  iprot.ReadMessageEnd()
  value = result417.Success
  return
}

/**
 * Parameters:
 *  - _homeId
 *  - _nodeId
 */
func (p *RemoteManagerClient) GetNodeNeighbors(_homeId int32, _nodeId byte) (retval420 *UInt32ListByte, err os.Error) {
  err = p.SendGetNodeNeighbors(_homeId, _nodeId)
  if err != nil { return }
  return p.RecvGetNodeNeighbors()
}

func (p *RemoteManagerClient) SendGetNodeNeighbors(_homeId int32, _nodeId byte)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("GetNodeNeighbors", thrift.CALL, p.SeqId)
  args421 := NewGetNodeNeighborsArgs()
  args421._homeId = _homeId
  args421._nodeId = _nodeId
  err = args421.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvGetNodeNeighbors() (value *UInt32ListByte, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error423 := thrift.NewTApplicationExceptionDefault()
    error424, err := error423.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error424
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result422 := NewGetNodeNeighborsResult()
  err = result422.Read(iprot)
  iprot.ReadMessageEnd()
  value = result422.Success
  return
}

/**
 * Parameters:
 *  - _homeId
 *  - _nodeId
 */
func (p *RemoteManagerClient) GetNodeManufacturerName(_homeId int32, _nodeId byte) (retval425 string, err os.Error) {
  err = p.SendGetNodeManufacturerName(_homeId, _nodeId)
  if err != nil { return }
  return p.RecvGetNodeManufacturerName()
}

func (p *RemoteManagerClient) SendGetNodeManufacturerName(_homeId int32, _nodeId byte)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("GetNodeManufacturerName", thrift.CALL, p.SeqId)
  args426 := NewGetNodeManufacturerNameArgs()
  args426._homeId = _homeId
  args426._nodeId = _nodeId
  err = args426.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvGetNodeManufacturerName() (value string, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error428 := thrift.NewTApplicationExceptionDefault()
    error429, err := error428.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error429
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result427 := NewGetNodeManufacturerNameResult()
  err = result427.Read(iprot)
  iprot.ReadMessageEnd()
  value = result427.Success
  return
}

/**
 * Parameters:
 *  - _homeId
 *  - _nodeId
 */
func (p *RemoteManagerClient) GetNodeProductName(_homeId int32, _nodeId byte) (retval430 string, err os.Error) {
  err = p.SendGetNodeProductName(_homeId, _nodeId)
  if err != nil { return }
  return p.RecvGetNodeProductName()
}

func (p *RemoteManagerClient) SendGetNodeProductName(_homeId int32, _nodeId byte)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("GetNodeProductName", thrift.CALL, p.SeqId)
  args431 := NewGetNodeProductNameArgs()
  args431._homeId = _homeId
  args431._nodeId = _nodeId
  err = args431.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvGetNodeProductName() (value string, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error433 := thrift.NewTApplicationExceptionDefault()
    error434, err := error433.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error434
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result432 := NewGetNodeProductNameResult()
  err = result432.Read(iprot)
  iprot.ReadMessageEnd()
  value = result432.Success
  return
}

/**
 * Parameters:
 *  - _homeId
 *  - _nodeId
 */
func (p *RemoteManagerClient) GetNodeName(_homeId int32, _nodeId byte) (retval435 string, err os.Error) {
  err = p.SendGetNodeName(_homeId, _nodeId)
  if err != nil { return }
  return p.RecvGetNodeName()
}

func (p *RemoteManagerClient) SendGetNodeName(_homeId int32, _nodeId byte)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("GetNodeName", thrift.CALL, p.SeqId)
  args436 := NewGetNodeNameArgs()
  args436._homeId = _homeId
  args436._nodeId = _nodeId
  err = args436.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvGetNodeName() (value string, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error438 := thrift.NewTApplicationExceptionDefault()
    error439, err := error438.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error439
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result437 := NewGetNodeNameResult()
  err = result437.Read(iprot)
  iprot.ReadMessageEnd()
  value = result437.Success
  return
}

/**
 * Parameters:
 *  - _homeId
 *  - _nodeId
 */
func (p *RemoteManagerClient) GetNodeLocation(_homeId int32, _nodeId byte) (retval440 string, err os.Error) {
  err = p.SendGetNodeLocation(_homeId, _nodeId)
  if err != nil { return }
  return p.RecvGetNodeLocation()
}

func (p *RemoteManagerClient) SendGetNodeLocation(_homeId int32, _nodeId byte)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("GetNodeLocation", thrift.CALL, p.SeqId)
  args441 := NewGetNodeLocationArgs()
  args441._homeId = _homeId
  args441._nodeId = _nodeId
  err = args441.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvGetNodeLocation() (value string, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error443 := thrift.NewTApplicationExceptionDefault()
    error444, err := error443.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error444
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result442 := NewGetNodeLocationResult()
  err = result442.Read(iprot)
  iprot.ReadMessageEnd()
  value = result442.Success
  return
}

/**
 * Parameters:
 *  - _homeId
 *  - _nodeId
 */
func (p *RemoteManagerClient) GetNodeManufacturerId(_homeId int32, _nodeId byte) (retval445 string, err os.Error) {
  err = p.SendGetNodeManufacturerId(_homeId, _nodeId)
  if err != nil { return }
  return p.RecvGetNodeManufacturerId()
}

func (p *RemoteManagerClient) SendGetNodeManufacturerId(_homeId int32, _nodeId byte)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("GetNodeManufacturerId", thrift.CALL, p.SeqId)
  args446 := NewGetNodeManufacturerIdArgs()
  args446._homeId = _homeId
  args446._nodeId = _nodeId
  err = args446.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvGetNodeManufacturerId() (value string, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error448 := thrift.NewTApplicationExceptionDefault()
    error449, err := error448.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error449
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result447 := NewGetNodeManufacturerIdResult()
  err = result447.Read(iprot)
  iprot.ReadMessageEnd()
  value = result447.Success
  return
}

/**
 * Parameters:
 *  - _homeId
 *  - _nodeId
 */
func (p *RemoteManagerClient) GetNodeProductType(_homeId int32, _nodeId byte) (retval450 string, err os.Error) {
  err = p.SendGetNodeProductType(_homeId, _nodeId)
  if err != nil { return }
  return p.RecvGetNodeProductType()
}

func (p *RemoteManagerClient) SendGetNodeProductType(_homeId int32, _nodeId byte)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("GetNodeProductType", thrift.CALL, p.SeqId)
  args451 := NewGetNodeProductTypeArgs()
  args451._homeId = _homeId
  args451._nodeId = _nodeId
  err = args451.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvGetNodeProductType() (value string, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error453 := thrift.NewTApplicationExceptionDefault()
    error454, err := error453.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error454
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result452 := NewGetNodeProductTypeResult()
  err = result452.Read(iprot)
  iprot.ReadMessageEnd()
  value = result452.Success
  return
}

/**
 * Parameters:
 *  - _homeId
 *  - _nodeId
 */
func (p *RemoteManagerClient) GetNodeProductId(_homeId int32, _nodeId byte) (retval455 string, err os.Error) {
  err = p.SendGetNodeProductId(_homeId, _nodeId)
  if err != nil { return }
  return p.RecvGetNodeProductId()
}

func (p *RemoteManagerClient) SendGetNodeProductId(_homeId int32, _nodeId byte)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("GetNodeProductId", thrift.CALL, p.SeqId)
  args456 := NewGetNodeProductIdArgs()
  args456._homeId = _homeId
  args456._nodeId = _nodeId
  err = args456.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvGetNodeProductId() (value string, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error458 := thrift.NewTApplicationExceptionDefault()
    error459, err := error458.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error459
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result457 := NewGetNodeProductIdResult()
  err = result457.Read(iprot)
  iprot.ReadMessageEnd()
  value = result457.Success
  return
}

/**
 * Parameters:
 *  - _homeId
 *  - _nodeId
 *  - _manufacturerName
 */
func (p *RemoteManagerClient) SetNodeManufacturerName(_homeId int32, _nodeId byte, _manufacturerName string) (err os.Error) {
  err = p.SendSetNodeManufacturerName(_homeId, _nodeId, _manufacturerName)
  if err != nil { return }
  return p.RecvSetNodeManufacturerName()
}

func (p *RemoteManagerClient) SendSetNodeManufacturerName(_homeId int32, _nodeId byte, _manufacturerName string)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("SetNodeManufacturerName", thrift.CALL, p.SeqId)
  args461 := NewSetNodeManufacturerNameArgs()
  args461._homeId = _homeId
  args461._nodeId = _nodeId
  args461._manufacturerName = _manufacturerName
  err = args461.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvSetNodeManufacturerName() (err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error463 := thrift.NewTApplicationExceptionDefault()
    error464, err := error463.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error464
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result462 := NewSetNodeManufacturerNameResult()
  err = result462.Read(iprot)
  iprot.ReadMessageEnd()
  return
}

/**
 * Parameters:
 *  - _homeId
 *  - _nodeId
 *  - _productName
 */
func (p *RemoteManagerClient) SetNodeProductName(_homeId int32, _nodeId byte, _productName string) (err os.Error) {
  err = p.SendSetNodeProductName(_homeId, _nodeId, _productName)
  if err != nil { return }
  return p.RecvSetNodeProductName()
}

func (p *RemoteManagerClient) SendSetNodeProductName(_homeId int32, _nodeId byte, _productName string)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("SetNodeProductName", thrift.CALL, p.SeqId)
  args466 := NewSetNodeProductNameArgs()
  args466._homeId = _homeId
  args466._nodeId = _nodeId
  args466._productName = _productName
  err = args466.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvSetNodeProductName() (err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error468 := thrift.NewTApplicationExceptionDefault()
    error469, err := error468.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error469
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result467 := NewSetNodeProductNameResult()
  err = result467.Read(iprot)
  iprot.ReadMessageEnd()
  return
}

/**
 * Parameters:
 *  - _homeId
 *  - _nodeId
 *  - _nodeName
 */
func (p *RemoteManagerClient) SetNodeName(_homeId int32, _nodeId byte, _nodeName string) (err os.Error) {
  err = p.SendSetNodeName(_homeId, _nodeId, _nodeName)
  if err != nil { return }
  return p.RecvSetNodeName()
}

func (p *RemoteManagerClient) SendSetNodeName(_homeId int32, _nodeId byte, _nodeName string)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("SetNodeName", thrift.CALL, p.SeqId)
  args471 := NewSetNodeNameArgs()
  args471._homeId = _homeId
  args471._nodeId = _nodeId
  args471._nodeName = _nodeName
  err = args471.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvSetNodeName() (err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error473 := thrift.NewTApplicationExceptionDefault()
    error474, err := error473.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error474
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result472 := NewSetNodeNameResult()
  err = result472.Read(iprot)
  iprot.ReadMessageEnd()
  return
}

/**
 * Parameters:
 *  - _homeId
 *  - _nodeId
 *  - _location
 */
func (p *RemoteManagerClient) SetNodeLocation(_homeId int32, _nodeId byte, _location string) (err os.Error) {
  err = p.SendSetNodeLocation(_homeId, _nodeId, _location)
  if err != nil { return }
  return p.RecvSetNodeLocation()
}

func (p *RemoteManagerClient) SendSetNodeLocation(_homeId int32, _nodeId byte, _location string)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("SetNodeLocation", thrift.CALL, p.SeqId)
  args476 := NewSetNodeLocationArgs()
  args476._homeId = _homeId
  args476._nodeId = _nodeId
  args476._location = _location
  err = args476.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvSetNodeLocation() (err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error478 := thrift.NewTApplicationExceptionDefault()
    error479, err := error478.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error479
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result477 := NewSetNodeLocationResult()
  err = result477.Read(iprot)
  iprot.ReadMessageEnd()
  return
}

/**
 * Parameters:
 *  - _homeId
 *  - _nodeId
 */
func (p *RemoteManagerClient) SetNodeOn(_homeId int32, _nodeId byte) (err os.Error) {
  err = p.SendSetNodeOn(_homeId, _nodeId)
  if err != nil { return }
  return p.RecvSetNodeOn()
}

func (p *RemoteManagerClient) SendSetNodeOn(_homeId int32, _nodeId byte)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("SetNodeOn", thrift.CALL, p.SeqId)
  args481 := NewSetNodeOnArgs()
  args481._homeId = _homeId
  args481._nodeId = _nodeId
  err = args481.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvSetNodeOn() (err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error483 := thrift.NewTApplicationExceptionDefault()
    error484, err := error483.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error484
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result482 := NewSetNodeOnResult()
  err = result482.Read(iprot)
  iprot.ReadMessageEnd()
  return
}

/**
 * Parameters:
 *  - _homeId
 *  - _nodeId
 */
func (p *RemoteManagerClient) SetNodeOff(_homeId int32, _nodeId byte) (err os.Error) {
  err = p.SendSetNodeOff(_homeId, _nodeId)
  if err != nil { return }
  return p.RecvSetNodeOff()
}

func (p *RemoteManagerClient) SendSetNodeOff(_homeId int32, _nodeId byte)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("SetNodeOff", thrift.CALL, p.SeqId)
  args486 := NewSetNodeOffArgs()
  args486._homeId = _homeId
  args486._nodeId = _nodeId
  err = args486.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvSetNodeOff() (err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error488 := thrift.NewTApplicationExceptionDefault()
    error489, err := error488.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error489
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result487 := NewSetNodeOffResult()
  err = result487.Read(iprot)
  iprot.ReadMessageEnd()
  return
}

/**
 * Parameters:
 *  - _homeId
 *  - _nodeId
 *  - _level
 */
func (p *RemoteManagerClient) SetNodeLevel(_homeId int32, _nodeId byte, _level byte) (err os.Error) {
  err = p.SendSetNodeLevel(_homeId, _nodeId, _level)
  if err != nil { return }
  return p.RecvSetNodeLevel()
}

func (p *RemoteManagerClient) SendSetNodeLevel(_homeId int32, _nodeId byte, _level byte)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("SetNodeLevel", thrift.CALL, p.SeqId)
  args491 := NewSetNodeLevelArgs()
  args491._homeId = _homeId
  args491._nodeId = _nodeId
  args491._level = _level
  err = args491.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvSetNodeLevel() (err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error493 := thrift.NewTApplicationExceptionDefault()
    error494, err := error493.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error494
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result492 := NewSetNodeLevelResult()
  err = result492.Read(iprot)
  iprot.ReadMessageEnd()
  return
}

/**
 * Parameters:
 *  - _homeId
 *  - _nodeId
 */
func (p *RemoteManagerClient) IsNodeInfoReceived(_homeId int32, _nodeId byte) (retval495 bool, err os.Error) {
  err = p.SendIsNodeInfoReceived(_homeId, _nodeId)
  if err != nil { return }
  return p.RecvIsNodeInfoReceived()
}

func (p *RemoteManagerClient) SendIsNodeInfoReceived(_homeId int32, _nodeId byte)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("IsNodeInfoReceived", thrift.CALL, p.SeqId)
  args496 := NewIsNodeInfoReceivedArgs()
  args496._homeId = _homeId
  args496._nodeId = _nodeId
  err = args496.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvIsNodeInfoReceived() (value bool, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error498 := thrift.NewTApplicationExceptionDefault()
    error499, err := error498.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error499
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result497 := NewIsNodeInfoReceivedResult()
  err = result497.Read(iprot)
  iprot.ReadMessageEnd()
  value = result497.Success
  return
}

/**
 * Parameters:
 *  - _homeId
 *  - _nodeId
 *  - _commandClassId
 */
func (p *RemoteManagerClient) GetNodeClassInformation(_homeId int32, _nodeId byte, _commandClassId byte) (retval500 *BoolGetNodeClassInformation, err os.Error) {
  err = p.SendGetNodeClassInformation(_homeId, _nodeId, _commandClassId)
  if err != nil { return }
  return p.RecvGetNodeClassInformation()
}

func (p *RemoteManagerClient) SendGetNodeClassInformation(_homeId int32, _nodeId byte, _commandClassId byte)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("GetNodeClassInformation", thrift.CALL, p.SeqId)
  args501 := NewGetNodeClassInformationArgs()
  args501._homeId = _homeId
  args501._nodeId = _nodeId
  args501._commandClassId = _commandClassId
  err = args501.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvGetNodeClassInformation() (value *BoolGetNodeClassInformation, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error503 := thrift.NewTApplicationExceptionDefault()
    error504, err := error503.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error504
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result502 := NewGetNodeClassInformationResult()
  err = result502.Read(iprot)
  iprot.ReadMessageEnd()
  value = result502.Success
  return
}

/**
 * Parameters:
 *  - _id
 */
func (p *RemoteManagerClient) GetValueLabel(_id *RemoteValueID) (retval505 string, err os.Error) {
  err = p.SendGetValueLabel(_id)
  if err != nil { return }
  return p.RecvGetValueLabel()
}

func (p *RemoteManagerClient) SendGetValueLabel(_id *RemoteValueID)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("GetValueLabel", thrift.CALL, p.SeqId)
  args506 := NewGetValueLabelArgs()
  args506._id = _id
  err = args506.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvGetValueLabel() (value string, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error508 := thrift.NewTApplicationExceptionDefault()
    error509, err := error508.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error509
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result507 := NewGetValueLabelResult()
  err = result507.Read(iprot)
  iprot.ReadMessageEnd()
  value = result507.Success
  return
}

/**
 * Parameters:
 *  - _id
 *  - _value
 */
func (p *RemoteManagerClient) SetValueLabel(_id *RemoteValueID, _value string) (err os.Error) {
  err = p.SendSetValueLabel(_id, _value)
  if err != nil { return }
  return p.RecvSetValueLabel()
}

func (p *RemoteManagerClient) SendSetValueLabel(_id *RemoteValueID, _value string)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("SetValueLabel", thrift.CALL, p.SeqId)
  args511 := NewSetValueLabelArgs()
  args511._id = _id
  args511._value = _value
  err = args511.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvSetValueLabel() (err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error513 := thrift.NewTApplicationExceptionDefault()
    error514, err := error513.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error514
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result512 := NewSetValueLabelResult()
  err = result512.Read(iprot)
  iprot.ReadMessageEnd()
  return
}

/**
 * Parameters:
 *  - _id
 */
func (p *RemoteManagerClient) GetValueUnits(_id *RemoteValueID) (retval515 string, err os.Error) {
  err = p.SendGetValueUnits(_id)
  if err != nil { return }
  return p.RecvGetValueUnits()
}

func (p *RemoteManagerClient) SendGetValueUnits(_id *RemoteValueID)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("GetValueUnits", thrift.CALL, p.SeqId)
  args516 := NewGetValueUnitsArgs()
  args516._id = _id
  err = args516.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvGetValueUnits() (value string, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error518 := thrift.NewTApplicationExceptionDefault()
    error519, err := error518.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error519
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result517 := NewGetValueUnitsResult()
  err = result517.Read(iprot)
  iprot.ReadMessageEnd()
  value = result517.Success
  return
}

/**
 * Parameters:
 *  - _id
 *  - _value
 */
func (p *RemoteManagerClient) SetValueUnits(_id *RemoteValueID, _value string) (err os.Error) {
  err = p.SendSetValueUnits(_id, _value)
  if err != nil { return }
  return p.RecvSetValueUnits()
}

func (p *RemoteManagerClient) SendSetValueUnits(_id *RemoteValueID, _value string)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("SetValueUnits", thrift.CALL, p.SeqId)
  args521 := NewSetValueUnitsArgs()
  args521._id = _id
  args521._value = _value
  err = args521.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvSetValueUnits() (err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error523 := thrift.NewTApplicationExceptionDefault()
    error524, err := error523.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error524
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result522 := NewSetValueUnitsResult()
  err = result522.Read(iprot)
  iprot.ReadMessageEnd()
  return
}

/**
 * Parameters:
 *  - _id
 */
func (p *RemoteManagerClient) GetValueHelp(_id *RemoteValueID) (retval525 string, err os.Error) {
  err = p.SendGetValueHelp(_id)
  if err != nil { return }
  return p.RecvGetValueHelp()
}

func (p *RemoteManagerClient) SendGetValueHelp(_id *RemoteValueID)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("GetValueHelp", thrift.CALL, p.SeqId)
  args526 := NewGetValueHelpArgs()
  args526._id = _id
  err = args526.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvGetValueHelp() (value string, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error528 := thrift.NewTApplicationExceptionDefault()
    error529, err := error528.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error529
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result527 := NewGetValueHelpResult()
  err = result527.Read(iprot)
  iprot.ReadMessageEnd()
  value = result527.Success
  return
}

/**
 * Parameters:
 *  - _id
 *  - _value
 */
func (p *RemoteManagerClient) SetValueHelp(_id *RemoteValueID, _value string) (err os.Error) {
  err = p.SendSetValueHelp(_id, _value)
  if err != nil { return }
  return p.RecvSetValueHelp()
}

func (p *RemoteManagerClient) SendSetValueHelp(_id *RemoteValueID, _value string)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("SetValueHelp", thrift.CALL, p.SeqId)
  args531 := NewSetValueHelpArgs()
  args531._id = _id
  args531._value = _value
  err = args531.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvSetValueHelp() (err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error533 := thrift.NewTApplicationExceptionDefault()
    error534, err := error533.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error534
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result532 := NewSetValueHelpResult()
  err = result532.Read(iprot)
  iprot.ReadMessageEnd()
  return
}

/**
 * Parameters:
 *  - _id
 */
func (p *RemoteManagerClient) GetValueMin(_id *RemoteValueID) (retval535 int32, err os.Error) {
  err = p.SendGetValueMin(_id)
  if err != nil { return }
  return p.RecvGetValueMin()
}

func (p *RemoteManagerClient) SendGetValueMin(_id *RemoteValueID)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("GetValueMin", thrift.CALL, p.SeqId)
  args536 := NewGetValueMinArgs()
  args536._id = _id
  err = args536.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvGetValueMin() (value int32, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error538 := thrift.NewTApplicationExceptionDefault()
    error539, err := error538.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error539
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result537 := NewGetValueMinResult()
  err = result537.Read(iprot)
  iprot.ReadMessageEnd()
  value = result537.Success
  return
}

/**
 * Parameters:
 *  - _id
 */
func (p *RemoteManagerClient) GetValueMax(_id *RemoteValueID) (retval540 int32, err os.Error) {
  err = p.SendGetValueMax(_id)
  if err != nil { return }
  return p.RecvGetValueMax()
}

func (p *RemoteManagerClient) SendGetValueMax(_id *RemoteValueID)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("GetValueMax", thrift.CALL, p.SeqId)
  args541 := NewGetValueMaxArgs()
  args541._id = _id
  err = args541.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvGetValueMax() (value int32, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error543 := thrift.NewTApplicationExceptionDefault()
    error544, err := error543.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error544
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result542 := NewGetValueMaxResult()
  err = result542.Read(iprot)
  iprot.ReadMessageEnd()
  value = result542.Success
  return
}

/**
 * Parameters:
 *  - _id
 */
func (p *RemoteManagerClient) IsValueReadOnly(_id *RemoteValueID) (retval545 bool, err os.Error) {
  err = p.SendIsValueReadOnly(_id)
  if err != nil { return }
  return p.RecvIsValueReadOnly()
}

func (p *RemoteManagerClient) SendIsValueReadOnly(_id *RemoteValueID)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("IsValueReadOnly", thrift.CALL, p.SeqId)
  args546 := NewIsValueReadOnlyArgs()
  args546._id = _id
  err = args546.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvIsValueReadOnly() (value bool, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error548 := thrift.NewTApplicationExceptionDefault()
    error549, err := error548.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error549
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result547 := NewIsValueReadOnlyResult()
  err = result547.Read(iprot)
  iprot.ReadMessageEnd()
  value = result547.Success
  return
}

/**
 * Parameters:
 *  - _id
 */
func (p *RemoteManagerClient) IsValueWriteOnly(_id *RemoteValueID) (retval550 bool, err os.Error) {
  err = p.SendIsValueWriteOnly(_id)
  if err != nil { return }
  return p.RecvIsValueWriteOnly()
}

func (p *RemoteManagerClient) SendIsValueWriteOnly(_id *RemoteValueID)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("IsValueWriteOnly", thrift.CALL, p.SeqId)
  args551 := NewIsValueWriteOnlyArgs()
  args551._id = _id
  err = args551.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvIsValueWriteOnly() (value bool, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error553 := thrift.NewTApplicationExceptionDefault()
    error554, err := error553.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error554
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result552 := NewIsValueWriteOnlyResult()
  err = result552.Read(iprot)
  iprot.ReadMessageEnd()
  value = result552.Success
  return
}

/**
 * Parameters:
 *  - _id
 */
func (p *RemoteManagerClient) IsValueSet(_id *RemoteValueID) (retval555 bool, err os.Error) {
  err = p.SendIsValueSet(_id)
  if err != nil { return }
  return p.RecvIsValueSet()
}

func (p *RemoteManagerClient) SendIsValueSet(_id *RemoteValueID)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("IsValueSet", thrift.CALL, p.SeqId)
  args556 := NewIsValueSetArgs()
  args556._id = _id
  err = args556.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvIsValueSet() (value bool, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error558 := thrift.NewTApplicationExceptionDefault()
    error559, err := error558.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error559
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result557 := NewIsValueSetResult()
  err = result557.Read(iprot)
  iprot.ReadMessageEnd()
  value = result557.Success
  return
}

/**
 * Parameters:
 *  - _id
 */
func (p *RemoteManagerClient) GetValueAsBool(_id *RemoteValueID) (retval560 *BoolBool, err os.Error) {
  err = p.SendGetValueAsBool(_id)
  if err != nil { return }
  return p.RecvGetValueAsBool()
}

func (p *RemoteManagerClient) SendGetValueAsBool(_id *RemoteValueID)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("GetValueAsBool", thrift.CALL, p.SeqId)
  args561 := NewGetValueAsBoolArgs()
  args561._id = _id
  err = args561.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvGetValueAsBool() (value *BoolBool, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error563 := thrift.NewTApplicationExceptionDefault()
    error564, err := error563.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error564
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result562 := NewGetValueAsBoolResult()
  err = result562.Read(iprot)
  iprot.ReadMessageEnd()
  value = result562.Success
  return
}

/**
 * Parameters:
 *  - _id
 */
func (p *RemoteManagerClient) GetValueAsByte(_id *RemoteValueID) (retval565 *BoolUInt8, err os.Error) {
  err = p.SendGetValueAsByte(_id)
  if err != nil { return }
  return p.RecvGetValueAsByte()
}

func (p *RemoteManagerClient) SendGetValueAsByte(_id *RemoteValueID)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("GetValueAsByte", thrift.CALL, p.SeqId)
  args566 := NewGetValueAsByteArgs()
  args566._id = _id
  err = args566.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvGetValueAsByte() (value *BoolUInt8, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error568 := thrift.NewTApplicationExceptionDefault()
    error569, err := error568.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error569
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result567 := NewGetValueAsByteResult()
  err = result567.Read(iprot)
  iprot.ReadMessageEnd()
  value = result567.Success
  return
}

/**
 * Parameters:
 *  - _id
 */
func (p *RemoteManagerClient) GetValueAsFloat(_id *RemoteValueID) (retval570 *BoolFloat, err os.Error) {
  err = p.SendGetValueAsFloat(_id)
  if err != nil { return }
  return p.RecvGetValueAsFloat()
}

func (p *RemoteManagerClient) SendGetValueAsFloat(_id *RemoteValueID)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("GetValueAsFloat", thrift.CALL, p.SeqId)
  args571 := NewGetValueAsFloatArgs()
  args571._id = _id
  err = args571.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvGetValueAsFloat() (value *BoolFloat, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error573 := thrift.NewTApplicationExceptionDefault()
    error574, err := error573.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error574
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result572 := NewGetValueAsFloatResult()
  err = result572.Read(iprot)
  iprot.ReadMessageEnd()
  value = result572.Success
  return
}

/**
 * Parameters:
 *  - _id
 */
func (p *RemoteManagerClient) GetValueAsInt(_id *RemoteValueID) (retval575 *BoolInt, err os.Error) {
  err = p.SendGetValueAsInt(_id)
  if err != nil { return }
  return p.RecvGetValueAsInt()
}

func (p *RemoteManagerClient) SendGetValueAsInt(_id *RemoteValueID)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("GetValueAsInt", thrift.CALL, p.SeqId)
  args576 := NewGetValueAsIntArgs()
  args576._id = _id
  err = args576.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvGetValueAsInt() (value *BoolInt, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error578 := thrift.NewTApplicationExceptionDefault()
    error579, err := error578.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error579
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result577 := NewGetValueAsIntResult()
  err = result577.Read(iprot)
  iprot.ReadMessageEnd()
  value = result577.Success
  return
}

/**
 * Parameters:
 *  - _id
 */
func (p *RemoteManagerClient) GetValueAsShort(_id *RemoteValueID) (retval580 *BoolInt16, err os.Error) {
  err = p.SendGetValueAsShort(_id)
  if err != nil { return }
  return p.RecvGetValueAsShort()
}

func (p *RemoteManagerClient) SendGetValueAsShort(_id *RemoteValueID)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("GetValueAsShort", thrift.CALL, p.SeqId)
  args581 := NewGetValueAsShortArgs()
  args581._id = _id
  err = args581.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvGetValueAsShort() (value *BoolInt16, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error583 := thrift.NewTApplicationExceptionDefault()
    error584, err := error583.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error584
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result582 := NewGetValueAsShortResult()
  err = result582.Read(iprot)
  iprot.ReadMessageEnd()
  value = result582.Success
  return
}

/**
 * Parameters:
 *  - _id
 */
func (p *RemoteManagerClient) GetValueAsString(_id *RemoteValueID) (retval585 *BoolString, err os.Error) {
  err = p.SendGetValueAsString(_id)
  if err != nil { return }
  return p.RecvGetValueAsString()
}

func (p *RemoteManagerClient) SendGetValueAsString(_id *RemoteValueID)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("GetValueAsString", thrift.CALL, p.SeqId)
  args586 := NewGetValueAsStringArgs()
  args586._id = _id
  err = args586.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvGetValueAsString() (value *BoolString, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error588 := thrift.NewTApplicationExceptionDefault()
    error589, err := error588.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error589
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result587 := NewGetValueAsStringResult()
  err = result587.Read(iprot)
  iprot.ReadMessageEnd()
  value = result587.Success
  return
}

/**
 * Parameters:
 *  - _id
 */
func (p *RemoteManagerClient) GetValueListSelectionString(_id *RemoteValueID) (retval590 *BoolString, err os.Error) {
  err = p.SendGetValueListSelectionString(_id)
  if err != nil { return }
  return p.RecvGetValueListSelectionString()
}

func (p *RemoteManagerClient) SendGetValueListSelectionString(_id *RemoteValueID)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("GetValueListSelection_String", thrift.CALL, p.SeqId)
  args591 := NewGetValueListSelectionStringArgs()
  args591._id = _id
  err = args591.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvGetValueListSelectionString() (value *BoolString, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error593 := thrift.NewTApplicationExceptionDefault()
    error594, err := error593.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error594
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result592 := NewGetValueListSelectionStringResult()
  err = result592.Read(iprot)
  iprot.ReadMessageEnd()
  value = result592.Success
  return
}

/**
 * Parameters:
 *  - _id
 */
func (p *RemoteManagerClient) GetValueListSelectionInt32(_id *RemoteValueID) (retval595 *BoolInt, err os.Error) {
  err = p.SendGetValueListSelectionInt32(_id)
  if err != nil { return }
  return p.RecvGetValueListSelectionInt32()
}

func (p *RemoteManagerClient) SendGetValueListSelectionInt32(_id *RemoteValueID)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("GetValueListSelection_Int32", thrift.CALL, p.SeqId)
  args596 := NewGetValueListSelectionInt32Args()
  args596._id = _id
  err = args596.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvGetValueListSelectionInt32() (value *BoolInt, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error598 := thrift.NewTApplicationExceptionDefault()
    error599, err := error598.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error599
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result597 := NewGetValueListSelectionInt32Result()
  err = result597.Read(iprot)
  iprot.ReadMessageEnd()
  value = result597.Success
  return
}

/**
 * Parameters:
 *  - _id
 */
func (p *RemoteManagerClient) GetValueListItems(_id *RemoteValueID) (retval600 *BoolListString, err os.Error) {
  err = p.SendGetValueListItems(_id)
  if err != nil { return }
  return p.RecvGetValueListItems()
}

func (p *RemoteManagerClient) SendGetValueListItems(_id *RemoteValueID)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("GetValueListItems", thrift.CALL, p.SeqId)
  args601 := NewGetValueListItemsArgs()
  args601._id = _id
  err = args601.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvGetValueListItems() (value *BoolListString, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error603 := thrift.NewTApplicationExceptionDefault()
    error604, err := error603.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error604
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result602 := NewGetValueListItemsResult()
  err = result602.Read(iprot)
  iprot.ReadMessageEnd()
  value = result602.Success
  return
}

/**
 * Parameters:
 *  - _id
 */
func (p *RemoteManagerClient) GetValueFloatPrecision(_id *RemoteValueID) (retval605 *BoolUInt8, err os.Error) {
  err = p.SendGetValueFloatPrecision(_id)
  if err != nil { return }
  return p.RecvGetValueFloatPrecision()
}

func (p *RemoteManagerClient) SendGetValueFloatPrecision(_id *RemoteValueID)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("GetValueFloatPrecision", thrift.CALL, p.SeqId)
  args606 := NewGetValueFloatPrecisionArgs()
  args606._id = _id
  err = args606.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvGetValueFloatPrecision() (value *BoolUInt8, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error608 := thrift.NewTApplicationExceptionDefault()
    error609, err := error608.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error609
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result607 := NewGetValueFloatPrecisionResult()
  err = result607.Read(iprot)
  iprot.ReadMessageEnd()
  value = result607.Success
  return
}

/**
 * Parameters:
 *  - _id
 *  - _value
 */
func (p *RemoteManagerClient) SetValueBool(_id *RemoteValueID, _value bool) (retval610 bool, err os.Error) {
  err = p.SendSetValueBool(_id, _value)
  if err != nil { return }
  return p.RecvSetValueBool()
}

func (p *RemoteManagerClient) SendSetValueBool(_id *RemoteValueID, _value bool)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("SetValue_Bool", thrift.CALL, p.SeqId)
  args611 := NewSetValueBoolArgs()
  args611._id = _id
  args611._value = _value
  err = args611.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvSetValueBool() (value bool, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error613 := thrift.NewTApplicationExceptionDefault()
    error614, err := error613.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error614
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result612 := NewSetValueBoolResult()
  err = result612.Read(iprot)
  iprot.ReadMessageEnd()
  value = result612.Success
  return
}

/**
 * Parameters:
 *  - _id
 *  - _value
 */
func (p *RemoteManagerClient) SetValueUInt8(_id *RemoteValueID, _value byte) (retval615 bool, err os.Error) {
  err = p.SendSetValueUInt8(_id, _value)
  if err != nil { return }
  return p.RecvSetValueUInt8()
}

func (p *RemoteManagerClient) SendSetValueUInt8(_id *RemoteValueID, _value byte)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("SetValue_UInt8", thrift.CALL, p.SeqId)
  args616 := NewSetValueUInt8Args()
  args616._id = _id
  args616._value = _value
  err = args616.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvSetValueUInt8() (value bool, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error618 := thrift.NewTApplicationExceptionDefault()
    error619, err := error618.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error619
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result617 := NewSetValueUInt8Result()
  err = result617.Read(iprot)
  iprot.ReadMessageEnd()
  value = result617.Success
  return
}

/**
 * Parameters:
 *  - _id
 *  - _value
 */
func (p *RemoteManagerClient) SetValueFloat(_id *RemoteValueID, _value float64) (retval620 bool, err os.Error) {
  err = p.SendSetValueFloat(_id, _value)
  if err != nil { return }
  return p.RecvSetValueFloat()
}

func (p *RemoteManagerClient) SendSetValueFloat(_id *RemoteValueID, _value float64)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("SetValue_Float", thrift.CALL, p.SeqId)
  args621 := NewSetValueFloatArgs()
  args621._id = _id
  args621._value = _value
  err = args621.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvSetValueFloat() (value bool, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error623 := thrift.NewTApplicationExceptionDefault()
    error624, err := error623.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error624
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result622 := NewSetValueFloatResult()
  err = result622.Read(iprot)
  iprot.ReadMessageEnd()
  value = result622.Success
  return
}

/**
 * Parameters:
 *  - _id
 *  - _value
 */
func (p *RemoteManagerClient) SetValueInt32(_id *RemoteValueID, _value int32) (retval625 bool, err os.Error) {
  err = p.SendSetValueInt32(_id, _value)
  if err != nil { return }
  return p.RecvSetValueInt32()
}

func (p *RemoteManagerClient) SendSetValueInt32(_id *RemoteValueID, _value int32)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("SetValue_Int32", thrift.CALL, p.SeqId)
  args626 := NewSetValueInt32Args()
  args626._id = _id
  args626._value = _value
  err = args626.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvSetValueInt32() (value bool, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error628 := thrift.NewTApplicationExceptionDefault()
    error629, err := error628.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error629
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result627 := NewSetValueInt32Result()
  err = result627.Read(iprot)
  iprot.ReadMessageEnd()
  value = result627.Success
  return
}

/**
 * Parameters:
 *  - _id
 *  - _value
 */
func (p *RemoteManagerClient) SetValueInt16(_id *RemoteValueID, _value int16) (retval630 bool, err os.Error) {
  err = p.SendSetValueInt16(_id, _value)
  if err != nil { return }
  return p.RecvSetValueInt16()
}

func (p *RemoteManagerClient) SendSetValueInt16(_id *RemoteValueID, _value int16)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("SetValue_Int16", thrift.CALL, p.SeqId)
  args631 := NewSetValueInt16Args()
  args631._id = _id
  args631._value = _value
  err = args631.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvSetValueInt16() (value bool, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error633 := thrift.NewTApplicationExceptionDefault()
    error634, err := error633.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error634
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result632 := NewSetValueInt16Result()
  err = result632.Read(iprot)
  iprot.ReadMessageEnd()
  value = result632.Success
  return
}

/**
 * Parameters:
 *  - _id
 *  - _value
 */
func (p *RemoteManagerClient) SetValueString(_id *RemoteValueID, _value string) (retval635 bool, err os.Error) {
  err = p.SendSetValueString(_id, _value)
  if err != nil { return }
  return p.RecvSetValueString()
}

func (p *RemoteManagerClient) SendSetValueString(_id *RemoteValueID, _value string)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("SetValue_String", thrift.CALL, p.SeqId)
  args636 := NewSetValueStringArgs()
  args636._id = _id
  args636._value = _value
  err = args636.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvSetValueString() (value bool, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error638 := thrift.NewTApplicationExceptionDefault()
    error639, err := error638.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error639
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result637 := NewSetValueStringResult()
  err = result637.Read(iprot)
  iprot.ReadMessageEnd()
  value = result637.Success
  return
}

/**
 * Parameters:
 *  - _id
 *  - _selectedItem
 */
func (p *RemoteManagerClient) SetValueListSelection(_id *RemoteValueID, _selectedItem string) (retval640 bool, err os.Error) {
  err = p.SendSetValueListSelection(_id, _selectedItem)
  if err != nil { return }
  return p.RecvSetValueListSelection()
}

func (p *RemoteManagerClient) SendSetValueListSelection(_id *RemoteValueID, _selectedItem string)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("SetValueListSelection", thrift.CALL, p.SeqId)
  args641 := NewSetValueListSelectionArgs()
  args641._id = _id
  args641._selectedItem = _selectedItem
  err = args641.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvSetValueListSelection() (value bool, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error643 := thrift.NewTApplicationExceptionDefault()
    error644, err := error643.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error644
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result642 := NewSetValueListSelectionResult()
  err = result642.Read(iprot)
  iprot.ReadMessageEnd()
  value = result642.Success
  return
}

/**
 * Parameters:
 *  - _id
 */
func (p *RemoteManagerClient) RefreshValue(_id *RemoteValueID) (retval645 bool, err os.Error) {
  err = p.SendRefreshValue(_id)
  if err != nil { return }
  return p.RecvRefreshValue()
}

func (p *RemoteManagerClient) SendRefreshValue(_id *RemoteValueID)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("RefreshValue", thrift.CALL, p.SeqId)
  args646 := NewRefreshValueArgs()
  args646._id = _id
  err = args646.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvRefreshValue() (value bool, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error648 := thrift.NewTApplicationExceptionDefault()
    error649, err := error648.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error649
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result647 := NewRefreshValueResult()
  err = result647.Read(iprot)
  iprot.ReadMessageEnd()
  value = result647.Success
  return
}

/**
 * Parameters:
 *  - _id
 */
func (p *RemoteManagerClient) PressButton(_id *RemoteValueID) (retval650 bool, err os.Error) {
  err = p.SendPressButton(_id)
  if err != nil { return }
  return p.RecvPressButton()
}

func (p *RemoteManagerClient) SendPressButton(_id *RemoteValueID)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("PressButton", thrift.CALL, p.SeqId)
  args651 := NewPressButtonArgs()
  args651._id = _id
  err = args651.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvPressButton() (value bool, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error653 := thrift.NewTApplicationExceptionDefault()
    error654, err := error653.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error654
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result652 := NewPressButtonResult()
  err = result652.Read(iprot)
  iprot.ReadMessageEnd()
  value = result652.Success
  return
}

/**
 * Parameters:
 *  - _id
 */
func (p *RemoteManagerClient) ReleaseButton(_id *RemoteValueID) (retval655 bool, err os.Error) {
  err = p.SendReleaseButton(_id)
  if err != nil { return }
  return p.RecvReleaseButton()
}

func (p *RemoteManagerClient) SendReleaseButton(_id *RemoteValueID)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("ReleaseButton", thrift.CALL, p.SeqId)
  args656 := NewReleaseButtonArgs()
  args656._id = _id
  err = args656.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvReleaseButton() (value bool, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error658 := thrift.NewTApplicationExceptionDefault()
    error659, err := error658.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error659
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result657 := NewReleaseButtonResult()
  err = result657.Read(iprot)
  iprot.ReadMessageEnd()
  value = result657.Success
  return
}

/**
 * Parameters:
 *  - _id
 */
func (p *RemoteManagerClient) GetNumSwitchPoints(_id *RemoteValueID) (retval660 byte, err os.Error) {
  err = p.SendGetNumSwitchPoints(_id)
  if err != nil { return }
  return p.RecvGetNumSwitchPoints()
}

func (p *RemoteManagerClient) SendGetNumSwitchPoints(_id *RemoteValueID)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("GetNumSwitchPoints", thrift.CALL, p.SeqId)
  args661 := NewGetNumSwitchPointsArgs()
  args661._id = _id
  err = args661.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvGetNumSwitchPoints() (value byte, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error663 := thrift.NewTApplicationExceptionDefault()
    error664, err := error663.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error664
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result662 := NewGetNumSwitchPointsResult()
  err = result662.Read(iprot)
  iprot.ReadMessageEnd()
  value = result662.Success
  return
}

/**
 * Parameters:
 *  - _id
 *  - _hours
 *  - _minutes
 *  - _setback
 */
func (p *RemoteManagerClient) SetSwitchPoint(_id *RemoteValueID, _hours byte, _minutes byte, _setback byte) (retval665 bool, err os.Error) {
  err = p.SendSetSwitchPoint(_id, _hours, _minutes, _setback)
  if err != nil { return }
  return p.RecvSetSwitchPoint()
}

func (p *RemoteManagerClient) SendSetSwitchPoint(_id *RemoteValueID, _hours byte, _minutes byte, _setback byte)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("SetSwitchPoint", thrift.CALL, p.SeqId)
  args666 := NewSetSwitchPointArgs()
  args666._id = _id
  args666._hours = _hours
  args666._minutes = _minutes
  args666._setback = _setback
  err = args666.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvSetSwitchPoint() (value bool, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error668 := thrift.NewTApplicationExceptionDefault()
    error669, err := error668.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error669
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result667 := NewSetSwitchPointResult()
  err = result667.Read(iprot)
  iprot.ReadMessageEnd()
  value = result667.Success
  return
}

/**
 * Parameters:
 *  - _id
 *  - _hours
 *  - _minutes
 */
func (p *RemoteManagerClient) RemoveSwitchPoint(_id *RemoteValueID, _hours byte, _minutes byte) (retval670 bool, err os.Error) {
  err = p.SendRemoveSwitchPoint(_id, _hours, _minutes)
  if err != nil { return }
  return p.RecvRemoveSwitchPoint()
}

func (p *RemoteManagerClient) SendRemoveSwitchPoint(_id *RemoteValueID, _hours byte, _minutes byte)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("RemoveSwitchPoint", thrift.CALL, p.SeqId)
  args671 := NewRemoveSwitchPointArgs()
  args671._id = _id
  args671._hours = _hours
  args671._minutes = _minutes
  err = args671.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvRemoveSwitchPoint() (value bool, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error673 := thrift.NewTApplicationExceptionDefault()
    error674, err := error673.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error674
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result672 := NewRemoveSwitchPointResult()
  err = result672.Read(iprot)
  iprot.ReadMessageEnd()
  value = result672.Success
  return
}

/**
 * Parameters:
 *  - _id
 */
func (p *RemoteManagerClient) ClearSwitchPoints(_id *RemoteValueID) (err os.Error) {
  err = p.SendClearSwitchPoints(_id)
  if err != nil { return }
  return p.RecvClearSwitchPoints()
}

func (p *RemoteManagerClient) SendClearSwitchPoints(_id *RemoteValueID)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("ClearSwitchPoints", thrift.CALL, p.SeqId)
  args676 := NewClearSwitchPointsArgs()
  args676._id = _id
  err = args676.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvClearSwitchPoints() (err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error678 := thrift.NewTApplicationExceptionDefault()
    error679, err := error678.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error679
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result677 := NewClearSwitchPointsResult()
  err = result677.Read(iprot)
  iprot.ReadMessageEnd()
  return
}

/**
 * Parameters:
 *  - _id
 *  - _idx
 */
func (p *RemoteManagerClient) GetSwitchPoint(_id *RemoteValueID, _idx byte) (retval680 *GetSwitchPointReturnStruct, err os.Error) {
  err = p.SendGetSwitchPoint(_id, _idx)
  if err != nil { return }
  return p.RecvGetSwitchPoint()
}

func (p *RemoteManagerClient) SendGetSwitchPoint(_id *RemoteValueID, _idx byte)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("GetSwitchPoint", thrift.CALL, p.SeqId)
  args681 := NewGetSwitchPointArgs()
  args681._id = _id
  args681._idx = _idx
  err = args681.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvGetSwitchPoint() (value *GetSwitchPointReturnStruct, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error683 := thrift.NewTApplicationExceptionDefault()
    error684, err := error683.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error684
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result682 := NewGetSwitchPointResult()
  err = result682.Read(iprot)
  iprot.ReadMessageEnd()
  value = result682.Success
  return
}

/**
 * Parameters:
 *  - _homeId
 */
func (p *RemoteManagerClient) SwitchAllOn(_homeId int32) (err os.Error) {
  err = p.SendSwitchAllOn(_homeId)
  if err != nil { return }
  return p.RecvSwitchAllOn()
}

func (p *RemoteManagerClient) SendSwitchAllOn(_homeId int32)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("SwitchAllOn", thrift.CALL, p.SeqId)
  args686 := NewSwitchAllOnArgs()
  args686._homeId = _homeId
  err = args686.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvSwitchAllOn() (err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error688 := thrift.NewTApplicationExceptionDefault()
    error689, err := error688.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error689
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result687 := NewSwitchAllOnResult()
  err = result687.Read(iprot)
  iprot.ReadMessageEnd()
  return
}

/**
 * Parameters:
 *  - _homeId
 */
func (p *RemoteManagerClient) SwitchAllOff(_homeId int32) (err os.Error) {
  err = p.SendSwitchAllOff(_homeId)
  if err != nil { return }
  return p.RecvSwitchAllOff()
}

func (p *RemoteManagerClient) SendSwitchAllOff(_homeId int32)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("SwitchAllOff", thrift.CALL, p.SeqId)
  args691 := NewSwitchAllOffArgs()
  args691._homeId = _homeId
  err = args691.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvSwitchAllOff() (err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error693 := thrift.NewTApplicationExceptionDefault()
    error694, err := error693.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error694
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result692 := NewSwitchAllOffResult()
  err = result692.Read(iprot)
  iprot.ReadMessageEnd()
  return
}

/**
 * Parameters:
 *  - _homeId
 *  - _nodeId
 *  - _param
 *  - _value
 *  - _size
 */
func (p *RemoteManagerClient) SetConfigParam(_homeId int32, _nodeId byte, _param byte, _value int32, _size byte) (retval695 bool, err os.Error) {
  err = p.SendSetConfigParam(_homeId, _nodeId, _param, _value, _size)
  if err != nil { return }
  return p.RecvSetConfigParam()
}

func (p *RemoteManagerClient) SendSetConfigParam(_homeId int32, _nodeId byte, _param byte, _value int32, _size byte)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("SetConfigParam", thrift.CALL, p.SeqId)
  args696 := NewSetConfigParamArgs()
  args696._homeId = _homeId
  args696._nodeId = _nodeId
  args696._param = _param
  args696._value = _value
  args696._size = _size
  err = args696.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvSetConfigParam() (value bool, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error698 := thrift.NewTApplicationExceptionDefault()
    error699, err := error698.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error699
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result697 := NewSetConfigParamResult()
  err = result697.Read(iprot)
  iprot.ReadMessageEnd()
  value = result697.Success
  return
}

/**
 * Parameters:
 *  - _homeId
 *  - _nodeId
 *  - _param
 */
func (p *RemoteManagerClient) RequestConfigParam(_homeId int32, _nodeId byte, _param byte) (err os.Error) {
  err = p.SendRequestConfigParam(_homeId, _nodeId, _param)
  if err != nil { return }
  return p.RecvRequestConfigParam()
}

func (p *RemoteManagerClient) SendRequestConfigParam(_homeId int32, _nodeId byte, _param byte)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("RequestConfigParam", thrift.CALL, p.SeqId)
  args701 := NewRequestConfigParamArgs()
  args701._homeId = _homeId
  args701._nodeId = _nodeId
  args701._param = _param
  err = args701.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvRequestConfigParam() (err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error703 := thrift.NewTApplicationExceptionDefault()
    error704, err := error703.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error704
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result702 := NewRequestConfigParamResult()
  err = result702.Read(iprot)
  iprot.ReadMessageEnd()
  return
}

/**
 * Parameters:
 *  - _homeId
 *  - _nodeId
 */
func (p *RemoteManagerClient) RequestAllConfigParams(_homeId int32, _nodeId byte) (err os.Error) {
  err = p.SendRequestAllConfigParams(_homeId, _nodeId)
  if err != nil { return }
  return p.RecvRequestAllConfigParams()
}

func (p *RemoteManagerClient) SendRequestAllConfigParams(_homeId int32, _nodeId byte)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("RequestAllConfigParams", thrift.CALL, p.SeqId)
  args706 := NewRequestAllConfigParamsArgs()
  args706._homeId = _homeId
  args706._nodeId = _nodeId
  err = args706.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvRequestAllConfigParams() (err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error708 := thrift.NewTApplicationExceptionDefault()
    error709, err := error708.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error709
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result707 := NewRequestAllConfigParamsResult()
  err = result707.Read(iprot)
  iprot.ReadMessageEnd()
  return
}

/**
 * Parameters:
 *  - _homeId
 *  - _nodeId
 */
func (p *RemoteManagerClient) GetNumGroups(_homeId int32, _nodeId byte) (retval710 byte, err os.Error) {
  err = p.SendGetNumGroups(_homeId, _nodeId)
  if err != nil { return }
  return p.RecvGetNumGroups()
}

func (p *RemoteManagerClient) SendGetNumGroups(_homeId int32, _nodeId byte)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("GetNumGroups", thrift.CALL, p.SeqId)
  args711 := NewGetNumGroupsArgs()
  args711._homeId = _homeId
  args711._nodeId = _nodeId
  err = args711.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvGetNumGroups() (value byte, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error713 := thrift.NewTApplicationExceptionDefault()
    error714, err := error713.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error714
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result712 := NewGetNumGroupsResult()
  err = result712.Read(iprot)
  iprot.ReadMessageEnd()
  value = result712.Success
  return
}

/**
 * Parameters:
 *  - _homeId
 *  - _nodeId
 *  - _groupIdx
 */
func (p *RemoteManagerClient) GetAssociations(_homeId int32, _nodeId byte, _groupIdx byte) (retval715 *GetAssociationsReturnStruct, err os.Error) {
  err = p.SendGetAssociations(_homeId, _nodeId, _groupIdx)
  if err != nil { return }
  return p.RecvGetAssociations()
}

func (p *RemoteManagerClient) SendGetAssociations(_homeId int32, _nodeId byte, _groupIdx byte)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("GetAssociations", thrift.CALL, p.SeqId)
  args716 := NewGetAssociationsArgs()
  args716._homeId = _homeId
  args716._nodeId = _nodeId
  args716._groupIdx = _groupIdx
  err = args716.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvGetAssociations() (value *GetAssociationsReturnStruct, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error718 := thrift.NewTApplicationExceptionDefault()
    error719, err := error718.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error719
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result717 := NewGetAssociationsResult()
  err = result717.Read(iprot)
  iprot.ReadMessageEnd()
  value = result717.Success
  return
}

/**
 * Parameters:
 *  - _homeId
 *  - _nodeId
 *  - _groupIdx
 */
func (p *RemoteManagerClient) GetMaxAssociations(_homeId int32, _nodeId byte, _groupIdx byte) (retval720 byte, err os.Error) {
  err = p.SendGetMaxAssociations(_homeId, _nodeId, _groupIdx)
  if err != nil { return }
  return p.RecvGetMaxAssociations()
}

func (p *RemoteManagerClient) SendGetMaxAssociations(_homeId int32, _nodeId byte, _groupIdx byte)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("GetMaxAssociations", thrift.CALL, p.SeqId)
  args721 := NewGetMaxAssociationsArgs()
  args721._homeId = _homeId
  args721._nodeId = _nodeId
  args721._groupIdx = _groupIdx
  err = args721.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvGetMaxAssociations() (value byte, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error723 := thrift.NewTApplicationExceptionDefault()
    error724, err := error723.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error724
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result722 := NewGetMaxAssociationsResult()
  err = result722.Read(iprot)
  iprot.ReadMessageEnd()
  value = result722.Success
  return
}

/**
 * Parameters:
 *  - _homeId
 *  - _nodeId
 *  - _groupIdx
 */
func (p *RemoteManagerClient) GetGroupLabel(_homeId int32, _nodeId byte, _groupIdx byte) (retval725 string, err os.Error) {
  err = p.SendGetGroupLabel(_homeId, _nodeId, _groupIdx)
  if err != nil { return }
  return p.RecvGetGroupLabel()
}

func (p *RemoteManagerClient) SendGetGroupLabel(_homeId int32, _nodeId byte, _groupIdx byte)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("GetGroupLabel", thrift.CALL, p.SeqId)
  args726 := NewGetGroupLabelArgs()
  args726._homeId = _homeId
  args726._nodeId = _nodeId
  args726._groupIdx = _groupIdx
  err = args726.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvGetGroupLabel() (value string, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error728 := thrift.NewTApplicationExceptionDefault()
    error729, err := error728.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error729
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result727 := NewGetGroupLabelResult()
  err = result727.Read(iprot)
  iprot.ReadMessageEnd()
  value = result727.Success
  return
}

/**
 * Parameters:
 *  - _homeId
 *  - _nodeId
 *  - _groupIdx
 *  - _targetNodeId
 */
func (p *RemoteManagerClient) AddAssociation(_homeId int32, _nodeId byte, _groupIdx byte, _targetNodeId byte) (err os.Error) {
  err = p.SendAddAssociation(_homeId, _nodeId, _groupIdx, _targetNodeId)
  if err != nil { return }
  return p.RecvAddAssociation()
}

func (p *RemoteManagerClient) SendAddAssociation(_homeId int32, _nodeId byte, _groupIdx byte, _targetNodeId byte)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("AddAssociation", thrift.CALL, p.SeqId)
  args731 := NewAddAssociationArgs()
  args731._homeId = _homeId
  args731._nodeId = _nodeId
  args731._groupIdx = _groupIdx
  args731._targetNodeId = _targetNodeId
  err = args731.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvAddAssociation() (err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error733 := thrift.NewTApplicationExceptionDefault()
    error734, err := error733.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error734
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result732 := NewAddAssociationResult()
  err = result732.Read(iprot)
  iprot.ReadMessageEnd()
  return
}

/**
 * Parameters:
 *  - _homeId
 *  - _nodeId
 *  - _groupIdx
 *  - _targetNodeId
 */
func (p *RemoteManagerClient) RemoveAssociation(_homeId int32, _nodeId byte, _groupIdx byte, _targetNodeId byte) (err os.Error) {
  err = p.SendRemoveAssociation(_homeId, _nodeId, _groupIdx, _targetNodeId)
  if err != nil { return }
  return p.RecvRemoveAssociation()
}

func (p *RemoteManagerClient) SendRemoveAssociation(_homeId int32, _nodeId byte, _groupIdx byte, _targetNodeId byte)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("RemoveAssociation", thrift.CALL, p.SeqId)
  args736 := NewRemoveAssociationArgs()
  args736._homeId = _homeId
  args736._nodeId = _nodeId
  args736._groupIdx = _groupIdx
  args736._targetNodeId = _targetNodeId
  err = args736.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvRemoveAssociation() (err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error738 := thrift.NewTApplicationExceptionDefault()
    error739, err := error738.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error739
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result737 := NewRemoveAssociationResult()
  err = result737.Read(iprot)
  iprot.ReadMessageEnd()
  return
}

/**
 * Parameters:
 *  - _homeId
 */
func (p *RemoteManagerClient) ResetController(_homeId int32) (err os.Error) {
  err = p.SendResetController(_homeId)
  if err != nil { return }
  return p.RecvResetController()
}

func (p *RemoteManagerClient) SendResetController(_homeId int32)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("ResetController", thrift.CALL, p.SeqId)
  args741 := NewResetControllerArgs()
  args741._homeId = _homeId
  err = args741.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvResetController() (err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error743 := thrift.NewTApplicationExceptionDefault()
    error744, err := error743.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error744
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result742 := NewResetControllerResult()
  err = result742.Read(iprot)
  iprot.ReadMessageEnd()
  return
}

/**
 * Parameters:
 *  - _homeId
 */
func (p *RemoteManagerClient) SoftReset(_homeId int32) (err os.Error) {
  err = p.SendSoftReset(_homeId)
  if err != nil { return }
  return p.RecvSoftReset()
}

func (p *RemoteManagerClient) SendSoftReset(_homeId int32)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("SoftReset", thrift.CALL, p.SeqId)
  args746 := NewSoftResetArgs()
  args746._homeId = _homeId
  err = args746.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvSoftReset() (err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error748 := thrift.NewTApplicationExceptionDefault()
    error749, err := error748.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error749
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result747 := NewSoftResetResult()
  err = result747.Read(iprot)
  iprot.ReadMessageEnd()
  return
}

/**
 * Parameters:
 *  - _homeId
 *  - _command
 *  - _highPower
 *  - _nodeId
 *  - _arg
 */
func (p *RemoteManagerClient) BeginControllerCommand(_homeId int32, _command DriverControllerCommand, _highPower bool, _nodeId byte, _arg byte) (retval750 bool, err os.Error) {
  err = p.SendBeginControllerCommand(_homeId, _command, _highPower, _nodeId, _arg)
  if err != nil { return }
  return p.RecvBeginControllerCommand()
}

func (p *RemoteManagerClient) SendBeginControllerCommand(_homeId int32, _command DriverControllerCommand, _highPower bool, _nodeId byte, _arg byte)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("BeginControllerCommand", thrift.CALL, p.SeqId)
  args751 := NewBeginControllerCommandArgs()
  args751._homeId = _homeId
  args751._command = _command
  args751._highPower = _highPower
  args751._nodeId = _nodeId
  args751._arg = _arg
  err = args751.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvBeginControllerCommand() (value bool, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error753 := thrift.NewTApplicationExceptionDefault()
    error754, err := error753.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error754
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result752 := NewBeginControllerCommandResult()
  err = result752.Read(iprot)
  iprot.ReadMessageEnd()
  value = result752.Success
  return
}

/**
 * Parameters:
 *  - _homeId
 */
func (p *RemoteManagerClient) CancelControllerCommand(_homeId int32) (retval755 bool, err os.Error) {
  err = p.SendCancelControllerCommand(_homeId)
  if err != nil { return }
  return p.RecvCancelControllerCommand()
}

func (p *RemoteManagerClient) SendCancelControllerCommand(_homeId int32)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("CancelControllerCommand", thrift.CALL, p.SeqId)
  args756 := NewCancelControllerCommandArgs()
  args756._homeId = _homeId
  err = args756.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvCancelControllerCommand() (value bool, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error758 := thrift.NewTApplicationExceptionDefault()
    error759, err := error758.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error759
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result757 := NewCancelControllerCommandResult()
  err = result757.Read(iprot)
  iprot.ReadMessageEnd()
  value = result757.Success
  return
}

func (p *RemoteManagerClient) GetNumScenes() (retval760 byte, err os.Error) {
  err = p.SendGetNumScenes()
  if err != nil { return }
  return p.RecvGetNumScenes()
}

func (p *RemoteManagerClient) SendGetNumScenes()(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("GetNumScenes", thrift.CALL, p.SeqId)
  args761 := NewGetNumScenesArgs()
  err = args761.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvGetNumScenes() (value byte, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error763 := thrift.NewTApplicationExceptionDefault()
    error764, err := error763.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error764
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result762 := NewGetNumScenesResult()
  err = result762.Read(iprot)
  iprot.ReadMessageEnd()
  value = result762.Success
  return
}

func (p *RemoteManagerClient) GetAllScenes() (retval765 *GetAllScenesReturnStruct, err os.Error) {
  err = p.SendGetAllScenes()
  if err != nil { return }
  return p.RecvGetAllScenes()
}

func (p *RemoteManagerClient) SendGetAllScenes()(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("GetAllScenes", thrift.CALL, p.SeqId)
  args766 := NewGetAllScenesArgs()
  err = args766.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvGetAllScenes() (value *GetAllScenesReturnStruct, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error768 := thrift.NewTApplicationExceptionDefault()
    error769, err := error768.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error769
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result767 := NewGetAllScenesResult()
  err = result767.Read(iprot)
  iprot.ReadMessageEnd()
  value = result767.Success
  return
}

func (p *RemoteManagerClient) CreateScene() (retval770 byte, err os.Error) {
  err = p.SendCreateScene()
  if err != nil { return }
  return p.RecvCreateScene()
}

func (p *RemoteManagerClient) SendCreateScene()(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("CreateScene", thrift.CALL, p.SeqId)
  args771 := NewCreateSceneArgs()
  err = args771.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvCreateScene() (value byte, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error773 := thrift.NewTApplicationExceptionDefault()
    error774, err := error773.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error774
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result772 := NewCreateSceneResult()
  err = result772.Read(iprot)
  iprot.ReadMessageEnd()
  value = result772.Success
  return
}

/**
 * Parameters:
 *  - _sceneId
 */
func (p *RemoteManagerClient) RemoveScene(_sceneId byte) (retval775 bool, err os.Error) {
  err = p.SendRemoveScene(_sceneId)
  if err != nil { return }
  return p.RecvRemoveScene()
}

func (p *RemoteManagerClient) SendRemoveScene(_sceneId byte)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("RemoveScene", thrift.CALL, p.SeqId)
  args776 := NewRemoveSceneArgs()
  args776._sceneId = _sceneId
  err = args776.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvRemoveScene() (value bool, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error778 := thrift.NewTApplicationExceptionDefault()
    error779, err := error778.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error779
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result777 := NewRemoveSceneResult()
  err = result777.Read(iprot)
  iprot.ReadMessageEnd()
  value = result777.Success
  return
}

/**
 * Parameters:
 *  - _sceneId
 *  - _valueId
 *  - _value
 */
func (p *RemoteManagerClient) AddSceneValueBool(_sceneId byte, _valueId *RemoteValueID, _value bool) (retval780 bool, err os.Error) {
  err = p.SendAddSceneValueBool(_sceneId, _valueId, _value)
  if err != nil { return }
  return p.RecvAddSceneValueBool()
}

func (p *RemoteManagerClient) SendAddSceneValueBool(_sceneId byte, _valueId *RemoteValueID, _value bool)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("AddSceneValue_Bool", thrift.CALL, p.SeqId)
  args781 := NewAddSceneValueBoolArgs()
  args781._sceneId = _sceneId
  args781._valueId = _valueId
  args781._value = _value
  err = args781.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvAddSceneValueBool() (value bool, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error783 := thrift.NewTApplicationExceptionDefault()
    error784, err := error783.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error784
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result782 := NewAddSceneValueBoolResult()
  err = result782.Read(iprot)
  iprot.ReadMessageEnd()
  value = result782.Success
  return
}

/**
 * Parameters:
 *  - _sceneId
 *  - _valueId
 *  - _value
 */
func (p *RemoteManagerClient) AddSceneValueUint8(_sceneId byte, _valueId *RemoteValueID, _value byte) (retval785 bool, err os.Error) {
  err = p.SendAddSceneValueUint8(_sceneId, _valueId, _value)
  if err != nil { return }
  return p.RecvAddSceneValueUint8()
}

func (p *RemoteManagerClient) SendAddSceneValueUint8(_sceneId byte, _valueId *RemoteValueID, _value byte)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("AddSceneValue_Uint8", thrift.CALL, p.SeqId)
  args786 := NewAddSceneValueUint8Args()
  args786._sceneId = _sceneId
  args786._valueId = _valueId
  args786._value = _value
  err = args786.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvAddSceneValueUint8() (value bool, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error788 := thrift.NewTApplicationExceptionDefault()
    error789, err := error788.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error789
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result787 := NewAddSceneValueUint8Result()
  err = result787.Read(iprot)
  iprot.ReadMessageEnd()
  value = result787.Success
  return
}

/**
 * Parameters:
 *  - _sceneId
 *  - _valueId
 *  - _value
 */
func (p *RemoteManagerClient) AddSceneValueFloat(_sceneId byte, _valueId *RemoteValueID, _value float64) (retval790 bool, err os.Error) {
  err = p.SendAddSceneValueFloat(_sceneId, _valueId, _value)
  if err != nil { return }
  return p.RecvAddSceneValueFloat()
}

func (p *RemoteManagerClient) SendAddSceneValueFloat(_sceneId byte, _valueId *RemoteValueID, _value float64)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("AddSceneValue_Float", thrift.CALL, p.SeqId)
  args791 := NewAddSceneValueFloatArgs()
  args791._sceneId = _sceneId
  args791._valueId = _valueId
  args791._value = _value
  err = args791.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvAddSceneValueFloat() (value bool, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error793 := thrift.NewTApplicationExceptionDefault()
    error794, err := error793.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error794
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result792 := NewAddSceneValueFloatResult()
  err = result792.Read(iprot)
  iprot.ReadMessageEnd()
  value = result792.Success
  return
}

/**
 * Parameters:
 *  - _sceneId
 *  - _valueId
 *  - _value
 */
func (p *RemoteManagerClient) AddSceneValueInt32(_sceneId byte, _valueId *RemoteValueID, _value int32) (retval795 bool, err os.Error) {
  err = p.SendAddSceneValueInt32(_sceneId, _valueId, _value)
  if err != nil { return }
  return p.RecvAddSceneValueInt32()
}

func (p *RemoteManagerClient) SendAddSceneValueInt32(_sceneId byte, _valueId *RemoteValueID, _value int32)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("AddSceneValue_Int32", thrift.CALL, p.SeqId)
  args796 := NewAddSceneValueInt32Args()
  args796._sceneId = _sceneId
  args796._valueId = _valueId
  args796._value = _value
  err = args796.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvAddSceneValueInt32() (value bool, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error798 := thrift.NewTApplicationExceptionDefault()
    error799, err := error798.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error799
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result797 := NewAddSceneValueInt32Result()
  err = result797.Read(iprot)
  iprot.ReadMessageEnd()
  value = result797.Success
  return
}

/**
 * Parameters:
 *  - _sceneId
 *  - _valueId
 *  - _value
 */
func (p *RemoteManagerClient) AddSceneValueInt16(_sceneId byte, _valueId *RemoteValueID, _value int16) (retval800 bool, err os.Error) {
  err = p.SendAddSceneValueInt16(_sceneId, _valueId, _value)
  if err != nil { return }
  return p.RecvAddSceneValueInt16()
}

func (p *RemoteManagerClient) SendAddSceneValueInt16(_sceneId byte, _valueId *RemoteValueID, _value int16)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("AddSceneValue_Int16", thrift.CALL, p.SeqId)
  args801 := NewAddSceneValueInt16Args()
  args801._sceneId = _sceneId
  args801._valueId = _valueId
  args801._value = _value
  err = args801.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvAddSceneValueInt16() (value bool, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error803 := thrift.NewTApplicationExceptionDefault()
    error804, err := error803.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error804
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result802 := NewAddSceneValueInt16Result()
  err = result802.Read(iprot)
  iprot.ReadMessageEnd()
  value = result802.Success
  return
}

/**
 * Parameters:
 *  - _sceneId
 *  - _valueId
 *  - _value
 */
func (p *RemoteManagerClient) AddSceneValueString(_sceneId byte, _valueId *RemoteValueID, _value string) (retval805 bool, err os.Error) {
  err = p.SendAddSceneValueString(_sceneId, _valueId, _value)
  if err != nil { return }
  return p.RecvAddSceneValueString()
}

func (p *RemoteManagerClient) SendAddSceneValueString(_sceneId byte, _valueId *RemoteValueID, _value string)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("AddSceneValue_String", thrift.CALL, p.SeqId)
  args806 := NewAddSceneValueStringArgs()
  args806._sceneId = _sceneId
  args806._valueId = _valueId
  args806._value = _value
  err = args806.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvAddSceneValueString() (value bool, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error808 := thrift.NewTApplicationExceptionDefault()
    error809, err := error808.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error809
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result807 := NewAddSceneValueStringResult()
  err = result807.Read(iprot)
  iprot.ReadMessageEnd()
  value = result807.Success
  return
}

/**
 * Parameters:
 *  - _sceneId
 *  - _valueId
 *  - _value
 */
func (p *RemoteManagerClient) AddSceneValueListSelectionString(_sceneId byte, _valueId *RemoteValueID, _value string) (retval810 bool, err os.Error) {
  err = p.SendAddSceneValueListSelectionString(_sceneId, _valueId, _value)
  if err != nil { return }
  return p.RecvAddSceneValueListSelectionString()
}

func (p *RemoteManagerClient) SendAddSceneValueListSelectionString(_sceneId byte, _valueId *RemoteValueID, _value string)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("AddSceneValueListSelection_String", thrift.CALL, p.SeqId)
  args811 := NewAddSceneValueListSelectionStringArgs()
  args811._sceneId = _sceneId
  args811._valueId = _valueId
  args811._value = _value
  err = args811.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvAddSceneValueListSelectionString() (value bool, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error813 := thrift.NewTApplicationExceptionDefault()
    error814, err := error813.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error814
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result812 := NewAddSceneValueListSelectionStringResult()
  err = result812.Read(iprot)
  iprot.ReadMessageEnd()
  value = result812.Success
  return
}

/**
 * Parameters:
 *  - _sceneId
 *  - _valueId
 *  - _value
 */
func (p *RemoteManagerClient) AddSceneValueListSelectionInt32(_sceneId byte, _valueId *RemoteValueID, _value int32) (retval815 bool, err os.Error) {
  err = p.SendAddSceneValueListSelectionInt32(_sceneId, _valueId, _value)
  if err != nil { return }
  return p.RecvAddSceneValueListSelectionInt32()
}

func (p *RemoteManagerClient) SendAddSceneValueListSelectionInt32(_sceneId byte, _valueId *RemoteValueID, _value int32)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("AddSceneValueListSelection_Int32", thrift.CALL, p.SeqId)
  args816 := NewAddSceneValueListSelectionInt32Args()
  args816._sceneId = _sceneId
  args816._valueId = _valueId
  args816._value = _value
  err = args816.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvAddSceneValueListSelectionInt32() (value bool, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error818 := thrift.NewTApplicationExceptionDefault()
    error819, err := error818.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error819
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result817 := NewAddSceneValueListSelectionInt32Result()
  err = result817.Read(iprot)
  iprot.ReadMessageEnd()
  value = result817.Success
  return
}

/**
 * Parameters:
 *  - _sceneId
 *  - _valueId
 */
func (p *RemoteManagerClient) RemoveSceneValue(_sceneId byte, _valueId *RemoteValueID) (retval820 bool, err os.Error) {
  err = p.SendRemoveSceneValue(_sceneId, _valueId)
  if err != nil { return }
  return p.RecvRemoveSceneValue()
}

func (p *RemoteManagerClient) SendRemoveSceneValue(_sceneId byte, _valueId *RemoteValueID)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("RemoveSceneValue", thrift.CALL, p.SeqId)
  args821 := NewRemoveSceneValueArgs()
  args821._sceneId = _sceneId
  args821._valueId = _valueId
  err = args821.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvRemoveSceneValue() (value bool, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error823 := thrift.NewTApplicationExceptionDefault()
    error824, err := error823.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error824
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result822 := NewRemoveSceneValueResult()
  err = result822.Read(iprot)
  iprot.ReadMessageEnd()
  value = result822.Success
  return
}

/**
 * Parameters:
 *  - _sceneId
 */
func (p *RemoteManagerClient) SceneGetValues(_sceneId byte) (retval825 *SceneGetValuesReturnStruct, err os.Error) {
  err = p.SendSceneGetValues(_sceneId)
  if err != nil { return }
  return p.RecvSceneGetValues()
}

func (p *RemoteManagerClient) SendSceneGetValues(_sceneId byte)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("SceneGetValues", thrift.CALL, p.SeqId)
  args826 := NewSceneGetValuesArgs()
  args826._sceneId = _sceneId
  err = args826.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvSceneGetValues() (value *SceneGetValuesReturnStruct, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error828 := thrift.NewTApplicationExceptionDefault()
    error829, err := error828.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error829
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result827 := NewSceneGetValuesResult()
  err = result827.Read(iprot)
  iprot.ReadMessageEnd()
  value = result827.Success
  return
}

/**
 * Parameters:
 *  - _sceneId
 *  - _valueId
 */
func (p *RemoteManagerClient) SceneGetValueAsBool(_sceneId byte, _valueId *RemoteValueID) (retval830 *BoolBool, err os.Error) {
  err = p.SendSceneGetValueAsBool(_sceneId, _valueId)
  if err != nil { return }
  return p.RecvSceneGetValueAsBool()
}

func (p *RemoteManagerClient) SendSceneGetValueAsBool(_sceneId byte, _valueId *RemoteValueID)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("SceneGetValueAsBool", thrift.CALL, p.SeqId)
  args831 := NewSceneGetValueAsBoolArgs()
  args831._sceneId = _sceneId
  args831._valueId = _valueId
  err = args831.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvSceneGetValueAsBool() (value *BoolBool, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error833 := thrift.NewTApplicationExceptionDefault()
    error834, err := error833.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error834
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result832 := NewSceneGetValueAsBoolResult()
  err = result832.Read(iprot)
  iprot.ReadMessageEnd()
  value = result832.Success
  return
}

/**
 * Parameters:
 *  - _sceneId
 *  - _valueId
 */
func (p *RemoteManagerClient) SceneGetValueAsByte(_sceneId byte, _valueId *RemoteValueID) (retval835 *BoolUInt8, err os.Error) {
  err = p.SendSceneGetValueAsByte(_sceneId, _valueId)
  if err != nil { return }
  return p.RecvSceneGetValueAsByte()
}

func (p *RemoteManagerClient) SendSceneGetValueAsByte(_sceneId byte, _valueId *RemoteValueID)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("SceneGetValueAsByte", thrift.CALL, p.SeqId)
  args836 := NewSceneGetValueAsByteArgs()
  args836._sceneId = _sceneId
  args836._valueId = _valueId
  err = args836.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvSceneGetValueAsByte() (value *BoolUInt8, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error838 := thrift.NewTApplicationExceptionDefault()
    error839, err := error838.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error839
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result837 := NewSceneGetValueAsByteResult()
  err = result837.Read(iprot)
  iprot.ReadMessageEnd()
  value = result837.Success
  return
}

/**
 * Parameters:
 *  - _sceneId
 *  - _valueId
 */
func (p *RemoteManagerClient) SceneGetValueAsFloat(_sceneId byte, _valueId *RemoteValueID) (retval840 *BoolFloat, err os.Error) {
  err = p.SendSceneGetValueAsFloat(_sceneId, _valueId)
  if err != nil { return }
  return p.RecvSceneGetValueAsFloat()
}

func (p *RemoteManagerClient) SendSceneGetValueAsFloat(_sceneId byte, _valueId *RemoteValueID)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("SceneGetValueAsFloat", thrift.CALL, p.SeqId)
  args841 := NewSceneGetValueAsFloatArgs()
  args841._sceneId = _sceneId
  args841._valueId = _valueId
  err = args841.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvSceneGetValueAsFloat() (value *BoolFloat, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error843 := thrift.NewTApplicationExceptionDefault()
    error844, err := error843.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error844
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result842 := NewSceneGetValueAsFloatResult()
  err = result842.Read(iprot)
  iprot.ReadMessageEnd()
  value = result842.Success
  return
}

/**
 * Parameters:
 *  - _sceneId
 *  - _valueId
 */
func (p *RemoteManagerClient) SceneGetValueAsInt(_sceneId byte, _valueId *RemoteValueID) (retval845 *BoolInt, err os.Error) {
  err = p.SendSceneGetValueAsInt(_sceneId, _valueId)
  if err != nil { return }
  return p.RecvSceneGetValueAsInt()
}

func (p *RemoteManagerClient) SendSceneGetValueAsInt(_sceneId byte, _valueId *RemoteValueID)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("SceneGetValueAsInt", thrift.CALL, p.SeqId)
  args846 := NewSceneGetValueAsIntArgs()
  args846._sceneId = _sceneId
  args846._valueId = _valueId
  err = args846.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvSceneGetValueAsInt() (value *BoolInt, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error848 := thrift.NewTApplicationExceptionDefault()
    error849, err := error848.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error849
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result847 := NewSceneGetValueAsIntResult()
  err = result847.Read(iprot)
  iprot.ReadMessageEnd()
  value = result847.Success
  return
}

/**
 * Parameters:
 *  - _sceneId
 *  - _valueId
 */
func (p *RemoteManagerClient) SceneGetValueAsShort(_sceneId byte, _valueId *RemoteValueID) (retval850 *BoolInt16, err os.Error) {
  err = p.SendSceneGetValueAsShort(_sceneId, _valueId)
  if err != nil { return }
  return p.RecvSceneGetValueAsShort()
}

func (p *RemoteManagerClient) SendSceneGetValueAsShort(_sceneId byte, _valueId *RemoteValueID)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("SceneGetValueAsShort", thrift.CALL, p.SeqId)
  args851 := NewSceneGetValueAsShortArgs()
  args851._sceneId = _sceneId
  args851._valueId = _valueId
  err = args851.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvSceneGetValueAsShort() (value *BoolInt16, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error853 := thrift.NewTApplicationExceptionDefault()
    error854, err := error853.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error854
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result852 := NewSceneGetValueAsShortResult()
  err = result852.Read(iprot)
  iprot.ReadMessageEnd()
  value = result852.Success
  return
}

/**
 * Parameters:
 *  - _sceneId
 *  - _valueId
 */
func (p *RemoteManagerClient) SceneGetValueAsString(_sceneId byte, _valueId *RemoteValueID) (retval855 *BoolString, err os.Error) {
  err = p.SendSceneGetValueAsString(_sceneId, _valueId)
  if err != nil { return }
  return p.RecvSceneGetValueAsString()
}

func (p *RemoteManagerClient) SendSceneGetValueAsString(_sceneId byte, _valueId *RemoteValueID)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("SceneGetValueAsString", thrift.CALL, p.SeqId)
  args856 := NewSceneGetValueAsStringArgs()
  args856._sceneId = _sceneId
  args856._valueId = _valueId
  err = args856.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvSceneGetValueAsString() (value *BoolString, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error858 := thrift.NewTApplicationExceptionDefault()
    error859, err := error858.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error859
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result857 := NewSceneGetValueAsStringResult()
  err = result857.Read(iprot)
  iprot.ReadMessageEnd()
  value = result857.Success
  return
}

/**
 * Parameters:
 *  - _sceneId
 *  - _valueId
 */
func (p *RemoteManagerClient) SceneGetValueListSelectionString(_sceneId byte, _valueId *RemoteValueID) (retval860 *BoolString, err os.Error) {
  err = p.SendSceneGetValueListSelectionString(_sceneId, _valueId)
  if err != nil { return }
  return p.RecvSceneGetValueListSelectionString()
}

func (p *RemoteManagerClient) SendSceneGetValueListSelectionString(_sceneId byte, _valueId *RemoteValueID)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("SceneGetValueListSelection_String", thrift.CALL, p.SeqId)
  args861 := NewSceneGetValueListSelectionStringArgs()
  args861._sceneId = _sceneId
  args861._valueId = _valueId
  err = args861.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvSceneGetValueListSelectionString() (value *BoolString, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error863 := thrift.NewTApplicationExceptionDefault()
    error864, err := error863.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error864
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result862 := NewSceneGetValueListSelectionStringResult()
  err = result862.Read(iprot)
  iprot.ReadMessageEnd()
  value = result862.Success
  return
}

/**
 * Parameters:
 *  - _sceneId
 *  - _valueId
 */
func (p *RemoteManagerClient) SceneGetValueListSelectionInt32(_sceneId byte, _valueId *RemoteValueID) (retval865 *BoolInt, err os.Error) {
  err = p.SendSceneGetValueListSelectionInt32(_sceneId, _valueId)
  if err != nil { return }
  return p.RecvSceneGetValueListSelectionInt32()
}

func (p *RemoteManagerClient) SendSceneGetValueListSelectionInt32(_sceneId byte, _valueId *RemoteValueID)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("SceneGetValueListSelection_Int32", thrift.CALL, p.SeqId)
  args866 := NewSceneGetValueListSelectionInt32Args()
  args866._sceneId = _sceneId
  args866._valueId = _valueId
  err = args866.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvSceneGetValueListSelectionInt32() (value *BoolInt, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error868 := thrift.NewTApplicationExceptionDefault()
    error869, err := error868.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error869
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result867 := NewSceneGetValueListSelectionInt32Result()
  err = result867.Read(iprot)
  iprot.ReadMessageEnd()
  value = result867.Success
  return
}

/**
 * Parameters:
 *  - _sceneId
 *  - _valueId
 *  - _value
 */
func (p *RemoteManagerClient) SetSceneValueBool(_sceneId byte, _valueId *RemoteValueID, _value bool) (retval870 bool, err os.Error) {
  err = p.SendSetSceneValueBool(_sceneId, _valueId, _value)
  if err != nil { return }
  return p.RecvSetSceneValueBool()
}

func (p *RemoteManagerClient) SendSetSceneValueBool(_sceneId byte, _valueId *RemoteValueID, _value bool)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("SetSceneValue_Bool", thrift.CALL, p.SeqId)
  args871 := NewSetSceneValueBoolArgs()
  args871._sceneId = _sceneId
  args871._valueId = _valueId
  args871._value = _value
  err = args871.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvSetSceneValueBool() (value bool, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error873 := thrift.NewTApplicationExceptionDefault()
    error874, err := error873.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error874
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result872 := NewSetSceneValueBoolResult()
  err = result872.Read(iprot)
  iprot.ReadMessageEnd()
  value = result872.Success
  return
}

/**
 * Parameters:
 *  - _sceneId
 *  - _valueId
 *  - _value
 */
func (p *RemoteManagerClient) SetSceneValueUint8(_sceneId byte, _valueId *RemoteValueID, _value byte) (retval875 bool, err os.Error) {
  err = p.SendSetSceneValueUint8(_sceneId, _valueId, _value)
  if err != nil { return }
  return p.RecvSetSceneValueUint8()
}

func (p *RemoteManagerClient) SendSetSceneValueUint8(_sceneId byte, _valueId *RemoteValueID, _value byte)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("SetSceneValue_Uint8", thrift.CALL, p.SeqId)
  args876 := NewSetSceneValueUint8Args()
  args876._sceneId = _sceneId
  args876._valueId = _valueId
  args876._value = _value
  err = args876.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvSetSceneValueUint8() (value bool, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error878 := thrift.NewTApplicationExceptionDefault()
    error879, err := error878.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error879
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result877 := NewSetSceneValueUint8Result()
  err = result877.Read(iprot)
  iprot.ReadMessageEnd()
  value = result877.Success
  return
}

/**
 * Parameters:
 *  - _sceneId
 *  - _valueId
 *  - _value
 */
func (p *RemoteManagerClient) SetSceneValueFloat(_sceneId byte, _valueId *RemoteValueID, _value float64) (retval880 bool, err os.Error) {
  err = p.SendSetSceneValueFloat(_sceneId, _valueId, _value)
  if err != nil { return }
  return p.RecvSetSceneValueFloat()
}

func (p *RemoteManagerClient) SendSetSceneValueFloat(_sceneId byte, _valueId *RemoteValueID, _value float64)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("SetSceneValue_Float", thrift.CALL, p.SeqId)
  args881 := NewSetSceneValueFloatArgs()
  args881._sceneId = _sceneId
  args881._valueId = _valueId
  args881._value = _value
  err = args881.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvSetSceneValueFloat() (value bool, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error883 := thrift.NewTApplicationExceptionDefault()
    error884, err := error883.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error884
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result882 := NewSetSceneValueFloatResult()
  err = result882.Read(iprot)
  iprot.ReadMessageEnd()
  value = result882.Success
  return
}

/**
 * Parameters:
 *  - _sceneId
 *  - _valueId
 *  - _value
 */
func (p *RemoteManagerClient) SetSceneValueInt32(_sceneId byte, _valueId *RemoteValueID, _value int32) (retval885 bool, err os.Error) {
  err = p.SendSetSceneValueInt32(_sceneId, _valueId, _value)
  if err != nil { return }
  return p.RecvSetSceneValueInt32()
}

func (p *RemoteManagerClient) SendSetSceneValueInt32(_sceneId byte, _valueId *RemoteValueID, _value int32)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("SetSceneValue_Int32", thrift.CALL, p.SeqId)
  args886 := NewSetSceneValueInt32Args()
  args886._sceneId = _sceneId
  args886._valueId = _valueId
  args886._value = _value
  err = args886.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvSetSceneValueInt32() (value bool, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error888 := thrift.NewTApplicationExceptionDefault()
    error889, err := error888.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error889
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result887 := NewSetSceneValueInt32Result()
  err = result887.Read(iprot)
  iprot.ReadMessageEnd()
  value = result887.Success
  return
}

/**
 * Parameters:
 *  - _sceneId
 *  - _valueId
 *  - _value
 */
func (p *RemoteManagerClient) SetSceneValueInt16(_sceneId byte, _valueId *RemoteValueID, _value int16) (retval890 bool, err os.Error) {
  err = p.SendSetSceneValueInt16(_sceneId, _valueId, _value)
  if err != nil { return }
  return p.RecvSetSceneValueInt16()
}

func (p *RemoteManagerClient) SendSetSceneValueInt16(_sceneId byte, _valueId *RemoteValueID, _value int16)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("SetSceneValue_Int16", thrift.CALL, p.SeqId)
  args891 := NewSetSceneValueInt16Args()
  args891._sceneId = _sceneId
  args891._valueId = _valueId
  args891._value = _value
  err = args891.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvSetSceneValueInt16() (value bool, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error893 := thrift.NewTApplicationExceptionDefault()
    error894, err := error893.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error894
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result892 := NewSetSceneValueInt16Result()
  err = result892.Read(iprot)
  iprot.ReadMessageEnd()
  value = result892.Success
  return
}

/**
 * Parameters:
 *  - _sceneId
 *  - _valueId
 *  - _value
 */
func (p *RemoteManagerClient) SetSceneValueString(_sceneId byte, _valueId *RemoteValueID, _value string) (retval895 bool, err os.Error) {
  err = p.SendSetSceneValueString(_sceneId, _valueId, _value)
  if err != nil { return }
  return p.RecvSetSceneValueString()
}

func (p *RemoteManagerClient) SendSetSceneValueString(_sceneId byte, _valueId *RemoteValueID, _value string)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("SetSceneValue_String", thrift.CALL, p.SeqId)
  args896 := NewSetSceneValueStringArgs()
  args896._sceneId = _sceneId
  args896._valueId = _valueId
  args896._value = _value
  err = args896.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvSetSceneValueString() (value bool, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error898 := thrift.NewTApplicationExceptionDefault()
    error899, err := error898.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error899
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result897 := NewSetSceneValueStringResult()
  err = result897.Read(iprot)
  iprot.ReadMessageEnd()
  value = result897.Success
  return
}

/**
 * Parameters:
 *  - _sceneId
 *  - _valueId
 *  - _value
 */
func (p *RemoteManagerClient) SetSceneValueListSelectionString(_sceneId byte, _valueId *RemoteValueID, _value string) (retval900 bool, err os.Error) {
  err = p.SendSetSceneValueListSelectionString(_sceneId, _valueId, _value)
  if err != nil { return }
  return p.RecvSetSceneValueListSelectionString()
}

func (p *RemoteManagerClient) SendSetSceneValueListSelectionString(_sceneId byte, _valueId *RemoteValueID, _value string)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("SetSceneValueListSelection_String", thrift.CALL, p.SeqId)
  args901 := NewSetSceneValueListSelectionStringArgs()
  args901._sceneId = _sceneId
  args901._valueId = _valueId
  args901._value = _value
  err = args901.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvSetSceneValueListSelectionString() (value bool, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error903 := thrift.NewTApplicationExceptionDefault()
    error904, err := error903.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error904
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result902 := NewSetSceneValueListSelectionStringResult()
  err = result902.Read(iprot)
  iprot.ReadMessageEnd()
  value = result902.Success
  return
}

/**
 * Parameters:
 *  - _sceneId
 *  - _valueId
 *  - _value
 */
func (p *RemoteManagerClient) SetSceneValueListSelectionInt32(_sceneId byte, _valueId *RemoteValueID, _value int32) (retval905 bool, err os.Error) {
  err = p.SendSetSceneValueListSelectionInt32(_sceneId, _valueId, _value)
  if err != nil { return }
  return p.RecvSetSceneValueListSelectionInt32()
}

func (p *RemoteManagerClient) SendSetSceneValueListSelectionInt32(_sceneId byte, _valueId *RemoteValueID, _value int32)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("SetSceneValueListSelection_Int32", thrift.CALL, p.SeqId)
  args906 := NewSetSceneValueListSelectionInt32Args()
  args906._sceneId = _sceneId
  args906._valueId = _valueId
  args906._value = _value
  err = args906.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvSetSceneValueListSelectionInt32() (value bool, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error908 := thrift.NewTApplicationExceptionDefault()
    error909, err := error908.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error909
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result907 := NewSetSceneValueListSelectionInt32Result()
  err = result907.Read(iprot)
  iprot.ReadMessageEnd()
  value = result907.Success
  return
}

/**
 * Parameters:
 *  - _sceneId
 */
func (p *RemoteManagerClient) GetSceneLabel(_sceneId byte) (retval910 string, err os.Error) {
  err = p.SendGetSceneLabel(_sceneId)
  if err != nil { return }
  return p.RecvGetSceneLabel()
}

func (p *RemoteManagerClient) SendGetSceneLabel(_sceneId byte)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("GetSceneLabel", thrift.CALL, p.SeqId)
  args911 := NewGetSceneLabelArgs()
  args911._sceneId = _sceneId
  err = args911.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvGetSceneLabel() (value string, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error913 := thrift.NewTApplicationExceptionDefault()
    error914, err := error913.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error914
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result912 := NewGetSceneLabelResult()
  err = result912.Read(iprot)
  iprot.ReadMessageEnd()
  value = result912.Success
  return
}

/**
 * Parameters:
 *  - _sceneId
 *  - _value
 */
func (p *RemoteManagerClient) SetSceneLabel(_sceneId byte, _value string) (err os.Error) {
  err = p.SendSetSceneLabel(_sceneId, _value)
  if err != nil { return }
  return p.RecvSetSceneLabel()
}

func (p *RemoteManagerClient) SendSetSceneLabel(_sceneId byte, _value string)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("SetSceneLabel", thrift.CALL, p.SeqId)
  args916 := NewSetSceneLabelArgs()
  args916._sceneId = _sceneId
  args916._value = _value
  err = args916.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvSetSceneLabel() (err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error918 := thrift.NewTApplicationExceptionDefault()
    error919, err := error918.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error919
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result917 := NewSetSceneLabelResult()
  err = result917.Read(iprot)
  iprot.ReadMessageEnd()
  return
}

/**
 * Parameters:
 *  - _sceneId
 */
func (p *RemoteManagerClient) SceneExists(_sceneId byte) (retval920 bool, err os.Error) {
  err = p.SendSceneExists(_sceneId)
  if err != nil { return }
  return p.RecvSceneExists()
}

func (p *RemoteManagerClient) SendSceneExists(_sceneId byte)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("SceneExists", thrift.CALL, p.SeqId)
  args921 := NewSceneExistsArgs()
  args921._sceneId = _sceneId
  err = args921.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvSceneExists() (value bool, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error923 := thrift.NewTApplicationExceptionDefault()
    error924, err := error923.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error924
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result922 := NewSceneExistsResult()
  err = result922.Read(iprot)
  iprot.ReadMessageEnd()
  value = result922.Success
  return
}

/**
 * Parameters:
 *  - _sceneId
 */
func (p *RemoteManagerClient) ActivateScene(_sceneId byte) (retval925 bool, err os.Error) {
  err = p.SendActivateScene(_sceneId)
  if err != nil { return }
  return p.RecvActivateScene()
}

func (p *RemoteManagerClient) SendActivateScene(_sceneId byte)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("ActivateScene", thrift.CALL, p.SeqId)
  args926 := NewActivateSceneArgs()
  args926._sceneId = _sceneId
  err = args926.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvActivateScene() (value bool, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error928 := thrift.NewTApplicationExceptionDefault()
    error929, err := error928.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error929
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result927 := NewActivateSceneResult()
  err = result927.Read(iprot)
  iprot.ReadMessageEnd()
  value = result927.Success
  return
}

/**
 * Parameters:
 *  - _homeId
 */
func (p *RemoteManagerClient) GetDriverStatistics(_homeId int32) (retval930 *GetDriverStatisticsReturnStruct, err os.Error) {
  err = p.SendGetDriverStatistics(_homeId)
  if err != nil { return }
  return p.RecvGetDriverStatistics()
}

func (p *RemoteManagerClient) SendGetDriverStatistics(_homeId int32)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("GetDriverStatistics", thrift.CALL, p.SeqId)
  args931 := NewGetDriverStatisticsArgs()
  args931._homeId = _homeId
  err = args931.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvGetDriverStatistics() (value *GetDriverStatisticsReturnStruct, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error933 := thrift.NewTApplicationExceptionDefault()
    error934, err := error933.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error934
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result932 := NewGetDriverStatisticsResult()
  err = result932.Read(iprot)
  iprot.ReadMessageEnd()
  value = result932.Success
  return
}

func (p *RemoteManagerClient) SendAllValues() (err os.Error) {
  err = p.SendSendAllValues()
  if err != nil { return }
  return p.RecvSendAllValues()
}

func (p *RemoteManagerClient) SendSendAllValues()(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("SendAllValues", thrift.CALL, p.SeqId)
  args936 := NewSendAllValuesArgs()
  err = args936.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvSendAllValues() (err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error938 := thrift.NewTApplicationExceptionDefault()
    error939, err := error938.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error939
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result937 := NewSendAllValuesResult()
  err = result937.Read(iprot)
  iprot.ReadMessageEnd()
  return
}


type RemoteManagerProcessor struct {
  handler IRemoteManager
  processorMap map[string]thrift.TProcessorFunction
}

func (p *RemoteManagerProcessor) Handler() IRemoteManager {
  return p.handler
}

func (p *RemoteManagerProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *RemoteManagerProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, exists bool) {
  processor, exists = p.processorMap[key]
  return processor, exists
}

func (p *RemoteManagerProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewRemoteManagerProcessor(handler IRemoteManager) *RemoteManagerProcessor {

  self940 := &RemoteManagerProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self940.processorMap["WriteConfig"] = &remoteManagerProcessorWriteConfig{handler:handler}
  self940.processorMap["GetControllerNodeId"] = &remoteManagerProcessorGetControllerNodeId{handler:handler}
  self940.processorMap["IsPrimaryController"] = &remoteManagerProcessorIsPrimaryController{handler:handler}
  self940.processorMap["IsStaticUpdateController"] = &remoteManagerProcessorIsStaticUpdateController{handler:handler}
  self940.processorMap["IsBridgeController"] = &remoteManagerProcessorIsBridgeController{handler:handler}
  self940.processorMap["GetLibraryVersion"] = &remoteManagerProcessorGetLibraryVersion{handler:handler}
  self940.processorMap["GetLibraryTypeName"] = &remoteManagerProcessorGetLibraryTypeName{handler:handler}
  self940.processorMap["GetSendQueueCount"] = &remoteManagerProcessorGetSendQueueCount{handler:handler}
  self940.processorMap["GetPollInterval"] = &remoteManagerProcessorGetPollInterval{handler:handler}
  self940.processorMap["SetPollInterval"] = &remoteManagerProcessorSetPollInterval{handler:handler}
  self940.processorMap["EnablePoll"] = &remoteManagerProcessorEnablePoll{handler:handler}
  self940.processorMap["DisablePoll"] = &remoteManagerProcessorDisablePoll{handler:handler}
  self940.processorMap["isPolled"] = &remoteManagerProcessorIsPolled{handler:handler}
  self940.processorMap["RefreshNodeInfo"] = &remoteManagerProcessorRefreshNodeInfo{handler:handler}
  self940.processorMap["RequestNodeState"] = &remoteManagerProcessorRequestNodeState{handler:handler}
  self940.processorMap["RequestNodeDynamic"] = &remoteManagerProcessorRequestNodeDynamic{handler:handler}
  self940.processorMap["IsNodeListeningDevice"] = &remoteManagerProcessorIsNodeListeningDevice{handler:handler}
  self940.processorMap["IsNodeFrequentListeningDevice"] = &remoteManagerProcessorIsNodeFrequentListeningDevice{handler:handler}
  self940.processorMap["IsNodeBeamingDevice"] = &remoteManagerProcessorIsNodeBeamingDevice{handler:handler}
  self940.processorMap["IsNodeRoutingDevice"] = &remoteManagerProcessorIsNodeRoutingDevice{handler:handler}
  self940.processorMap["IsNodeSecurityDevice"] = &remoteManagerProcessorIsNodeSecurityDevice{handler:handler}
  self940.processorMap["GetNodeMaxBaudRate"] = &remoteManagerProcessorGetNodeMaxBaudRate{handler:handler}
  self940.processorMap["GetNodeVersion"] = &remoteManagerProcessorGetNodeVersion{handler:handler}
  self940.processorMap["GetNodeBasic"] = &remoteManagerProcessorGetNodeBasic{handler:handler}
  self940.processorMap["GetNodeGeneric"] = &remoteManagerProcessorGetNodeGeneric{handler:handler}
  self940.processorMap["GetNodeSpecific"] = &remoteManagerProcessorGetNodeSpecific{handler:handler}
  self940.processorMap["GetNodeType"] = &remoteManagerProcessorGetNodeType{handler:handler}
  self940.processorMap["GetNodeNeighbors"] = &remoteManagerProcessorGetNodeNeighbors{handler:handler}
  self940.processorMap["GetNodeManufacturerName"] = &remoteManagerProcessorGetNodeManufacturerName{handler:handler}
  self940.processorMap["GetNodeProductName"] = &remoteManagerProcessorGetNodeProductName{handler:handler}
  self940.processorMap["GetNodeName"] = &remoteManagerProcessorGetNodeName{handler:handler}
  self940.processorMap["GetNodeLocation"] = &remoteManagerProcessorGetNodeLocation{handler:handler}
  self940.processorMap["GetNodeManufacturerId"] = &remoteManagerProcessorGetNodeManufacturerId{handler:handler}
  self940.processorMap["GetNodeProductType"] = &remoteManagerProcessorGetNodeProductType{handler:handler}
  self940.processorMap["GetNodeProductId"] = &remoteManagerProcessorGetNodeProductId{handler:handler}
  self940.processorMap["SetNodeManufacturerName"] = &remoteManagerProcessorSetNodeManufacturerName{handler:handler}
  self940.processorMap["SetNodeProductName"] = &remoteManagerProcessorSetNodeProductName{handler:handler}
  self940.processorMap["SetNodeName"] = &remoteManagerProcessorSetNodeName{handler:handler}
  self940.processorMap["SetNodeLocation"] = &remoteManagerProcessorSetNodeLocation{handler:handler}
  self940.processorMap["SetNodeOn"] = &remoteManagerProcessorSetNodeOn{handler:handler}
  self940.processorMap["SetNodeOff"] = &remoteManagerProcessorSetNodeOff{handler:handler}
  self940.processorMap["SetNodeLevel"] = &remoteManagerProcessorSetNodeLevel{handler:handler}
  self940.processorMap["IsNodeInfoReceived"] = &remoteManagerProcessorIsNodeInfoReceived{handler:handler}
  self940.processorMap["GetNodeClassInformation"] = &remoteManagerProcessorGetNodeClassInformation{handler:handler}
  self940.processorMap["GetValueLabel"] = &remoteManagerProcessorGetValueLabel{handler:handler}
  self940.processorMap["SetValueLabel"] = &remoteManagerProcessorSetValueLabel{handler:handler}
  self940.processorMap["GetValueUnits"] = &remoteManagerProcessorGetValueUnits{handler:handler}
  self940.processorMap["SetValueUnits"] = &remoteManagerProcessorSetValueUnits{handler:handler}
  self940.processorMap["GetValueHelp"] = &remoteManagerProcessorGetValueHelp{handler:handler}
  self940.processorMap["SetValueHelp"] = &remoteManagerProcessorSetValueHelp{handler:handler}
  self940.processorMap["GetValueMin"] = &remoteManagerProcessorGetValueMin{handler:handler}
  self940.processorMap["GetValueMax"] = &remoteManagerProcessorGetValueMax{handler:handler}
  self940.processorMap["IsValueReadOnly"] = &remoteManagerProcessorIsValueReadOnly{handler:handler}
  self940.processorMap["IsValueWriteOnly"] = &remoteManagerProcessorIsValueWriteOnly{handler:handler}
  self940.processorMap["IsValueSet"] = &remoteManagerProcessorIsValueSet{handler:handler}
  self940.processorMap["GetValueAsBool"] = &remoteManagerProcessorGetValueAsBool{handler:handler}
  self940.processorMap["GetValueAsByte"] = &remoteManagerProcessorGetValueAsByte{handler:handler}
  self940.processorMap["GetValueAsFloat"] = &remoteManagerProcessorGetValueAsFloat{handler:handler}
  self940.processorMap["GetValueAsInt"] = &remoteManagerProcessorGetValueAsInt{handler:handler}
  self940.processorMap["GetValueAsShort"] = &remoteManagerProcessorGetValueAsShort{handler:handler}
  self940.processorMap["GetValueAsString"] = &remoteManagerProcessorGetValueAsString{handler:handler}
  self940.processorMap["GetValueListSelection_String"] = &remoteManagerProcessorGetValueListSelectionString{handler:handler}
  self940.processorMap["GetValueListSelection_Int32"] = &remoteManagerProcessorGetValueListSelectionInt32{handler:handler}
  self940.processorMap["GetValueListItems"] = &remoteManagerProcessorGetValueListItems{handler:handler}
  self940.processorMap["GetValueFloatPrecision"] = &remoteManagerProcessorGetValueFloatPrecision{handler:handler}
  self940.processorMap["SetValue_Bool"] = &remoteManagerProcessorSetValueBool{handler:handler}
  self940.processorMap["SetValue_UInt8"] = &remoteManagerProcessorSetValueUInt8{handler:handler}
  self940.processorMap["SetValue_Float"] = &remoteManagerProcessorSetValueFloat{handler:handler}
  self940.processorMap["SetValue_Int32"] = &remoteManagerProcessorSetValueInt32{handler:handler}
  self940.processorMap["SetValue_Int16"] = &remoteManagerProcessorSetValueInt16{handler:handler}
  self940.processorMap["SetValue_String"] = &remoteManagerProcessorSetValueString{handler:handler}
  self940.processorMap["SetValueListSelection"] = &remoteManagerProcessorSetValueListSelection{handler:handler}
  self940.processorMap["RefreshValue"] = &remoteManagerProcessorRefreshValue{handler:handler}
  self940.processorMap["PressButton"] = &remoteManagerProcessorPressButton{handler:handler}
  self940.processorMap["ReleaseButton"] = &remoteManagerProcessorReleaseButton{handler:handler}
  self940.processorMap["GetNumSwitchPoints"] = &remoteManagerProcessorGetNumSwitchPoints{handler:handler}
  self940.processorMap["SetSwitchPoint"] = &remoteManagerProcessorSetSwitchPoint{handler:handler}
  self940.processorMap["RemoveSwitchPoint"] = &remoteManagerProcessorRemoveSwitchPoint{handler:handler}
  self940.processorMap["ClearSwitchPoints"] = &remoteManagerProcessorClearSwitchPoints{handler:handler}
  self940.processorMap["GetSwitchPoint"] = &remoteManagerProcessorGetSwitchPoint{handler:handler}
  self940.processorMap["SwitchAllOn"] = &remoteManagerProcessorSwitchAllOn{handler:handler}
  self940.processorMap["SwitchAllOff"] = &remoteManagerProcessorSwitchAllOff{handler:handler}
  self940.processorMap["SetConfigParam"] = &remoteManagerProcessorSetConfigParam{handler:handler}
  self940.processorMap["RequestConfigParam"] = &remoteManagerProcessorRequestConfigParam{handler:handler}
  self940.processorMap["RequestAllConfigParams"] = &remoteManagerProcessorRequestAllConfigParams{handler:handler}
  self940.processorMap["GetNumGroups"] = &remoteManagerProcessorGetNumGroups{handler:handler}
  self940.processorMap["GetAssociations"] = &remoteManagerProcessorGetAssociations{handler:handler}
  self940.processorMap["GetMaxAssociations"] = &remoteManagerProcessorGetMaxAssociations{handler:handler}
  self940.processorMap["GetGroupLabel"] = &remoteManagerProcessorGetGroupLabel{handler:handler}
  self940.processorMap["AddAssociation"] = &remoteManagerProcessorAddAssociation{handler:handler}
  self940.processorMap["RemoveAssociation"] = &remoteManagerProcessorRemoveAssociation{handler:handler}
  self940.processorMap["ResetController"] = &remoteManagerProcessorResetController{handler:handler}
  self940.processorMap["SoftReset"] = &remoteManagerProcessorSoftReset{handler:handler}
  self940.processorMap["BeginControllerCommand"] = &remoteManagerProcessorBeginControllerCommand{handler:handler}
  self940.processorMap["CancelControllerCommand"] = &remoteManagerProcessorCancelControllerCommand{handler:handler}
  self940.processorMap["GetNumScenes"] = &remoteManagerProcessorGetNumScenes{handler:handler}
  self940.processorMap["GetAllScenes"] = &remoteManagerProcessorGetAllScenes{handler:handler}
  self940.processorMap["CreateScene"] = &remoteManagerProcessorCreateScene{handler:handler}
  self940.processorMap["RemoveScene"] = &remoteManagerProcessorRemoveScene{handler:handler}
  self940.processorMap["AddSceneValue_Bool"] = &remoteManagerProcessorAddSceneValueBool{handler:handler}
  self940.processorMap["AddSceneValue_Uint8"] = &remoteManagerProcessorAddSceneValueUint8{handler:handler}
  self940.processorMap["AddSceneValue_Float"] = &remoteManagerProcessorAddSceneValueFloat{handler:handler}
  self940.processorMap["AddSceneValue_Int32"] = &remoteManagerProcessorAddSceneValueInt32{handler:handler}
  self940.processorMap["AddSceneValue_Int16"] = &remoteManagerProcessorAddSceneValueInt16{handler:handler}
  self940.processorMap["AddSceneValue_String"] = &remoteManagerProcessorAddSceneValueString{handler:handler}
  self940.processorMap["AddSceneValueListSelection_String"] = &remoteManagerProcessorAddSceneValueListSelectionString{handler:handler}
  self940.processorMap["AddSceneValueListSelection_Int32"] = &remoteManagerProcessorAddSceneValueListSelectionInt32{handler:handler}
  self940.processorMap["RemoveSceneValue"] = &remoteManagerProcessorRemoveSceneValue{handler:handler}
  self940.processorMap["SceneGetValues"] = &remoteManagerProcessorSceneGetValues{handler:handler}
  self940.processorMap["SceneGetValueAsBool"] = &remoteManagerProcessorSceneGetValueAsBool{handler:handler}
  self940.processorMap["SceneGetValueAsByte"] = &remoteManagerProcessorSceneGetValueAsByte{handler:handler}
  self940.processorMap["SceneGetValueAsFloat"] = &remoteManagerProcessorSceneGetValueAsFloat{handler:handler}
  self940.processorMap["SceneGetValueAsInt"] = &remoteManagerProcessorSceneGetValueAsInt{handler:handler}
  self940.processorMap["SceneGetValueAsShort"] = &remoteManagerProcessorSceneGetValueAsShort{handler:handler}
  self940.processorMap["SceneGetValueAsString"] = &remoteManagerProcessorSceneGetValueAsString{handler:handler}
  self940.processorMap["SceneGetValueListSelection_String"] = &remoteManagerProcessorSceneGetValueListSelectionString{handler:handler}
  self940.processorMap["SceneGetValueListSelection_Int32"] = &remoteManagerProcessorSceneGetValueListSelectionInt32{handler:handler}
  self940.processorMap["SetSceneValue_Bool"] = &remoteManagerProcessorSetSceneValueBool{handler:handler}
  self940.processorMap["SetSceneValue_Uint8"] = &remoteManagerProcessorSetSceneValueUint8{handler:handler}
  self940.processorMap["SetSceneValue_Float"] = &remoteManagerProcessorSetSceneValueFloat{handler:handler}
  self940.processorMap["SetSceneValue_Int32"] = &remoteManagerProcessorSetSceneValueInt32{handler:handler}
  self940.processorMap["SetSceneValue_Int16"] = &remoteManagerProcessorSetSceneValueInt16{handler:handler}
  self940.processorMap["SetSceneValue_String"] = &remoteManagerProcessorSetSceneValueString{handler:handler}
  self940.processorMap["SetSceneValueListSelection_String"] = &remoteManagerProcessorSetSceneValueListSelectionString{handler:handler}
  self940.processorMap["SetSceneValueListSelection_Int32"] = &remoteManagerProcessorSetSceneValueListSelectionInt32{handler:handler}
  self940.processorMap["GetSceneLabel"] = &remoteManagerProcessorGetSceneLabel{handler:handler}
  self940.processorMap["SetSceneLabel"] = &remoteManagerProcessorSetSceneLabel{handler:handler}
  self940.processorMap["SceneExists"] = &remoteManagerProcessorSceneExists{handler:handler}
  self940.processorMap["ActivateScene"] = &remoteManagerProcessorActivateScene{handler:handler}
  self940.processorMap["GetDriverStatistics"] = &remoteManagerProcessorGetDriverStatistics{handler:handler}
  self940.processorMap["SendAllValues"] = &remoteManagerProcessorSendAllValues{handler:handler}
return self940
}

func (p *RemoteManagerProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return }
  process, nameFound := p.GetProcessorFunction(name)
  if !nameFound || process == nil {
    iprot.Skip(thrift.STRUCT)
    iprot.ReadMessageEnd()
    x941 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
    oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
    x941.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return false, x941
  }
  return process.Process(seqId, iprot, oprot)
}

type remoteManagerProcessorWriteConfig struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorWriteConfig) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewWriteConfigArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("WriteConfig", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewWriteConfigResult()
  if err = p.handler.WriteConfig(args._homeId); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing WriteConfig: " + err.String())
    oprot.WriteMessageBegin("WriteConfig", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("WriteConfig", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorGetControllerNodeId struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorGetControllerNodeId) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetControllerNodeIdArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("GetControllerNodeId", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetControllerNodeIdResult()
  if result.Success, err = p.handler.GetControllerNodeId(args._homeId); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetControllerNodeId: " + err.String())
    oprot.WriteMessageBegin("GetControllerNodeId", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("GetControllerNodeId", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorIsPrimaryController struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorIsPrimaryController) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewIsPrimaryControllerArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("IsPrimaryController", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewIsPrimaryControllerResult()
  if result.Success, err = p.handler.IsPrimaryController(args._homeId); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing IsPrimaryController: " + err.String())
    oprot.WriteMessageBegin("IsPrimaryController", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("IsPrimaryController", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorIsStaticUpdateController struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorIsStaticUpdateController) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewIsStaticUpdateControllerArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("IsStaticUpdateController", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewIsStaticUpdateControllerResult()
  if result.Success, err = p.handler.IsStaticUpdateController(args._homeId); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing IsStaticUpdateController: " + err.String())
    oprot.WriteMessageBegin("IsStaticUpdateController", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("IsStaticUpdateController", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorIsBridgeController struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorIsBridgeController) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewIsBridgeControllerArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("IsBridgeController", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewIsBridgeControllerResult()
  if result.Success, err = p.handler.IsBridgeController(args._homeId); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing IsBridgeController: " + err.String())
    oprot.WriteMessageBegin("IsBridgeController", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("IsBridgeController", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorGetLibraryVersion struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorGetLibraryVersion) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetLibraryVersionArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("GetLibraryVersion", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetLibraryVersionResult()
  if result.Success, err = p.handler.GetLibraryVersion(args._homeId); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetLibraryVersion: " + err.String())
    oprot.WriteMessageBegin("GetLibraryVersion", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("GetLibraryVersion", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorGetLibraryTypeName struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorGetLibraryTypeName) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetLibraryTypeNameArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("GetLibraryTypeName", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetLibraryTypeNameResult()
  if result.Success, err = p.handler.GetLibraryTypeName(args._homeId); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetLibraryTypeName: " + err.String())
    oprot.WriteMessageBegin("GetLibraryTypeName", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("GetLibraryTypeName", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorGetSendQueueCount struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorGetSendQueueCount) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetSendQueueCountArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("GetSendQueueCount", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetSendQueueCountResult()
  if result.Success, err = p.handler.GetSendQueueCount(args._homeId); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetSendQueueCount: " + err.String())
    oprot.WriteMessageBegin("GetSendQueueCount", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("GetSendQueueCount", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorGetPollInterval struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorGetPollInterval) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetPollIntervalArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("GetPollInterval", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetPollIntervalResult()
  if result.Success, err = p.handler.GetPollInterval(); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetPollInterval: " + err.String())
    oprot.WriteMessageBegin("GetPollInterval", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("GetPollInterval", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorSetPollInterval struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorSetPollInterval) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewSetPollIntervalArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("SetPollInterval", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewSetPollIntervalResult()
  if err = p.handler.SetPollInterval(args._seconds); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SetPollInterval: " + err.String())
    oprot.WriteMessageBegin("SetPollInterval", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("SetPollInterval", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorEnablePoll struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorEnablePoll) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewEnablePollArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("EnablePoll", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewEnablePollResult()
  if result.Success, err = p.handler.EnablePoll(args._valueId); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing EnablePoll: " + err.String())
    oprot.WriteMessageBegin("EnablePoll", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("EnablePoll", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorDisablePoll struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorDisablePoll) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewDisablePollArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("DisablePoll", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewDisablePollResult()
  if result.Success, err = p.handler.DisablePoll(args._valueId); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DisablePoll: " + err.String())
    oprot.WriteMessageBegin("DisablePoll", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("DisablePoll", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorIsPolled struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorIsPolled) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewIsPolledArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("isPolled", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewIsPolledResult()
  if result.Success, err = p.handler.IsPolled(args._valueId); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing isPolled: " + err.String())
    oprot.WriteMessageBegin("isPolled", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("isPolled", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorRefreshNodeInfo struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorRefreshNodeInfo) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewRefreshNodeInfoArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("RefreshNodeInfo", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewRefreshNodeInfoResult()
  if result.Success, err = p.handler.RefreshNodeInfo(args._homeId, args._nodeId); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing RefreshNodeInfo: " + err.String())
    oprot.WriteMessageBegin("RefreshNodeInfo", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("RefreshNodeInfo", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorRequestNodeState struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorRequestNodeState) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewRequestNodeStateArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("RequestNodeState", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewRequestNodeStateResult()
  if result.Success, err = p.handler.RequestNodeState(args._homeId, args._nodeId); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing RequestNodeState: " + err.String())
    oprot.WriteMessageBegin("RequestNodeState", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("RequestNodeState", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorRequestNodeDynamic struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorRequestNodeDynamic) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewRequestNodeDynamicArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("RequestNodeDynamic", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewRequestNodeDynamicResult()
  if result.Success, err = p.handler.RequestNodeDynamic(args._homeId, args._nodeId); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing RequestNodeDynamic: " + err.String())
    oprot.WriteMessageBegin("RequestNodeDynamic", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("RequestNodeDynamic", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorIsNodeListeningDevice struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorIsNodeListeningDevice) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewIsNodeListeningDeviceArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("IsNodeListeningDevice", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewIsNodeListeningDeviceResult()
  if result.Success, err = p.handler.IsNodeListeningDevice(args._homeId, args._nodeId); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing IsNodeListeningDevice: " + err.String())
    oprot.WriteMessageBegin("IsNodeListeningDevice", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("IsNodeListeningDevice", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorIsNodeFrequentListeningDevice struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorIsNodeFrequentListeningDevice) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewIsNodeFrequentListeningDeviceArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("IsNodeFrequentListeningDevice", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewIsNodeFrequentListeningDeviceResult()
  if result.Success, err = p.handler.IsNodeFrequentListeningDevice(args._homeId, args._nodeId); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing IsNodeFrequentListeningDevice: " + err.String())
    oprot.WriteMessageBegin("IsNodeFrequentListeningDevice", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("IsNodeFrequentListeningDevice", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorIsNodeBeamingDevice struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorIsNodeBeamingDevice) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewIsNodeBeamingDeviceArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("IsNodeBeamingDevice", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewIsNodeBeamingDeviceResult()
  if result.Success, err = p.handler.IsNodeBeamingDevice(args._homeId, args._nodeId); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing IsNodeBeamingDevice: " + err.String())
    oprot.WriteMessageBegin("IsNodeBeamingDevice", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("IsNodeBeamingDevice", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorIsNodeRoutingDevice struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorIsNodeRoutingDevice) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewIsNodeRoutingDeviceArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("IsNodeRoutingDevice", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewIsNodeRoutingDeviceResult()
  if result.Success, err = p.handler.IsNodeRoutingDevice(args._homeId, args._nodeId); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing IsNodeRoutingDevice: " + err.String())
    oprot.WriteMessageBegin("IsNodeRoutingDevice", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("IsNodeRoutingDevice", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorIsNodeSecurityDevice struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorIsNodeSecurityDevice) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewIsNodeSecurityDeviceArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("IsNodeSecurityDevice", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewIsNodeSecurityDeviceResult()
  if result.Success, err = p.handler.IsNodeSecurityDevice(args._homeId, args._nodeId); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing IsNodeSecurityDevice: " + err.String())
    oprot.WriteMessageBegin("IsNodeSecurityDevice", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("IsNodeSecurityDevice", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorGetNodeMaxBaudRate struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorGetNodeMaxBaudRate) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetNodeMaxBaudRateArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("GetNodeMaxBaudRate", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetNodeMaxBaudRateResult()
  if result.Success, err = p.handler.GetNodeMaxBaudRate(args._homeId, args._nodeId); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetNodeMaxBaudRate: " + err.String())
    oprot.WriteMessageBegin("GetNodeMaxBaudRate", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("GetNodeMaxBaudRate", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorGetNodeVersion struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorGetNodeVersion) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetNodeVersionArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("GetNodeVersion", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetNodeVersionResult()
  if result.Success, err = p.handler.GetNodeVersion(args._homeId, args._nodeId); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetNodeVersion: " + err.String())
    oprot.WriteMessageBegin("GetNodeVersion", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("GetNodeVersion", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorGetNodeBasic struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorGetNodeBasic) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetNodeBasicArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("GetNodeBasic", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetNodeBasicResult()
  if result.Success, err = p.handler.GetNodeBasic(args._homeId, args._nodeId); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetNodeBasic: " + err.String())
    oprot.WriteMessageBegin("GetNodeBasic", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("GetNodeBasic", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorGetNodeGeneric struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorGetNodeGeneric) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetNodeGenericArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("GetNodeGeneric", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetNodeGenericResult()
  if result.Success, err = p.handler.GetNodeGeneric(args._homeId, args._nodeId); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetNodeGeneric: " + err.String())
    oprot.WriteMessageBegin("GetNodeGeneric", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("GetNodeGeneric", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorGetNodeSpecific struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorGetNodeSpecific) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetNodeSpecificArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("GetNodeSpecific", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetNodeSpecificResult()
  if result.Success, err = p.handler.GetNodeSpecific(args._homeId, args._nodeId); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetNodeSpecific: " + err.String())
    oprot.WriteMessageBegin("GetNodeSpecific", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("GetNodeSpecific", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorGetNodeType struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorGetNodeType) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetNodeTypeArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("GetNodeType", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetNodeTypeResult()
  if result.Success, err = p.handler.GetNodeType(args._homeId, args._nodeId); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetNodeType: " + err.String())
    oprot.WriteMessageBegin("GetNodeType", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("GetNodeType", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorGetNodeNeighbors struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorGetNodeNeighbors) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetNodeNeighborsArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("GetNodeNeighbors", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetNodeNeighborsResult()
  if result.Success, err = p.handler.GetNodeNeighbors(args._homeId, args._nodeId); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetNodeNeighbors: " + err.String())
    oprot.WriteMessageBegin("GetNodeNeighbors", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("GetNodeNeighbors", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorGetNodeManufacturerName struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorGetNodeManufacturerName) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetNodeManufacturerNameArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("GetNodeManufacturerName", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetNodeManufacturerNameResult()
  if result.Success, err = p.handler.GetNodeManufacturerName(args._homeId, args._nodeId); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetNodeManufacturerName: " + err.String())
    oprot.WriteMessageBegin("GetNodeManufacturerName", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("GetNodeManufacturerName", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorGetNodeProductName struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorGetNodeProductName) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetNodeProductNameArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("GetNodeProductName", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetNodeProductNameResult()
  if result.Success, err = p.handler.GetNodeProductName(args._homeId, args._nodeId); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetNodeProductName: " + err.String())
    oprot.WriteMessageBegin("GetNodeProductName", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("GetNodeProductName", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorGetNodeName struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorGetNodeName) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetNodeNameArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("GetNodeName", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetNodeNameResult()
  if result.Success, err = p.handler.GetNodeName(args._homeId, args._nodeId); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetNodeName: " + err.String())
    oprot.WriteMessageBegin("GetNodeName", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("GetNodeName", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorGetNodeLocation struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorGetNodeLocation) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetNodeLocationArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("GetNodeLocation", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetNodeLocationResult()
  if result.Success, err = p.handler.GetNodeLocation(args._homeId, args._nodeId); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetNodeLocation: " + err.String())
    oprot.WriteMessageBegin("GetNodeLocation", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("GetNodeLocation", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorGetNodeManufacturerId struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorGetNodeManufacturerId) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetNodeManufacturerIdArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("GetNodeManufacturerId", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetNodeManufacturerIdResult()
  if result.Success, err = p.handler.GetNodeManufacturerId(args._homeId, args._nodeId); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetNodeManufacturerId: " + err.String())
    oprot.WriteMessageBegin("GetNodeManufacturerId", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("GetNodeManufacturerId", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorGetNodeProductType struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorGetNodeProductType) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetNodeProductTypeArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("GetNodeProductType", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetNodeProductTypeResult()
  if result.Success, err = p.handler.GetNodeProductType(args._homeId, args._nodeId); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetNodeProductType: " + err.String())
    oprot.WriteMessageBegin("GetNodeProductType", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("GetNodeProductType", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorGetNodeProductId struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorGetNodeProductId) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetNodeProductIdArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("GetNodeProductId", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetNodeProductIdResult()
  if result.Success, err = p.handler.GetNodeProductId(args._homeId, args._nodeId); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetNodeProductId: " + err.String())
    oprot.WriteMessageBegin("GetNodeProductId", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("GetNodeProductId", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorSetNodeManufacturerName struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorSetNodeManufacturerName) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewSetNodeManufacturerNameArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("SetNodeManufacturerName", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewSetNodeManufacturerNameResult()
  if err = p.handler.SetNodeManufacturerName(args._homeId, args._nodeId, args._manufacturerName); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SetNodeManufacturerName: " + err.String())
    oprot.WriteMessageBegin("SetNodeManufacturerName", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("SetNodeManufacturerName", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorSetNodeProductName struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorSetNodeProductName) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewSetNodeProductNameArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("SetNodeProductName", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewSetNodeProductNameResult()
  if err = p.handler.SetNodeProductName(args._homeId, args._nodeId, args._productName); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SetNodeProductName: " + err.String())
    oprot.WriteMessageBegin("SetNodeProductName", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("SetNodeProductName", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorSetNodeName struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorSetNodeName) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewSetNodeNameArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("SetNodeName", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewSetNodeNameResult()
  if err = p.handler.SetNodeName(args._homeId, args._nodeId, args._nodeName); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SetNodeName: " + err.String())
    oprot.WriteMessageBegin("SetNodeName", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("SetNodeName", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorSetNodeLocation struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorSetNodeLocation) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewSetNodeLocationArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("SetNodeLocation", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewSetNodeLocationResult()
  if err = p.handler.SetNodeLocation(args._homeId, args._nodeId, args._location); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SetNodeLocation: " + err.String())
    oprot.WriteMessageBegin("SetNodeLocation", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("SetNodeLocation", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorSetNodeOn struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorSetNodeOn) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewSetNodeOnArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("SetNodeOn", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewSetNodeOnResult()
  if err = p.handler.SetNodeOn(args._homeId, args._nodeId); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SetNodeOn: " + err.String())
    oprot.WriteMessageBegin("SetNodeOn", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("SetNodeOn", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorSetNodeOff struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorSetNodeOff) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewSetNodeOffArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("SetNodeOff", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewSetNodeOffResult()
  if err = p.handler.SetNodeOff(args._homeId, args._nodeId); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SetNodeOff: " + err.String())
    oprot.WriteMessageBegin("SetNodeOff", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("SetNodeOff", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorSetNodeLevel struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorSetNodeLevel) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewSetNodeLevelArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("SetNodeLevel", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewSetNodeLevelResult()
  if err = p.handler.SetNodeLevel(args._homeId, args._nodeId, args._level); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SetNodeLevel: " + err.String())
    oprot.WriteMessageBegin("SetNodeLevel", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("SetNodeLevel", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorIsNodeInfoReceived struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorIsNodeInfoReceived) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewIsNodeInfoReceivedArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("IsNodeInfoReceived", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewIsNodeInfoReceivedResult()
  if result.Success, err = p.handler.IsNodeInfoReceived(args._homeId, args._nodeId); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing IsNodeInfoReceived: " + err.String())
    oprot.WriteMessageBegin("IsNodeInfoReceived", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("IsNodeInfoReceived", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorGetNodeClassInformation struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorGetNodeClassInformation) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetNodeClassInformationArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("GetNodeClassInformation", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetNodeClassInformationResult()
  if result.Success, err = p.handler.GetNodeClassInformation(args._homeId, args._nodeId, args._commandClassId); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetNodeClassInformation: " + err.String())
    oprot.WriteMessageBegin("GetNodeClassInformation", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("GetNodeClassInformation", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorGetValueLabel struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorGetValueLabel) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetValueLabelArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("GetValueLabel", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetValueLabelResult()
  if result.Success, err = p.handler.GetValueLabel(args._id); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetValueLabel: " + err.String())
    oprot.WriteMessageBegin("GetValueLabel", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("GetValueLabel", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorSetValueLabel struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorSetValueLabel) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewSetValueLabelArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("SetValueLabel", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewSetValueLabelResult()
  if err = p.handler.SetValueLabel(args._id, args._value); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SetValueLabel: " + err.String())
    oprot.WriteMessageBegin("SetValueLabel", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("SetValueLabel", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorGetValueUnits struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorGetValueUnits) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetValueUnitsArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("GetValueUnits", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetValueUnitsResult()
  if result.Success, err = p.handler.GetValueUnits(args._id); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetValueUnits: " + err.String())
    oprot.WriteMessageBegin("GetValueUnits", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("GetValueUnits", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorSetValueUnits struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorSetValueUnits) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewSetValueUnitsArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("SetValueUnits", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewSetValueUnitsResult()
  if err = p.handler.SetValueUnits(args._id, args._value); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SetValueUnits: " + err.String())
    oprot.WriteMessageBegin("SetValueUnits", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("SetValueUnits", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorGetValueHelp struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorGetValueHelp) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetValueHelpArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("GetValueHelp", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetValueHelpResult()
  if result.Success, err = p.handler.GetValueHelp(args._id); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetValueHelp: " + err.String())
    oprot.WriteMessageBegin("GetValueHelp", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("GetValueHelp", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorSetValueHelp struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorSetValueHelp) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewSetValueHelpArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("SetValueHelp", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewSetValueHelpResult()
  if err = p.handler.SetValueHelp(args._id, args._value); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SetValueHelp: " + err.String())
    oprot.WriteMessageBegin("SetValueHelp", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("SetValueHelp", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorGetValueMin struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorGetValueMin) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetValueMinArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("GetValueMin", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetValueMinResult()
  if result.Success, err = p.handler.GetValueMin(args._id); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetValueMin: " + err.String())
    oprot.WriteMessageBegin("GetValueMin", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("GetValueMin", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorGetValueMax struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorGetValueMax) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetValueMaxArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("GetValueMax", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetValueMaxResult()
  if result.Success, err = p.handler.GetValueMax(args._id); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetValueMax: " + err.String())
    oprot.WriteMessageBegin("GetValueMax", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("GetValueMax", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorIsValueReadOnly struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorIsValueReadOnly) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewIsValueReadOnlyArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("IsValueReadOnly", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewIsValueReadOnlyResult()
  if result.Success, err = p.handler.IsValueReadOnly(args._id); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing IsValueReadOnly: " + err.String())
    oprot.WriteMessageBegin("IsValueReadOnly", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("IsValueReadOnly", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorIsValueWriteOnly struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorIsValueWriteOnly) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewIsValueWriteOnlyArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("IsValueWriteOnly", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewIsValueWriteOnlyResult()
  if result.Success, err = p.handler.IsValueWriteOnly(args._id); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing IsValueWriteOnly: " + err.String())
    oprot.WriteMessageBegin("IsValueWriteOnly", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("IsValueWriteOnly", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorIsValueSet struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorIsValueSet) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewIsValueSetArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("IsValueSet", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewIsValueSetResult()
  if result.Success, err = p.handler.IsValueSet(args._id); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing IsValueSet: " + err.String())
    oprot.WriteMessageBegin("IsValueSet", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("IsValueSet", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorGetValueAsBool struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorGetValueAsBool) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetValueAsBoolArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("GetValueAsBool", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetValueAsBoolResult()
  if result.Success, err = p.handler.GetValueAsBool(args._id); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetValueAsBool: " + err.String())
    oprot.WriteMessageBegin("GetValueAsBool", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("GetValueAsBool", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorGetValueAsByte struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorGetValueAsByte) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetValueAsByteArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("GetValueAsByte", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetValueAsByteResult()
  if result.Success, err = p.handler.GetValueAsByte(args._id); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetValueAsByte: " + err.String())
    oprot.WriteMessageBegin("GetValueAsByte", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("GetValueAsByte", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorGetValueAsFloat struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorGetValueAsFloat) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetValueAsFloatArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("GetValueAsFloat", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetValueAsFloatResult()
  if result.Success, err = p.handler.GetValueAsFloat(args._id); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetValueAsFloat: " + err.String())
    oprot.WriteMessageBegin("GetValueAsFloat", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("GetValueAsFloat", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorGetValueAsInt struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorGetValueAsInt) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetValueAsIntArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("GetValueAsInt", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetValueAsIntResult()
  if result.Success, err = p.handler.GetValueAsInt(args._id); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetValueAsInt: " + err.String())
    oprot.WriteMessageBegin("GetValueAsInt", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("GetValueAsInt", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorGetValueAsShort struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorGetValueAsShort) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetValueAsShortArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("GetValueAsShort", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetValueAsShortResult()
  if result.Success, err = p.handler.GetValueAsShort(args._id); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetValueAsShort: " + err.String())
    oprot.WriteMessageBegin("GetValueAsShort", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("GetValueAsShort", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorGetValueAsString struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorGetValueAsString) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetValueAsStringArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("GetValueAsString", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetValueAsStringResult()
  if result.Success, err = p.handler.GetValueAsString(args._id); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetValueAsString: " + err.String())
    oprot.WriteMessageBegin("GetValueAsString", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("GetValueAsString", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorGetValueListSelectionString struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorGetValueListSelectionString) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetValueListSelectionStringArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("GetValueListSelection_String", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetValueListSelectionStringResult()
  if result.Success, err = p.handler.GetValueListSelectionString(args._id); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetValueListSelection_String: " + err.String())
    oprot.WriteMessageBegin("GetValueListSelection_String", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("GetValueListSelection_String", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorGetValueListSelectionInt32 struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorGetValueListSelectionInt32) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetValueListSelectionInt32Args()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("GetValueListSelection_Int32", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetValueListSelectionInt32Result()
  if result.Success, err = p.handler.GetValueListSelectionInt32(args._id); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetValueListSelection_Int32: " + err.String())
    oprot.WriteMessageBegin("GetValueListSelection_Int32", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("GetValueListSelection_Int32", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorGetValueListItems struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorGetValueListItems) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetValueListItemsArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("GetValueListItems", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetValueListItemsResult()
  if result.Success, err = p.handler.GetValueListItems(args._id); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetValueListItems: " + err.String())
    oprot.WriteMessageBegin("GetValueListItems", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("GetValueListItems", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorGetValueFloatPrecision struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorGetValueFloatPrecision) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetValueFloatPrecisionArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("GetValueFloatPrecision", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetValueFloatPrecisionResult()
  if result.Success, err = p.handler.GetValueFloatPrecision(args._id); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetValueFloatPrecision: " + err.String())
    oprot.WriteMessageBegin("GetValueFloatPrecision", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("GetValueFloatPrecision", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorSetValueBool struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorSetValueBool) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewSetValueBoolArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("SetValue_Bool", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewSetValueBoolResult()
  if result.Success, err = p.handler.SetValueBool(args._id, args._value); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SetValue_Bool: " + err.String())
    oprot.WriteMessageBegin("SetValue_Bool", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("SetValue_Bool", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorSetValueUInt8 struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorSetValueUInt8) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewSetValueUInt8Args()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("SetValue_UInt8", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewSetValueUInt8Result()
  if result.Success, err = p.handler.SetValueUInt8(args._id, args._value); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SetValue_UInt8: " + err.String())
    oprot.WriteMessageBegin("SetValue_UInt8", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("SetValue_UInt8", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorSetValueFloat struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorSetValueFloat) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewSetValueFloatArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("SetValue_Float", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewSetValueFloatResult()
  if result.Success, err = p.handler.SetValueFloat(args._id, args._value); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SetValue_Float: " + err.String())
    oprot.WriteMessageBegin("SetValue_Float", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("SetValue_Float", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorSetValueInt32 struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorSetValueInt32) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewSetValueInt32Args()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("SetValue_Int32", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewSetValueInt32Result()
  if result.Success, err = p.handler.SetValueInt32(args._id, args._value); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SetValue_Int32: " + err.String())
    oprot.WriteMessageBegin("SetValue_Int32", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("SetValue_Int32", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorSetValueInt16 struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorSetValueInt16) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewSetValueInt16Args()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("SetValue_Int16", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewSetValueInt16Result()
  if result.Success, err = p.handler.SetValueInt16(args._id, args._value); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SetValue_Int16: " + err.String())
    oprot.WriteMessageBegin("SetValue_Int16", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("SetValue_Int16", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorSetValueString struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorSetValueString) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewSetValueStringArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("SetValue_String", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewSetValueStringResult()
  if result.Success, err = p.handler.SetValueString(args._id, args._value); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SetValue_String: " + err.String())
    oprot.WriteMessageBegin("SetValue_String", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("SetValue_String", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorSetValueListSelection struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorSetValueListSelection) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewSetValueListSelectionArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("SetValueListSelection", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewSetValueListSelectionResult()
  if result.Success, err = p.handler.SetValueListSelection(args._id, args._selectedItem); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SetValueListSelection: " + err.String())
    oprot.WriteMessageBegin("SetValueListSelection", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("SetValueListSelection", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorRefreshValue struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorRefreshValue) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewRefreshValueArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("RefreshValue", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewRefreshValueResult()
  if result.Success, err = p.handler.RefreshValue(args._id); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing RefreshValue: " + err.String())
    oprot.WriteMessageBegin("RefreshValue", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("RefreshValue", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorPressButton struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorPressButton) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewPressButtonArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("PressButton", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewPressButtonResult()
  if result.Success, err = p.handler.PressButton(args._id); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing PressButton: " + err.String())
    oprot.WriteMessageBegin("PressButton", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("PressButton", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorReleaseButton struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorReleaseButton) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewReleaseButtonArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("ReleaseButton", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewReleaseButtonResult()
  if result.Success, err = p.handler.ReleaseButton(args._id); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ReleaseButton: " + err.String())
    oprot.WriteMessageBegin("ReleaseButton", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("ReleaseButton", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorGetNumSwitchPoints struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorGetNumSwitchPoints) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetNumSwitchPointsArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("GetNumSwitchPoints", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetNumSwitchPointsResult()
  if result.Success, err = p.handler.GetNumSwitchPoints(args._id); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetNumSwitchPoints: " + err.String())
    oprot.WriteMessageBegin("GetNumSwitchPoints", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("GetNumSwitchPoints", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorSetSwitchPoint struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorSetSwitchPoint) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewSetSwitchPointArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("SetSwitchPoint", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewSetSwitchPointResult()
  if result.Success, err = p.handler.SetSwitchPoint(args._id, args._hours, args._minutes, args._setback); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SetSwitchPoint: " + err.String())
    oprot.WriteMessageBegin("SetSwitchPoint", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("SetSwitchPoint", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorRemoveSwitchPoint struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorRemoveSwitchPoint) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewRemoveSwitchPointArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("RemoveSwitchPoint", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewRemoveSwitchPointResult()
  if result.Success, err = p.handler.RemoveSwitchPoint(args._id, args._hours, args._minutes); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing RemoveSwitchPoint: " + err.String())
    oprot.WriteMessageBegin("RemoveSwitchPoint", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("RemoveSwitchPoint", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorClearSwitchPoints struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorClearSwitchPoints) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewClearSwitchPointsArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("ClearSwitchPoints", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewClearSwitchPointsResult()
  if err = p.handler.ClearSwitchPoints(args._id); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ClearSwitchPoints: " + err.String())
    oprot.WriteMessageBegin("ClearSwitchPoints", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("ClearSwitchPoints", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorGetSwitchPoint struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorGetSwitchPoint) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetSwitchPointArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("GetSwitchPoint", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetSwitchPointResult()
  if result.Success, err = p.handler.GetSwitchPoint(args._id, args._idx); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetSwitchPoint: " + err.String())
    oprot.WriteMessageBegin("GetSwitchPoint", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("GetSwitchPoint", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorSwitchAllOn struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorSwitchAllOn) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewSwitchAllOnArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("SwitchAllOn", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewSwitchAllOnResult()
  if err = p.handler.SwitchAllOn(args._homeId); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SwitchAllOn: " + err.String())
    oprot.WriteMessageBegin("SwitchAllOn", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("SwitchAllOn", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorSwitchAllOff struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorSwitchAllOff) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewSwitchAllOffArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("SwitchAllOff", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewSwitchAllOffResult()
  if err = p.handler.SwitchAllOff(args._homeId); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SwitchAllOff: " + err.String())
    oprot.WriteMessageBegin("SwitchAllOff", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("SwitchAllOff", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorSetConfigParam struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorSetConfigParam) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewSetConfigParamArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("SetConfigParam", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewSetConfigParamResult()
  if result.Success, err = p.handler.SetConfigParam(args._homeId, args._nodeId, args._param, args._value, args._size); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SetConfigParam: " + err.String())
    oprot.WriteMessageBegin("SetConfigParam", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("SetConfigParam", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorRequestConfigParam struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorRequestConfigParam) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewRequestConfigParamArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("RequestConfigParam", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewRequestConfigParamResult()
  if err = p.handler.RequestConfigParam(args._homeId, args._nodeId, args._param); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing RequestConfigParam: " + err.String())
    oprot.WriteMessageBegin("RequestConfigParam", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("RequestConfigParam", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorRequestAllConfigParams struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorRequestAllConfigParams) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewRequestAllConfigParamsArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("RequestAllConfigParams", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewRequestAllConfigParamsResult()
  if err = p.handler.RequestAllConfigParams(args._homeId, args._nodeId); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing RequestAllConfigParams: " + err.String())
    oprot.WriteMessageBegin("RequestAllConfigParams", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("RequestAllConfigParams", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorGetNumGroups struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorGetNumGroups) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetNumGroupsArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("GetNumGroups", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetNumGroupsResult()
  if result.Success, err = p.handler.GetNumGroups(args._homeId, args._nodeId); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetNumGroups: " + err.String())
    oprot.WriteMessageBegin("GetNumGroups", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("GetNumGroups", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorGetAssociations struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorGetAssociations) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetAssociationsArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("GetAssociations", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetAssociationsResult()
  if result.Success, err = p.handler.GetAssociations(args._homeId, args._nodeId, args._groupIdx); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetAssociations: " + err.String())
    oprot.WriteMessageBegin("GetAssociations", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("GetAssociations", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorGetMaxAssociations struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorGetMaxAssociations) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetMaxAssociationsArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("GetMaxAssociations", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetMaxAssociationsResult()
  if result.Success, err = p.handler.GetMaxAssociations(args._homeId, args._nodeId, args._groupIdx); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetMaxAssociations: " + err.String())
    oprot.WriteMessageBegin("GetMaxAssociations", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("GetMaxAssociations", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorGetGroupLabel struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorGetGroupLabel) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetGroupLabelArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("GetGroupLabel", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetGroupLabelResult()
  if result.Success, err = p.handler.GetGroupLabel(args._homeId, args._nodeId, args._groupIdx); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetGroupLabel: " + err.String())
    oprot.WriteMessageBegin("GetGroupLabel", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("GetGroupLabel", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorAddAssociation struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorAddAssociation) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewAddAssociationArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("AddAssociation", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewAddAssociationResult()
  if err = p.handler.AddAssociation(args._homeId, args._nodeId, args._groupIdx, args._targetNodeId); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing AddAssociation: " + err.String())
    oprot.WriteMessageBegin("AddAssociation", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("AddAssociation", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorRemoveAssociation struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorRemoveAssociation) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewRemoveAssociationArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("RemoveAssociation", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewRemoveAssociationResult()
  if err = p.handler.RemoveAssociation(args._homeId, args._nodeId, args._groupIdx, args._targetNodeId); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing RemoveAssociation: " + err.String())
    oprot.WriteMessageBegin("RemoveAssociation", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("RemoveAssociation", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorResetController struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorResetController) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewResetControllerArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("ResetController", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewResetControllerResult()
  if err = p.handler.ResetController(args._homeId); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ResetController: " + err.String())
    oprot.WriteMessageBegin("ResetController", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("ResetController", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorSoftReset struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorSoftReset) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewSoftResetArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("SoftReset", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewSoftResetResult()
  if err = p.handler.SoftReset(args._homeId); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SoftReset: " + err.String())
    oprot.WriteMessageBegin("SoftReset", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("SoftReset", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorBeginControllerCommand struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorBeginControllerCommand) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewBeginControllerCommandArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("BeginControllerCommand", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewBeginControllerCommandResult()
  if result.Success, err = p.handler.BeginControllerCommand(args._homeId, args._command, args._highPower, args._nodeId, args._arg); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing BeginControllerCommand: " + err.String())
    oprot.WriteMessageBegin("BeginControllerCommand", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("BeginControllerCommand", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorCancelControllerCommand struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorCancelControllerCommand) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewCancelControllerCommandArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("CancelControllerCommand", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewCancelControllerCommandResult()
  if result.Success, err = p.handler.CancelControllerCommand(args._homeId); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CancelControllerCommand: " + err.String())
    oprot.WriteMessageBegin("CancelControllerCommand", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("CancelControllerCommand", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorGetNumScenes struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorGetNumScenes) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetNumScenesArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("GetNumScenes", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetNumScenesResult()
  if result.Success, err = p.handler.GetNumScenes(); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetNumScenes: " + err.String())
    oprot.WriteMessageBegin("GetNumScenes", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("GetNumScenes", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorGetAllScenes struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorGetAllScenes) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetAllScenesArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("GetAllScenes", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetAllScenesResult()
  if result.Success, err = p.handler.GetAllScenes(); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetAllScenes: " + err.String())
    oprot.WriteMessageBegin("GetAllScenes", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("GetAllScenes", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorCreateScene struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorCreateScene) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewCreateSceneArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("CreateScene", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewCreateSceneResult()
  if result.Success, err = p.handler.CreateScene(); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CreateScene: " + err.String())
    oprot.WriteMessageBegin("CreateScene", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("CreateScene", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorRemoveScene struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorRemoveScene) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewRemoveSceneArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("RemoveScene", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewRemoveSceneResult()
  if result.Success, err = p.handler.RemoveScene(args._sceneId); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing RemoveScene: " + err.String())
    oprot.WriteMessageBegin("RemoveScene", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("RemoveScene", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorAddSceneValueBool struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorAddSceneValueBool) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewAddSceneValueBoolArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("AddSceneValue_Bool", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewAddSceneValueBoolResult()
  if result.Success, err = p.handler.AddSceneValueBool(args._sceneId, args._valueId, args._value); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing AddSceneValue_Bool: " + err.String())
    oprot.WriteMessageBegin("AddSceneValue_Bool", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("AddSceneValue_Bool", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorAddSceneValueUint8 struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorAddSceneValueUint8) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewAddSceneValueUint8Args()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("AddSceneValue_Uint8", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewAddSceneValueUint8Result()
  if result.Success, err = p.handler.AddSceneValueUint8(args._sceneId, args._valueId, args._value); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing AddSceneValue_Uint8: " + err.String())
    oprot.WriteMessageBegin("AddSceneValue_Uint8", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("AddSceneValue_Uint8", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorAddSceneValueFloat struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorAddSceneValueFloat) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewAddSceneValueFloatArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("AddSceneValue_Float", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewAddSceneValueFloatResult()
  if result.Success, err = p.handler.AddSceneValueFloat(args._sceneId, args._valueId, args._value); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing AddSceneValue_Float: " + err.String())
    oprot.WriteMessageBegin("AddSceneValue_Float", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("AddSceneValue_Float", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorAddSceneValueInt32 struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorAddSceneValueInt32) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewAddSceneValueInt32Args()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("AddSceneValue_Int32", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewAddSceneValueInt32Result()
  if result.Success, err = p.handler.AddSceneValueInt32(args._sceneId, args._valueId, args._value); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing AddSceneValue_Int32: " + err.String())
    oprot.WriteMessageBegin("AddSceneValue_Int32", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("AddSceneValue_Int32", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorAddSceneValueInt16 struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorAddSceneValueInt16) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewAddSceneValueInt16Args()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("AddSceneValue_Int16", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewAddSceneValueInt16Result()
  if result.Success, err = p.handler.AddSceneValueInt16(args._sceneId, args._valueId, args._value); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing AddSceneValue_Int16: " + err.String())
    oprot.WriteMessageBegin("AddSceneValue_Int16", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("AddSceneValue_Int16", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorAddSceneValueString struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorAddSceneValueString) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewAddSceneValueStringArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("AddSceneValue_String", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewAddSceneValueStringResult()
  if result.Success, err = p.handler.AddSceneValueString(args._sceneId, args._valueId, args._value); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing AddSceneValue_String: " + err.String())
    oprot.WriteMessageBegin("AddSceneValue_String", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("AddSceneValue_String", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorAddSceneValueListSelectionString struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorAddSceneValueListSelectionString) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewAddSceneValueListSelectionStringArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("AddSceneValueListSelection_String", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewAddSceneValueListSelectionStringResult()
  if result.Success, err = p.handler.AddSceneValueListSelectionString(args._sceneId, args._valueId, args._value); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing AddSceneValueListSelection_String: " + err.String())
    oprot.WriteMessageBegin("AddSceneValueListSelection_String", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("AddSceneValueListSelection_String", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorAddSceneValueListSelectionInt32 struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorAddSceneValueListSelectionInt32) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewAddSceneValueListSelectionInt32Args()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("AddSceneValueListSelection_Int32", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewAddSceneValueListSelectionInt32Result()
  if result.Success, err = p.handler.AddSceneValueListSelectionInt32(args._sceneId, args._valueId, args._value); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing AddSceneValueListSelection_Int32: " + err.String())
    oprot.WriteMessageBegin("AddSceneValueListSelection_Int32", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("AddSceneValueListSelection_Int32", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorRemoveSceneValue struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorRemoveSceneValue) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewRemoveSceneValueArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("RemoveSceneValue", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewRemoveSceneValueResult()
  if result.Success, err = p.handler.RemoveSceneValue(args._sceneId, args._valueId); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing RemoveSceneValue: " + err.String())
    oprot.WriteMessageBegin("RemoveSceneValue", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("RemoveSceneValue", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorSceneGetValues struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorSceneGetValues) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewSceneGetValuesArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("SceneGetValues", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewSceneGetValuesResult()
  if result.Success, err = p.handler.SceneGetValues(args._sceneId); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SceneGetValues: " + err.String())
    oprot.WriteMessageBegin("SceneGetValues", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("SceneGetValues", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorSceneGetValueAsBool struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorSceneGetValueAsBool) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewSceneGetValueAsBoolArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("SceneGetValueAsBool", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewSceneGetValueAsBoolResult()
  if result.Success, err = p.handler.SceneGetValueAsBool(args._sceneId, args._valueId); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SceneGetValueAsBool: " + err.String())
    oprot.WriteMessageBegin("SceneGetValueAsBool", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("SceneGetValueAsBool", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorSceneGetValueAsByte struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorSceneGetValueAsByte) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewSceneGetValueAsByteArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("SceneGetValueAsByte", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewSceneGetValueAsByteResult()
  if result.Success, err = p.handler.SceneGetValueAsByte(args._sceneId, args._valueId); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SceneGetValueAsByte: " + err.String())
    oprot.WriteMessageBegin("SceneGetValueAsByte", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("SceneGetValueAsByte", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorSceneGetValueAsFloat struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorSceneGetValueAsFloat) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewSceneGetValueAsFloatArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("SceneGetValueAsFloat", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewSceneGetValueAsFloatResult()
  if result.Success, err = p.handler.SceneGetValueAsFloat(args._sceneId, args._valueId); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SceneGetValueAsFloat: " + err.String())
    oprot.WriteMessageBegin("SceneGetValueAsFloat", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("SceneGetValueAsFloat", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorSceneGetValueAsInt struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorSceneGetValueAsInt) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewSceneGetValueAsIntArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("SceneGetValueAsInt", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewSceneGetValueAsIntResult()
  if result.Success, err = p.handler.SceneGetValueAsInt(args._sceneId, args._valueId); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SceneGetValueAsInt: " + err.String())
    oprot.WriteMessageBegin("SceneGetValueAsInt", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("SceneGetValueAsInt", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorSceneGetValueAsShort struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorSceneGetValueAsShort) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewSceneGetValueAsShortArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("SceneGetValueAsShort", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewSceneGetValueAsShortResult()
  if result.Success, err = p.handler.SceneGetValueAsShort(args._sceneId, args._valueId); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SceneGetValueAsShort: " + err.String())
    oprot.WriteMessageBegin("SceneGetValueAsShort", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("SceneGetValueAsShort", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorSceneGetValueAsString struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorSceneGetValueAsString) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewSceneGetValueAsStringArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("SceneGetValueAsString", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewSceneGetValueAsStringResult()
  if result.Success, err = p.handler.SceneGetValueAsString(args._sceneId, args._valueId); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SceneGetValueAsString: " + err.String())
    oprot.WriteMessageBegin("SceneGetValueAsString", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("SceneGetValueAsString", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorSceneGetValueListSelectionString struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorSceneGetValueListSelectionString) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewSceneGetValueListSelectionStringArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("SceneGetValueListSelection_String", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewSceneGetValueListSelectionStringResult()
  if result.Success, err = p.handler.SceneGetValueListSelectionString(args._sceneId, args._valueId); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SceneGetValueListSelection_String: " + err.String())
    oprot.WriteMessageBegin("SceneGetValueListSelection_String", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("SceneGetValueListSelection_String", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorSceneGetValueListSelectionInt32 struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorSceneGetValueListSelectionInt32) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewSceneGetValueListSelectionInt32Args()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("SceneGetValueListSelection_Int32", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewSceneGetValueListSelectionInt32Result()
  if result.Success, err = p.handler.SceneGetValueListSelectionInt32(args._sceneId, args._valueId); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SceneGetValueListSelection_Int32: " + err.String())
    oprot.WriteMessageBegin("SceneGetValueListSelection_Int32", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("SceneGetValueListSelection_Int32", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorSetSceneValueBool struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorSetSceneValueBool) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewSetSceneValueBoolArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("SetSceneValue_Bool", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewSetSceneValueBoolResult()
  if result.Success, err = p.handler.SetSceneValueBool(args._sceneId, args._valueId, args._value); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SetSceneValue_Bool: " + err.String())
    oprot.WriteMessageBegin("SetSceneValue_Bool", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("SetSceneValue_Bool", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorSetSceneValueUint8 struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorSetSceneValueUint8) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewSetSceneValueUint8Args()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("SetSceneValue_Uint8", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewSetSceneValueUint8Result()
  if result.Success, err = p.handler.SetSceneValueUint8(args._sceneId, args._valueId, args._value); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SetSceneValue_Uint8: " + err.String())
    oprot.WriteMessageBegin("SetSceneValue_Uint8", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("SetSceneValue_Uint8", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorSetSceneValueFloat struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorSetSceneValueFloat) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewSetSceneValueFloatArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("SetSceneValue_Float", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewSetSceneValueFloatResult()
  if result.Success, err = p.handler.SetSceneValueFloat(args._sceneId, args._valueId, args._value); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SetSceneValue_Float: " + err.String())
    oprot.WriteMessageBegin("SetSceneValue_Float", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("SetSceneValue_Float", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorSetSceneValueInt32 struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorSetSceneValueInt32) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewSetSceneValueInt32Args()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("SetSceneValue_Int32", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewSetSceneValueInt32Result()
  if result.Success, err = p.handler.SetSceneValueInt32(args._sceneId, args._valueId, args._value); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SetSceneValue_Int32: " + err.String())
    oprot.WriteMessageBegin("SetSceneValue_Int32", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("SetSceneValue_Int32", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorSetSceneValueInt16 struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorSetSceneValueInt16) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewSetSceneValueInt16Args()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("SetSceneValue_Int16", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewSetSceneValueInt16Result()
  if result.Success, err = p.handler.SetSceneValueInt16(args._sceneId, args._valueId, args._value); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SetSceneValue_Int16: " + err.String())
    oprot.WriteMessageBegin("SetSceneValue_Int16", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("SetSceneValue_Int16", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorSetSceneValueString struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorSetSceneValueString) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewSetSceneValueStringArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("SetSceneValue_String", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewSetSceneValueStringResult()
  if result.Success, err = p.handler.SetSceneValueString(args._sceneId, args._valueId, args._value); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SetSceneValue_String: " + err.String())
    oprot.WriteMessageBegin("SetSceneValue_String", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("SetSceneValue_String", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorSetSceneValueListSelectionString struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorSetSceneValueListSelectionString) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewSetSceneValueListSelectionStringArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("SetSceneValueListSelection_String", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewSetSceneValueListSelectionStringResult()
  if result.Success, err = p.handler.SetSceneValueListSelectionString(args._sceneId, args._valueId, args._value); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SetSceneValueListSelection_String: " + err.String())
    oprot.WriteMessageBegin("SetSceneValueListSelection_String", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("SetSceneValueListSelection_String", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorSetSceneValueListSelectionInt32 struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorSetSceneValueListSelectionInt32) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewSetSceneValueListSelectionInt32Args()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("SetSceneValueListSelection_Int32", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewSetSceneValueListSelectionInt32Result()
  if result.Success, err = p.handler.SetSceneValueListSelectionInt32(args._sceneId, args._valueId, args._value); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SetSceneValueListSelection_Int32: " + err.String())
    oprot.WriteMessageBegin("SetSceneValueListSelection_Int32", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("SetSceneValueListSelection_Int32", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorGetSceneLabel struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorGetSceneLabel) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetSceneLabelArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("GetSceneLabel", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetSceneLabelResult()
  if result.Success, err = p.handler.GetSceneLabel(args._sceneId); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetSceneLabel: " + err.String())
    oprot.WriteMessageBegin("GetSceneLabel", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("GetSceneLabel", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorSetSceneLabel struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorSetSceneLabel) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewSetSceneLabelArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("SetSceneLabel", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewSetSceneLabelResult()
  if err = p.handler.SetSceneLabel(args._sceneId, args._value); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SetSceneLabel: " + err.String())
    oprot.WriteMessageBegin("SetSceneLabel", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("SetSceneLabel", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorSceneExists struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorSceneExists) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewSceneExistsArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("SceneExists", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewSceneExistsResult()
  if result.Success, err = p.handler.SceneExists(args._sceneId); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SceneExists: " + err.String())
    oprot.WriteMessageBegin("SceneExists", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("SceneExists", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorActivateScene struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorActivateScene) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewActivateSceneArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("ActivateScene", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewActivateSceneResult()
  if result.Success, err = p.handler.ActivateScene(args._sceneId); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ActivateScene: " + err.String())
    oprot.WriteMessageBegin("ActivateScene", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("ActivateScene", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorGetDriverStatistics struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorGetDriverStatistics) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetDriverStatisticsArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("GetDriverStatistics", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetDriverStatisticsResult()
  if result.Success, err = p.handler.GetDriverStatistics(args._homeId); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetDriverStatistics: " + err.String())
    oprot.WriteMessageBegin("GetDriverStatistics", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("GetDriverStatistics", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorSendAllValues struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorSendAllValues) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewSendAllValuesArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("SendAllValues", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewSendAllValuesResult()
  if err = p.handler.SendAllValues(); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SendAllValues: " + err.String())
    oprot.WriteMessageBegin("SendAllValues", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("SendAllValues", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

/**
 * Attributes:
 *  - _homeId
 */
type WriteConfigArgs struct {
  thrift.TStruct
  _homeId int32 "_homeId"; // 1
}

func NewWriteConfigArgs() *WriteConfigArgs {
  output := &WriteConfigArgs{
    TStruct:thrift.NewTStruct("WriteConfig_args", []thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    }),
  }
  {
  }
  return output
}

func (p *WriteConfigArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_homeId" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *WriteConfigArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v942, err943 := iprot.ReadI32()
  if err943 != nil { return thrift.NewTProtocolExceptionReadField(1, "_homeId", p.ThriftName(), err943); }
  p._homeId = v942
  return err
}

func (p *WriteConfigArgs) ReadField_homeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *WriteConfigArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("WriteConfig_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *WriteConfigArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_homeId", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._homeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  return err
}

func (p *WriteConfigArgs) WriteField_homeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *WriteConfigArgs) TStructName() string {
  return "WriteConfigArgs"
}

func (p *WriteConfigArgs) ThriftName() string {
  return "WriteConfig_args"
}

func (p *WriteConfigArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WriteConfigArgs(%+v)", *p)
}

func (p *WriteConfigArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*WriteConfigArgs)
  if !ok {
    return 0, false
  }
  if p._homeId != data._homeId {
    if p._homeId < data._homeId {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *WriteConfigArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._homeId
  }
  return nil
}

func (p *WriteConfigArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    })
}

type WriteConfigResult struct {
  thrift.TStruct
}

func NewWriteConfigResult() *WriteConfigResult {
  output := &WriteConfigResult{
    TStruct:thrift.NewTStruct("WriteConfig_result", []thrift.TField{
    }),
  }
  {
  }
  return output
}

func (p *WriteConfigResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    err = iprot.Skip(fieldTypeId)
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *WriteConfigResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("WriteConfig_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *WriteConfigResult) TStructName() string {
  return "WriteConfigResult"
}

func (p *WriteConfigResult) ThriftName() string {
  return "WriteConfig_result"
}

func (p *WriteConfigResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WriteConfigResult(%+v)", *p)
}

func (p *WriteConfigResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  _, ok := other.(*WriteConfigResult)
  if !ok {
    return 0, false
  }
  return 0, true
}

func (p *WriteConfigResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  }
  return nil
}

func (p *WriteConfigResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    })
}

/**
 * Attributes:
 *  - _homeId
 */
type GetControllerNodeIdArgs struct {
  thrift.TStruct
  _homeId int32 "_homeId"; // 1
}

func NewGetControllerNodeIdArgs() *GetControllerNodeIdArgs {
  output := &GetControllerNodeIdArgs{
    TStruct:thrift.NewTStruct("GetControllerNodeId_args", []thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetControllerNodeIdArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_homeId" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetControllerNodeIdArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v944, err945 := iprot.ReadI32()
  if err945 != nil { return thrift.NewTProtocolExceptionReadField(1, "_homeId", p.ThriftName(), err945); }
  p._homeId = v944
  return err
}

func (p *GetControllerNodeIdArgs) ReadField_homeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetControllerNodeIdArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetControllerNodeId_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetControllerNodeIdArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_homeId", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._homeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  return err
}

func (p *GetControllerNodeIdArgs) WriteField_homeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetControllerNodeIdArgs) TStructName() string {
  return "GetControllerNodeIdArgs"
}

func (p *GetControllerNodeIdArgs) ThriftName() string {
  return "GetControllerNodeId_args"
}

func (p *GetControllerNodeIdArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetControllerNodeIdArgs(%+v)", *p)
}

func (p *GetControllerNodeIdArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetControllerNodeIdArgs)
  if !ok {
    return 0, false
  }
  if p._homeId != data._homeId {
    if p._homeId < data._homeId {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetControllerNodeIdArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._homeId
  }
  return nil
}

func (p *GetControllerNodeIdArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    })
}

/**
 * Attributes:
 *  - Success
 */
type GetControllerNodeIdResult struct {
  thrift.TStruct
  Success byte "success"; // 0
}

func NewGetControllerNodeIdResult() *GetControllerNodeIdResult {
  output := &GetControllerNodeIdResult{
    TStruct:thrift.NewTStruct("GetControllerNodeId_result", []thrift.TField{
    thrift.NewTField("success", thrift.BYTE, 0),
    }),
  }
  {
  }
  return output
}

func (p *GetControllerNodeIdResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetControllerNodeIdResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v946, err947 := iprot.ReadByte()
  if err947 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err947); }
  p.Success = v946
  return err
}

func (p *GetControllerNodeIdResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetControllerNodeIdResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetControllerNodeId_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetControllerNodeIdResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BYTE, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *GetControllerNodeIdResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetControllerNodeIdResult) TStructName() string {
  return "GetControllerNodeIdResult"
}

func (p *GetControllerNodeIdResult) ThriftName() string {
  return "GetControllerNodeId_result"
}

func (p *GetControllerNodeIdResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetControllerNodeIdResult(%+v)", *p)
}

func (p *GetControllerNodeIdResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetControllerNodeIdResult)
  if !ok {
    return 0, false
  }
  if p.Success != data.Success {
    if p.Success < data.Success {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetControllerNodeIdResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *GetControllerNodeIdResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BYTE, 0),
    })
}

/**
 * Attributes:
 *  - _homeId
 */
type IsPrimaryControllerArgs struct {
  thrift.TStruct
  _homeId int32 "_homeId"; // 1
}

func NewIsPrimaryControllerArgs() *IsPrimaryControllerArgs {
  output := &IsPrimaryControllerArgs{
    TStruct:thrift.NewTStruct("IsPrimaryController_args", []thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    }),
  }
  {
  }
  return output
}

func (p *IsPrimaryControllerArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_homeId" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *IsPrimaryControllerArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v948, err949 := iprot.ReadI32()
  if err949 != nil { return thrift.NewTProtocolExceptionReadField(1, "_homeId", p.ThriftName(), err949); }
  p._homeId = v948
  return err
}

func (p *IsPrimaryControllerArgs) ReadField_homeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *IsPrimaryControllerArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("IsPrimaryController_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *IsPrimaryControllerArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_homeId", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._homeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  return err
}

func (p *IsPrimaryControllerArgs) WriteField_homeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *IsPrimaryControllerArgs) TStructName() string {
  return "IsPrimaryControllerArgs"
}

func (p *IsPrimaryControllerArgs) ThriftName() string {
  return "IsPrimaryController_args"
}

func (p *IsPrimaryControllerArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IsPrimaryControllerArgs(%+v)", *p)
}

func (p *IsPrimaryControllerArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*IsPrimaryControllerArgs)
  if !ok {
    return 0, false
  }
  if p._homeId != data._homeId {
    if p._homeId < data._homeId {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *IsPrimaryControllerArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._homeId
  }
  return nil
}

func (p *IsPrimaryControllerArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    })
}

/**
 * Attributes:
 *  - Success
 */
type IsPrimaryControllerResult struct {
  thrift.TStruct
  Success bool "success"; // 0
}

func NewIsPrimaryControllerResult() *IsPrimaryControllerResult {
  output := &IsPrimaryControllerResult{
    TStruct:thrift.NewTStruct("IsPrimaryController_result", []thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    }),
  }
  {
  }
  return output
}

func (p *IsPrimaryControllerResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *IsPrimaryControllerResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v950, err951 := iprot.ReadBool()
  if err951 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err951); }
  p.Success = v950
  return err
}

func (p *IsPrimaryControllerResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *IsPrimaryControllerResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("IsPrimaryController_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *IsPrimaryControllerResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BOOL, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *IsPrimaryControllerResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *IsPrimaryControllerResult) TStructName() string {
  return "IsPrimaryControllerResult"
}

func (p *IsPrimaryControllerResult) ThriftName() string {
  return "IsPrimaryController_result"
}

func (p *IsPrimaryControllerResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IsPrimaryControllerResult(%+v)", *p)
}

func (p *IsPrimaryControllerResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*IsPrimaryControllerResult)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Success, data.Success); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *IsPrimaryControllerResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *IsPrimaryControllerResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    })
}

/**
 * Attributes:
 *  - _homeId
 */
type IsStaticUpdateControllerArgs struct {
  thrift.TStruct
  _homeId int32 "_homeId"; // 1
}

func NewIsStaticUpdateControllerArgs() *IsStaticUpdateControllerArgs {
  output := &IsStaticUpdateControllerArgs{
    TStruct:thrift.NewTStruct("IsStaticUpdateController_args", []thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    }),
  }
  {
  }
  return output
}

func (p *IsStaticUpdateControllerArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_homeId" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *IsStaticUpdateControllerArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v952, err953 := iprot.ReadI32()
  if err953 != nil { return thrift.NewTProtocolExceptionReadField(1, "_homeId", p.ThriftName(), err953); }
  p._homeId = v952
  return err
}

func (p *IsStaticUpdateControllerArgs) ReadField_homeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *IsStaticUpdateControllerArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("IsStaticUpdateController_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *IsStaticUpdateControllerArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_homeId", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._homeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  return err
}

func (p *IsStaticUpdateControllerArgs) WriteField_homeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *IsStaticUpdateControllerArgs) TStructName() string {
  return "IsStaticUpdateControllerArgs"
}

func (p *IsStaticUpdateControllerArgs) ThriftName() string {
  return "IsStaticUpdateController_args"
}

func (p *IsStaticUpdateControllerArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IsStaticUpdateControllerArgs(%+v)", *p)
}

func (p *IsStaticUpdateControllerArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*IsStaticUpdateControllerArgs)
  if !ok {
    return 0, false
  }
  if p._homeId != data._homeId {
    if p._homeId < data._homeId {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *IsStaticUpdateControllerArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._homeId
  }
  return nil
}

func (p *IsStaticUpdateControllerArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    })
}

/**
 * Attributes:
 *  - Success
 */
type IsStaticUpdateControllerResult struct {
  thrift.TStruct
  Success bool "success"; // 0
}

func NewIsStaticUpdateControllerResult() *IsStaticUpdateControllerResult {
  output := &IsStaticUpdateControllerResult{
    TStruct:thrift.NewTStruct("IsStaticUpdateController_result", []thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    }),
  }
  {
  }
  return output
}

func (p *IsStaticUpdateControllerResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *IsStaticUpdateControllerResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v954, err955 := iprot.ReadBool()
  if err955 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err955); }
  p.Success = v954
  return err
}

func (p *IsStaticUpdateControllerResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *IsStaticUpdateControllerResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("IsStaticUpdateController_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *IsStaticUpdateControllerResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BOOL, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *IsStaticUpdateControllerResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *IsStaticUpdateControllerResult) TStructName() string {
  return "IsStaticUpdateControllerResult"
}

func (p *IsStaticUpdateControllerResult) ThriftName() string {
  return "IsStaticUpdateController_result"
}

func (p *IsStaticUpdateControllerResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IsStaticUpdateControllerResult(%+v)", *p)
}

func (p *IsStaticUpdateControllerResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*IsStaticUpdateControllerResult)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Success, data.Success); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *IsStaticUpdateControllerResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *IsStaticUpdateControllerResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    })
}

/**
 * Attributes:
 *  - _homeId
 */
type IsBridgeControllerArgs struct {
  thrift.TStruct
  _homeId int32 "_homeId"; // 1
}

func NewIsBridgeControllerArgs() *IsBridgeControllerArgs {
  output := &IsBridgeControllerArgs{
    TStruct:thrift.NewTStruct("IsBridgeController_args", []thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    }),
  }
  {
  }
  return output
}

func (p *IsBridgeControllerArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_homeId" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *IsBridgeControllerArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v956, err957 := iprot.ReadI32()
  if err957 != nil { return thrift.NewTProtocolExceptionReadField(1, "_homeId", p.ThriftName(), err957); }
  p._homeId = v956
  return err
}

func (p *IsBridgeControllerArgs) ReadField_homeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *IsBridgeControllerArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("IsBridgeController_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *IsBridgeControllerArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_homeId", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._homeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  return err
}

func (p *IsBridgeControllerArgs) WriteField_homeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *IsBridgeControllerArgs) TStructName() string {
  return "IsBridgeControllerArgs"
}

func (p *IsBridgeControllerArgs) ThriftName() string {
  return "IsBridgeController_args"
}

func (p *IsBridgeControllerArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IsBridgeControllerArgs(%+v)", *p)
}

func (p *IsBridgeControllerArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*IsBridgeControllerArgs)
  if !ok {
    return 0, false
  }
  if p._homeId != data._homeId {
    if p._homeId < data._homeId {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *IsBridgeControllerArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._homeId
  }
  return nil
}

func (p *IsBridgeControllerArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    })
}

/**
 * Attributes:
 *  - Success
 */
type IsBridgeControllerResult struct {
  thrift.TStruct
  Success bool "success"; // 0
}

func NewIsBridgeControllerResult() *IsBridgeControllerResult {
  output := &IsBridgeControllerResult{
    TStruct:thrift.NewTStruct("IsBridgeController_result", []thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    }),
  }
  {
  }
  return output
}

func (p *IsBridgeControllerResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *IsBridgeControllerResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v958, err959 := iprot.ReadBool()
  if err959 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err959); }
  p.Success = v958
  return err
}

func (p *IsBridgeControllerResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *IsBridgeControllerResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("IsBridgeController_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *IsBridgeControllerResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BOOL, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *IsBridgeControllerResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *IsBridgeControllerResult) TStructName() string {
  return "IsBridgeControllerResult"
}

func (p *IsBridgeControllerResult) ThriftName() string {
  return "IsBridgeController_result"
}

func (p *IsBridgeControllerResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IsBridgeControllerResult(%+v)", *p)
}

func (p *IsBridgeControllerResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*IsBridgeControllerResult)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Success, data.Success); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *IsBridgeControllerResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *IsBridgeControllerResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    })
}

/**
 * Attributes:
 *  - _homeId
 */
type GetLibraryVersionArgs struct {
  thrift.TStruct
  _homeId int32 "_homeId"; // 1
}

func NewGetLibraryVersionArgs() *GetLibraryVersionArgs {
  output := &GetLibraryVersionArgs{
    TStruct:thrift.NewTStruct("GetLibraryVersion_args", []thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetLibraryVersionArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_homeId" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetLibraryVersionArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v960, err961 := iprot.ReadI32()
  if err961 != nil { return thrift.NewTProtocolExceptionReadField(1, "_homeId", p.ThriftName(), err961); }
  p._homeId = v960
  return err
}

func (p *GetLibraryVersionArgs) ReadField_homeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetLibraryVersionArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetLibraryVersion_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetLibraryVersionArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_homeId", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._homeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  return err
}

func (p *GetLibraryVersionArgs) WriteField_homeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetLibraryVersionArgs) TStructName() string {
  return "GetLibraryVersionArgs"
}

func (p *GetLibraryVersionArgs) ThriftName() string {
  return "GetLibraryVersion_args"
}

func (p *GetLibraryVersionArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetLibraryVersionArgs(%+v)", *p)
}

func (p *GetLibraryVersionArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetLibraryVersionArgs)
  if !ok {
    return 0, false
  }
  if p._homeId != data._homeId {
    if p._homeId < data._homeId {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetLibraryVersionArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._homeId
  }
  return nil
}

func (p *GetLibraryVersionArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    })
}

/**
 * Attributes:
 *  - Success
 */
type GetLibraryVersionResult struct {
  thrift.TStruct
  Success string "success"; // 0
}

func NewGetLibraryVersionResult() *GetLibraryVersionResult {
  output := &GetLibraryVersionResult{
    TStruct:thrift.NewTStruct("GetLibraryVersion_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRING, 0),
    }),
  }
  {
  }
  return output
}

func (p *GetLibraryVersionResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetLibraryVersionResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v962, err963 := iprot.ReadString()
  if err963 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err963); }
  p.Success = v962
  return err
}

func (p *GetLibraryVersionResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetLibraryVersionResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetLibraryVersion_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetLibraryVersionResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.STRING, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *GetLibraryVersionResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetLibraryVersionResult) TStructName() string {
  return "GetLibraryVersionResult"
}

func (p *GetLibraryVersionResult) ThriftName() string {
  return "GetLibraryVersion_result"
}

func (p *GetLibraryVersionResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetLibraryVersionResult(%+v)", *p)
}

func (p *GetLibraryVersionResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetLibraryVersionResult)
  if !ok {
    return 0, false
  }
  if p.Success != data.Success {
    if p.Success < data.Success {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetLibraryVersionResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *GetLibraryVersionResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRING, 0),
    })
}

/**
 * Attributes:
 *  - _homeId
 */
type GetLibraryTypeNameArgs struct {
  thrift.TStruct
  _homeId int32 "_homeId"; // 1
}

func NewGetLibraryTypeNameArgs() *GetLibraryTypeNameArgs {
  output := &GetLibraryTypeNameArgs{
    TStruct:thrift.NewTStruct("GetLibraryTypeName_args", []thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetLibraryTypeNameArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_homeId" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetLibraryTypeNameArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v964, err965 := iprot.ReadI32()
  if err965 != nil { return thrift.NewTProtocolExceptionReadField(1, "_homeId", p.ThriftName(), err965); }
  p._homeId = v964
  return err
}

func (p *GetLibraryTypeNameArgs) ReadField_homeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetLibraryTypeNameArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetLibraryTypeName_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetLibraryTypeNameArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_homeId", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._homeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  return err
}

func (p *GetLibraryTypeNameArgs) WriteField_homeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetLibraryTypeNameArgs) TStructName() string {
  return "GetLibraryTypeNameArgs"
}

func (p *GetLibraryTypeNameArgs) ThriftName() string {
  return "GetLibraryTypeName_args"
}

func (p *GetLibraryTypeNameArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetLibraryTypeNameArgs(%+v)", *p)
}

func (p *GetLibraryTypeNameArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetLibraryTypeNameArgs)
  if !ok {
    return 0, false
  }
  if p._homeId != data._homeId {
    if p._homeId < data._homeId {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetLibraryTypeNameArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._homeId
  }
  return nil
}

func (p *GetLibraryTypeNameArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    })
}

/**
 * Attributes:
 *  - Success
 */
type GetLibraryTypeNameResult struct {
  thrift.TStruct
  Success string "success"; // 0
}

func NewGetLibraryTypeNameResult() *GetLibraryTypeNameResult {
  output := &GetLibraryTypeNameResult{
    TStruct:thrift.NewTStruct("GetLibraryTypeName_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRING, 0),
    }),
  }
  {
  }
  return output
}

func (p *GetLibraryTypeNameResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetLibraryTypeNameResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v966, err967 := iprot.ReadString()
  if err967 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err967); }
  p.Success = v966
  return err
}

func (p *GetLibraryTypeNameResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetLibraryTypeNameResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetLibraryTypeName_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetLibraryTypeNameResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.STRING, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *GetLibraryTypeNameResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetLibraryTypeNameResult) TStructName() string {
  return "GetLibraryTypeNameResult"
}

func (p *GetLibraryTypeNameResult) ThriftName() string {
  return "GetLibraryTypeName_result"
}

func (p *GetLibraryTypeNameResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetLibraryTypeNameResult(%+v)", *p)
}

func (p *GetLibraryTypeNameResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetLibraryTypeNameResult)
  if !ok {
    return 0, false
  }
  if p.Success != data.Success {
    if p.Success < data.Success {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetLibraryTypeNameResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *GetLibraryTypeNameResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRING, 0),
    })
}

/**
 * Attributes:
 *  - _homeId
 */
type GetSendQueueCountArgs struct {
  thrift.TStruct
  _homeId int32 "_homeId"; // 1
}

func NewGetSendQueueCountArgs() *GetSendQueueCountArgs {
  output := &GetSendQueueCountArgs{
    TStruct:thrift.NewTStruct("GetSendQueueCount_args", []thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetSendQueueCountArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_homeId" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetSendQueueCountArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v968, err969 := iprot.ReadI32()
  if err969 != nil { return thrift.NewTProtocolExceptionReadField(1, "_homeId", p.ThriftName(), err969); }
  p._homeId = v968
  return err
}

func (p *GetSendQueueCountArgs) ReadField_homeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetSendQueueCountArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetSendQueueCount_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetSendQueueCountArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_homeId", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._homeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  return err
}

func (p *GetSendQueueCountArgs) WriteField_homeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetSendQueueCountArgs) TStructName() string {
  return "GetSendQueueCountArgs"
}

func (p *GetSendQueueCountArgs) ThriftName() string {
  return "GetSendQueueCount_args"
}

func (p *GetSendQueueCountArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetSendQueueCountArgs(%+v)", *p)
}

func (p *GetSendQueueCountArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetSendQueueCountArgs)
  if !ok {
    return 0, false
  }
  if p._homeId != data._homeId {
    if p._homeId < data._homeId {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetSendQueueCountArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._homeId
  }
  return nil
}

func (p *GetSendQueueCountArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    })
}

/**
 * Attributes:
 *  - Success
 */
type GetSendQueueCountResult struct {
  thrift.TStruct
  Success int32 "success"; // 0
}

func NewGetSendQueueCountResult() *GetSendQueueCountResult {
  output := &GetSendQueueCountResult{
    TStruct:thrift.NewTStruct("GetSendQueueCount_result", []thrift.TField{
    thrift.NewTField("success", thrift.I32, 0),
    }),
  }
  {
  }
  return output
}

func (p *GetSendQueueCountResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetSendQueueCountResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v970, err971 := iprot.ReadI32()
  if err971 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err971); }
  p.Success = v970
  return err
}

func (p *GetSendQueueCountResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetSendQueueCountResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetSendQueueCount_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetSendQueueCountResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.I32, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *GetSendQueueCountResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetSendQueueCountResult) TStructName() string {
  return "GetSendQueueCountResult"
}

func (p *GetSendQueueCountResult) ThriftName() string {
  return "GetSendQueueCount_result"
}

func (p *GetSendQueueCountResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetSendQueueCountResult(%+v)", *p)
}

func (p *GetSendQueueCountResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetSendQueueCountResult)
  if !ok {
    return 0, false
  }
  if p.Success != data.Success {
    if p.Success < data.Success {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetSendQueueCountResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *GetSendQueueCountResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.I32, 0),
    })
}

type GetPollIntervalArgs struct {
  thrift.TStruct
}

func NewGetPollIntervalArgs() *GetPollIntervalArgs {
  output := &GetPollIntervalArgs{
    TStruct:thrift.NewTStruct("GetPollInterval_args", []thrift.TField{
    }),
  }
  {
  }
  return output
}

func (p *GetPollIntervalArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    err = iprot.Skip(fieldTypeId)
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetPollIntervalArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetPollInterval_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetPollIntervalArgs) TStructName() string {
  return "GetPollIntervalArgs"
}

func (p *GetPollIntervalArgs) ThriftName() string {
  return "GetPollInterval_args"
}

func (p *GetPollIntervalArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetPollIntervalArgs(%+v)", *p)
}

func (p *GetPollIntervalArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  _, ok := other.(*GetPollIntervalArgs)
  if !ok {
    return 0, false
  }
  return 0, true
}

func (p *GetPollIntervalArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  }
  return nil
}

func (p *GetPollIntervalArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    })
}

/**
 * Attributes:
 *  - Success
 */
type GetPollIntervalResult struct {
  thrift.TStruct
  Success int32 "success"; // 0
}

func NewGetPollIntervalResult() *GetPollIntervalResult {
  output := &GetPollIntervalResult{
    TStruct:thrift.NewTStruct("GetPollInterval_result", []thrift.TField{
    thrift.NewTField("success", thrift.I32, 0),
    }),
  }
  {
  }
  return output
}

func (p *GetPollIntervalResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetPollIntervalResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v972, err973 := iprot.ReadI32()
  if err973 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err973); }
  p.Success = v972
  return err
}

func (p *GetPollIntervalResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetPollIntervalResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetPollInterval_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetPollIntervalResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.I32, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *GetPollIntervalResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetPollIntervalResult) TStructName() string {
  return "GetPollIntervalResult"
}

func (p *GetPollIntervalResult) ThriftName() string {
  return "GetPollInterval_result"
}

func (p *GetPollIntervalResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetPollIntervalResult(%+v)", *p)
}

func (p *GetPollIntervalResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetPollIntervalResult)
  if !ok {
    return 0, false
  }
  if p.Success != data.Success {
    if p.Success < data.Success {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetPollIntervalResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *GetPollIntervalResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.I32, 0),
    })
}

/**
 * Attributes:
 *  - _seconds
 */
type SetPollIntervalArgs struct {
  thrift.TStruct
  _seconds int32 "_seconds"; // 1
}

func NewSetPollIntervalArgs() *SetPollIntervalArgs {
  output := &SetPollIntervalArgs{
    TStruct:thrift.NewTStruct("SetPollInterval_args", []thrift.TField{
    thrift.NewTField("_seconds", thrift.I32, 1),
    }),
  }
  {
  }
  return output
}

func (p *SetPollIntervalArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_seconds" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SetPollIntervalArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v974, err975 := iprot.ReadI32()
  if err975 != nil { return thrift.NewTProtocolExceptionReadField(1, "_seconds", p.ThriftName(), err975); }
  p._seconds = v974
  return err
}

func (p *SetPollIntervalArgs) ReadField_seconds(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *SetPollIntervalArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SetPollInterval_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SetPollIntervalArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_seconds", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_seconds", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._seconds))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_seconds", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_seconds", p.ThriftName(), err); }
  return err
}

func (p *SetPollIntervalArgs) WriteField_seconds(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *SetPollIntervalArgs) TStructName() string {
  return "SetPollIntervalArgs"
}

func (p *SetPollIntervalArgs) ThriftName() string {
  return "SetPollInterval_args"
}

func (p *SetPollIntervalArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetPollIntervalArgs(%+v)", *p)
}

func (p *SetPollIntervalArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SetPollIntervalArgs)
  if !ok {
    return 0, false
  }
  if p._seconds != data._seconds {
    if p._seconds < data._seconds {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *SetPollIntervalArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._seconds
  }
  return nil
}

func (p *SetPollIntervalArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_seconds", thrift.I32, 1),
    })
}

type SetPollIntervalResult struct {
  thrift.TStruct
}

func NewSetPollIntervalResult() *SetPollIntervalResult {
  output := &SetPollIntervalResult{
    TStruct:thrift.NewTStruct("SetPollInterval_result", []thrift.TField{
    }),
  }
  {
  }
  return output
}

func (p *SetPollIntervalResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    err = iprot.Skip(fieldTypeId)
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SetPollIntervalResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SetPollInterval_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SetPollIntervalResult) TStructName() string {
  return "SetPollIntervalResult"
}

func (p *SetPollIntervalResult) ThriftName() string {
  return "SetPollInterval_result"
}

func (p *SetPollIntervalResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetPollIntervalResult(%+v)", *p)
}

func (p *SetPollIntervalResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  _, ok := other.(*SetPollIntervalResult)
  if !ok {
    return 0, false
  }
  return 0, true
}

func (p *SetPollIntervalResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  }
  return nil
}

func (p *SetPollIntervalResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    })
}

/**
 * Attributes:
 *  - _valueId
 */
type EnablePollArgs struct {
  thrift.TStruct
  _valueId *RemoteValueID "_valueId"; // 1
}

func NewEnablePollArgs() *EnablePollArgs {
  output := &EnablePollArgs{
    TStruct:thrift.NewTStruct("EnablePoll_args", []thrift.TField{
    thrift.NewTField("_valueId", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *EnablePollArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_valueId" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *EnablePollArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p._valueId = NewRemoteValueID()
  err978 := p._valueId.Read(iprot)
  if err978 != nil { return thrift.NewTProtocolExceptionReadStruct("p._valueIdRemoteValueID", err978); }
  return err
}

func (p *EnablePollArgs) ReadField_valueId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *EnablePollArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("EnablePoll_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *EnablePollArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._valueId != nil {
    err = oprot.WriteFieldBegin("_valueId", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_valueId", p.ThriftName(), err); }
    err = p._valueId.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RemoteValueID", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_valueId", p.ThriftName(), err); }
  }
  return err
}

func (p *EnablePollArgs) WriteField_valueId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *EnablePollArgs) TStructName() string {
  return "EnablePollArgs"
}

func (p *EnablePollArgs) ThriftName() string {
  return "EnablePoll_args"
}

func (p *EnablePollArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EnablePollArgs(%+v)", *p)
}

func (p *EnablePollArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*EnablePollArgs)
  if !ok {
    return 0, false
  }
  if cmp, ok := p._valueId.CompareTo(data._valueId); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *EnablePollArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._valueId
  }
  return nil
}

func (p *EnablePollArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_valueId", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - Success
 */
type EnablePollResult struct {
  thrift.TStruct
  Success bool "success"; // 0
}

func NewEnablePollResult() *EnablePollResult {
  output := &EnablePollResult{
    TStruct:thrift.NewTStruct("EnablePoll_result", []thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    }),
  }
  {
  }
  return output
}

func (p *EnablePollResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *EnablePollResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v979, err980 := iprot.ReadBool()
  if err980 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err980); }
  p.Success = v979
  return err
}

func (p *EnablePollResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *EnablePollResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("EnablePoll_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *EnablePollResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BOOL, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *EnablePollResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *EnablePollResult) TStructName() string {
  return "EnablePollResult"
}

func (p *EnablePollResult) ThriftName() string {
  return "EnablePoll_result"
}

func (p *EnablePollResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EnablePollResult(%+v)", *p)
}

func (p *EnablePollResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*EnablePollResult)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Success, data.Success); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *EnablePollResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *EnablePollResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    })
}

/**
 * Attributes:
 *  - _valueId
 */
type DisablePollArgs struct {
  thrift.TStruct
  _valueId *RemoteValueID "_valueId"; // 1
}

func NewDisablePollArgs() *DisablePollArgs {
  output := &DisablePollArgs{
    TStruct:thrift.NewTStruct("DisablePoll_args", []thrift.TField{
    thrift.NewTField("_valueId", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *DisablePollArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_valueId" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *DisablePollArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p._valueId = NewRemoteValueID()
  err983 := p._valueId.Read(iprot)
  if err983 != nil { return thrift.NewTProtocolExceptionReadStruct("p._valueIdRemoteValueID", err983); }
  return err
}

func (p *DisablePollArgs) ReadField_valueId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *DisablePollArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("DisablePoll_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *DisablePollArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._valueId != nil {
    err = oprot.WriteFieldBegin("_valueId", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_valueId", p.ThriftName(), err); }
    err = p._valueId.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RemoteValueID", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_valueId", p.ThriftName(), err); }
  }
  return err
}

func (p *DisablePollArgs) WriteField_valueId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *DisablePollArgs) TStructName() string {
  return "DisablePollArgs"
}

func (p *DisablePollArgs) ThriftName() string {
  return "DisablePoll_args"
}

func (p *DisablePollArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DisablePollArgs(%+v)", *p)
}

func (p *DisablePollArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*DisablePollArgs)
  if !ok {
    return 0, false
  }
  if cmp, ok := p._valueId.CompareTo(data._valueId); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *DisablePollArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._valueId
  }
  return nil
}

func (p *DisablePollArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_valueId", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - Success
 */
type DisablePollResult struct {
  thrift.TStruct
  Success bool "success"; // 0
}

func NewDisablePollResult() *DisablePollResult {
  output := &DisablePollResult{
    TStruct:thrift.NewTStruct("DisablePoll_result", []thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    }),
  }
  {
  }
  return output
}

func (p *DisablePollResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *DisablePollResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v984, err985 := iprot.ReadBool()
  if err985 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err985); }
  p.Success = v984
  return err
}

func (p *DisablePollResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *DisablePollResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("DisablePoll_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *DisablePollResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BOOL, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *DisablePollResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *DisablePollResult) TStructName() string {
  return "DisablePollResult"
}

func (p *DisablePollResult) ThriftName() string {
  return "DisablePoll_result"
}

func (p *DisablePollResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DisablePollResult(%+v)", *p)
}

func (p *DisablePollResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*DisablePollResult)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Success, data.Success); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *DisablePollResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *DisablePollResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    })
}

/**
 * Attributes:
 *  - _valueId
 */
type IsPolledArgs struct {
  thrift.TStruct
  _valueId *RemoteValueID "_valueId"; // 1
}

func NewIsPolledArgs() *IsPolledArgs {
  output := &IsPolledArgs{
    TStruct:thrift.NewTStruct("isPolled_args", []thrift.TField{
    thrift.NewTField("_valueId", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *IsPolledArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_valueId" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *IsPolledArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p._valueId = NewRemoteValueID()
  err988 := p._valueId.Read(iprot)
  if err988 != nil { return thrift.NewTProtocolExceptionReadStruct("p._valueIdRemoteValueID", err988); }
  return err
}

func (p *IsPolledArgs) ReadField_valueId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *IsPolledArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("isPolled_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *IsPolledArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._valueId != nil {
    err = oprot.WriteFieldBegin("_valueId", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_valueId", p.ThriftName(), err); }
    err = p._valueId.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RemoteValueID", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_valueId", p.ThriftName(), err); }
  }
  return err
}

func (p *IsPolledArgs) WriteField_valueId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *IsPolledArgs) TStructName() string {
  return "IsPolledArgs"
}

func (p *IsPolledArgs) ThriftName() string {
  return "isPolled_args"
}

func (p *IsPolledArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IsPolledArgs(%+v)", *p)
}

func (p *IsPolledArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*IsPolledArgs)
  if !ok {
    return 0, false
  }
  if cmp, ok := p._valueId.CompareTo(data._valueId); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *IsPolledArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._valueId
  }
  return nil
}

func (p *IsPolledArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_valueId", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - Success
 */
type IsPolledResult struct {
  thrift.TStruct
  Success bool "success"; // 0
}

func NewIsPolledResult() *IsPolledResult {
  output := &IsPolledResult{
    TStruct:thrift.NewTStruct("isPolled_result", []thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    }),
  }
  {
  }
  return output
}

func (p *IsPolledResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *IsPolledResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v989, err990 := iprot.ReadBool()
  if err990 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err990); }
  p.Success = v989
  return err
}

func (p *IsPolledResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *IsPolledResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("isPolled_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *IsPolledResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BOOL, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *IsPolledResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *IsPolledResult) TStructName() string {
  return "IsPolledResult"
}

func (p *IsPolledResult) ThriftName() string {
  return "isPolled_result"
}

func (p *IsPolledResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IsPolledResult(%+v)", *p)
}

func (p *IsPolledResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*IsPolledResult)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Success, data.Success); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *IsPolledResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *IsPolledResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    })
}

/**
 * Attributes:
 *  - _homeId
 *  - _nodeId
 */
type RefreshNodeInfoArgs struct {
  thrift.TStruct
  _homeId int32 "_homeId"; // 1
  _nodeId byte "_nodeId"; // 2
}

func NewRefreshNodeInfoArgs() *RefreshNodeInfoArgs {
  output := &RefreshNodeInfoArgs{
    TStruct:thrift.NewTStruct("RefreshNodeInfo_args", []thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    }),
  }
  {
  }
  return output
}

func (p *RefreshNodeInfoArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_homeId" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_nodeId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *RefreshNodeInfoArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v991, err992 := iprot.ReadI32()
  if err992 != nil { return thrift.NewTProtocolExceptionReadField(1, "_homeId", p.ThriftName(), err992); }
  p._homeId = v991
  return err
}

func (p *RefreshNodeInfoArgs) ReadField_homeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *RefreshNodeInfoArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v993, err994 := iprot.ReadByte()
  if err994 != nil { return thrift.NewTProtocolExceptionReadField(2, "_nodeId", p.ThriftName(), err994); }
  p._nodeId = v993
  return err
}

func (p *RefreshNodeInfoArgs) ReadField_nodeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *RefreshNodeInfoArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("RefreshNodeInfo_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *RefreshNodeInfoArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_homeId", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._homeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  return err
}

func (p *RefreshNodeInfoArgs) WriteField_homeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *RefreshNodeInfoArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_nodeId", thrift.BYTE, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._nodeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  return err
}

func (p *RefreshNodeInfoArgs) WriteField_nodeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *RefreshNodeInfoArgs) TStructName() string {
  return "RefreshNodeInfoArgs"
}

func (p *RefreshNodeInfoArgs) ThriftName() string {
  return "RefreshNodeInfo_args"
}

func (p *RefreshNodeInfoArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RefreshNodeInfoArgs(%+v)", *p)
}

func (p *RefreshNodeInfoArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*RefreshNodeInfoArgs)
  if !ok {
    return 0, false
  }
  if p._homeId != data._homeId {
    if p._homeId < data._homeId {
      return -1, true
    }
    return 1, true
  }
  if p._nodeId != data._nodeId {
    if p._nodeId < data._nodeId {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *RefreshNodeInfoArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._homeId
  case 2: return p._nodeId
  }
  return nil
}

func (p *RefreshNodeInfoArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    })
}

/**
 * Attributes:
 *  - Success
 */
type RefreshNodeInfoResult struct {
  thrift.TStruct
  Success bool "success"; // 0
}

func NewRefreshNodeInfoResult() *RefreshNodeInfoResult {
  output := &RefreshNodeInfoResult{
    TStruct:thrift.NewTStruct("RefreshNodeInfo_result", []thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    }),
  }
  {
  }
  return output
}

func (p *RefreshNodeInfoResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *RefreshNodeInfoResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v995, err996 := iprot.ReadBool()
  if err996 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err996); }
  p.Success = v995
  return err
}

func (p *RefreshNodeInfoResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *RefreshNodeInfoResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("RefreshNodeInfo_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *RefreshNodeInfoResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BOOL, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *RefreshNodeInfoResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *RefreshNodeInfoResult) TStructName() string {
  return "RefreshNodeInfoResult"
}

func (p *RefreshNodeInfoResult) ThriftName() string {
  return "RefreshNodeInfo_result"
}

func (p *RefreshNodeInfoResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RefreshNodeInfoResult(%+v)", *p)
}

func (p *RefreshNodeInfoResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*RefreshNodeInfoResult)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Success, data.Success); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *RefreshNodeInfoResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *RefreshNodeInfoResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    })
}

/**
 * Attributes:
 *  - _homeId
 *  - _nodeId
 */
type RequestNodeStateArgs struct {
  thrift.TStruct
  _homeId int32 "_homeId"; // 1
  _nodeId byte "_nodeId"; // 2
}

func NewRequestNodeStateArgs() *RequestNodeStateArgs {
  output := &RequestNodeStateArgs{
    TStruct:thrift.NewTStruct("RequestNodeState_args", []thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    }),
  }
  {
  }
  return output
}

func (p *RequestNodeStateArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_homeId" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_nodeId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *RequestNodeStateArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v997, err998 := iprot.ReadI32()
  if err998 != nil { return thrift.NewTProtocolExceptionReadField(1, "_homeId", p.ThriftName(), err998); }
  p._homeId = v997
  return err
}

func (p *RequestNodeStateArgs) ReadField_homeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *RequestNodeStateArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v999, err1000 := iprot.ReadByte()
  if err1000 != nil { return thrift.NewTProtocolExceptionReadField(2, "_nodeId", p.ThriftName(), err1000); }
  p._nodeId = v999
  return err
}

func (p *RequestNodeStateArgs) ReadField_nodeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *RequestNodeStateArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("RequestNodeState_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *RequestNodeStateArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_homeId", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._homeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  return err
}

func (p *RequestNodeStateArgs) WriteField_homeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *RequestNodeStateArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_nodeId", thrift.BYTE, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._nodeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  return err
}

func (p *RequestNodeStateArgs) WriteField_nodeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *RequestNodeStateArgs) TStructName() string {
  return "RequestNodeStateArgs"
}

func (p *RequestNodeStateArgs) ThriftName() string {
  return "RequestNodeState_args"
}

func (p *RequestNodeStateArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RequestNodeStateArgs(%+v)", *p)
}

func (p *RequestNodeStateArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*RequestNodeStateArgs)
  if !ok {
    return 0, false
  }
  if p._homeId != data._homeId {
    if p._homeId < data._homeId {
      return -1, true
    }
    return 1, true
  }
  if p._nodeId != data._nodeId {
    if p._nodeId < data._nodeId {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *RequestNodeStateArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._homeId
  case 2: return p._nodeId
  }
  return nil
}

func (p *RequestNodeStateArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    })
}

/**
 * Attributes:
 *  - Success
 */
type RequestNodeStateResult struct {
  thrift.TStruct
  Success bool "success"; // 0
}

func NewRequestNodeStateResult() *RequestNodeStateResult {
  output := &RequestNodeStateResult{
    TStruct:thrift.NewTStruct("RequestNodeState_result", []thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    }),
  }
  {
  }
  return output
}

func (p *RequestNodeStateResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *RequestNodeStateResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1001, err1002 := iprot.ReadBool()
  if err1002 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1002); }
  p.Success = v1001
  return err
}

func (p *RequestNodeStateResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *RequestNodeStateResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("RequestNodeState_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *RequestNodeStateResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BOOL, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *RequestNodeStateResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *RequestNodeStateResult) TStructName() string {
  return "RequestNodeStateResult"
}

func (p *RequestNodeStateResult) ThriftName() string {
  return "RequestNodeState_result"
}

func (p *RequestNodeStateResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RequestNodeStateResult(%+v)", *p)
}

func (p *RequestNodeStateResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*RequestNodeStateResult)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Success, data.Success); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *RequestNodeStateResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *RequestNodeStateResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    })
}

/**
 * Attributes:
 *  - _homeId
 *  - _nodeId
 */
type RequestNodeDynamicArgs struct {
  thrift.TStruct
  _homeId int32 "_homeId"; // 1
  _nodeId byte "_nodeId"; // 2
}

func NewRequestNodeDynamicArgs() *RequestNodeDynamicArgs {
  output := &RequestNodeDynamicArgs{
    TStruct:thrift.NewTStruct("RequestNodeDynamic_args", []thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    }),
  }
  {
  }
  return output
}

func (p *RequestNodeDynamicArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_homeId" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_nodeId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *RequestNodeDynamicArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1003, err1004 := iprot.ReadI32()
  if err1004 != nil { return thrift.NewTProtocolExceptionReadField(1, "_homeId", p.ThriftName(), err1004); }
  p._homeId = v1003
  return err
}

func (p *RequestNodeDynamicArgs) ReadField_homeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *RequestNodeDynamicArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1005, err1006 := iprot.ReadByte()
  if err1006 != nil { return thrift.NewTProtocolExceptionReadField(2, "_nodeId", p.ThriftName(), err1006); }
  p._nodeId = v1005
  return err
}

func (p *RequestNodeDynamicArgs) ReadField_nodeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *RequestNodeDynamicArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("RequestNodeDynamic_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *RequestNodeDynamicArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_homeId", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._homeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  return err
}

func (p *RequestNodeDynamicArgs) WriteField_homeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *RequestNodeDynamicArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_nodeId", thrift.BYTE, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._nodeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  return err
}

func (p *RequestNodeDynamicArgs) WriteField_nodeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *RequestNodeDynamicArgs) TStructName() string {
  return "RequestNodeDynamicArgs"
}

func (p *RequestNodeDynamicArgs) ThriftName() string {
  return "RequestNodeDynamic_args"
}

func (p *RequestNodeDynamicArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RequestNodeDynamicArgs(%+v)", *p)
}

func (p *RequestNodeDynamicArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*RequestNodeDynamicArgs)
  if !ok {
    return 0, false
  }
  if p._homeId != data._homeId {
    if p._homeId < data._homeId {
      return -1, true
    }
    return 1, true
  }
  if p._nodeId != data._nodeId {
    if p._nodeId < data._nodeId {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *RequestNodeDynamicArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._homeId
  case 2: return p._nodeId
  }
  return nil
}

func (p *RequestNodeDynamicArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    })
}

/**
 * Attributes:
 *  - Success
 */
type RequestNodeDynamicResult struct {
  thrift.TStruct
  Success bool "success"; // 0
}

func NewRequestNodeDynamicResult() *RequestNodeDynamicResult {
  output := &RequestNodeDynamicResult{
    TStruct:thrift.NewTStruct("RequestNodeDynamic_result", []thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    }),
  }
  {
  }
  return output
}

func (p *RequestNodeDynamicResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *RequestNodeDynamicResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1007, err1008 := iprot.ReadBool()
  if err1008 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1008); }
  p.Success = v1007
  return err
}

func (p *RequestNodeDynamicResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *RequestNodeDynamicResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("RequestNodeDynamic_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *RequestNodeDynamicResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BOOL, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *RequestNodeDynamicResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *RequestNodeDynamicResult) TStructName() string {
  return "RequestNodeDynamicResult"
}

func (p *RequestNodeDynamicResult) ThriftName() string {
  return "RequestNodeDynamic_result"
}

func (p *RequestNodeDynamicResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RequestNodeDynamicResult(%+v)", *p)
}

func (p *RequestNodeDynamicResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*RequestNodeDynamicResult)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Success, data.Success); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *RequestNodeDynamicResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *RequestNodeDynamicResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    })
}

/**
 * Attributes:
 *  - _homeId
 *  - _nodeId
 */
type IsNodeListeningDeviceArgs struct {
  thrift.TStruct
  _homeId int32 "_homeId"; // 1
  _nodeId byte "_nodeId"; // 2
}

func NewIsNodeListeningDeviceArgs() *IsNodeListeningDeviceArgs {
  output := &IsNodeListeningDeviceArgs{
    TStruct:thrift.NewTStruct("IsNodeListeningDevice_args", []thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    }),
  }
  {
  }
  return output
}

func (p *IsNodeListeningDeviceArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_homeId" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_nodeId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *IsNodeListeningDeviceArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1009, err1010 := iprot.ReadI32()
  if err1010 != nil { return thrift.NewTProtocolExceptionReadField(1, "_homeId", p.ThriftName(), err1010); }
  p._homeId = v1009
  return err
}

func (p *IsNodeListeningDeviceArgs) ReadField_homeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *IsNodeListeningDeviceArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1011, err1012 := iprot.ReadByte()
  if err1012 != nil { return thrift.NewTProtocolExceptionReadField(2, "_nodeId", p.ThriftName(), err1012); }
  p._nodeId = v1011
  return err
}

func (p *IsNodeListeningDeviceArgs) ReadField_nodeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *IsNodeListeningDeviceArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("IsNodeListeningDevice_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *IsNodeListeningDeviceArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_homeId", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._homeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  return err
}

func (p *IsNodeListeningDeviceArgs) WriteField_homeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *IsNodeListeningDeviceArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_nodeId", thrift.BYTE, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._nodeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  return err
}

func (p *IsNodeListeningDeviceArgs) WriteField_nodeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *IsNodeListeningDeviceArgs) TStructName() string {
  return "IsNodeListeningDeviceArgs"
}

func (p *IsNodeListeningDeviceArgs) ThriftName() string {
  return "IsNodeListeningDevice_args"
}

func (p *IsNodeListeningDeviceArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IsNodeListeningDeviceArgs(%+v)", *p)
}

func (p *IsNodeListeningDeviceArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*IsNodeListeningDeviceArgs)
  if !ok {
    return 0, false
  }
  if p._homeId != data._homeId {
    if p._homeId < data._homeId {
      return -1, true
    }
    return 1, true
  }
  if p._nodeId != data._nodeId {
    if p._nodeId < data._nodeId {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *IsNodeListeningDeviceArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._homeId
  case 2: return p._nodeId
  }
  return nil
}

func (p *IsNodeListeningDeviceArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    })
}

/**
 * Attributes:
 *  - Success
 */
type IsNodeListeningDeviceResult struct {
  thrift.TStruct
  Success bool "success"; // 0
}

func NewIsNodeListeningDeviceResult() *IsNodeListeningDeviceResult {
  output := &IsNodeListeningDeviceResult{
    TStruct:thrift.NewTStruct("IsNodeListeningDevice_result", []thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    }),
  }
  {
  }
  return output
}

func (p *IsNodeListeningDeviceResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *IsNodeListeningDeviceResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1013, err1014 := iprot.ReadBool()
  if err1014 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1014); }
  p.Success = v1013
  return err
}

func (p *IsNodeListeningDeviceResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *IsNodeListeningDeviceResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("IsNodeListeningDevice_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *IsNodeListeningDeviceResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BOOL, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *IsNodeListeningDeviceResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *IsNodeListeningDeviceResult) TStructName() string {
  return "IsNodeListeningDeviceResult"
}

func (p *IsNodeListeningDeviceResult) ThriftName() string {
  return "IsNodeListeningDevice_result"
}

func (p *IsNodeListeningDeviceResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IsNodeListeningDeviceResult(%+v)", *p)
}

func (p *IsNodeListeningDeviceResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*IsNodeListeningDeviceResult)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Success, data.Success); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *IsNodeListeningDeviceResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *IsNodeListeningDeviceResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    })
}

/**
 * Attributes:
 *  - _homeId
 *  - _nodeId
 */
type IsNodeFrequentListeningDeviceArgs struct {
  thrift.TStruct
  _homeId int32 "_homeId"; // 1
  _nodeId byte "_nodeId"; // 2
}

func NewIsNodeFrequentListeningDeviceArgs() *IsNodeFrequentListeningDeviceArgs {
  output := &IsNodeFrequentListeningDeviceArgs{
    TStruct:thrift.NewTStruct("IsNodeFrequentListeningDevice_args", []thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    }),
  }
  {
  }
  return output
}

func (p *IsNodeFrequentListeningDeviceArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_homeId" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_nodeId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *IsNodeFrequentListeningDeviceArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1015, err1016 := iprot.ReadI32()
  if err1016 != nil { return thrift.NewTProtocolExceptionReadField(1, "_homeId", p.ThriftName(), err1016); }
  p._homeId = v1015
  return err
}

func (p *IsNodeFrequentListeningDeviceArgs) ReadField_homeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *IsNodeFrequentListeningDeviceArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1017, err1018 := iprot.ReadByte()
  if err1018 != nil { return thrift.NewTProtocolExceptionReadField(2, "_nodeId", p.ThriftName(), err1018); }
  p._nodeId = v1017
  return err
}

func (p *IsNodeFrequentListeningDeviceArgs) ReadField_nodeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *IsNodeFrequentListeningDeviceArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("IsNodeFrequentListeningDevice_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *IsNodeFrequentListeningDeviceArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_homeId", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._homeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  return err
}

func (p *IsNodeFrequentListeningDeviceArgs) WriteField_homeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *IsNodeFrequentListeningDeviceArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_nodeId", thrift.BYTE, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._nodeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  return err
}

func (p *IsNodeFrequentListeningDeviceArgs) WriteField_nodeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *IsNodeFrequentListeningDeviceArgs) TStructName() string {
  return "IsNodeFrequentListeningDeviceArgs"
}

func (p *IsNodeFrequentListeningDeviceArgs) ThriftName() string {
  return "IsNodeFrequentListeningDevice_args"
}

func (p *IsNodeFrequentListeningDeviceArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IsNodeFrequentListeningDeviceArgs(%+v)", *p)
}

func (p *IsNodeFrequentListeningDeviceArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*IsNodeFrequentListeningDeviceArgs)
  if !ok {
    return 0, false
  }
  if p._homeId != data._homeId {
    if p._homeId < data._homeId {
      return -1, true
    }
    return 1, true
  }
  if p._nodeId != data._nodeId {
    if p._nodeId < data._nodeId {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *IsNodeFrequentListeningDeviceArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._homeId
  case 2: return p._nodeId
  }
  return nil
}

func (p *IsNodeFrequentListeningDeviceArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    })
}

/**
 * Attributes:
 *  - Success
 */
type IsNodeFrequentListeningDeviceResult struct {
  thrift.TStruct
  Success bool "success"; // 0
}

func NewIsNodeFrequentListeningDeviceResult() *IsNodeFrequentListeningDeviceResult {
  output := &IsNodeFrequentListeningDeviceResult{
    TStruct:thrift.NewTStruct("IsNodeFrequentListeningDevice_result", []thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    }),
  }
  {
  }
  return output
}

func (p *IsNodeFrequentListeningDeviceResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *IsNodeFrequentListeningDeviceResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1019, err1020 := iprot.ReadBool()
  if err1020 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1020); }
  p.Success = v1019
  return err
}

func (p *IsNodeFrequentListeningDeviceResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *IsNodeFrequentListeningDeviceResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("IsNodeFrequentListeningDevice_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *IsNodeFrequentListeningDeviceResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BOOL, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *IsNodeFrequentListeningDeviceResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *IsNodeFrequentListeningDeviceResult) TStructName() string {
  return "IsNodeFrequentListeningDeviceResult"
}

func (p *IsNodeFrequentListeningDeviceResult) ThriftName() string {
  return "IsNodeFrequentListeningDevice_result"
}

func (p *IsNodeFrequentListeningDeviceResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IsNodeFrequentListeningDeviceResult(%+v)", *p)
}

func (p *IsNodeFrequentListeningDeviceResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*IsNodeFrequentListeningDeviceResult)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Success, data.Success); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *IsNodeFrequentListeningDeviceResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *IsNodeFrequentListeningDeviceResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    })
}

/**
 * Attributes:
 *  - _homeId
 *  - _nodeId
 */
type IsNodeBeamingDeviceArgs struct {
  thrift.TStruct
  _homeId int32 "_homeId"; // 1
  _nodeId byte "_nodeId"; // 2
}

func NewIsNodeBeamingDeviceArgs() *IsNodeBeamingDeviceArgs {
  output := &IsNodeBeamingDeviceArgs{
    TStruct:thrift.NewTStruct("IsNodeBeamingDevice_args", []thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    }),
  }
  {
  }
  return output
}

func (p *IsNodeBeamingDeviceArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_homeId" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_nodeId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *IsNodeBeamingDeviceArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1021, err1022 := iprot.ReadI32()
  if err1022 != nil { return thrift.NewTProtocolExceptionReadField(1, "_homeId", p.ThriftName(), err1022); }
  p._homeId = v1021
  return err
}

func (p *IsNodeBeamingDeviceArgs) ReadField_homeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *IsNodeBeamingDeviceArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1023, err1024 := iprot.ReadByte()
  if err1024 != nil { return thrift.NewTProtocolExceptionReadField(2, "_nodeId", p.ThriftName(), err1024); }
  p._nodeId = v1023
  return err
}

func (p *IsNodeBeamingDeviceArgs) ReadField_nodeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *IsNodeBeamingDeviceArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("IsNodeBeamingDevice_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *IsNodeBeamingDeviceArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_homeId", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._homeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  return err
}

func (p *IsNodeBeamingDeviceArgs) WriteField_homeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *IsNodeBeamingDeviceArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_nodeId", thrift.BYTE, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._nodeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  return err
}

func (p *IsNodeBeamingDeviceArgs) WriteField_nodeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *IsNodeBeamingDeviceArgs) TStructName() string {
  return "IsNodeBeamingDeviceArgs"
}

func (p *IsNodeBeamingDeviceArgs) ThriftName() string {
  return "IsNodeBeamingDevice_args"
}

func (p *IsNodeBeamingDeviceArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IsNodeBeamingDeviceArgs(%+v)", *p)
}

func (p *IsNodeBeamingDeviceArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*IsNodeBeamingDeviceArgs)
  if !ok {
    return 0, false
  }
  if p._homeId != data._homeId {
    if p._homeId < data._homeId {
      return -1, true
    }
    return 1, true
  }
  if p._nodeId != data._nodeId {
    if p._nodeId < data._nodeId {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *IsNodeBeamingDeviceArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._homeId
  case 2: return p._nodeId
  }
  return nil
}

func (p *IsNodeBeamingDeviceArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    })
}

/**
 * Attributes:
 *  - Success
 */
type IsNodeBeamingDeviceResult struct {
  thrift.TStruct
  Success bool "success"; // 0
}

func NewIsNodeBeamingDeviceResult() *IsNodeBeamingDeviceResult {
  output := &IsNodeBeamingDeviceResult{
    TStruct:thrift.NewTStruct("IsNodeBeamingDevice_result", []thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    }),
  }
  {
  }
  return output
}

func (p *IsNodeBeamingDeviceResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *IsNodeBeamingDeviceResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1025, err1026 := iprot.ReadBool()
  if err1026 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1026); }
  p.Success = v1025
  return err
}

func (p *IsNodeBeamingDeviceResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *IsNodeBeamingDeviceResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("IsNodeBeamingDevice_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *IsNodeBeamingDeviceResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BOOL, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *IsNodeBeamingDeviceResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *IsNodeBeamingDeviceResult) TStructName() string {
  return "IsNodeBeamingDeviceResult"
}

func (p *IsNodeBeamingDeviceResult) ThriftName() string {
  return "IsNodeBeamingDevice_result"
}

func (p *IsNodeBeamingDeviceResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IsNodeBeamingDeviceResult(%+v)", *p)
}

func (p *IsNodeBeamingDeviceResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*IsNodeBeamingDeviceResult)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Success, data.Success); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *IsNodeBeamingDeviceResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *IsNodeBeamingDeviceResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    })
}

/**
 * Attributes:
 *  - _homeId
 *  - _nodeId
 */
type IsNodeRoutingDeviceArgs struct {
  thrift.TStruct
  _homeId int32 "_homeId"; // 1
  _nodeId byte "_nodeId"; // 2
}

func NewIsNodeRoutingDeviceArgs() *IsNodeRoutingDeviceArgs {
  output := &IsNodeRoutingDeviceArgs{
    TStruct:thrift.NewTStruct("IsNodeRoutingDevice_args", []thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    }),
  }
  {
  }
  return output
}

func (p *IsNodeRoutingDeviceArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_homeId" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_nodeId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *IsNodeRoutingDeviceArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1027, err1028 := iprot.ReadI32()
  if err1028 != nil { return thrift.NewTProtocolExceptionReadField(1, "_homeId", p.ThriftName(), err1028); }
  p._homeId = v1027
  return err
}

func (p *IsNodeRoutingDeviceArgs) ReadField_homeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *IsNodeRoutingDeviceArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1029, err1030 := iprot.ReadByte()
  if err1030 != nil { return thrift.NewTProtocolExceptionReadField(2, "_nodeId", p.ThriftName(), err1030); }
  p._nodeId = v1029
  return err
}

func (p *IsNodeRoutingDeviceArgs) ReadField_nodeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *IsNodeRoutingDeviceArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("IsNodeRoutingDevice_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *IsNodeRoutingDeviceArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_homeId", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._homeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  return err
}

func (p *IsNodeRoutingDeviceArgs) WriteField_homeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *IsNodeRoutingDeviceArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_nodeId", thrift.BYTE, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._nodeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  return err
}

func (p *IsNodeRoutingDeviceArgs) WriteField_nodeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *IsNodeRoutingDeviceArgs) TStructName() string {
  return "IsNodeRoutingDeviceArgs"
}

func (p *IsNodeRoutingDeviceArgs) ThriftName() string {
  return "IsNodeRoutingDevice_args"
}

func (p *IsNodeRoutingDeviceArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IsNodeRoutingDeviceArgs(%+v)", *p)
}

func (p *IsNodeRoutingDeviceArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*IsNodeRoutingDeviceArgs)
  if !ok {
    return 0, false
  }
  if p._homeId != data._homeId {
    if p._homeId < data._homeId {
      return -1, true
    }
    return 1, true
  }
  if p._nodeId != data._nodeId {
    if p._nodeId < data._nodeId {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *IsNodeRoutingDeviceArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._homeId
  case 2: return p._nodeId
  }
  return nil
}

func (p *IsNodeRoutingDeviceArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    })
}

/**
 * Attributes:
 *  - Success
 */
type IsNodeRoutingDeviceResult struct {
  thrift.TStruct
  Success bool "success"; // 0
}

func NewIsNodeRoutingDeviceResult() *IsNodeRoutingDeviceResult {
  output := &IsNodeRoutingDeviceResult{
    TStruct:thrift.NewTStruct("IsNodeRoutingDevice_result", []thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    }),
  }
  {
  }
  return output
}

func (p *IsNodeRoutingDeviceResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *IsNodeRoutingDeviceResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1031, err1032 := iprot.ReadBool()
  if err1032 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1032); }
  p.Success = v1031
  return err
}

func (p *IsNodeRoutingDeviceResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *IsNodeRoutingDeviceResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("IsNodeRoutingDevice_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *IsNodeRoutingDeviceResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BOOL, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *IsNodeRoutingDeviceResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *IsNodeRoutingDeviceResult) TStructName() string {
  return "IsNodeRoutingDeviceResult"
}

func (p *IsNodeRoutingDeviceResult) ThriftName() string {
  return "IsNodeRoutingDevice_result"
}

func (p *IsNodeRoutingDeviceResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IsNodeRoutingDeviceResult(%+v)", *p)
}

func (p *IsNodeRoutingDeviceResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*IsNodeRoutingDeviceResult)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Success, data.Success); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *IsNodeRoutingDeviceResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *IsNodeRoutingDeviceResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    })
}

/**
 * Attributes:
 *  - _homeId
 *  - _nodeId
 */
type IsNodeSecurityDeviceArgs struct {
  thrift.TStruct
  _homeId int32 "_homeId"; // 1
  _nodeId byte "_nodeId"; // 2
}

func NewIsNodeSecurityDeviceArgs() *IsNodeSecurityDeviceArgs {
  output := &IsNodeSecurityDeviceArgs{
    TStruct:thrift.NewTStruct("IsNodeSecurityDevice_args", []thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    }),
  }
  {
  }
  return output
}

func (p *IsNodeSecurityDeviceArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_homeId" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_nodeId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *IsNodeSecurityDeviceArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1033, err1034 := iprot.ReadI32()
  if err1034 != nil { return thrift.NewTProtocolExceptionReadField(1, "_homeId", p.ThriftName(), err1034); }
  p._homeId = v1033
  return err
}

func (p *IsNodeSecurityDeviceArgs) ReadField_homeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *IsNodeSecurityDeviceArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1035, err1036 := iprot.ReadByte()
  if err1036 != nil { return thrift.NewTProtocolExceptionReadField(2, "_nodeId", p.ThriftName(), err1036); }
  p._nodeId = v1035
  return err
}

func (p *IsNodeSecurityDeviceArgs) ReadField_nodeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *IsNodeSecurityDeviceArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("IsNodeSecurityDevice_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *IsNodeSecurityDeviceArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_homeId", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._homeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  return err
}

func (p *IsNodeSecurityDeviceArgs) WriteField_homeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *IsNodeSecurityDeviceArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_nodeId", thrift.BYTE, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._nodeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  return err
}

func (p *IsNodeSecurityDeviceArgs) WriteField_nodeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *IsNodeSecurityDeviceArgs) TStructName() string {
  return "IsNodeSecurityDeviceArgs"
}

func (p *IsNodeSecurityDeviceArgs) ThriftName() string {
  return "IsNodeSecurityDevice_args"
}

func (p *IsNodeSecurityDeviceArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IsNodeSecurityDeviceArgs(%+v)", *p)
}

func (p *IsNodeSecurityDeviceArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*IsNodeSecurityDeviceArgs)
  if !ok {
    return 0, false
  }
  if p._homeId != data._homeId {
    if p._homeId < data._homeId {
      return -1, true
    }
    return 1, true
  }
  if p._nodeId != data._nodeId {
    if p._nodeId < data._nodeId {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *IsNodeSecurityDeviceArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._homeId
  case 2: return p._nodeId
  }
  return nil
}

func (p *IsNodeSecurityDeviceArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    })
}

/**
 * Attributes:
 *  - Success
 */
type IsNodeSecurityDeviceResult struct {
  thrift.TStruct
  Success bool "success"; // 0
}

func NewIsNodeSecurityDeviceResult() *IsNodeSecurityDeviceResult {
  output := &IsNodeSecurityDeviceResult{
    TStruct:thrift.NewTStruct("IsNodeSecurityDevice_result", []thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    }),
  }
  {
  }
  return output
}

func (p *IsNodeSecurityDeviceResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *IsNodeSecurityDeviceResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1037, err1038 := iprot.ReadBool()
  if err1038 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1038); }
  p.Success = v1037
  return err
}

func (p *IsNodeSecurityDeviceResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *IsNodeSecurityDeviceResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("IsNodeSecurityDevice_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *IsNodeSecurityDeviceResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BOOL, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *IsNodeSecurityDeviceResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *IsNodeSecurityDeviceResult) TStructName() string {
  return "IsNodeSecurityDeviceResult"
}

func (p *IsNodeSecurityDeviceResult) ThriftName() string {
  return "IsNodeSecurityDevice_result"
}

func (p *IsNodeSecurityDeviceResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IsNodeSecurityDeviceResult(%+v)", *p)
}

func (p *IsNodeSecurityDeviceResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*IsNodeSecurityDeviceResult)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Success, data.Success); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *IsNodeSecurityDeviceResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *IsNodeSecurityDeviceResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    })
}

/**
 * Attributes:
 *  - _homeId
 *  - _nodeId
 */
type GetNodeMaxBaudRateArgs struct {
  thrift.TStruct
  _homeId int32 "_homeId"; // 1
  _nodeId byte "_nodeId"; // 2
}

func NewGetNodeMaxBaudRateArgs() *GetNodeMaxBaudRateArgs {
  output := &GetNodeMaxBaudRateArgs{
    TStruct:thrift.NewTStruct("GetNodeMaxBaudRate_args", []thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    }),
  }
  {
  }
  return output
}

func (p *GetNodeMaxBaudRateArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_homeId" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_nodeId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNodeMaxBaudRateArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1039, err1040 := iprot.ReadI32()
  if err1040 != nil { return thrift.NewTProtocolExceptionReadField(1, "_homeId", p.ThriftName(), err1040); }
  p._homeId = v1039
  return err
}

func (p *GetNodeMaxBaudRateArgs) ReadField_homeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetNodeMaxBaudRateArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1041, err1042 := iprot.ReadByte()
  if err1042 != nil { return thrift.NewTProtocolExceptionReadField(2, "_nodeId", p.ThriftName(), err1042); }
  p._nodeId = v1041
  return err
}

func (p *GetNodeMaxBaudRateArgs) ReadField_nodeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *GetNodeMaxBaudRateArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetNodeMaxBaudRate_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNodeMaxBaudRateArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_homeId", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._homeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  return err
}

func (p *GetNodeMaxBaudRateArgs) WriteField_homeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetNodeMaxBaudRateArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_nodeId", thrift.BYTE, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._nodeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  return err
}

func (p *GetNodeMaxBaudRateArgs) WriteField_nodeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *GetNodeMaxBaudRateArgs) TStructName() string {
  return "GetNodeMaxBaudRateArgs"
}

func (p *GetNodeMaxBaudRateArgs) ThriftName() string {
  return "GetNodeMaxBaudRate_args"
}

func (p *GetNodeMaxBaudRateArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetNodeMaxBaudRateArgs(%+v)", *p)
}

func (p *GetNodeMaxBaudRateArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetNodeMaxBaudRateArgs)
  if !ok {
    return 0, false
  }
  if p._homeId != data._homeId {
    if p._homeId < data._homeId {
      return -1, true
    }
    return 1, true
  }
  if p._nodeId != data._nodeId {
    if p._nodeId < data._nodeId {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetNodeMaxBaudRateArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._homeId
  case 2: return p._nodeId
  }
  return nil
}

func (p *GetNodeMaxBaudRateArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    })
}

/**
 * Attributes:
 *  - Success
 */
type GetNodeMaxBaudRateResult struct {
  thrift.TStruct
  Success int32 "success"; // 0
}

func NewGetNodeMaxBaudRateResult() *GetNodeMaxBaudRateResult {
  output := &GetNodeMaxBaudRateResult{
    TStruct:thrift.NewTStruct("GetNodeMaxBaudRate_result", []thrift.TField{
    thrift.NewTField("success", thrift.I32, 0),
    }),
  }
  {
  }
  return output
}

func (p *GetNodeMaxBaudRateResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNodeMaxBaudRateResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1043, err1044 := iprot.ReadI32()
  if err1044 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1044); }
  p.Success = v1043
  return err
}

func (p *GetNodeMaxBaudRateResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetNodeMaxBaudRateResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetNodeMaxBaudRate_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNodeMaxBaudRateResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.I32, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *GetNodeMaxBaudRateResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetNodeMaxBaudRateResult) TStructName() string {
  return "GetNodeMaxBaudRateResult"
}

func (p *GetNodeMaxBaudRateResult) ThriftName() string {
  return "GetNodeMaxBaudRate_result"
}

func (p *GetNodeMaxBaudRateResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetNodeMaxBaudRateResult(%+v)", *p)
}

func (p *GetNodeMaxBaudRateResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetNodeMaxBaudRateResult)
  if !ok {
    return 0, false
  }
  if p.Success != data.Success {
    if p.Success < data.Success {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetNodeMaxBaudRateResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *GetNodeMaxBaudRateResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.I32, 0),
    })
}

/**
 * Attributes:
 *  - _homeId
 *  - _nodeId
 */
type GetNodeVersionArgs struct {
  thrift.TStruct
  _homeId int32 "_homeId"; // 1
  _nodeId byte "_nodeId"; // 2
}

func NewGetNodeVersionArgs() *GetNodeVersionArgs {
  output := &GetNodeVersionArgs{
    TStruct:thrift.NewTStruct("GetNodeVersion_args", []thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    }),
  }
  {
  }
  return output
}

func (p *GetNodeVersionArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_homeId" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_nodeId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNodeVersionArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1045, err1046 := iprot.ReadI32()
  if err1046 != nil { return thrift.NewTProtocolExceptionReadField(1, "_homeId", p.ThriftName(), err1046); }
  p._homeId = v1045
  return err
}

func (p *GetNodeVersionArgs) ReadField_homeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetNodeVersionArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1047, err1048 := iprot.ReadByte()
  if err1048 != nil { return thrift.NewTProtocolExceptionReadField(2, "_nodeId", p.ThriftName(), err1048); }
  p._nodeId = v1047
  return err
}

func (p *GetNodeVersionArgs) ReadField_nodeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *GetNodeVersionArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetNodeVersion_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNodeVersionArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_homeId", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._homeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  return err
}

func (p *GetNodeVersionArgs) WriteField_homeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetNodeVersionArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_nodeId", thrift.BYTE, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._nodeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  return err
}

func (p *GetNodeVersionArgs) WriteField_nodeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *GetNodeVersionArgs) TStructName() string {
  return "GetNodeVersionArgs"
}

func (p *GetNodeVersionArgs) ThriftName() string {
  return "GetNodeVersion_args"
}

func (p *GetNodeVersionArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetNodeVersionArgs(%+v)", *p)
}

func (p *GetNodeVersionArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetNodeVersionArgs)
  if !ok {
    return 0, false
  }
  if p._homeId != data._homeId {
    if p._homeId < data._homeId {
      return -1, true
    }
    return 1, true
  }
  if p._nodeId != data._nodeId {
    if p._nodeId < data._nodeId {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetNodeVersionArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._homeId
  case 2: return p._nodeId
  }
  return nil
}

func (p *GetNodeVersionArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    })
}

/**
 * Attributes:
 *  - Success
 */
type GetNodeVersionResult struct {
  thrift.TStruct
  Success byte "success"; // 0
}

func NewGetNodeVersionResult() *GetNodeVersionResult {
  output := &GetNodeVersionResult{
    TStruct:thrift.NewTStruct("GetNodeVersion_result", []thrift.TField{
    thrift.NewTField("success", thrift.BYTE, 0),
    }),
  }
  {
  }
  return output
}

func (p *GetNodeVersionResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNodeVersionResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1049, err1050 := iprot.ReadByte()
  if err1050 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1050); }
  p.Success = v1049
  return err
}

func (p *GetNodeVersionResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetNodeVersionResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetNodeVersion_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNodeVersionResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BYTE, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *GetNodeVersionResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetNodeVersionResult) TStructName() string {
  return "GetNodeVersionResult"
}

func (p *GetNodeVersionResult) ThriftName() string {
  return "GetNodeVersion_result"
}

func (p *GetNodeVersionResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetNodeVersionResult(%+v)", *p)
}

func (p *GetNodeVersionResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetNodeVersionResult)
  if !ok {
    return 0, false
  }
  if p.Success != data.Success {
    if p.Success < data.Success {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetNodeVersionResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *GetNodeVersionResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BYTE, 0),
    })
}

/**
 * Attributes:
 *  - _homeId
 *  - _nodeId
 */
type GetNodeBasicArgs struct {
  thrift.TStruct
  _homeId int32 "_homeId"; // 1
  _nodeId byte "_nodeId"; // 2
}

func NewGetNodeBasicArgs() *GetNodeBasicArgs {
  output := &GetNodeBasicArgs{
    TStruct:thrift.NewTStruct("GetNodeBasic_args", []thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    }),
  }
  {
  }
  return output
}

func (p *GetNodeBasicArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_homeId" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_nodeId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNodeBasicArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1051, err1052 := iprot.ReadI32()
  if err1052 != nil { return thrift.NewTProtocolExceptionReadField(1, "_homeId", p.ThriftName(), err1052); }
  p._homeId = v1051
  return err
}

func (p *GetNodeBasicArgs) ReadField_homeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetNodeBasicArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1053, err1054 := iprot.ReadByte()
  if err1054 != nil { return thrift.NewTProtocolExceptionReadField(2, "_nodeId", p.ThriftName(), err1054); }
  p._nodeId = v1053
  return err
}

func (p *GetNodeBasicArgs) ReadField_nodeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *GetNodeBasicArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetNodeBasic_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNodeBasicArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_homeId", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._homeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  return err
}

func (p *GetNodeBasicArgs) WriteField_homeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetNodeBasicArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_nodeId", thrift.BYTE, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._nodeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  return err
}

func (p *GetNodeBasicArgs) WriteField_nodeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *GetNodeBasicArgs) TStructName() string {
  return "GetNodeBasicArgs"
}

func (p *GetNodeBasicArgs) ThriftName() string {
  return "GetNodeBasic_args"
}

func (p *GetNodeBasicArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetNodeBasicArgs(%+v)", *p)
}

func (p *GetNodeBasicArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetNodeBasicArgs)
  if !ok {
    return 0, false
  }
  if p._homeId != data._homeId {
    if p._homeId < data._homeId {
      return -1, true
    }
    return 1, true
  }
  if p._nodeId != data._nodeId {
    if p._nodeId < data._nodeId {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetNodeBasicArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._homeId
  case 2: return p._nodeId
  }
  return nil
}

func (p *GetNodeBasicArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    })
}

/**
 * Attributes:
 *  - Success
 */
type GetNodeBasicResult struct {
  thrift.TStruct
  Success byte "success"; // 0
}

func NewGetNodeBasicResult() *GetNodeBasicResult {
  output := &GetNodeBasicResult{
    TStruct:thrift.NewTStruct("GetNodeBasic_result", []thrift.TField{
    thrift.NewTField("success", thrift.BYTE, 0),
    }),
  }
  {
  }
  return output
}

func (p *GetNodeBasicResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNodeBasicResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1055, err1056 := iprot.ReadByte()
  if err1056 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1056); }
  p.Success = v1055
  return err
}

func (p *GetNodeBasicResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetNodeBasicResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetNodeBasic_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNodeBasicResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BYTE, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *GetNodeBasicResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetNodeBasicResult) TStructName() string {
  return "GetNodeBasicResult"
}

func (p *GetNodeBasicResult) ThriftName() string {
  return "GetNodeBasic_result"
}

func (p *GetNodeBasicResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetNodeBasicResult(%+v)", *p)
}

func (p *GetNodeBasicResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetNodeBasicResult)
  if !ok {
    return 0, false
  }
  if p.Success != data.Success {
    if p.Success < data.Success {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetNodeBasicResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *GetNodeBasicResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BYTE, 0),
    })
}

/**
 * Attributes:
 *  - _homeId
 *  - _nodeId
 */
type GetNodeGenericArgs struct {
  thrift.TStruct
  _homeId int32 "_homeId"; // 1
  _nodeId byte "_nodeId"; // 2
}

func NewGetNodeGenericArgs() *GetNodeGenericArgs {
  output := &GetNodeGenericArgs{
    TStruct:thrift.NewTStruct("GetNodeGeneric_args", []thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    }),
  }
  {
  }
  return output
}

func (p *GetNodeGenericArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_homeId" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_nodeId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNodeGenericArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1057, err1058 := iprot.ReadI32()
  if err1058 != nil { return thrift.NewTProtocolExceptionReadField(1, "_homeId", p.ThriftName(), err1058); }
  p._homeId = v1057
  return err
}

func (p *GetNodeGenericArgs) ReadField_homeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetNodeGenericArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1059, err1060 := iprot.ReadByte()
  if err1060 != nil { return thrift.NewTProtocolExceptionReadField(2, "_nodeId", p.ThriftName(), err1060); }
  p._nodeId = v1059
  return err
}

func (p *GetNodeGenericArgs) ReadField_nodeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *GetNodeGenericArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetNodeGeneric_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNodeGenericArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_homeId", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._homeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  return err
}

func (p *GetNodeGenericArgs) WriteField_homeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetNodeGenericArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_nodeId", thrift.BYTE, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._nodeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  return err
}

func (p *GetNodeGenericArgs) WriteField_nodeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *GetNodeGenericArgs) TStructName() string {
  return "GetNodeGenericArgs"
}

func (p *GetNodeGenericArgs) ThriftName() string {
  return "GetNodeGeneric_args"
}

func (p *GetNodeGenericArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetNodeGenericArgs(%+v)", *p)
}

func (p *GetNodeGenericArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetNodeGenericArgs)
  if !ok {
    return 0, false
  }
  if p._homeId != data._homeId {
    if p._homeId < data._homeId {
      return -1, true
    }
    return 1, true
  }
  if p._nodeId != data._nodeId {
    if p._nodeId < data._nodeId {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetNodeGenericArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._homeId
  case 2: return p._nodeId
  }
  return nil
}

func (p *GetNodeGenericArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    })
}

/**
 * Attributes:
 *  - Success
 */
type GetNodeGenericResult struct {
  thrift.TStruct
  Success byte "success"; // 0
}

func NewGetNodeGenericResult() *GetNodeGenericResult {
  output := &GetNodeGenericResult{
    TStruct:thrift.NewTStruct("GetNodeGeneric_result", []thrift.TField{
    thrift.NewTField("success", thrift.BYTE, 0),
    }),
  }
  {
  }
  return output
}

func (p *GetNodeGenericResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNodeGenericResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1061, err1062 := iprot.ReadByte()
  if err1062 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1062); }
  p.Success = v1061
  return err
}

func (p *GetNodeGenericResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetNodeGenericResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetNodeGeneric_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNodeGenericResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BYTE, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *GetNodeGenericResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetNodeGenericResult) TStructName() string {
  return "GetNodeGenericResult"
}

func (p *GetNodeGenericResult) ThriftName() string {
  return "GetNodeGeneric_result"
}

func (p *GetNodeGenericResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetNodeGenericResult(%+v)", *p)
}

func (p *GetNodeGenericResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetNodeGenericResult)
  if !ok {
    return 0, false
  }
  if p.Success != data.Success {
    if p.Success < data.Success {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetNodeGenericResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *GetNodeGenericResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BYTE, 0),
    })
}

/**
 * Attributes:
 *  - _homeId
 *  - _nodeId
 */
type GetNodeSpecificArgs struct {
  thrift.TStruct
  _homeId int32 "_homeId"; // 1
  _nodeId byte "_nodeId"; // 2
}

func NewGetNodeSpecificArgs() *GetNodeSpecificArgs {
  output := &GetNodeSpecificArgs{
    TStruct:thrift.NewTStruct("GetNodeSpecific_args", []thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    }),
  }
  {
  }
  return output
}

func (p *GetNodeSpecificArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_homeId" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_nodeId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNodeSpecificArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1063, err1064 := iprot.ReadI32()
  if err1064 != nil { return thrift.NewTProtocolExceptionReadField(1, "_homeId", p.ThriftName(), err1064); }
  p._homeId = v1063
  return err
}

func (p *GetNodeSpecificArgs) ReadField_homeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetNodeSpecificArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1065, err1066 := iprot.ReadByte()
  if err1066 != nil { return thrift.NewTProtocolExceptionReadField(2, "_nodeId", p.ThriftName(), err1066); }
  p._nodeId = v1065
  return err
}

func (p *GetNodeSpecificArgs) ReadField_nodeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *GetNodeSpecificArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetNodeSpecific_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNodeSpecificArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_homeId", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._homeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  return err
}

func (p *GetNodeSpecificArgs) WriteField_homeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetNodeSpecificArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_nodeId", thrift.BYTE, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._nodeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  return err
}

func (p *GetNodeSpecificArgs) WriteField_nodeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *GetNodeSpecificArgs) TStructName() string {
  return "GetNodeSpecificArgs"
}

func (p *GetNodeSpecificArgs) ThriftName() string {
  return "GetNodeSpecific_args"
}

func (p *GetNodeSpecificArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetNodeSpecificArgs(%+v)", *p)
}

func (p *GetNodeSpecificArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetNodeSpecificArgs)
  if !ok {
    return 0, false
  }
  if p._homeId != data._homeId {
    if p._homeId < data._homeId {
      return -1, true
    }
    return 1, true
  }
  if p._nodeId != data._nodeId {
    if p._nodeId < data._nodeId {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetNodeSpecificArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._homeId
  case 2: return p._nodeId
  }
  return nil
}

func (p *GetNodeSpecificArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    })
}

/**
 * Attributes:
 *  - Success
 */
type GetNodeSpecificResult struct {
  thrift.TStruct
  Success byte "success"; // 0
}

func NewGetNodeSpecificResult() *GetNodeSpecificResult {
  output := &GetNodeSpecificResult{
    TStruct:thrift.NewTStruct("GetNodeSpecific_result", []thrift.TField{
    thrift.NewTField("success", thrift.BYTE, 0),
    }),
  }
  {
  }
  return output
}

func (p *GetNodeSpecificResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNodeSpecificResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1067, err1068 := iprot.ReadByte()
  if err1068 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1068); }
  p.Success = v1067
  return err
}

func (p *GetNodeSpecificResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetNodeSpecificResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetNodeSpecific_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNodeSpecificResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BYTE, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *GetNodeSpecificResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetNodeSpecificResult) TStructName() string {
  return "GetNodeSpecificResult"
}

func (p *GetNodeSpecificResult) ThriftName() string {
  return "GetNodeSpecific_result"
}

func (p *GetNodeSpecificResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetNodeSpecificResult(%+v)", *p)
}

func (p *GetNodeSpecificResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetNodeSpecificResult)
  if !ok {
    return 0, false
  }
  if p.Success != data.Success {
    if p.Success < data.Success {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetNodeSpecificResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *GetNodeSpecificResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BYTE, 0),
    })
}

/**
 * Attributes:
 *  - _homeId
 *  - _nodeId
 */
type GetNodeTypeArgs struct {
  thrift.TStruct
  _homeId int32 "_homeId"; // 1
  _nodeId byte "_nodeId"; // 2
}

func NewGetNodeTypeArgs() *GetNodeTypeArgs {
  output := &GetNodeTypeArgs{
    TStruct:thrift.NewTStruct("GetNodeType_args", []thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    }),
  }
  {
  }
  return output
}

func (p *GetNodeTypeArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_homeId" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_nodeId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNodeTypeArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1069, err1070 := iprot.ReadI32()
  if err1070 != nil { return thrift.NewTProtocolExceptionReadField(1, "_homeId", p.ThriftName(), err1070); }
  p._homeId = v1069
  return err
}

func (p *GetNodeTypeArgs) ReadField_homeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetNodeTypeArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1071, err1072 := iprot.ReadByte()
  if err1072 != nil { return thrift.NewTProtocolExceptionReadField(2, "_nodeId", p.ThriftName(), err1072); }
  p._nodeId = v1071
  return err
}

func (p *GetNodeTypeArgs) ReadField_nodeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *GetNodeTypeArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetNodeType_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNodeTypeArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_homeId", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._homeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  return err
}

func (p *GetNodeTypeArgs) WriteField_homeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetNodeTypeArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_nodeId", thrift.BYTE, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._nodeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  return err
}

func (p *GetNodeTypeArgs) WriteField_nodeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *GetNodeTypeArgs) TStructName() string {
  return "GetNodeTypeArgs"
}

func (p *GetNodeTypeArgs) ThriftName() string {
  return "GetNodeType_args"
}

func (p *GetNodeTypeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetNodeTypeArgs(%+v)", *p)
}

func (p *GetNodeTypeArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetNodeTypeArgs)
  if !ok {
    return 0, false
  }
  if p._homeId != data._homeId {
    if p._homeId < data._homeId {
      return -1, true
    }
    return 1, true
  }
  if p._nodeId != data._nodeId {
    if p._nodeId < data._nodeId {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetNodeTypeArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._homeId
  case 2: return p._nodeId
  }
  return nil
}

func (p *GetNodeTypeArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    })
}

/**
 * Attributes:
 *  - Success
 */
type GetNodeTypeResult struct {
  thrift.TStruct
  Success string "success"; // 0
}

func NewGetNodeTypeResult() *GetNodeTypeResult {
  output := &GetNodeTypeResult{
    TStruct:thrift.NewTStruct("GetNodeType_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRING, 0),
    }),
  }
  {
  }
  return output
}

func (p *GetNodeTypeResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNodeTypeResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1073, err1074 := iprot.ReadString()
  if err1074 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1074); }
  p.Success = v1073
  return err
}

func (p *GetNodeTypeResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetNodeTypeResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetNodeType_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNodeTypeResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.STRING, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *GetNodeTypeResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetNodeTypeResult) TStructName() string {
  return "GetNodeTypeResult"
}

func (p *GetNodeTypeResult) ThriftName() string {
  return "GetNodeType_result"
}

func (p *GetNodeTypeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetNodeTypeResult(%+v)", *p)
}

func (p *GetNodeTypeResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetNodeTypeResult)
  if !ok {
    return 0, false
  }
  if p.Success != data.Success {
    if p.Success < data.Success {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetNodeTypeResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *GetNodeTypeResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRING, 0),
    })
}

/**
 * Attributes:
 *  - _homeId
 *  - _nodeId
 */
type GetNodeNeighborsArgs struct {
  thrift.TStruct
  _homeId int32 "_homeId"; // 1
  _nodeId byte "_nodeId"; // 2
}

func NewGetNodeNeighborsArgs() *GetNodeNeighborsArgs {
  output := &GetNodeNeighborsArgs{
    TStruct:thrift.NewTStruct("GetNodeNeighbors_args", []thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    }),
  }
  {
  }
  return output
}

func (p *GetNodeNeighborsArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_homeId" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_nodeId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNodeNeighborsArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1075, err1076 := iprot.ReadI32()
  if err1076 != nil { return thrift.NewTProtocolExceptionReadField(1, "_homeId", p.ThriftName(), err1076); }
  p._homeId = v1075
  return err
}

func (p *GetNodeNeighborsArgs) ReadField_homeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetNodeNeighborsArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1077, err1078 := iprot.ReadByte()
  if err1078 != nil { return thrift.NewTProtocolExceptionReadField(2, "_nodeId", p.ThriftName(), err1078); }
  p._nodeId = v1077
  return err
}

func (p *GetNodeNeighborsArgs) ReadField_nodeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *GetNodeNeighborsArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetNodeNeighbors_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNodeNeighborsArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_homeId", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._homeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  return err
}

func (p *GetNodeNeighborsArgs) WriteField_homeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetNodeNeighborsArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_nodeId", thrift.BYTE, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._nodeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  return err
}

func (p *GetNodeNeighborsArgs) WriteField_nodeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *GetNodeNeighborsArgs) TStructName() string {
  return "GetNodeNeighborsArgs"
}

func (p *GetNodeNeighborsArgs) ThriftName() string {
  return "GetNodeNeighbors_args"
}

func (p *GetNodeNeighborsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetNodeNeighborsArgs(%+v)", *p)
}

func (p *GetNodeNeighborsArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetNodeNeighborsArgs)
  if !ok {
    return 0, false
  }
  if p._homeId != data._homeId {
    if p._homeId < data._homeId {
      return -1, true
    }
    return 1, true
  }
  if p._nodeId != data._nodeId {
    if p._nodeId < data._nodeId {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetNodeNeighborsArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._homeId
  case 2: return p._nodeId
  }
  return nil
}

func (p *GetNodeNeighborsArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    })
}

/**
 * Attributes:
 *  - Success
 */
type GetNodeNeighborsResult struct {
  thrift.TStruct
  Success *UInt32ListByte "success"; // 0
}

func NewGetNodeNeighborsResult() *GetNodeNeighborsResult {
  output := &GetNodeNeighborsResult{
    TStruct:thrift.NewTStruct("GetNodeNeighbors_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    }),
  }
  {
  }
  return output
}

func (p *GetNodeNeighborsResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNodeNeighborsResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Success = NewUInt32ListByte()
  err1081 := p.Success.Read(iprot)
  if err1081 != nil { return thrift.NewTProtocolExceptionReadStruct("p.SuccessUInt32_ListByte", err1081); }
  return err
}

func (p *GetNodeNeighborsResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetNodeNeighborsResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetNodeNeighbors_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNodeNeighborsResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = p.Success.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("UInt32_ListByte", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *GetNodeNeighborsResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetNodeNeighborsResult) TStructName() string {
  return "GetNodeNeighborsResult"
}

func (p *GetNodeNeighborsResult) ThriftName() string {
  return "GetNodeNeighbors_result"
}

func (p *GetNodeNeighborsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetNodeNeighborsResult(%+v)", *p)
}

func (p *GetNodeNeighborsResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetNodeNeighborsResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetNodeNeighborsResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *GetNodeNeighborsResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    })
}

/**
 * Attributes:
 *  - _homeId
 *  - _nodeId
 */
type GetNodeManufacturerNameArgs struct {
  thrift.TStruct
  _homeId int32 "_homeId"; // 1
  _nodeId byte "_nodeId"; // 2
}

func NewGetNodeManufacturerNameArgs() *GetNodeManufacturerNameArgs {
  output := &GetNodeManufacturerNameArgs{
    TStruct:thrift.NewTStruct("GetNodeManufacturerName_args", []thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    }),
  }
  {
  }
  return output
}

func (p *GetNodeManufacturerNameArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_homeId" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_nodeId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNodeManufacturerNameArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1082, err1083 := iprot.ReadI32()
  if err1083 != nil { return thrift.NewTProtocolExceptionReadField(1, "_homeId", p.ThriftName(), err1083); }
  p._homeId = v1082
  return err
}

func (p *GetNodeManufacturerNameArgs) ReadField_homeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetNodeManufacturerNameArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1084, err1085 := iprot.ReadByte()
  if err1085 != nil { return thrift.NewTProtocolExceptionReadField(2, "_nodeId", p.ThriftName(), err1085); }
  p._nodeId = v1084
  return err
}

func (p *GetNodeManufacturerNameArgs) ReadField_nodeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *GetNodeManufacturerNameArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetNodeManufacturerName_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNodeManufacturerNameArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_homeId", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._homeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  return err
}

func (p *GetNodeManufacturerNameArgs) WriteField_homeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetNodeManufacturerNameArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_nodeId", thrift.BYTE, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._nodeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  return err
}

func (p *GetNodeManufacturerNameArgs) WriteField_nodeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *GetNodeManufacturerNameArgs) TStructName() string {
  return "GetNodeManufacturerNameArgs"
}

func (p *GetNodeManufacturerNameArgs) ThriftName() string {
  return "GetNodeManufacturerName_args"
}

func (p *GetNodeManufacturerNameArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetNodeManufacturerNameArgs(%+v)", *p)
}

func (p *GetNodeManufacturerNameArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetNodeManufacturerNameArgs)
  if !ok {
    return 0, false
  }
  if p._homeId != data._homeId {
    if p._homeId < data._homeId {
      return -1, true
    }
    return 1, true
  }
  if p._nodeId != data._nodeId {
    if p._nodeId < data._nodeId {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetNodeManufacturerNameArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._homeId
  case 2: return p._nodeId
  }
  return nil
}

func (p *GetNodeManufacturerNameArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    })
}

/**
 * Attributes:
 *  - Success
 */
type GetNodeManufacturerNameResult struct {
  thrift.TStruct
  Success string "success"; // 0
}

func NewGetNodeManufacturerNameResult() *GetNodeManufacturerNameResult {
  output := &GetNodeManufacturerNameResult{
    TStruct:thrift.NewTStruct("GetNodeManufacturerName_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRING, 0),
    }),
  }
  {
  }
  return output
}

func (p *GetNodeManufacturerNameResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNodeManufacturerNameResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1086, err1087 := iprot.ReadString()
  if err1087 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1087); }
  p.Success = v1086
  return err
}

func (p *GetNodeManufacturerNameResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetNodeManufacturerNameResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetNodeManufacturerName_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNodeManufacturerNameResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.STRING, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *GetNodeManufacturerNameResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetNodeManufacturerNameResult) TStructName() string {
  return "GetNodeManufacturerNameResult"
}

func (p *GetNodeManufacturerNameResult) ThriftName() string {
  return "GetNodeManufacturerName_result"
}

func (p *GetNodeManufacturerNameResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetNodeManufacturerNameResult(%+v)", *p)
}

func (p *GetNodeManufacturerNameResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetNodeManufacturerNameResult)
  if !ok {
    return 0, false
  }
  if p.Success != data.Success {
    if p.Success < data.Success {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetNodeManufacturerNameResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *GetNodeManufacturerNameResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRING, 0),
    })
}

/**
 * Attributes:
 *  - _homeId
 *  - _nodeId
 */
type GetNodeProductNameArgs struct {
  thrift.TStruct
  _homeId int32 "_homeId"; // 1
  _nodeId byte "_nodeId"; // 2
}

func NewGetNodeProductNameArgs() *GetNodeProductNameArgs {
  output := &GetNodeProductNameArgs{
    TStruct:thrift.NewTStruct("GetNodeProductName_args", []thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    }),
  }
  {
  }
  return output
}

func (p *GetNodeProductNameArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_homeId" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_nodeId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNodeProductNameArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1088, err1089 := iprot.ReadI32()
  if err1089 != nil { return thrift.NewTProtocolExceptionReadField(1, "_homeId", p.ThriftName(), err1089); }
  p._homeId = v1088
  return err
}

func (p *GetNodeProductNameArgs) ReadField_homeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetNodeProductNameArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1090, err1091 := iprot.ReadByte()
  if err1091 != nil { return thrift.NewTProtocolExceptionReadField(2, "_nodeId", p.ThriftName(), err1091); }
  p._nodeId = v1090
  return err
}

func (p *GetNodeProductNameArgs) ReadField_nodeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *GetNodeProductNameArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetNodeProductName_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNodeProductNameArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_homeId", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._homeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  return err
}

func (p *GetNodeProductNameArgs) WriteField_homeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetNodeProductNameArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_nodeId", thrift.BYTE, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._nodeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  return err
}

func (p *GetNodeProductNameArgs) WriteField_nodeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *GetNodeProductNameArgs) TStructName() string {
  return "GetNodeProductNameArgs"
}

func (p *GetNodeProductNameArgs) ThriftName() string {
  return "GetNodeProductName_args"
}

func (p *GetNodeProductNameArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetNodeProductNameArgs(%+v)", *p)
}

func (p *GetNodeProductNameArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetNodeProductNameArgs)
  if !ok {
    return 0, false
  }
  if p._homeId != data._homeId {
    if p._homeId < data._homeId {
      return -1, true
    }
    return 1, true
  }
  if p._nodeId != data._nodeId {
    if p._nodeId < data._nodeId {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetNodeProductNameArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._homeId
  case 2: return p._nodeId
  }
  return nil
}

func (p *GetNodeProductNameArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    })
}

/**
 * Attributes:
 *  - Success
 */
type GetNodeProductNameResult struct {
  thrift.TStruct
  Success string "success"; // 0
}

func NewGetNodeProductNameResult() *GetNodeProductNameResult {
  output := &GetNodeProductNameResult{
    TStruct:thrift.NewTStruct("GetNodeProductName_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRING, 0),
    }),
  }
  {
  }
  return output
}

func (p *GetNodeProductNameResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNodeProductNameResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1092, err1093 := iprot.ReadString()
  if err1093 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1093); }
  p.Success = v1092
  return err
}

func (p *GetNodeProductNameResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetNodeProductNameResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetNodeProductName_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNodeProductNameResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.STRING, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *GetNodeProductNameResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetNodeProductNameResult) TStructName() string {
  return "GetNodeProductNameResult"
}

func (p *GetNodeProductNameResult) ThriftName() string {
  return "GetNodeProductName_result"
}

func (p *GetNodeProductNameResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetNodeProductNameResult(%+v)", *p)
}

func (p *GetNodeProductNameResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetNodeProductNameResult)
  if !ok {
    return 0, false
  }
  if p.Success != data.Success {
    if p.Success < data.Success {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetNodeProductNameResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *GetNodeProductNameResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRING, 0),
    })
}

/**
 * Attributes:
 *  - _homeId
 *  - _nodeId
 */
type GetNodeNameArgs struct {
  thrift.TStruct
  _homeId int32 "_homeId"; // 1
  _nodeId byte "_nodeId"; // 2
}

func NewGetNodeNameArgs() *GetNodeNameArgs {
  output := &GetNodeNameArgs{
    TStruct:thrift.NewTStruct("GetNodeName_args", []thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    }),
  }
  {
  }
  return output
}

func (p *GetNodeNameArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_homeId" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_nodeId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNodeNameArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1094, err1095 := iprot.ReadI32()
  if err1095 != nil { return thrift.NewTProtocolExceptionReadField(1, "_homeId", p.ThriftName(), err1095); }
  p._homeId = v1094
  return err
}

func (p *GetNodeNameArgs) ReadField_homeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetNodeNameArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1096, err1097 := iprot.ReadByte()
  if err1097 != nil { return thrift.NewTProtocolExceptionReadField(2, "_nodeId", p.ThriftName(), err1097); }
  p._nodeId = v1096
  return err
}

func (p *GetNodeNameArgs) ReadField_nodeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *GetNodeNameArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetNodeName_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNodeNameArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_homeId", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._homeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  return err
}

func (p *GetNodeNameArgs) WriteField_homeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetNodeNameArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_nodeId", thrift.BYTE, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._nodeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  return err
}

func (p *GetNodeNameArgs) WriteField_nodeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *GetNodeNameArgs) TStructName() string {
  return "GetNodeNameArgs"
}

func (p *GetNodeNameArgs) ThriftName() string {
  return "GetNodeName_args"
}

func (p *GetNodeNameArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetNodeNameArgs(%+v)", *p)
}

func (p *GetNodeNameArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetNodeNameArgs)
  if !ok {
    return 0, false
  }
  if p._homeId != data._homeId {
    if p._homeId < data._homeId {
      return -1, true
    }
    return 1, true
  }
  if p._nodeId != data._nodeId {
    if p._nodeId < data._nodeId {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetNodeNameArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._homeId
  case 2: return p._nodeId
  }
  return nil
}

func (p *GetNodeNameArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    })
}

/**
 * Attributes:
 *  - Success
 */
type GetNodeNameResult struct {
  thrift.TStruct
  Success string "success"; // 0
}

func NewGetNodeNameResult() *GetNodeNameResult {
  output := &GetNodeNameResult{
    TStruct:thrift.NewTStruct("GetNodeName_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRING, 0),
    }),
  }
  {
  }
  return output
}

func (p *GetNodeNameResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNodeNameResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1098, err1099 := iprot.ReadString()
  if err1099 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1099); }
  p.Success = v1098
  return err
}

func (p *GetNodeNameResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetNodeNameResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetNodeName_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNodeNameResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.STRING, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *GetNodeNameResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetNodeNameResult) TStructName() string {
  return "GetNodeNameResult"
}

func (p *GetNodeNameResult) ThriftName() string {
  return "GetNodeName_result"
}

func (p *GetNodeNameResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetNodeNameResult(%+v)", *p)
}

func (p *GetNodeNameResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetNodeNameResult)
  if !ok {
    return 0, false
  }
  if p.Success != data.Success {
    if p.Success < data.Success {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetNodeNameResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *GetNodeNameResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRING, 0),
    })
}

/**
 * Attributes:
 *  - _homeId
 *  - _nodeId
 */
type GetNodeLocationArgs struct {
  thrift.TStruct
  _homeId int32 "_homeId"; // 1
  _nodeId byte "_nodeId"; // 2
}

func NewGetNodeLocationArgs() *GetNodeLocationArgs {
  output := &GetNodeLocationArgs{
    TStruct:thrift.NewTStruct("GetNodeLocation_args", []thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    }),
  }
  {
  }
  return output
}

func (p *GetNodeLocationArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_homeId" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_nodeId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNodeLocationArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1100, err1101 := iprot.ReadI32()
  if err1101 != nil { return thrift.NewTProtocolExceptionReadField(1, "_homeId", p.ThriftName(), err1101); }
  p._homeId = v1100
  return err
}

func (p *GetNodeLocationArgs) ReadField_homeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetNodeLocationArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1102, err1103 := iprot.ReadByte()
  if err1103 != nil { return thrift.NewTProtocolExceptionReadField(2, "_nodeId", p.ThriftName(), err1103); }
  p._nodeId = v1102
  return err
}

func (p *GetNodeLocationArgs) ReadField_nodeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *GetNodeLocationArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetNodeLocation_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNodeLocationArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_homeId", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._homeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  return err
}

func (p *GetNodeLocationArgs) WriteField_homeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetNodeLocationArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_nodeId", thrift.BYTE, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._nodeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  return err
}

func (p *GetNodeLocationArgs) WriteField_nodeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *GetNodeLocationArgs) TStructName() string {
  return "GetNodeLocationArgs"
}

func (p *GetNodeLocationArgs) ThriftName() string {
  return "GetNodeLocation_args"
}

func (p *GetNodeLocationArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetNodeLocationArgs(%+v)", *p)
}

func (p *GetNodeLocationArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetNodeLocationArgs)
  if !ok {
    return 0, false
  }
  if p._homeId != data._homeId {
    if p._homeId < data._homeId {
      return -1, true
    }
    return 1, true
  }
  if p._nodeId != data._nodeId {
    if p._nodeId < data._nodeId {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetNodeLocationArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._homeId
  case 2: return p._nodeId
  }
  return nil
}

func (p *GetNodeLocationArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    })
}

/**
 * Attributes:
 *  - Success
 */
type GetNodeLocationResult struct {
  thrift.TStruct
  Success string "success"; // 0
}

func NewGetNodeLocationResult() *GetNodeLocationResult {
  output := &GetNodeLocationResult{
    TStruct:thrift.NewTStruct("GetNodeLocation_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRING, 0),
    }),
  }
  {
  }
  return output
}

func (p *GetNodeLocationResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNodeLocationResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1104, err1105 := iprot.ReadString()
  if err1105 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1105); }
  p.Success = v1104
  return err
}

func (p *GetNodeLocationResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetNodeLocationResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetNodeLocation_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNodeLocationResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.STRING, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *GetNodeLocationResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetNodeLocationResult) TStructName() string {
  return "GetNodeLocationResult"
}

func (p *GetNodeLocationResult) ThriftName() string {
  return "GetNodeLocation_result"
}

func (p *GetNodeLocationResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetNodeLocationResult(%+v)", *p)
}

func (p *GetNodeLocationResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetNodeLocationResult)
  if !ok {
    return 0, false
  }
  if p.Success != data.Success {
    if p.Success < data.Success {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetNodeLocationResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *GetNodeLocationResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRING, 0),
    })
}

/**
 * Attributes:
 *  - _homeId
 *  - _nodeId
 */
type GetNodeManufacturerIdArgs struct {
  thrift.TStruct
  _homeId int32 "_homeId"; // 1
  _nodeId byte "_nodeId"; // 2
}

func NewGetNodeManufacturerIdArgs() *GetNodeManufacturerIdArgs {
  output := &GetNodeManufacturerIdArgs{
    TStruct:thrift.NewTStruct("GetNodeManufacturerId_args", []thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    }),
  }
  {
  }
  return output
}

func (p *GetNodeManufacturerIdArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_homeId" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_nodeId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNodeManufacturerIdArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1106, err1107 := iprot.ReadI32()
  if err1107 != nil { return thrift.NewTProtocolExceptionReadField(1, "_homeId", p.ThriftName(), err1107); }
  p._homeId = v1106
  return err
}

func (p *GetNodeManufacturerIdArgs) ReadField_homeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetNodeManufacturerIdArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1108, err1109 := iprot.ReadByte()
  if err1109 != nil { return thrift.NewTProtocolExceptionReadField(2, "_nodeId", p.ThriftName(), err1109); }
  p._nodeId = v1108
  return err
}

func (p *GetNodeManufacturerIdArgs) ReadField_nodeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *GetNodeManufacturerIdArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetNodeManufacturerId_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNodeManufacturerIdArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_homeId", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._homeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  return err
}

func (p *GetNodeManufacturerIdArgs) WriteField_homeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetNodeManufacturerIdArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_nodeId", thrift.BYTE, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._nodeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  return err
}

func (p *GetNodeManufacturerIdArgs) WriteField_nodeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *GetNodeManufacturerIdArgs) TStructName() string {
  return "GetNodeManufacturerIdArgs"
}

func (p *GetNodeManufacturerIdArgs) ThriftName() string {
  return "GetNodeManufacturerId_args"
}

func (p *GetNodeManufacturerIdArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetNodeManufacturerIdArgs(%+v)", *p)
}

func (p *GetNodeManufacturerIdArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetNodeManufacturerIdArgs)
  if !ok {
    return 0, false
  }
  if p._homeId != data._homeId {
    if p._homeId < data._homeId {
      return -1, true
    }
    return 1, true
  }
  if p._nodeId != data._nodeId {
    if p._nodeId < data._nodeId {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetNodeManufacturerIdArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._homeId
  case 2: return p._nodeId
  }
  return nil
}

func (p *GetNodeManufacturerIdArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    })
}

/**
 * Attributes:
 *  - Success
 */
type GetNodeManufacturerIdResult struct {
  thrift.TStruct
  Success string "success"; // 0
}

func NewGetNodeManufacturerIdResult() *GetNodeManufacturerIdResult {
  output := &GetNodeManufacturerIdResult{
    TStruct:thrift.NewTStruct("GetNodeManufacturerId_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRING, 0),
    }),
  }
  {
  }
  return output
}

func (p *GetNodeManufacturerIdResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNodeManufacturerIdResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1110, err1111 := iprot.ReadString()
  if err1111 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1111); }
  p.Success = v1110
  return err
}

func (p *GetNodeManufacturerIdResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetNodeManufacturerIdResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetNodeManufacturerId_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNodeManufacturerIdResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.STRING, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *GetNodeManufacturerIdResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetNodeManufacturerIdResult) TStructName() string {
  return "GetNodeManufacturerIdResult"
}

func (p *GetNodeManufacturerIdResult) ThriftName() string {
  return "GetNodeManufacturerId_result"
}

func (p *GetNodeManufacturerIdResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetNodeManufacturerIdResult(%+v)", *p)
}

func (p *GetNodeManufacturerIdResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetNodeManufacturerIdResult)
  if !ok {
    return 0, false
  }
  if p.Success != data.Success {
    if p.Success < data.Success {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetNodeManufacturerIdResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *GetNodeManufacturerIdResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRING, 0),
    })
}

/**
 * Attributes:
 *  - _homeId
 *  - _nodeId
 */
type GetNodeProductTypeArgs struct {
  thrift.TStruct
  _homeId int32 "_homeId"; // 1
  _nodeId byte "_nodeId"; // 2
}

func NewGetNodeProductTypeArgs() *GetNodeProductTypeArgs {
  output := &GetNodeProductTypeArgs{
    TStruct:thrift.NewTStruct("GetNodeProductType_args", []thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    }),
  }
  {
  }
  return output
}

func (p *GetNodeProductTypeArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_homeId" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_nodeId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNodeProductTypeArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1112, err1113 := iprot.ReadI32()
  if err1113 != nil { return thrift.NewTProtocolExceptionReadField(1, "_homeId", p.ThriftName(), err1113); }
  p._homeId = v1112
  return err
}

func (p *GetNodeProductTypeArgs) ReadField_homeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetNodeProductTypeArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1114, err1115 := iprot.ReadByte()
  if err1115 != nil { return thrift.NewTProtocolExceptionReadField(2, "_nodeId", p.ThriftName(), err1115); }
  p._nodeId = v1114
  return err
}

func (p *GetNodeProductTypeArgs) ReadField_nodeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *GetNodeProductTypeArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetNodeProductType_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNodeProductTypeArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_homeId", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._homeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  return err
}

func (p *GetNodeProductTypeArgs) WriteField_homeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetNodeProductTypeArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_nodeId", thrift.BYTE, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._nodeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  return err
}

func (p *GetNodeProductTypeArgs) WriteField_nodeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *GetNodeProductTypeArgs) TStructName() string {
  return "GetNodeProductTypeArgs"
}

func (p *GetNodeProductTypeArgs) ThriftName() string {
  return "GetNodeProductType_args"
}

func (p *GetNodeProductTypeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetNodeProductTypeArgs(%+v)", *p)
}

func (p *GetNodeProductTypeArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetNodeProductTypeArgs)
  if !ok {
    return 0, false
  }
  if p._homeId != data._homeId {
    if p._homeId < data._homeId {
      return -1, true
    }
    return 1, true
  }
  if p._nodeId != data._nodeId {
    if p._nodeId < data._nodeId {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetNodeProductTypeArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._homeId
  case 2: return p._nodeId
  }
  return nil
}

func (p *GetNodeProductTypeArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    })
}

/**
 * Attributes:
 *  - Success
 */
type GetNodeProductTypeResult struct {
  thrift.TStruct
  Success string "success"; // 0
}

func NewGetNodeProductTypeResult() *GetNodeProductTypeResult {
  output := &GetNodeProductTypeResult{
    TStruct:thrift.NewTStruct("GetNodeProductType_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRING, 0),
    }),
  }
  {
  }
  return output
}

func (p *GetNodeProductTypeResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNodeProductTypeResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1116, err1117 := iprot.ReadString()
  if err1117 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1117); }
  p.Success = v1116
  return err
}

func (p *GetNodeProductTypeResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetNodeProductTypeResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetNodeProductType_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNodeProductTypeResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.STRING, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *GetNodeProductTypeResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetNodeProductTypeResult) TStructName() string {
  return "GetNodeProductTypeResult"
}

func (p *GetNodeProductTypeResult) ThriftName() string {
  return "GetNodeProductType_result"
}

func (p *GetNodeProductTypeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetNodeProductTypeResult(%+v)", *p)
}

func (p *GetNodeProductTypeResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetNodeProductTypeResult)
  if !ok {
    return 0, false
  }
  if p.Success != data.Success {
    if p.Success < data.Success {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetNodeProductTypeResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *GetNodeProductTypeResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRING, 0),
    })
}

/**
 * Attributes:
 *  - _homeId
 *  - _nodeId
 */
type GetNodeProductIdArgs struct {
  thrift.TStruct
  _homeId int32 "_homeId"; // 1
  _nodeId byte "_nodeId"; // 2
}

func NewGetNodeProductIdArgs() *GetNodeProductIdArgs {
  output := &GetNodeProductIdArgs{
    TStruct:thrift.NewTStruct("GetNodeProductId_args", []thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    }),
  }
  {
  }
  return output
}

func (p *GetNodeProductIdArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_homeId" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_nodeId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNodeProductIdArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1118, err1119 := iprot.ReadI32()
  if err1119 != nil { return thrift.NewTProtocolExceptionReadField(1, "_homeId", p.ThriftName(), err1119); }
  p._homeId = v1118
  return err
}

func (p *GetNodeProductIdArgs) ReadField_homeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetNodeProductIdArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1120, err1121 := iprot.ReadByte()
  if err1121 != nil { return thrift.NewTProtocolExceptionReadField(2, "_nodeId", p.ThriftName(), err1121); }
  p._nodeId = v1120
  return err
}

func (p *GetNodeProductIdArgs) ReadField_nodeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *GetNodeProductIdArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetNodeProductId_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNodeProductIdArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_homeId", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._homeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  return err
}

func (p *GetNodeProductIdArgs) WriteField_homeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetNodeProductIdArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_nodeId", thrift.BYTE, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._nodeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  return err
}

func (p *GetNodeProductIdArgs) WriteField_nodeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *GetNodeProductIdArgs) TStructName() string {
  return "GetNodeProductIdArgs"
}

func (p *GetNodeProductIdArgs) ThriftName() string {
  return "GetNodeProductId_args"
}

func (p *GetNodeProductIdArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetNodeProductIdArgs(%+v)", *p)
}

func (p *GetNodeProductIdArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetNodeProductIdArgs)
  if !ok {
    return 0, false
  }
  if p._homeId != data._homeId {
    if p._homeId < data._homeId {
      return -1, true
    }
    return 1, true
  }
  if p._nodeId != data._nodeId {
    if p._nodeId < data._nodeId {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetNodeProductIdArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._homeId
  case 2: return p._nodeId
  }
  return nil
}

func (p *GetNodeProductIdArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    })
}

/**
 * Attributes:
 *  - Success
 */
type GetNodeProductIdResult struct {
  thrift.TStruct
  Success string "success"; // 0
}

func NewGetNodeProductIdResult() *GetNodeProductIdResult {
  output := &GetNodeProductIdResult{
    TStruct:thrift.NewTStruct("GetNodeProductId_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRING, 0),
    }),
  }
  {
  }
  return output
}

func (p *GetNodeProductIdResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNodeProductIdResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1122, err1123 := iprot.ReadString()
  if err1123 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1123); }
  p.Success = v1122
  return err
}

func (p *GetNodeProductIdResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetNodeProductIdResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetNodeProductId_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNodeProductIdResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.STRING, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *GetNodeProductIdResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetNodeProductIdResult) TStructName() string {
  return "GetNodeProductIdResult"
}

func (p *GetNodeProductIdResult) ThriftName() string {
  return "GetNodeProductId_result"
}

func (p *GetNodeProductIdResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetNodeProductIdResult(%+v)", *p)
}

func (p *GetNodeProductIdResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetNodeProductIdResult)
  if !ok {
    return 0, false
  }
  if p.Success != data.Success {
    if p.Success < data.Success {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetNodeProductIdResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *GetNodeProductIdResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRING, 0),
    })
}

/**
 * Attributes:
 *  - _homeId
 *  - _nodeId
 *  - _manufacturerName
 */
type SetNodeManufacturerNameArgs struct {
  thrift.TStruct
  _homeId int32 "_homeId"; // 1
  _nodeId byte "_nodeId"; // 2
  _manufacturerName string "_manufacturerName"; // 3
}

func NewSetNodeManufacturerNameArgs() *SetNodeManufacturerNameArgs {
  output := &SetNodeManufacturerNameArgs{
    TStruct:thrift.NewTStruct("SetNodeManufacturerName_args", []thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    thrift.NewTField("_manufacturerName", thrift.STRING, 3),
    }),
  }
  {
  }
  return output
}

func (p *SetNodeManufacturerNameArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_homeId" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_nodeId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "_manufacturerName" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SetNodeManufacturerNameArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1124, err1125 := iprot.ReadI32()
  if err1125 != nil { return thrift.NewTProtocolExceptionReadField(1, "_homeId", p.ThriftName(), err1125); }
  p._homeId = v1124
  return err
}

func (p *SetNodeManufacturerNameArgs) ReadField_homeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *SetNodeManufacturerNameArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1126, err1127 := iprot.ReadByte()
  if err1127 != nil { return thrift.NewTProtocolExceptionReadField(2, "_nodeId", p.ThriftName(), err1127); }
  p._nodeId = v1126
  return err
}

func (p *SetNodeManufacturerNameArgs) ReadField_nodeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *SetNodeManufacturerNameArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1128, err1129 := iprot.ReadString()
  if err1129 != nil { return thrift.NewTProtocolExceptionReadField(3, "_manufacturerName", p.ThriftName(), err1129); }
  p._manufacturerName = v1128
  return err
}

func (p *SetNodeManufacturerNameArgs) ReadField_manufacturerName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *SetNodeManufacturerNameArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SetNodeManufacturerName_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SetNodeManufacturerNameArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_homeId", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._homeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  return err
}

func (p *SetNodeManufacturerNameArgs) WriteField_homeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *SetNodeManufacturerNameArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_nodeId", thrift.BYTE, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._nodeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  return err
}

func (p *SetNodeManufacturerNameArgs) WriteField_nodeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *SetNodeManufacturerNameArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_manufacturerName", thrift.STRING, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_manufacturerName", p.ThriftName(), err); }
  err = oprot.WriteString(string(p._manufacturerName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_manufacturerName", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_manufacturerName", p.ThriftName(), err); }
  return err
}

func (p *SetNodeManufacturerNameArgs) WriteField_manufacturerName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *SetNodeManufacturerNameArgs) TStructName() string {
  return "SetNodeManufacturerNameArgs"
}

func (p *SetNodeManufacturerNameArgs) ThriftName() string {
  return "SetNodeManufacturerName_args"
}

func (p *SetNodeManufacturerNameArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetNodeManufacturerNameArgs(%+v)", *p)
}

func (p *SetNodeManufacturerNameArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SetNodeManufacturerNameArgs)
  if !ok {
    return 0, false
  }
  if p._homeId != data._homeId {
    if p._homeId < data._homeId {
      return -1, true
    }
    return 1, true
  }
  if p._nodeId != data._nodeId {
    if p._nodeId < data._nodeId {
      return -1, true
    }
    return 1, true
  }
  if p._manufacturerName != data._manufacturerName {
    if p._manufacturerName < data._manufacturerName {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *SetNodeManufacturerNameArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._homeId
  case 2: return p._nodeId
  case 3: return p._manufacturerName
  }
  return nil
}

func (p *SetNodeManufacturerNameArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    thrift.NewTField("_manufacturerName", thrift.STRING, 3),
    })
}

type SetNodeManufacturerNameResult struct {
  thrift.TStruct
}

func NewSetNodeManufacturerNameResult() *SetNodeManufacturerNameResult {
  output := &SetNodeManufacturerNameResult{
    TStruct:thrift.NewTStruct("SetNodeManufacturerName_result", []thrift.TField{
    }),
  }
  {
  }
  return output
}

func (p *SetNodeManufacturerNameResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    err = iprot.Skip(fieldTypeId)
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SetNodeManufacturerNameResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SetNodeManufacturerName_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SetNodeManufacturerNameResult) TStructName() string {
  return "SetNodeManufacturerNameResult"
}

func (p *SetNodeManufacturerNameResult) ThriftName() string {
  return "SetNodeManufacturerName_result"
}

func (p *SetNodeManufacturerNameResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetNodeManufacturerNameResult(%+v)", *p)
}

func (p *SetNodeManufacturerNameResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  _, ok := other.(*SetNodeManufacturerNameResult)
  if !ok {
    return 0, false
  }
  return 0, true
}

func (p *SetNodeManufacturerNameResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  }
  return nil
}

func (p *SetNodeManufacturerNameResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    })
}

/**
 * Attributes:
 *  - _homeId
 *  - _nodeId
 *  - _productName
 */
type SetNodeProductNameArgs struct {
  thrift.TStruct
  _homeId int32 "_homeId"; // 1
  _nodeId byte "_nodeId"; // 2
  _productName string "_productName"; // 3
}

func NewSetNodeProductNameArgs() *SetNodeProductNameArgs {
  output := &SetNodeProductNameArgs{
    TStruct:thrift.NewTStruct("SetNodeProductName_args", []thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    thrift.NewTField("_productName", thrift.STRING, 3),
    }),
  }
  {
  }
  return output
}

func (p *SetNodeProductNameArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_homeId" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_nodeId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "_productName" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SetNodeProductNameArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1130, err1131 := iprot.ReadI32()
  if err1131 != nil { return thrift.NewTProtocolExceptionReadField(1, "_homeId", p.ThriftName(), err1131); }
  p._homeId = v1130
  return err
}

func (p *SetNodeProductNameArgs) ReadField_homeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *SetNodeProductNameArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1132, err1133 := iprot.ReadByte()
  if err1133 != nil { return thrift.NewTProtocolExceptionReadField(2, "_nodeId", p.ThriftName(), err1133); }
  p._nodeId = v1132
  return err
}

func (p *SetNodeProductNameArgs) ReadField_nodeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *SetNodeProductNameArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1134, err1135 := iprot.ReadString()
  if err1135 != nil { return thrift.NewTProtocolExceptionReadField(3, "_productName", p.ThriftName(), err1135); }
  p._productName = v1134
  return err
}

func (p *SetNodeProductNameArgs) ReadField_productName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *SetNodeProductNameArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SetNodeProductName_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SetNodeProductNameArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_homeId", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._homeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  return err
}

func (p *SetNodeProductNameArgs) WriteField_homeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *SetNodeProductNameArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_nodeId", thrift.BYTE, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._nodeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  return err
}

func (p *SetNodeProductNameArgs) WriteField_nodeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *SetNodeProductNameArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_productName", thrift.STRING, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_productName", p.ThriftName(), err); }
  err = oprot.WriteString(string(p._productName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_productName", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_productName", p.ThriftName(), err); }
  return err
}

func (p *SetNodeProductNameArgs) WriteField_productName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *SetNodeProductNameArgs) TStructName() string {
  return "SetNodeProductNameArgs"
}

func (p *SetNodeProductNameArgs) ThriftName() string {
  return "SetNodeProductName_args"
}

func (p *SetNodeProductNameArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetNodeProductNameArgs(%+v)", *p)
}

func (p *SetNodeProductNameArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SetNodeProductNameArgs)
  if !ok {
    return 0, false
  }
  if p._homeId != data._homeId {
    if p._homeId < data._homeId {
      return -1, true
    }
    return 1, true
  }
  if p._nodeId != data._nodeId {
    if p._nodeId < data._nodeId {
      return -1, true
    }
    return 1, true
  }
  if p._productName != data._productName {
    if p._productName < data._productName {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *SetNodeProductNameArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._homeId
  case 2: return p._nodeId
  case 3: return p._productName
  }
  return nil
}

func (p *SetNodeProductNameArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    thrift.NewTField("_productName", thrift.STRING, 3),
    })
}

type SetNodeProductNameResult struct {
  thrift.TStruct
}

func NewSetNodeProductNameResult() *SetNodeProductNameResult {
  output := &SetNodeProductNameResult{
    TStruct:thrift.NewTStruct("SetNodeProductName_result", []thrift.TField{
    }),
  }
  {
  }
  return output
}

func (p *SetNodeProductNameResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    err = iprot.Skip(fieldTypeId)
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SetNodeProductNameResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SetNodeProductName_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SetNodeProductNameResult) TStructName() string {
  return "SetNodeProductNameResult"
}

func (p *SetNodeProductNameResult) ThriftName() string {
  return "SetNodeProductName_result"
}

func (p *SetNodeProductNameResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetNodeProductNameResult(%+v)", *p)
}

func (p *SetNodeProductNameResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  _, ok := other.(*SetNodeProductNameResult)
  if !ok {
    return 0, false
  }
  return 0, true
}

func (p *SetNodeProductNameResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  }
  return nil
}

func (p *SetNodeProductNameResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    })
}

/**
 * Attributes:
 *  - _homeId
 *  - _nodeId
 *  - _nodeName
 */
type SetNodeNameArgs struct {
  thrift.TStruct
  _homeId int32 "_homeId"; // 1
  _nodeId byte "_nodeId"; // 2
  _nodeName string "_nodeName"; // 3
}

func NewSetNodeNameArgs() *SetNodeNameArgs {
  output := &SetNodeNameArgs{
    TStruct:thrift.NewTStruct("SetNodeName_args", []thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    thrift.NewTField("_nodeName", thrift.STRING, 3),
    }),
  }
  {
  }
  return output
}

func (p *SetNodeNameArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_homeId" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_nodeId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "_nodeName" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SetNodeNameArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1136, err1137 := iprot.ReadI32()
  if err1137 != nil { return thrift.NewTProtocolExceptionReadField(1, "_homeId", p.ThriftName(), err1137); }
  p._homeId = v1136
  return err
}

func (p *SetNodeNameArgs) ReadField_homeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *SetNodeNameArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1138, err1139 := iprot.ReadByte()
  if err1139 != nil { return thrift.NewTProtocolExceptionReadField(2, "_nodeId", p.ThriftName(), err1139); }
  p._nodeId = v1138
  return err
}

func (p *SetNodeNameArgs) ReadField_nodeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *SetNodeNameArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1140, err1141 := iprot.ReadString()
  if err1141 != nil { return thrift.NewTProtocolExceptionReadField(3, "_nodeName", p.ThriftName(), err1141); }
  p._nodeName = v1140
  return err
}

func (p *SetNodeNameArgs) ReadField_nodeName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *SetNodeNameArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SetNodeName_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SetNodeNameArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_homeId", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._homeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  return err
}

func (p *SetNodeNameArgs) WriteField_homeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *SetNodeNameArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_nodeId", thrift.BYTE, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._nodeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  return err
}

func (p *SetNodeNameArgs) WriteField_nodeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *SetNodeNameArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_nodeName", thrift.STRING, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_nodeName", p.ThriftName(), err); }
  err = oprot.WriteString(string(p._nodeName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_nodeName", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_nodeName", p.ThriftName(), err); }
  return err
}

func (p *SetNodeNameArgs) WriteField_nodeName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *SetNodeNameArgs) TStructName() string {
  return "SetNodeNameArgs"
}

func (p *SetNodeNameArgs) ThriftName() string {
  return "SetNodeName_args"
}

func (p *SetNodeNameArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetNodeNameArgs(%+v)", *p)
}

func (p *SetNodeNameArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SetNodeNameArgs)
  if !ok {
    return 0, false
  }
  if p._homeId != data._homeId {
    if p._homeId < data._homeId {
      return -1, true
    }
    return 1, true
  }
  if p._nodeId != data._nodeId {
    if p._nodeId < data._nodeId {
      return -1, true
    }
    return 1, true
  }
  if p._nodeName != data._nodeName {
    if p._nodeName < data._nodeName {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *SetNodeNameArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._homeId
  case 2: return p._nodeId
  case 3: return p._nodeName
  }
  return nil
}

func (p *SetNodeNameArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    thrift.NewTField("_nodeName", thrift.STRING, 3),
    })
}

type SetNodeNameResult struct {
  thrift.TStruct
}

func NewSetNodeNameResult() *SetNodeNameResult {
  output := &SetNodeNameResult{
    TStruct:thrift.NewTStruct("SetNodeName_result", []thrift.TField{
    }),
  }
  {
  }
  return output
}

func (p *SetNodeNameResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    err = iprot.Skip(fieldTypeId)
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SetNodeNameResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SetNodeName_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SetNodeNameResult) TStructName() string {
  return "SetNodeNameResult"
}

func (p *SetNodeNameResult) ThriftName() string {
  return "SetNodeName_result"
}

func (p *SetNodeNameResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetNodeNameResult(%+v)", *p)
}

func (p *SetNodeNameResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  _, ok := other.(*SetNodeNameResult)
  if !ok {
    return 0, false
  }
  return 0, true
}

func (p *SetNodeNameResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  }
  return nil
}

func (p *SetNodeNameResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    })
}

/**
 * Attributes:
 *  - _homeId
 *  - _nodeId
 *  - _location
 */
type SetNodeLocationArgs struct {
  thrift.TStruct
  _homeId int32 "_homeId"; // 1
  _nodeId byte "_nodeId"; // 2
  _location string "_location"; // 3
}

func NewSetNodeLocationArgs() *SetNodeLocationArgs {
  output := &SetNodeLocationArgs{
    TStruct:thrift.NewTStruct("SetNodeLocation_args", []thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    thrift.NewTField("_location", thrift.STRING, 3),
    }),
  }
  {
  }
  return output
}

func (p *SetNodeLocationArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_homeId" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_nodeId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "_location" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SetNodeLocationArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1142, err1143 := iprot.ReadI32()
  if err1143 != nil { return thrift.NewTProtocolExceptionReadField(1, "_homeId", p.ThriftName(), err1143); }
  p._homeId = v1142
  return err
}

func (p *SetNodeLocationArgs) ReadField_homeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *SetNodeLocationArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1144, err1145 := iprot.ReadByte()
  if err1145 != nil { return thrift.NewTProtocolExceptionReadField(2, "_nodeId", p.ThriftName(), err1145); }
  p._nodeId = v1144
  return err
}

func (p *SetNodeLocationArgs) ReadField_nodeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *SetNodeLocationArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1146, err1147 := iprot.ReadString()
  if err1147 != nil { return thrift.NewTProtocolExceptionReadField(3, "_location", p.ThriftName(), err1147); }
  p._location = v1146
  return err
}

func (p *SetNodeLocationArgs) ReadField_location(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *SetNodeLocationArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SetNodeLocation_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SetNodeLocationArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_homeId", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._homeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  return err
}

func (p *SetNodeLocationArgs) WriteField_homeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *SetNodeLocationArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_nodeId", thrift.BYTE, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._nodeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  return err
}

func (p *SetNodeLocationArgs) WriteField_nodeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *SetNodeLocationArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_location", thrift.STRING, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_location", p.ThriftName(), err); }
  err = oprot.WriteString(string(p._location))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_location", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_location", p.ThriftName(), err); }
  return err
}

func (p *SetNodeLocationArgs) WriteField_location(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *SetNodeLocationArgs) TStructName() string {
  return "SetNodeLocationArgs"
}

func (p *SetNodeLocationArgs) ThriftName() string {
  return "SetNodeLocation_args"
}

func (p *SetNodeLocationArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetNodeLocationArgs(%+v)", *p)
}

func (p *SetNodeLocationArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SetNodeLocationArgs)
  if !ok {
    return 0, false
  }
  if p._homeId != data._homeId {
    if p._homeId < data._homeId {
      return -1, true
    }
    return 1, true
  }
  if p._nodeId != data._nodeId {
    if p._nodeId < data._nodeId {
      return -1, true
    }
    return 1, true
  }
  if p._location != data._location {
    if p._location < data._location {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *SetNodeLocationArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._homeId
  case 2: return p._nodeId
  case 3: return p._location
  }
  return nil
}

func (p *SetNodeLocationArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    thrift.NewTField("_location", thrift.STRING, 3),
    })
}

type SetNodeLocationResult struct {
  thrift.TStruct
}

func NewSetNodeLocationResult() *SetNodeLocationResult {
  output := &SetNodeLocationResult{
    TStruct:thrift.NewTStruct("SetNodeLocation_result", []thrift.TField{
    }),
  }
  {
  }
  return output
}

func (p *SetNodeLocationResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    err = iprot.Skip(fieldTypeId)
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SetNodeLocationResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SetNodeLocation_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SetNodeLocationResult) TStructName() string {
  return "SetNodeLocationResult"
}

func (p *SetNodeLocationResult) ThriftName() string {
  return "SetNodeLocation_result"
}

func (p *SetNodeLocationResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetNodeLocationResult(%+v)", *p)
}

func (p *SetNodeLocationResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  _, ok := other.(*SetNodeLocationResult)
  if !ok {
    return 0, false
  }
  return 0, true
}

func (p *SetNodeLocationResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  }
  return nil
}

func (p *SetNodeLocationResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    })
}

/**
 * Attributes:
 *  - _homeId
 *  - _nodeId
 */
type SetNodeOnArgs struct {
  thrift.TStruct
  _homeId int32 "_homeId"; // 1
  _nodeId byte "_nodeId"; // 2
}

func NewSetNodeOnArgs() *SetNodeOnArgs {
  output := &SetNodeOnArgs{
    TStruct:thrift.NewTStruct("SetNodeOn_args", []thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    }),
  }
  {
  }
  return output
}

func (p *SetNodeOnArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_homeId" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_nodeId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SetNodeOnArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1148, err1149 := iprot.ReadI32()
  if err1149 != nil { return thrift.NewTProtocolExceptionReadField(1, "_homeId", p.ThriftName(), err1149); }
  p._homeId = v1148
  return err
}

func (p *SetNodeOnArgs) ReadField_homeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *SetNodeOnArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1150, err1151 := iprot.ReadByte()
  if err1151 != nil { return thrift.NewTProtocolExceptionReadField(2, "_nodeId", p.ThriftName(), err1151); }
  p._nodeId = v1150
  return err
}

func (p *SetNodeOnArgs) ReadField_nodeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *SetNodeOnArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SetNodeOn_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SetNodeOnArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_homeId", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._homeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  return err
}

func (p *SetNodeOnArgs) WriteField_homeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *SetNodeOnArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_nodeId", thrift.BYTE, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._nodeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  return err
}

func (p *SetNodeOnArgs) WriteField_nodeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *SetNodeOnArgs) TStructName() string {
  return "SetNodeOnArgs"
}

func (p *SetNodeOnArgs) ThriftName() string {
  return "SetNodeOn_args"
}

func (p *SetNodeOnArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetNodeOnArgs(%+v)", *p)
}

func (p *SetNodeOnArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SetNodeOnArgs)
  if !ok {
    return 0, false
  }
  if p._homeId != data._homeId {
    if p._homeId < data._homeId {
      return -1, true
    }
    return 1, true
  }
  if p._nodeId != data._nodeId {
    if p._nodeId < data._nodeId {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *SetNodeOnArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._homeId
  case 2: return p._nodeId
  }
  return nil
}

func (p *SetNodeOnArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    })
}

type SetNodeOnResult struct {
  thrift.TStruct
}

func NewSetNodeOnResult() *SetNodeOnResult {
  output := &SetNodeOnResult{
    TStruct:thrift.NewTStruct("SetNodeOn_result", []thrift.TField{
    }),
  }
  {
  }
  return output
}

func (p *SetNodeOnResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    err = iprot.Skip(fieldTypeId)
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SetNodeOnResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SetNodeOn_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SetNodeOnResult) TStructName() string {
  return "SetNodeOnResult"
}

func (p *SetNodeOnResult) ThriftName() string {
  return "SetNodeOn_result"
}

func (p *SetNodeOnResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetNodeOnResult(%+v)", *p)
}

func (p *SetNodeOnResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  _, ok := other.(*SetNodeOnResult)
  if !ok {
    return 0, false
  }
  return 0, true
}

func (p *SetNodeOnResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  }
  return nil
}

func (p *SetNodeOnResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    })
}

/**
 * Attributes:
 *  - _homeId
 *  - _nodeId
 */
type SetNodeOffArgs struct {
  thrift.TStruct
  _homeId int32 "_homeId"; // 1
  _nodeId byte "_nodeId"; // 2
}

func NewSetNodeOffArgs() *SetNodeOffArgs {
  output := &SetNodeOffArgs{
    TStruct:thrift.NewTStruct("SetNodeOff_args", []thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    }),
  }
  {
  }
  return output
}

func (p *SetNodeOffArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_homeId" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_nodeId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SetNodeOffArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1152, err1153 := iprot.ReadI32()
  if err1153 != nil { return thrift.NewTProtocolExceptionReadField(1, "_homeId", p.ThriftName(), err1153); }
  p._homeId = v1152
  return err
}

func (p *SetNodeOffArgs) ReadField_homeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *SetNodeOffArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1154, err1155 := iprot.ReadByte()
  if err1155 != nil { return thrift.NewTProtocolExceptionReadField(2, "_nodeId", p.ThriftName(), err1155); }
  p._nodeId = v1154
  return err
}

func (p *SetNodeOffArgs) ReadField_nodeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *SetNodeOffArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SetNodeOff_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SetNodeOffArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_homeId", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._homeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  return err
}

func (p *SetNodeOffArgs) WriteField_homeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *SetNodeOffArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_nodeId", thrift.BYTE, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._nodeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  return err
}

func (p *SetNodeOffArgs) WriteField_nodeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *SetNodeOffArgs) TStructName() string {
  return "SetNodeOffArgs"
}

func (p *SetNodeOffArgs) ThriftName() string {
  return "SetNodeOff_args"
}

func (p *SetNodeOffArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetNodeOffArgs(%+v)", *p)
}

func (p *SetNodeOffArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SetNodeOffArgs)
  if !ok {
    return 0, false
  }
  if p._homeId != data._homeId {
    if p._homeId < data._homeId {
      return -1, true
    }
    return 1, true
  }
  if p._nodeId != data._nodeId {
    if p._nodeId < data._nodeId {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *SetNodeOffArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._homeId
  case 2: return p._nodeId
  }
  return nil
}

func (p *SetNodeOffArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    })
}

type SetNodeOffResult struct {
  thrift.TStruct
}

func NewSetNodeOffResult() *SetNodeOffResult {
  output := &SetNodeOffResult{
    TStruct:thrift.NewTStruct("SetNodeOff_result", []thrift.TField{
    }),
  }
  {
  }
  return output
}

func (p *SetNodeOffResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    err = iprot.Skip(fieldTypeId)
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SetNodeOffResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SetNodeOff_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SetNodeOffResult) TStructName() string {
  return "SetNodeOffResult"
}

func (p *SetNodeOffResult) ThriftName() string {
  return "SetNodeOff_result"
}

func (p *SetNodeOffResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetNodeOffResult(%+v)", *p)
}

func (p *SetNodeOffResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  _, ok := other.(*SetNodeOffResult)
  if !ok {
    return 0, false
  }
  return 0, true
}

func (p *SetNodeOffResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  }
  return nil
}

func (p *SetNodeOffResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    })
}

/**
 * Attributes:
 *  - _homeId
 *  - _nodeId
 *  - _level
 */
type SetNodeLevelArgs struct {
  thrift.TStruct
  _homeId int32 "_homeId"; // 1
  _nodeId byte "_nodeId"; // 2
  _level byte "_level"; // 3
}

func NewSetNodeLevelArgs() *SetNodeLevelArgs {
  output := &SetNodeLevelArgs{
    TStruct:thrift.NewTStruct("SetNodeLevel_args", []thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    thrift.NewTField("_level", thrift.BYTE, 3),
    }),
  }
  {
  }
  return output
}

func (p *SetNodeLevelArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_homeId" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_nodeId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "_level" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SetNodeLevelArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1156, err1157 := iprot.ReadI32()
  if err1157 != nil { return thrift.NewTProtocolExceptionReadField(1, "_homeId", p.ThriftName(), err1157); }
  p._homeId = v1156
  return err
}

func (p *SetNodeLevelArgs) ReadField_homeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *SetNodeLevelArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1158, err1159 := iprot.ReadByte()
  if err1159 != nil { return thrift.NewTProtocolExceptionReadField(2, "_nodeId", p.ThriftName(), err1159); }
  p._nodeId = v1158
  return err
}

func (p *SetNodeLevelArgs) ReadField_nodeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *SetNodeLevelArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1160, err1161 := iprot.ReadByte()
  if err1161 != nil { return thrift.NewTProtocolExceptionReadField(3, "_level", p.ThriftName(), err1161); }
  p._level = v1160
  return err
}

func (p *SetNodeLevelArgs) ReadField_level(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *SetNodeLevelArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SetNodeLevel_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SetNodeLevelArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_homeId", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._homeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  return err
}

func (p *SetNodeLevelArgs) WriteField_homeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *SetNodeLevelArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_nodeId", thrift.BYTE, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._nodeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  return err
}

func (p *SetNodeLevelArgs) WriteField_nodeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *SetNodeLevelArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_level", thrift.BYTE, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_level", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._level))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_level", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_level", p.ThriftName(), err); }
  return err
}

func (p *SetNodeLevelArgs) WriteField_level(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *SetNodeLevelArgs) TStructName() string {
  return "SetNodeLevelArgs"
}

func (p *SetNodeLevelArgs) ThriftName() string {
  return "SetNodeLevel_args"
}

func (p *SetNodeLevelArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetNodeLevelArgs(%+v)", *p)
}

func (p *SetNodeLevelArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SetNodeLevelArgs)
  if !ok {
    return 0, false
  }
  if p._homeId != data._homeId {
    if p._homeId < data._homeId {
      return -1, true
    }
    return 1, true
  }
  if p._nodeId != data._nodeId {
    if p._nodeId < data._nodeId {
      return -1, true
    }
    return 1, true
  }
  if p._level != data._level {
    if p._level < data._level {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *SetNodeLevelArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._homeId
  case 2: return p._nodeId
  case 3: return p._level
  }
  return nil
}

func (p *SetNodeLevelArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    thrift.NewTField("_level", thrift.BYTE, 3),
    })
}

type SetNodeLevelResult struct {
  thrift.TStruct
}

func NewSetNodeLevelResult() *SetNodeLevelResult {
  output := &SetNodeLevelResult{
    TStruct:thrift.NewTStruct("SetNodeLevel_result", []thrift.TField{
    }),
  }
  {
  }
  return output
}

func (p *SetNodeLevelResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    err = iprot.Skip(fieldTypeId)
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SetNodeLevelResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SetNodeLevel_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SetNodeLevelResult) TStructName() string {
  return "SetNodeLevelResult"
}

func (p *SetNodeLevelResult) ThriftName() string {
  return "SetNodeLevel_result"
}

func (p *SetNodeLevelResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetNodeLevelResult(%+v)", *p)
}

func (p *SetNodeLevelResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  _, ok := other.(*SetNodeLevelResult)
  if !ok {
    return 0, false
  }
  return 0, true
}

func (p *SetNodeLevelResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  }
  return nil
}

func (p *SetNodeLevelResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    })
}

/**
 * Attributes:
 *  - _homeId
 *  - _nodeId
 */
type IsNodeInfoReceivedArgs struct {
  thrift.TStruct
  _homeId int32 "_homeId"; // 1
  _nodeId byte "_nodeId"; // 2
}

func NewIsNodeInfoReceivedArgs() *IsNodeInfoReceivedArgs {
  output := &IsNodeInfoReceivedArgs{
    TStruct:thrift.NewTStruct("IsNodeInfoReceived_args", []thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    }),
  }
  {
  }
  return output
}

func (p *IsNodeInfoReceivedArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_homeId" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_nodeId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *IsNodeInfoReceivedArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1162, err1163 := iprot.ReadI32()
  if err1163 != nil { return thrift.NewTProtocolExceptionReadField(1, "_homeId", p.ThriftName(), err1163); }
  p._homeId = v1162
  return err
}

func (p *IsNodeInfoReceivedArgs) ReadField_homeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *IsNodeInfoReceivedArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1164, err1165 := iprot.ReadByte()
  if err1165 != nil { return thrift.NewTProtocolExceptionReadField(2, "_nodeId", p.ThriftName(), err1165); }
  p._nodeId = v1164
  return err
}

func (p *IsNodeInfoReceivedArgs) ReadField_nodeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *IsNodeInfoReceivedArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("IsNodeInfoReceived_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *IsNodeInfoReceivedArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_homeId", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._homeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  return err
}

func (p *IsNodeInfoReceivedArgs) WriteField_homeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *IsNodeInfoReceivedArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_nodeId", thrift.BYTE, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._nodeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  return err
}

func (p *IsNodeInfoReceivedArgs) WriteField_nodeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *IsNodeInfoReceivedArgs) TStructName() string {
  return "IsNodeInfoReceivedArgs"
}

func (p *IsNodeInfoReceivedArgs) ThriftName() string {
  return "IsNodeInfoReceived_args"
}

func (p *IsNodeInfoReceivedArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IsNodeInfoReceivedArgs(%+v)", *p)
}

func (p *IsNodeInfoReceivedArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*IsNodeInfoReceivedArgs)
  if !ok {
    return 0, false
  }
  if p._homeId != data._homeId {
    if p._homeId < data._homeId {
      return -1, true
    }
    return 1, true
  }
  if p._nodeId != data._nodeId {
    if p._nodeId < data._nodeId {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *IsNodeInfoReceivedArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._homeId
  case 2: return p._nodeId
  }
  return nil
}

func (p *IsNodeInfoReceivedArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    })
}

/**
 * Attributes:
 *  - Success
 */
type IsNodeInfoReceivedResult struct {
  thrift.TStruct
  Success bool "success"; // 0
}

func NewIsNodeInfoReceivedResult() *IsNodeInfoReceivedResult {
  output := &IsNodeInfoReceivedResult{
    TStruct:thrift.NewTStruct("IsNodeInfoReceived_result", []thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    }),
  }
  {
  }
  return output
}

func (p *IsNodeInfoReceivedResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *IsNodeInfoReceivedResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1166, err1167 := iprot.ReadBool()
  if err1167 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1167); }
  p.Success = v1166
  return err
}

func (p *IsNodeInfoReceivedResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *IsNodeInfoReceivedResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("IsNodeInfoReceived_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *IsNodeInfoReceivedResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BOOL, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *IsNodeInfoReceivedResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *IsNodeInfoReceivedResult) TStructName() string {
  return "IsNodeInfoReceivedResult"
}

func (p *IsNodeInfoReceivedResult) ThriftName() string {
  return "IsNodeInfoReceived_result"
}

func (p *IsNodeInfoReceivedResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IsNodeInfoReceivedResult(%+v)", *p)
}

func (p *IsNodeInfoReceivedResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*IsNodeInfoReceivedResult)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Success, data.Success); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *IsNodeInfoReceivedResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *IsNodeInfoReceivedResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    })
}

/**
 * Attributes:
 *  - _homeId
 *  - _nodeId
 *  - _commandClassId
 */
type GetNodeClassInformationArgs struct {
  thrift.TStruct
  _homeId int32 "_homeId"; // 1
  _nodeId byte "_nodeId"; // 2
  _commandClassId byte "_commandClassId"; // 3
}

func NewGetNodeClassInformationArgs() *GetNodeClassInformationArgs {
  output := &GetNodeClassInformationArgs{
    TStruct:thrift.NewTStruct("GetNodeClassInformation_args", []thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    thrift.NewTField("_commandClassId", thrift.BYTE, 3),
    }),
  }
  {
  }
  return output
}

func (p *GetNodeClassInformationArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_homeId" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_nodeId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "_commandClassId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNodeClassInformationArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1168, err1169 := iprot.ReadI32()
  if err1169 != nil { return thrift.NewTProtocolExceptionReadField(1, "_homeId", p.ThriftName(), err1169); }
  p._homeId = v1168
  return err
}

func (p *GetNodeClassInformationArgs) ReadField_homeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetNodeClassInformationArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1170, err1171 := iprot.ReadByte()
  if err1171 != nil { return thrift.NewTProtocolExceptionReadField(2, "_nodeId", p.ThriftName(), err1171); }
  p._nodeId = v1170
  return err
}

func (p *GetNodeClassInformationArgs) ReadField_nodeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *GetNodeClassInformationArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1172, err1173 := iprot.ReadByte()
  if err1173 != nil { return thrift.NewTProtocolExceptionReadField(3, "_commandClassId", p.ThriftName(), err1173); }
  p._commandClassId = v1172
  return err
}

func (p *GetNodeClassInformationArgs) ReadField_commandClassId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *GetNodeClassInformationArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetNodeClassInformation_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNodeClassInformationArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_homeId", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._homeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  return err
}

func (p *GetNodeClassInformationArgs) WriteField_homeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetNodeClassInformationArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_nodeId", thrift.BYTE, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._nodeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  return err
}

func (p *GetNodeClassInformationArgs) WriteField_nodeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *GetNodeClassInformationArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_commandClassId", thrift.BYTE, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_commandClassId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._commandClassId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_commandClassId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_commandClassId", p.ThriftName(), err); }
  return err
}

func (p *GetNodeClassInformationArgs) WriteField_commandClassId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *GetNodeClassInformationArgs) TStructName() string {
  return "GetNodeClassInformationArgs"
}

func (p *GetNodeClassInformationArgs) ThriftName() string {
  return "GetNodeClassInformation_args"
}

func (p *GetNodeClassInformationArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetNodeClassInformationArgs(%+v)", *p)
}

func (p *GetNodeClassInformationArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetNodeClassInformationArgs)
  if !ok {
    return 0, false
  }
  if p._homeId != data._homeId {
    if p._homeId < data._homeId {
      return -1, true
    }
    return 1, true
  }
  if p._nodeId != data._nodeId {
    if p._nodeId < data._nodeId {
      return -1, true
    }
    return 1, true
  }
  if p._commandClassId != data._commandClassId {
    if p._commandClassId < data._commandClassId {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetNodeClassInformationArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._homeId
  case 2: return p._nodeId
  case 3: return p._commandClassId
  }
  return nil
}

func (p *GetNodeClassInformationArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    thrift.NewTField("_commandClassId", thrift.BYTE, 3),
    })
}

/**
 * Attributes:
 *  - Success
 */
type GetNodeClassInformationResult struct {
  thrift.TStruct
  Success *BoolGetNodeClassInformation "success"; // 0
}

func NewGetNodeClassInformationResult() *GetNodeClassInformationResult {
  output := &GetNodeClassInformationResult{
    TStruct:thrift.NewTStruct("GetNodeClassInformation_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    }),
  }
  {
  }
  return output
}

func (p *GetNodeClassInformationResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNodeClassInformationResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Success = NewBoolGetNodeClassInformation()
  err1176 := p.Success.Read(iprot)
  if err1176 != nil { return thrift.NewTProtocolExceptionReadStruct("p.SuccessBool_GetNodeClassInformation", err1176); }
  return err
}

func (p *GetNodeClassInformationResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetNodeClassInformationResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetNodeClassInformation_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNodeClassInformationResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = p.Success.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("Bool_GetNodeClassInformation", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *GetNodeClassInformationResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetNodeClassInformationResult) TStructName() string {
  return "GetNodeClassInformationResult"
}

func (p *GetNodeClassInformationResult) ThriftName() string {
  return "GetNodeClassInformation_result"
}

func (p *GetNodeClassInformationResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetNodeClassInformationResult(%+v)", *p)
}

func (p *GetNodeClassInformationResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetNodeClassInformationResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetNodeClassInformationResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *GetNodeClassInformationResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    })
}

/**
 * Attributes:
 *  - _id
 */
type GetValueLabelArgs struct {
  thrift.TStruct
  _id *RemoteValueID "_id"; // 1
}

func NewGetValueLabelArgs() *GetValueLabelArgs {
  output := &GetValueLabelArgs{
    TStruct:thrift.NewTStruct("GetValueLabel_args", []thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetValueLabelArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_id" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetValueLabelArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p._id = NewRemoteValueID()
  err1179 := p._id.Read(iprot)
  if err1179 != nil { return thrift.NewTProtocolExceptionReadStruct("p._idRemoteValueID", err1179); }
  return err
}

func (p *GetValueLabelArgs) ReadField_id(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetValueLabelArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetValueLabel_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetValueLabelArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._id != nil {
    err = oprot.WriteFieldBegin("_id", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
    err = p._id.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RemoteValueID", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
  }
  return err
}

func (p *GetValueLabelArgs) WriteField_id(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetValueLabelArgs) TStructName() string {
  return "GetValueLabelArgs"
}

func (p *GetValueLabelArgs) ThriftName() string {
  return "GetValueLabel_args"
}

func (p *GetValueLabelArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetValueLabelArgs(%+v)", *p)
}

func (p *GetValueLabelArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetValueLabelArgs)
  if !ok {
    return 0, false
  }
  if cmp, ok := p._id.CompareTo(data._id); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetValueLabelArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._id
  }
  return nil
}

func (p *GetValueLabelArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - Success
 */
type GetValueLabelResult struct {
  thrift.TStruct
  Success string "success"; // 0
}

func NewGetValueLabelResult() *GetValueLabelResult {
  output := &GetValueLabelResult{
    TStruct:thrift.NewTStruct("GetValueLabel_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRING, 0),
    }),
  }
  {
  }
  return output
}

func (p *GetValueLabelResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetValueLabelResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1180, err1181 := iprot.ReadString()
  if err1181 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1181); }
  p.Success = v1180
  return err
}

func (p *GetValueLabelResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetValueLabelResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetValueLabel_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetValueLabelResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.STRING, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *GetValueLabelResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetValueLabelResult) TStructName() string {
  return "GetValueLabelResult"
}

func (p *GetValueLabelResult) ThriftName() string {
  return "GetValueLabel_result"
}

func (p *GetValueLabelResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetValueLabelResult(%+v)", *p)
}

func (p *GetValueLabelResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetValueLabelResult)
  if !ok {
    return 0, false
  }
  if p.Success != data.Success {
    if p.Success < data.Success {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetValueLabelResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *GetValueLabelResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRING, 0),
    })
}

/**
 * Attributes:
 *  - _id
 *  - _value
 */
type SetValueLabelArgs struct {
  thrift.TStruct
  _id *RemoteValueID "_id"; // 1
  _value string "_value"; // 2
}

func NewSetValueLabelArgs() *SetValueLabelArgs {
  output := &SetValueLabelArgs{
    TStruct:thrift.NewTStruct("SetValueLabel_args", []thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    thrift.NewTField("_value", thrift.STRING, 2),
    }),
  }
  {
  }
  return output
}

func (p *SetValueLabelArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_id" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_value" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SetValueLabelArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p._id = NewRemoteValueID()
  err1184 := p._id.Read(iprot)
  if err1184 != nil { return thrift.NewTProtocolExceptionReadStruct("p._idRemoteValueID", err1184); }
  return err
}

func (p *SetValueLabelArgs) ReadField_id(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *SetValueLabelArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1185, err1186 := iprot.ReadString()
  if err1186 != nil { return thrift.NewTProtocolExceptionReadField(2, "_value", p.ThriftName(), err1186); }
  p._value = v1185
  return err
}

func (p *SetValueLabelArgs) ReadField_value(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *SetValueLabelArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SetValueLabel_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SetValueLabelArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._id != nil {
    err = oprot.WriteFieldBegin("_id", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
    err = p._id.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RemoteValueID", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
  }
  return err
}

func (p *SetValueLabelArgs) WriteField_id(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *SetValueLabelArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_value", thrift.STRING, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_value", p.ThriftName(), err); }
  err = oprot.WriteString(string(p._value))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_value", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_value", p.ThriftName(), err); }
  return err
}

func (p *SetValueLabelArgs) WriteField_value(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *SetValueLabelArgs) TStructName() string {
  return "SetValueLabelArgs"
}

func (p *SetValueLabelArgs) ThriftName() string {
  return "SetValueLabel_args"
}

func (p *SetValueLabelArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetValueLabelArgs(%+v)", *p)
}

func (p *SetValueLabelArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SetValueLabelArgs)
  if !ok {
    return 0, false
  }
  if cmp, ok := p._id.CompareTo(data._id); !ok || cmp != 0 {
    return cmp, ok
  }
  if p._value != data._value {
    if p._value < data._value {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *SetValueLabelArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._id
  case 2: return p._value
  }
  return nil
}

func (p *SetValueLabelArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    thrift.NewTField("_value", thrift.STRING, 2),
    })
}

type SetValueLabelResult struct {
  thrift.TStruct
}

func NewSetValueLabelResult() *SetValueLabelResult {
  output := &SetValueLabelResult{
    TStruct:thrift.NewTStruct("SetValueLabel_result", []thrift.TField{
    }),
  }
  {
  }
  return output
}

func (p *SetValueLabelResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    err = iprot.Skip(fieldTypeId)
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SetValueLabelResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SetValueLabel_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SetValueLabelResult) TStructName() string {
  return "SetValueLabelResult"
}

func (p *SetValueLabelResult) ThriftName() string {
  return "SetValueLabel_result"
}

func (p *SetValueLabelResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetValueLabelResult(%+v)", *p)
}

func (p *SetValueLabelResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  _, ok := other.(*SetValueLabelResult)
  if !ok {
    return 0, false
  }
  return 0, true
}

func (p *SetValueLabelResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  }
  return nil
}

func (p *SetValueLabelResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    })
}

/**
 * Attributes:
 *  - _id
 */
type GetValueUnitsArgs struct {
  thrift.TStruct
  _id *RemoteValueID "_id"; // 1
}

func NewGetValueUnitsArgs() *GetValueUnitsArgs {
  output := &GetValueUnitsArgs{
    TStruct:thrift.NewTStruct("GetValueUnits_args", []thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetValueUnitsArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_id" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetValueUnitsArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p._id = NewRemoteValueID()
  err1189 := p._id.Read(iprot)
  if err1189 != nil { return thrift.NewTProtocolExceptionReadStruct("p._idRemoteValueID", err1189); }
  return err
}

func (p *GetValueUnitsArgs) ReadField_id(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetValueUnitsArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetValueUnits_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetValueUnitsArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._id != nil {
    err = oprot.WriteFieldBegin("_id", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
    err = p._id.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RemoteValueID", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
  }
  return err
}

func (p *GetValueUnitsArgs) WriteField_id(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetValueUnitsArgs) TStructName() string {
  return "GetValueUnitsArgs"
}

func (p *GetValueUnitsArgs) ThriftName() string {
  return "GetValueUnits_args"
}

func (p *GetValueUnitsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetValueUnitsArgs(%+v)", *p)
}

func (p *GetValueUnitsArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetValueUnitsArgs)
  if !ok {
    return 0, false
  }
  if cmp, ok := p._id.CompareTo(data._id); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetValueUnitsArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._id
  }
  return nil
}

func (p *GetValueUnitsArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - Success
 */
type GetValueUnitsResult struct {
  thrift.TStruct
  Success string "success"; // 0
}

func NewGetValueUnitsResult() *GetValueUnitsResult {
  output := &GetValueUnitsResult{
    TStruct:thrift.NewTStruct("GetValueUnits_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRING, 0),
    }),
  }
  {
  }
  return output
}

func (p *GetValueUnitsResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetValueUnitsResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1190, err1191 := iprot.ReadString()
  if err1191 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1191); }
  p.Success = v1190
  return err
}

func (p *GetValueUnitsResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetValueUnitsResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetValueUnits_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetValueUnitsResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.STRING, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *GetValueUnitsResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetValueUnitsResult) TStructName() string {
  return "GetValueUnitsResult"
}

func (p *GetValueUnitsResult) ThriftName() string {
  return "GetValueUnits_result"
}

func (p *GetValueUnitsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetValueUnitsResult(%+v)", *p)
}

func (p *GetValueUnitsResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetValueUnitsResult)
  if !ok {
    return 0, false
  }
  if p.Success != data.Success {
    if p.Success < data.Success {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetValueUnitsResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *GetValueUnitsResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRING, 0),
    })
}

/**
 * Attributes:
 *  - _id
 *  - _value
 */
type SetValueUnitsArgs struct {
  thrift.TStruct
  _id *RemoteValueID "_id"; // 1
  _value string "_value"; // 2
}

func NewSetValueUnitsArgs() *SetValueUnitsArgs {
  output := &SetValueUnitsArgs{
    TStruct:thrift.NewTStruct("SetValueUnits_args", []thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    thrift.NewTField("_value", thrift.STRING, 2),
    }),
  }
  {
  }
  return output
}

func (p *SetValueUnitsArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_id" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_value" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SetValueUnitsArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p._id = NewRemoteValueID()
  err1194 := p._id.Read(iprot)
  if err1194 != nil { return thrift.NewTProtocolExceptionReadStruct("p._idRemoteValueID", err1194); }
  return err
}

func (p *SetValueUnitsArgs) ReadField_id(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *SetValueUnitsArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1195, err1196 := iprot.ReadString()
  if err1196 != nil { return thrift.NewTProtocolExceptionReadField(2, "_value", p.ThriftName(), err1196); }
  p._value = v1195
  return err
}

func (p *SetValueUnitsArgs) ReadField_value(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *SetValueUnitsArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SetValueUnits_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SetValueUnitsArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._id != nil {
    err = oprot.WriteFieldBegin("_id", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
    err = p._id.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RemoteValueID", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
  }
  return err
}

func (p *SetValueUnitsArgs) WriteField_id(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *SetValueUnitsArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_value", thrift.STRING, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_value", p.ThriftName(), err); }
  err = oprot.WriteString(string(p._value))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_value", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_value", p.ThriftName(), err); }
  return err
}

func (p *SetValueUnitsArgs) WriteField_value(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *SetValueUnitsArgs) TStructName() string {
  return "SetValueUnitsArgs"
}

func (p *SetValueUnitsArgs) ThriftName() string {
  return "SetValueUnits_args"
}

func (p *SetValueUnitsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetValueUnitsArgs(%+v)", *p)
}

func (p *SetValueUnitsArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SetValueUnitsArgs)
  if !ok {
    return 0, false
  }
  if cmp, ok := p._id.CompareTo(data._id); !ok || cmp != 0 {
    return cmp, ok
  }
  if p._value != data._value {
    if p._value < data._value {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *SetValueUnitsArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._id
  case 2: return p._value
  }
  return nil
}

func (p *SetValueUnitsArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    thrift.NewTField("_value", thrift.STRING, 2),
    })
}

type SetValueUnitsResult struct {
  thrift.TStruct
}

func NewSetValueUnitsResult() *SetValueUnitsResult {
  output := &SetValueUnitsResult{
    TStruct:thrift.NewTStruct("SetValueUnits_result", []thrift.TField{
    }),
  }
  {
  }
  return output
}

func (p *SetValueUnitsResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    err = iprot.Skip(fieldTypeId)
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SetValueUnitsResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SetValueUnits_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SetValueUnitsResult) TStructName() string {
  return "SetValueUnitsResult"
}

func (p *SetValueUnitsResult) ThriftName() string {
  return "SetValueUnits_result"
}

func (p *SetValueUnitsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetValueUnitsResult(%+v)", *p)
}

func (p *SetValueUnitsResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  _, ok := other.(*SetValueUnitsResult)
  if !ok {
    return 0, false
  }
  return 0, true
}

func (p *SetValueUnitsResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  }
  return nil
}

func (p *SetValueUnitsResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    })
}

/**
 * Attributes:
 *  - _id
 */
type GetValueHelpArgs struct {
  thrift.TStruct
  _id *RemoteValueID "_id"; // 1
}

func NewGetValueHelpArgs() *GetValueHelpArgs {
  output := &GetValueHelpArgs{
    TStruct:thrift.NewTStruct("GetValueHelp_args", []thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetValueHelpArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_id" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetValueHelpArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p._id = NewRemoteValueID()
  err1199 := p._id.Read(iprot)
  if err1199 != nil { return thrift.NewTProtocolExceptionReadStruct("p._idRemoteValueID", err1199); }
  return err
}

func (p *GetValueHelpArgs) ReadField_id(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetValueHelpArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetValueHelp_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetValueHelpArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._id != nil {
    err = oprot.WriteFieldBegin("_id", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
    err = p._id.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RemoteValueID", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
  }
  return err
}

func (p *GetValueHelpArgs) WriteField_id(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetValueHelpArgs) TStructName() string {
  return "GetValueHelpArgs"
}

func (p *GetValueHelpArgs) ThriftName() string {
  return "GetValueHelp_args"
}

func (p *GetValueHelpArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetValueHelpArgs(%+v)", *p)
}

func (p *GetValueHelpArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetValueHelpArgs)
  if !ok {
    return 0, false
  }
  if cmp, ok := p._id.CompareTo(data._id); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetValueHelpArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._id
  }
  return nil
}

func (p *GetValueHelpArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - Success
 */
type GetValueHelpResult struct {
  thrift.TStruct
  Success string "success"; // 0
}

func NewGetValueHelpResult() *GetValueHelpResult {
  output := &GetValueHelpResult{
    TStruct:thrift.NewTStruct("GetValueHelp_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRING, 0),
    }),
  }
  {
  }
  return output
}

func (p *GetValueHelpResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetValueHelpResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1200, err1201 := iprot.ReadString()
  if err1201 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1201); }
  p.Success = v1200
  return err
}

func (p *GetValueHelpResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetValueHelpResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetValueHelp_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetValueHelpResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.STRING, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *GetValueHelpResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetValueHelpResult) TStructName() string {
  return "GetValueHelpResult"
}

func (p *GetValueHelpResult) ThriftName() string {
  return "GetValueHelp_result"
}

func (p *GetValueHelpResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetValueHelpResult(%+v)", *p)
}

func (p *GetValueHelpResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetValueHelpResult)
  if !ok {
    return 0, false
  }
  if p.Success != data.Success {
    if p.Success < data.Success {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetValueHelpResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *GetValueHelpResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRING, 0),
    })
}

/**
 * Attributes:
 *  - _id
 *  - _value
 */
type SetValueHelpArgs struct {
  thrift.TStruct
  _id *RemoteValueID "_id"; // 1
  _value string "_value"; // 2
}

func NewSetValueHelpArgs() *SetValueHelpArgs {
  output := &SetValueHelpArgs{
    TStruct:thrift.NewTStruct("SetValueHelp_args", []thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    thrift.NewTField("_value", thrift.STRING, 2),
    }),
  }
  {
  }
  return output
}

func (p *SetValueHelpArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_id" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_value" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SetValueHelpArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p._id = NewRemoteValueID()
  err1204 := p._id.Read(iprot)
  if err1204 != nil { return thrift.NewTProtocolExceptionReadStruct("p._idRemoteValueID", err1204); }
  return err
}

func (p *SetValueHelpArgs) ReadField_id(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *SetValueHelpArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1205, err1206 := iprot.ReadString()
  if err1206 != nil { return thrift.NewTProtocolExceptionReadField(2, "_value", p.ThriftName(), err1206); }
  p._value = v1205
  return err
}

func (p *SetValueHelpArgs) ReadField_value(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *SetValueHelpArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SetValueHelp_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SetValueHelpArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._id != nil {
    err = oprot.WriteFieldBegin("_id", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
    err = p._id.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RemoteValueID", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
  }
  return err
}

func (p *SetValueHelpArgs) WriteField_id(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *SetValueHelpArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_value", thrift.STRING, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_value", p.ThriftName(), err); }
  err = oprot.WriteString(string(p._value))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_value", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_value", p.ThriftName(), err); }
  return err
}

func (p *SetValueHelpArgs) WriteField_value(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *SetValueHelpArgs) TStructName() string {
  return "SetValueHelpArgs"
}

func (p *SetValueHelpArgs) ThriftName() string {
  return "SetValueHelp_args"
}

func (p *SetValueHelpArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetValueHelpArgs(%+v)", *p)
}

func (p *SetValueHelpArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SetValueHelpArgs)
  if !ok {
    return 0, false
  }
  if cmp, ok := p._id.CompareTo(data._id); !ok || cmp != 0 {
    return cmp, ok
  }
  if p._value != data._value {
    if p._value < data._value {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *SetValueHelpArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._id
  case 2: return p._value
  }
  return nil
}

func (p *SetValueHelpArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    thrift.NewTField("_value", thrift.STRING, 2),
    })
}

type SetValueHelpResult struct {
  thrift.TStruct
}

func NewSetValueHelpResult() *SetValueHelpResult {
  output := &SetValueHelpResult{
    TStruct:thrift.NewTStruct("SetValueHelp_result", []thrift.TField{
    }),
  }
  {
  }
  return output
}

func (p *SetValueHelpResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    err = iprot.Skip(fieldTypeId)
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SetValueHelpResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SetValueHelp_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SetValueHelpResult) TStructName() string {
  return "SetValueHelpResult"
}

func (p *SetValueHelpResult) ThriftName() string {
  return "SetValueHelp_result"
}

func (p *SetValueHelpResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetValueHelpResult(%+v)", *p)
}

func (p *SetValueHelpResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  _, ok := other.(*SetValueHelpResult)
  if !ok {
    return 0, false
  }
  return 0, true
}

func (p *SetValueHelpResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  }
  return nil
}

func (p *SetValueHelpResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    })
}

/**
 * Attributes:
 *  - _id
 */
type GetValueMinArgs struct {
  thrift.TStruct
  _id *RemoteValueID "_id"; // 1
}

func NewGetValueMinArgs() *GetValueMinArgs {
  output := &GetValueMinArgs{
    TStruct:thrift.NewTStruct("GetValueMin_args", []thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetValueMinArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_id" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetValueMinArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p._id = NewRemoteValueID()
  err1209 := p._id.Read(iprot)
  if err1209 != nil { return thrift.NewTProtocolExceptionReadStruct("p._idRemoteValueID", err1209); }
  return err
}

func (p *GetValueMinArgs) ReadField_id(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetValueMinArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetValueMin_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetValueMinArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._id != nil {
    err = oprot.WriteFieldBegin("_id", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
    err = p._id.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RemoteValueID", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
  }
  return err
}

func (p *GetValueMinArgs) WriteField_id(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetValueMinArgs) TStructName() string {
  return "GetValueMinArgs"
}

func (p *GetValueMinArgs) ThriftName() string {
  return "GetValueMin_args"
}

func (p *GetValueMinArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetValueMinArgs(%+v)", *p)
}

func (p *GetValueMinArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetValueMinArgs)
  if !ok {
    return 0, false
  }
  if cmp, ok := p._id.CompareTo(data._id); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetValueMinArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._id
  }
  return nil
}

func (p *GetValueMinArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - Success
 */
type GetValueMinResult struct {
  thrift.TStruct
  Success int32 "success"; // 0
}

func NewGetValueMinResult() *GetValueMinResult {
  output := &GetValueMinResult{
    TStruct:thrift.NewTStruct("GetValueMin_result", []thrift.TField{
    thrift.NewTField("success", thrift.I32, 0),
    }),
  }
  {
  }
  return output
}

func (p *GetValueMinResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetValueMinResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1210, err1211 := iprot.ReadI32()
  if err1211 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1211); }
  p.Success = v1210
  return err
}

func (p *GetValueMinResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetValueMinResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetValueMin_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetValueMinResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.I32, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *GetValueMinResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetValueMinResult) TStructName() string {
  return "GetValueMinResult"
}

func (p *GetValueMinResult) ThriftName() string {
  return "GetValueMin_result"
}

func (p *GetValueMinResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetValueMinResult(%+v)", *p)
}

func (p *GetValueMinResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetValueMinResult)
  if !ok {
    return 0, false
  }
  if p.Success != data.Success {
    if p.Success < data.Success {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetValueMinResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *GetValueMinResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.I32, 0),
    })
}

/**
 * Attributes:
 *  - _id
 */
type GetValueMaxArgs struct {
  thrift.TStruct
  _id *RemoteValueID "_id"; // 1
}

func NewGetValueMaxArgs() *GetValueMaxArgs {
  output := &GetValueMaxArgs{
    TStruct:thrift.NewTStruct("GetValueMax_args", []thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetValueMaxArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_id" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetValueMaxArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p._id = NewRemoteValueID()
  err1214 := p._id.Read(iprot)
  if err1214 != nil { return thrift.NewTProtocolExceptionReadStruct("p._idRemoteValueID", err1214); }
  return err
}

func (p *GetValueMaxArgs) ReadField_id(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetValueMaxArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetValueMax_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetValueMaxArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._id != nil {
    err = oprot.WriteFieldBegin("_id", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
    err = p._id.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RemoteValueID", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
  }
  return err
}

func (p *GetValueMaxArgs) WriteField_id(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetValueMaxArgs) TStructName() string {
  return "GetValueMaxArgs"
}

func (p *GetValueMaxArgs) ThriftName() string {
  return "GetValueMax_args"
}

func (p *GetValueMaxArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetValueMaxArgs(%+v)", *p)
}

func (p *GetValueMaxArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetValueMaxArgs)
  if !ok {
    return 0, false
  }
  if cmp, ok := p._id.CompareTo(data._id); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetValueMaxArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._id
  }
  return nil
}

func (p *GetValueMaxArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - Success
 */
type GetValueMaxResult struct {
  thrift.TStruct
  Success int32 "success"; // 0
}

func NewGetValueMaxResult() *GetValueMaxResult {
  output := &GetValueMaxResult{
    TStruct:thrift.NewTStruct("GetValueMax_result", []thrift.TField{
    thrift.NewTField("success", thrift.I32, 0),
    }),
  }
  {
  }
  return output
}

func (p *GetValueMaxResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetValueMaxResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1215, err1216 := iprot.ReadI32()
  if err1216 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1216); }
  p.Success = v1215
  return err
}

func (p *GetValueMaxResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetValueMaxResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetValueMax_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetValueMaxResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.I32, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *GetValueMaxResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetValueMaxResult) TStructName() string {
  return "GetValueMaxResult"
}

func (p *GetValueMaxResult) ThriftName() string {
  return "GetValueMax_result"
}

func (p *GetValueMaxResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetValueMaxResult(%+v)", *p)
}

func (p *GetValueMaxResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetValueMaxResult)
  if !ok {
    return 0, false
  }
  if p.Success != data.Success {
    if p.Success < data.Success {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetValueMaxResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *GetValueMaxResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.I32, 0),
    })
}

/**
 * Attributes:
 *  - _id
 */
type IsValueReadOnlyArgs struct {
  thrift.TStruct
  _id *RemoteValueID "_id"; // 1
}

func NewIsValueReadOnlyArgs() *IsValueReadOnlyArgs {
  output := &IsValueReadOnlyArgs{
    TStruct:thrift.NewTStruct("IsValueReadOnly_args", []thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *IsValueReadOnlyArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_id" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *IsValueReadOnlyArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p._id = NewRemoteValueID()
  err1219 := p._id.Read(iprot)
  if err1219 != nil { return thrift.NewTProtocolExceptionReadStruct("p._idRemoteValueID", err1219); }
  return err
}

func (p *IsValueReadOnlyArgs) ReadField_id(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *IsValueReadOnlyArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("IsValueReadOnly_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *IsValueReadOnlyArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._id != nil {
    err = oprot.WriteFieldBegin("_id", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
    err = p._id.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RemoteValueID", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
  }
  return err
}

func (p *IsValueReadOnlyArgs) WriteField_id(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *IsValueReadOnlyArgs) TStructName() string {
  return "IsValueReadOnlyArgs"
}

func (p *IsValueReadOnlyArgs) ThriftName() string {
  return "IsValueReadOnly_args"
}

func (p *IsValueReadOnlyArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IsValueReadOnlyArgs(%+v)", *p)
}

func (p *IsValueReadOnlyArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*IsValueReadOnlyArgs)
  if !ok {
    return 0, false
  }
  if cmp, ok := p._id.CompareTo(data._id); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *IsValueReadOnlyArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._id
  }
  return nil
}

func (p *IsValueReadOnlyArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - Success
 */
type IsValueReadOnlyResult struct {
  thrift.TStruct
  Success bool "success"; // 0
}

func NewIsValueReadOnlyResult() *IsValueReadOnlyResult {
  output := &IsValueReadOnlyResult{
    TStruct:thrift.NewTStruct("IsValueReadOnly_result", []thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    }),
  }
  {
  }
  return output
}

func (p *IsValueReadOnlyResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *IsValueReadOnlyResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1220, err1221 := iprot.ReadBool()
  if err1221 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1221); }
  p.Success = v1220
  return err
}

func (p *IsValueReadOnlyResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *IsValueReadOnlyResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("IsValueReadOnly_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *IsValueReadOnlyResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BOOL, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *IsValueReadOnlyResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *IsValueReadOnlyResult) TStructName() string {
  return "IsValueReadOnlyResult"
}

func (p *IsValueReadOnlyResult) ThriftName() string {
  return "IsValueReadOnly_result"
}

func (p *IsValueReadOnlyResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IsValueReadOnlyResult(%+v)", *p)
}

func (p *IsValueReadOnlyResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*IsValueReadOnlyResult)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Success, data.Success); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *IsValueReadOnlyResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *IsValueReadOnlyResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    })
}

/**
 * Attributes:
 *  - _id
 */
type IsValueWriteOnlyArgs struct {
  thrift.TStruct
  _id *RemoteValueID "_id"; // 1
}

func NewIsValueWriteOnlyArgs() *IsValueWriteOnlyArgs {
  output := &IsValueWriteOnlyArgs{
    TStruct:thrift.NewTStruct("IsValueWriteOnly_args", []thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *IsValueWriteOnlyArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_id" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *IsValueWriteOnlyArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p._id = NewRemoteValueID()
  err1224 := p._id.Read(iprot)
  if err1224 != nil { return thrift.NewTProtocolExceptionReadStruct("p._idRemoteValueID", err1224); }
  return err
}

func (p *IsValueWriteOnlyArgs) ReadField_id(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *IsValueWriteOnlyArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("IsValueWriteOnly_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *IsValueWriteOnlyArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._id != nil {
    err = oprot.WriteFieldBegin("_id", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
    err = p._id.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RemoteValueID", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
  }
  return err
}

func (p *IsValueWriteOnlyArgs) WriteField_id(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *IsValueWriteOnlyArgs) TStructName() string {
  return "IsValueWriteOnlyArgs"
}

func (p *IsValueWriteOnlyArgs) ThriftName() string {
  return "IsValueWriteOnly_args"
}

func (p *IsValueWriteOnlyArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IsValueWriteOnlyArgs(%+v)", *p)
}

func (p *IsValueWriteOnlyArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*IsValueWriteOnlyArgs)
  if !ok {
    return 0, false
  }
  if cmp, ok := p._id.CompareTo(data._id); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *IsValueWriteOnlyArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._id
  }
  return nil
}

func (p *IsValueWriteOnlyArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - Success
 */
type IsValueWriteOnlyResult struct {
  thrift.TStruct
  Success bool "success"; // 0
}

func NewIsValueWriteOnlyResult() *IsValueWriteOnlyResult {
  output := &IsValueWriteOnlyResult{
    TStruct:thrift.NewTStruct("IsValueWriteOnly_result", []thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    }),
  }
  {
  }
  return output
}

func (p *IsValueWriteOnlyResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *IsValueWriteOnlyResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1225, err1226 := iprot.ReadBool()
  if err1226 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1226); }
  p.Success = v1225
  return err
}

func (p *IsValueWriteOnlyResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *IsValueWriteOnlyResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("IsValueWriteOnly_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *IsValueWriteOnlyResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BOOL, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *IsValueWriteOnlyResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *IsValueWriteOnlyResult) TStructName() string {
  return "IsValueWriteOnlyResult"
}

func (p *IsValueWriteOnlyResult) ThriftName() string {
  return "IsValueWriteOnly_result"
}

func (p *IsValueWriteOnlyResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IsValueWriteOnlyResult(%+v)", *p)
}

func (p *IsValueWriteOnlyResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*IsValueWriteOnlyResult)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Success, data.Success); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *IsValueWriteOnlyResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *IsValueWriteOnlyResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    })
}

/**
 * Attributes:
 *  - _id
 */
type IsValueSetArgs struct {
  thrift.TStruct
  _id *RemoteValueID "_id"; // 1
}

func NewIsValueSetArgs() *IsValueSetArgs {
  output := &IsValueSetArgs{
    TStruct:thrift.NewTStruct("IsValueSet_args", []thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *IsValueSetArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_id" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *IsValueSetArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p._id = NewRemoteValueID()
  err1229 := p._id.Read(iprot)
  if err1229 != nil { return thrift.NewTProtocolExceptionReadStruct("p._idRemoteValueID", err1229); }
  return err
}

func (p *IsValueSetArgs) ReadField_id(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *IsValueSetArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("IsValueSet_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *IsValueSetArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._id != nil {
    err = oprot.WriteFieldBegin("_id", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
    err = p._id.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RemoteValueID", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
  }
  return err
}

func (p *IsValueSetArgs) WriteField_id(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *IsValueSetArgs) TStructName() string {
  return "IsValueSetArgs"
}

func (p *IsValueSetArgs) ThriftName() string {
  return "IsValueSet_args"
}

func (p *IsValueSetArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IsValueSetArgs(%+v)", *p)
}

func (p *IsValueSetArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*IsValueSetArgs)
  if !ok {
    return 0, false
  }
  if cmp, ok := p._id.CompareTo(data._id); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *IsValueSetArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._id
  }
  return nil
}

func (p *IsValueSetArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - Success
 */
type IsValueSetResult struct {
  thrift.TStruct
  Success bool "success"; // 0
}

func NewIsValueSetResult() *IsValueSetResult {
  output := &IsValueSetResult{
    TStruct:thrift.NewTStruct("IsValueSet_result", []thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    }),
  }
  {
  }
  return output
}

func (p *IsValueSetResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *IsValueSetResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1230, err1231 := iprot.ReadBool()
  if err1231 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1231); }
  p.Success = v1230
  return err
}

func (p *IsValueSetResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *IsValueSetResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("IsValueSet_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *IsValueSetResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BOOL, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *IsValueSetResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *IsValueSetResult) TStructName() string {
  return "IsValueSetResult"
}

func (p *IsValueSetResult) ThriftName() string {
  return "IsValueSet_result"
}

func (p *IsValueSetResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IsValueSetResult(%+v)", *p)
}

func (p *IsValueSetResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*IsValueSetResult)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Success, data.Success); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *IsValueSetResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *IsValueSetResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    })
}

/**
 * Attributes:
 *  - _id
 */
type GetValueAsBoolArgs struct {
  thrift.TStruct
  _id *RemoteValueID "_id"; // 1
}

func NewGetValueAsBoolArgs() *GetValueAsBoolArgs {
  output := &GetValueAsBoolArgs{
    TStruct:thrift.NewTStruct("GetValueAsBool_args", []thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetValueAsBoolArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_id" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetValueAsBoolArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p._id = NewRemoteValueID()
  err1234 := p._id.Read(iprot)
  if err1234 != nil { return thrift.NewTProtocolExceptionReadStruct("p._idRemoteValueID", err1234); }
  return err
}

func (p *GetValueAsBoolArgs) ReadField_id(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetValueAsBoolArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetValueAsBool_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetValueAsBoolArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._id != nil {
    err = oprot.WriteFieldBegin("_id", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
    err = p._id.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RemoteValueID", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
  }
  return err
}

func (p *GetValueAsBoolArgs) WriteField_id(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetValueAsBoolArgs) TStructName() string {
  return "GetValueAsBoolArgs"
}

func (p *GetValueAsBoolArgs) ThriftName() string {
  return "GetValueAsBool_args"
}

func (p *GetValueAsBoolArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetValueAsBoolArgs(%+v)", *p)
}

func (p *GetValueAsBoolArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetValueAsBoolArgs)
  if !ok {
    return 0, false
  }
  if cmp, ok := p._id.CompareTo(data._id); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetValueAsBoolArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._id
  }
  return nil
}

func (p *GetValueAsBoolArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - Success
 */
type GetValueAsBoolResult struct {
  thrift.TStruct
  Success *BoolBool "success"; // 0
}

func NewGetValueAsBoolResult() *GetValueAsBoolResult {
  output := &GetValueAsBoolResult{
    TStruct:thrift.NewTStruct("GetValueAsBool_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    }),
  }
  {
  }
  return output
}

func (p *GetValueAsBoolResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetValueAsBoolResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Success = NewBoolBool()
  err1237 := p.Success.Read(iprot)
  if err1237 != nil { return thrift.NewTProtocolExceptionReadStruct("p.SuccessBool_Bool", err1237); }
  return err
}

func (p *GetValueAsBoolResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetValueAsBoolResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetValueAsBool_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetValueAsBoolResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = p.Success.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("Bool_Bool", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *GetValueAsBoolResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetValueAsBoolResult) TStructName() string {
  return "GetValueAsBoolResult"
}

func (p *GetValueAsBoolResult) ThriftName() string {
  return "GetValueAsBool_result"
}

func (p *GetValueAsBoolResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetValueAsBoolResult(%+v)", *p)
}

func (p *GetValueAsBoolResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetValueAsBoolResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetValueAsBoolResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *GetValueAsBoolResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    })
}

/**
 * Attributes:
 *  - _id
 */
type GetValueAsByteArgs struct {
  thrift.TStruct
  _id *RemoteValueID "_id"; // 1
}

func NewGetValueAsByteArgs() *GetValueAsByteArgs {
  output := &GetValueAsByteArgs{
    TStruct:thrift.NewTStruct("GetValueAsByte_args", []thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetValueAsByteArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_id" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetValueAsByteArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p._id = NewRemoteValueID()
  err1240 := p._id.Read(iprot)
  if err1240 != nil { return thrift.NewTProtocolExceptionReadStruct("p._idRemoteValueID", err1240); }
  return err
}

func (p *GetValueAsByteArgs) ReadField_id(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetValueAsByteArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetValueAsByte_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetValueAsByteArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._id != nil {
    err = oprot.WriteFieldBegin("_id", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
    err = p._id.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RemoteValueID", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
  }
  return err
}

func (p *GetValueAsByteArgs) WriteField_id(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetValueAsByteArgs) TStructName() string {
  return "GetValueAsByteArgs"
}

func (p *GetValueAsByteArgs) ThriftName() string {
  return "GetValueAsByte_args"
}

func (p *GetValueAsByteArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetValueAsByteArgs(%+v)", *p)
}

func (p *GetValueAsByteArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetValueAsByteArgs)
  if !ok {
    return 0, false
  }
  if cmp, ok := p._id.CompareTo(data._id); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetValueAsByteArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._id
  }
  return nil
}

func (p *GetValueAsByteArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - Success
 */
type GetValueAsByteResult struct {
  thrift.TStruct
  Success *BoolUInt8 "success"; // 0
}

func NewGetValueAsByteResult() *GetValueAsByteResult {
  output := &GetValueAsByteResult{
    TStruct:thrift.NewTStruct("GetValueAsByte_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    }),
  }
  {
  }
  return output
}

func (p *GetValueAsByteResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetValueAsByteResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Success = NewBoolUInt8()
  err1243 := p.Success.Read(iprot)
  if err1243 != nil { return thrift.NewTProtocolExceptionReadStruct("p.SuccessBool_UInt8", err1243); }
  return err
}

func (p *GetValueAsByteResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetValueAsByteResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetValueAsByte_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetValueAsByteResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = p.Success.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("Bool_UInt8", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *GetValueAsByteResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetValueAsByteResult) TStructName() string {
  return "GetValueAsByteResult"
}

func (p *GetValueAsByteResult) ThriftName() string {
  return "GetValueAsByte_result"
}

func (p *GetValueAsByteResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetValueAsByteResult(%+v)", *p)
}

func (p *GetValueAsByteResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetValueAsByteResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetValueAsByteResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *GetValueAsByteResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    })
}

/**
 * Attributes:
 *  - _id
 */
type GetValueAsFloatArgs struct {
  thrift.TStruct
  _id *RemoteValueID "_id"; // 1
}

func NewGetValueAsFloatArgs() *GetValueAsFloatArgs {
  output := &GetValueAsFloatArgs{
    TStruct:thrift.NewTStruct("GetValueAsFloat_args", []thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetValueAsFloatArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_id" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetValueAsFloatArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p._id = NewRemoteValueID()
  err1246 := p._id.Read(iprot)
  if err1246 != nil { return thrift.NewTProtocolExceptionReadStruct("p._idRemoteValueID", err1246); }
  return err
}

func (p *GetValueAsFloatArgs) ReadField_id(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetValueAsFloatArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetValueAsFloat_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetValueAsFloatArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._id != nil {
    err = oprot.WriteFieldBegin("_id", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
    err = p._id.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RemoteValueID", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
  }
  return err
}

func (p *GetValueAsFloatArgs) WriteField_id(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetValueAsFloatArgs) TStructName() string {
  return "GetValueAsFloatArgs"
}

func (p *GetValueAsFloatArgs) ThriftName() string {
  return "GetValueAsFloat_args"
}

func (p *GetValueAsFloatArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetValueAsFloatArgs(%+v)", *p)
}

func (p *GetValueAsFloatArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetValueAsFloatArgs)
  if !ok {
    return 0, false
  }
  if cmp, ok := p._id.CompareTo(data._id); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetValueAsFloatArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._id
  }
  return nil
}

func (p *GetValueAsFloatArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - Success
 */
type GetValueAsFloatResult struct {
  thrift.TStruct
  Success *BoolFloat "success"; // 0
}

func NewGetValueAsFloatResult() *GetValueAsFloatResult {
  output := &GetValueAsFloatResult{
    TStruct:thrift.NewTStruct("GetValueAsFloat_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    }),
  }
  {
  }
  return output
}

func (p *GetValueAsFloatResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetValueAsFloatResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Success = NewBoolFloat()
  err1249 := p.Success.Read(iprot)
  if err1249 != nil { return thrift.NewTProtocolExceptionReadStruct("p.SuccessBool_Float", err1249); }
  return err
}

func (p *GetValueAsFloatResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetValueAsFloatResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetValueAsFloat_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetValueAsFloatResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = p.Success.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("Bool_Float", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *GetValueAsFloatResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetValueAsFloatResult) TStructName() string {
  return "GetValueAsFloatResult"
}

func (p *GetValueAsFloatResult) ThriftName() string {
  return "GetValueAsFloat_result"
}

func (p *GetValueAsFloatResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetValueAsFloatResult(%+v)", *p)
}

func (p *GetValueAsFloatResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetValueAsFloatResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetValueAsFloatResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *GetValueAsFloatResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    })
}

/**
 * Attributes:
 *  - _id
 */
type GetValueAsIntArgs struct {
  thrift.TStruct
  _id *RemoteValueID "_id"; // 1
}

func NewGetValueAsIntArgs() *GetValueAsIntArgs {
  output := &GetValueAsIntArgs{
    TStruct:thrift.NewTStruct("GetValueAsInt_args", []thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetValueAsIntArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_id" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetValueAsIntArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p._id = NewRemoteValueID()
  err1252 := p._id.Read(iprot)
  if err1252 != nil { return thrift.NewTProtocolExceptionReadStruct("p._idRemoteValueID", err1252); }
  return err
}

func (p *GetValueAsIntArgs) ReadField_id(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetValueAsIntArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetValueAsInt_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetValueAsIntArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._id != nil {
    err = oprot.WriteFieldBegin("_id", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
    err = p._id.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RemoteValueID", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
  }
  return err
}

func (p *GetValueAsIntArgs) WriteField_id(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetValueAsIntArgs) TStructName() string {
  return "GetValueAsIntArgs"
}

func (p *GetValueAsIntArgs) ThriftName() string {
  return "GetValueAsInt_args"
}

func (p *GetValueAsIntArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetValueAsIntArgs(%+v)", *p)
}

func (p *GetValueAsIntArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetValueAsIntArgs)
  if !ok {
    return 0, false
  }
  if cmp, ok := p._id.CompareTo(data._id); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetValueAsIntArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._id
  }
  return nil
}

func (p *GetValueAsIntArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - Success
 */
type GetValueAsIntResult struct {
  thrift.TStruct
  Success *BoolInt "success"; // 0
}

func NewGetValueAsIntResult() *GetValueAsIntResult {
  output := &GetValueAsIntResult{
    TStruct:thrift.NewTStruct("GetValueAsInt_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    }),
  }
  {
  }
  return output
}

func (p *GetValueAsIntResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetValueAsIntResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Success = NewBoolInt()
  err1255 := p.Success.Read(iprot)
  if err1255 != nil { return thrift.NewTProtocolExceptionReadStruct("p.SuccessBool_Int", err1255); }
  return err
}

func (p *GetValueAsIntResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetValueAsIntResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetValueAsInt_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetValueAsIntResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = p.Success.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("Bool_Int", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *GetValueAsIntResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetValueAsIntResult) TStructName() string {
  return "GetValueAsIntResult"
}

func (p *GetValueAsIntResult) ThriftName() string {
  return "GetValueAsInt_result"
}

func (p *GetValueAsIntResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetValueAsIntResult(%+v)", *p)
}

func (p *GetValueAsIntResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetValueAsIntResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetValueAsIntResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *GetValueAsIntResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    })
}

/**
 * Attributes:
 *  - _id
 */
type GetValueAsShortArgs struct {
  thrift.TStruct
  _id *RemoteValueID "_id"; // 1
}

func NewGetValueAsShortArgs() *GetValueAsShortArgs {
  output := &GetValueAsShortArgs{
    TStruct:thrift.NewTStruct("GetValueAsShort_args", []thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetValueAsShortArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_id" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetValueAsShortArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p._id = NewRemoteValueID()
  err1258 := p._id.Read(iprot)
  if err1258 != nil { return thrift.NewTProtocolExceptionReadStruct("p._idRemoteValueID", err1258); }
  return err
}

func (p *GetValueAsShortArgs) ReadField_id(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetValueAsShortArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetValueAsShort_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetValueAsShortArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._id != nil {
    err = oprot.WriteFieldBegin("_id", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
    err = p._id.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RemoteValueID", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
  }
  return err
}

func (p *GetValueAsShortArgs) WriteField_id(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetValueAsShortArgs) TStructName() string {
  return "GetValueAsShortArgs"
}

func (p *GetValueAsShortArgs) ThriftName() string {
  return "GetValueAsShort_args"
}

func (p *GetValueAsShortArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetValueAsShortArgs(%+v)", *p)
}

func (p *GetValueAsShortArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetValueAsShortArgs)
  if !ok {
    return 0, false
  }
  if cmp, ok := p._id.CompareTo(data._id); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetValueAsShortArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._id
  }
  return nil
}

func (p *GetValueAsShortArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - Success
 */
type GetValueAsShortResult struct {
  thrift.TStruct
  Success *BoolInt16 "success"; // 0
}

func NewGetValueAsShortResult() *GetValueAsShortResult {
  output := &GetValueAsShortResult{
    TStruct:thrift.NewTStruct("GetValueAsShort_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    }),
  }
  {
  }
  return output
}

func (p *GetValueAsShortResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetValueAsShortResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Success = NewBoolInt16()
  err1261 := p.Success.Read(iprot)
  if err1261 != nil { return thrift.NewTProtocolExceptionReadStruct("p.SuccessBool_Int16", err1261); }
  return err
}

func (p *GetValueAsShortResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetValueAsShortResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetValueAsShort_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetValueAsShortResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = p.Success.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("Bool_Int16", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *GetValueAsShortResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetValueAsShortResult) TStructName() string {
  return "GetValueAsShortResult"
}

func (p *GetValueAsShortResult) ThriftName() string {
  return "GetValueAsShort_result"
}

func (p *GetValueAsShortResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetValueAsShortResult(%+v)", *p)
}

func (p *GetValueAsShortResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetValueAsShortResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetValueAsShortResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *GetValueAsShortResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    })
}

/**
 * Attributes:
 *  - _id
 */
type GetValueAsStringArgs struct {
  thrift.TStruct
  _id *RemoteValueID "_id"; // 1
}

func NewGetValueAsStringArgs() *GetValueAsStringArgs {
  output := &GetValueAsStringArgs{
    TStruct:thrift.NewTStruct("GetValueAsString_args", []thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetValueAsStringArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_id" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetValueAsStringArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p._id = NewRemoteValueID()
  err1264 := p._id.Read(iprot)
  if err1264 != nil { return thrift.NewTProtocolExceptionReadStruct("p._idRemoteValueID", err1264); }
  return err
}

func (p *GetValueAsStringArgs) ReadField_id(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetValueAsStringArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetValueAsString_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetValueAsStringArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._id != nil {
    err = oprot.WriteFieldBegin("_id", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
    err = p._id.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RemoteValueID", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
  }
  return err
}

func (p *GetValueAsStringArgs) WriteField_id(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetValueAsStringArgs) TStructName() string {
  return "GetValueAsStringArgs"
}

func (p *GetValueAsStringArgs) ThriftName() string {
  return "GetValueAsString_args"
}

func (p *GetValueAsStringArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetValueAsStringArgs(%+v)", *p)
}

func (p *GetValueAsStringArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetValueAsStringArgs)
  if !ok {
    return 0, false
  }
  if cmp, ok := p._id.CompareTo(data._id); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetValueAsStringArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._id
  }
  return nil
}

func (p *GetValueAsStringArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - Success
 */
type GetValueAsStringResult struct {
  thrift.TStruct
  Success *BoolString "success"; // 0
}

func NewGetValueAsStringResult() *GetValueAsStringResult {
  output := &GetValueAsStringResult{
    TStruct:thrift.NewTStruct("GetValueAsString_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    }),
  }
  {
  }
  return output
}

func (p *GetValueAsStringResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetValueAsStringResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Success = NewBoolString()
  err1267 := p.Success.Read(iprot)
  if err1267 != nil { return thrift.NewTProtocolExceptionReadStruct("p.SuccessBool_String", err1267); }
  return err
}

func (p *GetValueAsStringResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetValueAsStringResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetValueAsString_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetValueAsStringResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = p.Success.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("Bool_String", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *GetValueAsStringResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetValueAsStringResult) TStructName() string {
  return "GetValueAsStringResult"
}

func (p *GetValueAsStringResult) ThriftName() string {
  return "GetValueAsString_result"
}

func (p *GetValueAsStringResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetValueAsStringResult(%+v)", *p)
}

func (p *GetValueAsStringResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetValueAsStringResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetValueAsStringResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *GetValueAsStringResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    })
}

/**
 * Attributes:
 *  - _id
 */
type GetValueListSelectionStringArgs struct {
  thrift.TStruct
  _id *RemoteValueID "_id"; // 1
}

func NewGetValueListSelectionStringArgs() *GetValueListSelectionStringArgs {
  output := &GetValueListSelectionStringArgs{
    TStruct:thrift.NewTStruct("GetValueListSelection_String_args", []thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetValueListSelectionStringArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_id" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetValueListSelectionStringArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p._id = NewRemoteValueID()
  err1270 := p._id.Read(iprot)
  if err1270 != nil { return thrift.NewTProtocolExceptionReadStruct("p._idRemoteValueID", err1270); }
  return err
}

func (p *GetValueListSelectionStringArgs) ReadField_id(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetValueListSelectionStringArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetValueListSelection_String_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetValueListSelectionStringArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._id != nil {
    err = oprot.WriteFieldBegin("_id", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
    err = p._id.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RemoteValueID", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
  }
  return err
}

func (p *GetValueListSelectionStringArgs) WriteField_id(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetValueListSelectionStringArgs) TStructName() string {
  return "GetValueListSelectionStringArgs"
}

func (p *GetValueListSelectionStringArgs) ThriftName() string {
  return "GetValueListSelection_String_args"
}

func (p *GetValueListSelectionStringArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetValueListSelectionStringArgs(%+v)", *p)
}

func (p *GetValueListSelectionStringArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetValueListSelectionStringArgs)
  if !ok {
    return 0, false
  }
  if cmp, ok := p._id.CompareTo(data._id); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetValueListSelectionStringArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._id
  }
  return nil
}

func (p *GetValueListSelectionStringArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - Success
 */
type GetValueListSelectionStringResult struct {
  thrift.TStruct
  Success *BoolString "success"; // 0
}

func NewGetValueListSelectionStringResult() *GetValueListSelectionStringResult {
  output := &GetValueListSelectionStringResult{
    TStruct:thrift.NewTStruct("GetValueListSelection_String_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    }),
  }
  {
  }
  return output
}

func (p *GetValueListSelectionStringResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetValueListSelectionStringResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Success = NewBoolString()
  err1273 := p.Success.Read(iprot)
  if err1273 != nil { return thrift.NewTProtocolExceptionReadStruct("p.SuccessBool_String", err1273); }
  return err
}

func (p *GetValueListSelectionStringResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetValueListSelectionStringResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetValueListSelection_String_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetValueListSelectionStringResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = p.Success.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("Bool_String", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *GetValueListSelectionStringResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetValueListSelectionStringResult) TStructName() string {
  return "GetValueListSelectionStringResult"
}

func (p *GetValueListSelectionStringResult) ThriftName() string {
  return "GetValueListSelection_String_result"
}

func (p *GetValueListSelectionStringResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetValueListSelectionStringResult(%+v)", *p)
}

func (p *GetValueListSelectionStringResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetValueListSelectionStringResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetValueListSelectionStringResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *GetValueListSelectionStringResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    })
}

/**
 * Attributes:
 *  - _id
 */
type GetValueListSelectionInt32Args struct {
  thrift.TStruct
  _id *RemoteValueID "_id"; // 1
}

func NewGetValueListSelectionInt32Args() *GetValueListSelectionInt32Args {
  output := &GetValueListSelectionInt32Args{
    TStruct:thrift.NewTStruct("GetValueListSelection_Int32_args", []thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetValueListSelectionInt32Args) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_id" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetValueListSelectionInt32Args) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p._id = NewRemoteValueID()
  err1276 := p._id.Read(iprot)
  if err1276 != nil { return thrift.NewTProtocolExceptionReadStruct("p._idRemoteValueID", err1276); }
  return err
}

func (p *GetValueListSelectionInt32Args) ReadField_id(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetValueListSelectionInt32Args) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetValueListSelection_Int32_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetValueListSelectionInt32Args) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._id != nil {
    err = oprot.WriteFieldBegin("_id", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
    err = p._id.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RemoteValueID", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
  }
  return err
}

func (p *GetValueListSelectionInt32Args) WriteField_id(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetValueListSelectionInt32Args) TStructName() string {
  return "GetValueListSelectionInt32Args"
}

func (p *GetValueListSelectionInt32Args) ThriftName() string {
  return "GetValueListSelection_Int32_args"
}

func (p *GetValueListSelectionInt32Args) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetValueListSelectionInt32Args(%+v)", *p)
}

func (p *GetValueListSelectionInt32Args) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetValueListSelectionInt32Args)
  if !ok {
    return 0, false
  }
  if cmp, ok := p._id.CompareTo(data._id); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetValueListSelectionInt32Args) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._id
  }
  return nil
}

func (p *GetValueListSelectionInt32Args) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - Success
 */
type GetValueListSelectionInt32Result struct {
  thrift.TStruct
  Success *BoolInt "success"; // 0
}

func NewGetValueListSelectionInt32Result() *GetValueListSelectionInt32Result {
  output := &GetValueListSelectionInt32Result{
    TStruct:thrift.NewTStruct("GetValueListSelection_Int32_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    }),
  }
  {
  }
  return output
}

func (p *GetValueListSelectionInt32Result) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetValueListSelectionInt32Result) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Success = NewBoolInt()
  err1279 := p.Success.Read(iprot)
  if err1279 != nil { return thrift.NewTProtocolExceptionReadStruct("p.SuccessBool_Int", err1279); }
  return err
}

func (p *GetValueListSelectionInt32Result) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetValueListSelectionInt32Result) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetValueListSelection_Int32_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetValueListSelectionInt32Result) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = p.Success.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("Bool_Int", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *GetValueListSelectionInt32Result) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetValueListSelectionInt32Result) TStructName() string {
  return "GetValueListSelectionInt32Result"
}

func (p *GetValueListSelectionInt32Result) ThriftName() string {
  return "GetValueListSelection_Int32_result"
}

func (p *GetValueListSelectionInt32Result) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetValueListSelectionInt32Result(%+v)", *p)
}

func (p *GetValueListSelectionInt32Result) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetValueListSelectionInt32Result)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetValueListSelectionInt32Result) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *GetValueListSelectionInt32Result) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    })
}

/**
 * Attributes:
 *  - _id
 */
type GetValueListItemsArgs struct {
  thrift.TStruct
  _id *RemoteValueID "_id"; // 1
}

func NewGetValueListItemsArgs() *GetValueListItemsArgs {
  output := &GetValueListItemsArgs{
    TStruct:thrift.NewTStruct("GetValueListItems_args", []thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetValueListItemsArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_id" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetValueListItemsArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p._id = NewRemoteValueID()
  err1282 := p._id.Read(iprot)
  if err1282 != nil { return thrift.NewTProtocolExceptionReadStruct("p._idRemoteValueID", err1282); }
  return err
}

func (p *GetValueListItemsArgs) ReadField_id(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetValueListItemsArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetValueListItems_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetValueListItemsArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._id != nil {
    err = oprot.WriteFieldBegin("_id", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
    err = p._id.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RemoteValueID", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
  }
  return err
}

func (p *GetValueListItemsArgs) WriteField_id(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetValueListItemsArgs) TStructName() string {
  return "GetValueListItemsArgs"
}

func (p *GetValueListItemsArgs) ThriftName() string {
  return "GetValueListItems_args"
}

func (p *GetValueListItemsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetValueListItemsArgs(%+v)", *p)
}

func (p *GetValueListItemsArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetValueListItemsArgs)
  if !ok {
    return 0, false
  }
  if cmp, ok := p._id.CompareTo(data._id); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetValueListItemsArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._id
  }
  return nil
}

func (p *GetValueListItemsArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - Success
 */
type GetValueListItemsResult struct {
  thrift.TStruct
  Success *BoolListString "success"; // 0
}

func NewGetValueListItemsResult() *GetValueListItemsResult {
  output := &GetValueListItemsResult{
    TStruct:thrift.NewTStruct("GetValueListItems_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    }),
  }
  {
  }
  return output
}

func (p *GetValueListItemsResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetValueListItemsResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Success = NewBoolListString()
  err1285 := p.Success.Read(iprot)
  if err1285 != nil { return thrift.NewTProtocolExceptionReadStruct("p.SuccessBool_ListString", err1285); }
  return err
}

func (p *GetValueListItemsResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetValueListItemsResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetValueListItems_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetValueListItemsResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = p.Success.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("Bool_ListString", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *GetValueListItemsResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetValueListItemsResult) TStructName() string {
  return "GetValueListItemsResult"
}

func (p *GetValueListItemsResult) ThriftName() string {
  return "GetValueListItems_result"
}

func (p *GetValueListItemsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetValueListItemsResult(%+v)", *p)
}

func (p *GetValueListItemsResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetValueListItemsResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetValueListItemsResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *GetValueListItemsResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    })
}

/**
 * Attributes:
 *  - _id
 */
type GetValueFloatPrecisionArgs struct {
  thrift.TStruct
  _id *RemoteValueID "_id"; // 1
}

func NewGetValueFloatPrecisionArgs() *GetValueFloatPrecisionArgs {
  output := &GetValueFloatPrecisionArgs{
    TStruct:thrift.NewTStruct("GetValueFloatPrecision_args", []thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetValueFloatPrecisionArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_id" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetValueFloatPrecisionArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p._id = NewRemoteValueID()
  err1288 := p._id.Read(iprot)
  if err1288 != nil { return thrift.NewTProtocolExceptionReadStruct("p._idRemoteValueID", err1288); }
  return err
}

func (p *GetValueFloatPrecisionArgs) ReadField_id(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetValueFloatPrecisionArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetValueFloatPrecision_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetValueFloatPrecisionArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._id != nil {
    err = oprot.WriteFieldBegin("_id", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
    err = p._id.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RemoteValueID", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
  }
  return err
}

func (p *GetValueFloatPrecisionArgs) WriteField_id(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetValueFloatPrecisionArgs) TStructName() string {
  return "GetValueFloatPrecisionArgs"
}

func (p *GetValueFloatPrecisionArgs) ThriftName() string {
  return "GetValueFloatPrecision_args"
}

func (p *GetValueFloatPrecisionArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetValueFloatPrecisionArgs(%+v)", *p)
}

func (p *GetValueFloatPrecisionArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetValueFloatPrecisionArgs)
  if !ok {
    return 0, false
  }
  if cmp, ok := p._id.CompareTo(data._id); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetValueFloatPrecisionArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._id
  }
  return nil
}

func (p *GetValueFloatPrecisionArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - Success
 */
type GetValueFloatPrecisionResult struct {
  thrift.TStruct
  Success *BoolUInt8 "success"; // 0
}

func NewGetValueFloatPrecisionResult() *GetValueFloatPrecisionResult {
  output := &GetValueFloatPrecisionResult{
    TStruct:thrift.NewTStruct("GetValueFloatPrecision_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    }),
  }
  {
  }
  return output
}

func (p *GetValueFloatPrecisionResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetValueFloatPrecisionResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Success = NewBoolUInt8()
  err1291 := p.Success.Read(iprot)
  if err1291 != nil { return thrift.NewTProtocolExceptionReadStruct("p.SuccessBool_UInt8", err1291); }
  return err
}

func (p *GetValueFloatPrecisionResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetValueFloatPrecisionResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetValueFloatPrecision_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetValueFloatPrecisionResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = p.Success.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("Bool_UInt8", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *GetValueFloatPrecisionResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetValueFloatPrecisionResult) TStructName() string {
  return "GetValueFloatPrecisionResult"
}

func (p *GetValueFloatPrecisionResult) ThriftName() string {
  return "GetValueFloatPrecision_result"
}

func (p *GetValueFloatPrecisionResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetValueFloatPrecisionResult(%+v)", *p)
}

func (p *GetValueFloatPrecisionResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetValueFloatPrecisionResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetValueFloatPrecisionResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *GetValueFloatPrecisionResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    })
}

/**
 * Attributes:
 *  - _id
 *  - _value
 */
type SetValueBoolArgs struct {
  thrift.TStruct
  _id *RemoteValueID "_id"; // 1
  _value bool "_value"; // 2
}

func NewSetValueBoolArgs() *SetValueBoolArgs {
  output := &SetValueBoolArgs{
    TStruct:thrift.NewTStruct("SetValue_Bool_args", []thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    thrift.NewTField("_value", thrift.BOOL, 2),
    }),
  }
  {
  }
  return output
}

func (p *SetValueBoolArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_id" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_value" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SetValueBoolArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p._id = NewRemoteValueID()
  err1294 := p._id.Read(iprot)
  if err1294 != nil { return thrift.NewTProtocolExceptionReadStruct("p._idRemoteValueID", err1294); }
  return err
}

func (p *SetValueBoolArgs) ReadField_id(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *SetValueBoolArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1295, err1296 := iprot.ReadBool()
  if err1296 != nil { return thrift.NewTProtocolExceptionReadField(2, "_value", p.ThriftName(), err1296); }
  p._value = v1295
  return err
}

func (p *SetValueBoolArgs) ReadField_value(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *SetValueBoolArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SetValue_Bool_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SetValueBoolArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._id != nil {
    err = oprot.WriteFieldBegin("_id", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
    err = p._id.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RemoteValueID", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
  }
  return err
}

func (p *SetValueBoolArgs) WriteField_id(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *SetValueBoolArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_value", thrift.BOOL, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_value", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p._value))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_value", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_value", p.ThriftName(), err); }
  return err
}

func (p *SetValueBoolArgs) WriteField_value(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *SetValueBoolArgs) TStructName() string {
  return "SetValueBoolArgs"
}

func (p *SetValueBoolArgs) ThriftName() string {
  return "SetValue_Bool_args"
}

func (p *SetValueBoolArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetValueBoolArgs(%+v)", *p)
}

func (p *SetValueBoolArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SetValueBoolArgs)
  if !ok {
    return 0, false
  }
  if cmp, ok := p._id.CompareTo(data._id); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp := thrift.CompareBool(p._value, data._value); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *SetValueBoolArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._id
  case 2: return p._value
  }
  return nil
}

func (p *SetValueBoolArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    thrift.NewTField("_value", thrift.BOOL, 2),
    })
}

/**
 * Attributes:
 *  - Success
 */
type SetValueBoolResult struct {
  thrift.TStruct
  Success bool "success"; // 0
}

func NewSetValueBoolResult() *SetValueBoolResult {
  output := &SetValueBoolResult{
    TStruct:thrift.NewTStruct("SetValue_Bool_result", []thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    }),
  }
  {
  }
  return output
}

func (p *SetValueBoolResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SetValueBoolResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1297, err1298 := iprot.ReadBool()
  if err1298 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1298); }
  p.Success = v1297
  return err
}

func (p *SetValueBoolResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *SetValueBoolResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SetValue_Bool_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SetValueBoolResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BOOL, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *SetValueBoolResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *SetValueBoolResult) TStructName() string {
  return "SetValueBoolResult"
}

func (p *SetValueBoolResult) ThriftName() string {
  return "SetValue_Bool_result"
}

func (p *SetValueBoolResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetValueBoolResult(%+v)", *p)
}

func (p *SetValueBoolResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SetValueBoolResult)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Success, data.Success); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *SetValueBoolResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *SetValueBoolResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    })
}

/**
 * Attributes:
 *  - _id
 *  - _value
 */
type SetValueUInt8Args struct {
  thrift.TStruct
  _id *RemoteValueID "_id"; // 1
  _value byte "_value"; // 2
}

func NewSetValueUInt8Args() *SetValueUInt8Args {
  output := &SetValueUInt8Args{
    TStruct:thrift.NewTStruct("SetValue_UInt8_args", []thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    thrift.NewTField("_value", thrift.BYTE, 2),
    }),
  }
  {
  }
  return output
}

func (p *SetValueUInt8Args) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_id" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_value" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SetValueUInt8Args) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p._id = NewRemoteValueID()
  err1301 := p._id.Read(iprot)
  if err1301 != nil { return thrift.NewTProtocolExceptionReadStruct("p._idRemoteValueID", err1301); }
  return err
}

func (p *SetValueUInt8Args) ReadField_id(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *SetValueUInt8Args) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1302, err1303 := iprot.ReadByte()
  if err1303 != nil { return thrift.NewTProtocolExceptionReadField(2, "_value", p.ThriftName(), err1303); }
  p._value = v1302
  return err
}

func (p *SetValueUInt8Args) ReadField_value(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *SetValueUInt8Args) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SetValue_UInt8_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SetValueUInt8Args) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._id != nil {
    err = oprot.WriteFieldBegin("_id", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
    err = p._id.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RemoteValueID", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
  }
  return err
}

func (p *SetValueUInt8Args) WriteField_id(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *SetValueUInt8Args) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_value", thrift.BYTE, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_value", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._value))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_value", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_value", p.ThriftName(), err); }
  return err
}

func (p *SetValueUInt8Args) WriteField_value(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *SetValueUInt8Args) TStructName() string {
  return "SetValueUInt8Args"
}

func (p *SetValueUInt8Args) ThriftName() string {
  return "SetValue_UInt8_args"
}

func (p *SetValueUInt8Args) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetValueUInt8Args(%+v)", *p)
}

func (p *SetValueUInt8Args) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SetValueUInt8Args)
  if !ok {
    return 0, false
  }
  if cmp, ok := p._id.CompareTo(data._id); !ok || cmp != 0 {
    return cmp, ok
  }
  if p._value != data._value {
    if p._value < data._value {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *SetValueUInt8Args) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._id
  case 2: return p._value
  }
  return nil
}

func (p *SetValueUInt8Args) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    thrift.NewTField("_value", thrift.BYTE, 2),
    })
}

/**
 * Attributes:
 *  - Success
 */
type SetValueUInt8Result struct {
  thrift.TStruct
  Success bool "success"; // 0
}

func NewSetValueUInt8Result() *SetValueUInt8Result {
  output := &SetValueUInt8Result{
    TStruct:thrift.NewTStruct("SetValue_UInt8_result", []thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    }),
  }
  {
  }
  return output
}

func (p *SetValueUInt8Result) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SetValueUInt8Result) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1304, err1305 := iprot.ReadBool()
  if err1305 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1305); }
  p.Success = v1304
  return err
}

func (p *SetValueUInt8Result) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *SetValueUInt8Result) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SetValue_UInt8_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SetValueUInt8Result) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BOOL, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *SetValueUInt8Result) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *SetValueUInt8Result) TStructName() string {
  return "SetValueUInt8Result"
}

func (p *SetValueUInt8Result) ThriftName() string {
  return "SetValue_UInt8_result"
}

func (p *SetValueUInt8Result) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetValueUInt8Result(%+v)", *p)
}

func (p *SetValueUInt8Result) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SetValueUInt8Result)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Success, data.Success); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *SetValueUInt8Result) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *SetValueUInt8Result) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    })
}

/**
 * Attributes:
 *  - _id
 *  - _value
 */
type SetValueFloatArgs struct {
  thrift.TStruct
  _id *RemoteValueID "_id"; // 1
  _value float64 "_value"; // 2
}

func NewSetValueFloatArgs() *SetValueFloatArgs {
  output := &SetValueFloatArgs{
    TStruct:thrift.NewTStruct("SetValue_Float_args", []thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    thrift.NewTField("_value", thrift.DOUBLE, 2),
    }),
  }
  {
  }
  return output
}

func (p *SetValueFloatArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_id" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_value" {
      if fieldTypeId == thrift.DOUBLE {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SetValueFloatArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p._id = NewRemoteValueID()
  err1308 := p._id.Read(iprot)
  if err1308 != nil { return thrift.NewTProtocolExceptionReadStruct("p._idRemoteValueID", err1308); }
  return err
}

func (p *SetValueFloatArgs) ReadField_id(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *SetValueFloatArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1309, err1310 := iprot.ReadDouble()
  if err1310 != nil { return thrift.NewTProtocolExceptionReadField(2, "_value", p.ThriftName(), err1310); }
  p._value = v1309
  return err
}

func (p *SetValueFloatArgs) ReadField_value(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *SetValueFloatArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SetValue_Float_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SetValueFloatArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._id != nil {
    err = oprot.WriteFieldBegin("_id", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
    err = p._id.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RemoteValueID", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
  }
  return err
}

func (p *SetValueFloatArgs) WriteField_id(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *SetValueFloatArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_value", thrift.DOUBLE, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_value", p.ThriftName(), err); }
  err = oprot.WriteDouble(float64(p._value))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_value", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_value", p.ThriftName(), err); }
  return err
}

func (p *SetValueFloatArgs) WriteField_value(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *SetValueFloatArgs) TStructName() string {
  return "SetValueFloatArgs"
}

func (p *SetValueFloatArgs) ThriftName() string {
  return "SetValue_Float_args"
}

func (p *SetValueFloatArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetValueFloatArgs(%+v)", *p)
}

func (p *SetValueFloatArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SetValueFloatArgs)
  if !ok {
    return 0, false
  }
  if cmp, ok := p._id.CompareTo(data._id); !ok || cmp != 0 {
    return cmp, ok
  }
  if p._value != data._value {
    if p._value < data._value {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *SetValueFloatArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._id
  case 2: return p._value
  }
  return nil
}

func (p *SetValueFloatArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    thrift.NewTField("_value", thrift.DOUBLE, 2),
    })
}

/**
 * Attributes:
 *  - Success
 */
type SetValueFloatResult struct {
  thrift.TStruct
  Success bool "success"; // 0
}

func NewSetValueFloatResult() *SetValueFloatResult {
  output := &SetValueFloatResult{
    TStruct:thrift.NewTStruct("SetValue_Float_result", []thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    }),
  }
  {
  }
  return output
}

func (p *SetValueFloatResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SetValueFloatResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1311, err1312 := iprot.ReadBool()
  if err1312 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1312); }
  p.Success = v1311
  return err
}

func (p *SetValueFloatResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *SetValueFloatResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SetValue_Float_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SetValueFloatResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BOOL, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *SetValueFloatResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *SetValueFloatResult) TStructName() string {
  return "SetValueFloatResult"
}

func (p *SetValueFloatResult) ThriftName() string {
  return "SetValue_Float_result"
}

func (p *SetValueFloatResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetValueFloatResult(%+v)", *p)
}

func (p *SetValueFloatResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SetValueFloatResult)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Success, data.Success); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *SetValueFloatResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *SetValueFloatResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    })
}

/**
 * Attributes:
 *  - _id
 *  - _value
 */
type SetValueInt32Args struct {
  thrift.TStruct
  _id *RemoteValueID "_id"; // 1
  _value int32 "_value"; // 2
}

func NewSetValueInt32Args() *SetValueInt32Args {
  output := &SetValueInt32Args{
    TStruct:thrift.NewTStruct("SetValue_Int32_args", []thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    thrift.NewTField("_value", thrift.I32, 2),
    }),
  }
  {
  }
  return output
}

func (p *SetValueInt32Args) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_id" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_value" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SetValueInt32Args) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p._id = NewRemoteValueID()
  err1315 := p._id.Read(iprot)
  if err1315 != nil { return thrift.NewTProtocolExceptionReadStruct("p._idRemoteValueID", err1315); }
  return err
}

func (p *SetValueInt32Args) ReadField_id(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *SetValueInt32Args) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1316, err1317 := iprot.ReadI32()
  if err1317 != nil { return thrift.NewTProtocolExceptionReadField(2, "_value", p.ThriftName(), err1317); }
  p._value = v1316
  return err
}

func (p *SetValueInt32Args) ReadField_value(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *SetValueInt32Args) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SetValue_Int32_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SetValueInt32Args) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._id != nil {
    err = oprot.WriteFieldBegin("_id", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
    err = p._id.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RemoteValueID", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
  }
  return err
}

func (p *SetValueInt32Args) WriteField_id(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *SetValueInt32Args) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_value", thrift.I32, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_value", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._value))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_value", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_value", p.ThriftName(), err); }
  return err
}

func (p *SetValueInt32Args) WriteField_value(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *SetValueInt32Args) TStructName() string {
  return "SetValueInt32Args"
}

func (p *SetValueInt32Args) ThriftName() string {
  return "SetValue_Int32_args"
}

func (p *SetValueInt32Args) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetValueInt32Args(%+v)", *p)
}

func (p *SetValueInt32Args) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SetValueInt32Args)
  if !ok {
    return 0, false
  }
  if cmp, ok := p._id.CompareTo(data._id); !ok || cmp != 0 {
    return cmp, ok
  }
  if p._value != data._value {
    if p._value < data._value {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *SetValueInt32Args) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._id
  case 2: return p._value
  }
  return nil
}

func (p *SetValueInt32Args) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    thrift.NewTField("_value", thrift.I32, 2),
    })
}

/**
 * Attributes:
 *  - Success
 */
type SetValueInt32Result struct {
  thrift.TStruct
  Success bool "success"; // 0
}

func NewSetValueInt32Result() *SetValueInt32Result {
  output := &SetValueInt32Result{
    TStruct:thrift.NewTStruct("SetValue_Int32_result", []thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    }),
  }
  {
  }
  return output
}

func (p *SetValueInt32Result) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SetValueInt32Result) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1318, err1319 := iprot.ReadBool()
  if err1319 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1319); }
  p.Success = v1318
  return err
}

func (p *SetValueInt32Result) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *SetValueInt32Result) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SetValue_Int32_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SetValueInt32Result) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BOOL, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *SetValueInt32Result) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *SetValueInt32Result) TStructName() string {
  return "SetValueInt32Result"
}

func (p *SetValueInt32Result) ThriftName() string {
  return "SetValue_Int32_result"
}

func (p *SetValueInt32Result) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetValueInt32Result(%+v)", *p)
}

func (p *SetValueInt32Result) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SetValueInt32Result)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Success, data.Success); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *SetValueInt32Result) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *SetValueInt32Result) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    })
}

/**
 * Attributes:
 *  - _id
 *  - _value
 */
type SetValueInt16Args struct {
  thrift.TStruct
  _id *RemoteValueID "_id"; // 1
  _value int16 "_value"; // 2
}

func NewSetValueInt16Args() *SetValueInt16Args {
  output := &SetValueInt16Args{
    TStruct:thrift.NewTStruct("SetValue_Int16_args", []thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    thrift.NewTField("_value", thrift.I16, 2),
    }),
  }
  {
  }
  return output
}

func (p *SetValueInt16Args) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_id" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_value" {
      if fieldTypeId == thrift.I16 {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SetValueInt16Args) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p._id = NewRemoteValueID()
  err1322 := p._id.Read(iprot)
  if err1322 != nil { return thrift.NewTProtocolExceptionReadStruct("p._idRemoteValueID", err1322); }
  return err
}

func (p *SetValueInt16Args) ReadField_id(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *SetValueInt16Args) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1323, err1324 := iprot.ReadI16()
  if err1324 != nil { return thrift.NewTProtocolExceptionReadField(2, "_value", p.ThriftName(), err1324); }
  p._value = v1323
  return err
}

func (p *SetValueInt16Args) ReadField_value(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *SetValueInt16Args) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SetValue_Int16_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SetValueInt16Args) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._id != nil {
    err = oprot.WriteFieldBegin("_id", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
    err = p._id.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RemoteValueID", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
  }
  return err
}

func (p *SetValueInt16Args) WriteField_id(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *SetValueInt16Args) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_value", thrift.I16, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_value", p.ThriftName(), err); }
  err = oprot.WriteI16(int16(p._value))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_value", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_value", p.ThriftName(), err); }
  return err
}

func (p *SetValueInt16Args) WriteField_value(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *SetValueInt16Args) TStructName() string {
  return "SetValueInt16Args"
}

func (p *SetValueInt16Args) ThriftName() string {
  return "SetValue_Int16_args"
}

func (p *SetValueInt16Args) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetValueInt16Args(%+v)", *p)
}

func (p *SetValueInt16Args) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SetValueInt16Args)
  if !ok {
    return 0, false
  }
  if cmp, ok := p._id.CompareTo(data._id); !ok || cmp != 0 {
    return cmp, ok
  }
  if p._value != data._value {
    if p._value < data._value {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *SetValueInt16Args) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._id
  case 2: return p._value
  }
  return nil
}

func (p *SetValueInt16Args) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    thrift.NewTField("_value", thrift.I16, 2),
    })
}

/**
 * Attributes:
 *  - Success
 */
type SetValueInt16Result struct {
  thrift.TStruct
  Success bool "success"; // 0
}

func NewSetValueInt16Result() *SetValueInt16Result {
  output := &SetValueInt16Result{
    TStruct:thrift.NewTStruct("SetValue_Int16_result", []thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    }),
  }
  {
  }
  return output
}

func (p *SetValueInt16Result) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SetValueInt16Result) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1325, err1326 := iprot.ReadBool()
  if err1326 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1326); }
  p.Success = v1325
  return err
}

func (p *SetValueInt16Result) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *SetValueInt16Result) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SetValue_Int16_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SetValueInt16Result) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BOOL, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *SetValueInt16Result) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *SetValueInt16Result) TStructName() string {
  return "SetValueInt16Result"
}

func (p *SetValueInt16Result) ThriftName() string {
  return "SetValue_Int16_result"
}

func (p *SetValueInt16Result) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetValueInt16Result(%+v)", *p)
}

func (p *SetValueInt16Result) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SetValueInt16Result)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Success, data.Success); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *SetValueInt16Result) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *SetValueInt16Result) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    })
}

/**
 * Attributes:
 *  - _id
 *  - _value
 */
type SetValueStringArgs struct {
  thrift.TStruct
  _id *RemoteValueID "_id"; // 1
  _value string "_value"; // 2
}

func NewSetValueStringArgs() *SetValueStringArgs {
  output := &SetValueStringArgs{
    TStruct:thrift.NewTStruct("SetValue_String_args", []thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    thrift.NewTField("_value", thrift.STRING, 2),
    }),
  }
  {
  }
  return output
}

func (p *SetValueStringArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_id" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_value" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SetValueStringArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p._id = NewRemoteValueID()
  err1329 := p._id.Read(iprot)
  if err1329 != nil { return thrift.NewTProtocolExceptionReadStruct("p._idRemoteValueID", err1329); }
  return err
}

func (p *SetValueStringArgs) ReadField_id(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *SetValueStringArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1330, err1331 := iprot.ReadString()
  if err1331 != nil { return thrift.NewTProtocolExceptionReadField(2, "_value", p.ThriftName(), err1331); }
  p._value = v1330
  return err
}

func (p *SetValueStringArgs) ReadField_value(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *SetValueStringArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SetValue_String_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SetValueStringArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._id != nil {
    err = oprot.WriteFieldBegin("_id", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
    err = p._id.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RemoteValueID", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
  }
  return err
}

func (p *SetValueStringArgs) WriteField_id(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *SetValueStringArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_value", thrift.STRING, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_value", p.ThriftName(), err); }
  err = oprot.WriteString(string(p._value))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_value", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_value", p.ThriftName(), err); }
  return err
}

func (p *SetValueStringArgs) WriteField_value(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *SetValueStringArgs) TStructName() string {
  return "SetValueStringArgs"
}

func (p *SetValueStringArgs) ThriftName() string {
  return "SetValue_String_args"
}

func (p *SetValueStringArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetValueStringArgs(%+v)", *p)
}

func (p *SetValueStringArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SetValueStringArgs)
  if !ok {
    return 0, false
  }
  if cmp, ok := p._id.CompareTo(data._id); !ok || cmp != 0 {
    return cmp, ok
  }
  if p._value != data._value {
    if p._value < data._value {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *SetValueStringArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._id
  case 2: return p._value
  }
  return nil
}

func (p *SetValueStringArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    thrift.NewTField("_value", thrift.STRING, 2),
    })
}

/**
 * Attributes:
 *  - Success
 */
type SetValueStringResult struct {
  thrift.TStruct
  Success bool "success"; // 0
}

func NewSetValueStringResult() *SetValueStringResult {
  output := &SetValueStringResult{
    TStruct:thrift.NewTStruct("SetValue_String_result", []thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    }),
  }
  {
  }
  return output
}

func (p *SetValueStringResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SetValueStringResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1332, err1333 := iprot.ReadBool()
  if err1333 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1333); }
  p.Success = v1332
  return err
}

func (p *SetValueStringResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *SetValueStringResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SetValue_String_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SetValueStringResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BOOL, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *SetValueStringResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *SetValueStringResult) TStructName() string {
  return "SetValueStringResult"
}

func (p *SetValueStringResult) ThriftName() string {
  return "SetValue_String_result"
}

func (p *SetValueStringResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetValueStringResult(%+v)", *p)
}

func (p *SetValueStringResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SetValueStringResult)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Success, data.Success); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *SetValueStringResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *SetValueStringResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    })
}

/**
 * Attributes:
 *  - _id
 *  - _selectedItem
 */
type SetValueListSelectionArgs struct {
  thrift.TStruct
  _id *RemoteValueID "_id"; // 1
  _selectedItem string "_selectedItem"; // 2
}

func NewSetValueListSelectionArgs() *SetValueListSelectionArgs {
  output := &SetValueListSelectionArgs{
    TStruct:thrift.NewTStruct("SetValueListSelection_args", []thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    thrift.NewTField("_selectedItem", thrift.STRING, 2),
    }),
  }
  {
  }
  return output
}

func (p *SetValueListSelectionArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_id" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_selectedItem" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SetValueListSelectionArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p._id = NewRemoteValueID()
  err1336 := p._id.Read(iprot)
  if err1336 != nil { return thrift.NewTProtocolExceptionReadStruct("p._idRemoteValueID", err1336); }
  return err
}

func (p *SetValueListSelectionArgs) ReadField_id(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *SetValueListSelectionArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1337, err1338 := iprot.ReadString()
  if err1338 != nil { return thrift.NewTProtocolExceptionReadField(2, "_selectedItem", p.ThriftName(), err1338); }
  p._selectedItem = v1337
  return err
}

func (p *SetValueListSelectionArgs) ReadField_selectedItem(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *SetValueListSelectionArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SetValueListSelection_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SetValueListSelectionArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._id != nil {
    err = oprot.WriteFieldBegin("_id", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
    err = p._id.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RemoteValueID", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
  }
  return err
}

func (p *SetValueListSelectionArgs) WriteField_id(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *SetValueListSelectionArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_selectedItem", thrift.STRING, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_selectedItem", p.ThriftName(), err); }
  err = oprot.WriteString(string(p._selectedItem))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_selectedItem", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_selectedItem", p.ThriftName(), err); }
  return err
}

func (p *SetValueListSelectionArgs) WriteField_selectedItem(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *SetValueListSelectionArgs) TStructName() string {
  return "SetValueListSelectionArgs"
}

func (p *SetValueListSelectionArgs) ThriftName() string {
  return "SetValueListSelection_args"
}

func (p *SetValueListSelectionArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetValueListSelectionArgs(%+v)", *p)
}

func (p *SetValueListSelectionArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SetValueListSelectionArgs)
  if !ok {
    return 0, false
  }
  if cmp, ok := p._id.CompareTo(data._id); !ok || cmp != 0 {
    return cmp, ok
  }
  if p._selectedItem != data._selectedItem {
    if p._selectedItem < data._selectedItem {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *SetValueListSelectionArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._id
  case 2: return p._selectedItem
  }
  return nil
}

func (p *SetValueListSelectionArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    thrift.NewTField("_selectedItem", thrift.STRING, 2),
    })
}

/**
 * Attributes:
 *  - Success
 */
type SetValueListSelectionResult struct {
  thrift.TStruct
  Success bool "success"; // 0
}

func NewSetValueListSelectionResult() *SetValueListSelectionResult {
  output := &SetValueListSelectionResult{
    TStruct:thrift.NewTStruct("SetValueListSelection_result", []thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    }),
  }
  {
  }
  return output
}

func (p *SetValueListSelectionResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SetValueListSelectionResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1339, err1340 := iprot.ReadBool()
  if err1340 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1340); }
  p.Success = v1339
  return err
}

func (p *SetValueListSelectionResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *SetValueListSelectionResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SetValueListSelection_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SetValueListSelectionResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BOOL, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *SetValueListSelectionResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *SetValueListSelectionResult) TStructName() string {
  return "SetValueListSelectionResult"
}

func (p *SetValueListSelectionResult) ThriftName() string {
  return "SetValueListSelection_result"
}

func (p *SetValueListSelectionResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetValueListSelectionResult(%+v)", *p)
}

func (p *SetValueListSelectionResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SetValueListSelectionResult)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Success, data.Success); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *SetValueListSelectionResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *SetValueListSelectionResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    })
}

/**
 * Attributes:
 *  - _id
 */
type RefreshValueArgs struct {
  thrift.TStruct
  _id *RemoteValueID "_id"; // 1
}

func NewRefreshValueArgs() *RefreshValueArgs {
  output := &RefreshValueArgs{
    TStruct:thrift.NewTStruct("RefreshValue_args", []thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *RefreshValueArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_id" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *RefreshValueArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p._id = NewRemoteValueID()
  err1343 := p._id.Read(iprot)
  if err1343 != nil { return thrift.NewTProtocolExceptionReadStruct("p._idRemoteValueID", err1343); }
  return err
}

func (p *RefreshValueArgs) ReadField_id(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *RefreshValueArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("RefreshValue_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *RefreshValueArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._id != nil {
    err = oprot.WriteFieldBegin("_id", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
    err = p._id.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RemoteValueID", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
  }
  return err
}

func (p *RefreshValueArgs) WriteField_id(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *RefreshValueArgs) TStructName() string {
  return "RefreshValueArgs"
}

func (p *RefreshValueArgs) ThriftName() string {
  return "RefreshValue_args"
}

func (p *RefreshValueArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RefreshValueArgs(%+v)", *p)
}

func (p *RefreshValueArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*RefreshValueArgs)
  if !ok {
    return 0, false
  }
  if cmp, ok := p._id.CompareTo(data._id); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *RefreshValueArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._id
  }
  return nil
}

func (p *RefreshValueArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - Success
 */
type RefreshValueResult struct {
  thrift.TStruct
  Success bool "success"; // 0
}

func NewRefreshValueResult() *RefreshValueResult {
  output := &RefreshValueResult{
    TStruct:thrift.NewTStruct("RefreshValue_result", []thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    }),
  }
  {
  }
  return output
}

func (p *RefreshValueResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *RefreshValueResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1344, err1345 := iprot.ReadBool()
  if err1345 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1345); }
  p.Success = v1344
  return err
}

func (p *RefreshValueResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *RefreshValueResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("RefreshValue_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *RefreshValueResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BOOL, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *RefreshValueResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *RefreshValueResult) TStructName() string {
  return "RefreshValueResult"
}

func (p *RefreshValueResult) ThriftName() string {
  return "RefreshValue_result"
}

func (p *RefreshValueResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RefreshValueResult(%+v)", *p)
}

func (p *RefreshValueResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*RefreshValueResult)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Success, data.Success); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *RefreshValueResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *RefreshValueResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    })
}

/**
 * Attributes:
 *  - _id
 */
type PressButtonArgs struct {
  thrift.TStruct
  _id *RemoteValueID "_id"; // 1
}

func NewPressButtonArgs() *PressButtonArgs {
  output := &PressButtonArgs{
    TStruct:thrift.NewTStruct("PressButton_args", []thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *PressButtonArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_id" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *PressButtonArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p._id = NewRemoteValueID()
  err1348 := p._id.Read(iprot)
  if err1348 != nil { return thrift.NewTProtocolExceptionReadStruct("p._idRemoteValueID", err1348); }
  return err
}

func (p *PressButtonArgs) ReadField_id(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *PressButtonArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("PressButton_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *PressButtonArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._id != nil {
    err = oprot.WriteFieldBegin("_id", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
    err = p._id.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RemoteValueID", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
  }
  return err
}

func (p *PressButtonArgs) WriteField_id(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *PressButtonArgs) TStructName() string {
  return "PressButtonArgs"
}

func (p *PressButtonArgs) ThriftName() string {
  return "PressButton_args"
}

func (p *PressButtonArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PressButtonArgs(%+v)", *p)
}

func (p *PressButtonArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*PressButtonArgs)
  if !ok {
    return 0, false
  }
  if cmp, ok := p._id.CompareTo(data._id); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *PressButtonArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._id
  }
  return nil
}

func (p *PressButtonArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - Success
 */
type PressButtonResult struct {
  thrift.TStruct
  Success bool "success"; // 0
}

func NewPressButtonResult() *PressButtonResult {
  output := &PressButtonResult{
    TStruct:thrift.NewTStruct("PressButton_result", []thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    }),
  }
  {
  }
  return output
}

func (p *PressButtonResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *PressButtonResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1349, err1350 := iprot.ReadBool()
  if err1350 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1350); }
  p.Success = v1349
  return err
}

func (p *PressButtonResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *PressButtonResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("PressButton_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *PressButtonResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BOOL, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *PressButtonResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *PressButtonResult) TStructName() string {
  return "PressButtonResult"
}

func (p *PressButtonResult) ThriftName() string {
  return "PressButton_result"
}

func (p *PressButtonResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PressButtonResult(%+v)", *p)
}

func (p *PressButtonResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*PressButtonResult)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Success, data.Success); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *PressButtonResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *PressButtonResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    })
}

/**
 * Attributes:
 *  - _id
 */
type ReleaseButtonArgs struct {
  thrift.TStruct
  _id *RemoteValueID "_id"; // 1
}

func NewReleaseButtonArgs() *ReleaseButtonArgs {
  output := &ReleaseButtonArgs{
    TStruct:thrift.NewTStruct("ReleaseButton_args", []thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *ReleaseButtonArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_id" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *ReleaseButtonArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p._id = NewRemoteValueID()
  err1353 := p._id.Read(iprot)
  if err1353 != nil { return thrift.NewTProtocolExceptionReadStruct("p._idRemoteValueID", err1353); }
  return err
}

func (p *ReleaseButtonArgs) ReadField_id(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *ReleaseButtonArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("ReleaseButton_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *ReleaseButtonArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._id != nil {
    err = oprot.WriteFieldBegin("_id", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
    err = p._id.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RemoteValueID", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
  }
  return err
}

func (p *ReleaseButtonArgs) WriteField_id(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *ReleaseButtonArgs) TStructName() string {
  return "ReleaseButtonArgs"
}

func (p *ReleaseButtonArgs) ThriftName() string {
  return "ReleaseButton_args"
}

func (p *ReleaseButtonArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReleaseButtonArgs(%+v)", *p)
}

func (p *ReleaseButtonArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*ReleaseButtonArgs)
  if !ok {
    return 0, false
  }
  if cmp, ok := p._id.CompareTo(data._id); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *ReleaseButtonArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._id
  }
  return nil
}

func (p *ReleaseButtonArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - Success
 */
type ReleaseButtonResult struct {
  thrift.TStruct
  Success bool "success"; // 0
}

func NewReleaseButtonResult() *ReleaseButtonResult {
  output := &ReleaseButtonResult{
    TStruct:thrift.NewTStruct("ReleaseButton_result", []thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    }),
  }
  {
  }
  return output
}

func (p *ReleaseButtonResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *ReleaseButtonResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1354, err1355 := iprot.ReadBool()
  if err1355 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1355); }
  p.Success = v1354
  return err
}

func (p *ReleaseButtonResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *ReleaseButtonResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("ReleaseButton_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *ReleaseButtonResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BOOL, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *ReleaseButtonResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *ReleaseButtonResult) TStructName() string {
  return "ReleaseButtonResult"
}

func (p *ReleaseButtonResult) ThriftName() string {
  return "ReleaseButton_result"
}

func (p *ReleaseButtonResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReleaseButtonResult(%+v)", *p)
}

func (p *ReleaseButtonResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*ReleaseButtonResult)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Success, data.Success); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *ReleaseButtonResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *ReleaseButtonResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    })
}

/**
 * Attributes:
 *  - _id
 */
type GetNumSwitchPointsArgs struct {
  thrift.TStruct
  _id *RemoteValueID "_id"; // 1
}

func NewGetNumSwitchPointsArgs() *GetNumSwitchPointsArgs {
  output := &GetNumSwitchPointsArgs{
    TStruct:thrift.NewTStruct("GetNumSwitchPoints_args", []thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetNumSwitchPointsArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_id" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNumSwitchPointsArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p._id = NewRemoteValueID()
  err1358 := p._id.Read(iprot)
  if err1358 != nil { return thrift.NewTProtocolExceptionReadStruct("p._idRemoteValueID", err1358); }
  return err
}

func (p *GetNumSwitchPointsArgs) ReadField_id(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetNumSwitchPointsArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetNumSwitchPoints_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNumSwitchPointsArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._id != nil {
    err = oprot.WriteFieldBegin("_id", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
    err = p._id.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RemoteValueID", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
  }
  return err
}

func (p *GetNumSwitchPointsArgs) WriteField_id(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetNumSwitchPointsArgs) TStructName() string {
  return "GetNumSwitchPointsArgs"
}

func (p *GetNumSwitchPointsArgs) ThriftName() string {
  return "GetNumSwitchPoints_args"
}

func (p *GetNumSwitchPointsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetNumSwitchPointsArgs(%+v)", *p)
}

func (p *GetNumSwitchPointsArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetNumSwitchPointsArgs)
  if !ok {
    return 0, false
  }
  if cmp, ok := p._id.CompareTo(data._id); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetNumSwitchPointsArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._id
  }
  return nil
}

func (p *GetNumSwitchPointsArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - Success
 */
type GetNumSwitchPointsResult struct {
  thrift.TStruct
  Success byte "success"; // 0
}

func NewGetNumSwitchPointsResult() *GetNumSwitchPointsResult {
  output := &GetNumSwitchPointsResult{
    TStruct:thrift.NewTStruct("GetNumSwitchPoints_result", []thrift.TField{
    thrift.NewTField("success", thrift.BYTE, 0),
    }),
  }
  {
  }
  return output
}

func (p *GetNumSwitchPointsResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNumSwitchPointsResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1359, err1360 := iprot.ReadByte()
  if err1360 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1360); }
  p.Success = v1359
  return err
}

func (p *GetNumSwitchPointsResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetNumSwitchPointsResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetNumSwitchPoints_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNumSwitchPointsResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BYTE, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *GetNumSwitchPointsResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetNumSwitchPointsResult) TStructName() string {
  return "GetNumSwitchPointsResult"
}

func (p *GetNumSwitchPointsResult) ThriftName() string {
  return "GetNumSwitchPoints_result"
}

func (p *GetNumSwitchPointsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetNumSwitchPointsResult(%+v)", *p)
}

func (p *GetNumSwitchPointsResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetNumSwitchPointsResult)
  if !ok {
    return 0, false
  }
  if p.Success != data.Success {
    if p.Success < data.Success {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetNumSwitchPointsResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *GetNumSwitchPointsResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BYTE, 0),
    })
}

/**
 * Attributes:
 *  - _id
 *  - _hours
 *  - _minutes
 *  - _setback
 */
type SetSwitchPointArgs struct {
  thrift.TStruct
  _id *RemoteValueID "_id"; // 1
  _hours byte "_hours"; // 2
  _minutes byte "_minutes"; // 3
  _setback byte "_setback"; // 4
}

func NewSetSwitchPointArgs() *SetSwitchPointArgs {
  output := &SetSwitchPointArgs{
    TStruct:thrift.NewTStruct("SetSwitchPoint_args", []thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    thrift.NewTField("_hours", thrift.BYTE, 2),
    thrift.NewTField("_minutes", thrift.BYTE, 3),
    thrift.NewTField("_setback", thrift.BYTE, 4),
    }),
  }
  {
  }
  return output
}

func (p *SetSwitchPointArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_id" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_hours" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "_minutes" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 4 || fieldName == "_setback" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SetSwitchPointArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p._id = NewRemoteValueID()
  err1363 := p._id.Read(iprot)
  if err1363 != nil { return thrift.NewTProtocolExceptionReadStruct("p._idRemoteValueID", err1363); }
  return err
}

func (p *SetSwitchPointArgs) ReadField_id(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *SetSwitchPointArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1364, err1365 := iprot.ReadByte()
  if err1365 != nil { return thrift.NewTProtocolExceptionReadField(2, "_hours", p.ThriftName(), err1365); }
  p._hours = v1364
  return err
}

func (p *SetSwitchPointArgs) ReadField_hours(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *SetSwitchPointArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1366, err1367 := iprot.ReadByte()
  if err1367 != nil { return thrift.NewTProtocolExceptionReadField(3, "_minutes", p.ThriftName(), err1367); }
  p._minutes = v1366
  return err
}

func (p *SetSwitchPointArgs) ReadField_minutes(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *SetSwitchPointArgs) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1368, err1369 := iprot.ReadByte()
  if err1369 != nil { return thrift.NewTProtocolExceptionReadField(4, "_setback", p.ThriftName(), err1369); }
  p._setback = v1368
  return err
}

func (p *SetSwitchPointArgs) ReadField_setback(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField4(iprot)
}

func (p *SetSwitchPointArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SetSwitchPoint_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = p.WriteField4(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SetSwitchPointArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._id != nil {
    err = oprot.WriteFieldBegin("_id", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
    err = p._id.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RemoteValueID", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
  }
  return err
}

func (p *SetSwitchPointArgs) WriteField_id(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *SetSwitchPointArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_hours", thrift.BYTE, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_hours", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._hours))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_hours", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_hours", p.ThriftName(), err); }
  return err
}

func (p *SetSwitchPointArgs) WriteField_hours(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *SetSwitchPointArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_minutes", thrift.BYTE, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_minutes", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._minutes))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_minutes", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_minutes", p.ThriftName(), err); }
  return err
}

func (p *SetSwitchPointArgs) WriteField_minutes(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *SetSwitchPointArgs) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_setback", thrift.BYTE, 4)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "_setback", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._setback))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "_setback", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "_setback", p.ThriftName(), err); }
  return err
}

func (p *SetSwitchPointArgs) WriteField_setback(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField4(oprot)
}

func (p *SetSwitchPointArgs) TStructName() string {
  return "SetSwitchPointArgs"
}

func (p *SetSwitchPointArgs) ThriftName() string {
  return "SetSwitchPoint_args"
}

func (p *SetSwitchPointArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetSwitchPointArgs(%+v)", *p)
}

func (p *SetSwitchPointArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SetSwitchPointArgs)
  if !ok {
    return 0, false
  }
  if cmp, ok := p._id.CompareTo(data._id); !ok || cmp != 0 {
    return cmp, ok
  }
  if p._hours != data._hours {
    if p._hours < data._hours {
      return -1, true
    }
    return 1, true
  }
  if p._minutes != data._minutes {
    if p._minutes < data._minutes {
      return -1, true
    }
    return 1, true
  }
  if p._setback != data._setback {
    if p._setback < data._setback {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *SetSwitchPointArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._id
  case 2: return p._hours
  case 3: return p._minutes
  case 4: return p._setback
  }
  return nil
}

func (p *SetSwitchPointArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    thrift.NewTField("_hours", thrift.BYTE, 2),
    thrift.NewTField("_minutes", thrift.BYTE, 3),
    thrift.NewTField("_setback", thrift.BYTE, 4),
    })
}

/**
 * Attributes:
 *  - Success
 */
type SetSwitchPointResult struct {
  thrift.TStruct
  Success bool "success"; // 0
}

func NewSetSwitchPointResult() *SetSwitchPointResult {
  output := &SetSwitchPointResult{
    TStruct:thrift.NewTStruct("SetSwitchPoint_result", []thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    }),
  }
  {
  }
  return output
}

func (p *SetSwitchPointResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SetSwitchPointResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1370, err1371 := iprot.ReadBool()
  if err1371 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1371); }
  p.Success = v1370
  return err
}

func (p *SetSwitchPointResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *SetSwitchPointResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SetSwitchPoint_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SetSwitchPointResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BOOL, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *SetSwitchPointResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *SetSwitchPointResult) TStructName() string {
  return "SetSwitchPointResult"
}

func (p *SetSwitchPointResult) ThriftName() string {
  return "SetSwitchPoint_result"
}

func (p *SetSwitchPointResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetSwitchPointResult(%+v)", *p)
}

func (p *SetSwitchPointResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SetSwitchPointResult)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Success, data.Success); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *SetSwitchPointResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *SetSwitchPointResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    })
}

/**
 * Attributes:
 *  - _id
 *  - _hours
 *  - _minutes
 */
type RemoveSwitchPointArgs struct {
  thrift.TStruct
  _id *RemoteValueID "_id"; // 1
  _hours byte "_hours"; // 2
  _minutes byte "_minutes"; // 3
}

func NewRemoveSwitchPointArgs() *RemoveSwitchPointArgs {
  output := &RemoveSwitchPointArgs{
    TStruct:thrift.NewTStruct("RemoveSwitchPoint_args", []thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    thrift.NewTField("_hours", thrift.BYTE, 2),
    thrift.NewTField("_minutes", thrift.BYTE, 3),
    }),
  }
  {
  }
  return output
}

func (p *RemoveSwitchPointArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_id" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_hours" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "_minutes" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *RemoveSwitchPointArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p._id = NewRemoteValueID()
  err1374 := p._id.Read(iprot)
  if err1374 != nil { return thrift.NewTProtocolExceptionReadStruct("p._idRemoteValueID", err1374); }
  return err
}

func (p *RemoveSwitchPointArgs) ReadField_id(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *RemoveSwitchPointArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1375, err1376 := iprot.ReadByte()
  if err1376 != nil { return thrift.NewTProtocolExceptionReadField(2, "_hours", p.ThriftName(), err1376); }
  p._hours = v1375
  return err
}

func (p *RemoveSwitchPointArgs) ReadField_hours(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *RemoveSwitchPointArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1377, err1378 := iprot.ReadByte()
  if err1378 != nil { return thrift.NewTProtocolExceptionReadField(3, "_minutes", p.ThriftName(), err1378); }
  p._minutes = v1377
  return err
}

func (p *RemoveSwitchPointArgs) ReadField_minutes(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *RemoveSwitchPointArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("RemoveSwitchPoint_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *RemoveSwitchPointArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._id != nil {
    err = oprot.WriteFieldBegin("_id", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
    err = p._id.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RemoteValueID", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
  }
  return err
}

func (p *RemoveSwitchPointArgs) WriteField_id(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *RemoveSwitchPointArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_hours", thrift.BYTE, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_hours", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._hours))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_hours", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_hours", p.ThriftName(), err); }
  return err
}

func (p *RemoveSwitchPointArgs) WriteField_hours(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *RemoveSwitchPointArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_minutes", thrift.BYTE, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_minutes", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._minutes))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_minutes", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_minutes", p.ThriftName(), err); }
  return err
}

func (p *RemoveSwitchPointArgs) WriteField_minutes(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *RemoveSwitchPointArgs) TStructName() string {
  return "RemoveSwitchPointArgs"
}

func (p *RemoveSwitchPointArgs) ThriftName() string {
  return "RemoveSwitchPoint_args"
}

func (p *RemoveSwitchPointArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RemoveSwitchPointArgs(%+v)", *p)
}

func (p *RemoveSwitchPointArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*RemoveSwitchPointArgs)
  if !ok {
    return 0, false
  }
  if cmp, ok := p._id.CompareTo(data._id); !ok || cmp != 0 {
    return cmp, ok
  }
  if p._hours != data._hours {
    if p._hours < data._hours {
      return -1, true
    }
    return 1, true
  }
  if p._minutes != data._minutes {
    if p._minutes < data._minutes {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *RemoveSwitchPointArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._id
  case 2: return p._hours
  case 3: return p._minutes
  }
  return nil
}

func (p *RemoveSwitchPointArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    thrift.NewTField("_hours", thrift.BYTE, 2),
    thrift.NewTField("_minutes", thrift.BYTE, 3),
    })
}

/**
 * Attributes:
 *  - Success
 */
type RemoveSwitchPointResult struct {
  thrift.TStruct
  Success bool "success"; // 0
}

func NewRemoveSwitchPointResult() *RemoveSwitchPointResult {
  output := &RemoveSwitchPointResult{
    TStruct:thrift.NewTStruct("RemoveSwitchPoint_result", []thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    }),
  }
  {
  }
  return output
}

func (p *RemoveSwitchPointResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *RemoveSwitchPointResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1379, err1380 := iprot.ReadBool()
  if err1380 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1380); }
  p.Success = v1379
  return err
}

func (p *RemoveSwitchPointResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *RemoveSwitchPointResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("RemoveSwitchPoint_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *RemoveSwitchPointResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BOOL, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *RemoveSwitchPointResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *RemoveSwitchPointResult) TStructName() string {
  return "RemoveSwitchPointResult"
}

func (p *RemoveSwitchPointResult) ThriftName() string {
  return "RemoveSwitchPoint_result"
}

func (p *RemoveSwitchPointResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RemoveSwitchPointResult(%+v)", *p)
}

func (p *RemoveSwitchPointResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*RemoveSwitchPointResult)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Success, data.Success); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *RemoveSwitchPointResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *RemoveSwitchPointResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    })
}

/**
 * Attributes:
 *  - _id
 */
type ClearSwitchPointsArgs struct {
  thrift.TStruct
  _id *RemoteValueID "_id"; // 1
}

func NewClearSwitchPointsArgs() *ClearSwitchPointsArgs {
  output := &ClearSwitchPointsArgs{
    TStruct:thrift.NewTStruct("ClearSwitchPoints_args", []thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *ClearSwitchPointsArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_id" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *ClearSwitchPointsArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p._id = NewRemoteValueID()
  err1383 := p._id.Read(iprot)
  if err1383 != nil { return thrift.NewTProtocolExceptionReadStruct("p._idRemoteValueID", err1383); }
  return err
}

func (p *ClearSwitchPointsArgs) ReadField_id(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *ClearSwitchPointsArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("ClearSwitchPoints_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *ClearSwitchPointsArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._id != nil {
    err = oprot.WriteFieldBegin("_id", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
    err = p._id.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RemoteValueID", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
  }
  return err
}

func (p *ClearSwitchPointsArgs) WriteField_id(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *ClearSwitchPointsArgs) TStructName() string {
  return "ClearSwitchPointsArgs"
}

func (p *ClearSwitchPointsArgs) ThriftName() string {
  return "ClearSwitchPoints_args"
}

func (p *ClearSwitchPointsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ClearSwitchPointsArgs(%+v)", *p)
}

func (p *ClearSwitchPointsArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*ClearSwitchPointsArgs)
  if !ok {
    return 0, false
  }
  if cmp, ok := p._id.CompareTo(data._id); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *ClearSwitchPointsArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._id
  }
  return nil
}

func (p *ClearSwitchPointsArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    })
}

type ClearSwitchPointsResult struct {
  thrift.TStruct
}

func NewClearSwitchPointsResult() *ClearSwitchPointsResult {
  output := &ClearSwitchPointsResult{
    TStruct:thrift.NewTStruct("ClearSwitchPoints_result", []thrift.TField{
    }),
  }
  {
  }
  return output
}

func (p *ClearSwitchPointsResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    err = iprot.Skip(fieldTypeId)
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *ClearSwitchPointsResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("ClearSwitchPoints_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *ClearSwitchPointsResult) TStructName() string {
  return "ClearSwitchPointsResult"
}

func (p *ClearSwitchPointsResult) ThriftName() string {
  return "ClearSwitchPoints_result"
}

func (p *ClearSwitchPointsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ClearSwitchPointsResult(%+v)", *p)
}

func (p *ClearSwitchPointsResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  _, ok := other.(*ClearSwitchPointsResult)
  if !ok {
    return 0, false
  }
  return 0, true
}

func (p *ClearSwitchPointsResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  }
  return nil
}

func (p *ClearSwitchPointsResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    })
}

/**
 * Attributes:
 *  - _id
 *  - _idx
 */
type GetSwitchPointArgs struct {
  thrift.TStruct
  _id *RemoteValueID "_id"; // 1
  _idx byte "_idx"; // 2
}

func NewGetSwitchPointArgs() *GetSwitchPointArgs {
  output := &GetSwitchPointArgs{
    TStruct:thrift.NewTStruct("GetSwitchPoint_args", []thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    thrift.NewTField("_idx", thrift.BYTE, 2),
    }),
  }
  {
  }
  return output
}

func (p *GetSwitchPointArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_id" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_idx" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetSwitchPointArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p._id = NewRemoteValueID()
  err1386 := p._id.Read(iprot)
  if err1386 != nil { return thrift.NewTProtocolExceptionReadStruct("p._idRemoteValueID", err1386); }
  return err
}

func (p *GetSwitchPointArgs) ReadField_id(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetSwitchPointArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1387, err1388 := iprot.ReadByte()
  if err1388 != nil { return thrift.NewTProtocolExceptionReadField(2, "_idx", p.ThriftName(), err1388); }
  p._idx = v1387
  return err
}

func (p *GetSwitchPointArgs) ReadField_idx(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *GetSwitchPointArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetSwitchPoint_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetSwitchPointArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._id != nil {
    err = oprot.WriteFieldBegin("_id", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
    err = p._id.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RemoteValueID", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
  }
  return err
}

func (p *GetSwitchPointArgs) WriteField_id(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetSwitchPointArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_idx", thrift.BYTE, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_idx", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._idx))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_idx", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_idx", p.ThriftName(), err); }
  return err
}

func (p *GetSwitchPointArgs) WriteField_idx(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *GetSwitchPointArgs) TStructName() string {
  return "GetSwitchPointArgs"
}

func (p *GetSwitchPointArgs) ThriftName() string {
  return "GetSwitchPoint_args"
}

func (p *GetSwitchPointArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetSwitchPointArgs(%+v)", *p)
}

func (p *GetSwitchPointArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetSwitchPointArgs)
  if !ok {
    return 0, false
  }
  if cmp, ok := p._id.CompareTo(data._id); !ok || cmp != 0 {
    return cmp, ok
  }
  if p._idx != data._idx {
    if p._idx < data._idx {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetSwitchPointArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._id
  case 2: return p._idx
  }
  return nil
}

func (p *GetSwitchPointArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    thrift.NewTField("_idx", thrift.BYTE, 2),
    })
}

/**
 * Attributes:
 *  - Success
 */
type GetSwitchPointResult struct {
  thrift.TStruct
  Success *GetSwitchPointReturnStruct "success"; // 0
}

func NewGetSwitchPointResult() *GetSwitchPointResult {
  output := &GetSwitchPointResult{
    TStruct:thrift.NewTStruct("GetSwitchPoint_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    }),
  }
  {
  }
  return output
}

func (p *GetSwitchPointResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetSwitchPointResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Success = NewGetSwitchPointReturnStruct()
  err1391 := p.Success.Read(iprot)
  if err1391 != nil { return thrift.NewTProtocolExceptionReadStruct("p.SuccessGetSwitchPointReturnStruct", err1391); }
  return err
}

func (p *GetSwitchPointResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetSwitchPointResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetSwitchPoint_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetSwitchPointResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = p.Success.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("GetSwitchPointReturnStruct", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *GetSwitchPointResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetSwitchPointResult) TStructName() string {
  return "GetSwitchPointResult"
}

func (p *GetSwitchPointResult) ThriftName() string {
  return "GetSwitchPoint_result"
}

func (p *GetSwitchPointResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetSwitchPointResult(%+v)", *p)
}

func (p *GetSwitchPointResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetSwitchPointResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetSwitchPointResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *GetSwitchPointResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    })
}

/**
 * Attributes:
 *  - _homeId
 */
type SwitchAllOnArgs struct {
  thrift.TStruct
  _homeId int32 "_homeId"; // 1
}

func NewSwitchAllOnArgs() *SwitchAllOnArgs {
  output := &SwitchAllOnArgs{
    TStruct:thrift.NewTStruct("SwitchAllOn_args", []thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    }),
  }
  {
  }
  return output
}

func (p *SwitchAllOnArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_homeId" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SwitchAllOnArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1392, err1393 := iprot.ReadI32()
  if err1393 != nil { return thrift.NewTProtocolExceptionReadField(1, "_homeId", p.ThriftName(), err1393); }
  p._homeId = v1392
  return err
}

func (p *SwitchAllOnArgs) ReadField_homeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *SwitchAllOnArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SwitchAllOn_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SwitchAllOnArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_homeId", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._homeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  return err
}

func (p *SwitchAllOnArgs) WriteField_homeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *SwitchAllOnArgs) TStructName() string {
  return "SwitchAllOnArgs"
}

func (p *SwitchAllOnArgs) ThriftName() string {
  return "SwitchAllOn_args"
}

func (p *SwitchAllOnArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SwitchAllOnArgs(%+v)", *p)
}

func (p *SwitchAllOnArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SwitchAllOnArgs)
  if !ok {
    return 0, false
  }
  if p._homeId != data._homeId {
    if p._homeId < data._homeId {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *SwitchAllOnArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._homeId
  }
  return nil
}

func (p *SwitchAllOnArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    })
}

type SwitchAllOnResult struct {
  thrift.TStruct
}

func NewSwitchAllOnResult() *SwitchAllOnResult {
  output := &SwitchAllOnResult{
    TStruct:thrift.NewTStruct("SwitchAllOn_result", []thrift.TField{
    }),
  }
  {
  }
  return output
}

func (p *SwitchAllOnResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    err = iprot.Skip(fieldTypeId)
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SwitchAllOnResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SwitchAllOn_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SwitchAllOnResult) TStructName() string {
  return "SwitchAllOnResult"
}

func (p *SwitchAllOnResult) ThriftName() string {
  return "SwitchAllOn_result"
}

func (p *SwitchAllOnResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SwitchAllOnResult(%+v)", *p)
}

func (p *SwitchAllOnResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  _, ok := other.(*SwitchAllOnResult)
  if !ok {
    return 0, false
  }
  return 0, true
}

func (p *SwitchAllOnResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  }
  return nil
}

func (p *SwitchAllOnResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    })
}

/**
 * Attributes:
 *  - _homeId
 */
type SwitchAllOffArgs struct {
  thrift.TStruct
  _homeId int32 "_homeId"; // 1
}

func NewSwitchAllOffArgs() *SwitchAllOffArgs {
  output := &SwitchAllOffArgs{
    TStruct:thrift.NewTStruct("SwitchAllOff_args", []thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    }),
  }
  {
  }
  return output
}

func (p *SwitchAllOffArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_homeId" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SwitchAllOffArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1394, err1395 := iprot.ReadI32()
  if err1395 != nil { return thrift.NewTProtocolExceptionReadField(1, "_homeId", p.ThriftName(), err1395); }
  p._homeId = v1394
  return err
}

func (p *SwitchAllOffArgs) ReadField_homeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *SwitchAllOffArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SwitchAllOff_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SwitchAllOffArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_homeId", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._homeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  return err
}

func (p *SwitchAllOffArgs) WriteField_homeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *SwitchAllOffArgs) TStructName() string {
  return "SwitchAllOffArgs"
}

func (p *SwitchAllOffArgs) ThriftName() string {
  return "SwitchAllOff_args"
}

func (p *SwitchAllOffArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SwitchAllOffArgs(%+v)", *p)
}

func (p *SwitchAllOffArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SwitchAllOffArgs)
  if !ok {
    return 0, false
  }
  if p._homeId != data._homeId {
    if p._homeId < data._homeId {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *SwitchAllOffArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._homeId
  }
  return nil
}

func (p *SwitchAllOffArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    })
}

type SwitchAllOffResult struct {
  thrift.TStruct
}

func NewSwitchAllOffResult() *SwitchAllOffResult {
  output := &SwitchAllOffResult{
    TStruct:thrift.NewTStruct("SwitchAllOff_result", []thrift.TField{
    }),
  }
  {
  }
  return output
}

func (p *SwitchAllOffResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    err = iprot.Skip(fieldTypeId)
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SwitchAllOffResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SwitchAllOff_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SwitchAllOffResult) TStructName() string {
  return "SwitchAllOffResult"
}

func (p *SwitchAllOffResult) ThriftName() string {
  return "SwitchAllOff_result"
}

func (p *SwitchAllOffResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SwitchAllOffResult(%+v)", *p)
}

func (p *SwitchAllOffResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  _, ok := other.(*SwitchAllOffResult)
  if !ok {
    return 0, false
  }
  return 0, true
}

func (p *SwitchAllOffResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  }
  return nil
}

func (p *SwitchAllOffResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    })
}

/**
 * Attributes:
 *  - _homeId
 *  - _nodeId
 *  - _param
 *  - _value
 *  - _size
 */
type SetConfigParamArgs struct {
  thrift.TStruct
  _homeId int32 "_homeId"; // 1
  _nodeId byte "_nodeId"; // 2
  _param byte "_param"; // 3
  _value int32 "_value"; // 4
  _size byte "_size"; // 5
}

func NewSetConfigParamArgs() *SetConfigParamArgs {
  output := &SetConfigParamArgs{
    TStruct:thrift.NewTStruct("SetConfigParam_args", []thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    thrift.NewTField("_param", thrift.BYTE, 3),
    thrift.NewTField("_value", thrift.I32, 4),
    thrift.NewTField("_size", thrift.BYTE, 5),
    }),
  }
  {
    output._size = 2
  }
  return output
}

func (p *SetConfigParamArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_homeId" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_nodeId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "_param" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 4 || fieldName == "_value" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 5 || fieldName == "_size" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField5(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField5(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SetConfigParamArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1396, err1397 := iprot.ReadI32()
  if err1397 != nil { return thrift.NewTProtocolExceptionReadField(1, "_homeId", p.ThriftName(), err1397); }
  p._homeId = v1396
  return err
}

func (p *SetConfigParamArgs) ReadField_homeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *SetConfigParamArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1398, err1399 := iprot.ReadByte()
  if err1399 != nil { return thrift.NewTProtocolExceptionReadField(2, "_nodeId", p.ThriftName(), err1399); }
  p._nodeId = v1398
  return err
}

func (p *SetConfigParamArgs) ReadField_nodeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *SetConfigParamArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1400, err1401 := iprot.ReadByte()
  if err1401 != nil { return thrift.NewTProtocolExceptionReadField(3, "_param", p.ThriftName(), err1401); }
  p._param = v1400
  return err
}

func (p *SetConfigParamArgs) ReadField_param(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *SetConfigParamArgs) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1402, err1403 := iprot.ReadI32()
  if err1403 != nil { return thrift.NewTProtocolExceptionReadField(4, "_value", p.ThriftName(), err1403); }
  p._value = v1402
  return err
}

func (p *SetConfigParamArgs) ReadField_value(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField4(iprot)
}

func (p *SetConfigParamArgs) ReadField5(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1404, err1405 := iprot.ReadByte()
  if err1405 != nil { return thrift.NewTProtocolExceptionReadField(5, "_size", p.ThriftName(), err1405); }
  p._size = v1404
  return err
}

func (p *SetConfigParamArgs) ReadField_size(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField5(iprot)
}

func (p *SetConfigParamArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SetConfigParam_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = p.WriteField4(oprot)
  if err != nil { return err }
  err = p.WriteField5(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SetConfigParamArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_homeId", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._homeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  return err
}

func (p *SetConfigParamArgs) WriteField_homeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *SetConfigParamArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_nodeId", thrift.BYTE, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._nodeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  return err
}

func (p *SetConfigParamArgs) WriteField_nodeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *SetConfigParamArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_param", thrift.BYTE, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_param", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._param))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_param", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_param", p.ThriftName(), err); }
  return err
}

func (p *SetConfigParamArgs) WriteField_param(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *SetConfigParamArgs) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_value", thrift.I32, 4)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "_value", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._value))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "_value", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "_value", p.ThriftName(), err); }
  return err
}

func (p *SetConfigParamArgs) WriteField_value(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField4(oprot)
}

func (p *SetConfigParamArgs) WriteField5(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_size", thrift.BYTE, 5)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "_size", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._size))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "_size", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "_size", p.ThriftName(), err); }
  return err
}

func (p *SetConfigParamArgs) WriteField_size(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField5(oprot)
}

func (p *SetConfigParamArgs) TStructName() string {
  return "SetConfigParamArgs"
}

func (p *SetConfigParamArgs) ThriftName() string {
  return "SetConfigParam_args"
}

func (p *SetConfigParamArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetConfigParamArgs(%+v)", *p)
}

func (p *SetConfigParamArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SetConfigParamArgs)
  if !ok {
    return 0, false
  }
  if p._homeId != data._homeId {
    if p._homeId < data._homeId {
      return -1, true
    }
    return 1, true
  }
  if p._nodeId != data._nodeId {
    if p._nodeId < data._nodeId {
      return -1, true
    }
    return 1, true
  }
  if p._param != data._param {
    if p._param < data._param {
      return -1, true
    }
    return 1, true
  }
  if p._value != data._value {
    if p._value < data._value {
      return -1, true
    }
    return 1, true
  }
  if p._size != data._size {
    if p._size < data._size {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *SetConfigParamArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._homeId
  case 2: return p._nodeId
  case 3: return p._param
  case 4: return p._value
  case 5: return p._size
  }
  return nil
}

func (p *SetConfigParamArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    thrift.NewTField("_param", thrift.BYTE, 3),
    thrift.NewTField("_value", thrift.I32, 4),
    thrift.NewTField("_size", thrift.BYTE, 5),
    })
}

/**
 * Attributes:
 *  - Success
 */
type SetConfigParamResult struct {
  thrift.TStruct
  Success bool "success"; // 0
}

func NewSetConfigParamResult() *SetConfigParamResult {
  output := &SetConfigParamResult{
    TStruct:thrift.NewTStruct("SetConfigParam_result", []thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    }),
  }
  {
  }
  return output
}

func (p *SetConfigParamResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SetConfigParamResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1406, err1407 := iprot.ReadBool()
  if err1407 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1407); }
  p.Success = v1406
  return err
}

func (p *SetConfigParamResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *SetConfigParamResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SetConfigParam_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SetConfigParamResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BOOL, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *SetConfigParamResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *SetConfigParamResult) TStructName() string {
  return "SetConfigParamResult"
}

func (p *SetConfigParamResult) ThriftName() string {
  return "SetConfigParam_result"
}

func (p *SetConfigParamResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetConfigParamResult(%+v)", *p)
}

func (p *SetConfigParamResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SetConfigParamResult)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Success, data.Success); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *SetConfigParamResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *SetConfigParamResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    })
}

/**
 * Attributes:
 *  - _homeId
 *  - _nodeId
 *  - _param
 */
type RequestConfigParamArgs struct {
  thrift.TStruct
  _homeId int32 "_homeId"; // 1
  _nodeId byte "_nodeId"; // 2
  _param byte "_param"; // 3
}

func NewRequestConfigParamArgs() *RequestConfigParamArgs {
  output := &RequestConfigParamArgs{
    TStruct:thrift.NewTStruct("RequestConfigParam_args", []thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    thrift.NewTField("_param", thrift.BYTE, 3),
    }),
  }
  {
  }
  return output
}

func (p *RequestConfigParamArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_homeId" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_nodeId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "_param" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *RequestConfigParamArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1408, err1409 := iprot.ReadI32()
  if err1409 != nil { return thrift.NewTProtocolExceptionReadField(1, "_homeId", p.ThriftName(), err1409); }
  p._homeId = v1408
  return err
}

func (p *RequestConfigParamArgs) ReadField_homeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *RequestConfigParamArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1410, err1411 := iprot.ReadByte()
  if err1411 != nil { return thrift.NewTProtocolExceptionReadField(2, "_nodeId", p.ThriftName(), err1411); }
  p._nodeId = v1410
  return err
}

func (p *RequestConfigParamArgs) ReadField_nodeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *RequestConfigParamArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1412, err1413 := iprot.ReadByte()
  if err1413 != nil { return thrift.NewTProtocolExceptionReadField(3, "_param", p.ThriftName(), err1413); }
  p._param = v1412
  return err
}

func (p *RequestConfigParamArgs) ReadField_param(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *RequestConfigParamArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("RequestConfigParam_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *RequestConfigParamArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_homeId", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._homeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  return err
}

func (p *RequestConfigParamArgs) WriteField_homeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *RequestConfigParamArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_nodeId", thrift.BYTE, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._nodeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  return err
}

func (p *RequestConfigParamArgs) WriteField_nodeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *RequestConfigParamArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_param", thrift.BYTE, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_param", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._param))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_param", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_param", p.ThriftName(), err); }
  return err
}

func (p *RequestConfigParamArgs) WriteField_param(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *RequestConfigParamArgs) TStructName() string {
  return "RequestConfigParamArgs"
}

func (p *RequestConfigParamArgs) ThriftName() string {
  return "RequestConfigParam_args"
}

func (p *RequestConfigParamArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RequestConfigParamArgs(%+v)", *p)
}

func (p *RequestConfigParamArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*RequestConfigParamArgs)
  if !ok {
    return 0, false
  }
  if p._homeId != data._homeId {
    if p._homeId < data._homeId {
      return -1, true
    }
    return 1, true
  }
  if p._nodeId != data._nodeId {
    if p._nodeId < data._nodeId {
      return -1, true
    }
    return 1, true
  }
  if p._param != data._param {
    if p._param < data._param {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *RequestConfigParamArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._homeId
  case 2: return p._nodeId
  case 3: return p._param
  }
  return nil
}

func (p *RequestConfigParamArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    thrift.NewTField("_param", thrift.BYTE, 3),
    })
}

type RequestConfigParamResult struct {
  thrift.TStruct
}

func NewRequestConfigParamResult() *RequestConfigParamResult {
  output := &RequestConfigParamResult{
    TStruct:thrift.NewTStruct("RequestConfigParam_result", []thrift.TField{
    }),
  }
  {
  }
  return output
}

func (p *RequestConfigParamResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    err = iprot.Skip(fieldTypeId)
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *RequestConfigParamResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("RequestConfigParam_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *RequestConfigParamResult) TStructName() string {
  return "RequestConfigParamResult"
}

func (p *RequestConfigParamResult) ThriftName() string {
  return "RequestConfigParam_result"
}

func (p *RequestConfigParamResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RequestConfigParamResult(%+v)", *p)
}

func (p *RequestConfigParamResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  _, ok := other.(*RequestConfigParamResult)
  if !ok {
    return 0, false
  }
  return 0, true
}

func (p *RequestConfigParamResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  }
  return nil
}

func (p *RequestConfigParamResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    })
}

/**
 * Attributes:
 *  - _homeId
 *  - _nodeId
 */
type RequestAllConfigParamsArgs struct {
  thrift.TStruct
  _homeId int32 "_homeId"; // 1
  _nodeId byte "_nodeId"; // 2
}

func NewRequestAllConfigParamsArgs() *RequestAllConfigParamsArgs {
  output := &RequestAllConfigParamsArgs{
    TStruct:thrift.NewTStruct("RequestAllConfigParams_args", []thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    }),
  }
  {
  }
  return output
}

func (p *RequestAllConfigParamsArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_homeId" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_nodeId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *RequestAllConfigParamsArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1414, err1415 := iprot.ReadI32()
  if err1415 != nil { return thrift.NewTProtocolExceptionReadField(1, "_homeId", p.ThriftName(), err1415); }
  p._homeId = v1414
  return err
}

func (p *RequestAllConfigParamsArgs) ReadField_homeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *RequestAllConfigParamsArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1416, err1417 := iprot.ReadByte()
  if err1417 != nil { return thrift.NewTProtocolExceptionReadField(2, "_nodeId", p.ThriftName(), err1417); }
  p._nodeId = v1416
  return err
}

func (p *RequestAllConfigParamsArgs) ReadField_nodeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *RequestAllConfigParamsArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("RequestAllConfigParams_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *RequestAllConfigParamsArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_homeId", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._homeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  return err
}

func (p *RequestAllConfigParamsArgs) WriteField_homeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *RequestAllConfigParamsArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_nodeId", thrift.BYTE, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._nodeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  return err
}

func (p *RequestAllConfigParamsArgs) WriteField_nodeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *RequestAllConfigParamsArgs) TStructName() string {
  return "RequestAllConfigParamsArgs"
}

func (p *RequestAllConfigParamsArgs) ThriftName() string {
  return "RequestAllConfigParams_args"
}

func (p *RequestAllConfigParamsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RequestAllConfigParamsArgs(%+v)", *p)
}

func (p *RequestAllConfigParamsArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*RequestAllConfigParamsArgs)
  if !ok {
    return 0, false
  }
  if p._homeId != data._homeId {
    if p._homeId < data._homeId {
      return -1, true
    }
    return 1, true
  }
  if p._nodeId != data._nodeId {
    if p._nodeId < data._nodeId {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *RequestAllConfigParamsArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._homeId
  case 2: return p._nodeId
  }
  return nil
}

func (p *RequestAllConfigParamsArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    })
}

type RequestAllConfigParamsResult struct {
  thrift.TStruct
}

func NewRequestAllConfigParamsResult() *RequestAllConfigParamsResult {
  output := &RequestAllConfigParamsResult{
    TStruct:thrift.NewTStruct("RequestAllConfigParams_result", []thrift.TField{
    }),
  }
  {
  }
  return output
}

func (p *RequestAllConfigParamsResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    err = iprot.Skip(fieldTypeId)
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *RequestAllConfigParamsResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("RequestAllConfigParams_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *RequestAllConfigParamsResult) TStructName() string {
  return "RequestAllConfigParamsResult"
}

func (p *RequestAllConfigParamsResult) ThriftName() string {
  return "RequestAllConfigParams_result"
}

func (p *RequestAllConfigParamsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RequestAllConfigParamsResult(%+v)", *p)
}

func (p *RequestAllConfigParamsResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  _, ok := other.(*RequestAllConfigParamsResult)
  if !ok {
    return 0, false
  }
  return 0, true
}

func (p *RequestAllConfigParamsResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  }
  return nil
}

func (p *RequestAllConfigParamsResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    })
}

/**
 * Attributes:
 *  - _homeId
 *  - _nodeId
 */
type GetNumGroupsArgs struct {
  thrift.TStruct
  _homeId int32 "_homeId"; // 1
  _nodeId byte "_nodeId"; // 2
}

func NewGetNumGroupsArgs() *GetNumGroupsArgs {
  output := &GetNumGroupsArgs{
    TStruct:thrift.NewTStruct("GetNumGroups_args", []thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    }),
  }
  {
  }
  return output
}

func (p *GetNumGroupsArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_homeId" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_nodeId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNumGroupsArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1418, err1419 := iprot.ReadI32()
  if err1419 != nil { return thrift.NewTProtocolExceptionReadField(1, "_homeId", p.ThriftName(), err1419); }
  p._homeId = v1418
  return err
}

func (p *GetNumGroupsArgs) ReadField_homeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetNumGroupsArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1420, err1421 := iprot.ReadByte()
  if err1421 != nil { return thrift.NewTProtocolExceptionReadField(2, "_nodeId", p.ThriftName(), err1421); }
  p._nodeId = v1420
  return err
}

func (p *GetNumGroupsArgs) ReadField_nodeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *GetNumGroupsArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetNumGroups_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNumGroupsArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_homeId", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._homeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  return err
}

func (p *GetNumGroupsArgs) WriteField_homeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetNumGroupsArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_nodeId", thrift.BYTE, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._nodeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  return err
}

func (p *GetNumGroupsArgs) WriteField_nodeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *GetNumGroupsArgs) TStructName() string {
  return "GetNumGroupsArgs"
}

func (p *GetNumGroupsArgs) ThriftName() string {
  return "GetNumGroups_args"
}

func (p *GetNumGroupsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetNumGroupsArgs(%+v)", *p)
}

func (p *GetNumGroupsArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetNumGroupsArgs)
  if !ok {
    return 0, false
  }
  if p._homeId != data._homeId {
    if p._homeId < data._homeId {
      return -1, true
    }
    return 1, true
  }
  if p._nodeId != data._nodeId {
    if p._nodeId < data._nodeId {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetNumGroupsArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._homeId
  case 2: return p._nodeId
  }
  return nil
}

func (p *GetNumGroupsArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    })
}

/**
 * Attributes:
 *  - Success
 */
type GetNumGroupsResult struct {
  thrift.TStruct
  Success byte "success"; // 0
}

func NewGetNumGroupsResult() *GetNumGroupsResult {
  output := &GetNumGroupsResult{
    TStruct:thrift.NewTStruct("GetNumGroups_result", []thrift.TField{
    thrift.NewTField("success", thrift.BYTE, 0),
    }),
  }
  {
  }
  return output
}

func (p *GetNumGroupsResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNumGroupsResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1422, err1423 := iprot.ReadByte()
  if err1423 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1423); }
  p.Success = v1422
  return err
}

func (p *GetNumGroupsResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetNumGroupsResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetNumGroups_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNumGroupsResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BYTE, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *GetNumGroupsResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetNumGroupsResult) TStructName() string {
  return "GetNumGroupsResult"
}

func (p *GetNumGroupsResult) ThriftName() string {
  return "GetNumGroups_result"
}

func (p *GetNumGroupsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetNumGroupsResult(%+v)", *p)
}

func (p *GetNumGroupsResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetNumGroupsResult)
  if !ok {
    return 0, false
  }
  if p.Success != data.Success {
    if p.Success < data.Success {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetNumGroupsResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *GetNumGroupsResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BYTE, 0),
    })
}

/**
 * Attributes:
 *  - _homeId
 *  - _nodeId
 *  - _groupIdx
 */
type GetAssociationsArgs struct {
  thrift.TStruct
  _homeId int32 "_homeId"; // 1
  _nodeId byte "_nodeId"; // 2
  _groupIdx byte "_groupIdx"; // 3
}

func NewGetAssociationsArgs() *GetAssociationsArgs {
  output := &GetAssociationsArgs{
    TStruct:thrift.NewTStruct("GetAssociations_args", []thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    thrift.NewTField("_groupIdx", thrift.BYTE, 3),
    }),
  }
  {
  }
  return output
}

func (p *GetAssociationsArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_homeId" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_nodeId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "_groupIdx" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetAssociationsArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1424, err1425 := iprot.ReadI32()
  if err1425 != nil { return thrift.NewTProtocolExceptionReadField(1, "_homeId", p.ThriftName(), err1425); }
  p._homeId = v1424
  return err
}

func (p *GetAssociationsArgs) ReadField_homeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetAssociationsArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1426, err1427 := iprot.ReadByte()
  if err1427 != nil { return thrift.NewTProtocolExceptionReadField(2, "_nodeId", p.ThriftName(), err1427); }
  p._nodeId = v1426
  return err
}

func (p *GetAssociationsArgs) ReadField_nodeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *GetAssociationsArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1428, err1429 := iprot.ReadByte()
  if err1429 != nil { return thrift.NewTProtocolExceptionReadField(3, "_groupIdx", p.ThriftName(), err1429); }
  p._groupIdx = v1428
  return err
}

func (p *GetAssociationsArgs) ReadField_groupIdx(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *GetAssociationsArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetAssociations_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetAssociationsArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_homeId", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._homeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  return err
}

func (p *GetAssociationsArgs) WriteField_homeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetAssociationsArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_nodeId", thrift.BYTE, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._nodeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  return err
}

func (p *GetAssociationsArgs) WriteField_nodeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *GetAssociationsArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_groupIdx", thrift.BYTE, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_groupIdx", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._groupIdx))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_groupIdx", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_groupIdx", p.ThriftName(), err); }
  return err
}

func (p *GetAssociationsArgs) WriteField_groupIdx(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *GetAssociationsArgs) TStructName() string {
  return "GetAssociationsArgs"
}

func (p *GetAssociationsArgs) ThriftName() string {
  return "GetAssociations_args"
}

func (p *GetAssociationsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetAssociationsArgs(%+v)", *p)
}

func (p *GetAssociationsArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetAssociationsArgs)
  if !ok {
    return 0, false
  }
  if p._homeId != data._homeId {
    if p._homeId < data._homeId {
      return -1, true
    }
    return 1, true
  }
  if p._nodeId != data._nodeId {
    if p._nodeId < data._nodeId {
      return -1, true
    }
    return 1, true
  }
  if p._groupIdx != data._groupIdx {
    if p._groupIdx < data._groupIdx {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetAssociationsArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._homeId
  case 2: return p._nodeId
  case 3: return p._groupIdx
  }
  return nil
}

func (p *GetAssociationsArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    thrift.NewTField("_groupIdx", thrift.BYTE, 3),
    })
}

/**
 * Attributes:
 *  - Success
 */
type GetAssociationsResult struct {
  thrift.TStruct
  Success *GetAssociationsReturnStruct "success"; // 0
}

func NewGetAssociationsResult() *GetAssociationsResult {
  output := &GetAssociationsResult{
    TStruct:thrift.NewTStruct("GetAssociations_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    }),
  }
  {
  }
  return output
}

func (p *GetAssociationsResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetAssociationsResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Success = NewGetAssociationsReturnStruct()
  err1432 := p.Success.Read(iprot)
  if err1432 != nil { return thrift.NewTProtocolExceptionReadStruct("p.SuccessGetAssociationsReturnStruct", err1432); }
  return err
}

func (p *GetAssociationsResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetAssociationsResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetAssociations_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetAssociationsResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = p.Success.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("GetAssociationsReturnStruct", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *GetAssociationsResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetAssociationsResult) TStructName() string {
  return "GetAssociationsResult"
}

func (p *GetAssociationsResult) ThriftName() string {
  return "GetAssociations_result"
}

func (p *GetAssociationsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetAssociationsResult(%+v)", *p)
}

func (p *GetAssociationsResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetAssociationsResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetAssociationsResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *GetAssociationsResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    })
}

/**
 * Attributes:
 *  - _homeId
 *  - _nodeId
 *  - _groupIdx
 */
type GetMaxAssociationsArgs struct {
  thrift.TStruct
  _homeId int32 "_homeId"; // 1
  _nodeId byte "_nodeId"; // 2
  _groupIdx byte "_groupIdx"; // 3
}

func NewGetMaxAssociationsArgs() *GetMaxAssociationsArgs {
  output := &GetMaxAssociationsArgs{
    TStruct:thrift.NewTStruct("GetMaxAssociations_args", []thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    thrift.NewTField("_groupIdx", thrift.BYTE, 3),
    }),
  }
  {
  }
  return output
}

func (p *GetMaxAssociationsArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_homeId" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_nodeId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "_groupIdx" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetMaxAssociationsArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1433, err1434 := iprot.ReadI32()
  if err1434 != nil { return thrift.NewTProtocolExceptionReadField(1, "_homeId", p.ThriftName(), err1434); }
  p._homeId = v1433
  return err
}

func (p *GetMaxAssociationsArgs) ReadField_homeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetMaxAssociationsArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1435, err1436 := iprot.ReadByte()
  if err1436 != nil { return thrift.NewTProtocolExceptionReadField(2, "_nodeId", p.ThriftName(), err1436); }
  p._nodeId = v1435
  return err
}

func (p *GetMaxAssociationsArgs) ReadField_nodeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *GetMaxAssociationsArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1437, err1438 := iprot.ReadByte()
  if err1438 != nil { return thrift.NewTProtocolExceptionReadField(3, "_groupIdx", p.ThriftName(), err1438); }
  p._groupIdx = v1437
  return err
}

func (p *GetMaxAssociationsArgs) ReadField_groupIdx(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *GetMaxAssociationsArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetMaxAssociations_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetMaxAssociationsArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_homeId", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._homeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  return err
}

func (p *GetMaxAssociationsArgs) WriteField_homeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetMaxAssociationsArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_nodeId", thrift.BYTE, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._nodeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  return err
}

func (p *GetMaxAssociationsArgs) WriteField_nodeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *GetMaxAssociationsArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_groupIdx", thrift.BYTE, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_groupIdx", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._groupIdx))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_groupIdx", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_groupIdx", p.ThriftName(), err); }
  return err
}

func (p *GetMaxAssociationsArgs) WriteField_groupIdx(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *GetMaxAssociationsArgs) TStructName() string {
  return "GetMaxAssociationsArgs"
}

func (p *GetMaxAssociationsArgs) ThriftName() string {
  return "GetMaxAssociations_args"
}

func (p *GetMaxAssociationsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetMaxAssociationsArgs(%+v)", *p)
}

func (p *GetMaxAssociationsArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetMaxAssociationsArgs)
  if !ok {
    return 0, false
  }
  if p._homeId != data._homeId {
    if p._homeId < data._homeId {
      return -1, true
    }
    return 1, true
  }
  if p._nodeId != data._nodeId {
    if p._nodeId < data._nodeId {
      return -1, true
    }
    return 1, true
  }
  if p._groupIdx != data._groupIdx {
    if p._groupIdx < data._groupIdx {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetMaxAssociationsArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._homeId
  case 2: return p._nodeId
  case 3: return p._groupIdx
  }
  return nil
}

func (p *GetMaxAssociationsArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    thrift.NewTField("_groupIdx", thrift.BYTE, 3),
    })
}

/**
 * Attributes:
 *  - Success
 */
type GetMaxAssociationsResult struct {
  thrift.TStruct
  Success byte "success"; // 0
}

func NewGetMaxAssociationsResult() *GetMaxAssociationsResult {
  output := &GetMaxAssociationsResult{
    TStruct:thrift.NewTStruct("GetMaxAssociations_result", []thrift.TField{
    thrift.NewTField("success", thrift.BYTE, 0),
    }),
  }
  {
  }
  return output
}

func (p *GetMaxAssociationsResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetMaxAssociationsResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1439, err1440 := iprot.ReadByte()
  if err1440 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1440); }
  p.Success = v1439
  return err
}

func (p *GetMaxAssociationsResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetMaxAssociationsResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetMaxAssociations_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetMaxAssociationsResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BYTE, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *GetMaxAssociationsResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetMaxAssociationsResult) TStructName() string {
  return "GetMaxAssociationsResult"
}

func (p *GetMaxAssociationsResult) ThriftName() string {
  return "GetMaxAssociations_result"
}

func (p *GetMaxAssociationsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetMaxAssociationsResult(%+v)", *p)
}

func (p *GetMaxAssociationsResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetMaxAssociationsResult)
  if !ok {
    return 0, false
  }
  if p.Success != data.Success {
    if p.Success < data.Success {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetMaxAssociationsResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *GetMaxAssociationsResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BYTE, 0),
    })
}

/**
 * Attributes:
 *  - _homeId
 *  - _nodeId
 *  - _groupIdx
 */
type GetGroupLabelArgs struct {
  thrift.TStruct
  _homeId int32 "_homeId"; // 1
  _nodeId byte "_nodeId"; // 2
  _groupIdx byte "_groupIdx"; // 3
}

func NewGetGroupLabelArgs() *GetGroupLabelArgs {
  output := &GetGroupLabelArgs{
    TStruct:thrift.NewTStruct("GetGroupLabel_args", []thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    thrift.NewTField("_groupIdx", thrift.BYTE, 3),
    }),
  }
  {
  }
  return output
}

func (p *GetGroupLabelArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_homeId" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_nodeId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "_groupIdx" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetGroupLabelArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1441, err1442 := iprot.ReadI32()
  if err1442 != nil { return thrift.NewTProtocolExceptionReadField(1, "_homeId", p.ThriftName(), err1442); }
  p._homeId = v1441
  return err
}

func (p *GetGroupLabelArgs) ReadField_homeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetGroupLabelArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1443, err1444 := iprot.ReadByte()
  if err1444 != nil { return thrift.NewTProtocolExceptionReadField(2, "_nodeId", p.ThriftName(), err1444); }
  p._nodeId = v1443
  return err
}

func (p *GetGroupLabelArgs) ReadField_nodeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *GetGroupLabelArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1445, err1446 := iprot.ReadByte()
  if err1446 != nil { return thrift.NewTProtocolExceptionReadField(3, "_groupIdx", p.ThriftName(), err1446); }
  p._groupIdx = v1445
  return err
}

func (p *GetGroupLabelArgs) ReadField_groupIdx(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *GetGroupLabelArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetGroupLabel_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetGroupLabelArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_homeId", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._homeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  return err
}

func (p *GetGroupLabelArgs) WriteField_homeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetGroupLabelArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_nodeId", thrift.BYTE, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._nodeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  return err
}

func (p *GetGroupLabelArgs) WriteField_nodeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *GetGroupLabelArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_groupIdx", thrift.BYTE, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_groupIdx", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._groupIdx))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_groupIdx", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_groupIdx", p.ThriftName(), err); }
  return err
}

func (p *GetGroupLabelArgs) WriteField_groupIdx(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *GetGroupLabelArgs) TStructName() string {
  return "GetGroupLabelArgs"
}

func (p *GetGroupLabelArgs) ThriftName() string {
  return "GetGroupLabel_args"
}

func (p *GetGroupLabelArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetGroupLabelArgs(%+v)", *p)
}

func (p *GetGroupLabelArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetGroupLabelArgs)
  if !ok {
    return 0, false
  }
  if p._homeId != data._homeId {
    if p._homeId < data._homeId {
      return -1, true
    }
    return 1, true
  }
  if p._nodeId != data._nodeId {
    if p._nodeId < data._nodeId {
      return -1, true
    }
    return 1, true
  }
  if p._groupIdx != data._groupIdx {
    if p._groupIdx < data._groupIdx {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetGroupLabelArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._homeId
  case 2: return p._nodeId
  case 3: return p._groupIdx
  }
  return nil
}

func (p *GetGroupLabelArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    thrift.NewTField("_groupIdx", thrift.BYTE, 3),
    })
}

/**
 * Attributes:
 *  - Success
 */
type GetGroupLabelResult struct {
  thrift.TStruct
  Success string "success"; // 0
}

func NewGetGroupLabelResult() *GetGroupLabelResult {
  output := &GetGroupLabelResult{
    TStruct:thrift.NewTStruct("GetGroupLabel_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRING, 0),
    }),
  }
  {
  }
  return output
}

func (p *GetGroupLabelResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetGroupLabelResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1447, err1448 := iprot.ReadString()
  if err1448 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1448); }
  p.Success = v1447
  return err
}

func (p *GetGroupLabelResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetGroupLabelResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetGroupLabel_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetGroupLabelResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.STRING, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *GetGroupLabelResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetGroupLabelResult) TStructName() string {
  return "GetGroupLabelResult"
}

func (p *GetGroupLabelResult) ThriftName() string {
  return "GetGroupLabel_result"
}

func (p *GetGroupLabelResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetGroupLabelResult(%+v)", *p)
}

func (p *GetGroupLabelResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetGroupLabelResult)
  if !ok {
    return 0, false
  }
  if p.Success != data.Success {
    if p.Success < data.Success {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetGroupLabelResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *GetGroupLabelResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRING, 0),
    })
}

/**
 * Attributes:
 *  - _homeId
 *  - _nodeId
 *  - _groupIdx
 *  - _targetNodeId
 */
type AddAssociationArgs struct {
  thrift.TStruct
  _homeId int32 "_homeId"; // 1
  _nodeId byte "_nodeId"; // 2
  _groupIdx byte "_groupIdx"; // 3
  _targetNodeId byte "_targetNodeId"; // 4
}

func NewAddAssociationArgs() *AddAssociationArgs {
  output := &AddAssociationArgs{
    TStruct:thrift.NewTStruct("AddAssociation_args", []thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    thrift.NewTField("_groupIdx", thrift.BYTE, 3),
    thrift.NewTField("_targetNodeId", thrift.BYTE, 4),
    }),
  }
  {
  }
  return output
}

func (p *AddAssociationArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_homeId" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_nodeId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "_groupIdx" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 4 || fieldName == "_targetNodeId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *AddAssociationArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1449, err1450 := iprot.ReadI32()
  if err1450 != nil { return thrift.NewTProtocolExceptionReadField(1, "_homeId", p.ThriftName(), err1450); }
  p._homeId = v1449
  return err
}

func (p *AddAssociationArgs) ReadField_homeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *AddAssociationArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1451, err1452 := iprot.ReadByte()
  if err1452 != nil { return thrift.NewTProtocolExceptionReadField(2, "_nodeId", p.ThriftName(), err1452); }
  p._nodeId = v1451
  return err
}

func (p *AddAssociationArgs) ReadField_nodeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *AddAssociationArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1453, err1454 := iprot.ReadByte()
  if err1454 != nil { return thrift.NewTProtocolExceptionReadField(3, "_groupIdx", p.ThriftName(), err1454); }
  p._groupIdx = v1453
  return err
}

func (p *AddAssociationArgs) ReadField_groupIdx(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *AddAssociationArgs) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1455, err1456 := iprot.ReadByte()
  if err1456 != nil { return thrift.NewTProtocolExceptionReadField(4, "_targetNodeId", p.ThriftName(), err1456); }
  p._targetNodeId = v1455
  return err
}

func (p *AddAssociationArgs) ReadField_targetNodeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField4(iprot)
}

func (p *AddAssociationArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("AddAssociation_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = p.WriteField4(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *AddAssociationArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_homeId", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._homeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  return err
}

func (p *AddAssociationArgs) WriteField_homeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *AddAssociationArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_nodeId", thrift.BYTE, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._nodeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  return err
}

func (p *AddAssociationArgs) WriteField_nodeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *AddAssociationArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_groupIdx", thrift.BYTE, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_groupIdx", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._groupIdx))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_groupIdx", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_groupIdx", p.ThriftName(), err); }
  return err
}

func (p *AddAssociationArgs) WriteField_groupIdx(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *AddAssociationArgs) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_targetNodeId", thrift.BYTE, 4)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "_targetNodeId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._targetNodeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "_targetNodeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "_targetNodeId", p.ThriftName(), err); }
  return err
}

func (p *AddAssociationArgs) WriteField_targetNodeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField4(oprot)
}

func (p *AddAssociationArgs) TStructName() string {
  return "AddAssociationArgs"
}

func (p *AddAssociationArgs) ThriftName() string {
  return "AddAssociation_args"
}

func (p *AddAssociationArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AddAssociationArgs(%+v)", *p)
}

func (p *AddAssociationArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*AddAssociationArgs)
  if !ok {
    return 0, false
  }
  if p._homeId != data._homeId {
    if p._homeId < data._homeId {
      return -1, true
    }
    return 1, true
  }
  if p._nodeId != data._nodeId {
    if p._nodeId < data._nodeId {
      return -1, true
    }
    return 1, true
  }
  if p._groupIdx != data._groupIdx {
    if p._groupIdx < data._groupIdx {
      return -1, true
    }
    return 1, true
  }
  if p._targetNodeId != data._targetNodeId {
    if p._targetNodeId < data._targetNodeId {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *AddAssociationArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._homeId
  case 2: return p._nodeId
  case 3: return p._groupIdx
  case 4: return p._targetNodeId
  }
  return nil
}

func (p *AddAssociationArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    thrift.NewTField("_groupIdx", thrift.BYTE, 3),
    thrift.NewTField("_targetNodeId", thrift.BYTE, 4),
    })
}

type AddAssociationResult struct {
  thrift.TStruct
}

func NewAddAssociationResult() *AddAssociationResult {
  output := &AddAssociationResult{
    TStruct:thrift.NewTStruct("AddAssociation_result", []thrift.TField{
    }),
  }
  {
  }
  return output
}

func (p *AddAssociationResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    err = iprot.Skip(fieldTypeId)
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *AddAssociationResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("AddAssociation_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *AddAssociationResult) TStructName() string {
  return "AddAssociationResult"
}

func (p *AddAssociationResult) ThriftName() string {
  return "AddAssociation_result"
}

func (p *AddAssociationResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AddAssociationResult(%+v)", *p)
}

func (p *AddAssociationResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  _, ok := other.(*AddAssociationResult)
  if !ok {
    return 0, false
  }
  return 0, true
}

func (p *AddAssociationResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  }
  return nil
}

func (p *AddAssociationResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    })
}

/**
 * Attributes:
 *  - _homeId
 *  - _nodeId
 *  - _groupIdx
 *  - _targetNodeId
 */
type RemoveAssociationArgs struct {
  thrift.TStruct
  _homeId int32 "_homeId"; // 1
  _nodeId byte "_nodeId"; // 2
  _groupIdx byte "_groupIdx"; // 3
  _targetNodeId byte "_targetNodeId"; // 4
}

func NewRemoveAssociationArgs() *RemoveAssociationArgs {
  output := &RemoveAssociationArgs{
    TStruct:thrift.NewTStruct("RemoveAssociation_args", []thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    thrift.NewTField("_groupIdx", thrift.BYTE, 3),
    thrift.NewTField("_targetNodeId", thrift.BYTE, 4),
    }),
  }
  {
  }
  return output
}

func (p *RemoveAssociationArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_homeId" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_nodeId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "_groupIdx" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 4 || fieldName == "_targetNodeId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *RemoveAssociationArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1457, err1458 := iprot.ReadI32()
  if err1458 != nil { return thrift.NewTProtocolExceptionReadField(1, "_homeId", p.ThriftName(), err1458); }
  p._homeId = v1457
  return err
}

func (p *RemoveAssociationArgs) ReadField_homeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *RemoveAssociationArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1459, err1460 := iprot.ReadByte()
  if err1460 != nil { return thrift.NewTProtocolExceptionReadField(2, "_nodeId", p.ThriftName(), err1460); }
  p._nodeId = v1459
  return err
}

func (p *RemoveAssociationArgs) ReadField_nodeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *RemoveAssociationArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1461, err1462 := iprot.ReadByte()
  if err1462 != nil { return thrift.NewTProtocolExceptionReadField(3, "_groupIdx", p.ThriftName(), err1462); }
  p._groupIdx = v1461
  return err
}

func (p *RemoveAssociationArgs) ReadField_groupIdx(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *RemoveAssociationArgs) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1463, err1464 := iprot.ReadByte()
  if err1464 != nil { return thrift.NewTProtocolExceptionReadField(4, "_targetNodeId", p.ThriftName(), err1464); }
  p._targetNodeId = v1463
  return err
}

func (p *RemoveAssociationArgs) ReadField_targetNodeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField4(iprot)
}

func (p *RemoveAssociationArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("RemoveAssociation_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = p.WriteField4(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *RemoveAssociationArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_homeId", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._homeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  return err
}

func (p *RemoveAssociationArgs) WriteField_homeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *RemoveAssociationArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_nodeId", thrift.BYTE, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._nodeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  return err
}

func (p *RemoveAssociationArgs) WriteField_nodeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *RemoveAssociationArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_groupIdx", thrift.BYTE, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_groupIdx", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._groupIdx))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_groupIdx", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_groupIdx", p.ThriftName(), err); }
  return err
}

func (p *RemoveAssociationArgs) WriteField_groupIdx(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *RemoveAssociationArgs) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_targetNodeId", thrift.BYTE, 4)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "_targetNodeId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._targetNodeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "_targetNodeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "_targetNodeId", p.ThriftName(), err); }
  return err
}

func (p *RemoveAssociationArgs) WriteField_targetNodeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField4(oprot)
}

func (p *RemoveAssociationArgs) TStructName() string {
  return "RemoveAssociationArgs"
}

func (p *RemoveAssociationArgs) ThriftName() string {
  return "RemoveAssociation_args"
}

func (p *RemoveAssociationArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RemoveAssociationArgs(%+v)", *p)
}

func (p *RemoveAssociationArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*RemoveAssociationArgs)
  if !ok {
    return 0, false
  }
  if p._homeId != data._homeId {
    if p._homeId < data._homeId {
      return -1, true
    }
    return 1, true
  }
  if p._nodeId != data._nodeId {
    if p._nodeId < data._nodeId {
      return -1, true
    }
    return 1, true
  }
  if p._groupIdx != data._groupIdx {
    if p._groupIdx < data._groupIdx {
      return -1, true
    }
    return 1, true
  }
  if p._targetNodeId != data._targetNodeId {
    if p._targetNodeId < data._targetNodeId {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *RemoveAssociationArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._homeId
  case 2: return p._nodeId
  case 3: return p._groupIdx
  case 4: return p._targetNodeId
  }
  return nil
}

func (p *RemoveAssociationArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    thrift.NewTField("_groupIdx", thrift.BYTE, 3),
    thrift.NewTField("_targetNodeId", thrift.BYTE, 4),
    })
}

type RemoveAssociationResult struct {
  thrift.TStruct
}

func NewRemoveAssociationResult() *RemoveAssociationResult {
  output := &RemoveAssociationResult{
    TStruct:thrift.NewTStruct("RemoveAssociation_result", []thrift.TField{
    }),
  }
  {
  }
  return output
}

func (p *RemoveAssociationResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    err = iprot.Skip(fieldTypeId)
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *RemoveAssociationResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("RemoveAssociation_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *RemoveAssociationResult) TStructName() string {
  return "RemoveAssociationResult"
}

func (p *RemoveAssociationResult) ThriftName() string {
  return "RemoveAssociation_result"
}

func (p *RemoveAssociationResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RemoveAssociationResult(%+v)", *p)
}

func (p *RemoveAssociationResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  _, ok := other.(*RemoveAssociationResult)
  if !ok {
    return 0, false
  }
  return 0, true
}

func (p *RemoveAssociationResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  }
  return nil
}

func (p *RemoveAssociationResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    })
}

/**
 * Attributes:
 *  - _homeId
 */
type ResetControllerArgs struct {
  thrift.TStruct
  _homeId int32 "_homeId"; // 1
}

func NewResetControllerArgs() *ResetControllerArgs {
  output := &ResetControllerArgs{
    TStruct:thrift.NewTStruct("ResetController_args", []thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    }),
  }
  {
  }
  return output
}

func (p *ResetControllerArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_homeId" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *ResetControllerArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1465, err1466 := iprot.ReadI32()
  if err1466 != nil { return thrift.NewTProtocolExceptionReadField(1, "_homeId", p.ThriftName(), err1466); }
  p._homeId = v1465
  return err
}

func (p *ResetControllerArgs) ReadField_homeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *ResetControllerArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("ResetController_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *ResetControllerArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_homeId", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._homeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  return err
}

func (p *ResetControllerArgs) WriteField_homeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *ResetControllerArgs) TStructName() string {
  return "ResetControllerArgs"
}

func (p *ResetControllerArgs) ThriftName() string {
  return "ResetController_args"
}

func (p *ResetControllerArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ResetControllerArgs(%+v)", *p)
}

func (p *ResetControllerArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*ResetControllerArgs)
  if !ok {
    return 0, false
  }
  if p._homeId != data._homeId {
    if p._homeId < data._homeId {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *ResetControllerArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._homeId
  }
  return nil
}

func (p *ResetControllerArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    })
}

type ResetControllerResult struct {
  thrift.TStruct
}

func NewResetControllerResult() *ResetControllerResult {
  output := &ResetControllerResult{
    TStruct:thrift.NewTStruct("ResetController_result", []thrift.TField{
    }),
  }
  {
  }
  return output
}

func (p *ResetControllerResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    err = iprot.Skip(fieldTypeId)
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *ResetControllerResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("ResetController_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *ResetControllerResult) TStructName() string {
  return "ResetControllerResult"
}

func (p *ResetControllerResult) ThriftName() string {
  return "ResetController_result"
}

func (p *ResetControllerResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ResetControllerResult(%+v)", *p)
}

func (p *ResetControllerResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  _, ok := other.(*ResetControllerResult)
  if !ok {
    return 0, false
  }
  return 0, true
}

func (p *ResetControllerResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  }
  return nil
}

func (p *ResetControllerResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    })
}

/**
 * Attributes:
 *  - _homeId
 */
type SoftResetArgs struct {
  thrift.TStruct
  _homeId int32 "_homeId"; // 1
}

func NewSoftResetArgs() *SoftResetArgs {
  output := &SoftResetArgs{
    TStruct:thrift.NewTStruct("SoftReset_args", []thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    }),
  }
  {
  }
  return output
}

func (p *SoftResetArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_homeId" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SoftResetArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1467, err1468 := iprot.ReadI32()
  if err1468 != nil { return thrift.NewTProtocolExceptionReadField(1, "_homeId", p.ThriftName(), err1468); }
  p._homeId = v1467
  return err
}

func (p *SoftResetArgs) ReadField_homeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *SoftResetArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SoftReset_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SoftResetArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_homeId", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._homeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  return err
}

func (p *SoftResetArgs) WriteField_homeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *SoftResetArgs) TStructName() string {
  return "SoftResetArgs"
}

func (p *SoftResetArgs) ThriftName() string {
  return "SoftReset_args"
}

func (p *SoftResetArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SoftResetArgs(%+v)", *p)
}

func (p *SoftResetArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SoftResetArgs)
  if !ok {
    return 0, false
  }
  if p._homeId != data._homeId {
    if p._homeId < data._homeId {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *SoftResetArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._homeId
  }
  return nil
}

func (p *SoftResetArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    })
}

type SoftResetResult struct {
  thrift.TStruct
}

func NewSoftResetResult() *SoftResetResult {
  output := &SoftResetResult{
    TStruct:thrift.NewTStruct("SoftReset_result", []thrift.TField{
    }),
  }
  {
  }
  return output
}

func (p *SoftResetResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    err = iprot.Skip(fieldTypeId)
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SoftResetResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SoftReset_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SoftResetResult) TStructName() string {
  return "SoftResetResult"
}

func (p *SoftResetResult) ThriftName() string {
  return "SoftReset_result"
}

func (p *SoftResetResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SoftResetResult(%+v)", *p)
}

func (p *SoftResetResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  _, ok := other.(*SoftResetResult)
  if !ok {
    return 0, false
  }
  return 0, true
}

func (p *SoftResetResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  }
  return nil
}

func (p *SoftResetResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    })
}

/**
 * Attributes:
 *  - _homeId
 *  - _command
 *  - _highPower
 *  - _nodeId
 *  - _arg
 */
type BeginControllerCommandArgs struct {
  thrift.TStruct
  _homeId int32 "_homeId"; // 1
  _command DriverControllerCommand "_command"; // 2
  _highPower bool "_highPower"; // 3
  _nodeId byte "_nodeId"; // 4
  _arg byte "_arg"; // 5
}

func NewBeginControllerCommandArgs() *BeginControllerCommandArgs {
  output := &BeginControllerCommandArgs{
    TStruct:thrift.NewTStruct("BeginControllerCommand_args", []thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_command", thrift.I32, 2),
    thrift.NewTField("_highPower", thrift.BOOL, 3),
    thrift.NewTField("_nodeId", thrift.BYTE, 4),
    thrift.NewTField("_arg", thrift.BYTE, 5),
    }),
  }
  {
  }
  return output
}

func (p *BeginControllerCommandArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_homeId" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_command" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "_highPower" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 4 || fieldName == "_nodeId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 5 || fieldName == "_arg" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField5(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField5(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *BeginControllerCommandArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1469, err1470 := iprot.ReadI32()
  if err1470 != nil { return thrift.NewTProtocolExceptionReadField(1, "_homeId", p.ThriftName(), err1470); }
  p._homeId = v1469
  return err
}

func (p *BeginControllerCommandArgs) ReadField_homeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *BeginControllerCommandArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1471, err1472 := iprot.ReadI32()
  if err1472 != nil { return thrift.NewTProtocolExceptionReadField(2, "_command", p.ThriftName(), err1472); }
  p._command = DriverControllerCommand(v1471)
  return err
}

func (p *BeginControllerCommandArgs) ReadField_command(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *BeginControllerCommandArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1473, err1474 := iprot.ReadBool()
  if err1474 != nil { return thrift.NewTProtocolExceptionReadField(3, "_highPower", p.ThriftName(), err1474); }
  p._highPower = v1473
  return err
}

func (p *BeginControllerCommandArgs) ReadField_highPower(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *BeginControllerCommandArgs) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1475, err1476 := iprot.ReadByte()
  if err1476 != nil { return thrift.NewTProtocolExceptionReadField(4, "_nodeId", p.ThriftName(), err1476); }
  p._nodeId = v1475
  return err
}

func (p *BeginControllerCommandArgs) ReadField_nodeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField4(iprot)
}

func (p *BeginControllerCommandArgs) ReadField5(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1477, err1478 := iprot.ReadByte()
  if err1478 != nil { return thrift.NewTProtocolExceptionReadField(5, "_arg", p.ThriftName(), err1478); }
  p._arg = v1477
  return err
}

func (p *BeginControllerCommandArgs) ReadField_arg(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField5(iprot)
}

func (p *BeginControllerCommandArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("BeginControllerCommand_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = p.WriteField4(oprot)
  if err != nil { return err }
  err = p.WriteField5(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *BeginControllerCommandArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_homeId", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._homeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  return err
}

func (p *BeginControllerCommandArgs) WriteField_homeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *BeginControllerCommandArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_command", thrift.I32, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_command", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._command))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_command", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_command", p.ThriftName(), err); }
  return err
}

func (p *BeginControllerCommandArgs) WriteField_command(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *BeginControllerCommandArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_highPower", thrift.BOOL, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_highPower", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p._highPower))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_highPower", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_highPower", p.ThriftName(), err); }
  return err
}

func (p *BeginControllerCommandArgs) WriteField_highPower(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *BeginControllerCommandArgs) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_nodeId", thrift.BYTE, 4)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._nodeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "_nodeId", p.ThriftName(), err); }
  return err
}

func (p *BeginControllerCommandArgs) WriteField_nodeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField4(oprot)
}

func (p *BeginControllerCommandArgs) WriteField5(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_arg", thrift.BYTE, 5)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "_arg", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._arg))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "_arg", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "_arg", p.ThriftName(), err); }
  return err
}

func (p *BeginControllerCommandArgs) WriteField_arg(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField5(oprot)
}

func (p *BeginControllerCommandArgs) TStructName() string {
  return "BeginControllerCommandArgs"
}

func (p *BeginControllerCommandArgs) ThriftName() string {
  return "BeginControllerCommand_args"
}

func (p *BeginControllerCommandArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BeginControllerCommandArgs(%+v)", *p)
}

func (p *BeginControllerCommandArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*BeginControllerCommandArgs)
  if !ok {
    return 0, false
  }
  if p._homeId != data._homeId {
    if p._homeId < data._homeId {
      return -1, true
    }
    return 1, true
  }
  if p._command != data._command {
    if p._command < data._command {
      return -1, true
    }
    return 1, true
  }
  if cmp := thrift.CompareBool(p._highPower, data._highPower); cmp != 0 {
    return cmp, true
  }
  if p._nodeId != data._nodeId {
    if p._nodeId < data._nodeId {
      return -1, true
    }
    return 1, true
  }
  if p._arg != data._arg {
    if p._arg < data._arg {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *BeginControllerCommandArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._homeId
  case 2: return p._command
  case 3: return p._highPower
  case 4: return p._nodeId
  case 5: return p._arg
  }
  return nil
}

func (p *BeginControllerCommandArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_command", thrift.I32, 2),
    thrift.NewTField("_highPower", thrift.BOOL, 3),
    thrift.NewTField("_nodeId", thrift.BYTE, 4),
    thrift.NewTField("_arg", thrift.BYTE, 5),
    })
}

/**
 * Attributes:
 *  - Success
 */
type BeginControllerCommandResult struct {
  thrift.TStruct
  Success bool "success"; // 0
}

func NewBeginControllerCommandResult() *BeginControllerCommandResult {
  output := &BeginControllerCommandResult{
    TStruct:thrift.NewTStruct("BeginControllerCommand_result", []thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    }),
  }
  {
  }
  return output
}

func (p *BeginControllerCommandResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *BeginControllerCommandResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1479, err1480 := iprot.ReadBool()
  if err1480 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1480); }
  p.Success = v1479
  return err
}

func (p *BeginControllerCommandResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *BeginControllerCommandResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("BeginControllerCommand_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *BeginControllerCommandResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BOOL, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *BeginControllerCommandResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *BeginControllerCommandResult) TStructName() string {
  return "BeginControllerCommandResult"
}

func (p *BeginControllerCommandResult) ThriftName() string {
  return "BeginControllerCommand_result"
}

func (p *BeginControllerCommandResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BeginControllerCommandResult(%+v)", *p)
}

func (p *BeginControllerCommandResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*BeginControllerCommandResult)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Success, data.Success); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *BeginControllerCommandResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *BeginControllerCommandResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    })
}

/**
 * Attributes:
 *  - _homeId
 */
type CancelControllerCommandArgs struct {
  thrift.TStruct
  _homeId int32 "_homeId"; // 1
}

func NewCancelControllerCommandArgs() *CancelControllerCommandArgs {
  output := &CancelControllerCommandArgs{
    TStruct:thrift.NewTStruct("CancelControllerCommand_args", []thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    }),
  }
  {
  }
  return output
}

func (p *CancelControllerCommandArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_homeId" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *CancelControllerCommandArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1481, err1482 := iprot.ReadI32()
  if err1482 != nil { return thrift.NewTProtocolExceptionReadField(1, "_homeId", p.ThriftName(), err1482); }
  p._homeId = v1481
  return err
}

func (p *CancelControllerCommandArgs) ReadField_homeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *CancelControllerCommandArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("CancelControllerCommand_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *CancelControllerCommandArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_homeId", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._homeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  return err
}

func (p *CancelControllerCommandArgs) WriteField_homeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *CancelControllerCommandArgs) TStructName() string {
  return "CancelControllerCommandArgs"
}

func (p *CancelControllerCommandArgs) ThriftName() string {
  return "CancelControllerCommand_args"
}

func (p *CancelControllerCommandArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CancelControllerCommandArgs(%+v)", *p)
}

func (p *CancelControllerCommandArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*CancelControllerCommandArgs)
  if !ok {
    return 0, false
  }
  if p._homeId != data._homeId {
    if p._homeId < data._homeId {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *CancelControllerCommandArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._homeId
  }
  return nil
}

func (p *CancelControllerCommandArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    })
}

/**
 * Attributes:
 *  - Success
 */
type CancelControllerCommandResult struct {
  thrift.TStruct
  Success bool "success"; // 0
}

func NewCancelControllerCommandResult() *CancelControllerCommandResult {
  output := &CancelControllerCommandResult{
    TStruct:thrift.NewTStruct("CancelControllerCommand_result", []thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    }),
  }
  {
  }
  return output
}

func (p *CancelControllerCommandResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *CancelControllerCommandResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1483, err1484 := iprot.ReadBool()
  if err1484 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1484); }
  p.Success = v1483
  return err
}

func (p *CancelControllerCommandResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *CancelControllerCommandResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("CancelControllerCommand_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *CancelControllerCommandResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BOOL, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *CancelControllerCommandResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *CancelControllerCommandResult) TStructName() string {
  return "CancelControllerCommandResult"
}

func (p *CancelControllerCommandResult) ThriftName() string {
  return "CancelControllerCommand_result"
}

func (p *CancelControllerCommandResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CancelControllerCommandResult(%+v)", *p)
}

func (p *CancelControllerCommandResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*CancelControllerCommandResult)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Success, data.Success); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *CancelControllerCommandResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *CancelControllerCommandResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    })
}

type GetNumScenesArgs struct {
  thrift.TStruct
}

func NewGetNumScenesArgs() *GetNumScenesArgs {
  output := &GetNumScenesArgs{
    TStruct:thrift.NewTStruct("GetNumScenes_args", []thrift.TField{
    }),
  }
  {
  }
  return output
}

func (p *GetNumScenesArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    err = iprot.Skip(fieldTypeId)
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNumScenesArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetNumScenes_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNumScenesArgs) TStructName() string {
  return "GetNumScenesArgs"
}

func (p *GetNumScenesArgs) ThriftName() string {
  return "GetNumScenes_args"
}

func (p *GetNumScenesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetNumScenesArgs(%+v)", *p)
}

func (p *GetNumScenesArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  _, ok := other.(*GetNumScenesArgs)
  if !ok {
    return 0, false
  }
  return 0, true
}

func (p *GetNumScenesArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  }
  return nil
}

func (p *GetNumScenesArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    })
}

/**
 * Attributes:
 *  - Success
 */
type GetNumScenesResult struct {
  thrift.TStruct
  Success byte "success"; // 0
}

func NewGetNumScenesResult() *GetNumScenesResult {
  output := &GetNumScenesResult{
    TStruct:thrift.NewTStruct("GetNumScenes_result", []thrift.TField{
    thrift.NewTField("success", thrift.BYTE, 0),
    }),
  }
  {
  }
  return output
}

func (p *GetNumScenesResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNumScenesResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1485, err1486 := iprot.ReadByte()
  if err1486 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1486); }
  p.Success = v1485
  return err
}

func (p *GetNumScenesResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetNumScenesResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetNumScenes_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNumScenesResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BYTE, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *GetNumScenesResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetNumScenesResult) TStructName() string {
  return "GetNumScenesResult"
}

func (p *GetNumScenesResult) ThriftName() string {
  return "GetNumScenes_result"
}

func (p *GetNumScenesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetNumScenesResult(%+v)", *p)
}

func (p *GetNumScenesResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetNumScenesResult)
  if !ok {
    return 0, false
  }
  if p.Success != data.Success {
    if p.Success < data.Success {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetNumScenesResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *GetNumScenesResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BYTE, 0),
    })
}

type GetAllScenesArgs struct {
  thrift.TStruct
}

func NewGetAllScenesArgs() *GetAllScenesArgs {
  output := &GetAllScenesArgs{
    TStruct:thrift.NewTStruct("GetAllScenes_args", []thrift.TField{
    }),
  }
  {
  }
  return output
}

func (p *GetAllScenesArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    err = iprot.Skip(fieldTypeId)
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetAllScenesArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetAllScenes_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetAllScenesArgs) TStructName() string {
  return "GetAllScenesArgs"
}

func (p *GetAllScenesArgs) ThriftName() string {
  return "GetAllScenes_args"
}

func (p *GetAllScenesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetAllScenesArgs(%+v)", *p)
}

func (p *GetAllScenesArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  _, ok := other.(*GetAllScenesArgs)
  if !ok {
    return 0, false
  }
  return 0, true
}

func (p *GetAllScenesArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  }
  return nil
}

func (p *GetAllScenesArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    })
}

/**
 * Attributes:
 *  - Success
 */
type GetAllScenesResult struct {
  thrift.TStruct
  Success *GetAllScenesReturnStruct "success"; // 0
}

func NewGetAllScenesResult() *GetAllScenesResult {
  output := &GetAllScenesResult{
    TStruct:thrift.NewTStruct("GetAllScenes_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    }),
  }
  {
  }
  return output
}

func (p *GetAllScenesResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetAllScenesResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Success = NewGetAllScenesReturnStruct()
  err1489 := p.Success.Read(iprot)
  if err1489 != nil { return thrift.NewTProtocolExceptionReadStruct("p.SuccessGetAllScenesReturnStruct", err1489); }
  return err
}

func (p *GetAllScenesResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetAllScenesResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetAllScenes_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetAllScenesResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = p.Success.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("GetAllScenesReturnStruct", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *GetAllScenesResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetAllScenesResult) TStructName() string {
  return "GetAllScenesResult"
}

func (p *GetAllScenesResult) ThriftName() string {
  return "GetAllScenes_result"
}

func (p *GetAllScenesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetAllScenesResult(%+v)", *p)
}

func (p *GetAllScenesResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetAllScenesResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetAllScenesResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *GetAllScenesResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    })
}

type CreateSceneArgs struct {
  thrift.TStruct
}

func NewCreateSceneArgs() *CreateSceneArgs {
  output := &CreateSceneArgs{
    TStruct:thrift.NewTStruct("CreateScene_args", []thrift.TField{
    }),
  }
  {
  }
  return output
}

func (p *CreateSceneArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    err = iprot.Skip(fieldTypeId)
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *CreateSceneArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("CreateScene_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *CreateSceneArgs) TStructName() string {
  return "CreateSceneArgs"
}

func (p *CreateSceneArgs) ThriftName() string {
  return "CreateScene_args"
}

func (p *CreateSceneArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CreateSceneArgs(%+v)", *p)
}

func (p *CreateSceneArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  _, ok := other.(*CreateSceneArgs)
  if !ok {
    return 0, false
  }
  return 0, true
}

func (p *CreateSceneArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  }
  return nil
}

func (p *CreateSceneArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    })
}

/**
 * Attributes:
 *  - Success
 */
type CreateSceneResult struct {
  thrift.TStruct
  Success byte "success"; // 0
}

func NewCreateSceneResult() *CreateSceneResult {
  output := &CreateSceneResult{
    TStruct:thrift.NewTStruct("CreateScene_result", []thrift.TField{
    thrift.NewTField("success", thrift.BYTE, 0),
    }),
  }
  {
  }
  return output
}

func (p *CreateSceneResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *CreateSceneResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1490, err1491 := iprot.ReadByte()
  if err1491 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1491); }
  p.Success = v1490
  return err
}

func (p *CreateSceneResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *CreateSceneResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("CreateScene_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *CreateSceneResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BYTE, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *CreateSceneResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *CreateSceneResult) TStructName() string {
  return "CreateSceneResult"
}

func (p *CreateSceneResult) ThriftName() string {
  return "CreateScene_result"
}

func (p *CreateSceneResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CreateSceneResult(%+v)", *p)
}

func (p *CreateSceneResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*CreateSceneResult)
  if !ok {
    return 0, false
  }
  if p.Success != data.Success {
    if p.Success < data.Success {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *CreateSceneResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *CreateSceneResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BYTE, 0),
    })
}

/**
 * Attributes:
 *  - _sceneId
 */
type RemoveSceneArgs struct {
  thrift.TStruct
  _sceneId byte "_sceneId"; // 1
}

func NewRemoveSceneArgs() *RemoveSceneArgs {
  output := &RemoveSceneArgs{
    TStruct:thrift.NewTStruct("RemoveScene_args", []thrift.TField{
    thrift.NewTField("_sceneId", thrift.BYTE, 1),
    }),
  }
  {
  }
  return output
}

func (p *RemoveSceneArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_sceneId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *RemoveSceneArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1492, err1493 := iprot.ReadByte()
  if err1493 != nil { return thrift.NewTProtocolExceptionReadField(1, "_sceneId", p.ThriftName(), err1493); }
  p._sceneId = v1492
  return err
}

func (p *RemoveSceneArgs) ReadField_sceneId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *RemoveSceneArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("RemoveScene_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *RemoveSceneArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_sceneId", thrift.BYTE, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._sceneId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  return err
}

func (p *RemoveSceneArgs) WriteField_sceneId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *RemoveSceneArgs) TStructName() string {
  return "RemoveSceneArgs"
}

func (p *RemoveSceneArgs) ThriftName() string {
  return "RemoveScene_args"
}

func (p *RemoveSceneArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RemoveSceneArgs(%+v)", *p)
}

func (p *RemoveSceneArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*RemoveSceneArgs)
  if !ok {
    return 0, false
  }
  if p._sceneId != data._sceneId {
    if p._sceneId < data._sceneId {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *RemoveSceneArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._sceneId
  }
  return nil
}

func (p *RemoveSceneArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_sceneId", thrift.BYTE, 1),
    })
}

/**
 * Attributes:
 *  - Success
 */
type RemoveSceneResult struct {
  thrift.TStruct
  Success bool "success"; // 0
}

func NewRemoveSceneResult() *RemoveSceneResult {
  output := &RemoveSceneResult{
    TStruct:thrift.NewTStruct("RemoveScene_result", []thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    }),
  }
  {
  }
  return output
}

func (p *RemoveSceneResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *RemoveSceneResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1494, err1495 := iprot.ReadBool()
  if err1495 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1495); }
  p.Success = v1494
  return err
}

func (p *RemoveSceneResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *RemoveSceneResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("RemoveScene_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *RemoveSceneResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BOOL, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *RemoveSceneResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *RemoveSceneResult) TStructName() string {
  return "RemoveSceneResult"
}

func (p *RemoveSceneResult) ThriftName() string {
  return "RemoveScene_result"
}

func (p *RemoveSceneResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RemoveSceneResult(%+v)", *p)
}

func (p *RemoveSceneResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*RemoveSceneResult)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Success, data.Success); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *RemoveSceneResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *RemoveSceneResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    })
}

/**
 * Attributes:
 *  - _sceneId
 *  - _valueId
 *  - _value
 */
type AddSceneValueBoolArgs struct {
  thrift.TStruct
  _sceneId byte "_sceneId"; // 1
  _valueId *RemoteValueID "_valueId"; // 2
  _value bool "_value"; // 3
}

func NewAddSceneValueBoolArgs() *AddSceneValueBoolArgs {
  output := &AddSceneValueBoolArgs{
    TStruct:thrift.NewTStruct("AddSceneValue_Bool_args", []thrift.TField{
    thrift.NewTField("_sceneId", thrift.BYTE, 1),
    thrift.NewTField("_valueId", thrift.STRUCT, 2),
    thrift.NewTField("_value", thrift.BOOL, 3),
    }),
  }
  {
  }
  return output
}

func (p *AddSceneValueBoolArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_sceneId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_valueId" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "_value" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *AddSceneValueBoolArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1496, err1497 := iprot.ReadByte()
  if err1497 != nil { return thrift.NewTProtocolExceptionReadField(1, "_sceneId", p.ThriftName(), err1497); }
  p._sceneId = v1496
  return err
}

func (p *AddSceneValueBoolArgs) ReadField_sceneId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *AddSceneValueBoolArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p._valueId = NewRemoteValueID()
  err1500 := p._valueId.Read(iprot)
  if err1500 != nil { return thrift.NewTProtocolExceptionReadStruct("p._valueIdRemoteValueID", err1500); }
  return err
}

func (p *AddSceneValueBoolArgs) ReadField_valueId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *AddSceneValueBoolArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1501, err1502 := iprot.ReadBool()
  if err1502 != nil { return thrift.NewTProtocolExceptionReadField(3, "_value", p.ThriftName(), err1502); }
  p._value = v1501
  return err
}

func (p *AddSceneValueBoolArgs) ReadField_value(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *AddSceneValueBoolArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("AddSceneValue_Bool_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *AddSceneValueBoolArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_sceneId", thrift.BYTE, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._sceneId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  return err
}

func (p *AddSceneValueBoolArgs) WriteField_sceneId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *AddSceneValueBoolArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._valueId != nil {
    err = oprot.WriteFieldBegin("_valueId", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_valueId", p.ThriftName(), err); }
    err = p._valueId.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RemoteValueID", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_valueId", p.ThriftName(), err); }
  }
  return err
}

func (p *AddSceneValueBoolArgs) WriteField_valueId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *AddSceneValueBoolArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_value", thrift.BOOL, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_value", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p._value))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_value", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_value", p.ThriftName(), err); }
  return err
}

func (p *AddSceneValueBoolArgs) WriteField_value(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *AddSceneValueBoolArgs) TStructName() string {
  return "AddSceneValueBoolArgs"
}

func (p *AddSceneValueBoolArgs) ThriftName() string {
  return "AddSceneValue_Bool_args"
}

func (p *AddSceneValueBoolArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AddSceneValueBoolArgs(%+v)", *p)
}

func (p *AddSceneValueBoolArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*AddSceneValueBoolArgs)
  if !ok {
    return 0, false
  }
  if p._sceneId != data._sceneId {
    if p._sceneId < data._sceneId {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p._valueId.CompareTo(data._valueId); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp := thrift.CompareBool(p._value, data._value); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *AddSceneValueBoolArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._sceneId
  case 2: return p._valueId
  case 3: return p._value
  }
  return nil
}

func (p *AddSceneValueBoolArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_sceneId", thrift.BYTE, 1),
    thrift.NewTField("_valueId", thrift.STRUCT, 2),
    thrift.NewTField("_value", thrift.BOOL, 3),
    })
}

/**
 * Attributes:
 *  - Success
 */
type AddSceneValueBoolResult struct {
  thrift.TStruct
  Success bool "success"; // 0
}

func NewAddSceneValueBoolResult() *AddSceneValueBoolResult {
  output := &AddSceneValueBoolResult{
    TStruct:thrift.NewTStruct("AddSceneValue_Bool_result", []thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    }),
  }
  {
  }
  return output
}

func (p *AddSceneValueBoolResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *AddSceneValueBoolResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1503, err1504 := iprot.ReadBool()
  if err1504 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1504); }
  p.Success = v1503
  return err
}

func (p *AddSceneValueBoolResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *AddSceneValueBoolResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("AddSceneValue_Bool_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *AddSceneValueBoolResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BOOL, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *AddSceneValueBoolResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *AddSceneValueBoolResult) TStructName() string {
  return "AddSceneValueBoolResult"
}

func (p *AddSceneValueBoolResult) ThriftName() string {
  return "AddSceneValue_Bool_result"
}

func (p *AddSceneValueBoolResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AddSceneValueBoolResult(%+v)", *p)
}

func (p *AddSceneValueBoolResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*AddSceneValueBoolResult)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Success, data.Success); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *AddSceneValueBoolResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *AddSceneValueBoolResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    })
}

/**
 * Attributes:
 *  - _sceneId
 *  - _valueId
 *  - _value
 */
type AddSceneValueUint8Args struct {
  thrift.TStruct
  _sceneId byte "_sceneId"; // 1
  _valueId *RemoteValueID "_valueId"; // 2
  _value byte "_value"; // 3
}

func NewAddSceneValueUint8Args() *AddSceneValueUint8Args {
  output := &AddSceneValueUint8Args{
    TStruct:thrift.NewTStruct("AddSceneValue_Uint8_args", []thrift.TField{
    thrift.NewTField("_sceneId", thrift.BYTE, 1),
    thrift.NewTField("_valueId", thrift.STRUCT, 2),
    thrift.NewTField("_value", thrift.BYTE, 3),
    }),
  }
  {
  }
  return output
}

func (p *AddSceneValueUint8Args) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_sceneId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_valueId" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "_value" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *AddSceneValueUint8Args) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1505, err1506 := iprot.ReadByte()
  if err1506 != nil { return thrift.NewTProtocolExceptionReadField(1, "_sceneId", p.ThriftName(), err1506); }
  p._sceneId = v1505
  return err
}

func (p *AddSceneValueUint8Args) ReadField_sceneId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *AddSceneValueUint8Args) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p._valueId = NewRemoteValueID()
  err1509 := p._valueId.Read(iprot)
  if err1509 != nil { return thrift.NewTProtocolExceptionReadStruct("p._valueIdRemoteValueID", err1509); }
  return err
}

func (p *AddSceneValueUint8Args) ReadField_valueId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *AddSceneValueUint8Args) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1510, err1511 := iprot.ReadByte()
  if err1511 != nil { return thrift.NewTProtocolExceptionReadField(3, "_value", p.ThriftName(), err1511); }
  p._value = v1510
  return err
}

func (p *AddSceneValueUint8Args) ReadField_value(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *AddSceneValueUint8Args) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("AddSceneValue_Uint8_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *AddSceneValueUint8Args) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_sceneId", thrift.BYTE, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._sceneId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  return err
}

func (p *AddSceneValueUint8Args) WriteField_sceneId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *AddSceneValueUint8Args) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._valueId != nil {
    err = oprot.WriteFieldBegin("_valueId", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_valueId", p.ThriftName(), err); }
    err = p._valueId.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RemoteValueID", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_valueId", p.ThriftName(), err); }
  }
  return err
}

func (p *AddSceneValueUint8Args) WriteField_valueId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *AddSceneValueUint8Args) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_value", thrift.BYTE, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_value", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._value))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_value", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_value", p.ThriftName(), err); }
  return err
}

func (p *AddSceneValueUint8Args) WriteField_value(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *AddSceneValueUint8Args) TStructName() string {
  return "AddSceneValueUint8Args"
}

func (p *AddSceneValueUint8Args) ThriftName() string {
  return "AddSceneValue_Uint8_args"
}

func (p *AddSceneValueUint8Args) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AddSceneValueUint8Args(%+v)", *p)
}

func (p *AddSceneValueUint8Args) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*AddSceneValueUint8Args)
  if !ok {
    return 0, false
  }
  if p._sceneId != data._sceneId {
    if p._sceneId < data._sceneId {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p._valueId.CompareTo(data._valueId); !ok || cmp != 0 {
    return cmp, ok
  }
  if p._value != data._value {
    if p._value < data._value {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *AddSceneValueUint8Args) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._sceneId
  case 2: return p._valueId
  case 3: return p._value
  }
  return nil
}

func (p *AddSceneValueUint8Args) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_sceneId", thrift.BYTE, 1),
    thrift.NewTField("_valueId", thrift.STRUCT, 2),
    thrift.NewTField("_value", thrift.BYTE, 3),
    })
}

/**
 * Attributes:
 *  - Success
 */
type AddSceneValueUint8Result struct {
  thrift.TStruct
  Success bool "success"; // 0
}

func NewAddSceneValueUint8Result() *AddSceneValueUint8Result {
  output := &AddSceneValueUint8Result{
    TStruct:thrift.NewTStruct("AddSceneValue_Uint8_result", []thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    }),
  }
  {
  }
  return output
}

func (p *AddSceneValueUint8Result) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *AddSceneValueUint8Result) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1512, err1513 := iprot.ReadBool()
  if err1513 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1513); }
  p.Success = v1512
  return err
}

func (p *AddSceneValueUint8Result) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *AddSceneValueUint8Result) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("AddSceneValue_Uint8_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *AddSceneValueUint8Result) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BOOL, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *AddSceneValueUint8Result) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *AddSceneValueUint8Result) TStructName() string {
  return "AddSceneValueUint8Result"
}

func (p *AddSceneValueUint8Result) ThriftName() string {
  return "AddSceneValue_Uint8_result"
}

func (p *AddSceneValueUint8Result) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AddSceneValueUint8Result(%+v)", *p)
}

func (p *AddSceneValueUint8Result) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*AddSceneValueUint8Result)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Success, data.Success); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *AddSceneValueUint8Result) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *AddSceneValueUint8Result) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    })
}

/**
 * Attributes:
 *  - _sceneId
 *  - _valueId
 *  - _value
 */
type AddSceneValueFloatArgs struct {
  thrift.TStruct
  _sceneId byte "_sceneId"; // 1
  _valueId *RemoteValueID "_valueId"; // 2
  _value float64 "_value"; // 3
}

func NewAddSceneValueFloatArgs() *AddSceneValueFloatArgs {
  output := &AddSceneValueFloatArgs{
    TStruct:thrift.NewTStruct("AddSceneValue_Float_args", []thrift.TField{
    thrift.NewTField("_sceneId", thrift.BYTE, 1),
    thrift.NewTField("_valueId", thrift.STRUCT, 2),
    thrift.NewTField("_value", thrift.DOUBLE, 3),
    }),
  }
  {
  }
  return output
}

func (p *AddSceneValueFloatArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_sceneId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_valueId" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "_value" {
      if fieldTypeId == thrift.DOUBLE {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *AddSceneValueFloatArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1514, err1515 := iprot.ReadByte()
  if err1515 != nil { return thrift.NewTProtocolExceptionReadField(1, "_sceneId", p.ThriftName(), err1515); }
  p._sceneId = v1514
  return err
}

func (p *AddSceneValueFloatArgs) ReadField_sceneId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *AddSceneValueFloatArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p._valueId = NewRemoteValueID()
  err1518 := p._valueId.Read(iprot)
  if err1518 != nil { return thrift.NewTProtocolExceptionReadStruct("p._valueIdRemoteValueID", err1518); }
  return err
}

func (p *AddSceneValueFloatArgs) ReadField_valueId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *AddSceneValueFloatArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1519, err1520 := iprot.ReadDouble()
  if err1520 != nil { return thrift.NewTProtocolExceptionReadField(3, "_value", p.ThriftName(), err1520); }
  p._value = v1519
  return err
}

func (p *AddSceneValueFloatArgs) ReadField_value(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *AddSceneValueFloatArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("AddSceneValue_Float_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *AddSceneValueFloatArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_sceneId", thrift.BYTE, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._sceneId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  return err
}

func (p *AddSceneValueFloatArgs) WriteField_sceneId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *AddSceneValueFloatArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._valueId != nil {
    err = oprot.WriteFieldBegin("_valueId", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_valueId", p.ThriftName(), err); }
    err = p._valueId.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RemoteValueID", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_valueId", p.ThriftName(), err); }
  }
  return err
}

func (p *AddSceneValueFloatArgs) WriteField_valueId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *AddSceneValueFloatArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_value", thrift.DOUBLE, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_value", p.ThriftName(), err); }
  err = oprot.WriteDouble(float64(p._value))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_value", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_value", p.ThriftName(), err); }
  return err
}

func (p *AddSceneValueFloatArgs) WriteField_value(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *AddSceneValueFloatArgs) TStructName() string {
  return "AddSceneValueFloatArgs"
}

func (p *AddSceneValueFloatArgs) ThriftName() string {
  return "AddSceneValue_Float_args"
}

func (p *AddSceneValueFloatArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AddSceneValueFloatArgs(%+v)", *p)
}

func (p *AddSceneValueFloatArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*AddSceneValueFloatArgs)
  if !ok {
    return 0, false
  }
  if p._sceneId != data._sceneId {
    if p._sceneId < data._sceneId {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p._valueId.CompareTo(data._valueId); !ok || cmp != 0 {
    return cmp, ok
  }
  if p._value != data._value {
    if p._value < data._value {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *AddSceneValueFloatArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._sceneId
  case 2: return p._valueId
  case 3: return p._value
  }
  return nil
}

func (p *AddSceneValueFloatArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_sceneId", thrift.BYTE, 1),
    thrift.NewTField("_valueId", thrift.STRUCT, 2),
    thrift.NewTField("_value", thrift.DOUBLE, 3),
    })
}

/**
 * Attributes:
 *  - Success
 */
type AddSceneValueFloatResult struct {
  thrift.TStruct
  Success bool "success"; // 0
}

func NewAddSceneValueFloatResult() *AddSceneValueFloatResult {
  output := &AddSceneValueFloatResult{
    TStruct:thrift.NewTStruct("AddSceneValue_Float_result", []thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    }),
  }
  {
  }
  return output
}

func (p *AddSceneValueFloatResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *AddSceneValueFloatResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1521, err1522 := iprot.ReadBool()
  if err1522 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1522); }
  p.Success = v1521
  return err
}

func (p *AddSceneValueFloatResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *AddSceneValueFloatResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("AddSceneValue_Float_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *AddSceneValueFloatResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BOOL, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *AddSceneValueFloatResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *AddSceneValueFloatResult) TStructName() string {
  return "AddSceneValueFloatResult"
}

func (p *AddSceneValueFloatResult) ThriftName() string {
  return "AddSceneValue_Float_result"
}

func (p *AddSceneValueFloatResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AddSceneValueFloatResult(%+v)", *p)
}

func (p *AddSceneValueFloatResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*AddSceneValueFloatResult)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Success, data.Success); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *AddSceneValueFloatResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *AddSceneValueFloatResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    })
}

/**
 * Attributes:
 *  - _sceneId
 *  - _valueId
 *  - _value
 */
type AddSceneValueInt32Args struct {
  thrift.TStruct
  _sceneId byte "_sceneId"; // 1
  _valueId *RemoteValueID "_valueId"; // 2
  _value int32 "_value"; // 3
}

func NewAddSceneValueInt32Args() *AddSceneValueInt32Args {
  output := &AddSceneValueInt32Args{
    TStruct:thrift.NewTStruct("AddSceneValue_Int32_args", []thrift.TField{
    thrift.NewTField("_sceneId", thrift.BYTE, 1),
    thrift.NewTField("_valueId", thrift.STRUCT, 2),
    thrift.NewTField("_value", thrift.I32, 3),
    }),
  }
  {
  }
  return output
}

func (p *AddSceneValueInt32Args) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_sceneId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_valueId" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "_value" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *AddSceneValueInt32Args) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1523, err1524 := iprot.ReadByte()
  if err1524 != nil { return thrift.NewTProtocolExceptionReadField(1, "_sceneId", p.ThriftName(), err1524); }
  p._sceneId = v1523
  return err
}

func (p *AddSceneValueInt32Args) ReadField_sceneId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *AddSceneValueInt32Args) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p._valueId = NewRemoteValueID()
  err1527 := p._valueId.Read(iprot)
  if err1527 != nil { return thrift.NewTProtocolExceptionReadStruct("p._valueIdRemoteValueID", err1527); }
  return err
}

func (p *AddSceneValueInt32Args) ReadField_valueId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *AddSceneValueInt32Args) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1528, err1529 := iprot.ReadI32()
  if err1529 != nil { return thrift.NewTProtocolExceptionReadField(3, "_value", p.ThriftName(), err1529); }
  p._value = v1528
  return err
}

func (p *AddSceneValueInt32Args) ReadField_value(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *AddSceneValueInt32Args) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("AddSceneValue_Int32_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *AddSceneValueInt32Args) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_sceneId", thrift.BYTE, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._sceneId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  return err
}

func (p *AddSceneValueInt32Args) WriteField_sceneId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *AddSceneValueInt32Args) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._valueId != nil {
    err = oprot.WriteFieldBegin("_valueId", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_valueId", p.ThriftName(), err); }
    err = p._valueId.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RemoteValueID", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_valueId", p.ThriftName(), err); }
  }
  return err
}

func (p *AddSceneValueInt32Args) WriteField_valueId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *AddSceneValueInt32Args) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_value", thrift.I32, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_value", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._value))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_value", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_value", p.ThriftName(), err); }
  return err
}

func (p *AddSceneValueInt32Args) WriteField_value(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *AddSceneValueInt32Args) TStructName() string {
  return "AddSceneValueInt32Args"
}

func (p *AddSceneValueInt32Args) ThriftName() string {
  return "AddSceneValue_Int32_args"
}

func (p *AddSceneValueInt32Args) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AddSceneValueInt32Args(%+v)", *p)
}

func (p *AddSceneValueInt32Args) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*AddSceneValueInt32Args)
  if !ok {
    return 0, false
  }
  if p._sceneId != data._sceneId {
    if p._sceneId < data._sceneId {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p._valueId.CompareTo(data._valueId); !ok || cmp != 0 {
    return cmp, ok
  }
  if p._value != data._value {
    if p._value < data._value {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *AddSceneValueInt32Args) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._sceneId
  case 2: return p._valueId
  case 3: return p._value
  }
  return nil
}

func (p *AddSceneValueInt32Args) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_sceneId", thrift.BYTE, 1),
    thrift.NewTField("_valueId", thrift.STRUCT, 2),
    thrift.NewTField("_value", thrift.I32, 3),
    })
}

/**
 * Attributes:
 *  - Success
 */
type AddSceneValueInt32Result struct {
  thrift.TStruct
  Success bool "success"; // 0
}

func NewAddSceneValueInt32Result() *AddSceneValueInt32Result {
  output := &AddSceneValueInt32Result{
    TStruct:thrift.NewTStruct("AddSceneValue_Int32_result", []thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    }),
  }
  {
  }
  return output
}

func (p *AddSceneValueInt32Result) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *AddSceneValueInt32Result) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1530, err1531 := iprot.ReadBool()
  if err1531 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1531); }
  p.Success = v1530
  return err
}

func (p *AddSceneValueInt32Result) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *AddSceneValueInt32Result) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("AddSceneValue_Int32_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *AddSceneValueInt32Result) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BOOL, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *AddSceneValueInt32Result) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *AddSceneValueInt32Result) TStructName() string {
  return "AddSceneValueInt32Result"
}

func (p *AddSceneValueInt32Result) ThriftName() string {
  return "AddSceneValue_Int32_result"
}

func (p *AddSceneValueInt32Result) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AddSceneValueInt32Result(%+v)", *p)
}

func (p *AddSceneValueInt32Result) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*AddSceneValueInt32Result)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Success, data.Success); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *AddSceneValueInt32Result) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *AddSceneValueInt32Result) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    })
}

/**
 * Attributes:
 *  - _sceneId
 *  - _valueId
 *  - _value
 */
type AddSceneValueInt16Args struct {
  thrift.TStruct
  _sceneId byte "_sceneId"; // 1
  _valueId *RemoteValueID "_valueId"; // 2
  _value int16 "_value"; // 3
}

func NewAddSceneValueInt16Args() *AddSceneValueInt16Args {
  output := &AddSceneValueInt16Args{
    TStruct:thrift.NewTStruct("AddSceneValue_Int16_args", []thrift.TField{
    thrift.NewTField("_sceneId", thrift.BYTE, 1),
    thrift.NewTField("_valueId", thrift.STRUCT, 2),
    thrift.NewTField("_value", thrift.I16, 3),
    }),
  }
  {
  }
  return output
}

func (p *AddSceneValueInt16Args) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_sceneId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_valueId" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "_value" {
      if fieldTypeId == thrift.I16 {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *AddSceneValueInt16Args) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1532, err1533 := iprot.ReadByte()
  if err1533 != nil { return thrift.NewTProtocolExceptionReadField(1, "_sceneId", p.ThriftName(), err1533); }
  p._sceneId = v1532
  return err
}

func (p *AddSceneValueInt16Args) ReadField_sceneId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *AddSceneValueInt16Args) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p._valueId = NewRemoteValueID()
  err1536 := p._valueId.Read(iprot)
  if err1536 != nil { return thrift.NewTProtocolExceptionReadStruct("p._valueIdRemoteValueID", err1536); }
  return err
}

func (p *AddSceneValueInt16Args) ReadField_valueId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *AddSceneValueInt16Args) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1537, err1538 := iprot.ReadI16()
  if err1538 != nil { return thrift.NewTProtocolExceptionReadField(3, "_value", p.ThriftName(), err1538); }
  p._value = v1537
  return err
}

func (p *AddSceneValueInt16Args) ReadField_value(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *AddSceneValueInt16Args) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("AddSceneValue_Int16_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *AddSceneValueInt16Args) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_sceneId", thrift.BYTE, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._sceneId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  return err
}

func (p *AddSceneValueInt16Args) WriteField_sceneId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *AddSceneValueInt16Args) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._valueId != nil {
    err = oprot.WriteFieldBegin("_valueId", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_valueId", p.ThriftName(), err); }
    err = p._valueId.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RemoteValueID", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_valueId", p.ThriftName(), err); }
  }
  return err
}

func (p *AddSceneValueInt16Args) WriteField_valueId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *AddSceneValueInt16Args) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_value", thrift.I16, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_value", p.ThriftName(), err); }
  err = oprot.WriteI16(int16(p._value))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_value", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_value", p.ThriftName(), err); }
  return err
}

func (p *AddSceneValueInt16Args) WriteField_value(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *AddSceneValueInt16Args) TStructName() string {
  return "AddSceneValueInt16Args"
}

func (p *AddSceneValueInt16Args) ThriftName() string {
  return "AddSceneValue_Int16_args"
}

func (p *AddSceneValueInt16Args) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AddSceneValueInt16Args(%+v)", *p)
}

func (p *AddSceneValueInt16Args) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*AddSceneValueInt16Args)
  if !ok {
    return 0, false
  }
  if p._sceneId != data._sceneId {
    if p._sceneId < data._sceneId {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p._valueId.CompareTo(data._valueId); !ok || cmp != 0 {
    return cmp, ok
  }
  if p._value != data._value {
    if p._value < data._value {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *AddSceneValueInt16Args) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._sceneId
  case 2: return p._valueId
  case 3: return p._value
  }
  return nil
}

func (p *AddSceneValueInt16Args) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_sceneId", thrift.BYTE, 1),
    thrift.NewTField("_valueId", thrift.STRUCT, 2),
    thrift.NewTField("_value", thrift.I16, 3),
    })
}

/**
 * Attributes:
 *  - Success
 */
type AddSceneValueInt16Result struct {
  thrift.TStruct
  Success bool "success"; // 0
}

func NewAddSceneValueInt16Result() *AddSceneValueInt16Result {
  output := &AddSceneValueInt16Result{
    TStruct:thrift.NewTStruct("AddSceneValue_Int16_result", []thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    }),
  }
  {
  }
  return output
}

func (p *AddSceneValueInt16Result) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *AddSceneValueInt16Result) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1539, err1540 := iprot.ReadBool()
  if err1540 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1540); }
  p.Success = v1539
  return err
}

func (p *AddSceneValueInt16Result) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *AddSceneValueInt16Result) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("AddSceneValue_Int16_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *AddSceneValueInt16Result) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BOOL, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *AddSceneValueInt16Result) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *AddSceneValueInt16Result) TStructName() string {
  return "AddSceneValueInt16Result"
}

func (p *AddSceneValueInt16Result) ThriftName() string {
  return "AddSceneValue_Int16_result"
}

func (p *AddSceneValueInt16Result) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AddSceneValueInt16Result(%+v)", *p)
}

func (p *AddSceneValueInt16Result) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*AddSceneValueInt16Result)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Success, data.Success); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *AddSceneValueInt16Result) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *AddSceneValueInt16Result) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    })
}

/**
 * Attributes:
 *  - _sceneId
 *  - _valueId
 *  - _value
 */
type AddSceneValueStringArgs struct {
  thrift.TStruct
  _sceneId byte "_sceneId"; // 1
  _valueId *RemoteValueID "_valueId"; // 2
  _value string "_value"; // 3
}

func NewAddSceneValueStringArgs() *AddSceneValueStringArgs {
  output := &AddSceneValueStringArgs{
    TStruct:thrift.NewTStruct("AddSceneValue_String_args", []thrift.TField{
    thrift.NewTField("_sceneId", thrift.BYTE, 1),
    thrift.NewTField("_valueId", thrift.STRUCT, 2),
    thrift.NewTField("_value", thrift.STRING, 3),
    }),
  }
  {
  }
  return output
}

func (p *AddSceneValueStringArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_sceneId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_valueId" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "_value" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *AddSceneValueStringArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1541, err1542 := iprot.ReadByte()
  if err1542 != nil { return thrift.NewTProtocolExceptionReadField(1, "_sceneId", p.ThriftName(), err1542); }
  p._sceneId = v1541
  return err
}

func (p *AddSceneValueStringArgs) ReadField_sceneId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *AddSceneValueStringArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p._valueId = NewRemoteValueID()
  err1545 := p._valueId.Read(iprot)
  if err1545 != nil { return thrift.NewTProtocolExceptionReadStruct("p._valueIdRemoteValueID", err1545); }
  return err
}

func (p *AddSceneValueStringArgs) ReadField_valueId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *AddSceneValueStringArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1546, err1547 := iprot.ReadString()
  if err1547 != nil { return thrift.NewTProtocolExceptionReadField(3, "_value", p.ThriftName(), err1547); }
  p._value = v1546
  return err
}

func (p *AddSceneValueStringArgs) ReadField_value(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *AddSceneValueStringArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("AddSceneValue_String_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *AddSceneValueStringArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_sceneId", thrift.BYTE, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._sceneId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  return err
}

func (p *AddSceneValueStringArgs) WriteField_sceneId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *AddSceneValueStringArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._valueId != nil {
    err = oprot.WriteFieldBegin("_valueId", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_valueId", p.ThriftName(), err); }
    err = p._valueId.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RemoteValueID", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_valueId", p.ThriftName(), err); }
  }
  return err
}

func (p *AddSceneValueStringArgs) WriteField_valueId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *AddSceneValueStringArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_value", thrift.STRING, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_value", p.ThriftName(), err); }
  err = oprot.WriteString(string(p._value))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_value", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_value", p.ThriftName(), err); }
  return err
}

func (p *AddSceneValueStringArgs) WriteField_value(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *AddSceneValueStringArgs) TStructName() string {
  return "AddSceneValueStringArgs"
}

func (p *AddSceneValueStringArgs) ThriftName() string {
  return "AddSceneValue_String_args"
}

func (p *AddSceneValueStringArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AddSceneValueStringArgs(%+v)", *p)
}

func (p *AddSceneValueStringArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*AddSceneValueStringArgs)
  if !ok {
    return 0, false
  }
  if p._sceneId != data._sceneId {
    if p._sceneId < data._sceneId {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p._valueId.CompareTo(data._valueId); !ok || cmp != 0 {
    return cmp, ok
  }
  if p._value != data._value {
    if p._value < data._value {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *AddSceneValueStringArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._sceneId
  case 2: return p._valueId
  case 3: return p._value
  }
  return nil
}

func (p *AddSceneValueStringArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_sceneId", thrift.BYTE, 1),
    thrift.NewTField("_valueId", thrift.STRUCT, 2),
    thrift.NewTField("_value", thrift.STRING, 3),
    })
}

/**
 * Attributes:
 *  - Success
 */
type AddSceneValueStringResult struct {
  thrift.TStruct
  Success bool "success"; // 0
}

func NewAddSceneValueStringResult() *AddSceneValueStringResult {
  output := &AddSceneValueStringResult{
    TStruct:thrift.NewTStruct("AddSceneValue_String_result", []thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    }),
  }
  {
  }
  return output
}

func (p *AddSceneValueStringResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *AddSceneValueStringResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1548, err1549 := iprot.ReadBool()
  if err1549 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1549); }
  p.Success = v1548
  return err
}

func (p *AddSceneValueStringResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *AddSceneValueStringResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("AddSceneValue_String_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *AddSceneValueStringResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BOOL, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *AddSceneValueStringResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *AddSceneValueStringResult) TStructName() string {
  return "AddSceneValueStringResult"
}

func (p *AddSceneValueStringResult) ThriftName() string {
  return "AddSceneValue_String_result"
}

func (p *AddSceneValueStringResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AddSceneValueStringResult(%+v)", *p)
}

func (p *AddSceneValueStringResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*AddSceneValueStringResult)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Success, data.Success); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *AddSceneValueStringResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *AddSceneValueStringResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    })
}

/**
 * Attributes:
 *  - _sceneId
 *  - _valueId
 *  - _value
 */
type AddSceneValueListSelectionStringArgs struct {
  thrift.TStruct
  _sceneId byte "_sceneId"; // 1
  _valueId *RemoteValueID "_valueId"; // 2
  _value string "_value"; // 3
}

func NewAddSceneValueListSelectionStringArgs() *AddSceneValueListSelectionStringArgs {
  output := &AddSceneValueListSelectionStringArgs{
    TStruct:thrift.NewTStruct("AddSceneValueListSelection_String_args", []thrift.TField{
    thrift.NewTField("_sceneId", thrift.BYTE, 1),
    thrift.NewTField("_valueId", thrift.STRUCT, 2),
    thrift.NewTField("_value", thrift.STRING, 3),
    }),
  }
  {
  }
  return output
}

func (p *AddSceneValueListSelectionStringArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_sceneId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_valueId" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "_value" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *AddSceneValueListSelectionStringArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1550, err1551 := iprot.ReadByte()
  if err1551 != nil { return thrift.NewTProtocolExceptionReadField(1, "_sceneId", p.ThriftName(), err1551); }
  p._sceneId = v1550
  return err
}

func (p *AddSceneValueListSelectionStringArgs) ReadField_sceneId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *AddSceneValueListSelectionStringArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p._valueId = NewRemoteValueID()
  err1554 := p._valueId.Read(iprot)
  if err1554 != nil { return thrift.NewTProtocolExceptionReadStruct("p._valueIdRemoteValueID", err1554); }
  return err
}

func (p *AddSceneValueListSelectionStringArgs) ReadField_valueId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *AddSceneValueListSelectionStringArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1555, err1556 := iprot.ReadString()
  if err1556 != nil { return thrift.NewTProtocolExceptionReadField(3, "_value", p.ThriftName(), err1556); }
  p._value = v1555
  return err
}

func (p *AddSceneValueListSelectionStringArgs) ReadField_value(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *AddSceneValueListSelectionStringArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("AddSceneValueListSelection_String_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *AddSceneValueListSelectionStringArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_sceneId", thrift.BYTE, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._sceneId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  return err
}

func (p *AddSceneValueListSelectionStringArgs) WriteField_sceneId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *AddSceneValueListSelectionStringArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._valueId != nil {
    err = oprot.WriteFieldBegin("_valueId", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_valueId", p.ThriftName(), err); }
    err = p._valueId.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RemoteValueID", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_valueId", p.ThriftName(), err); }
  }
  return err
}

func (p *AddSceneValueListSelectionStringArgs) WriteField_valueId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *AddSceneValueListSelectionStringArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_value", thrift.STRING, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_value", p.ThriftName(), err); }
  err = oprot.WriteString(string(p._value))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_value", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_value", p.ThriftName(), err); }
  return err
}

func (p *AddSceneValueListSelectionStringArgs) WriteField_value(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *AddSceneValueListSelectionStringArgs) TStructName() string {
  return "AddSceneValueListSelectionStringArgs"
}

func (p *AddSceneValueListSelectionStringArgs) ThriftName() string {
  return "AddSceneValueListSelection_String_args"
}

func (p *AddSceneValueListSelectionStringArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AddSceneValueListSelectionStringArgs(%+v)", *p)
}

func (p *AddSceneValueListSelectionStringArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*AddSceneValueListSelectionStringArgs)
  if !ok {
    return 0, false
  }
  if p._sceneId != data._sceneId {
    if p._sceneId < data._sceneId {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p._valueId.CompareTo(data._valueId); !ok || cmp != 0 {
    return cmp, ok
  }
  if p._value != data._value {
    if p._value < data._value {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *AddSceneValueListSelectionStringArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._sceneId
  case 2: return p._valueId
  case 3: return p._value
  }
  return nil
}

func (p *AddSceneValueListSelectionStringArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_sceneId", thrift.BYTE, 1),
    thrift.NewTField("_valueId", thrift.STRUCT, 2),
    thrift.NewTField("_value", thrift.STRING, 3),
    })
}

/**
 * Attributes:
 *  - Success
 */
type AddSceneValueListSelectionStringResult struct {
  thrift.TStruct
  Success bool "success"; // 0
}

func NewAddSceneValueListSelectionStringResult() *AddSceneValueListSelectionStringResult {
  output := &AddSceneValueListSelectionStringResult{
    TStruct:thrift.NewTStruct("AddSceneValueListSelection_String_result", []thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    }),
  }
  {
  }
  return output
}

func (p *AddSceneValueListSelectionStringResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *AddSceneValueListSelectionStringResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1557, err1558 := iprot.ReadBool()
  if err1558 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1558); }
  p.Success = v1557
  return err
}

func (p *AddSceneValueListSelectionStringResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *AddSceneValueListSelectionStringResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("AddSceneValueListSelection_String_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *AddSceneValueListSelectionStringResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BOOL, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *AddSceneValueListSelectionStringResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *AddSceneValueListSelectionStringResult) TStructName() string {
  return "AddSceneValueListSelectionStringResult"
}

func (p *AddSceneValueListSelectionStringResult) ThriftName() string {
  return "AddSceneValueListSelection_String_result"
}

func (p *AddSceneValueListSelectionStringResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AddSceneValueListSelectionStringResult(%+v)", *p)
}

func (p *AddSceneValueListSelectionStringResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*AddSceneValueListSelectionStringResult)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Success, data.Success); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *AddSceneValueListSelectionStringResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *AddSceneValueListSelectionStringResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    })
}

/**
 * Attributes:
 *  - _sceneId
 *  - _valueId
 *  - _value
 */
type AddSceneValueListSelectionInt32Args struct {
  thrift.TStruct
  _sceneId byte "_sceneId"; // 1
  _valueId *RemoteValueID "_valueId"; // 2
  _value int32 "_value"; // 3
}

func NewAddSceneValueListSelectionInt32Args() *AddSceneValueListSelectionInt32Args {
  output := &AddSceneValueListSelectionInt32Args{
    TStruct:thrift.NewTStruct("AddSceneValueListSelection_Int32_args", []thrift.TField{
    thrift.NewTField("_sceneId", thrift.BYTE, 1),
    thrift.NewTField("_valueId", thrift.STRUCT, 2),
    thrift.NewTField("_value", thrift.I32, 3),
    }),
  }
  {
  }
  return output
}

func (p *AddSceneValueListSelectionInt32Args) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_sceneId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_valueId" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "_value" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *AddSceneValueListSelectionInt32Args) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1559, err1560 := iprot.ReadByte()
  if err1560 != nil { return thrift.NewTProtocolExceptionReadField(1, "_sceneId", p.ThriftName(), err1560); }
  p._sceneId = v1559
  return err
}

func (p *AddSceneValueListSelectionInt32Args) ReadField_sceneId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *AddSceneValueListSelectionInt32Args) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p._valueId = NewRemoteValueID()
  err1563 := p._valueId.Read(iprot)
  if err1563 != nil { return thrift.NewTProtocolExceptionReadStruct("p._valueIdRemoteValueID", err1563); }
  return err
}

func (p *AddSceneValueListSelectionInt32Args) ReadField_valueId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *AddSceneValueListSelectionInt32Args) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1564, err1565 := iprot.ReadI32()
  if err1565 != nil { return thrift.NewTProtocolExceptionReadField(3, "_value", p.ThriftName(), err1565); }
  p._value = v1564
  return err
}

func (p *AddSceneValueListSelectionInt32Args) ReadField_value(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *AddSceneValueListSelectionInt32Args) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("AddSceneValueListSelection_Int32_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *AddSceneValueListSelectionInt32Args) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_sceneId", thrift.BYTE, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._sceneId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  return err
}

func (p *AddSceneValueListSelectionInt32Args) WriteField_sceneId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *AddSceneValueListSelectionInt32Args) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._valueId != nil {
    err = oprot.WriteFieldBegin("_valueId", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_valueId", p.ThriftName(), err); }
    err = p._valueId.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RemoteValueID", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_valueId", p.ThriftName(), err); }
  }
  return err
}

func (p *AddSceneValueListSelectionInt32Args) WriteField_valueId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *AddSceneValueListSelectionInt32Args) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_value", thrift.I32, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_value", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._value))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_value", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_value", p.ThriftName(), err); }
  return err
}

func (p *AddSceneValueListSelectionInt32Args) WriteField_value(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *AddSceneValueListSelectionInt32Args) TStructName() string {
  return "AddSceneValueListSelectionInt32Args"
}

func (p *AddSceneValueListSelectionInt32Args) ThriftName() string {
  return "AddSceneValueListSelection_Int32_args"
}

func (p *AddSceneValueListSelectionInt32Args) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AddSceneValueListSelectionInt32Args(%+v)", *p)
}

func (p *AddSceneValueListSelectionInt32Args) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*AddSceneValueListSelectionInt32Args)
  if !ok {
    return 0, false
  }
  if p._sceneId != data._sceneId {
    if p._sceneId < data._sceneId {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p._valueId.CompareTo(data._valueId); !ok || cmp != 0 {
    return cmp, ok
  }
  if p._value != data._value {
    if p._value < data._value {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *AddSceneValueListSelectionInt32Args) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._sceneId
  case 2: return p._valueId
  case 3: return p._value
  }
  return nil
}

func (p *AddSceneValueListSelectionInt32Args) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_sceneId", thrift.BYTE, 1),
    thrift.NewTField("_valueId", thrift.STRUCT, 2),
    thrift.NewTField("_value", thrift.I32, 3),
    })
}

/**
 * Attributes:
 *  - Success
 */
type AddSceneValueListSelectionInt32Result struct {
  thrift.TStruct
  Success bool "success"; // 0
}

func NewAddSceneValueListSelectionInt32Result() *AddSceneValueListSelectionInt32Result {
  output := &AddSceneValueListSelectionInt32Result{
    TStruct:thrift.NewTStruct("AddSceneValueListSelection_Int32_result", []thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    }),
  }
  {
  }
  return output
}

func (p *AddSceneValueListSelectionInt32Result) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *AddSceneValueListSelectionInt32Result) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1566, err1567 := iprot.ReadBool()
  if err1567 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1567); }
  p.Success = v1566
  return err
}

func (p *AddSceneValueListSelectionInt32Result) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *AddSceneValueListSelectionInt32Result) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("AddSceneValueListSelection_Int32_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *AddSceneValueListSelectionInt32Result) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BOOL, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *AddSceneValueListSelectionInt32Result) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *AddSceneValueListSelectionInt32Result) TStructName() string {
  return "AddSceneValueListSelectionInt32Result"
}

func (p *AddSceneValueListSelectionInt32Result) ThriftName() string {
  return "AddSceneValueListSelection_Int32_result"
}

func (p *AddSceneValueListSelectionInt32Result) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AddSceneValueListSelectionInt32Result(%+v)", *p)
}

func (p *AddSceneValueListSelectionInt32Result) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*AddSceneValueListSelectionInt32Result)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Success, data.Success); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *AddSceneValueListSelectionInt32Result) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *AddSceneValueListSelectionInt32Result) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    })
}

/**
 * Attributes:
 *  - _sceneId
 *  - _valueId
 */
type RemoveSceneValueArgs struct {
  thrift.TStruct
  _sceneId byte "_sceneId"; // 1
  _valueId *RemoteValueID "_valueId"; // 2
}

func NewRemoveSceneValueArgs() *RemoveSceneValueArgs {
  output := &RemoveSceneValueArgs{
    TStruct:thrift.NewTStruct("RemoveSceneValue_args", []thrift.TField{
    thrift.NewTField("_sceneId", thrift.BYTE, 1),
    thrift.NewTField("_valueId", thrift.STRUCT, 2),
    }),
  }
  {
  }
  return output
}

func (p *RemoveSceneValueArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_sceneId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_valueId" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *RemoveSceneValueArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1568, err1569 := iprot.ReadByte()
  if err1569 != nil { return thrift.NewTProtocolExceptionReadField(1, "_sceneId", p.ThriftName(), err1569); }
  p._sceneId = v1568
  return err
}

func (p *RemoveSceneValueArgs) ReadField_sceneId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *RemoveSceneValueArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p._valueId = NewRemoteValueID()
  err1572 := p._valueId.Read(iprot)
  if err1572 != nil { return thrift.NewTProtocolExceptionReadStruct("p._valueIdRemoteValueID", err1572); }
  return err
}

func (p *RemoveSceneValueArgs) ReadField_valueId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *RemoveSceneValueArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("RemoveSceneValue_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *RemoveSceneValueArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_sceneId", thrift.BYTE, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._sceneId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  return err
}

func (p *RemoveSceneValueArgs) WriteField_sceneId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *RemoveSceneValueArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._valueId != nil {
    err = oprot.WriteFieldBegin("_valueId", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_valueId", p.ThriftName(), err); }
    err = p._valueId.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RemoteValueID", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_valueId", p.ThriftName(), err); }
  }
  return err
}

func (p *RemoveSceneValueArgs) WriteField_valueId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *RemoveSceneValueArgs) TStructName() string {
  return "RemoveSceneValueArgs"
}

func (p *RemoveSceneValueArgs) ThriftName() string {
  return "RemoveSceneValue_args"
}

func (p *RemoveSceneValueArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RemoveSceneValueArgs(%+v)", *p)
}

func (p *RemoveSceneValueArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*RemoveSceneValueArgs)
  if !ok {
    return 0, false
  }
  if p._sceneId != data._sceneId {
    if p._sceneId < data._sceneId {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p._valueId.CompareTo(data._valueId); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *RemoveSceneValueArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._sceneId
  case 2: return p._valueId
  }
  return nil
}

func (p *RemoveSceneValueArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_sceneId", thrift.BYTE, 1),
    thrift.NewTField("_valueId", thrift.STRUCT, 2),
    })
}

/**
 * Attributes:
 *  - Success
 */
type RemoveSceneValueResult struct {
  thrift.TStruct
  Success bool "success"; // 0
}

func NewRemoveSceneValueResult() *RemoveSceneValueResult {
  output := &RemoveSceneValueResult{
    TStruct:thrift.NewTStruct("RemoveSceneValue_result", []thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    }),
  }
  {
  }
  return output
}

func (p *RemoveSceneValueResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *RemoveSceneValueResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1573, err1574 := iprot.ReadBool()
  if err1574 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1574); }
  p.Success = v1573
  return err
}

func (p *RemoveSceneValueResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *RemoveSceneValueResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("RemoveSceneValue_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *RemoveSceneValueResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BOOL, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *RemoveSceneValueResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *RemoveSceneValueResult) TStructName() string {
  return "RemoveSceneValueResult"
}

func (p *RemoveSceneValueResult) ThriftName() string {
  return "RemoveSceneValue_result"
}

func (p *RemoveSceneValueResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RemoveSceneValueResult(%+v)", *p)
}

func (p *RemoveSceneValueResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*RemoveSceneValueResult)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Success, data.Success); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *RemoveSceneValueResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *RemoveSceneValueResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    })
}

/**
 * Attributes:
 *  - _sceneId
 */
type SceneGetValuesArgs struct {
  thrift.TStruct
  _sceneId byte "_sceneId"; // 1
}

func NewSceneGetValuesArgs() *SceneGetValuesArgs {
  output := &SceneGetValuesArgs{
    TStruct:thrift.NewTStruct("SceneGetValues_args", []thrift.TField{
    thrift.NewTField("_sceneId", thrift.BYTE, 1),
    }),
  }
  {
  }
  return output
}

func (p *SceneGetValuesArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_sceneId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SceneGetValuesArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1575, err1576 := iprot.ReadByte()
  if err1576 != nil { return thrift.NewTProtocolExceptionReadField(1, "_sceneId", p.ThriftName(), err1576); }
  p._sceneId = v1575
  return err
}

func (p *SceneGetValuesArgs) ReadField_sceneId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *SceneGetValuesArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SceneGetValues_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SceneGetValuesArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_sceneId", thrift.BYTE, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._sceneId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  return err
}

func (p *SceneGetValuesArgs) WriteField_sceneId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *SceneGetValuesArgs) TStructName() string {
  return "SceneGetValuesArgs"
}

func (p *SceneGetValuesArgs) ThriftName() string {
  return "SceneGetValues_args"
}

func (p *SceneGetValuesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SceneGetValuesArgs(%+v)", *p)
}

func (p *SceneGetValuesArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SceneGetValuesArgs)
  if !ok {
    return 0, false
  }
  if p._sceneId != data._sceneId {
    if p._sceneId < data._sceneId {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *SceneGetValuesArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._sceneId
  }
  return nil
}

func (p *SceneGetValuesArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_sceneId", thrift.BYTE, 1),
    })
}

/**
 * Attributes:
 *  - Success
 */
type SceneGetValuesResult struct {
  thrift.TStruct
  Success *SceneGetValuesReturnStruct "success"; // 0
}

func NewSceneGetValuesResult() *SceneGetValuesResult {
  output := &SceneGetValuesResult{
    TStruct:thrift.NewTStruct("SceneGetValues_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    }),
  }
  {
  }
  return output
}

func (p *SceneGetValuesResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SceneGetValuesResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Success = NewSceneGetValuesReturnStruct()
  err1579 := p.Success.Read(iprot)
  if err1579 != nil { return thrift.NewTProtocolExceptionReadStruct("p.SuccessSceneGetValuesReturnStruct", err1579); }
  return err
}

func (p *SceneGetValuesResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *SceneGetValuesResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SceneGetValues_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SceneGetValuesResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = p.Success.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("SceneGetValuesReturnStruct", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *SceneGetValuesResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *SceneGetValuesResult) TStructName() string {
  return "SceneGetValuesResult"
}

func (p *SceneGetValuesResult) ThriftName() string {
  return "SceneGetValues_result"
}

func (p *SceneGetValuesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SceneGetValuesResult(%+v)", *p)
}

func (p *SceneGetValuesResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SceneGetValuesResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *SceneGetValuesResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *SceneGetValuesResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    })
}

/**
 * Attributes:
 *  - _sceneId
 *  - _valueId
 */
type SceneGetValueAsBoolArgs struct {
  thrift.TStruct
  _sceneId byte "_sceneId"; // 1
  _valueId *RemoteValueID "_valueId"; // 2
}

func NewSceneGetValueAsBoolArgs() *SceneGetValueAsBoolArgs {
  output := &SceneGetValueAsBoolArgs{
    TStruct:thrift.NewTStruct("SceneGetValueAsBool_args", []thrift.TField{
    thrift.NewTField("_sceneId", thrift.BYTE, 1),
    thrift.NewTField("_valueId", thrift.STRUCT, 2),
    }),
  }
  {
  }
  return output
}

func (p *SceneGetValueAsBoolArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_sceneId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_valueId" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SceneGetValueAsBoolArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1580, err1581 := iprot.ReadByte()
  if err1581 != nil { return thrift.NewTProtocolExceptionReadField(1, "_sceneId", p.ThriftName(), err1581); }
  p._sceneId = v1580
  return err
}

func (p *SceneGetValueAsBoolArgs) ReadField_sceneId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *SceneGetValueAsBoolArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p._valueId = NewRemoteValueID()
  err1584 := p._valueId.Read(iprot)
  if err1584 != nil { return thrift.NewTProtocolExceptionReadStruct("p._valueIdRemoteValueID", err1584); }
  return err
}

func (p *SceneGetValueAsBoolArgs) ReadField_valueId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *SceneGetValueAsBoolArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SceneGetValueAsBool_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SceneGetValueAsBoolArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_sceneId", thrift.BYTE, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._sceneId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  return err
}

func (p *SceneGetValueAsBoolArgs) WriteField_sceneId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *SceneGetValueAsBoolArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._valueId != nil {
    err = oprot.WriteFieldBegin("_valueId", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_valueId", p.ThriftName(), err); }
    err = p._valueId.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RemoteValueID", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_valueId", p.ThriftName(), err); }
  }
  return err
}

func (p *SceneGetValueAsBoolArgs) WriteField_valueId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *SceneGetValueAsBoolArgs) TStructName() string {
  return "SceneGetValueAsBoolArgs"
}

func (p *SceneGetValueAsBoolArgs) ThriftName() string {
  return "SceneGetValueAsBool_args"
}

func (p *SceneGetValueAsBoolArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SceneGetValueAsBoolArgs(%+v)", *p)
}

func (p *SceneGetValueAsBoolArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SceneGetValueAsBoolArgs)
  if !ok {
    return 0, false
  }
  if p._sceneId != data._sceneId {
    if p._sceneId < data._sceneId {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p._valueId.CompareTo(data._valueId); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *SceneGetValueAsBoolArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._sceneId
  case 2: return p._valueId
  }
  return nil
}

func (p *SceneGetValueAsBoolArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_sceneId", thrift.BYTE, 1),
    thrift.NewTField("_valueId", thrift.STRUCT, 2),
    })
}

/**
 * Attributes:
 *  - Success
 */
type SceneGetValueAsBoolResult struct {
  thrift.TStruct
  Success *BoolBool "success"; // 0
}

func NewSceneGetValueAsBoolResult() *SceneGetValueAsBoolResult {
  output := &SceneGetValueAsBoolResult{
    TStruct:thrift.NewTStruct("SceneGetValueAsBool_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    }),
  }
  {
  }
  return output
}

func (p *SceneGetValueAsBoolResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SceneGetValueAsBoolResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Success = NewBoolBool()
  err1587 := p.Success.Read(iprot)
  if err1587 != nil { return thrift.NewTProtocolExceptionReadStruct("p.SuccessBool_Bool", err1587); }
  return err
}

func (p *SceneGetValueAsBoolResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *SceneGetValueAsBoolResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SceneGetValueAsBool_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SceneGetValueAsBoolResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = p.Success.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("Bool_Bool", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *SceneGetValueAsBoolResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *SceneGetValueAsBoolResult) TStructName() string {
  return "SceneGetValueAsBoolResult"
}

func (p *SceneGetValueAsBoolResult) ThriftName() string {
  return "SceneGetValueAsBool_result"
}

func (p *SceneGetValueAsBoolResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SceneGetValueAsBoolResult(%+v)", *p)
}

func (p *SceneGetValueAsBoolResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SceneGetValueAsBoolResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *SceneGetValueAsBoolResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *SceneGetValueAsBoolResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    })
}

/**
 * Attributes:
 *  - _sceneId
 *  - _valueId
 */
type SceneGetValueAsByteArgs struct {
  thrift.TStruct
  _sceneId byte "_sceneId"; // 1
  _valueId *RemoteValueID "_valueId"; // 2
}

func NewSceneGetValueAsByteArgs() *SceneGetValueAsByteArgs {
  output := &SceneGetValueAsByteArgs{
    TStruct:thrift.NewTStruct("SceneGetValueAsByte_args", []thrift.TField{
    thrift.NewTField("_sceneId", thrift.BYTE, 1),
    thrift.NewTField("_valueId", thrift.STRUCT, 2),
    }),
  }
  {
  }
  return output
}

func (p *SceneGetValueAsByteArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_sceneId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_valueId" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SceneGetValueAsByteArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1588, err1589 := iprot.ReadByte()
  if err1589 != nil { return thrift.NewTProtocolExceptionReadField(1, "_sceneId", p.ThriftName(), err1589); }
  p._sceneId = v1588
  return err
}

func (p *SceneGetValueAsByteArgs) ReadField_sceneId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *SceneGetValueAsByteArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p._valueId = NewRemoteValueID()
  err1592 := p._valueId.Read(iprot)
  if err1592 != nil { return thrift.NewTProtocolExceptionReadStruct("p._valueIdRemoteValueID", err1592); }
  return err
}

func (p *SceneGetValueAsByteArgs) ReadField_valueId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *SceneGetValueAsByteArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SceneGetValueAsByte_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SceneGetValueAsByteArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_sceneId", thrift.BYTE, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._sceneId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  return err
}

func (p *SceneGetValueAsByteArgs) WriteField_sceneId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *SceneGetValueAsByteArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._valueId != nil {
    err = oprot.WriteFieldBegin("_valueId", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_valueId", p.ThriftName(), err); }
    err = p._valueId.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RemoteValueID", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_valueId", p.ThriftName(), err); }
  }
  return err
}

func (p *SceneGetValueAsByteArgs) WriteField_valueId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *SceneGetValueAsByteArgs) TStructName() string {
  return "SceneGetValueAsByteArgs"
}

func (p *SceneGetValueAsByteArgs) ThriftName() string {
  return "SceneGetValueAsByte_args"
}

func (p *SceneGetValueAsByteArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SceneGetValueAsByteArgs(%+v)", *p)
}

func (p *SceneGetValueAsByteArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SceneGetValueAsByteArgs)
  if !ok {
    return 0, false
  }
  if p._sceneId != data._sceneId {
    if p._sceneId < data._sceneId {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p._valueId.CompareTo(data._valueId); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *SceneGetValueAsByteArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._sceneId
  case 2: return p._valueId
  }
  return nil
}

func (p *SceneGetValueAsByteArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_sceneId", thrift.BYTE, 1),
    thrift.NewTField("_valueId", thrift.STRUCT, 2),
    })
}

/**
 * Attributes:
 *  - Success
 */
type SceneGetValueAsByteResult struct {
  thrift.TStruct
  Success *BoolUInt8 "success"; // 0
}

func NewSceneGetValueAsByteResult() *SceneGetValueAsByteResult {
  output := &SceneGetValueAsByteResult{
    TStruct:thrift.NewTStruct("SceneGetValueAsByte_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    }),
  }
  {
  }
  return output
}

func (p *SceneGetValueAsByteResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SceneGetValueAsByteResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Success = NewBoolUInt8()
  err1595 := p.Success.Read(iprot)
  if err1595 != nil { return thrift.NewTProtocolExceptionReadStruct("p.SuccessBool_UInt8", err1595); }
  return err
}

func (p *SceneGetValueAsByteResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *SceneGetValueAsByteResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SceneGetValueAsByte_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SceneGetValueAsByteResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = p.Success.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("Bool_UInt8", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *SceneGetValueAsByteResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *SceneGetValueAsByteResult) TStructName() string {
  return "SceneGetValueAsByteResult"
}

func (p *SceneGetValueAsByteResult) ThriftName() string {
  return "SceneGetValueAsByte_result"
}

func (p *SceneGetValueAsByteResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SceneGetValueAsByteResult(%+v)", *p)
}

func (p *SceneGetValueAsByteResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SceneGetValueAsByteResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *SceneGetValueAsByteResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *SceneGetValueAsByteResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    })
}

/**
 * Attributes:
 *  - _sceneId
 *  - _valueId
 */
type SceneGetValueAsFloatArgs struct {
  thrift.TStruct
  _sceneId byte "_sceneId"; // 1
  _valueId *RemoteValueID "_valueId"; // 2
}

func NewSceneGetValueAsFloatArgs() *SceneGetValueAsFloatArgs {
  output := &SceneGetValueAsFloatArgs{
    TStruct:thrift.NewTStruct("SceneGetValueAsFloat_args", []thrift.TField{
    thrift.NewTField("_sceneId", thrift.BYTE, 1),
    thrift.NewTField("_valueId", thrift.STRUCT, 2),
    }),
  }
  {
  }
  return output
}

func (p *SceneGetValueAsFloatArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_sceneId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_valueId" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SceneGetValueAsFloatArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1596, err1597 := iprot.ReadByte()
  if err1597 != nil { return thrift.NewTProtocolExceptionReadField(1, "_sceneId", p.ThriftName(), err1597); }
  p._sceneId = v1596
  return err
}

func (p *SceneGetValueAsFloatArgs) ReadField_sceneId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *SceneGetValueAsFloatArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p._valueId = NewRemoteValueID()
  err1600 := p._valueId.Read(iprot)
  if err1600 != nil { return thrift.NewTProtocolExceptionReadStruct("p._valueIdRemoteValueID", err1600); }
  return err
}

func (p *SceneGetValueAsFloatArgs) ReadField_valueId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *SceneGetValueAsFloatArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SceneGetValueAsFloat_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SceneGetValueAsFloatArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_sceneId", thrift.BYTE, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._sceneId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  return err
}

func (p *SceneGetValueAsFloatArgs) WriteField_sceneId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *SceneGetValueAsFloatArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._valueId != nil {
    err = oprot.WriteFieldBegin("_valueId", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_valueId", p.ThriftName(), err); }
    err = p._valueId.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RemoteValueID", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_valueId", p.ThriftName(), err); }
  }
  return err
}

func (p *SceneGetValueAsFloatArgs) WriteField_valueId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *SceneGetValueAsFloatArgs) TStructName() string {
  return "SceneGetValueAsFloatArgs"
}

func (p *SceneGetValueAsFloatArgs) ThriftName() string {
  return "SceneGetValueAsFloat_args"
}

func (p *SceneGetValueAsFloatArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SceneGetValueAsFloatArgs(%+v)", *p)
}

func (p *SceneGetValueAsFloatArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SceneGetValueAsFloatArgs)
  if !ok {
    return 0, false
  }
  if p._sceneId != data._sceneId {
    if p._sceneId < data._sceneId {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p._valueId.CompareTo(data._valueId); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *SceneGetValueAsFloatArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._sceneId
  case 2: return p._valueId
  }
  return nil
}

func (p *SceneGetValueAsFloatArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_sceneId", thrift.BYTE, 1),
    thrift.NewTField("_valueId", thrift.STRUCT, 2),
    })
}

/**
 * Attributes:
 *  - Success
 */
type SceneGetValueAsFloatResult struct {
  thrift.TStruct
  Success *BoolFloat "success"; // 0
}

func NewSceneGetValueAsFloatResult() *SceneGetValueAsFloatResult {
  output := &SceneGetValueAsFloatResult{
    TStruct:thrift.NewTStruct("SceneGetValueAsFloat_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    }),
  }
  {
  }
  return output
}

func (p *SceneGetValueAsFloatResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SceneGetValueAsFloatResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Success = NewBoolFloat()
  err1603 := p.Success.Read(iprot)
  if err1603 != nil { return thrift.NewTProtocolExceptionReadStruct("p.SuccessBool_Float", err1603); }
  return err
}

func (p *SceneGetValueAsFloatResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *SceneGetValueAsFloatResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SceneGetValueAsFloat_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SceneGetValueAsFloatResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = p.Success.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("Bool_Float", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *SceneGetValueAsFloatResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *SceneGetValueAsFloatResult) TStructName() string {
  return "SceneGetValueAsFloatResult"
}

func (p *SceneGetValueAsFloatResult) ThriftName() string {
  return "SceneGetValueAsFloat_result"
}

func (p *SceneGetValueAsFloatResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SceneGetValueAsFloatResult(%+v)", *p)
}

func (p *SceneGetValueAsFloatResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SceneGetValueAsFloatResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *SceneGetValueAsFloatResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *SceneGetValueAsFloatResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    })
}

/**
 * Attributes:
 *  - _sceneId
 *  - _valueId
 */
type SceneGetValueAsIntArgs struct {
  thrift.TStruct
  _sceneId byte "_sceneId"; // 1
  _valueId *RemoteValueID "_valueId"; // 2
}

func NewSceneGetValueAsIntArgs() *SceneGetValueAsIntArgs {
  output := &SceneGetValueAsIntArgs{
    TStruct:thrift.NewTStruct("SceneGetValueAsInt_args", []thrift.TField{
    thrift.NewTField("_sceneId", thrift.BYTE, 1),
    thrift.NewTField("_valueId", thrift.STRUCT, 2),
    }),
  }
  {
  }
  return output
}

func (p *SceneGetValueAsIntArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_sceneId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_valueId" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SceneGetValueAsIntArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1604, err1605 := iprot.ReadByte()
  if err1605 != nil { return thrift.NewTProtocolExceptionReadField(1, "_sceneId", p.ThriftName(), err1605); }
  p._sceneId = v1604
  return err
}

func (p *SceneGetValueAsIntArgs) ReadField_sceneId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *SceneGetValueAsIntArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p._valueId = NewRemoteValueID()
  err1608 := p._valueId.Read(iprot)
  if err1608 != nil { return thrift.NewTProtocolExceptionReadStruct("p._valueIdRemoteValueID", err1608); }
  return err
}

func (p *SceneGetValueAsIntArgs) ReadField_valueId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *SceneGetValueAsIntArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SceneGetValueAsInt_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SceneGetValueAsIntArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_sceneId", thrift.BYTE, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._sceneId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  return err
}

func (p *SceneGetValueAsIntArgs) WriteField_sceneId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *SceneGetValueAsIntArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._valueId != nil {
    err = oprot.WriteFieldBegin("_valueId", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_valueId", p.ThriftName(), err); }
    err = p._valueId.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RemoteValueID", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_valueId", p.ThriftName(), err); }
  }
  return err
}

func (p *SceneGetValueAsIntArgs) WriteField_valueId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *SceneGetValueAsIntArgs) TStructName() string {
  return "SceneGetValueAsIntArgs"
}

func (p *SceneGetValueAsIntArgs) ThriftName() string {
  return "SceneGetValueAsInt_args"
}

func (p *SceneGetValueAsIntArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SceneGetValueAsIntArgs(%+v)", *p)
}

func (p *SceneGetValueAsIntArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SceneGetValueAsIntArgs)
  if !ok {
    return 0, false
  }
  if p._sceneId != data._sceneId {
    if p._sceneId < data._sceneId {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p._valueId.CompareTo(data._valueId); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *SceneGetValueAsIntArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._sceneId
  case 2: return p._valueId
  }
  return nil
}

func (p *SceneGetValueAsIntArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_sceneId", thrift.BYTE, 1),
    thrift.NewTField("_valueId", thrift.STRUCT, 2),
    })
}

/**
 * Attributes:
 *  - Success
 */
type SceneGetValueAsIntResult struct {
  thrift.TStruct
  Success *BoolInt "success"; // 0
}

func NewSceneGetValueAsIntResult() *SceneGetValueAsIntResult {
  output := &SceneGetValueAsIntResult{
    TStruct:thrift.NewTStruct("SceneGetValueAsInt_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    }),
  }
  {
  }
  return output
}

func (p *SceneGetValueAsIntResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SceneGetValueAsIntResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Success = NewBoolInt()
  err1611 := p.Success.Read(iprot)
  if err1611 != nil { return thrift.NewTProtocolExceptionReadStruct("p.SuccessBool_Int", err1611); }
  return err
}

func (p *SceneGetValueAsIntResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *SceneGetValueAsIntResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SceneGetValueAsInt_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SceneGetValueAsIntResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = p.Success.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("Bool_Int", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *SceneGetValueAsIntResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *SceneGetValueAsIntResult) TStructName() string {
  return "SceneGetValueAsIntResult"
}

func (p *SceneGetValueAsIntResult) ThriftName() string {
  return "SceneGetValueAsInt_result"
}

func (p *SceneGetValueAsIntResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SceneGetValueAsIntResult(%+v)", *p)
}

func (p *SceneGetValueAsIntResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SceneGetValueAsIntResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *SceneGetValueAsIntResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *SceneGetValueAsIntResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    })
}

/**
 * Attributes:
 *  - _sceneId
 *  - _valueId
 */
type SceneGetValueAsShortArgs struct {
  thrift.TStruct
  _sceneId byte "_sceneId"; // 1
  _valueId *RemoteValueID "_valueId"; // 2
}

func NewSceneGetValueAsShortArgs() *SceneGetValueAsShortArgs {
  output := &SceneGetValueAsShortArgs{
    TStruct:thrift.NewTStruct("SceneGetValueAsShort_args", []thrift.TField{
    thrift.NewTField("_sceneId", thrift.BYTE, 1),
    thrift.NewTField("_valueId", thrift.STRUCT, 2),
    }),
  }
  {
  }
  return output
}

func (p *SceneGetValueAsShortArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_sceneId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_valueId" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SceneGetValueAsShortArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1612, err1613 := iprot.ReadByte()
  if err1613 != nil { return thrift.NewTProtocolExceptionReadField(1, "_sceneId", p.ThriftName(), err1613); }
  p._sceneId = v1612
  return err
}

func (p *SceneGetValueAsShortArgs) ReadField_sceneId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *SceneGetValueAsShortArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p._valueId = NewRemoteValueID()
  err1616 := p._valueId.Read(iprot)
  if err1616 != nil { return thrift.NewTProtocolExceptionReadStruct("p._valueIdRemoteValueID", err1616); }
  return err
}

func (p *SceneGetValueAsShortArgs) ReadField_valueId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *SceneGetValueAsShortArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SceneGetValueAsShort_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SceneGetValueAsShortArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_sceneId", thrift.BYTE, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._sceneId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  return err
}

func (p *SceneGetValueAsShortArgs) WriteField_sceneId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *SceneGetValueAsShortArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._valueId != nil {
    err = oprot.WriteFieldBegin("_valueId", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_valueId", p.ThriftName(), err); }
    err = p._valueId.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RemoteValueID", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_valueId", p.ThriftName(), err); }
  }
  return err
}

func (p *SceneGetValueAsShortArgs) WriteField_valueId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *SceneGetValueAsShortArgs) TStructName() string {
  return "SceneGetValueAsShortArgs"
}

func (p *SceneGetValueAsShortArgs) ThriftName() string {
  return "SceneGetValueAsShort_args"
}

func (p *SceneGetValueAsShortArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SceneGetValueAsShortArgs(%+v)", *p)
}

func (p *SceneGetValueAsShortArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SceneGetValueAsShortArgs)
  if !ok {
    return 0, false
  }
  if p._sceneId != data._sceneId {
    if p._sceneId < data._sceneId {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p._valueId.CompareTo(data._valueId); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *SceneGetValueAsShortArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._sceneId
  case 2: return p._valueId
  }
  return nil
}

func (p *SceneGetValueAsShortArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_sceneId", thrift.BYTE, 1),
    thrift.NewTField("_valueId", thrift.STRUCT, 2),
    })
}

/**
 * Attributes:
 *  - Success
 */
type SceneGetValueAsShortResult struct {
  thrift.TStruct
  Success *BoolInt16 "success"; // 0
}

func NewSceneGetValueAsShortResult() *SceneGetValueAsShortResult {
  output := &SceneGetValueAsShortResult{
    TStruct:thrift.NewTStruct("SceneGetValueAsShort_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    }),
  }
  {
  }
  return output
}

func (p *SceneGetValueAsShortResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SceneGetValueAsShortResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Success = NewBoolInt16()
  err1619 := p.Success.Read(iprot)
  if err1619 != nil { return thrift.NewTProtocolExceptionReadStruct("p.SuccessBool_Int16", err1619); }
  return err
}

func (p *SceneGetValueAsShortResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *SceneGetValueAsShortResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SceneGetValueAsShort_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SceneGetValueAsShortResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = p.Success.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("Bool_Int16", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *SceneGetValueAsShortResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *SceneGetValueAsShortResult) TStructName() string {
  return "SceneGetValueAsShortResult"
}

func (p *SceneGetValueAsShortResult) ThriftName() string {
  return "SceneGetValueAsShort_result"
}

func (p *SceneGetValueAsShortResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SceneGetValueAsShortResult(%+v)", *p)
}

func (p *SceneGetValueAsShortResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SceneGetValueAsShortResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *SceneGetValueAsShortResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *SceneGetValueAsShortResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    })
}

/**
 * Attributes:
 *  - _sceneId
 *  - _valueId
 */
type SceneGetValueAsStringArgs struct {
  thrift.TStruct
  _sceneId byte "_sceneId"; // 1
  _valueId *RemoteValueID "_valueId"; // 2
}

func NewSceneGetValueAsStringArgs() *SceneGetValueAsStringArgs {
  output := &SceneGetValueAsStringArgs{
    TStruct:thrift.NewTStruct("SceneGetValueAsString_args", []thrift.TField{
    thrift.NewTField("_sceneId", thrift.BYTE, 1),
    thrift.NewTField("_valueId", thrift.STRUCT, 2),
    }),
  }
  {
  }
  return output
}

func (p *SceneGetValueAsStringArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_sceneId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_valueId" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SceneGetValueAsStringArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1620, err1621 := iprot.ReadByte()
  if err1621 != nil { return thrift.NewTProtocolExceptionReadField(1, "_sceneId", p.ThriftName(), err1621); }
  p._sceneId = v1620
  return err
}

func (p *SceneGetValueAsStringArgs) ReadField_sceneId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *SceneGetValueAsStringArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p._valueId = NewRemoteValueID()
  err1624 := p._valueId.Read(iprot)
  if err1624 != nil { return thrift.NewTProtocolExceptionReadStruct("p._valueIdRemoteValueID", err1624); }
  return err
}

func (p *SceneGetValueAsStringArgs) ReadField_valueId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *SceneGetValueAsStringArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SceneGetValueAsString_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SceneGetValueAsStringArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_sceneId", thrift.BYTE, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._sceneId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  return err
}

func (p *SceneGetValueAsStringArgs) WriteField_sceneId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *SceneGetValueAsStringArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._valueId != nil {
    err = oprot.WriteFieldBegin("_valueId", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_valueId", p.ThriftName(), err); }
    err = p._valueId.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RemoteValueID", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_valueId", p.ThriftName(), err); }
  }
  return err
}

func (p *SceneGetValueAsStringArgs) WriteField_valueId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *SceneGetValueAsStringArgs) TStructName() string {
  return "SceneGetValueAsStringArgs"
}

func (p *SceneGetValueAsStringArgs) ThriftName() string {
  return "SceneGetValueAsString_args"
}

func (p *SceneGetValueAsStringArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SceneGetValueAsStringArgs(%+v)", *p)
}

func (p *SceneGetValueAsStringArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SceneGetValueAsStringArgs)
  if !ok {
    return 0, false
  }
  if p._sceneId != data._sceneId {
    if p._sceneId < data._sceneId {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p._valueId.CompareTo(data._valueId); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *SceneGetValueAsStringArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._sceneId
  case 2: return p._valueId
  }
  return nil
}

func (p *SceneGetValueAsStringArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_sceneId", thrift.BYTE, 1),
    thrift.NewTField("_valueId", thrift.STRUCT, 2),
    })
}

/**
 * Attributes:
 *  - Success
 */
type SceneGetValueAsStringResult struct {
  thrift.TStruct
  Success *BoolString "success"; // 0
}

func NewSceneGetValueAsStringResult() *SceneGetValueAsStringResult {
  output := &SceneGetValueAsStringResult{
    TStruct:thrift.NewTStruct("SceneGetValueAsString_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    }),
  }
  {
  }
  return output
}

func (p *SceneGetValueAsStringResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SceneGetValueAsStringResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Success = NewBoolString()
  err1627 := p.Success.Read(iprot)
  if err1627 != nil { return thrift.NewTProtocolExceptionReadStruct("p.SuccessBool_String", err1627); }
  return err
}

func (p *SceneGetValueAsStringResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *SceneGetValueAsStringResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SceneGetValueAsString_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SceneGetValueAsStringResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = p.Success.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("Bool_String", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *SceneGetValueAsStringResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *SceneGetValueAsStringResult) TStructName() string {
  return "SceneGetValueAsStringResult"
}

func (p *SceneGetValueAsStringResult) ThriftName() string {
  return "SceneGetValueAsString_result"
}

func (p *SceneGetValueAsStringResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SceneGetValueAsStringResult(%+v)", *p)
}

func (p *SceneGetValueAsStringResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SceneGetValueAsStringResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *SceneGetValueAsStringResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *SceneGetValueAsStringResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    })
}

/**
 * Attributes:
 *  - _sceneId
 *  - _valueId
 */
type SceneGetValueListSelectionStringArgs struct {
  thrift.TStruct
  _sceneId byte "_sceneId"; // 1
  _valueId *RemoteValueID "_valueId"; // 2
}

func NewSceneGetValueListSelectionStringArgs() *SceneGetValueListSelectionStringArgs {
  output := &SceneGetValueListSelectionStringArgs{
    TStruct:thrift.NewTStruct("SceneGetValueListSelection_String_args", []thrift.TField{
    thrift.NewTField("_sceneId", thrift.BYTE, 1),
    thrift.NewTField("_valueId", thrift.STRUCT, 2),
    }),
  }
  {
  }
  return output
}

func (p *SceneGetValueListSelectionStringArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_sceneId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_valueId" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SceneGetValueListSelectionStringArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1628, err1629 := iprot.ReadByte()
  if err1629 != nil { return thrift.NewTProtocolExceptionReadField(1, "_sceneId", p.ThriftName(), err1629); }
  p._sceneId = v1628
  return err
}

func (p *SceneGetValueListSelectionStringArgs) ReadField_sceneId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *SceneGetValueListSelectionStringArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p._valueId = NewRemoteValueID()
  err1632 := p._valueId.Read(iprot)
  if err1632 != nil { return thrift.NewTProtocolExceptionReadStruct("p._valueIdRemoteValueID", err1632); }
  return err
}

func (p *SceneGetValueListSelectionStringArgs) ReadField_valueId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *SceneGetValueListSelectionStringArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SceneGetValueListSelection_String_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SceneGetValueListSelectionStringArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_sceneId", thrift.BYTE, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._sceneId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  return err
}

func (p *SceneGetValueListSelectionStringArgs) WriteField_sceneId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *SceneGetValueListSelectionStringArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._valueId != nil {
    err = oprot.WriteFieldBegin("_valueId", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_valueId", p.ThriftName(), err); }
    err = p._valueId.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RemoteValueID", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_valueId", p.ThriftName(), err); }
  }
  return err
}

func (p *SceneGetValueListSelectionStringArgs) WriteField_valueId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *SceneGetValueListSelectionStringArgs) TStructName() string {
  return "SceneGetValueListSelectionStringArgs"
}

func (p *SceneGetValueListSelectionStringArgs) ThriftName() string {
  return "SceneGetValueListSelection_String_args"
}

func (p *SceneGetValueListSelectionStringArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SceneGetValueListSelectionStringArgs(%+v)", *p)
}

func (p *SceneGetValueListSelectionStringArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SceneGetValueListSelectionStringArgs)
  if !ok {
    return 0, false
  }
  if p._sceneId != data._sceneId {
    if p._sceneId < data._sceneId {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p._valueId.CompareTo(data._valueId); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *SceneGetValueListSelectionStringArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._sceneId
  case 2: return p._valueId
  }
  return nil
}

func (p *SceneGetValueListSelectionStringArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_sceneId", thrift.BYTE, 1),
    thrift.NewTField("_valueId", thrift.STRUCT, 2),
    })
}

/**
 * Attributes:
 *  - Success
 */
type SceneGetValueListSelectionStringResult struct {
  thrift.TStruct
  Success *BoolString "success"; // 0
}

func NewSceneGetValueListSelectionStringResult() *SceneGetValueListSelectionStringResult {
  output := &SceneGetValueListSelectionStringResult{
    TStruct:thrift.NewTStruct("SceneGetValueListSelection_String_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    }),
  }
  {
  }
  return output
}

func (p *SceneGetValueListSelectionStringResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SceneGetValueListSelectionStringResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Success = NewBoolString()
  err1635 := p.Success.Read(iprot)
  if err1635 != nil { return thrift.NewTProtocolExceptionReadStruct("p.SuccessBool_String", err1635); }
  return err
}

func (p *SceneGetValueListSelectionStringResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *SceneGetValueListSelectionStringResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SceneGetValueListSelection_String_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SceneGetValueListSelectionStringResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = p.Success.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("Bool_String", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *SceneGetValueListSelectionStringResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *SceneGetValueListSelectionStringResult) TStructName() string {
  return "SceneGetValueListSelectionStringResult"
}

func (p *SceneGetValueListSelectionStringResult) ThriftName() string {
  return "SceneGetValueListSelection_String_result"
}

func (p *SceneGetValueListSelectionStringResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SceneGetValueListSelectionStringResult(%+v)", *p)
}

func (p *SceneGetValueListSelectionStringResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SceneGetValueListSelectionStringResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *SceneGetValueListSelectionStringResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *SceneGetValueListSelectionStringResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    })
}

/**
 * Attributes:
 *  - _sceneId
 *  - _valueId
 */
type SceneGetValueListSelectionInt32Args struct {
  thrift.TStruct
  _sceneId byte "_sceneId"; // 1
  _valueId *RemoteValueID "_valueId"; // 2
}

func NewSceneGetValueListSelectionInt32Args() *SceneGetValueListSelectionInt32Args {
  output := &SceneGetValueListSelectionInt32Args{
    TStruct:thrift.NewTStruct("SceneGetValueListSelection_Int32_args", []thrift.TField{
    thrift.NewTField("_sceneId", thrift.BYTE, 1),
    thrift.NewTField("_valueId", thrift.STRUCT, 2),
    }),
  }
  {
  }
  return output
}

func (p *SceneGetValueListSelectionInt32Args) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_sceneId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_valueId" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SceneGetValueListSelectionInt32Args) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1636, err1637 := iprot.ReadByte()
  if err1637 != nil { return thrift.NewTProtocolExceptionReadField(1, "_sceneId", p.ThriftName(), err1637); }
  p._sceneId = v1636
  return err
}

func (p *SceneGetValueListSelectionInt32Args) ReadField_sceneId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *SceneGetValueListSelectionInt32Args) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p._valueId = NewRemoteValueID()
  err1640 := p._valueId.Read(iprot)
  if err1640 != nil { return thrift.NewTProtocolExceptionReadStruct("p._valueIdRemoteValueID", err1640); }
  return err
}

func (p *SceneGetValueListSelectionInt32Args) ReadField_valueId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *SceneGetValueListSelectionInt32Args) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SceneGetValueListSelection_Int32_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SceneGetValueListSelectionInt32Args) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_sceneId", thrift.BYTE, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._sceneId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  return err
}

func (p *SceneGetValueListSelectionInt32Args) WriteField_sceneId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *SceneGetValueListSelectionInt32Args) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._valueId != nil {
    err = oprot.WriteFieldBegin("_valueId", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_valueId", p.ThriftName(), err); }
    err = p._valueId.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RemoteValueID", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_valueId", p.ThriftName(), err); }
  }
  return err
}

func (p *SceneGetValueListSelectionInt32Args) WriteField_valueId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *SceneGetValueListSelectionInt32Args) TStructName() string {
  return "SceneGetValueListSelectionInt32Args"
}

func (p *SceneGetValueListSelectionInt32Args) ThriftName() string {
  return "SceneGetValueListSelection_Int32_args"
}

func (p *SceneGetValueListSelectionInt32Args) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SceneGetValueListSelectionInt32Args(%+v)", *p)
}

func (p *SceneGetValueListSelectionInt32Args) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SceneGetValueListSelectionInt32Args)
  if !ok {
    return 0, false
  }
  if p._sceneId != data._sceneId {
    if p._sceneId < data._sceneId {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p._valueId.CompareTo(data._valueId); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *SceneGetValueListSelectionInt32Args) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._sceneId
  case 2: return p._valueId
  }
  return nil
}

func (p *SceneGetValueListSelectionInt32Args) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_sceneId", thrift.BYTE, 1),
    thrift.NewTField("_valueId", thrift.STRUCT, 2),
    })
}

/**
 * Attributes:
 *  - Success
 */
type SceneGetValueListSelectionInt32Result struct {
  thrift.TStruct
  Success *BoolInt "success"; // 0
}

func NewSceneGetValueListSelectionInt32Result() *SceneGetValueListSelectionInt32Result {
  output := &SceneGetValueListSelectionInt32Result{
    TStruct:thrift.NewTStruct("SceneGetValueListSelection_Int32_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    }),
  }
  {
  }
  return output
}

func (p *SceneGetValueListSelectionInt32Result) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SceneGetValueListSelectionInt32Result) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Success = NewBoolInt()
  err1643 := p.Success.Read(iprot)
  if err1643 != nil { return thrift.NewTProtocolExceptionReadStruct("p.SuccessBool_Int", err1643); }
  return err
}

func (p *SceneGetValueListSelectionInt32Result) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *SceneGetValueListSelectionInt32Result) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SceneGetValueListSelection_Int32_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SceneGetValueListSelectionInt32Result) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = p.Success.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("Bool_Int", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *SceneGetValueListSelectionInt32Result) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *SceneGetValueListSelectionInt32Result) TStructName() string {
  return "SceneGetValueListSelectionInt32Result"
}

func (p *SceneGetValueListSelectionInt32Result) ThriftName() string {
  return "SceneGetValueListSelection_Int32_result"
}

func (p *SceneGetValueListSelectionInt32Result) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SceneGetValueListSelectionInt32Result(%+v)", *p)
}

func (p *SceneGetValueListSelectionInt32Result) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SceneGetValueListSelectionInt32Result)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *SceneGetValueListSelectionInt32Result) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *SceneGetValueListSelectionInt32Result) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    })
}

/**
 * Attributes:
 *  - _sceneId
 *  - _valueId
 *  - _value
 */
type SetSceneValueBoolArgs struct {
  thrift.TStruct
  _sceneId byte "_sceneId"; // 1
  _valueId *RemoteValueID "_valueId"; // 2
  _value bool "_value"; // 3
}

func NewSetSceneValueBoolArgs() *SetSceneValueBoolArgs {
  output := &SetSceneValueBoolArgs{
    TStruct:thrift.NewTStruct("SetSceneValue_Bool_args", []thrift.TField{
    thrift.NewTField("_sceneId", thrift.BYTE, 1),
    thrift.NewTField("_valueId", thrift.STRUCT, 2),
    thrift.NewTField("_value", thrift.BOOL, 3),
    }),
  }
  {
  }
  return output
}

func (p *SetSceneValueBoolArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_sceneId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_valueId" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "_value" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SetSceneValueBoolArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1644, err1645 := iprot.ReadByte()
  if err1645 != nil { return thrift.NewTProtocolExceptionReadField(1, "_sceneId", p.ThriftName(), err1645); }
  p._sceneId = v1644
  return err
}

func (p *SetSceneValueBoolArgs) ReadField_sceneId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *SetSceneValueBoolArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p._valueId = NewRemoteValueID()
  err1648 := p._valueId.Read(iprot)
  if err1648 != nil { return thrift.NewTProtocolExceptionReadStruct("p._valueIdRemoteValueID", err1648); }
  return err
}

func (p *SetSceneValueBoolArgs) ReadField_valueId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *SetSceneValueBoolArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1649, err1650 := iprot.ReadBool()
  if err1650 != nil { return thrift.NewTProtocolExceptionReadField(3, "_value", p.ThriftName(), err1650); }
  p._value = v1649
  return err
}

func (p *SetSceneValueBoolArgs) ReadField_value(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *SetSceneValueBoolArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SetSceneValue_Bool_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SetSceneValueBoolArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_sceneId", thrift.BYTE, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._sceneId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  return err
}

func (p *SetSceneValueBoolArgs) WriteField_sceneId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *SetSceneValueBoolArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._valueId != nil {
    err = oprot.WriteFieldBegin("_valueId", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_valueId", p.ThriftName(), err); }
    err = p._valueId.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RemoteValueID", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_valueId", p.ThriftName(), err); }
  }
  return err
}

func (p *SetSceneValueBoolArgs) WriteField_valueId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *SetSceneValueBoolArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_value", thrift.BOOL, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_value", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p._value))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_value", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_value", p.ThriftName(), err); }
  return err
}

func (p *SetSceneValueBoolArgs) WriteField_value(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *SetSceneValueBoolArgs) TStructName() string {
  return "SetSceneValueBoolArgs"
}

func (p *SetSceneValueBoolArgs) ThriftName() string {
  return "SetSceneValue_Bool_args"
}

func (p *SetSceneValueBoolArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetSceneValueBoolArgs(%+v)", *p)
}

func (p *SetSceneValueBoolArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SetSceneValueBoolArgs)
  if !ok {
    return 0, false
  }
  if p._sceneId != data._sceneId {
    if p._sceneId < data._sceneId {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p._valueId.CompareTo(data._valueId); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp := thrift.CompareBool(p._value, data._value); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *SetSceneValueBoolArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._sceneId
  case 2: return p._valueId
  case 3: return p._value
  }
  return nil
}

func (p *SetSceneValueBoolArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_sceneId", thrift.BYTE, 1),
    thrift.NewTField("_valueId", thrift.STRUCT, 2),
    thrift.NewTField("_value", thrift.BOOL, 3),
    })
}

/**
 * Attributes:
 *  - Success
 */
type SetSceneValueBoolResult struct {
  thrift.TStruct
  Success bool "success"; // 0
}

func NewSetSceneValueBoolResult() *SetSceneValueBoolResult {
  output := &SetSceneValueBoolResult{
    TStruct:thrift.NewTStruct("SetSceneValue_Bool_result", []thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    }),
  }
  {
  }
  return output
}

func (p *SetSceneValueBoolResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SetSceneValueBoolResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1651, err1652 := iprot.ReadBool()
  if err1652 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1652); }
  p.Success = v1651
  return err
}

func (p *SetSceneValueBoolResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *SetSceneValueBoolResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SetSceneValue_Bool_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SetSceneValueBoolResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BOOL, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *SetSceneValueBoolResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *SetSceneValueBoolResult) TStructName() string {
  return "SetSceneValueBoolResult"
}

func (p *SetSceneValueBoolResult) ThriftName() string {
  return "SetSceneValue_Bool_result"
}

func (p *SetSceneValueBoolResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetSceneValueBoolResult(%+v)", *p)
}

func (p *SetSceneValueBoolResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SetSceneValueBoolResult)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Success, data.Success); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *SetSceneValueBoolResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *SetSceneValueBoolResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    })
}

/**
 * Attributes:
 *  - _sceneId
 *  - _valueId
 *  - _value
 */
type SetSceneValueUint8Args struct {
  thrift.TStruct
  _sceneId byte "_sceneId"; // 1
  _valueId *RemoteValueID "_valueId"; // 2
  _value byte "_value"; // 3
}

func NewSetSceneValueUint8Args() *SetSceneValueUint8Args {
  output := &SetSceneValueUint8Args{
    TStruct:thrift.NewTStruct("SetSceneValue_Uint8_args", []thrift.TField{
    thrift.NewTField("_sceneId", thrift.BYTE, 1),
    thrift.NewTField("_valueId", thrift.STRUCT, 2),
    thrift.NewTField("_value", thrift.BYTE, 3),
    }),
  }
  {
  }
  return output
}

func (p *SetSceneValueUint8Args) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_sceneId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_valueId" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "_value" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SetSceneValueUint8Args) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1653, err1654 := iprot.ReadByte()
  if err1654 != nil { return thrift.NewTProtocolExceptionReadField(1, "_sceneId", p.ThriftName(), err1654); }
  p._sceneId = v1653
  return err
}

func (p *SetSceneValueUint8Args) ReadField_sceneId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *SetSceneValueUint8Args) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p._valueId = NewRemoteValueID()
  err1657 := p._valueId.Read(iprot)
  if err1657 != nil { return thrift.NewTProtocolExceptionReadStruct("p._valueIdRemoteValueID", err1657); }
  return err
}

func (p *SetSceneValueUint8Args) ReadField_valueId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *SetSceneValueUint8Args) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1658, err1659 := iprot.ReadByte()
  if err1659 != nil { return thrift.NewTProtocolExceptionReadField(3, "_value", p.ThriftName(), err1659); }
  p._value = v1658
  return err
}

func (p *SetSceneValueUint8Args) ReadField_value(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *SetSceneValueUint8Args) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SetSceneValue_Uint8_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SetSceneValueUint8Args) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_sceneId", thrift.BYTE, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._sceneId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  return err
}

func (p *SetSceneValueUint8Args) WriteField_sceneId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *SetSceneValueUint8Args) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._valueId != nil {
    err = oprot.WriteFieldBegin("_valueId", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_valueId", p.ThriftName(), err); }
    err = p._valueId.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RemoteValueID", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_valueId", p.ThriftName(), err); }
  }
  return err
}

func (p *SetSceneValueUint8Args) WriteField_valueId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *SetSceneValueUint8Args) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_value", thrift.BYTE, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_value", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._value))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_value", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_value", p.ThriftName(), err); }
  return err
}

func (p *SetSceneValueUint8Args) WriteField_value(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *SetSceneValueUint8Args) TStructName() string {
  return "SetSceneValueUint8Args"
}

func (p *SetSceneValueUint8Args) ThriftName() string {
  return "SetSceneValue_Uint8_args"
}

func (p *SetSceneValueUint8Args) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetSceneValueUint8Args(%+v)", *p)
}

func (p *SetSceneValueUint8Args) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SetSceneValueUint8Args)
  if !ok {
    return 0, false
  }
  if p._sceneId != data._sceneId {
    if p._sceneId < data._sceneId {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p._valueId.CompareTo(data._valueId); !ok || cmp != 0 {
    return cmp, ok
  }
  if p._value != data._value {
    if p._value < data._value {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *SetSceneValueUint8Args) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._sceneId
  case 2: return p._valueId
  case 3: return p._value
  }
  return nil
}

func (p *SetSceneValueUint8Args) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_sceneId", thrift.BYTE, 1),
    thrift.NewTField("_valueId", thrift.STRUCT, 2),
    thrift.NewTField("_value", thrift.BYTE, 3),
    })
}

/**
 * Attributes:
 *  - Success
 */
type SetSceneValueUint8Result struct {
  thrift.TStruct
  Success bool "success"; // 0
}

func NewSetSceneValueUint8Result() *SetSceneValueUint8Result {
  output := &SetSceneValueUint8Result{
    TStruct:thrift.NewTStruct("SetSceneValue_Uint8_result", []thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    }),
  }
  {
  }
  return output
}

func (p *SetSceneValueUint8Result) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SetSceneValueUint8Result) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1660, err1661 := iprot.ReadBool()
  if err1661 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1661); }
  p.Success = v1660
  return err
}

func (p *SetSceneValueUint8Result) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *SetSceneValueUint8Result) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SetSceneValue_Uint8_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SetSceneValueUint8Result) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BOOL, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *SetSceneValueUint8Result) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *SetSceneValueUint8Result) TStructName() string {
  return "SetSceneValueUint8Result"
}

func (p *SetSceneValueUint8Result) ThriftName() string {
  return "SetSceneValue_Uint8_result"
}

func (p *SetSceneValueUint8Result) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetSceneValueUint8Result(%+v)", *p)
}

func (p *SetSceneValueUint8Result) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SetSceneValueUint8Result)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Success, data.Success); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *SetSceneValueUint8Result) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *SetSceneValueUint8Result) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    })
}

/**
 * Attributes:
 *  - _sceneId
 *  - _valueId
 *  - _value
 */
type SetSceneValueFloatArgs struct {
  thrift.TStruct
  _sceneId byte "_sceneId"; // 1
  _valueId *RemoteValueID "_valueId"; // 2
  _value float64 "_value"; // 3
}

func NewSetSceneValueFloatArgs() *SetSceneValueFloatArgs {
  output := &SetSceneValueFloatArgs{
    TStruct:thrift.NewTStruct("SetSceneValue_Float_args", []thrift.TField{
    thrift.NewTField("_sceneId", thrift.BYTE, 1),
    thrift.NewTField("_valueId", thrift.STRUCT, 2),
    thrift.NewTField("_value", thrift.DOUBLE, 3),
    }),
  }
  {
  }
  return output
}

func (p *SetSceneValueFloatArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_sceneId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_valueId" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "_value" {
      if fieldTypeId == thrift.DOUBLE {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SetSceneValueFloatArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1662, err1663 := iprot.ReadByte()
  if err1663 != nil { return thrift.NewTProtocolExceptionReadField(1, "_sceneId", p.ThriftName(), err1663); }
  p._sceneId = v1662
  return err
}

func (p *SetSceneValueFloatArgs) ReadField_sceneId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *SetSceneValueFloatArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p._valueId = NewRemoteValueID()
  err1666 := p._valueId.Read(iprot)
  if err1666 != nil { return thrift.NewTProtocolExceptionReadStruct("p._valueIdRemoteValueID", err1666); }
  return err
}

func (p *SetSceneValueFloatArgs) ReadField_valueId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *SetSceneValueFloatArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1667, err1668 := iprot.ReadDouble()
  if err1668 != nil { return thrift.NewTProtocolExceptionReadField(3, "_value", p.ThriftName(), err1668); }
  p._value = v1667
  return err
}

func (p *SetSceneValueFloatArgs) ReadField_value(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *SetSceneValueFloatArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SetSceneValue_Float_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SetSceneValueFloatArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_sceneId", thrift.BYTE, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._sceneId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  return err
}

func (p *SetSceneValueFloatArgs) WriteField_sceneId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *SetSceneValueFloatArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._valueId != nil {
    err = oprot.WriteFieldBegin("_valueId", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_valueId", p.ThriftName(), err); }
    err = p._valueId.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RemoteValueID", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_valueId", p.ThriftName(), err); }
  }
  return err
}

func (p *SetSceneValueFloatArgs) WriteField_valueId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *SetSceneValueFloatArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_value", thrift.DOUBLE, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_value", p.ThriftName(), err); }
  err = oprot.WriteDouble(float64(p._value))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_value", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_value", p.ThriftName(), err); }
  return err
}

func (p *SetSceneValueFloatArgs) WriteField_value(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *SetSceneValueFloatArgs) TStructName() string {
  return "SetSceneValueFloatArgs"
}

func (p *SetSceneValueFloatArgs) ThriftName() string {
  return "SetSceneValue_Float_args"
}

func (p *SetSceneValueFloatArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetSceneValueFloatArgs(%+v)", *p)
}

func (p *SetSceneValueFloatArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SetSceneValueFloatArgs)
  if !ok {
    return 0, false
  }
  if p._sceneId != data._sceneId {
    if p._sceneId < data._sceneId {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p._valueId.CompareTo(data._valueId); !ok || cmp != 0 {
    return cmp, ok
  }
  if p._value != data._value {
    if p._value < data._value {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *SetSceneValueFloatArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._sceneId
  case 2: return p._valueId
  case 3: return p._value
  }
  return nil
}

func (p *SetSceneValueFloatArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_sceneId", thrift.BYTE, 1),
    thrift.NewTField("_valueId", thrift.STRUCT, 2),
    thrift.NewTField("_value", thrift.DOUBLE, 3),
    })
}

/**
 * Attributes:
 *  - Success
 */
type SetSceneValueFloatResult struct {
  thrift.TStruct
  Success bool "success"; // 0
}

func NewSetSceneValueFloatResult() *SetSceneValueFloatResult {
  output := &SetSceneValueFloatResult{
    TStruct:thrift.NewTStruct("SetSceneValue_Float_result", []thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    }),
  }
  {
  }
  return output
}

func (p *SetSceneValueFloatResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SetSceneValueFloatResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1669, err1670 := iprot.ReadBool()
  if err1670 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1670); }
  p.Success = v1669
  return err
}

func (p *SetSceneValueFloatResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *SetSceneValueFloatResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SetSceneValue_Float_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SetSceneValueFloatResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BOOL, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *SetSceneValueFloatResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *SetSceneValueFloatResult) TStructName() string {
  return "SetSceneValueFloatResult"
}

func (p *SetSceneValueFloatResult) ThriftName() string {
  return "SetSceneValue_Float_result"
}

func (p *SetSceneValueFloatResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetSceneValueFloatResult(%+v)", *p)
}

func (p *SetSceneValueFloatResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SetSceneValueFloatResult)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Success, data.Success); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *SetSceneValueFloatResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *SetSceneValueFloatResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    })
}

/**
 * Attributes:
 *  - _sceneId
 *  - _valueId
 *  - _value
 */
type SetSceneValueInt32Args struct {
  thrift.TStruct
  _sceneId byte "_sceneId"; // 1
  _valueId *RemoteValueID "_valueId"; // 2
  _value int32 "_value"; // 3
}

func NewSetSceneValueInt32Args() *SetSceneValueInt32Args {
  output := &SetSceneValueInt32Args{
    TStruct:thrift.NewTStruct("SetSceneValue_Int32_args", []thrift.TField{
    thrift.NewTField("_sceneId", thrift.BYTE, 1),
    thrift.NewTField("_valueId", thrift.STRUCT, 2),
    thrift.NewTField("_value", thrift.I32, 3),
    }),
  }
  {
  }
  return output
}

func (p *SetSceneValueInt32Args) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_sceneId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_valueId" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "_value" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SetSceneValueInt32Args) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1671, err1672 := iprot.ReadByte()
  if err1672 != nil { return thrift.NewTProtocolExceptionReadField(1, "_sceneId", p.ThriftName(), err1672); }
  p._sceneId = v1671
  return err
}

func (p *SetSceneValueInt32Args) ReadField_sceneId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *SetSceneValueInt32Args) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p._valueId = NewRemoteValueID()
  err1675 := p._valueId.Read(iprot)
  if err1675 != nil { return thrift.NewTProtocolExceptionReadStruct("p._valueIdRemoteValueID", err1675); }
  return err
}

func (p *SetSceneValueInt32Args) ReadField_valueId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *SetSceneValueInt32Args) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1676, err1677 := iprot.ReadI32()
  if err1677 != nil { return thrift.NewTProtocolExceptionReadField(3, "_value", p.ThriftName(), err1677); }
  p._value = v1676
  return err
}

func (p *SetSceneValueInt32Args) ReadField_value(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *SetSceneValueInt32Args) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SetSceneValue_Int32_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SetSceneValueInt32Args) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_sceneId", thrift.BYTE, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._sceneId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  return err
}

func (p *SetSceneValueInt32Args) WriteField_sceneId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *SetSceneValueInt32Args) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._valueId != nil {
    err = oprot.WriteFieldBegin("_valueId", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_valueId", p.ThriftName(), err); }
    err = p._valueId.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RemoteValueID", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_valueId", p.ThriftName(), err); }
  }
  return err
}

func (p *SetSceneValueInt32Args) WriteField_valueId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *SetSceneValueInt32Args) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_value", thrift.I32, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_value", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._value))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_value", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_value", p.ThriftName(), err); }
  return err
}

func (p *SetSceneValueInt32Args) WriteField_value(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *SetSceneValueInt32Args) TStructName() string {
  return "SetSceneValueInt32Args"
}

func (p *SetSceneValueInt32Args) ThriftName() string {
  return "SetSceneValue_Int32_args"
}

func (p *SetSceneValueInt32Args) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetSceneValueInt32Args(%+v)", *p)
}

func (p *SetSceneValueInt32Args) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SetSceneValueInt32Args)
  if !ok {
    return 0, false
  }
  if p._sceneId != data._sceneId {
    if p._sceneId < data._sceneId {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p._valueId.CompareTo(data._valueId); !ok || cmp != 0 {
    return cmp, ok
  }
  if p._value != data._value {
    if p._value < data._value {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *SetSceneValueInt32Args) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._sceneId
  case 2: return p._valueId
  case 3: return p._value
  }
  return nil
}

func (p *SetSceneValueInt32Args) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_sceneId", thrift.BYTE, 1),
    thrift.NewTField("_valueId", thrift.STRUCT, 2),
    thrift.NewTField("_value", thrift.I32, 3),
    })
}

/**
 * Attributes:
 *  - Success
 */
type SetSceneValueInt32Result struct {
  thrift.TStruct
  Success bool "success"; // 0
}

func NewSetSceneValueInt32Result() *SetSceneValueInt32Result {
  output := &SetSceneValueInt32Result{
    TStruct:thrift.NewTStruct("SetSceneValue_Int32_result", []thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    }),
  }
  {
  }
  return output
}

func (p *SetSceneValueInt32Result) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SetSceneValueInt32Result) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1678, err1679 := iprot.ReadBool()
  if err1679 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1679); }
  p.Success = v1678
  return err
}

func (p *SetSceneValueInt32Result) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *SetSceneValueInt32Result) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SetSceneValue_Int32_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SetSceneValueInt32Result) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BOOL, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *SetSceneValueInt32Result) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *SetSceneValueInt32Result) TStructName() string {
  return "SetSceneValueInt32Result"
}

func (p *SetSceneValueInt32Result) ThriftName() string {
  return "SetSceneValue_Int32_result"
}

func (p *SetSceneValueInt32Result) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetSceneValueInt32Result(%+v)", *p)
}

func (p *SetSceneValueInt32Result) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SetSceneValueInt32Result)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Success, data.Success); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *SetSceneValueInt32Result) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *SetSceneValueInt32Result) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    })
}

/**
 * Attributes:
 *  - _sceneId
 *  - _valueId
 *  - _value
 */
type SetSceneValueInt16Args struct {
  thrift.TStruct
  _sceneId byte "_sceneId"; // 1
  _valueId *RemoteValueID "_valueId"; // 2
  _value int16 "_value"; // 3
}

func NewSetSceneValueInt16Args() *SetSceneValueInt16Args {
  output := &SetSceneValueInt16Args{
    TStruct:thrift.NewTStruct("SetSceneValue_Int16_args", []thrift.TField{
    thrift.NewTField("_sceneId", thrift.BYTE, 1),
    thrift.NewTField("_valueId", thrift.STRUCT, 2),
    thrift.NewTField("_value", thrift.I16, 3),
    }),
  }
  {
  }
  return output
}

func (p *SetSceneValueInt16Args) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_sceneId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_valueId" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "_value" {
      if fieldTypeId == thrift.I16 {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SetSceneValueInt16Args) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1680, err1681 := iprot.ReadByte()
  if err1681 != nil { return thrift.NewTProtocolExceptionReadField(1, "_sceneId", p.ThriftName(), err1681); }
  p._sceneId = v1680
  return err
}

func (p *SetSceneValueInt16Args) ReadField_sceneId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *SetSceneValueInt16Args) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p._valueId = NewRemoteValueID()
  err1684 := p._valueId.Read(iprot)
  if err1684 != nil { return thrift.NewTProtocolExceptionReadStruct("p._valueIdRemoteValueID", err1684); }
  return err
}

func (p *SetSceneValueInt16Args) ReadField_valueId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *SetSceneValueInt16Args) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1685, err1686 := iprot.ReadI16()
  if err1686 != nil { return thrift.NewTProtocolExceptionReadField(3, "_value", p.ThriftName(), err1686); }
  p._value = v1685
  return err
}

func (p *SetSceneValueInt16Args) ReadField_value(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *SetSceneValueInt16Args) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SetSceneValue_Int16_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SetSceneValueInt16Args) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_sceneId", thrift.BYTE, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._sceneId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  return err
}

func (p *SetSceneValueInt16Args) WriteField_sceneId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *SetSceneValueInt16Args) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._valueId != nil {
    err = oprot.WriteFieldBegin("_valueId", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_valueId", p.ThriftName(), err); }
    err = p._valueId.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RemoteValueID", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_valueId", p.ThriftName(), err); }
  }
  return err
}

func (p *SetSceneValueInt16Args) WriteField_valueId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *SetSceneValueInt16Args) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_value", thrift.I16, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_value", p.ThriftName(), err); }
  err = oprot.WriteI16(int16(p._value))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_value", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_value", p.ThriftName(), err); }
  return err
}

func (p *SetSceneValueInt16Args) WriteField_value(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *SetSceneValueInt16Args) TStructName() string {
  return "SetSceneValueInt16Args"
}

func (p *SetSceneValueInt16Args) ThriftName() string {
  return "SetSceneValue_Int16_args"
}

func (p *SetSceneValueInt16Args) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetSceneValueInt16Args(%+v)", *p)
}

func (p *SetSceneValueInt16Args) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SetSceneValueInt16Args)
  if !ok {
    return 0, false
  }
  if p._sceneId != data._sceneId {
    if p._sceneId < data._sceneId {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p._valueId.CompareTo(data._valueId); !ok || cmp != 0 {
    return cmp, ok
  }
  if p._value != data._value {
    if p._value < data._value {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *SetSceneValueInt16Args) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._sceneId
  case 2: return p._valueId
  case 3: return p._value
  }
  return nil
}

func (p *SetSceneValueInt16Args) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_sceneId", thrift.BYTE, 1),
    thrift.NewTField("_valueId", thrift.STRUCT, 2),
    thrift.NewTField("_value", thrift.I16, 3),
    })
}

/**
 * Attributes:
 *  - Success
 */
type SetSceneValueInt16Result struct {
  thrift.TStruct
  Success bool "success"; // 0
}

func NewSetSceneValueInt16Result() *SetSceneValueInt16Result {
  output := &SetSceneValueInt16Result{
    TStruct:thrift.NewTStruct("SetSceneValue_Int16_result", []thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    }),
  }
  {
  }
  return output
}

func (p *SetSceneValueInt16Result) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SetSceneValueInt16Result) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1687, err1688 := iprot.ReadBool()
  if err1688 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1688); }
  p.Success = v1687
  return err
}

func (p *SetSceneValueInt16Result) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *SetSceneValueInt16Result) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SetSceneValue_Int16_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SetSceneValueInt16Result) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BOOL, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *SetSceneValueInt16Result) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *SetSceneValueInt16Result) TStructName() string {
  return "SetSceneValueInt16Result"
}

func (p *SetSceneValueInt16Result) ThriftName() string {
  return "SetSceneValue_Int16_result"
}

func (p *SetSceneValueInt16Result) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetSceneValueInt16Result(%+v)", *p)
}

func (p *SetSceneValueInt16Result) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SetSceneValueInt16Result)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Success, data.Success); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *SetSceneValueInt16Result) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *SetSceneValueInt16Result) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    })
}

/**
 * Attributes:
 *  - _sceneId
 *  - _valueId
 *  - _value
 */
type SetSceneValueStringArgs struct {
  thrift.TStruct
  _sceneId byte "_sceneId"; // 1
  _valueId *RemoteValueID "_valueId"; // 2
  _value string "_value"; // 3
}

func NewSetSceneValueStringArgs() *SetSceneValueStringArgs {
  output := &SetSceneValueStringArgs{
    TStruct:thrift.NewTStruct("SetSceneValue_String_args", []thrift.TField{
    thrift.NewTField("_sceneId", thrift.BYTE, 1),
    thrift.NewTField("_valueId", thrift.STRUCT, 2),
    thrift.NewTField("_value", thrift.STRING, 3),
    }),
  }
  {
  }
  return output
}

func (p *SetSceneValueStringArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_sceneId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_valueId" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "_value" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SetSceneValueStringArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1689, err1690 := iprot.ReadByte()
  if err1690 != nil { return thrift.NewTProtocolExceptionReadField(1, "_sceneId", p.ThriftName(), err1690); }
  p._sceneId = v1689
  return err
}

func (p *SetSceneValueStringArgs) ReadField_sceneId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *SetSceneValueStringArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p._valueId = NewRemoteValueID()
  err1693 := p._valueId.Read(iprot)
  if err1693 != nil { return thrift.NewTProtocolExceptionReadStruct("p._valueIdRemoteValueID", err1693); }
  return err
}

func (p *SetSceneValueStringArgs) ReadField_valueId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *SetSceneValueStringArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1694, err1695 := iprot.ReadString()
  if err1695 != nil { return thrift.NewTProtocolExceptionReadField(3, "_value", p.ThriftName(), err1695); }
  p._value = v1694
  return err
}

func (p *SetSceneValueStringArgs) ReadField_value(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *SetSceneValueStringArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SetSceneValue_String_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SetSceneValueStringArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_sceneId", thrift.BYTE, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._sceneId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  return err
}

func (p *SetSceneValueStringArgs) WriteField_sceneId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *SetSceneValueStringArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._valueId != nil {
    err = oprot.WriteFieldBegin("_valueId", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_valueId", p.ThriftName(), err); }
    err = p._valueId.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RemoteValueID", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_valueId", p.ThriftName(), err); }
  }
  return err
}

func (p *SetSceneValueStringArgs) WriteField_valueId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *SetSceneValueStringArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_value", thrift.STRING, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_value", p.ThriftName(), err); }
  err = oprot.WriteString(string(p._value))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_value", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_value", p.ThriftName(), err); }
  return err
}

func (p *SetSceneValueStringArgs) WriteField_value(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *SetSceneValueStringArgs) TStructName() string {
  return "SetSceneValueStringArgs"
}

func (p *SetSceneValueStringArgs) ThriftName() string {
  return "SetSceneValue_String_args"
}

func (p *SetSceneValueStringArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetSceneValueStringArgs(%+v)", *p)
}

func (p *SetSceneValueStringArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SetSceneValueStringArgs)
  if !ok {
    return 0, false
  }
  if p._sceneId != data._sceneId {
    if p._sceneId < data._sceneId {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p._valueId.CompareTo(data._valueId); !ok || cmp != 0 {
    return cmp, ok
  }
  if p._value != data._value {
    if p._value < data._value {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *SetSceneValueStringArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._sceneId
  case 2: return p._valueId
  case 3: return p._value
  }
  return nil
}

func (p *SetSceneValueStringArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_sceneId", thrift.BYTE, 1),
    thrift.NewTField("_valueId", thrift.STRUCT, 2),
    thrift.NewTField("_value", thrift.STRING, 3),
    })
}

/**
 * Attributes:
 *  - Success
 */
type SetSceneValueStringResult struct {
  thrift.TStruct
  Success bool "success"; // 0
}

func NewSetSceneValueStringResult() *SetSceneValueStringResult {
  output := &SetSceneValueStringResult{
    TStruct:thrift.NewTStruct("SetSceneValue_String_result", []thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    }),
  }
  {
  }
  return output
}

func (p *SetSceneValueStringResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SetSceneValueStringResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1696, err1697 := iprot.ReadBool()
  if err1697 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1697); }
  p.Success = v1696
  return err
}

func (p *SetSceneValueStringResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *SetSceneValueStringResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SetSceneValue_String_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SetSceneValueStringResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BOOL, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *SetSceneValueStringResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *SetSceneValueStringResult) TStructName() string {
  return "SetSceneValueStringResult"
}

func (p *SetSceneValueStringResult) ThriftName() string {
  return "SetSceneValue_String_result"
}

func (p *SetSceneValueStringResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetSceneValueStringResult(%+v)", *p)
}

func (p *SetSceneValueStringResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SetSceneValueStringResult)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Success, data.Success); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *SetSceneValueStringResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *SetSceneValueStringResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    })
}

/**
 * Attributes:
 *  - _sceneId
 *  - _valueId
 *  - _value
 */
type SetSceneValueListSelectionStringArgs struct {
  thrift.TStruct
  _sceneId byte "_sceneId"; // 1
  _valueId *RemoteValueID "_valueId"; // 2
  _value string "_value"; // 3
}

func NewSetSceneValueListSelectionStringArgs() *SetSceneValueListSelectionStringArgs {
  output := &SetSceneValueListSelectionStringArgs{
    TStruct:thrift.NewTStruct("SetSceneValueListSelection_String_args", []thrift.TField{
    thrift.NewTField("_sceneId", thrift.BYTE, 1),
    thrift.NewTField("_valueId", thrift.STRUCT, 2),
    thrift.NewTField("_value", thrift.STRING, 3),
    }),
  }
  {
  }
  return output
}

func (p *SetSceneValueListSelectionStringArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_sceneId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_valueId" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "_value" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SetSceneValueListSelectionStringArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1698, err1699 := iprot.ReadByte()
  if err1699 != nil { return thrift.NewTProtocolExceptionReadField(1, "_sceneId", p.ThriftName(), err1699); }
  p._sceneId = v1698
  return err
}

func (p *SetSceneValueListSelectionStringArgs) ReadField_sceneId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *SetSceneValueListSelectionStringArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p._valueId = NewRemoteValueID()
  err1702 := p._valueId.Read(iprot)
  if err1702 != nil { return thrift.NewTProtocolExceptionReadStruct("p._valueIdRemoteValueID", err1702); }
  return err
}

func (p *SetSceneValueListSelectionStringArgs) ReadField_valueId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *SetSceneValueListSelectionStringArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1703, err1704 := iprot.ReadString()
  if err1704 != nil { return thrift.NewTProtocolExceptionReadField(3, "_value", p.ThriftName(), err1704); }
  p._value = v1703
  return err
}

func (p *SetSceneValueListSelectionStringArgs) ReadField_value(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *SetSceneValueListSelectionStringArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SetSceneValueListSelection_String_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SetSceneValueListSelectionStringArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_sceneId", thrift.BYTE, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._sceneId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  return err
}

func (p *SetSceneValueListSelectionStringArgs) WriteField_sceneId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *SetSceneValueListSelectionStringArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._valueId != nil {
    err = oprot.WriteFieldBegin("_valueId", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_valueId", p.ThriftName(), err); }
    err = p._valueId.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RemoteValueID", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_valueId", p.ThriftName(), err); }
  }
  return err
}

func (p *SetSceneValueListSelectionStringArgs) WriteField_valueId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *SetSceneValueListSelectionStringArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_value", thrift.STRING, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_value", p.ThriftName(), err); }
  err = oprot.WriteString(string(p._value))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_value", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_value", p.ThriftName(), err); }
  return err
}

func (p *SetSceneValueListSelectionStringArgs) WriteField_value(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *SetSceneValueListSelectionStringArgs) TStructName() string {
  return "SetSceneValueListSelectionStringArgs"
}

func (p *SetSceneValueListSelectionStringArgs) ThriftName() string {
  return "SetSceneValueListSelection_String_args"
}

func (p *SetSceneValueListSelectionStringArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetSceneValueListSelectionStringArgs(%+v)", *p)
}

func (p *SetSceneValueListSelectionStringArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SetSceneValueListSelectionStringArgs)
  if !ok {
    return 0, false
  }
  if p._sceneId != data._sceneId {
    if p._sceneId < data._sceneId {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p._valueId.CompareTo(data._valueId); !ok || cmp != 0 {
    return cmp, ok
  }
  if p._value != data._value {
    if p._value < data._value {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *SetSceneValueListSelectionStringArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._sceneId
  case 2: return p._valueId
  case 3: return p._value
  }
  return nil
}

func (p *SetSceneValueListSelectionStringArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_sceneId", thrift.BYTE, 1),
    thrift.NewTField("_valueId", thrift.STRUCT, 2),
    thrift.NewTField("_value", thrift.STRING, 3),
    })
}

/**
 * Attributes:
 *  - Success
 */
type SetSceneValueListSelectionStringResult struct {
  thrift.TStruct
  Success bool "success"; // 0
}

func NewSetSceneValueListSelectionStringResult() *SetSceneValueListSelectionStringResult {
  output := &SetSceneValueListSelectionStringResult{
    TStruct:thrift.NewTStruct("SetSceneValueListSelection_String_result", []thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    }),
  }
  {
  }
  return output
}

func (p *SetSceneValueListSelectionStringResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SetSceneValueListSelectionStringResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1705, err1706 := iprot.ReadBool()
  if err1706 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1706); }
  p.Success = v1705
  return err
}

func (p *SetSceneValueListSelectionStringResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *SetSceneValueListSelectionStringResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SetSceneValueListSelection_String_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SetSceneValueListSelectionStringResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BOOL, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *SetSceneValueListSelectionStringResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *SetSceneValueListSelectionStringResult) TStructName() string {
  return "SetSceneValueListSelectionStringResult"
}

func (p *SetSceneValueListSelectionStringResult) ThriftName() string {
  return "SetSceneValueListSelection_String_result"
}

func (p *SetSceneValueListSelectionStringResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetSceneValueListSelectionStringResult(%+v)", *p)
}

func (p *SetSceneValueListSelectionStringResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SetSceneValueListSelectionStringResult)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Success, data.Success); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *SetSceneValueListSelectionStringResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *SetSceneValueListSelectionStringResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    })
}

/**
 * Attributes:
 *  - _sceneId
 *  - _valueId
 *  - _value
 */
type SetSceneValueListSelectionInt32Args struct {
  thrift.TStruct
  _sceneId byte "_sceneId"; // 1
  _valueId *RemoteValueID "_valueId"; // 2
  _value int32 "_value"; // 3
}

func NewSetSceneValueListSelectionInt32Args() *SetSceneValueListSelectionInt32Args {
  output := &SetSceneValueListSelectionInt32Args{
    TStruct:thrift.NewTStruct("SetSceneValueListSelection_Int32_args", []thrift.TField{
    thrift.NewTField("_sceneId", thrift.BYTE, 1),
    thrift.NewTField("_valueId", thrift.STRUCT, 2),
    thrift.NewTField("_value", thrift.I32, 3),
    }),
  }
  {
  }
  return output
}

func (p *SetSceneValueListSelectionInt32Args) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_sceneId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_valueId" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "_value" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SetSceneValueListSelectionInt32Args) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1707, err1708 := iprot.ReadByte()
  if err1708 != nil { return thrift.NewTProtocolExceptionReadField(1, "_sceneId", p.ThriftName(), err1708); }
  p._sceneId = v1707
  return err
}

func (p *SetSceneValueListSelectionInt32Args) ReadField_sceneId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *SetSceneValueListSelectionInt32Args) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p._valueId = NewRemoteValueID()
  err1711 := p._valueId.Read(iprot)
  if err1711 != nil { return thrift.NewTProtocolExceptionReadStruct("p._valueIdRemoteValueID", err1711); }
  return err
}

func (p *SetSceneValueListSelectionInt32Args) ReadField_valueId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *SetSceneValueListSelectionInt32Args) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1712, err1713 := iprot.ReadI32()
  if err1713 != nil { return thrift.NewTProtocolExceptionReadField(3, "_value", p.ThriftName(), err1713); }
  p._value = v1712
  return err
}

func (p *SetSceneValueListSelectionInt32Args) ReadField_value(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *SetSceneValueListSelectionInt32Args) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SetSceneValueListSelection_Int32_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SetSceneValueListSelectionInt32Args) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_sceneId", thrift.BYTE, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._sceneId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  return err
}

func (p *SetSceneValueListSelectionInt32Args) WriteField_sceneId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *SetSceneValueListSelectionInt32Args) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._valueId != nil {
    err = oprot.WriteFieldBegin("_valueId", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_valueId", p.ThriftName(), err); }
    err = p._valueId.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RemoteValueID", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_valueId", p.ThriftName(), err); }
  }
  return err
}

func (p *SetSceneValueListSelectionInt32Args) WriteField_valueId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *SetSceneValueListSelectionInt32Args) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_value", thrift.I32, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_value", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._value))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_value", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_value", p.ThriftName(), err); }
  return err
}

func (p *SetSceneValueListSelectionInt32Args) WriteField_value(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *SetSceneValueListSelectionInt32Args) TStructName() string {
  return "SetSceneValueListSelectionInt32Args"
}

func (p *SetSceneValueListSelectionInt32Args) ThriftName() string {
  return "SetSceneValueListSelection_Int32_args"
}

func (p *SetSceneValueListSelectionInt32Args) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetSceneValueListSelectionInt32Args(%+v)", *p)
}

func (p *SetSceneValueListSelectionInt32Args) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SetSceneValueListSelectionInt32Args)
  if !ok {
    return 0, false
  }
  if p._sceneId != data._sceneId {
    if p._sceneId < data._sceneId {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p._valueId.CompareTo(data._valueId); !ok || cmp != 0 {
    return cmp, ok
  }
  if p._value != data._value {
    if p._value < data._value {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *SetSceneValueListSelectionInt32Args) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._sceneId
  case 2: return p._valueId
  case 3: return p._value
  }
  return nil
}

func (p *SetSceneValueListSelectionInt32Args) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_sceneId", thrift.BYTE, 1),
    thrift.NewTField("_valueId", thrift.STRUCT, 2),
    thrift.NewTField("_value", thrift.I32, 3),
    })
}

/**
 * Attributes:
 *  - Success
 */
type SetSceneValueListSelectionInt32Result struct {
  thrift.TStruct
  Success bool "success"; // 0
}

func NewSetSceneValueListSelectionInt32Result() *SetSceneValueListSelectionInt32Result {
  output := &SetSceneValueListSelectionInt32Result{
    TStruct:thrift.NewTStruct("SetSceneValueListSelection_Int32_result", []thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    }),
  }
  {
  }
  return output
}

func (p *SetSceneValueListSelectionInt32Result) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SetSceneValueListSelectionInt32Result) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1714, err1715 := iprot.ReadBool()
  if err1715 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1715); }
  p.Success = v1714
  return err
}

func (p *SetSceneValueListSelectionInt32Result) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *SetSceneValueListSelectionInt32Result) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SetSceneValueListSelection_Int32_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SetSceneValueListSelectionInt32Result) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BOOL, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *SetSceneValueListSelectionInt32Result) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *SetSceneValueListSelectionInt32Result) TStructName() string {
  return "SetSceneValueListSelectionInt32Result"
}

func (p *SetSceneValueListSelectionInt32Result) ThriftName() string {
  return "SetSceneValueListSelection_Int32_result"
}

func (p *SetSceneValueListSelectionInt32Result) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetSceneValueListSelectionInt32Result(%+v)", *p)
}

func (p *SetSceneValueListSelectionInt32Result) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SetSceneValueListSelectionInt32Result)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Success, data.Success); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *SetSceneValueListSelectionInt32Result) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *SetSceneValueListSelectionInt32Result) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    })
}

/**
 * Attributes:
 *  - _sceneId
 */
type GetSceneLabelArgs struct {
  thrift.TStruct
  _sceneId byte "_sceneId"; // 1
}

func NewGetSceneLabelArgs() *GetSceneLabelArgs {
  output := &GetSceneLabelArgs{
    TStruct:thrift.NewTStruct("GetSceneLabel_args", []thrift.TField{
    thrift.NewTField("_sceneId", thrift.BYTE, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetSceneLabelArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_sceneId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetSceneLabelArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1716, err1717 := iprot.ReadByte()
  if err1717 != nil { return thrift.NewTProtocolExceptionReadField(1, "_sceneId", p.ThriftName(), err1717); }
  p._sceneId = v1716
  return err
}

func (p *GetSceneLabelArgs) ReadField_sceneId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetSceneLabelArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetSceneLabel_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetSceneLabelArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_sceneId", thrift.BYTE, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._sceneId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  return err
}

func (p *GetSceneLabelArgs) WriteField_sceneId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetSceneLabelArgs) TStructName() string {
  return "GetSceneLabelArgs"
}

func (p *GetSceneLabelArgs) ThriftName() string {
  return "GetSceneLabel_args"
}

func (p *GetSceneLabelArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetSceneLabelArgs(%+v)", *p)
}

func (p *GetSceneLabelArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetSceneLabelArgs)
  if !ok {
    return 0, false
  }
  if p._sceneId != data._sceneId {
    if p._sceneId < data._sceneId {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetSceneLabelArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._sceneId
  }
  return nil
}

func (p *GetSceneLabelArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_sceneId", thrift.BYTE, 1),
    })
}

/**
 * Attributes:
 *  - Success
 */
type GetSceneLabelResult struct {
  thrift.TStruct
  Success string "success"; // 0
}

func NewGetSceneLabelResult() *GetSceneLabelResult {
  output := &GetSceneLabelResult{
    TStruct:thrift.NewTStruct("GetSceneLabel_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRING, 0),
    }),
  }
  {
  }
  return output
}

func (p *GetSceneLabelResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetSceneLabelResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1718, err1719 := iprot.ReadString()
  if err1719 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1719); }
  p.Success = v1718
  return err
}

func (p *GetSceneLabelResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetSceneLabelResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetSceneLabel_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetSceneLabelResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.STRING, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *GetSceneLabelResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetSceneLabelResult) TStructName() string {
  return "GetSceneLabelResult"
}

func (p *GetSceneLabelResult) ThriftName() string {
  return "GetSceneLabel_result"
}

func (p *GetSceneLabelResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetSceneLabelResult(%+v)", *p)
}

func (p *GetSceneLabelResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetSceneLabelResult)
  if !ok {
    return 0, false
  }
  if p.Success != data.Success {
    if p.Success < data.Success {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetSceneLabelResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *GetSceneLabelResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRING, 0),
    })
}

/**
 * Attributes:
 *  - _sceneId
 *  - _value
 */
type SetSceneLabelArgs struct {
  thrift.TStruct
  _sceneId byte "_sceneId"; // 1
  _value string "_value"; // 2
}

func NewSetSceneLabelArgs() *SetSceneLabelArgs {
  output := &SetSceneLabelArgs{
    TStruct:thrift.NewTStruct("SetSceneLabel_args", []thrift.TField{
    thrift.NewTField("_sceneId", thrift.BYTE, 1),
    thrift.NewTField("_value", thrift.STRING, 2),
    }),
  }
  {
  }
  return output
}

func (p *SetSceneLabelArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_sceneId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_value" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SetSceneLabelArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1720, err1721 := iprot.ReadByte()
  if err1721 != nil { return thrift.NewTProtocolExceptionReadField(1, "_sceneId", p.ThriftName(), err1721); }
  p._sceneId = v1720
  return err
}

func (p *SetSceneLabelArgs) ReadField_sceneId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *SetSceneLabelArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1722, err1723 := iprot.ReadString()
  if err1723 != nil { return thrift.NewTProtocolExceptionReadField(2, "_value", p.ThriftName(), err1723); }
  p._value = v1722
  return err
}

func (p *SetSceneLabelArgs) ReadField_value(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *SetSceneLabelArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SetSceneLabel_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SetSceneLabelArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_sceneId", thrift.BYTE, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._sceneId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  return err
}

func (p *SetSceneLabelArgs) WriteField_sceneId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *SetSceneLabelArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_value", thrift.STRING, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_value", p.ThriftName(), err); }
  err = oprot.WriteString(string(p._value))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_value", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_value", p.ThriftName(), err); }
  return err
}

func (p *SetSceneLabelArgs) WriteField_value(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *SetSceneLabelArgs) TStructName() string {
  return "SetSceneLabelArgs"
}

func (p *SetSceneLabelArgs) ThriftName() string {
  return "SetSceneLabel_args"
}

func (p *SetSceneLabelArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetSceneLabelArgs(%+v)", *p)
}

func (p *SetSceneLabelArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SetSceneLabelArgs)
  if !ok {
    return 0, false
  }
  if p._sceneId != data._sceneId {
    if p._sceneId < data._sceneId {
      return -1, true
    }
    return 1, true
  }
  if p._value != data._value {
    if p._value < data._value {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *SetSceneLabelArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._sceneId
  case 2: return p._value
  }
  return nil
}

func (p *SetSceneLabelArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_sceneId", thrift.BYTE, 1),
    thrift.NewTField("_value", thrift.STRING, 2),
    })
}

type SetSceneLabelResult struct {
  thrift.TStruct
}

func NewSetSceneLabelResult() *SetSceneLabelResult {
  output := &SetSceneLabelResult{
    TStruct:thrift.NewTStruct("SetSceneLabel_result", []thrift.TField{
    }),
  }
  {
  }
  return output
}

func (p *SetSceneLabelResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    err = iprot.Skip(fieldTypeId)
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SetSceneLabelResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SetSceneLabel_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SetSceneLabelResult) TStructName() string {
  return "SetSceneLabelResult"
}

func (p *SetSceneLabelResult) ThriftName() string {
  return "SetSceneLabel_result"
}

func (p *SetSceneLabelResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetSceneLabelResult(%+v)", *p)
}

func (p *SetSceneLabelResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  _, ok := other.(*SetSceneLabelResult)
  if !ok {
    return 0, false
  }
  return 0, true
}

func (p *SetSceneLabelResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  }
  return nil
}

func (p *SetSceneLabelResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    })
}

/**
 * Attributes:
 *  - _sceneId
 */
type SceneExistsArgs struct {
  thrift.TStruct
  _sceneId byte "_sceneId"; // 1
}

func NewSceneExistsArgs() *SceneExistsArgs {
  output := &SceneExistsArgs{
    TStruct:thrift.NewTStruct("SceneExists_args", []thrift.TField{
    thrift.NewTField("_sceneId", thrift.BYTE, 1),
    }),
  }
  {
  }
  return output
}

func (p *SceneExistsArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_sceneId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SceneExistsArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1724, err1725 := iprot.ReadByte()
  if err1725 != nil { return thrift.NewTProtocolExceptionReadField(1, "_sceneId", p.ThriftName(), err1725); }
  p._sceneId = v1724
  return err
}

func (p *SceneExistsArgs) ReadField_sceneId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *SceneExistsArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SceneExists_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SceneExistsArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_sceneId", thrift.BYTE, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._sceneId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  return err
}

func (p *SceneExistsArgs) WriteField_sceneId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *SceneExistsArgs) TStructName() string {
  return "SceneExistsArgs"
}

func (p *SceneExistsArgs) ThriftName() string {
  return "SceneExists_args"
}

func (p *SceneExistsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SceneExistsArgs(%+v)", *p)
}

func (p *SceneExistsArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SceneExistsArgs)
  if !ok {
    return 0, false
  }
  if p._sceneId != data._sceneId {
    if p._sceneId < data._sceneId {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *SceneExistsArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._sceneId
  }
  return nil
}

func (p *SceneExistsArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_sceneId", thrift.BYTE, 1),
    })
}

/**
 * Attributes:
 *  - Success
 */
type SceneExistsResult struct {
  thrift.TStruct
  Success bool "success"; // 0
}

func NewSceneExistsResult() *SceneExistsResult {
  output := &SceneExistsResult{
    TStruct:thrift.NewTStruct("SceneExists_result", []thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    }),
  }
  {
  }
  return output
}

func (p *SceneExistsResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SceneExistsResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1726, err1727 := iprot.ReadBool()
  if err1727 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1727); }
  p.Success = v1726
  return err
}

func (p *SceneExistsResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *SceneExistsResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SceneExists_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SceneExistsResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BOOL, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *SceneExistsResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *SceneExistsResult) TStructName() string {
  return "SceneExistsResult"
}

func (p *SceneExistsResult) ThriftName() string {
  return "SceneExists_result"
}

func (p *SceneExistsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SceneExistsResult(%+v)", *p)
}

func (p *SceneExistsResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SceneExistsResult)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Success, data.Success); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *SceneExistsResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *SceneExistsResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    })
}

/**
 * Attributes:
 *  - _sceneId
 */
type ActivateSceneArgs struct {
  thrift.TStruct
  _sceneId byte "_sceneId"; // 1
}

func NewActivateSceneArgs() *ActivateSceneArgs {
  output := &ActivateSceneArgs{
    TStruct:thrift.NewTStruct("ActivateScene_args", []thrift.TField{
    thrift.NewTField("_sceneId", thrift.BYTE, 1),
    }),
  }
  {
  }
  return output
}

func (p *ActivateSceneArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_sceneId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *ActivateSceneArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1728, err1729 := iprot.ReadByte()
  if err1729 != nil { return thrift.NewTProtocolExceptionReadField(1, "_sceneId", p.ThriftName(), err1729); }
  p._sceneId = v1728
  return err
}

func (p *ActivateSceneArgs) ReadField_sceneId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *ActivateSceneArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("ActivateScene_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *ActivateSceneArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_sceneId", thrift.BYTE, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._sceneId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  return err
}

func (p *ActivateSceneArgs) WriteField_sceneId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *ActivateSceneArgs) TStructName() string {
  return "ActivateSceneArgs"
}

func (p *ActivateSceneArgs) ThriftName() string {
  return "ActivateScene_args"
}

func (p *ActivateSceneArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ActivateSceneArgs(%+v)", *p)
}

func (p *ActivateSceneArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*ActivateSceneArgs)
  if !ok {
    return 0, false
  }
  if p._sceneId != data._sceneId {
    if p._sceneId < data._sceneId {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *ActivateSceneArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._sceneId
  }
  return nil
}

func (p *ActivateSceneArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_sceneId", thrift.BYTE, 1),
    })
}

/**
 * Attributes:
 *  - Success
 */
type ActivateSceneResult struct {
  thrift.TStruct
  Success bool "success"; // 0
}

func NewActivateSceneResult() *ActivateSceneResult {
  output := &ActivateSceneResult{
    TStruct:thrift.NewTStruct("ActivateScene_result", []thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    }),
  }
  {
  }
  return output
}

func (p *ActivateSceneResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *ActivateSceneResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1730, err1731 := iprot.ReadBool()
  if err1731 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1731); }
  p.Success = v1730
  return err
}

func (p *ActivateSceneResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *ActivateSceneResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("ActivateScene_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *ActivateSceneResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BOOL, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *ActivateSceneResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *ActivateSceneResult) TStructName() string {
  return "ActivateSceneResult"
}

func (p *ActivateSceneResult) ThriftName() string {
  return "ActivateScene_result"
}

func (p *ActivateSceneResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ActivateSceneResult(%+v)", *p)
}

func (p *ActivateSceneResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*ActivateSceneResult)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Success, data.Success); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *ActivateSceneResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *ActivateSceneResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    })
}

/**
 * Attributes:
 *  - _homeId
 */
type GetDriverStatisticsArgs struct {
  thrift.TStruct
  _homeId int32 "_homeId"; // 1
}

func NewGetDriverStatisticsArgs() *GetDriverStatisticsArgs {
  output := &GetDriverStatisticsArgs{
    TStruct:thrift.NewTStruct("GetDriverStatistics_args", []thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetDriverStatisticsArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_homeId" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetDriverStatisticsArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1732, err1733 := iprot.ReadI32()
  if err1733 != nil { return thrift.NewTProtocolExceptionReadField(1, "_homeId", p.ThriftName(), err1733); }
  p._homeId = v1732
  return err
}

func (p *GetDriverStatisticsArgs) ReadField_homeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetDriverStatisticsArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetDriverStatistics_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetDriverStatisticsArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_homeId", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._homeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  return err
}

func (p *GetDriverStatisticsArgs) WriteField_homeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetDriverStatisticsArgs) TStructName() string {
  return "GetDriverStatisticsArgs"
}

func (p *GetDriverStatisticsArgs) ThriftName() string {
  return "GetDriverStatistics_args"
}

func (p *GetDriverStatisticsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetDriverStatisticsArgs(%+v)", *p)
}

func (p *GetDriverStatisticsArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetDriverStatisticsArgs)
  if !ok {
    return 0, false
  }
  if p._homeId != data._homeId {
    if p._homeId < data._homeId {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetDriverStatisticsArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._homeId
  }
  return nil
}

func (p *GetDriverStatisticsArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    })
}

/**
 * Attributes:
 *  - Success
 */
type GetDriverStatisticsResult struct {
  thrift.TStruct
  Success *GetDriverStatisticsReturnStruct "success"; // 0
}

func NewGetDriverStatisticsResult() *GetDriverStatisticsResult {
  output := &GetDriverStatisticsResult{
    TStruct:thrift.NewTStruct("GetDriverStatistics_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    }),
  }
  {
  }
  return output
}

func (p *GetDriverStatisticsResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetDriverStatisticsResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Success = NewGetDriverStatisticsReturnStruct()
  err1736 := p.Success.Read(iprot)
  if err1736 != nil { return thrift.NewTProtocolExceptionReadStruct("p.SuccessGetDriverStatisticsReturnStruct", err1736); }
  return err
}

func (p *GetDriverStatisticsResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetDriverStatisticsResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetDriverStatistics_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetDriverStatisticsResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = p.Success.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("GetDriverStatisticsReturnStruct", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *GetDriverStatisticsResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetDriverStatisticsResult) TStructName() string {
  return "GetDriverStatisticsResult"
}

func (p *GetDriverStatisticsResult) ThriftName() string {
  return "GetDriverStatistics_result"
}

func (p *GetDriverStatisticsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetDriverStatisticsResult(%+v)", *p)
}

func (p *GetDriverStatisticsResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetDriverStatisticsResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetDriverStatisticsResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *GetDriverStatisticsResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    })
}

type SendAllValuesArgs struct {
  thrift.TStruct
}

func NewSendAllValuesArgs() *SendAllValuesArgs {
  output := &SendAllValuesArgs{
    TStruct:thrift.NewTStruct("SendAllValues_args", []thrift.TField{
    }),
  }
  {
  }
  return output
}

func (p *SendAllValuesArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    err = iprot.Skip(fieldTypeId)
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SendAllValuesArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SendAllValues_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SendAllValuesArgs) TStructName() string {
  return "SendAllValuesArgs"
}

func (p *SendAllValuesArgs) ThriftName() string {
  return "SendAllValues_args"
}

func (p *SendAllValuesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SendAllValuesArgs(%+v)", *p)
}

func (p *SendAllValuesArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  _, ok := other.(*SendAllValuesArgs)
  if !ok {
    return 0, false
  }
  return 0, true
}

func (p *SendAllValuesArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  }
  return nil
}

func (p *SendAllValuesArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    })
}

type SendAllValuesResult struct {
  thrift.TStruct
}

func NewSendAllValuesResult() *SendAllValuesResult {
  output := &SendAllValuesResult{
    TStruct:thrift.NewTStruct("SendAllValues_result", []thrift.TField{
    }),
  }
  {
  }
  return output
}

func (p *SendAllValuesResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    err = iprot.Skip(fieldTypeId)
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SendAllValuesResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SendAllValues_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SendAllValuesResult) TStructName() string {
  return "SendAllValuesResult"
}

func (p *SendAllValuesResult) ThriftName() string {
  return "SendAllValues_result"
}

func (p *SendAllValuesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SendAllValuesResult(%+v)", *p)
}

func (p *SendAllValuesResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  _, ok := other.(*SendAllValuesResult)
  if !ok {
    return 0, false
  }
  return 0, true
}

func (p *SendAllValuesResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  }
  return nil
}

func (p *SendAllValuesResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    })
}


