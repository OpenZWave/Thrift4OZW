/* Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package OpenZWave;

import (
        "thrift"
        "fmt"
)

import (
        "os"
)


type IRemoteManager interface {
  /**
   * \name Configuration
   * For saving the Z-Wave network configuration so that the entire network does not need to be
   * polled every time the application starts.
   * 
   * Parameters:
   *  - _homeId
   */
  WriteConfig(_homeId int32) (err os.Error)
  /**
   * \name Drivers
   * Methods for adding and removing drivers and obtaining basic controller information.
   * 
   * Parameters:
   *  - _homeId
   */
  GetControllerNodeId(_homeId int32) (retval124 byte, err os.Error)
  /**
   * Parameters:
   *  - _homeId
   */
  IsPrimaryController(_homeId int32) (retval125 bool, err os.Error)
  /**
   * Parameters:
   *  - _homeId
   */
  IsStaticUpdateController(_homeId int32) (retval126 bool, err os.Error)
  /**
   * \brief Query if the controller is using the bridge controller library.
   * A bridge controller is able to create virtual nodes that can be associated
   * with other controllers to enable events to be passed on.
   * \param _homeId The Home ID of the Z-Wave controller.
   * \return true if it is a bridge controller, false if not.
   * 
   * Parameters:
   *  - _homeId
   */
  IsBridgeController(_homeId int32) (retval127 bool, err os.Error)
  /**
   * \brief Get the version of the Z-Wave API library used by a controller.
   * \param _homeId The Home ID of the Z-Wave controller.
   * \return a string containing the library version. For example, "Z-Wave 2.48".
   * 
   * Parameters:
   *  - _homeId
   */
  GetLibraryVersion(_homeId int32) (retval128 string, err os.Error)
  /**
   * \brief Get a string containing the Z-Wave API library type used by a controller.
   * The possible library types are:
   * - Static Controller
   * - Controller
   * - Enhanced Slave
   * - Slave
   * - Installer
   * - Routing Slave
   * - Bridge Controller
   * - Device Under Test
   * The controller should never return a slave library type.
   * For a more efficient test of whether a controller is a Bridge Controller, use
   * the IsBridgeController method.
   * \param _homeId The Home ID of the Z-Wave controller.
   * \return a string containing the library type.
   * \see GetLibraryVersion, IsBridgeController
   * 
   * Parameters:
   *  - _homeId
   */
  GetLibraryTypeName(_homeId int32) (retval129 string, err os.Error)
  /**
   * \brief Get count of messages in the outgoing send queue.
   * \param _homeId The Home ID of the Z-Wave controller.
   * \return a integer message count
   * 
   * Parameters:
   *  - _homeId
   */
  GetSendQueueCount(_homeId int32) (retval130 int32, err os.Error)
  /**
   * \brief Get the time period between polls of a node's state.
   */
  GetPollInterval() (retval131 int32, err os.Error)
  /**
   * \brief Set the time period between polls of a node's state.
   * Due to patent concerns, some devices do not report state changes automatically to the controller.
   * These devices need to have their state polled at regular intervals.  The length of the interval
   * is the same for all devices.  To even out the Z-Wave network traffic generated by polling, OpenZWave
   * divides the polling interval by the number of devices that have polling enabled, and polls each
   * in turn.  It is recommended that if possible, the interval should not be set shorter than the
   * number of polled devices in seconds (so that the network does not have to cope with more than one
   * poll per second).
   * \param _seconds The length of the polling interval in seconds.
   * 
   * Parameters:
   *  - _seconds
   */
  SetPollInterval(_seconds int32) (err os.Error)
  /**
   * \brief Enable the polling of a device's state.
   * \param _valueId The ID of the value to start polling.
   * \return True if polling was enabled.
   * 
   * Parameters:
   *  - _valueId
   */
  EnablePoll(_valueId *RemoteValueID) (retval133 bool, err os.Error)
  /**
   * \brief Disable the polling of a device's state.
   * \param _valueId The ID of the value to stop polling.
   * \return True if polling was disabled.
   * 
   * Parameters:
   *  - _valueId
   */
  DisablePoll(_valueId *RemoteValueID) (retval134 bool, err os.Error)
  /**
   * \brief Determine the polling of a device's state.
   * \param _valueId The ID of the value to check polling.
   * \return True if polling is active.
   * 
   * Parameters:
   *  - _valueId
   */
  IsPolled(_valueId *RemoteValueID) (retval135 bool, err os.Error)
  /**
   * \brief Trigger the fetching of fixed data about a node.
   * Causes the node's data to be obtained from the Z-Wave network in the same way as if it had just been added.
   * This method would normally be called automatically by OpenZWave, but if you know that a node has been
   * changed, calling this method will force a refresh of all of the data held by the library.  This can be especially
   * useful for devices that were asleep when the application was first run. This is the
   * same as the query state starting from the beginning.
   * \param _homeId The Home ID of the Z-Wave controller that manages the node.
   * \param _nodeId The ID of the node to query.
   * \return True if the request was sent successfully.
   * 
   * Parameters:
   *  - _homeId
   *  - _nodeId
   */
  RefreshNodeInfo(_homeId int32, _nodeId byte) (retval136 bool, err os.Error)
  /**
   * \brief Trigger the fetching of dynamic value data for a node.
   * Causes the node's values to be requested from the Z-Wave network. This is the
   * same as the query state starting from the associations state.
   * \param _homeId The Home ID of the Z-Wave controller that manages the node.
   * \param _nodeId The ID of the node to query.
   * \return True if the request was sent successfully.
   * 
   * Parameters:
   *  - _homeId
   *  - _nodeId
   */
  RequestNodeState(_homeId int32, _nodeId byte) (retval137 bool, err os.Error)
  /**
   * \brief Trigger the fetching of just the dynamic value data for a node.
   * Causes the node's values to be requested from the Z-Wave network. This is the
   * same as the query state starting from the dynamic state.
   * \param _homeId The Home ID of the Z-Wave controller that manages the node.
   * \param _nodeId The ID of the node to query.
   * \return True if the request was sent successfully.
   * 
   * Parameters:
   *  - _homeId
   *  - _nodeId
   */
  RequestNodeDynamic(_homeId int32, _nodeId byte) (retval138 bool, err os.Error)
  /**
   * \brief Get whether the node is a listening device that does not go to sleep
   * \param _homeId The Home ID of the Z-Wave controller that manages the node.
   * \param _nodeId The ID of the node to query.
   * \return True if it is a listening node.
   * 
   * Parameters:
   *  - _homeId
   *  - _nodeId
   */
  IsNodeListeningDevice(_homeId int32, _nodeId byte) (retval139 bool, err os.Error)
  /**
   * \brief Get whether the node is a frequent listening device that goes to sleep but
   * can be woken up by a beam. Useful to determine node and controller consistency.
   * \param _homeId The Home ID of the Z-Wave controller that manages the node.
   * \param _nodeId The ID of the node to query.
   * \return True if it is a frequent listening node.
   * 
   * Parameters:
   *  - _homeId
   *  - _nodeId
   */
  IsNodeFrequentListeningDevice(_homeId int32, _nodeId byte) (retval140 bool, err os.Error)
  /**
   * \brief Get whether the node is a beam capable device.
   * \param _homeId The Home ID of the Z-Wave controller that manages the node.
   * \param _nodeId The ID of the node to query.
   * \return True if it is a frequent listening node.
   * 
   * Parameters:
   *  - _homeId
   *  - _nodeId
   */
  IsNodeBeamingDevice(_homeId int32, _nodeId byte) (retval141 bool, err os.Error)
  /**
   * \brief Get whether the node is a routing device that passes messages to other nodes
   * \param _homeId The Home ID of the Z-Wave controller that manages the node.
   * \param _nodeId The ID of the node to query.
   * \return True if the node is a routing device
   * 
   * Parameters:
   *  - _homeId
   *  - _nodeId
   */
  IsNodeRoutingDevice(_homeId int32, _nodeId byte) (retval142 bool, err os.Error)
  /**
   * \brief Get the security attribute for a node. True if node supports security features.
   * \param _homeId The Home ID of the Z-Wave controller that manages the node.
   * \param _nodeId The ID of the node to query.
   * \return true if security features implemented.
   * 
   * Parameters:
   *  - _homeId
   *  - _nodeId
   */
  IsNodeSecurityDevice(_homeId int32, _nodeId byte) (retval143 bool, err os.Error)
  /**
   * \brief Get the maximum baud rate of a node's communications
   * \param _homeId The Home ID of the Z-Wave controller that manages the node.
   * \param _nodeId The ID of the node to query.
   * \return the baud rate in bits per second.
   * 
   * Parameters:
   *  - _homeId
   *  - _nodeId
   */
  GetNodeMaxBaudRate(_homeId int32, _nodeId byte) (retval144 int32, err os.Error)
  /**
   * \brief Get the version number of a node
   * \param _homeId The Home ID of the Z-Wave controller that manages the node.
   * \param _nodeId The ID of the node to query.
   * \return the node's version number
   * 
   * Parameters:
   *  - _homeId
   *  - _nodeId
   */
  GetNodeVersion(_homeId int32, _nodeId byte) (retval145 byte, err os.Error)
  /**
   * \brief Get the basic type of a node.
   * \param _homeId The Home ID of the Z-Wave controller that manages the node.
   * \param _nodeId The ID of the node to query.
   * \return the node's basic type.
   * 
   * Parameters:
   *  - _homeId
   *  - _nodeId
   */
  GetNodeBasic(_homeId int32, _nodeId byte) (retval146 byte, err os.Error)
  /**
   * \brief Get the generic type of a node.
   * \param _homeId The Home ID of the Z-Wave controller that manages the node.
   * \param _nodeId The ID of the node to query.
   * \return the node's generic type.
   * 
   * Parameters:
   *  - _homeId
   *  - _nodeId
   */
  GetNodeGeneric(_homeId int32, _nodeId byte) (retval147 byte, err os.Error)
  /**
   * \brief Get the specific type of a node.
   * \param _homeId The Home ID of the Z-Wave controller that manages the node.
   * \param _nodeId The ID of the node to query.
   * \return the node's specific type.
   * 
   * Parameters:
   *  - _homeId
   *  - _nodeId
   */
  GetNodeSpecific(_homeId int32, _nodeId byte) (retval148 byte, err os.Error)
  /**
   * \brief Get a human-readable label describing the node
   * The label is taken from the Z-Wave specific, generic or basic type, depending on which of those values are specified by the node.
   * \param _homeId The Home ID of the Z-Wave controller that manages the node.
   * \param _nodeId The ID of the node to query.
   * \return A string containing the label text.
   * 
   * Parameters:
   *  - _homeId
   *  - _nodeId
   */
  GetNodeType(_homeId int32, _nodeId byte) (retval149 string, err os.Error)
  /**
   * \brief Get the bitmap of this node's neighbors
   * 
   * \param _homeId The Home ID of the Z-Wave controller that manages the node.
   * \param _nodeId The ID of the node to query.
   * \param _nodeNeighbors An array of 29 uint8s to hold the neighbor bitmap
   * 
   * Parameters:
   *  - _homeId
   *  - _nodeId
   */
  GetNodeNeighbors(_homeId int32, _nodeId byte) (retval150 *UInt32ListByte, err os.Error)
  /**
   * \brief Get the manufacturer name of a device
   * The manufacturer name would normally be handled by the Manufacturer Specific commmand class,
   * taking the manufacturer ID reported by the device and using it to look up the name from the
   * manufacturer_specific.xml file in the OpenZWave config folder.
   * However, there are some devices that do not support the command class, so to enable the user
   * to manually set the name, it is stored with the node data and accessed via this method rather
   * than being reported via a command class Value object.
   * \param _homeId The Home ID of the Z-Wave controller that manages the node.
   * \param _nodeId The ID of the node to query.
   * \return A string containing the node's manufacturer name.
   * \see SetNodeManufacturerName, GetNodeProductName, SetNodeProductName
   * 
   * Parameters:
   *  - _homeId
   *  - _nodeId
   */
  GetNodeManufacturerName(_homeId int32, _nodeId byte) (retval151 string, err os.Error)
  /**
   * \brief Get the product name of a device
   * The product name would normally be handled by the Manufacturer Specific commmand class,
   * taking the product Type and ID reported by the device and using it to look up the name from the
   * manufacturer_specific.xml file in the OpenZWave config folder.
   * However, there are some devices that do not support the command class, so to enable the user
   * to manually set the name, it is stored with the node data and accessed via this method rather
   * than being reported via a command class Value object.
   * \param _homeId The Home ID of the Z-Wave controller that manages the node.
   * \param _nodeId The ID of the node to query.
   * \return A string containing the node's product name.
   * \see SetNodeProductName, GetNodeManufacturerName, SetNodeManufacturerName
   * 
   * Parameters:
   *  - _homeId
   *  - _nodeId
   */
  GetNodeProductName(_homeId int32, _nodeId byte) (retval152 string, err os.Error)
  /**
   * \brief Get the name of a node
   * The node name is a user-editable label for the node that would normally be handled by the
   * Node Naming commmand class, but many devices do not support it.  So that a node can always
   * be named, OpenZWave stores it with the node data, and provides access through this method
   * and SetNodeName, rather than reporting it via a command class Value object.
   * The maximum length of a node name is 16 characters.
   * \param _homeId The Home ID of the Z-Wave controller that manages the node.
   * \param _nodeId The ID of the node to query.
   * \return A string containing the node's name.
   * \see SetNodeName, GetNodeLocation, SetNodeLocation
   * 
   * Parameters:
   *  - _homeId
   *  - _nodeId
   */
  GetNodeName(_homeId int32, _nodeId byte) (retval153 string, err os.Error)
  /**
   * \brief Get the location of a node
   * The node location is a user-editable string that would normally be handled by the Node Naming
   * commmand class, but many devices do not support it.  So that a node can always report its
   * location, OpenZWave stores it with the node data, and provides access through this method
   * and SetNodeLocation, rather than reporting it via a command class Value object.
   * \param _homeId The Home ID of the Z-Wave controller that manages the node.
   * \param _nodeId The ID of the node to query.
   * \return A string containing the node's location.
   * \see SetNodeLocation, GetNodeName, SetNodeName
   * 
   * Parameters:
   *  - _homeId
   *  - _nodeId
   */
  GetNodeLocation(_homeId int32, _nodeId byte) (retval154 string, err os.Error)
  /**
   * \brief Get the manufacturer ID of a device
   * The manufacturer ID is a four digit hex code and would normally be handled by the Manufacturer
   * Specific commmand class, but not all devices support it.  Although the value reported by this
   * method will be an empty string if the command class is not supported and cannot be set by the
   * user, the manufacturer ID is still stored with the node data (rather than being reported via a
   * command class Value object) to retain a consistent approach with the other manufacturer specific data.
   * \param _homeId The Home ID of the Z-Wave controller that manages the node.
   * \param _nodeId The ID of the node to query.
   * \return A string containing the node's manufacturer ID, or an empty string if the manufactuer
   * specific command class is not supported by the device.
   * \see GetNodeProductType, GetNodeProductId, GetNodeManufacturerName, GetNodeProductName
   * 
   * Parameters:
   *  - _homeId
   *  - _nodeId
   */
  GetNodeManufacturerId(_homeId int32, _nodeId byte) (retval155 string, err os.Error)
  /**
   * \brief Get the product type of a device
   * The product type is a four digit hex code and would normally be handled by the Manufacturer Specific
   * commmand class, but not all devices support it.  Although the value reported by this method will
   * be an empty string if the command class is not supported and cannot be set by the user, the product
   * type is still stored with the node data (rather than being reported via a command class Value object)
   * to retain a consistent approach with the other manufacturer specific data.
   * \param _homeId The Home ID of the Z-Wave controller that manages the node.
   * \param _nodeId The ID of the node to query.
   * \return A string containing the node's product type, or an empty string if the manufactuer
   * specific command class is not supported by the device.
   * \see GetNodeManufacturerId, GetNodeProductId, GetNodeManufacturerName, GetNodeProductName
   * 
   * Parameters:
   *  - _homeId
   *  - _nodeId
   */
  GetNodeProductType(_homeId int32, _nodeId byte) (retval156 string, err os.Error)
  /**
   * \brief Get the product ID of a device
   * The product ID is a four digit hex code and would normally be handled by the Manufacturer Specific
   * commmand class, but not all devices support it.  Although the value reported by this method will
   * be an empty string if the command class is not supported and cannot be set by the user, the product
   * ID is still stored with the node data (rather than being reported via a command class Value object)
   * to retain a consistent approach with the other manufacturer specific data.
   * \param _homeId The Home ID of the Z-Wave controller that manages the node.
   * \param _nodeId The ID of the node to query.
   * \return A string containing the node's product ID, or an empty string if the manufactuer
   * specific command class is not supported by the device.
   * \see GetNodeManufacturerId, GetNodeProductType, GetNodeManufacturerName, GetNodeProductName
   * 
   * Parameters:
   *  - _homeId
   *  - _nodeId
   */
  GetNodeProductId(_homeId int32, _nodeId byte) (retval157 string, err os.Error)
  /**
   * \brief Set the manufacturer name of a device
   * The manufacturer name would normally be handled by the Manufacturer Specific commmand class,
   * taking the manufacturer ID reported by the device and using it to look up the name from the
   * manufacturer_specific.xml file in the OpenZWave config folder.
   * However, there are some devices that do not support the command class, so to enable the user
   * to manually set the name, it is stored with the node data and accessed via this method rather
   * than being reported via a command class Value object.
   * \param _homeId The Home ID of the Z-Wave controller that manages the node.
   * \param _nodeId The ID of the node to query.
   * \param _manufacturerName	A string containing the node's manufacturer name.
   * \see GetNodeManufacturerName, GetNodeProductName, SetNodeProductName
   * 
   * Parameters:
   *  - _homeId
   *  - _nodeId
   *  - _manufacturerName
   */
  SetNodeManufacturerName(_homeId int32, _nodeId byte, _manufacturerName string) (err os.Error)
  /**
   * \brief Set the product name of a device
   * The product name would normally be handled by the Manufacturer Specific commmand class,
   * taking the product Type and ID reported by the device and using it to look up the name from the
   * manufacturer_specific.xml file in the OpenZWave config folder.
   * However, there are some devices that do not support the command class, so to enable the user
   * to manually set the name, it is stored with the node data and accessed via this method rather
   * than being reported via a command class Value object.
   * \param _homeId The Home ID of the Z-Wave controller that manages the node.
   * \param _nodeId The ID of the node to query.
   * \param _productName A string containing the node's product name.
   * \see GetNodeProductName, GetNodeManufacturerName, SetNodeManufacturerName
   * 
   * Parameters:
   *  - _homeId
   *  - _nodeId
   *  - _productName
   */
  SetNodeProductName(_homeId int32, _nodeId byte, _productName string) (err os.Error)
  /**
   * \brief Set the name of a node
   * The node name is a user-editable label for the node that would normally be handled by the
   * Node Naming commmand class, but many devices do not support it.  So that a node can always
   * be named, OpenZWave stores it with the node data, and provides access through this method
   * and GetNodeName, rather than reporting it via a command class Value object.
   * If the device does support the Node Naming command class, the new name will be sent to the node.
   * The maximum length of a node name is 16 characters.
   * \param _homeId The Home ID of the Z-Wave controller that manages the node.
   * \param _nodeId The ID of the node to query.
   * \param _nodeName A string containing the node's name.
   * \see GetNodeName, GetNodeLocation, SetNodeLocation
   * 
   * Parameters:
   *  - _homeId
   *  - _nodeId
   *  - _nodeName
   */
  SetNodeName(_homeId int32, _nodeId byte, _nodeName string) (err os.Error)
  /**
   * \brief Set the location of a node
   * The node location is a user-editable string that would normally be handled by the Node Naming
   * commmand class, but many devices do not support it.  So that a node can always report its
   * location, OpenZWave stores it with the node data, and provides access through this method
   * and GetNodeLocation, rather than reporting it via a command class Value object.
   * If the device does support the Node Naming command class, the new location will be sent to the node.
   * \param _homeId The Home ID of the Z-Wave controller that manages the node.
   * \param _nodeId The ID of the node to query.
   * \param _location A string containing the node's location.
   * \see GetNodeLocation, GetNodeName, SetNodeName
   * 
   * Parameters:
   *  - _homeId
   *  - _nodeId
   *  - _location
   */
  SetNodeLocation(_homeId int32, _nodeId byte, _location string) (err os.Error)
  /**
   * \brief Turns a node on
   * This is a helper method to simplify basic control of a node.  It is the equivalent of
   * changing the level reported by the node's Basic command class to 255, and will generate a
   * ValueChanged notification from that class.  This command will turn on the device at its
   * last known level, if supported by the device, otherwise it will turn	it on at 100%.
   * \param _homeId The Home ID of the Z-Wave controller that manages the node.
   * \param _nodeId The ID of the node to be changed.
   * \see SetNodeOff, SetNodeLevel
   * 
   * Parameters:
   *  - _homeId
   *  - _nodeId
   */
  SetNodeOn(_homeId int32, _nodeId byte) (err os.Error)
  /**
   * \brief Turns a node off
   * This is a helper method to simplify basic control of a node.  It is the equivalent of
   * changing the level reported by the node's Basic command class to zero, and will generate
   * a ValueChanged notification from that class.
   * \param _homeId The Home ID of the Z-Wave controller that manages the node.
   * \param _nodeId The ID of the node to be changed.
   * \see SetNodeOn, SetNodeLevel
   * 
   * Parameters:
   *  - _homeId
   *  - _nodeId
   */
  SetNodeOff(_homeId int32, _nodeId byte) (err os.Error)
  /**
   * \brief Sets the basic level of a node
   * This is a helper method to simplify basic control of a node.  It is the equivalent of
   * changing the value reported by the node's Basic command class and will generate a
   * ValueChanged notification from that class.
   * \param _homeId The Home ID of the Z-Wave controller that manages the node.
   * \param _nodeId The ID of the node to be changed.
   * \param _level The level to set the node.  Valid values are 0-99 and 255.  Zero is off and
   * 99 is fully on.  255 will turn on the device at its last known level (if supported).
   * \see SetNodeOn, SetNodeOff
   * 
   * Parameters:
   *  - _homeId
   *  - _nodeId
   *  - _level
   */
  SetNodeLevel(_homeId int32, _nodeId byte, _level byte) (err os.Error)
  /**
   * \brief Get whether the node information has been received
   * \param _homeId The Home ID of the Z-Wave controller that manages the node.
   * \param _nodeId The ID of the node to query.
   * \return True if the node information has been received yet
   * 
   * Parameters:
   *  - _homeId
   *  - _nodeId
   */
  IsNodeInfoReceived(_homeId int32, _nodeId byte) (retval165 bool, err os.Error)
  /**
   * \brief Get whether the node has the defined class available or not
   * \param _homeId The Home ID of the Z-Wave controller that manages the node.
   * \param _nodeId The ID of the node to query.
   * \param _commandClassId Id of the class to test for
   * \return True if the node does have the class instantiated, will return name & version
   * 
   * Parameters:
   *  - _homeId
   *  - _nodeId
   *  - _commandClassId
   */
  GetNodeClassInformation(_homeId int32, _nodeId byte, _commandClassId byte) (retval166 *BoolGetNodeClassInformation, err os.Error)
  /**
   * \brief Gets the user-friendly label for the value.
   * \param _id The unique identifier of the value.
   * \return The value label.
   * \see ValueID
   * 
   * Parameters:
   *  - _id
   */
  GetValueLabel(_id *RemoteValueID) (retval167 string, err os.Error)
  /**
   * \brief Sets the user-friendly label for the value.
   * \param _id The unique identifier of the value.
   * \param _value The new value of the label.
   * \see ValueID
   * 
   * Parameters:
   *  - _id
   *  - _value
   */
  SetValueLabel(_id *RemoteValueID, _value string) (err os.Error)
  /**
   * \brief Gets the units that the value is measured in.
   * \param _id The unique identifier of the value.
   * \return The value units.
   * \see ValueID
   * 
   * Parameters:
   *  - _id
   */
  GetValueUnits(_id *RemoteValueID) (retval169 string, err os.Error)
  /**
   * \brief Sets the units that the value is measured in.
   * \param _id The unique identifier of the value.
   * \param _value The new value of the units.
   * \see ValueID
   * 
   * Parameters:
   *  - _id
   *  - _value
   */
  SetValueUnits(_id *RemoteValueID, _value string) (err os.Error)
  /**
   * \brief Gets a help string describing the value's purpose and usage.
   * \param _id The unique identifier of the value.
   * \return The value help text.
   * \see ValueID
   * 
   * Parameters:
   *  - _id
   */
  GetValueHelp(_id *RemoteValueID) (retval171 string, err os.Error)
  /**
   * \brief Sets a help string describing the value's purpose and usage.
   * \param _id The unique identifier of the value.
   * \param _value The new value of the help text.
   * \see ValueID
   * 
   * Parameters:
   *  - _id
   *  - _value
   */
  SetValueHelp(_id *RemoteValueID, _value string) (err os.Error)
  /**
   * \brief Gets the minimum that this value may contain.
   * \param _id The unique identifier of the value.
   * \return The value minimum.
   * \see ValueID
   * 
   * Parameters:
   *  - _id
   */
  GetValueMin(_id *RemoteValueID) (retval173 int32, err os.Error)
  /**
   * \brief Gets the maximum that this value may contain.
   * \param _id The unique identifier of the value.
   * \return The value maximum.
   * \see ValueID
   * 
   * Parameters:
   *  - _id
   */
  GetValueMax(_id *RemoteValueID) (retval174 int32, err os.Error)
  /**
   * \brief Test whether the value is read-only.
   * \param _id The unique identifier of the value.
   * \return true if the value cannot be changed by the user.
   * \see ValueID
   * 
   * Parameters:
   *  - _id
   */
  IsValueReadOnly(_id *RemoteValueID) (retval175 bool, err os.Error)
  /**
   * \brief Test whether the value is write-only.
   * \param _id The unique identifier of the value.
   * \return true if the value can only be written to and not read.
   * \see ValueID
   * 
   * Parameters:
   *  - _id
   */
  IsValueWriteOnly(_id *RemoteValueID) (retval176 bool, err os.Error)
  /**
   * \brief Test whether the value has been set.
   * \param _id The unique identifier of the value.
   * \return true if the value has actually been set by a status message from the device, rather than simply being the default.
   * \see ValueID
   * 
   * Parameters:
   *  - _id
   */
  IsValueSet(_id *RemoteValueID) (retval177 bool, err os.Error)
  /**
   * \brief Gets a value as a bool.
   * \param _id The unique identifier of the value.
   * \param o_value Pointer to a bool that will be filled with the value.
   * \return true if the value was obtained.  Returns false if the value is not a ValueID::ValueType_Bool. The type can be tested with a call to ValueID::GetType.
   * \see ValueID::GetType, GetValueAsByte, GetValueAsFloat, GetValueAsInt, GetValueAsShort, GetValueAsString, GetValueListSelection, GetValueListItems
   * 
   * Parameters:
   *  - _id
   */
  GetValueAsBool(_id *RemoteValueID) (retval178 *BoolBool, err os.Error)
  /**
   * \brief Gets a value as an 8-bit unsigned integer.
   * \param _id The unique identifier of the value.
   * \param o_value Pointer to a uint8 that will be filled with the value.
   * \return true if the value was obtained.  Returns false if the value is not a ValueID::ValueType_Byte. The type can be tested with a call to ValueID::GetType
   * \see ValueID::GetType, GetValueAsBool, GetValueAsFloat, GetValueAsInt, GetValueAsShort, GetValueAsString, GetValueListSelection, GetValueListItems
   * 
   * Parameters:
   *  - _id
   */
  GetValueAsByte(_id *RemoteValueID) (retval179 *BoolUInt8, err os.Error)
  /**
   * \brief Gets a value as a float.
   * \param _id The unique identifier of the value.
   * \param o_value Pointer to a float that will be filled with the value.
   * \return true if the value was obtained.  Returns false if the value is not a ValueID::ValueType_Decimal. The type can be tested with a call to ValueID::GetType
   * \see ValueID::GetType, GetValueAsBool, GetValueAsByte, GetValueAsInt, GetValueAsShort, GetValueAsString, GetValueListSelection, GetValueListItems
   * 
   * Parameters:
   *  - _id
   */
  GetValueAsFloat(_id *RemoteValueID) (retval180 *BoolFloat, err os.Error)
  /**
   * \brief Gets a value as a 32-bit signed integer.
   * \param _id The unique identifier of the value.
   * \param o_value Pointer to an int32 that will be filled with the value.
   * \return true if the value was obtained.  Returns false if the value is not a ValueID::ValueType_Int. The type can be tested with a call to ValueID::GetType
   * \see ValueID::GetType, GetValueAsBool, GetValueAsByte, GetValueAsFloat, GetValueAsShort, GetValueAsString, GetValueListSelection, GetValueListItems
   * 
   * Parameters:
   *  - _id
   */
  GetValueAsInt(_id *RemoteValueID) (retval181 *BoolInt, err os.Error)
  /**
   * \brief Gets a value as a 16-bit signed integer.
   * \param _id The unique identifier of the value.
   * \param o_value Pointer to an int16 that will be filled with the value.
   * \return true if the value was obtained.  Returns false if the value is not a ValueID::ValueType_Short. The type can be tested with a call to ValueID::GetType.
   * \see ValueID::GetType, GetValueAsBool, GetValueAsByte, GetValueAsFloat, GetValueAsInt, GetValueAsString, GetValueListSelection, GetValueListItems.
   * 
   * Parameters:
   *  - _id
   */
  GetValueAsShort(_id *RemoteValueID) (retval182 *BoolInt16, err os.Error)
  /**
   * \brief Gets a value as a string.
   * Creates a string representation of a value, regardless of type.
   * \param _id The unique identifier of the value.
   * \param o_value Pointer to a string that will be filled with the value.
   * \return true if the value was obtained.</returns>
   * \see ValueID::GetType, GetValueAsBool, GetValueAsByte, GetValueAsFloat, GetValueAsInt, GetValueAsShort, GetValueListSelection, GetValueListItems.
   * 
   * Parameters:
   *  - _id
   */
  GetValueAsString(_id *RemoteValueID) (retval183 *BoolString, err os.Error)
  /**
   * \brief Gets the selected item from a list (as a string).
   * \param _id The unique identifier of the value.
   * \param o_value Pointer to a string that will be filled with the selected item.
   * \return True if the value was obtained.  Returns false if the value is not a ValueID::ValueType_List. The type can be tested with a call to ValueID::GetType.
   * \see ValueID::GetType, GetValueAsBool, GetValueAsByte, GetValueAsFloat, GetValueAsInt, GetValueAsShort, GetValueAsString, GetValueListItems.
   * 
   * Parameters:
   *  - _id
   */
  GetValueListSelectionString(_id *RemoteValueID) (retval184 *BoolString, err os.Error)
  /**
   * \brief Gets the selected item from a list (as an integer).
   * \param _id The unique identifier of the value.
   * \param o_value Pointer to an integer that will be filled with the selected item.
   * \return True if the value was obtained.  Returns false if the value is not a ValueID::ValueType_List. The type can be tested with a call to ValueID::GetType.
   * \see ValueID::GetType, GetValueAsBool, GetValueAsByte, GetValueAsFloat, GetValueAsInt, GetValueAsShort, GetValueAsString, GetValueListItems.
   * 
   * Parameters:
   *  - _id
   */
  GetValueListSelectionInt32(_id *RemoteValueID) (retval185 *BoolInt, err os.Error)
  /**
   * \brief Gets the list of items from a list value.
   * \param _id The unique identifier of the value.
   * \param o_value Pointer to a vector of strings that will be filled with list items. The vector will be cleared before the items are added.
   * \return true if the list items were obtained.  Returns false if the value is not a ValueID::ValueType_List. The type can be tested with a call to ValueID::GetType.
   * \see ValueID::GetType, GetValueAsBool, GetValueAsByte, GetValueAsFloat, GetValueAsInt, GetValueAsShort, GetValueAsString, GetValueListSelection.
   * 
   * Parameters:
   *  - _id
   */
  GetValueListItems(_id *RemoteValueID) (retval186 *BoolListString, err os.Error)
  /**
   * \brief Gets a float value's precision.
   * \param _id The unique identifier of the value.
   * \param o_value Pointer to a uint8 that will be filled with the precision value.
   * \return true if the value was obtained.  Returns false if the value is not a ValueID::ValueType_Decimal. The type can be tested with a call to ValueID::GetType
   * \see ValueID::GetType, GetValueAsBool, GetValueAsByte, GetValueAsInt, GetValueAsShort, GetValueAsString, GetValueListSelection, GetValueListItems
   * 
   * Parameters:
   *  - _id
   */
  GetValueFloatPrecision(_id *RemoteValueID) (retval187 *BoolUInt8, err os.Error)
  /**
   * \brief Sets the state of a bool.
   * Due to the possibility of a device being asleep, the command is assumed to suceeed, and the value
   * held by the node is updated directly.  This will be reverted by a future status message from the device
   * if the Z-Wave message actually failed to get through.  Notification callbacks will be sent in both cases.
   * \param _id The unique identifier of the bool value.
   * \param _value The new value of the bool.
   * \return true if the value was set.  Returns false if the value is not a ValueID::ValueType_Bool. The type can be tested with a call to ValueID::GetType.
   * 
   * Parameters:
   *  - _id
   *  - _value
   */
  SetValueBool(_id *RemoteValueID, _value bool) (retval188 bool, err os.Error)
  /**
   * \brief Sets the value of a byte.
   * Due to the possibility of a device being asleep, the command is assumed to suceeed, and the value
   * held by the node is updated directly.  This will be reverted by a future status message from the device
   * if the Z-Wave message actually failed to get through.  Notification callbacks will be sent in both cases.
   * \param _id The unique identifier of the byte value.
   * \param _value The new value of the byte.
   * \return true if the value was set.  Returns false if the value is not a ValueID::ValueType_Byte. The type can be tested with a call to ValueID::GetType.
   * 
   * Parameters:
   *  - _id
   *  - _value
   */
  SetValueUInt8(_id *RemoteValueID, _value byte) (retval189 bool, err os.Error)
  /**
   * \brief Sets the value of a decimal.
   * It is usually better to handle decimal values using strings rather than floats, to avoid floating point accuracy issues.
   * Due to the possibility of a device being asleep, the command is assumed to succeed, and the value
   * held by the node is updated directly.  This will be reverted by a future status message from the device
   * if the Z-Wave message actually failed to get through.  Notification callbacks will be sent in both cases.
   * \param _id The unique identifier of the decimal value.
   * \param _value The new value of the decimal.
   * \return true if the value was set.  Returns false if the value is not a ValueID::ValueType_Decimal. The type can be tested with a call to ValueID::GetType.
   * 
   * Parameters:
   *  - _id
   *  - _value
   */
  SetValueFloat(_id *RemoteValueID, _value float64) (retval190 bool, err os.Error)
  /**
   * \brief Sets the value of a 32-bit signed integer.
   * Due to the possibility of a device being asleep, the command is assumed to suceeed, and the value
   * held by the node is updated directly.  This will be reverted by a future status message from the device
   * if the Z-Wave message actually failed to get through.  Notification callbacks will be sent in both cases.
   * \param _id The unique identifier of the integer value.
   * \param _value The new value of the integer.
   * \return true if the value was set.  Returns false if the value is not a ValueID::ValueType_Int. The type can be tested with a call to ValueID::GetType.
   * 
   * Parameters:
   *  - _id
   *  - _value
   */
  SetValueInt32(_id *RemoteValueID, _value int32) (retval191 bool, err os.Error)
  /**
   * \brief Sets the value of a 16-bit signed integer.
   * Due to the possibility of a device being asleep, the command is assumed to suceeed, and the value
   * held by the node is updated directly.  This will be reverted by a future status message from the device
   * if the Z-Wave message actually failed to get through.  Notification callbacks will be sent in both cases.
   * \param _id The unique identifier of the integer value.
   * \param _value The new value of the integer.
   * \return true if the value was set.  Returns false if the value is not a ValueID::ValueType_Short. The type can be tested with a call to ValueID::GetType.
   * 
   * Parameters:
   *  - _id
   *  - _value
   */
  SetValueInt16(_id *RemoteValueID, _value int16) (retval192 bool, err os.Error)
  /**
   * \brief Sets the value from a string, regardless of type.
   * Due to the possibility of a device being asleep, the command is assumed to suceeed, and the value
   * held by the node is updated directly.  This will be reverted by a future status message from the device
   * if the Z-Wave message actually failed to get through.  Notification callbacks will be sent in both cases.
   * \param _id The unique identifier of the integer value.
   * \param _value The new value of the string.
   * \return true if the value was set.  Returns false if the value could not be parsed into the correct type for the value.
   * 
   * Parameters:
   *  - _id
   *  - _value
   */
  SetValueString(_id *RemoteValueID, _value string) (retval193 bool, err os.Error)
  /**
   * \brief Sets the selected item in a list.
   * Due to the possibility of a device being asleep, the command is assumed to suceeed, and the value
   * held by the node is updated directly.  This will be reverted by a future status message from the device
   * if the Z-Wave message actually failed to get through.  Notification callbacks will be sent in both cases.
   * \param _id The unique identifier of the list value.
   * \param _selectedItem A string matching the new selected item in the list.
   * \return true if the value was set.  Returns false if the selection is not in the list, or if the value is not a ValueID::ValueType_List.
   * The type can be tested with a call to ValueID::GetType
   * 
   * Parameters:
   *  - _id
   *  - _selectedItem
   */
  SetValueListSelection(_id *RemoteValueID, _selectedItem string) (retval194 bool, err os.Error)
  /**
   * \brief Starts an activity in a device.
   * Since buttons are write-only values that do not report a state, no notification callbacks are sent.
   * \param _id The unique identifier of the integer value.
   * \return true if the activity was started.  Returns false if the value is not a ValueID::ValueType_Button. The type can be tested with a call to ValueID::GetType.
   * 
   * Parameters:
   *  - _id
   */
  PressButton(_id *RemoteValueID) (retval195 bool, err os.Error)
  /**
   * \brief Stops an activity in a device.
   * Since buttons are write-only values that do not report a state, no notification callbacks are sent.
   * \param _id The unique identifier of the integer value.
   * \return true if the activity was stopped.  Returns false if the value is not a ValueID::ValueType_Button. The type can be tested with a call to ValueID::GetType.
   * 
   * Parameters:
   *  - _id
   */
  ReleaseButton(_id *RemoteValueID) (retval196 bool, err os.Error)
  /**
   * \brief Get the number of switch points defined in a schedule.
   * \param _id The unique identifier of the schedule value.
   * \return the number of switch points defined in this schedule.  Returns zero if the value is not a ValueID::ValueType_Schedule. The type can be tested with a call to ValueID::GetType.
   * 
   * Parameters:
   *  - _id
   */
  GetNumSwitchPoints(_id *RemoteValueID) (retval197 byte, err os.Error)
  /**
   * \brief Set a switch point in the schedule.
   * Inserts a new switch point into the schedule, unless a switch point already exists at the specified
   * time in which case that switch point is updated with the new setback value instead.
   * A maximum of nine switch points can be set in the schedule.
   * \param _id The unique identifier of the schedule value.
   * \param _hours The hours part of the time when the switch point will trigger.  The time is set using
   * the 24-hour clock, so this value must be between 0 and 23.
   * \param _minutes The minutes part of the time when the switch point will trigger.  This value must be
   * between 0 and 59.
   * \param _setback The setback in tenths of a degree Celsius.  The setback value can range from -128 (-12.8C)
   * to 120 (12.0C).  There are two special setback values - 121 is used to set Frost Protection mode, and
   * 122 is used to set Energy Saving mode.
   * \return true if successful.  Returns false if the value is not a ValueID::ValueType_Schedule. The type can be tested with a call to ValueID::GetType.
   * \see GetNumSwitchPoints, RemoveSwitchPoint, ClearSwitchPoints
   * 
   * Parameters:
   *  - _id
   *  - _hours
   *  - _minutes
   *  - _setback
   */
  SetSwitchPoint(_id *RemoteValueID, _hours byte, _minutes byte, _setback byte) (retval198 bool, err os.Error)
  /**
   * \brief Remove a switch point from the schedule.
   * Removes the switch point at the specified time from the schedule.
   * \param _id The unique identifier of the schedule value.
   * \param _hours The hours part of the time when the switch point will trigger.  The time is set using
   * the 24-hour clock, so this value must be between 0 and 23.
   * \param _minutes The minutes part of the time when the switch point will trigger.  This value must be
   * between 0 and 59.
   * \return true if successful.  Returns false if the value is not a ValueID::ValueType_Schedule or if there
   * is not switch point with the specified time values. The type can be tested with a call to ValueID::GetType.
   * \see GetNumSwitchPoints, SetSwitchPoint, ClearSwitchPoints
   * 
   * Parameters:
   *  - _id
   *  - _hours
   *  - _minutes
   */
  RemoveSwitchPoint(_id *RemoteValueID, _hours byte, _minutes byte) (retval199 bool, err os.Error)
  /**
   * \brief Clears all switch points from the schedule.
   * \param _id The unique identifier of the schedule value.
   * \see GetNumSwitchPoints, SetSwitchPoint, RemoveSwitchPoint
   * 
   * Parameters:
   *  - _id
   */
  ClearSwitchPoints(_id *RemoteValueID) (err os.Error)
  /**
   * \brief Gets switch point data from the schedule.
   * Retrieves the time and setback values from a switch point in the schedule.
   * \param _id The unique identifier of the schedule value.
   * \param _idx The index of the switch point, between zero and one less than the value
   * returned by GetNumSwitchPoints.
   * \param o_hours a pointer to a uint8 that will be filled with the hours part of the switch point data.
   * \param o_minutes a pointer to a uint8 that will be filled with the minutes part of the switch point data.
   * \param o_setback a pointer to an int8 that will be filled with the setback value.  This can range from -128
   * (-12.8C)to 120 (12.0C).  There are two special setback values - 121 is used to set Frost Protection mode, and
   * 122 is used to set Energy Saving mode.
   * \return true if successful.  Returns false if the value is not a ValueID::ValueType_Schedule. The type can be tested with a call to ValueID::GetType.
   * \see GetNumSwitchPoints
   * 
   * Parameters:
   *  - _id
   *  - _idx
   */
  GetSwitchPoint(_id *RemoteValueID, _idx byte) (retval201 *GetSwitchPointReturnStruct, err os.Error)
  /**
   * \brief Switch all devices on.
   * All devices that support the SwitchAll command class will be turned on.
   * 
   * Parameters:
   *  - _homeId
   */
  SwitchAllOn(_homeId int32) (err os.Error)
  /**
   * \brief Switch all devices off.
   * All devices that support the SwitchAll command class will be turned off.
   * 
   * Parameters:
   *  - _homeId
   */
  SwitchAllOff(_homeId int32) (err os.Error)
  /**
   * \brief Set the value of a configurable parameter in a device.
   * Some devices have various parameters that can be configured to control the device behaviour.
   * These are not reported by the device over the Z-Wave network, but can usually be found in
   * the device's user manual.
   * This method returns immediately, without waiting for confirmation from the device that the
   * change has been made.
   * \param _homeId The Home ID of the Z-Wave controller that manages the node.
   * \param _nodeId The ID of the node to configure.
   * \param _param The index of the parameter.
   * \param _value The value to which the parameter should be set.
   * \param _size Is an optional number of bytes to be sent for the paramter _value. Defaults to 2.
   * \return true if the a message setting the value was sent to the device.
   * \see RequestConfigParam
   * 
   * Parameters:
   *  - _homeId
   *  - _nodeId
   *  - _param
   *  - _value
   *  - _size
   */
  SetConfigParam(_homeId int32, _nodeId byte, _param byte, _value int32, _size byte) (retval204 bool, err os.Error)
  /**
   * \brief Request the value of a configurable parameter from a device.
   * Some devices have various parameters that can be configured to control the device behaviour.
   * These are not reported by the device over the Z-Wave network, but can usually be found in
   * the device's user manual.
   * This method requests the value of a parameter from the device, and then returns immediately,
   * without waiting for a response.  If the parameter index is valid for this device, and the
   * device is awake, the value will eventually be reported via a ValueChanged notification callback.
   * The ValueID reported in the callback will have an index set the same as _param and a command class
   * set to the same value as returned by a call to Configuration::StaticGetCommandClassId.
   * \param _homeId The Home ID of the Z-Wave controller that manages the node.
   * \param _nodeId The ID of the node to configure.
   * \param _param The index of the parameter.
   * \see SetConfigParam, ValueID, Notification
   * 
   * Parameters:
   *  - _homeId
   *  - _nodeId
   *  - _param
   */
  RequestConfigParam(_homeId int32, _nodeId byte, _param byte) (err os.Error)
  /**
   * \brief Request the values of all known configurable parameters from a device.
   * \param _homeId The Home ID of the Z-Wave controller that manages the node.
   * \param _nodeId The ID of the node to configure.
   * \see SetConfigParam, ValueID, Notification
   * 
   * Parameters:
   *  - _homeId
   *  - _nodeId
   */
  RequestAllConfigParams(_homeId int32, _nodeId byte) (err os.Error)
  /**
   * \brief Gets the number of association groups reported by this node
   * In Z-Wave, groups are numbered starting from one.  For example, if a call to GetNumGroups returns 4, the _groupIdx
   * value to use in calls to GetAssociations, AddAssociation and RemoveAssociation will be a number between 1 and 4.
   * \param _homeId The Home ID of the Z-Wave controller that manages the node.
   * \param _nodeId The ID of the node whose groups we are interested in.
   * \return The number of groups.
   * \see GetAssociations, GetMaxAssociations, AddAssociation, RemoveAssociation
   * 
   * Parameters:
   *  - _homeId
   *  - _nodeId
   */
  GetNumGroups(_homeId int32, _nodeId byte) (retval207 byte, err os.Error)
  /**
   * \brief Gets the associations for a group.
   * Makes a copy of the list of associated nodes in the group, and returns it in an array of uint8's.
   * The caller is responsible for freeing the array memory with a call to delete [].
   * \param _homeId The Home ID of the Z-Wave controller that manages the node.
   * \param _nodeId The ID of the node whose associations we are interested in.
   * \param _groupIdx One-based index of the group (because Z-Wave product manuals use one-based group numbering).
   * \param o_associations If the number of associations returned is greater than zero, o_associations will be set to point to an array containing the IDs of the associated nodes.
   * \return The number of nodes in the associations array.  If zero, the array will point to NULL, and does not need to be deleted.
   * \see GetNumGroups, AddAssociation, RemoveAssociation, GetMaxAssociations
   * 
   * Parameters:
   *  - _homeId
   *  - _nodeId
   *  - _groupIdx
   */
  GetAssociations(_homeId int32, _nodeId byte, _groupIdx byte) (retval208 *GetAssociationsReturnStruct, err os.Error)
  /**
   * \brief Gets the maximum number of associations for a group.
   * \param _homeId The Home ID of the Z-Wave controller that manages the node.
   * \param _nodeId The ID of the node whose associations we are interested in.
   * \param _groupIdx one-based index of the group (because Z-Wave product manuals use one-based group numbering).
   * \return The maximum number of nodes that can be associated into the group.
   * \see GetNumGroups, AddAssociation, RemoveAssociation, GetAssociations
   * 
   * Parameters:
   *  - _homeId
   *  - _nodeId
   *  - _groupIdx
   */
  GetMaxAssociations(_homeId int32, _nodeId byte, _groupIdx byte) (retval209 byte, err os.Error)
  /**
   * \brief Returns a label for the particular group of a node.
   * This label is populated by the device specific configuration files.
   * \param _homeId The Home ID of the Z-Wave controller that manages the node.
   * \param _nodeId The ID of the node whose associations are to be changed.
   * \param _groupIdx One-based index of the group (because Z-Wave product manuals use one-based group numbering).
   * \see GetNumGroups, GetAssociations, GetMaxAssociations, AddAssociation
   * 
   * Parameters:
   *  - _homeId
   *  - _nodeId
   *  - _groupIdx
   */
  GetGroupLabel(_homeId int32, _nodeId byte, _groupIdx byte) (retval210 string, err os.Error)
  /**
   * \brief Adds a node to an association group.
   * Due to the possibility of a device being asleep, the command is assumed to suceeed, and the association data
   * held in this class is updated directly.  This will be reverted by a future Association message from the device
   * if the Z-Wave message actually failed to get through.  Notification callbacks will be sent in both cases.
   * \param _homeId The Home ID of the Z-Wave controller that manages the node.
   * \param _nodeId The ID of the node whose associations are to be changed.
   * \param _groupIdx One-based index of the group (because Z-Wave product manuals use one-based group numbering).
   * \param _targetNodeId Identifier for the node that will be added to the association group.
   * \see GetNumGroups, GetAssociations, GetMaxAssociations, RemoveAssociation
   * 
   * Parameters:
   *  - _homeId
   *  - _nodeId
   *  - _groupIdx
   *  - _targetNodeId
   */
  AddAssociation(_homeId int32, _nodeId byte, _groupIdx byte, _targetNodeId byte) (err os.Error)
  /**
   * \brief Removes a node from an association group.
   * Due to the possibility of a device being asleep, the command is assumed to suceeed, and the association data
   * held in this class is updated directly.  This will be reverted by a future Association message from the device
   * if the Z-Wave message actually failed to get through.   Notification callbacks will be sent in both cases.
   * \param _homeId The Home ID of the Z-Wave controller that manages the node.
   * \param _nodeId The ID of the node whose associations are to be changed.
   * \param _groupIdx One-based index of the group (because Z-Wave product manuals use one-based group numbering).
   * \param _targetNodeId Identifier for the node that will be removed from the association group.
   * \see GetNumGroups, GetAssociations, GetMaxAssociations, AddAssociation
   * 
   * Parameters:
   *  - _homeId
   *  - _nodeId
   *  - _groupIdx
   *  - _targetNodeId
   */
  RemoveAssociation(_homeId int32, _nodeId byte, _groupIdx byte, _targetNodeId byte) (err os.Error)
  /**
   * \brief Hard Reset a PC Z-Wave Controller.
   * Resets a controller and erases its network configuration settings.  The controller becomes a primary controller ready to add devices to a new network.
   * \param _homeId The Home ID of the Z-Wave controller to be reset.
   * \see SoftReset
   * 
   * Parameters:
   *  - _homeId
   */
  ResetController(_homeId int32) (err os.Error)
  /**
   * \brief Soft Reset a PC Z-Wave Controller.
   * Resets a controller without erasing its network configuration settings.
   * \param _homeId The Home ID of the Z-Wave controller to be reset.
   * \see SoftReset
   * 
   * Parameters:
   *  - _homeId
   */
  SoftReset(_homeId int32) (err os.Error)
  /**
   * * \brief Start a controller command process.
   * * \param _homeId The Home ID of the Z-Wave controller.
   * * \param _command The command to be sent to the controller.
   * * \param _callback pointer to a function that will be called at various stages during the command process
   * * \param _context pointer to user defined data that will be passed into to the callback function.  Defaults to NULL.
   * * \param _highPower used only with the AddDevice, AddController, RemoveDevice and RemoveController commands.
   * * Usually when adding or removing devices, the controller operates at low power so that the controller must
   * * be physically close to the device for security reasons.  If _highPower is true, the controller will
   * * operate at normal power levels instead.  Defaults to false.
   * * \param _nodeId used only with the ReplaceFailedNode command, to specify the node that is going to be replaced.
   * * \return true if the command was accepted and has started.
   * * \see CancelControllerCommand, HasNodeFailed, RemoveFailedNode, Driver::ControllerCommand, Driver::pfnControllerCallback_t,
   * * to notify the user of progress or to request actions on the user's part.  Defaults to NULL.
   * * <p> Commands
   * * - Driver::ControllerCommand_AddController - Add a new secondary controller to the Z-Wave network.
   * * - Driver::ControllerCommand_AddDevice - Add a new device (but not a controller) to the Z-Wave network.
   * * - Driver::ControllerCommand_CreateNewPrimary (Not yet implemented)
   * * - Driver::ControllerCommand_ReceiveConfiguration -
   * * - Driver::ControllerCommand_RemoveController - remove a controller from the Z-Wave network.
   * * - Driver::ControllerCommand_RemoveDevice - remove a device (but not a controller) from the Z-Wave network.
   *  * - Driver::ControllerCommand_RemoveFailedNode - move a node to the controller's list of failed nodes.  The node must actually
   * * have failed or have been disabled since the command will fail if it responds.  A node must be in the controller's failed nodes list
   * * for ControllerCommand_ReplaceFailedNode to work.
   * * - Driver::ControllerCommand_HasNodeFailed - Check whether a node is in the controller's failed nodes list.
   * * - Driver::ControllerCommand_ReplaceFailedNode - replace a failed device with another. If the node is not in
   * * the controller's failed nodes list, or the node responds, this command will fail.
   * * - Driver:: ControllerCommand_TransferPrimaryRole	(Not yet implemented) - Add a new controller to the network and
   * * make it the primary.  The existing primary will become a secondary controller.
   * * - Driver::ControllerCommand_RequestNetworkUpdate - Update the controller with network information from the SUC/SIS.
   * * - Driver::ControllerCommand_RequestNodeNeighborUpdate - Get a node to rebuild its neighbour list.  This method also does ControllerCommand_RequestNodeNeighbors afterwards.
   * * - Driver::ControllerCommand_AssignReturnRoute - Assign a network return route to a device.
   * * - Driver::ControllerCommand_DeleteAllReturnRoutes - Delete all network return routes from a device.
   * * <p> Callbacks
   * * - Driver::ControllerState_Waiting, the controller is waiting for a user action.  A notice should be displayed
   * * to the user at this point, telling them what to do next.
   * * For the add, remove, replace and transfer primary role commands, the user needs to be told to press the
   * * inclusion button on the device that  is going to be added or removed.  For ControllerCommand_ReceiveConfiguration,
   * * they must set their other controller to send its data, and for ControllerCommand_CreateNewPrimary, set the other
   * * controller to learn new data.
   * * - Driver::ControllerState_InProgress - the controller is in the process of adding or removing the chosen node.  It is now too late to cancel the command.
   * * - Driver::ControllerState_Complete - the controller has finished adding or removing the node, and the command is complete.
   * * - Driver::ControllerState_Failed - will be sent if the command fails for any reason.
   * 
   * Parameters:
   *  - _homeId
   *  - _command
   *  - _highPower
   *  - _nodeId
   *  - _arg
   */
  BeginControllerCommand(_homeId int32, _command DriverControllerCommand, _highPower bool, _nodeId byte, _arg byte) (retval215 bool, err os.Error)
  /**
   * \brief Cancels any in-progress command running on a controller.
   * \param _homeId The Home ID of the Z-Wave controller.
   * \return true if a command was running and was cancelled.
   * \see BeginControllerCommand
   * 
   * Parameters:
   *  - _homeId
   */
  CancelControllerCommand(_homeId int32) (retval216 bool, err os.Error)
  /**
   * \brief Gets the number of scenes that have been defined.
   * \return The number of scenes.
   * \see GetAllScenes, CreateScene, RemoveScene, AddSceneValue, RemoveSceneValue, SceneGetValues, SceneGetValueAsBool, SceneGetValueAsByte, SceneGetValueAsFloat, SceneGetValueAsInt, SceneGetValueAsShort, SceneGetValueAsString, SetSceneValue, GetSceneLabel, SetSceneLabel, SceneExists, ActivateScene
   */
  GetNumScenes() (retval217 byte, err os.Error)
  /**
   * \brief Gets a list of all the SceneIds.
   * \param _sceneIds is a pointer to an array of integers.
   * \return The number of scenes. If zero, _sceneIds will be NULL and doesn't need to be freed.
   * \see GetNumScenes, CreateScene, RemoveScene, AddSceneValue, RemoveSceneValue, SceneGetValues, SceneGetValueAsBool, SceneGetValueAsByte, SceneGetValueAsFloat, SceneGetValueAsInt, SceneGetValueAsShort, SceneGetValueAsString, SetSceneValue, GetSceneLabel, SetSceneLabel, SceneExists, ActivateScene
   */
  GetAllScenes() (retval218 *GetAllScenesReturnStruct, err os.Error)
  /**
   * \brief Create a new Scene passing in Scene ID
   * \return uint8 Scene ID used to reference the scene. 0 is failure result.
   * \see GetNumScenes, GetAllScenes, RemoveScene, AddSceneValue, RemoveSceneValue, SceneGetValues, SceneGetValueAsBool, SceneGetValueAsByte, SceneGetValueAsFloat, SceneGetValueAsInt, SceneGetValueAsShort, SceneGetValueAsString, SetSceneValue, GetSceneLabel, SetSceneLabel, SceneExists, ActivateScene
   * 
   */
  CreateScene() (retval219 byte, err os.Error)
  /**
   * \brief Remove an existing Scene.
   * \param _sceneId is an integer representing the unique Scene ID to be removed.
   * \return true if scene was removed.
   * \see GetNumScenes, GetAllScenes, CreateScene, AddSceneValue, RemoveSceneValue, SceneGetValues, SceneGetValueAsBool, SceneGetValueAsByte, SceneGetValueAsFloat, SceneGetValueAsInt, SceneGetValueAsShort, SceneGetValueAsString, SetSceneValue, GetSceneLabel, SetSceneLabel, SceneExists, ActivateScene
   * 
   * Parameters:
   *  - _sceneId
   */
  RemoveScene(_sceneId byte) (retval220 bool, err os.Error)
  /**
   * \brief Add a bool Value ID to an existing scene.
   * \param _sceneId is an integer representing the unique Scene ID.
   * \param _valueId is the Value ID to be added.
   * \param _value is the bool value to be saved.
   * \return true if Value ID was added.
   * \see GetNumScenes, GetAllScenes, CreateScene, RemoveScene, RemoveSceneValue, SceneGetValues, SceneGetValueAsBool, SceneGetValueAsByte, SceneGetValueAsFloat, SceneGetValueAsInt, SceneGetValueAsShort, SceneGetValueAsString, SetSceneValue, GetSceneLabel, SetSceneLabel, SceneExists, ActivateScene
   * 
   * Parameters:
   *  - _sceneId
   *  - _valueId
   *  - _value
   */
  AddSceneValueBool(_sceneId byte, _valueId *RemoteValueID, _value bool) (retval221 bool, err os.Error)
  /**
   * \brief Add a byte Value ID to an existing scene.
   * \param _sceneId is an integer representing the unique Scene ID.
   * \param _valueId is the Value ID to be added.
   * \param _value is the byte value to be saved.
   * \return true if Value ID was added.
   * \see GetNumScenes, GetAllScenes, CreateScene, RemoveScene, RemoveSceneValue, SceneGetValues, SceneGetValueAsBool, SceneGetValueAsByte, SceneGetValueAsFloat, SceneGetValueAsInt, SceneGetValueAsShort, SceneGetValueAsString, SetSceneValue, GetSceneLabel, SetSceneLabel, SceneExists, ActivateScene
   * 
   * Parameters:
   *  - _sceneId
   *  - _valueId
   *  - _value
   */
  AddSceneValueUint8(_sceneId byte, _valueId *RemoteValueID, _value byte) (retval222 bool, err os.Error)
  /**
   * \brief Add a decimal Value ID to an existing scene.
   * \param _sceneId is an integer representing the unique Scene ID.
   * \param _valueId is the Value ID to be added.
   * \param _value is the float value to be saved.
   * \return true if Value ID was added.
   * \see GetNumScenes, GetAllScenes, CreateScene, RemoveScene, RemoveSceneValue, SceneGetValues, SceneGetValueAsBool, SceneGetValueAsByte, SceneGetValueAsFloat, SceneGetValueAsInt, SceneGetValueAsShort, SceneGetValueAsString, SetSceneValue, GetSceneLabel, SetSceneLabel, SceneExists, ActivateScene
   * 
   * Parameters:
   *  - _sceneId
   *  - _valueId
   *  - _value
   */
  AddSceneValueFloat(_sceneId byte, _valueId *RemoteValueID, _value float64) (retval223 bool, err os.Error)
  /**
   * \brief Add a 32-bit signed integer Value ID to an existing scene.
   * \param _sceneId is an integer representing the unique Scene ID.
   * \param _valueId is the Value ID to be added.
   * \param _value is the int32 value to be saved.
   * \return true if Value ID was added.
   * \see GetNumScenes, GetAllScenes, CreateScene, RemoveScene, RemoveSceneValue, SceneGetValues, SceneGetValueAsBool, SceneGetValueAsByte, SceneGetValueAsFloat, SceneGetValueAsInt, SceneGetValueAsShort, SceneGetValueAsString, SetSceneValue, GetSceneLabel, SetSceneLabel, SceneExists, ActivateScene
   * 
   * Parameters:
   *  - _sceneId
   *  - _valueId
   *  - _value
   */
  AddSceneValueInt32(_sceneId byte, _valueId *RemoteValueID, _value int32) (retval224 bool, err os.Error)
  /**
   * \brief Add a 16-bit signed integer Value ID to an existing scene.
   * \param _sceneId is an integer representing the unique Scene ID.
   * \param _valueId is the Value ID to be added.
   * \param _value is the int16 value to be saved.
   * \return true if Value ID was added.
   * \see GetNumScenes, GetAllScenes, CreateScene, RemoveScene, RemoveSceneValue, SceneGetValues, SceneGetValueAsBool, SceneGetValueAsByte, SceneGetValueAsFloat, SceneGetValueAsInt, SceneGetValueAsShort, SceneGetValueAsString, SetSceneValue, GetSceneLabel, SetSceneLabel, SceneExists, ActivateScene
   * 
   * Parameters:
   *  - _sceneId
   *  - _valueId
   *  - _value
   */
  AddSceneValueInt16(_sceneId byte, _valueId *RemoteValueID, _value int16) (retval225 bool, err os.Error)
  /**
   * \brief Add a string Value ID to an existing scene.
   * \param _sceneId is an integer representing the unique Scene ID.
   * \param _valueId is the Value ID to be added.
   * \param _value is the string value to be saved.
   * \return true if Value ID was added.
   * \see GetNumScenes, GetAllScenes, CreateScene, RemoveScene, RemoveSceneValue, SceneGetValues, SceneGetValueAsBool, SceneGetValueAsByte, SceneGetValueAsFloat, SceneGetValueAsInt, SceneGetValueAsShort, SceneGetValueAsString, SetSceneValue, GetSceneLabel, SetSceneLabel, SceneExists, ActivateScene
   * 
   * Parameters:
   *  - _sceneId
   *  - _valueId
   *  - _value
   */
  AddSceneValueString(_sceneId byte, _valueId *RemoteValueID, _value string) (retval226 bool, err os.Error)
  /**
   * \brief Add the selected item list Value ID to an existing scene (as a string).
   * \param _sceneId is an integer representing the unique Scene ID.
   * \param _valueId is the Value ID to be added.
   * \param _value is the string value to be saved.
   * \return true if Value ID was added.
   * \see GetNumScenes, GetAllScenes, CreateScene, RemoveScene, AddSceneValue, RemoveSceneValue, SceneGetValues, SceneGetValueAsBool, SceneGetValueAsByte, SceneGetValueAsFloat, SceneGetValueAsInt, SceneGetValueAsShort, SceneGetValueAsString, SetSceneValue, GetSceneLabel, SetSceneLabel, SceneExists, ActivateScene
   * 
   * Parameters:
   *  - _sceneId
   *  - _valueId
   *  - _value
   */
  AddSceneValueListSelectionString(_sceneId byte, _valueId *RemoteValueID, _value string) (retval227 bool, err os.Error)
  /**
   * \brief Add the selected item list Value ID to an existing scene (as a integer).
   * \param _sceneId is an integer representing the unique Scene ID.
   * \param _valueId is the Value ID to be added.
   * \param _value is the integer value to be saved.
   * \return true if Value ID was added.
   * \see GetNumScenes, GetAllScenes, CreateScene, RemoveScene, AddSceneValue, RemoveSceneValue, SceneGetValues, SceneGetValueAsBool, SceneGetValueAsByte, SceneGetValueAsFloat, SceneGetValueAsInt, SceneGetValueAsShort, SceneGetValueAsString, SetSceneValue, GetSceneLabel, SetSceneLabel, SceneExists, ActivateScene
   * 
   * Parameters:
   *  - _sceneId
   *  - _valueId
   *  - _value
   */
  AddSceneValueListSelectionInt32(_sceneId byte, _valueId *RemoteValueID, _value int32) (retval228 bool, err os.Error)
  /**
   * \brief Remove the Value ID from an existing scene.
   * \param _sceneId is an integer representing the unique Scene ID.
   * \param _valueId is the Value ID to be removed.
   * \return true if Value ID was removed.
   * \see GetNumScenes, GetAllScenes, CreateScene, RemoveScene, AddSceneValue, SceneGetValues, SceneGetValueAsBool, SceneGetValueAsByte, SceneGetValueAsFloat, SceneGetValueAsInt, SceneGetValueAsShort, SceneGetValueAsString, SetSceneValue, GetSceneLabel, SetSceneLabel, SceneExists, ActivateScene
   * 
   * Parameters:
   *  - _sceneId
   *  - _valueId
   */
  RemoveSceneValue(_sceneId byte, _valueId *RemoteValueID) (retval229 bool, err os.Error)
  /**
   * \brief Retrieves the scene's list of values.
   * \param _sceneId The Scene ID of the scene to retrieve the value from.
   * \param o_value Pointer to an array of ValueIDs if return is non-zero.
   * \return The number of nodes in the o_value array. If zero, the array will point to NULL and does not need to be deleted.
   * \see GetNumScenes, GetAllScenes, CreateScene, RemoveScene, AddSceneValue, RemoveSceneValue, SceneGetValueAsBool, SceneGetValueAsByte, SceneGetValueAsFloat, SceneGetValueAsInt, SceneGetValueAsShort, SceneGetValueAsString, SetSceneValue, GetSceneLabel, SetSceneLabel, SceneExists, ActivateScene
   * 
   * Parameters:
   *  - _sceneId
   */
  SceneGetValues(_sceneId byte) (retval230 *SceneGetValuesReturnStruct, err os.Error)
  /**
   * \brief Retrieves a scene's value as a bool.
   * \param _sceneId The Scene ID of the scene to retrieve the value from.
   * \param _valueId The Value ID of the value to retrieve.
   * \param o_value Pointer to a bool that will be filled with the returned value.
   * \return true if the value was obtained.
   * \see GetNumScenes, GetAllScenes, CreateScene, RemoveScene, AddSceneValue, RemoveSceneValue, SceneGetValues, SceneGetValueAsByte, SceneGetValueAsFloat, SceneGetValueAsInt, SceneGetValueAsShort, SceneGetValueAsString, SetSceneValue, GetSceneLabel, SetSceneLabel, SceneExists, ActivateScene
   * 
   * Parameters:
   *  - _sceneId
   *  - _valueId
   */
  SceneGetValueAsBool(_sceneId byte, _valueId *RemoteValueID) (retval231 *BoolBool, err os.Error)
  /**
   * \brief Retrieves a scene's value as an 8-bit unsigned integer.
   * \param _sceneId The Scene ID of the scene to retrieve the value from.
   * \param _valueId The Value ID of the value to retrieve.
   * \param o_value Pointer to a uint8 that will be filled with the returned value.
   * \return true if the value was obtained.
   * \see GetNumScenes, GetAllScenes, CreateScene, RemoveScene, AddSceneValue, RemoveSceneValue, SceneGetValues, SceneGetValueAsBool, SceneGetValueAsFloat, SceneGetValueAsInt, SceneGetValueAsShort, SceneGetValueAsString, SetSceneValue, GetSceneLabel, SetSceneLabel, SceneExists, ActivateScene
   * 
   * Parameters:
   *  - _sceneId
   *  - _valueId
   */
  SceneGetValueAsByte(_sceneId byte, _valueId *RemoteValueID) (retval232 *BoolUInt8, err os.Error)
  /**
   * \brief Retrieves a scene's value as a float.
   * \param _sceneId The Scene ID of the scene to retrieve the value from.
   * \param _valueId The Value ID of the value to retrieve.
   * \param o_value Pointer to a float that will be filled with the returned value.
   * \return true if the value was obtained.
   * \see GetNumScenes, GetAllScenes, CreateScene, RemoveScene, AddSceneValue, RemoveSceneValue, SceneGetValues, SceneGetValueAsBool, SceneGetValueAsByte, SceneGetValueAsInt, SceneGetValueAsShort, SceneGetValueAsString, SetSceneValue, GetSceneLabel, SetSceneLabel, SceneExists, ActivateScene
   * 
   * Parameters:
   *  - _sceneId
   *  - _valueId
   */
  SceneGetValueAsFloat(_sceneId byte, _valueId *RemoteValueID) (retval233 *BoolFloat, err os.Error)
  /**
   * \brief Retrieves a scene's value as a 32-bit signed integer.
   * \param _sceneId The Scene ID of the scene to retrieve the value from.
   * \param _valueId The Value ID of the value to retrieve.
   * \param o_value Pointer to a int32 that will be filled with the returned value.
   * \return true if the value was obtained.
   * \see GetNumScenes, GetAllScenes, CreateScene, RemoveScene, AddSceneValue, RemoveSceneValue, SceneGetValues, SceneGetValueAsBool, SceneGetValueAsByte, SceneGetValueAsFloat, SceneGetValueAsShort, SceneGetValueAsString, SetSceneValue, GetSceneLabel, SetSceneLabel, SceneExists, ActivateScene
   * 
   * Parameters:
   *  - _sceneId
   *  - _valueId
   */
  SceneGetValueAsInt(_sceneId byte, _valueId *RemoteValueID) (retval234 *BoolInt, err os.Error)
  /**
   * \brief Retrieves a scene's value as a 16-bit signed integer.
   * \param _sceneId The Scene ID of the scene to retrieve the value from.
   * \param _valueId The Value ID of the value to retrieve.
   * \param o_value Pointer to a int16 that will be filled with the returned value.
   * \return true if the value was obtained.
   * \see GetNumScenes, GetAllScenes, CreateScene, RemoveScene, AddSceneValue, RemoveSceneValue, SceneGetValues, SceneGetValueAsBool, SceneGetValueAsByte, SceneGetValueAsFloat, SceneGetValueAsInt, SceneGetValueAsString, SetSceneValue, GetSceneLabel, SetSceneLabel, SceneExists, ActivateScene
   * 
   * Parameters:
   *  - _sceneId
   *  - _valueId
   */
  SceneGetValueAsShort(_sceneId byte, _valueId *RemoteValueID) (retval235 *BoolInt16, err os.Error)
  /**
   * \brief Retrieves a scene's value as a string.
   * \param _sceneId The Scene ID of the scene to retrieve the value from.
   * \param _valueId The Value ID of the value to retrieve.
   * \param o_value Pointer to a string that will be filled with the returned value.
   * \return true if the value was obtained.
   * \see GetNumScenes, GetAllScenes, CreateScene, RemoveScene, AddSceneValue, RemoveSceneValue, SceneGetValues, SceneGetValueAsBool, SceneGetValueAsByte, SceneGetValueAsFloat, SceneGetValueAsInt, SceneGetValueAsShort, SetSceneValue, GetSceneLabel, SetSceneLabel, SceneExists, ActivateScene
   * 
   * Parameters:
   *  - _sceneId
   *  - _valueId
   */
  SceneGetValueAsString(_sceneId byte, _valueId *RemoteValueID) (retval236 *BoolString, err os.Error)
  /**
   * \brief Retrieves a scene's value as a list (as a string).
   * \param _sceneId The Scene ID of the scene to retrieve the value from.
   * \param _valueId The Value ID of the value to retrieve.
   * \param o_value Pointer to a string that will be filled with the returned value.
   * \return true if the value was obtained.
   * \see GetNumScenes, GetAllScenes, CreateScene, RemoveScene, AddSceneValue, RemoveSceneValue, SceneGetValues, SceneGetValueAsBool, SceneGetValueAsByte, SceneGetValueAsFloat, SceneGetValueAsInt, SceneGetValueAsShort, SceneGetValueAsString, SetSceneValue, GetSceneLabel, SetSceneLabel, SceneExists, ActivateScene
   * 
   * Parameters:
   *  - _sceneId
   *  - _valueId
   */
  SceneGetValueListSelectionString(_sceneId byte, _valueId *RemoteValueID) (retval237 *BoolString, err os.Error)
  /**
   * \brief Retrieves a scene's value as a list (as a integer).
   * \param _sceneId The Scene ID of the scene to retrieve the value from.
   * \param _valueId The Value ID of the value to retrieve.
   * \param o_value Pointer to a integer that will be filled with the returned value.
   * \return true if the value was obtained.
   * \see GetNumScenes, GetAllScenes, CreateScene, RemoveScene, AddSceneValue, RemoveSceneValue, SceneGetValues, SceneGetValueAsBool, SceneGetValueAsByte, SceneGetValueAsFloat, SceneGetValueAsInt, SceneGetValueAsShort, SceneGetValueAsString, SetSceneValue, GetSceneLabel, SetSceneLabel, SceneExists, ActivateScene
   * 
   * Parameters:
   *  - _sceneId
   *  - _valueId
   */
  SceneGetValueListSelectionInt32(_sceneId byte, _valueId *RemoteValueID) (retval238 *BoolInt, err os.Error)
  /**
   * \brief Set a bool Value ID to an existing scene's ValueID
   * \param _sceneId is an integer representing the unique Scene ID.
   * \param _valueId is the Value ID to be added.
   * \param _value is the bool value to be saved.
   * \return true if Value ID was added.
   * \see GetNumScenes, GetAllScenes, CreateScene, RemoveScene, AddSceneValue, RemoveSceneValue, SceneGetValues, SceneGetValueAsBool, SceneGetValueAsByte, SceneGetValueAsFloat, SceneGetValueAsInt, SceneGetValueAsShort, SceneGetValueAsString, GetSceneLabel, SetSceneLabel, SceneExists, ActivateScene
   * 
   * Parameters:
   *  - _sceneId
   *  - _valueId
   *  - _value
   */
  SetSceneValueBool(_sceneId byte, _valueId *RemoteValueID, _value bool) (retval239 bool, err os.Error)
  /**
   * \brief Set a byte Value ID to an existing scene's ValueID
   * \param _sceneId is an integer representing the unique Scene ID.
   * \param _valueId is the Value ID to be added.
   * \param _value is the byte value to be saved.
   * \return true if Value ID was added.
   * \see GetNumScenes, GetAllScenes, CreateScene, RemoveScene, AddSceneValue, RemoveSceneValue, SceneGetValues, SceneGetValueAsBool, SceneGetValueAsByte, SceneGetValueAsFloat, SceneGetValueAsInt, SceneGetValueAsShort, SceneGetValueAsString, GetSceneLabel, SetSceneLabel, SceneExists, ActivateScene
   * 
   * Parameters:
   *  - _sceneId
   *  - _valueId
   *  - _value
   */
  SetSceneValueUint8(_sceneId byte, _valueId *RemoteValueID, _value byte) (retval240 bool, err os.Error)
  /**
   * \brief Set a decimal Value ID to an existing scene's ValueID
   * \param _sceneId is an integer representing the unique Scene ID.
   * \param _valueId is the Value ID to be added.
   * \param _value is the float value to be saved.
   * \return true if Value ID was added.
   * \see GetNumScenes, GetAllScenes, CreateScene, RemoveScene, AddSceneValue, RemoveSceneValue, SceneGetValues, SceneGetValueAsBool, SceneGetValueAsByte, SceneGetValueAsFloat, SceneGetValueAsInt, SceneGetValueAsShort, SceneGetValueAsString, GetSceneLabel, SetSceneLabel, SceneExists, ActivateScene
   * 
   * Parameters:
   *  - _sceneId
   *  - _valueId
   *  - _value
   */
  SetSceneValueFloat(_sceneId byte, _valueId *RemoteValueID, _value float64) (retval241 bool, err os.Error)
  /**
   * \brief Set a 32-bit signed integer Value ID to an existing scene's ValueID
   * \param _sceneId is an integer representing the unique Scene ID.
   * \param _valueId is the Value ID to be added.
   * \param _value is the int32 value to be saved.
   * \return true if Value ID was added.
   * \see GetNumScenes, GetAllScenes, CreateScene, RemoveScene, AddSceneValue, RemoveSceneValue, SceneGetValues, SceneGetValueAsBool, SceneGetValueAsByte, SceneGetValueAsFloat, SceneGetValueAsInt, SceneGetValueAsShort, SceneGetValueAsString, GetSceneLabel, SetSceneLabel, SceneExists, ActivateScene
   * 
   * Parameters:
   *  - _sceneId
   *  - _valueId
   *  - _value
   */
  SetSceneValueInt32(_sceneId byte, _valueId *RemoteValueID, _value int32) (retval242 bool, err os.Error)
  /**
   * \brief Set a 16-bit integer Value ID to an existing scene's ValueID
   * \param _sceneId is an integer representing the unique Scene ID.
   * \param _valueId is the Value ID to be added.
   * \param _value is the int16 value to be saved.
   * \return true if Value ID was added.
   * \see GetNumScenes, GetAllScenes, CreateScene, RemoveScene, AddSceneValue, RemoveSceneValue, SceneGetValues, SceneGetValueAsBool, SceneGetValueAsByte, SceneGetValueAsFloat, SceneGetValueAsInt, SceneGetValueAsShort, SceneGetValueAsString, GetSceneLabel, SetSceneLabel, SceneExists, ActivateScene
   * 
   * Parameters:
   *  - _sceneId
   *  - _valueId
   *  - _value
   */
  SetSceneValueInt16(_sceneId byte, _valueId *RemoteValueID, _value int16) (retval243 bool, err os.Error)
  /**
   * \brief Set a string Value ID to an existing scene's ValueID
   * \param _sceneId is an integer representing the unique Scene ID.
   * \param _valueId is the Value ID to be added.
   * \param _value is the string value to be saved.
   * \return true if Value ID was added.
   * \see GetNumScenes, GetAllScenes, CreateScene, RemoveScene, AddSceneValue, RemoveSceneValue, SceneGetValues, SceneGetValueAsBool, SceneGetValueAsByte, SceneGetValueAsFloat, SceneGetValueAsInt, SceneGetValueAsShort, SceneGetValueAsString, GetSceneLabel, SetSceneLabel, SceneExists, ActivateScene
   * 
   * Parameters:
   *  - _sceneId
   *  - _valueId
   *  - _value
   */
  SetSceneValueString(_sceneId byte, _valueId *RemoteValueID, _value string) (retval244 bool, err os.Error)
  /**
   * \brief Set the list selected item Value ID to an existing scene's ValueID (as a string).
   * \param _sceneId is an integer representing the unique Scene ID.
   * \param _valueId is the Value ID to be added.
   * \param _value is the string value to be saved.
   * \return true if Value ID was added.
   * \see GetNumScenes, GetAllScenes, CreateScene, RemoveScene, AddSceneValue, RemoveSceneValue, SceneGetValues, SceneGetValueAsBool, SceneGetValueAsByte, SceneGetValueAsFloat, SceneGetValueAsInt, SceneGetValueAsShort, SceneGetValueAsString, SetSceneValue, GetSceneLabel, SetSceneLabel, SceneExists, ActivateScene
   * 
   * Parameters:
   *  - _sceneId
   *  - _valueId
   *  - _value
   */
  SetSceneValueListSelectionString(_sceneId byte, _valueId *RemoteValueID, _value string) (retval245 bool, err os.Error)
  /**
   * \brief Set the list selected item Value ID to an existing scene's ValueID (as a integer).
   * \param _sceneId is an integer representing the unique Scene ID.
   * \param _valueId is the Value ID to be added.
   * \param _value is the integer value to be saved.
   * \return true if Value ID was added.
   * \see GetNumScenes, GetAllScenes, CreateScene, RemoveScene, AddSceneValue, RemoveSceneValue, SceneGetValues, SceneGetValueAsBool, SceneGetValueAsByte, SceneGetValueAsFloat, SceneGetValueAsInt, SceneGetValueAsShort, SceneGetValueAsString, SetSceneValue, GetSceneLabel, SetSceneLabel, SceneExists, ActivateScene
   * 
   * Parameters:
   *  - _sceneId
   *  - _valueId
   *  - _value
   */
  SetSceneValueListSelectionInt32(_sceneId byte, _valueId *RemoteValueID, _value int32) (retval246 bool, err os.Error)
  /**
   * \brief Returns a label for the particular scene.
   * \param _sceneId The Scene ID
   * \return The label string.
   * \see GetNumScenes, GetAllScenes, CreateScene, RemoveScene, AddSceneValue, RemoveSceneValue, SceneGetValues, SceneGetValueAsBool, SceneGetValueAsByte, SceneGetValueAsFloat, SceneGetValueAsInt, SceneGetValueAsShort, SceneGetValueAsString, SetSceneValue, SetSceneLabel, SceneExists, ActivateScene
   * 
   * Parameters:
   *  - _sceneId
   */
  GetSceneLabel(_sceneId byte) (retval247 string, err os.Error)
  /**
   * \brief Sets a label for the particular scene.
   * \param _sceneId The Scene ID
   * \param _value The new value of the label.
   * \see GetNumScenes, GetAllScenes, CreateScene, RemoveScene, AddSceneValue, RemoveSceneValue, SceneGetValues, SceneGetValueAsBool, SceneGetValueAsByte, SceneGetValueAsFloat, SceneGetValueAsInt, SceneGetValueAsShort, SceneGetValueAsString, SetSceneValue, GetSceneLabel, SceneExists, ActivateScene
   * 
   * Parameters:
   *  - _sceneId
   *  - _value
   */
  SetSceneLabel(_sceneId byte, _value string) (err os.Error)
  /**
   * \brief Check if a Scene ID is defined.
   * \param _sceneId The Scene ID.
   * \return true if Scene ID exists.
   * \see GetNumScenes, GetAllScenes, CreateScene, RemoveScene, AddSceneValue, RemoveSceneValue, SceneGetValues, SceneGetValueAsBool, SceneGetValueAsByte, SceneGetValueAsFloat, SceneGetValueAsInt, SceneGetValueAsShort, SceneGetValueAsString, SetSceneValue, GetSceneLabel, SetSceneLabel, ActivateScene
   * 
   * Parameters:
   *  - _sceneId
   */
  SceneExists(_sceneId byte) (retval249 bool, err os.Error)
  /**
   * \brief Activate given scene to perform all its actions.
   * \param _sceneId The Scene ID.
   * \return true if it is successful.
   * \see GetNumScenes, GetAllScenes, CreateScene, RemoveScene, AddSceneValue, RemoveSceneValue, SceneGetValues, SceneGetValueAsBool, SceneGetValueAsByte, SceneGetValueAsFloat, SceneGetValueAsInt, SceneGetValueAsShort, SceneGetValueAsString, SetSceneValue, GetSceneLabel, SetSceneLabel, SceneExists
   * 
   * Parameters:
   *  - _sceneId
   */
  ActivateScene(_sceneId byte) (retval250 bool, err os.Error)
  SendAllValues() (err os.Error)
}

type RemoteManagerClient struct {
  Transport thrift.TTransport
  ProtocolFactory thrift.TProtocolFactory
  InputProtocol thrift.TProtocol
  OutputProtocol thrift.TProtocol
  SeqId int32
}

func NewRemoteManagerClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *RemoteManagerClient {
  return &RemoteManagerClient{Transport: t,
    ProtocolFactory: f,
    InputProtocol: f.GetProtocol(t),
    OutputProtocol: f.GetProtocol(t),
    SeqId: 0,
  }
}

func NewRemoteManagerClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *RemoteManagerClient {
  return &RemoteManagerClient{Transport: t,
    ProtocolFactory: nil,
    InputProtocol: iprot,
    OutputProtocol: oprot,
    SeqId: 0,
  }
}

/**
 * \name Configuration
 * For saving the Z-Wave network configuration so that the entire network does not need to be
 * polled every time the application starts.
 * 
 * Parameters:
 *  - _homeId
 */
func (p *RemoteManagerClient) WriteConfig(_homeId int32) (err os.Error) {
  err = p.SendWriteConfig(_homeId)
  if err != nil { return }
  return p.RecvWriteConfig()
}

func (p *RemoteManagerClient) SendWriteConfig(_homeId int32)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("WriteConfig", thrift.CALL, p.SeqId)
  args253 := NewWriteConfigArgs()
  args253._homeId = _homeId
  err = args253.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvWriteConfig() (err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error255 := thrift.NewTApplicationExceptionDefault()
    error256, err := error255.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error256
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result254 := NewWriteConfigResult()
  err = result254.Read(iprot)
  iprot.ReadMessageEnd()
  return
}

/**
 * \name Drivers
 * Methods for adding and removing drivers and obtaining basic controller information.
 * 
 * Parameters:
 *  - _homeId
 */
func (p *RemoteManagerClient) GetControllerNodeId(_homeId int32) (retval257 byte, err os.Error) {
  err = p.SendGetControllerNodeId(_homeId)
  if err != nil { return }
  return p.RecvGetControllerNodeId()
}

func (p *RemoteManagerClient) SendGetControllerNodeId(_homeId int32)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("GetControllerNodeId", thrift.CALL, p.SeqId)
  args258 := NewGetControllerNodeIdArgs()
  args258._homeId = _homeId
  err = args258.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvGetControllerNodeId() (value byte, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error260 := thrift.NewTApplicationExceptionDefault()
    error261, err := error260.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error261
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result259 := NewGetControllerNodeIdResult()
  err = result259.Read(iprot)
  iprot.ReadMessageEnd()
  value = result259.Success
  return
}

/**
 * Parameters:
 *  - _homeId
 */
func (p *RemoteManagerClient) IsPrimaryController(_homeId int32) (retval262 bool, err os.Error) {
  err = p.SendIsPrimaryController(_homeId)
  if err != nil { return }
  return p.RecvIsPrimaryController()
}

func (p *RemoteManagerClient) SendIsPrimaryController(_homeId int32)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("IsPrimaryController", thrift.CALL, p.SeqId)
  args263 := NewIsPrimaryControllerArgs()
  args263._homeId = _homeId
  err = args263.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvIsPrimaryController() (value bool, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error265 := thrift.NewTApplicationExceptionDefault()
    error266, err := error265.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error266
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result264 := NewIsPrimaryControllerResult()
  err = result264.Read(iprot)
  iprot.ReadMessageEnd()
  value = result264.Success
  return
}

/**
 * Parameters:
 *  - _homeId
 */
func (p *RemoteManagerClient) IsStaticUpdateController(_homeId int32) (retval267 bool, err os.Error) {
  err = p.SendIsStaticUpdateController(_homeId)
  if err != nil { return }
  return p.RecvIsStaticUpdateController()
}

func (p *RemoteManagerClient) SendIsStaticUpdateController(_homeId int32)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("IsStaticUpdateController", thrift.CALL, p.SeqId)
  args268 := NewIsStaticUpdateControllerArgs()
  args268._homeId = _homeId
  err = args268.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvIsStaticUpdateController() (value bool, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error270 := thrift.NewTApplicationExceptionDefault()
    error271, err := error270.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error271
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result269 := NewIsStaticUpdateControllerResult()
  err = result269.Read(iprot)
  iprot.ReadMessageEnd()
  value = result269.Success
  return
}

/**
 * \brief Query if the controller is using the bridge controller library.
 * A bridge controller is able to create virtual nodes that can be associated
 * with other controllers to enable events to be passed on.
 * \param _homeId The Home ID of the Z-Wave controller.
 * \return true if it is a bridge controller, false if not.
 * 
 * Parameters:
 *  - _homeId
 */
func (p *RemoteManagerClient) IsBridgeController(_homeId int32) (retval272 bool, err os.Error) {
  err = p.SendIsBridgeController(_homeId)
  if err != nil { return }
  return p.RecvIsBridgeController()
}

func (p *RemoteManagerClient) SendIsBridgeController(_homeId int32)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("IsBridgeController", thrift.CALL, p.SeqId)
  args273 := NewIsBridgeControllerArgs()
  args273._homeId = _homeId
  err = args273.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvIsBridgeController() (value bool, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error275 := thrift.NewTApplicationExceptionDefault()
    error276, err := error275.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error276
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result274 := NewIsBridgeControllerResult()
  err = result274.Read(iprot)
  iprot.ReadMessageEnd()
  value = result274.Success
  return
}

/**
 * \brief Get the version of the Z-Wave API library used by a controller.
 * \param _homeId The Home ID of the Z-Wave controller.
 * \return a string containing the library version. For example, "Z-Wave 2.48".
 * 
 * Parameters:
 *  - _homeId
 */
func (p *RemoteManagerClient) GetLibraryVersion(_homeId int32) (retval277 string, err os.Error) {
  err = p.SendGetLibraryVersion(_homeId)
  if err != nil { return }
  return p.RecvGetLibraryVersion()
}

func (p *RemoteManagerClient) SendGetLibraryVersion(_homeId int32)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("GetLibraryVersion", thrift.CALL, p.SeqId)
  args278 := NewGetLibraryVersionArgs()
  args278._homeId = _homeId
  err = args278.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvGetLibraryVersion() (value string, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error280 := thrift.NewTApplicationExceptionDefault()
    error281, err := error280.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error281
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result279 := NewGetLibraryVersionResult()
  err = result279.Read(iprot)
  iprot.ReadMessageEnd()
  value = result279.Success
  return
}

/**
 * \brief Get a string containing the Z-Wave API library type used by a controller.
 * The possible library types are:
 * - Static Controller
 * - Controller
 * - Enhanced Slave
 * - Slave
 * - Installer
 * - Routing Slave
 * - Bridge Controller
 * - Device Under Test
 * The controller should never return a slave library type.
 * For a more efficient test of whether a controller is a Bridge Controller, use
 * the IsBridgeController method.
 * \param _homeId The Home ID of the Z-Wave controller.
 * \return a string containing the library type.
 * \see GetLibraryVersion, IsBridgeController
 * 
 * Parameters:
 *  - _homeId
 */
func (p *RemoteManagerClient) GetLibraryTypeName(_homeId int32) (retval282 string, err os.Error) {
  err = p.SendGetLibraryTypeName(_homeId)
  if err != nil { return }
  return p.RecvGetLibraryTypeName()
}

func (p *RemoteManagerClient) SendGetLibraryTypeName(_homeId int32)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("GetLibraryTypeName", thrift.CALL, p.SeqId)
  args283 := NewGetLibraryTypeNameArgs()
  args283._homeId = _homeId
  err = args283.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvGetLibraryTypeName() (value string, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error285 := thrift.NewTApplicationExceptionDefault()
    error286, err := error285.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error286
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result284 := NewGetLibraryTypeNameResult()
  err = result284.Read(iprot)
  iprot.ReadMessageEnd()
  value = result284.Success
  return
}

/**
 * \brief Get count of messages in the outgoing send queue.
 * \param _homeId The Home ID of the Z-Wave controller.
 * \return a integer message count
 * 
 * Parameters:
 *  - _homeId
 */
func (p *RemoteManagerClient) GetSendQueueCount(_homeId int32) (retval287 int32, err os.Error) {
  err = p.SendGetSendQueueCount(_homeId)
  if err != nil { return }
  return p.RecvGetSendQueueCount()
}

func (p *RemoteManagerClient) SendGetSendQueueCount(_homeId int32)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("GetSendQueueCount", thrift.CALL, p.SeqId)
  args288 := NewGetSendQueueCountArgs()
  args288._homeId = _homeId
  err = args288.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvGetSendQueueCount() (value int32, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error290 := thrift.NewTApplicationExceptionDefault()
    error291, err := error290.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error291
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result289 := NewGetSendQueueCountResult()
  err = result289.Read(iprot)
  iprot.ReadMessageEnd()
  value = result289.Success
  return
}

/**
 * \brief Get the time period between polls of a node's state.
 */
func (p *RemoteManagerClient) GetPollInterval() (retval292 int32, err os.Error) {
  err = p.SendGetPollInterval()
  if err != nil { return }
  return p.RecvGetPollInterval()
}

func (p *RemoteManagerClient) SendGetPollInterval()(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("GetPollInterval", thrift.CALL, p.SeqId)
  args293 := NewGetPollIntervalArgs()
  err = args293.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvGetPollInterval() (value int32, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error295 := thrift.NewTApplicationExceptionDefault()
    error296, err := error295.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error296
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result294 := NewGetPollIntervalResult()
  err = result294.Read(iprot)
  iprot.ReadMessageEnd()
  value = result294.Success
  return
}

/**
 * \brief Set the time period between polls of a node's state.
 * Due to patent concerns, some devices do not report state changes automatically to the controller.
 * These devices need to have their state polled at regular intervals.  The length of the interval
 * is the same for all devices.  To even out the Z-Wave network traffic generated by polling, OpenZWave
 * divides the polling interval by the number of devices that have polling enabled, and polls each
 * in turn.  It is recommended that if possible, the interval should not be set shorter than the
 * number of polled devices in seconds (so that the network does not have to cope with more than one
 * poll per second).
 * \param _seconds The length of the polling interval in seconds.
 * 
 * Parameters:
 *  - _seconds
 */
func (p *RemoteManagerClient) SetPollInterval(_seconds int32) (err os.Error) {
  err = p.SendSetPollInterval(_seconds)
  if err != nil { return }
  return p.RecvSetPollInterval()
}

func (p *RemoteManagerClient) SendSetPollInterval(_seconds int32)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("SetPollInterval", thrift.CALL, p.SeqId)
  args298 := NewSetPollIntervalArgs()
  args298._seconds = _seconds
  err = args298.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvSetPollInterval() (err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error300 := thrift.NewTApplicationExceptionDefault()
    error301, err := error300.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error301
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result299 := NewSetPollIntervalResult()
  err = result299.Read(iprot)
  iprot.ReadMessageEnd()
  return
}

/**
 * \brief Enable the polling of a device's state.
 * \param _valueId The ID of the value to start polling.
 * \return True if polling was enabled.
 * 
 * Parameters:
 *  - _valueId
 */
func (p *RemoteManagerClient) EnablePoll(_valueId *RemoteValueID) (retval302 bool, err os.Error) {
  err = p.SendEnablePoll(_valueId)
  if err != nil { return }
  return p.RecvEnablePoll()
}

func (p *RemoteManagerClient) SendEnablePoll(_valueId *RemoteValueID)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("EnablePoll", thrift.CALL, p.SeqId)
  args303 := NewEnablePollArgs()
  args303._valueId = _valueId
  err = args303.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvEnablePoll() (value bool, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error305 := thrift.NewTApplicationExceptionDefault()
    error306, err := error305.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error306
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result304 := NewEnablePollResult()
  err = result304.Read(iprot)
  iprot.ReadMessageEnd()
  value = result304.Success
  return
}

/**
 * \brief Disable the polling of a device's state.
 * \param _valueId The ID of the value to stop polling.
 * \return True if polling was disabled.
 * 
 * Parameters:
 *  - _valueId
 */
func (p *RemoteManagerClient) DisablePoll(_valueId *RemoteValueID) (retval307 bool, err os.Error) {
  err = p.SendDisablePoll(_valueId)
  if err != nil { return }
  return p.RecvDisablePoll()
}

func (p *RemoteManagerClient) SendDisablePoll(_valueId *RemoteValueID)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("DisablePoll", thrift.CALL, p.SeqId)
  args308 := NewDisablePollArgs()
  args308._valueId = _valueId
  err = args308.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvDisablePoll() (value bool, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error310 := thrift.NewTApplicationExceptionDefault()
    error311, err := error310.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error311
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result309 := NewDisablePollResult()
  err = result309.Read(iprot)
  iprot.ReadMessageEnd()
  value = result309.Success
  return
}

/**
 * \brief Determine the polling of a device's state.
 * \param _valueId The ID of the value to check polling.
 * \return True if polling is active.
 * 
 * Parameters:
 *  - _valueId
 */
func (p *RemoteManagerClient) IsPolled(_valueId *RemoteValueID) (retval312 bool, err os.Error) {
  err = p.SendIsPolled(_valueId)
  if err != nil { return }
  return p.RecvIsPolled()
}

func (p *RemoteManagerClient) SendIsPolled(_valueId *RemoteValueID)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("isPolled", thrift.CALL, p.SeqId)
  args313 := NewIsPolledArgs()
  args313._valueId = _valueId
  err = args313.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvIsPolled() (value bool, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error315 := thrift.NewTApplicationExceptionDefault()
    error316, err := error315.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error316
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result314 := NewIsPolledResult()
  err = result314.Read(iprot)
  iprot.ReadMessageEnd()
  value = result314.Success
  return
}

/**
 * \brief Trigger the fetching of fixed data about a node.
 * Causes the node's data to be obtained from the Z-Wave network in the same way as if it had just been added.
 * This method would normally be called automatically by OpenZWave, but if you know that a node has been
 * changed, calling this method will force a refresh of all of the data held by the library.  This can be especially
 * useful for devices that were asleep when the application was first run. This is the
 * same as the query state starting from the beginning.
 * \param _homeId The Home ID of the Z-Wave controller that manages the node.
 * \param _nodeId The ID of the node to query.
 * \return True if the request was sent successfully.
 * 
 * Parameters:
 *  - _homeId
 *  - _nodeId
 */
func (p *RemoteManagerClient) RefreshNodeInfo(_homeId int32, _nodeId byte) (retval317 bool, err os.Error) {
  err = p.SendRefreshNodeInfo(_homeId, _nodeId)
  if err != nil { return }
  return p.RecvRefreshNodeInfo()
}

func (p *RemoteManagerClient) SendRefreshNodeInfo(_homeId int32, _nodeId byte)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("RefreshNodeInfo", thrift.CALL, p.SeqId)
  args318 := NewRefreshNodeInfoArgs()
  args318._homeId = _homeId
  args318._nodeId = _nodeId
  err = args318.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvRefreshNodeInfo() (value bool, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error320 := thrift.NewTApplicationExceptionDefault()
    error321, err := error320.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error321
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result319 := NewRefreshNodeInfoResult()
  err = result319.Read(iprot)
  iprot.ReadMessageEnd()
  value = result319.Success
  return
}

/**
 * \brief Trigger the fetching of dynamic value data for a node.
 * Causes the node's values to be requested from the Z-Wave network. This is the
 * same as the query state starting from the associations state.
 * \param _homeId The Home ID of the Z-Wave controller that manages the node.
 * \param _nodeId The ID of the node to query.
 * \return True if the request was sent successfully.
 * 
 * Parameters:
 *  - _homeId
 *  - _nodeId
 */
func (p *RemoteManagerClient) RequestNodeState(_homeId int32, _nodeId byte) (retval322 bool, err os.Error) {
  err = p.SendRequestNodeState(_homeId, _nodeId)
  if err != nil { return }
  return p.RecvRequestNodeState()
}

func (p *RemoteManagerClient) SendRequestNodeState(_homeId int32, _nodeId byte)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("RequestNodeState", thrift.CALL, p.SeqId)
  args323 := NewRequestNodeStateArgs()
  args323._homeId = _homeId
  args323._nodeId = _nodeId
  err = args323.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvRequestNodeState() (value bool, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error325 := thrift.NewTApplicationExceptionDefault()
    error326, err := error325.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error326
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result324 := NewRequestNodeStateResult()
  err = result324.Read(iprot)
  iprot.ReadMessageEnd()
  value = result324.Success
  return
}

/**
 * \brief Trigger the fetching of just the dynamic value data for a node.
 * Causes the node's values to be requested from the Z-Wave network. This is the
 * same as the query state starting from the dynamic state.
 * \param _homeId The Home ID of the Z-Wave controller that manages the node.
 * \param _nodeId The ID of the node to query.
 * \return True if the request was sent successfully.
 * 
 * Parameters:
 *  - _homeId
 *  - _nodeId
 */
func (p *RemoteManagerClient) RequestNodeDynamic(_homeId int32, _nodeId byte) (retval327 bool, err os.Error) {
  err = p.SendRequestNodeDynamic(_homeId, _nodeId)
  if err != nil { return }
  return p.RecvRequestNodeDynamic()
}

func (p *RemoteManagerClient) SendRequestNodeDynamic(_homeId int32, _nodeId byte)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("RequestNodeDynamic", thrift.CALL, p.SeqId)
  args328 := NewRequestNodeDynamicArgs()
  args328._homeId = _homeId
  args328._nodeId = _nodeId
  err = args328.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvRequestNodeDynamic() (value bool, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error330 := thrift.NewTApplicationExceptionDefault()
    error331, err := error330.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error331
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result329 := NewRequestNodeDynamicResult()
  err = result329.Read(iprot)
  iprot.ReadMessageEnd()
  value = result329.Success
  return
}

/**
 * \brief Get whether the node is a listening device that does not go to sleep
 * \param _homeId The Home ID of the Z-Wave controller that manages the node.
 * \param _nodeId The ID of the node to query.
 * \return True if it is a listening node.
 * 
 * Parameters:
 *  - _homeId
 *  - _nodeId
 */
func (p *RemoteManagerClient) IsNodeListeningDevice(_homeId int32, _nodeId byte) (retval332 bool, err os.Error) {
  err = p.SendIsNodeListeningDevice(_homeId, _nodeId)
  if err != nil { return }
  return p.RecvIsNodeListeningDevice()
}

func (p *RemoteManagerClient) SendIsNodeListeningDevice(_homeId int32, _nodeId byte)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("IsNodeListeningDevice", thrift.CALL, p.SeqId)
  args333 := NewIsNodeListeningDeviceArgs()
  args333._homeId = _homeId
  args333._nodeId = _nodeId
  err = args333.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvIsNodeListeningDevice() (value bool, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error335 := thrift.NewTApplicationExceptionDefault()
    error336, err := error335.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error336
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result334 := NewIsNodeListeningDeviceResult()
  err = result334.Read(iprot)
  iprot.ReadMessageEnd()
  value = result334.Success
  return
}

/**
 * \brief Get whether the node is a frequent listening device that goes to sleep but
 * can be woken up by a beam. Useful to determine node and controller consistency.
 * \param _homeId The Home ID of the Z-Wave controller that manages the node.
 * \param _nodeId The ID of the node to query.
 * \return True if it is a frequent listening node.
 * 
 * Parameters:
 *  - _homeId
 *  - _nodeId
 */
func (p *RemoteManagerClient) IsNodeFrequentListeningDevice(_homeId int32, _nodeId byte) (retval337 bool, err os.Error) {
  err = p.SendIsNodeFrequentListeningDevice(_homeId, _nodeId)
  if err != nil { return }
  return p.RecvIsNodeFrequentListeningDevice()
}

func (p *RemoteManagerClient) SendIsNodeFrequentListeningDevice(_homeId int32, _nodeId byte)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("IsNodeFrequentListeningDevice", thrift.CALL, p.SeqId)
  args338 := NewIsNodeFrequentListeningDeviceArgs()
  args338._homeId = _homeId
  args338._nodeId = _nodeId
  err = args338.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvIsNodeFrequentListeningDevice() (value bool, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error340 := thrift.NewTApplicationExceptionDefault()
    error341, err := error340.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error341
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result339 := NewIsNodeFrequentListeningDeviceResult()
  err = result339.Read(iprot)
  iprot.ReadMessageEnd()
  value = result339.Success
  return
}

/**
 * \brief Get whether the node is a beam capable device.
 * \param _homeId The Home ID of the Z-Wave controller that manages the node.
 * \param _nodeId The ID of the node to query.
 * \return True if it is a frequent listening node.
 * 
 * Parameters:
 *  - _homeId
 *  - _nodeId
 */
func (p *RemoteManagerClient) IsNodeBeamingDevice(_homeId int32, _nodeId byte) (retval342 bool, err os.Error) {
  err = p.SendIsNodeBeamingDevice(_homeId, _nodeId)
  if err != nil { return }
  return p.RecvIsNodeBeamingDevice()
}

func (p *RemoteManagerClient) SendIsNodeBeamingDevice(_homeId int32, _nodeId byte)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("IsNodeBeamingDevice", thrift.CALL, p.SeqId)
  args343 := NewIsNodeBeamingDeviceArgs()
  args343._homeId = _homeId
  args343._nodeId = _nodeId
  err = args343.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvIsNodeBeamingDevice() (value bool, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error345 := thrift.NewTApplicationExceptionDefault()
    error346, err := error345.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error346
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result344 := NewIsNodeBeamingDeviceResult()
  err = result344.Read(iprot)
  iprot.ReadMessageEnd()
  value = result344.Success
  return
}

/**
 * \brief Get whether the node is a routing device that passes messages to other nodes
 * \param _homeId The Home ID of the Z-Wave controller that manages the node.
 * \param _nodeId The ID of the node to query.
 * \return True if the node is a routing device
 * 
 * Parameters:
 *  - _homeId
 *  - _nodeId
 */
func (p *RemoteManagerClient) IsNodeRoutingDevice(_homeId int32, _nodeId byte) (retval347 bool, err os.Error) {
  err = p.SendIsNodeRoutingDevice(_homeId, _nodeId)
  if err != nil { return }
  return p.RecvIsNodeRoutingDevice()
}

func (p *RemoteManagerClient) SendIsNodeRoutingDevice(_homeId int32, _nodeId byte)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("IsNodeRoutingDevice", thrift.CALL, p.SeqId)
  args348 := NewIsNodeRoutingDeviceArgs()
  args348._homeId = _homeId
  args348._nodeId = _nodeId
  err = args348.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvIsNodeRoutingDevice() (value bool, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error350 := thrift.NewTApplicationExceptionDefault()
    error351, err := error350.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error351
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result349 := NewIsNodeRoutingDeviceResult()
  err = result349.Read(iprot)
  iprot.ReadMessageEnd()
  value = result349.Success
  return
}

/**
 * \brief Get the security attribute for a node. True if node supports security features.
 * \param _homeId The Home ID of the Z-Wave controller that manages the node.
 * \param _nodeId The ID of the node to query.
 * \return true if security features implemented.
 * 
 * Parameters:
 *  - _homeId
 *  - _nodeId
 */
func (p *RemoteManagerClient) IsNodeSecurityDevice(_homeId int32, _nodeId byte) (retval352 bool, err os.Error) {
  err = p.SendIsNodeSecurityDevice(_homeId, _nodeId)
  if err != nil { return }
  return p.RecvIsNodeSecurityDevice()
}

func (p *RemoteManagerClient) SendIsNodeSecurityDevice(_homeId int32, _nodeId byte)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("IsNodeSecurityDevice", thrift.CALL, p.SeqId)
  args353 := NewIsNodeSecurityDeviceArgs()
  args353._homeId = _homeId
  args353._nodeId = _nodeId
  err = args353.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvIsNodeSecurityDevice() (value bool, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error355 := thrift.NewTApplicationExceptionDefault()
    error356, err := error355.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error356
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result354 := NewIsNodeSecurityDeviceResult()
  err = result354.Read(iprot)
  iprot.ReadMessageEnd()
  value = result354.Success
  return
}

/**
 * \brief Get the maximum baud rate of a node's communications
 * \param _homeId The Home ID of the Z-Wave controller that manages the node.
 * \param _nodeId The ID of the node to query.
 * \return the baud rate in bits per second.
 * 
 * Parameters:
 *  - _homeId
 *  - _nodeId
 */
func (p *RemoteManagerClient) GetNodeMaxBaudRate(_homeId int32, _nodeId byte) (retval357 int32, err os.Error) {
  err = p.SendGetNodeMaxBaudRate(_homeId, _nodeId)
  if err != nil { return }
  return p.RecvGetNodeMaxBaudRate()
}

func (p *RemoteManagerClient) SendGetNodeMaxBaudRate(_homeId int32, _nodeId byte)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("GetNodeMaxBaudRate", thrift.CALL, p.SeqId)
  args358 := NewGetNodeMaxBaudRateArgs()
  args358._homeId = _homeId
  args358._nodeId = _nodeId
  err = args358.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvGetNodeMaxBaudRate() (value int32, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error360 := thrift.NewTApplicationExceptionDefault()
    error361, err := error360.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error361
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result359 := NewGetNodeMaxBaudRateResult()
  err = result359.Read(iprot)
  iprot.ReadMessageEnd()
  value = result359.Success
  return
}

/**
 * \brief Get the version number of a node
 * \param _homeId The Home ID of the Z-Wave controller that manages the node.
 * \param _nodeId The ID of the node to query.
 * \return the node's version number
 * 
 * Parameters:
 *  - _homeId
 *  - _nodeId
 */
func (p *RemoteManagerClient) GetNodeVersion(_homeId int32, _nodeId byte) (retval362 byte, err os.Error) {
  err = p.SendGetNodeVersion(_homeId, _nodeId)
  if err != nil { return }
  return p.RecvGetNodeVersion()
}

func (p *RemoteManagerClient) SendGetNodeVersion(_homeId int32, _nodeId byte)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("GetNodeVersion", thrift.CALL, p.SeqId)
  args363 := NewGetNodeVersionArgs()
  args363._homeId = _homeId
  args363._nodeId = _nodeId
  err = args363.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvGetNodeVersion() (value byte, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error365 := thrift.NewTApplicationExceptionDefault()
    error366, err := error365.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error366
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result364 := NewGetNodeVersionResult()
  err = result364.Read(iprot)
  iprot.ReadMessageEnd()
  value = result364.Success
  return
}

/**
 * \brief Get the basic type of a node.
 * \param _homeId The Home ID of the Z-Wave controller that manages the node.
 * \param _nodeId The ID of the node to query.
 * \return the node's basic type.
 * 
 * Parameters:
 *  - _homeId
 *  - _nodeId
 */
func (p *RemoteManagerClient) GetNodeBasic(_homeId int32, _nodeId byte) (retval367 byte, err os.Error) {
  err = p.SendGetNodeBasic(_homeId, _nodeId)
  if err != nil { return }
  return p.RecvGetNodeBasic()
}

func (p *RemoteManagerClient) SendGetNodeBasic(_homeId int32, _nodeId byte)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("GetNodeBasic", thrift.CALL, p.SeqId)
  args368 := NewGetNodeBasicArgs()
  args368._homeId = _homeId
  args368._nodeId = _nodeId
  err = args368.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvGetNodeBasic() (value byte, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error370 := thrift.NewTApplicationExceptionDefault()
    error371, err := error370.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error371
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result369 := NewGetNodeBasicResult()
  err = result369.Read(iprot)
  iprot.ReadMessageEnd()
  value = result369.Success
  return
}

/**
 * \brief Get the generic type of a node.
 * \param _homeId The Home ID of the Z-Wave controller that manages the node.
 * \param _nodeId The ID of the node to query.
 * \return the node's generic type.
 * 
 * Parameters:
 *  - _homeId
 *  - _nodeId
 */
func (p *RemoteManagerClient) GetNodeGeneric(_homeId int32, _nodeId byte) (retval372 byte, err os.Error) {
  err = p.SendGetNodeGeneric(_homeId, _nodeId)
  if err != nil { return }
  return p.RecvGetNodeGeneric()
}

func (p *RemoteManagerClient) SendGetNodeGeneric(_homeId int32, _nodeId byte)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("GetNodeGeneric", thrift.CALL, p.SeqId)
  args373 := NewGetNodeGenericArgs()
  args373._homeId = _homeId
  args373._nodeId = _nodeId
  err = args373.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvGetNodeGeneric() (value byte, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error375 := thrift.NewTApplicationExceptionDefault()
    error376, err := error375.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error376
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result374 := NewGetNodeGenericResult()
  err = result374.Read(iprot)
  iprot.ReadMessageEnd()
  value = result374.Success
  return
}

/**
 * \brief Get the specific type of a node.
 * \param _homeId The Home ID of the Z-Wave controller that manages the node.
 * \param _nodeId The ID of the node to query.
 * \return the node's specific type.
 * 
 * Parameters:
 *  - _homeId
 *  - _nodeId
 */
func (p *RemoteManagerClient) GetNodeSpecific(_homeId int32, _nodeId byte) (retval377 byte, err os.Error) {
  err = p.SendGetNodeSpecific(_homeId, _nodeId)
  if err != nil { return }
  return p.RecvGetNodeSpecific()
}

func (p *RemoteManagerClient) SendGetNodeSpecific(_homeId int32, _nodeId byte)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("GetNodeSpecific", thrift.CALL, p.SeqId)
  args378 := NewGetNodeSpecificArgs()
  args378._homeId = _homeId
  args378._nodeId = _nodeId
  err = args378.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvGetNodeSpecific() (value byte, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error380 := thrift.NewTApplicationExceptionDefault()
    error381, err := error380.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error381
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result379 := NewGetNodeSpecificResult()
  err = result379.Read(iprot)
  iprot.ReadMessageEnd()
  value = result379.Success
  return
}

/**
 * \brief Get a human-readable label describing the node
 * The label is taken from the Z-Wave specific, generic or basic type, depending on which of those values are specified by the node.
 * \param _homeId The Home ID of the Z-Wave controller that manages the node.
 * \param _nodeId The ID of the node to query.
 * \return A string containing the label text.
 * 
 * Parameters:
 *  - _homeId
 *  - _nodeId
 */
func (p *RemoteManagerClient) GetNodeType(_homeId int32, _nodeId byte) (retval382 string, err os.Error) {
  err = p.SendGetNodeType(_homeId, _nodeId)
  if err != nil { return }
  return p.RecvGetNodeType()
}

func (p *RemoteManagerClient) SendGetNodeType(_homeId int32, _nodeId byte)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("GetNodeType", thrift.CALL, p.SeqId)
  args383 := NewGetNodeTypeArgs()
  args383._homeId = _homeId
  args383._nodeId = _nodeId
  err = args383.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvGetNodeType() (value string, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error385 := thrift.NewTApplicationExceptionDefault()
    error386, err := error385.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error386
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result384 := NewGetNodeTypeResult()
  err = result384.Read(iprot)
  iprot.ReadMessageEnd()
  value = result384.Success
  return
}

/**
 * \brief Get the bitmap of this node's neighbors
 * 
 * \param _homeId The Home ID of the Z-Wave controller that manages the node.
 * \param _nodeId The ID of the node to query.
 * \param _nodeNeighbors An array of 29 uint8s to hold the neighbor bitmap
 * 
 * Parameters:
 *  - _homeId
 *  - _nodeId
 */
func (p *RemoteManagerClient) GetNodeNeighbors(_homeId int32, _nodeId byte) (retval387 *UInt32ListByte, err os.Error) {
  err = p.SendGetNodeNeighbors(_homeId, _nodeId)
  if err != nil { return }
  return p.RecvGetNodeNeighbors()
}

func (p *RemoteManagerClient) SendGetNodeNeighbors(_homeId int32, _nodeId byte)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("GetNodeNeighbors", thrift.CALL, p.SeqId)
  args388 := NewGetNodeNeighborsArgs()
  args388._homeId = _homeId
  args388._nodeId = _nodeId
  err = args388.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvGetNodeNeighbors() (value *UInt32ListByte, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error390 := thrift.NewTApplicationExceptionDefault()
    error391, err := error390.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error391
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result389 := NewGetNodeNeighborsResult()
  err = result389.Read(iprot)
  iprot.ReadMessageEnd()
  value = result389.Success
  return
}

/**
 * \brief Get the manufacturer name of a device
 * The manufacturer name would normally be handled by the Manufacturer Specific commmand class,
 * taking the manufacturer ID reported by the device and using it to look up the name from the
 * manufacturer_specific.xml file in the OpenZWave config folder.
 * However, there are some devices that do not support the command class, so to enable the user
 * to manually set the name, it is stored with the node data and accessed via this method rather
 * than being reported via a command class Value object.
 * \param _homeId The Home ID of the Z-Wave controller that manages the node.
 * \param _nodeId The ID of the node to query.
 * \return A string containing the node's manufacturer name.
 * \see SetNodeManufacturerName, GetNodeProductName, SetNodeProductName
 * 
 * Parameters:
 *  - _homeId
 *  - _nodeId
 */
func (p *RemoteManagerClient) GetNodeManufacturerName(_homeId int32, _nodeId byte) (retval392 string, err os.Error) {
  err = p.SendGetNodeManufacturerName(_homeId, _nodeId)
  if err != nil { return }
  return p.RecvGetNodeManufacturerName()
}

func (p *RemoteManagerClient) SendGetNodeManufacturerName(_homeId int32, _nodeId byte)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("GetNodeManufacturerName", thrift.CALL, p.SeqId)
  args393 := NewGetNodeManufacturerNameArgs()
  args393._homeId = _homeId
  args393._nodeId = _nodeId
  err = args393.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvGetNodeManufacturerName() (value string, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error395 := thrift.NewTApplicationExceptionDefault()
    error396, err := error395.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error396
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result394 := NewGetNodeManufacturerNameResult()
  err = result394.Read(iprot)
  iprot.ReadMessageEnd()
  value = result394.Success
  return
}

/**
 * \brief Get the product name of a device
 * The product name would normally be handled by the Manufacturer Specific commmand class,
 * taking the product Type and ID reported by the device and using it to look up the name from the
 * manufacturer_specific.xml file in the OpenZWave config folder.
 * However, there are some devices that do not support the command class, so to enable the user
 * to manually set the name, it is stored with the node data and accessed via this method rather
 * than being reported via a command class Value object.
 * \param _homeId The Home ID of the Z-Wave controller that manages the node.
 * \param _nodeId The ID of the node to query.
 * \return A string containing the node's product name.
 * \see SetNodeProductName, GetNodeManufacturerName, SetNodeManufacturerName
 * 
 * Parameters:
 *  - _homeId
 *  - _nodeId
 */
func (p *RemoteManagerClient) GetNodeProductName(_homeId int32, _nodeId byte) (retval397 string, err os.Error) {
  err = p.SendGetNodeProductName(_homeId, _nodeId)
  if err != nil { return }
  return p.RecvGetNodeProductName()
}

func (p *RemoteManagerClient) SendGetNodeProductName(_homeId int32, _nodeId byte)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("GetNodeProductName", thrift.CALL, p.SeqId)
  args398 := NewGetNodeProductNameArgs()
  args398._homeId = _homeId
  args398._nodeId = _nodeId
  err = args398.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvGetNodeProductName() (value string, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error400 := thrift.NewTApplicationExceptionDefault()
    error401, err := error400.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error401
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result399 := NewGetNodeProductNameResult()
  err = result399.Read(iprot)
  iprot.ReadMessageEnd()
  value = result399.Success
  return
}

/**
 * \brief Get the name of a node
 * The node name is a user-editable label for the node that would normally be handled by the
 * Node Naming commmand class, but many devices do not support it.  So that a node can always
 * be named, OpenZWave stores it with the node data, and provides access through this method
 * and SetNodeName, rather than reporting it via a command class Value object.
 * The maximum length of a node name is 16 characters.
 * \param _homeId The Home ID of the Z-Wave controller that manages the node.
 * \param _nodeId The ID of the node to query.
 * \return A string containing the node's name.
 * \see SetNodeName, GetNodeLocation, SetNodeLocation
 * 
 * Parameters:
 *  - _homeId
 *  - _nodeId
 */
func (p *RemoteManagerClient) GetNodeName(_homeId int32, _nodeId byte) (retval402 string, err os.Error) {
  err = p.SendGetNodeName(_homeId, _nodeId)
  if err != nil { return }
  return p.RecvGetNodeName()
}

func (p *RemoteManagerClient) SendGetNodeName(_homeId int32, _nodeId byte)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("GetNodeName", thrift.CALL, p.SeqId)
  args403 := NewGetNodeNameArgs()
  args403._homeId = _homeId
  args403._nodeId = _nodeId
  err = args403.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvGetNodeName() (value string, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error405 := thrift.NewTApplicationExceptionDefault()
    error406, err := error405.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error406
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result404 := NewGetNodeNameResult()
  err = result404.Read(iprot)
  iprot.ReadMessageEnd()
  value = result404.Success
  return
}

/**
 * \brief Get the location of a node
 * The node location is a user-editable string that would normally be handled by the Node Naming
 * commmand class, but many devices do not support it.  So that a node can always report its
 * location, OpenZWave stores it with the node data, and provides access through this method
 * and SetNodeLocation, rather than reporting it via a command class Value object.
 * \param _homeId The Home ID of the Z-Wave controller that manages the node.
 * \param _nodeId The ID of the node to query.
 * \return A string containing the node's location.
 * \see SetNodeLocation, GetNodeName, SetNodeName
 * 
 * Parameters:
 *  - _homeId
 *  - _nodeId
 */
func (p *RemoteManagerClient) GetNodeLocation(_homeId int32, _nodeId byte) (retval407 string, err os.Error) {
  err = p.SendGetNodeLocation(_homeId, _nodeId)
  if err != nil { return }
  return p.RecvGetNodeLocation()
}

func (p *RemoteManagerClient) SendGetNodeLocation(_homeId int32, _nodeId byte)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("GetNodeLocation", thrift.CALL, p.SeqId)
  args408 := NewGetNodeLocationArgs()
  args408._homeId = _homeId
  args408._nodeId = _nodeId
  err = args408.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvGetNodeLocation() (value string, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error410 := thrift.NewTApplicationExceptionDefault()
    error411, err := error410.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error411
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result409 := NewGetNodeLocationResult()
  err = result409.Read(iprot)
  iprot.ReadMessageEnd()
  value = result409.Success
  return
}

/**
 * \brief Get the manufacturer ID of a device
 * The manufacturer ID is a four digit hex code and would normally be handled by the Manufacturer
 * Specific commmand class, but not all devices support it.  Although the value reported by this
 * method will be an empty string if the command class is not supported and cannot be set by the
 * user, the manufacturer ID is still stored with the node data (rather than being reported via a
 * command class Value object) to retain a consistent approach with the other manufacturer specific data.
 * \param _homeId The Home ID of the Z-Wave controller that manages the node.
 * \param _nodeId The ID of the node to query.
 * \return A string containing the node's manufacturer ID, or an empty string if the manufactuer
 * specific command class is not supported by the device.
 * \see GetNodeProductType, GetNodeProductId, GetNodeManufacturerName, GetNodeProductName
 * 
 * Parameters:
 *  - _homeId
 *  - _nodeId
 */
func (p *RemoteManagerClient) GetNodeManufacturerId(_homeId int32, _nodeId byte) (retval412 string, err os.Error) {
  err = p.SendGetNodeManufacturerId(_homeId, _nodeId)
  if err != nil { return }
  return p.RecvGetNodeManufacturerId()
}

func (p *RemoteManagerClient) SendGetNodeManufacturerId(_homeId int32, _nodeId byte)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("GetNodeManufacturerId", thrift.CALL, p.SeqId)
  args413 := NewGetNodeManufacturerIdArgs()
  args413._homeId = _homeId
  args413._nodeId = _nodeId
  err = args413.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvGetNodeManufacturerId() (value string, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error415 := thrift.NewTApplicationExceptionDefault()
    error416, err := error415.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error416
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result414 := NewGetNodeManufacturerIdResult()
  err = result414.Read(iprot)
  iprot.ReadMessageEnd()
  value = result414.Success
  return
}

/**
 * \brief Get the product type of a device
 * The product type is a four digit hex code and would normally be handled by the Manufacturer Specific
 * commmand class, but not all devices support it.  Although the value reported by this method will
 * be an empty string if the command class is not supported and cannot be set by the user, the product
 * type is still stored with the node data (rather than being reported via a command class Value object)
 * to retain a consistent approach with the other manufacturer specific data.
 * \param _homeId The Home ID of the Z-Wave controller that manages the node.
 * \param _nodeId The ID of the node to query.
 * \return A string containing the node's product type, or an empty string if the manufactuer
 * specific command class is not supported by the device.
 * \see GetNodeManufacturerId, GetNodeProductId, GetNodeManufacturerName, GetNodeProductName
 * 
 * Parameters:
 *  - _homeId
 *  - _nodeId
 */
func (p *RemoteManagerClient) GetNodeProductType(_homeId int32, _nodeId byte) (retval417 string, err os.Error) {
  err = p.SendGetNodeProductType(_homeId, _nodeId)
  if err != nil { return }
  return p.RecvGetNodeProductType()
}

func (p *RemoteManagerClient) SendGetNodeProductType(_homeId int32, _nodeId byte)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("GetNodeProductType", thrift.CALL, p.SeqId)
  args418 := NewGetNodeProductTypeArgs()
  args418._homeId = _homeId
  args418._nodeId = _nodeId
  err = args418.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvGetNodeProductType() (value string, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error420 := thrift.NewTApplicationExceptionDefault()
    error421, err := error420.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error421
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result419 := NewGetNodeProductTypeResult()
  err = result419.Read(iprot)
  iprot.ReadMessageEnd()
  value = result419.Success
  return
}

/**
 * \brief Get the product ID of a device
 * The product ID is a four digit hex code and would normally be handled by the Manufacturer Specific
 * commmand class, but not all devices support it.  Although the value reported by this method will
 * be an empty string if the command class is not supported and cannot be set by the user, the product
 * ID is still stored with the node data (rather than being reported via a command class Value object)
 * to retain a consistent approach with the other manufacturer specific data.
 * \param _homeId The Home ID of the Z-Wave controller that manages the node.
 * \param _nodeId The ID of the node to query.
 * \return A string containing the node's product ID, or an empty string if the manufactuer
 * specific command class is not supported by the device.
 * \see GetNodeManufacturerId, GetNodeProductType, GetNodeManufacturerName, GetNodeProductName
 * 
 * Parameters:
 *  - _homeId
 *  - _nodeId
 */
func (p *RemoteManagerClient) GetNodeProductId(_homeId int32, _nodeId byte) (retval422 string, err os.Error) {
  err = p.SendGetNodeProductId(_homeId, _nodeId)
  if err != nil { return }
  return p.RecvGetNodeProductId()
}

func (p *RemoteManagerClient) SendGetNodeProductId(_homeId int32, _nodeId byte)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("GetNodeProductId", thrift.CALL, p.SeqId)
  args423 := NewGetNodeProductIdArgs()
  args423._homeId = _homeId
  args423._nodeId = _nodeId
  err = args423.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvGetNodeProductId() (value string, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error425 := thrift.NewTApplicationExceptionDefault()
    error426, err := error425.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error426
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result424 := NewGetNodeProductIdResult()
  err = result424.Read(iprot)
  iprot.ReadMessageEnd()
  value = result424.Success
  return
}

/**
 * \brief Set the manufacturer name of a device
 * The manufacturer name would normally be handled by the Manufacturer Specific commmand class,
 * taking the manufacturer ID reported by the device and using it to look up the name from the
 * manufacturer_specific.xml file in the OpenZWave config folder.
 * However, there are some devices that do not support the command class, so to enable the user
 * to manually set the name, it is stored with the node data and accessed via this method rather
 * than being reported via a command class Value object.
 * \param _homeId The Home ID of the Z-Wave controller that manages the node.
 * \param _nodeId The ID of the node to query.
 * \param _manufacturerName	A string containing the node's manufacturer name.
 * \see GetNodeManufacturerName, GetNodeProductName, SetNodeProductName
 * 
 * Parameters:
 *  - _homeId
 *  - _nodeId
 *  - _manufacturerName
 */
func (p *RemoteManagerClient) SetNodeManufacturerName(_homeId int32, _nodeId byte, _manufacturerName string) (err os.Error) {
  err = p.SendSetNodeManufacturerName(_homeId, _nodeId, _manufacturerName)
  if err != nil { return }
  return p.RecvSetNodeManufacturerName()
}

func (p *RemoteManagerClient) SendSetNodeManufacturerName(_homeId int32, _nodeId byte, _manufacturerName string)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("SetNodeManufacturerName", thrift.CALL, p.SeqId)
  args428 := NewSetNodeManufacturerNameArgs()
  args428._homeId = _homeId
  args428._nodeId = _nodeId
  args428._manufacturerName = _manufacturerName
  err = args428.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvSetNodeManufacturerName() (err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error430 := thrift.NewTApplicationExceptionDefault()
    error431, err := error430.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error431
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result429 := NewSetNodeManufacturerNameResult()
  err = result429.Read(iprot)
  iprot.ReadMessageEnd()
  return
}

/**
 * \brief Set the product name of a device
 * The product name would normally be handled by the Manufacturer Specific commmand class,
 * taking the product Type and ID reported by the device and using it to look up the name from the
 * manufacturer_specific.xml file in the OpenZWave config folder.
 * However, there are some devices that do not support the command class, so to enable the user
 * to manually set the name, it is stored with the node data and accessed via this method rather
 * than being reported via a command class Value object.
 * \param _homeId The Home ID of the Z-Wave controller that manages the node.
 * \param _nodeId The ID of the node to query.
 * \param _productName A string containing the node's product name.
 * \see GetNodeProductName, GetNodeManufacturerName, SetNodeManufacturerName
 * 
 * Parameters:
 *  - _homeId
 *  - _nodeId
 *  - _productName
 */
func (p *RemoteManagerClient) SetNodeProductName(_homeId int32, _nodeId byte, _productName string) (err os.Error) {
  err = p.SendSetNodeProductName(_homeId, _nodeId, _productName)
  if err != nil { return }
  return p.RecvSetNodeProductName()
}

func (p *RemoteManagerClient) SendSetNodeProductName(_homeId int32, _nodeId byte, _productName string)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("SetNodeProductName", thrift.CALL, p.SeqId)
  args433 := NewSetNodeProductNameArgs()
  args433._homeId = _homeId
  args433._nodeId = _nodeId
  args433._productName = _productName
  err = args433.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvSetNodeProductName() (err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error435 := thrift.NewTApplicationExceptionDefault()
    error436, err := error435.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error436
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result434 := NewSetNodeProductNameResult()
  err = result434.Read(iprot)
  iprot.ReadMessageEnd()
  return
}

/**
 * \brief Set the name of a node
 * The node name is a user-editable label for the node that would normally be handled by the
 * Node Naming commmand class, but many devices do not support it.  So that a node can always
 * be named, OpenZWave stores it with the node data, and provides access through this method
 * and GetNodeName, rather than reporting it via a command class Value object.
 * If the device does support the Node Naming command class, the new name will be sent to the node.
 * The maximum length of a node name is 16 characters.
 * \param _homeId The Home ID of the Z-Wave controller that manages the node.
 * \param _nodeId The ID of the node to query.
 * \param _nodeName A string containing the node's name.
 * \see GetNodeName, GetNodeLocation, SetNodeLocation
 * 
 * Parameters:
 *  - _homeId
 *  - _nodeId
 *  - _nodeName
 */
func (p *RemoteManagerClient) SetNodeName(_homeId int32, _nodeId byte, _nodeName string) (err os.Error) {
  err = p.SendSetNodeName(_homeId, _nodeId, _nodeName)
  if err != nil { return }
  return p.RecvSetNodeName()
}

func (p *RemoteManagerClient) SendSetNodeName(_homeId int32, _nodeId byte, _nodeName string)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("SetNodeName", thrift.CALL, p.SeqId)
  args438 := NewSetNodeNameArgs()
  args438._homeId = _homeId
  args438._nodeId = _nodeId
  args438._nodeName = _nodeName
  err = args438.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvSetNodeName() (err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error440 := thrift.NewTApplicationExceptionDefault()
    error441, err := error440.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error441
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result439 := NewSetNodeNameResult()
  err = result439.Read(iprot)
  iprot.ReadMessageEnd()
  return
}

/**
 * \brief Set the location of a node
 * The node location is a user-editable string that would normally be handled by the Node Naming
 * commmand class, but many devices do not support it.  So that a node can always report its
 * location, OpenZWave stores it with the node data, and provides access through this method
 * and GetNodeLocation, rather than reporting it via a command class Value object.
 * If the device does support the Node Naming command class, the new location will be sent to the node.
 * \param _homeId The Home ID of the Z-Wave controller that manages the node.
 * \param _nodeId The ID of the node to query.
 * \param _location A string containing the node's location.
 * \see GetNodeLocation, GetNodeName, SetNodeName
 * 
 * Parameters:
 *  - _homeId
 *  - _nodeId
 *  - _location
 */
func (p *RemoteManagerClient) SetNodeLocation(_homeId int32, _nodeId byte, _location string) (err os.Error) {
  err = p.SendSetNodeLocation(_homeId, _nodeId, _location)
  if err != nil { return }
  return p.RecvSetNodeLocation()
}

func (p *RemoteManagerClient) SendSetNodeLocation(_homeId int32, _nodeId byte, _location string)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("SetNodeLocation", thrift.CALL, p.SeqId)
  args443 := NewSetNodeLocationArgs()
  args443._homeId = _homeId
  args443._nodeId = _nodeId
  args443._location = _location
  err = args443.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvSetNodeLocation() (err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error445 := thrift.NewTApplicationExceptionDefault()
    error446, err := error445.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error446
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result444 := NewSetNodeLocationResult()
  err = result444.Read(iprot)
  iprot.ReadMessageEnd()
  return
}

/**
 * \brief Turns a node on
 * This is a helper method to simplify basic control of a node.  It is the equivalent of
 * changing the level reported by the node's Basic command class to 255, and will generate a
 * ValueChanged notification from that class.  This command will turn on the device at its
 * last known level, if supported by the device, otherwise it will turn	it on at 100%.
 * \param _homeId The Home ID of the Z-Wave controller that manages the node.
 * \param _nodeId The ID of the node to be changed.
 * \see SetNodeOff, SetNodeLevel
 * 
 * Parameters:
 *  - _homeId
 *  - _nodeId
 */
func (p *RemoteManagerClient) SetNodeOn(_homeId int32, _nodeId byte) (err os.Error) {
  err = p.SendSetNodeOn(_homeId, _nodeId)
  if err != nil { return }
  return p.RecvSetNodeOn()
}

func (p *RemoteManagerClient) SendSetNodeOn(_homeId int32, _nodeId byte)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("SetNodeOn", thrift.CALL, p.SeqId)
  args448 := NewSetNodeOnArgs()
  args448._homeId = _homeId
  args448._nodeId = _nodeId
  err = args448.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvSetNodeOn() (err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error450 := thrift.NewTApplicationExceptionDefault()
    error451, err := error450.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error451
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result449 := NewSetNodeOnResult()
  err = result449.Read(iprot)
  iprot.ReadMessageEnd()
  return
}

/**
 * \brief Turns a node off
 * This is a helper method to simplify basic control of a node.  It is the equivalent of
 * changing the level reported by the node's Basic command class to zero, and will generate
 * a ValueChanged notification from that class.
 * \param _homeId The Home ID of the Z-Wave controller that manages the node.
 * \param _nodeId The ID of the node to be changed.
 * \see SetNodeOn, SetNodeLevel
 * 
 * Parameters:
 *  - _homeId
 *  - _nodeId
 */
func (p *RemoteManagerClient) SetNodeOff(_homeId int32, _nodeId byte) (err os.Error) {
  err = p.SendSetNodeOff(_homeId, _nodeId)
  if err != nil { return }
  return p.RecvSetNodeOff()
}

func (p *RemoteManagerClient) SendSetNodeOff(_homeId int32, _nodeId byte)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("SetNodeOff", thrift.CALL, p.SeqId)
  args453 := NewSetNodeOffArgs()
  args453._homeId = _homeId
  args453._nodeId = _nodeId
  err = args453.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvSetNodeOff() (err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error455 := thrift.NewTApplicationExceptionDefault()
    error456, err := error455.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error456
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result454 := NewSetNodeOffResult()
  err = result454.Read(iprot)
  iprot.ReadMessageEnd()
  return
}

/**
 * \brief Sets the basic level of a node
 * This is a helper method to simplify basic control of a node.  It is the equivalent of
 * changing the value reported by the node's Basic command class and will generate a
 * ValueChanged notification from that class.
 * \param _homeId The Home ID of the Z-Wave controller that manages the node.
 * \param _nodeId The ID of the node to be changed.
 * \param _level The level to set the node.  Valid values are 0-99 and 255.  Zero is off and
 * 99 is fully on.  255 will turn on the device at its last known level (if supported).
 * \see SetNodeOn, SetNodeOff
 * 
 * Parameters:
 *  - _homeId
 *  - _nodeId
 *  - _level
 */
func (p *RemoteManagerClient) SetNodeLevel(_homeId int32, _nodeId byte, _level byte) (err os.Error) {
  err = p.SendSetNodeLevel(_homeId, _nodeId, _level)
  if err != nil { return }
  return p.RecvSetNodeLevel()
}

func (p *RemoteManagerClient) SendSetNodeLevel(_homeId int32, _nodeId byte, _level byte)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("SetNodeLevel", thrift.CALL, p.SeqId)
  args458 := NewSetNodeLevelArgs()
  args458._homeId = _homeId
  args458._nodeId = _nodeId
  args458._level = _level
  err = args458.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvSetNodeLevel() (err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error460 := thrift.NewTApplicationExceptionDefault()
    error461, err := error460.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error461
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result459 := NewSetNodeLevelResult()
  err = result459.Read(iprot)
  iprot.ReadMessageEnd()
  return
}

/**
 * \brief Get whether the node information has been received
 * \param _homeId The Home ID of the Z-Wave controller that manages the node.
 * \param _nodeId The ID of the node to query.
 * \return True if the node information has been received yet
 * 
 * Parameters:
 *  - _homeId
 *  - _nodeId
 */
func (p *RemoteManagerClient) IsNodeInfoReceived(_homeId int32, _nodeId byte) (retval462 bool, err os.Error) {
  err = p.SendIsNodeInfoReceived(_homeId, _nodeId)
  if err != nil { return }
  return p.RecvIsNodeInfoReceived()
}

func (p *RemoteManagerClient) SendIsNodeInfoReceived(_homeId int32, _nodeId byte)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("IsNodeInfoReceived", thrift.CALL, p.SeqId)
  args463 := NewIsNodeInfoReceivedArgs()
  args463._homeId = _homeId
  args463._nodeId = _nodeId
  err = args463.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvIsNodeInfoReceived() (value bool, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error465 := thrift.NewTApplicationExceptionDefault()
    error466, err := error465.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error466
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result464 := NewIsNodeInfoReceivedResult()
  err = result464.Read(iprot)
  iprot.ReadMessageEnd()
  value = result464.Success
  return
}

/**
 * \brief Get whether the node has the defined class available or not
 * \param _homeId The Home ID of the Z-Wave controller that manages the node.
 * \param _nodeId The ID of the node to query.
 * \param _commandClassId Id of the class to test for
 * \return True if the node does have the class instantiated, will return name & version
 * 
 * Parameters:
 *  - _homeId
 *  - _nodeId
 *  - _commandClassId
 */
func (p *RemoteManagerClient) GetNodeClassInformation(_homeId int32, _nodeId byte, _commandClassId byte) (retval467 *BoolGetNodeClassInformation, err os.Error) {
  err = p.SendGetNodeClassInformation(_homeId, _nodeId, _commandClassId)
  if err != nil { return }
  return p.RecvGetNodeClassInformation()
}

func (p *RemoteManagerClient) SendGetNodeClassInformation(_homeId int32, _nodeId byte, _commandClassId byte)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("GetNodeClassInformation", thrift.CALL, p.SeqId)
  args468 := NewGetNodeClassInformationArgs()
  args468._homeId = _homeId
  args468._nodeId = _nodeId
  args468._commandClassId = _commandClassId
  err = args468.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvGetNodeClassInformation() (value *BoolGetNodeClassInformation, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error470 := thrift.NewTApplicationExceptionDefault()
    error471, err := error470.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error471
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result469 := NewGetNodeClassInformationResult()
  err = result469.Read(iprot)
  iprot.ReadMessageEnd()
  value = result469.Success
  return
}

/**
 * \brief Gets the user-friendly label for the value.
 * \param _id The unique identifier of the value.
 * \return The value label.
 * \see ValueID
 * 
 * Parameters:
 *  - _id
 */
func (p *RemoteManagerClient) GetValueLabel(_id *RemoteValueID) (retval472 string, err os.Error) {
  err = p.SendGetValueLabel(_id)
  if err != nil { return }
  return p.RecvGetValueLabel()
}

func (p *RemoteManagerClient) SendGetValueLabel(_id *RemoteValueID)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("GetValueLabel", thrift.CALL, p.SeqId)
  args473 := NewGetValueLabelArgs()
  args473._id = _id
  err = args473.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvGetValueLabel() (value string, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error475 := thrift.NewTApplicationExceptionDefault()
    error476, err := error475.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error476
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result474 := NewGetValueLabelResult()
  err = result474.Read(iprot)
  iprot.ReadMessageEnd()
  value = result474.Success
  return
}

/**
 * \brief Sets the user-friendly label for the value.
 * \param _id The unique identifier of the value.
 * \param _value The new value of the label.
 * \see ValueID
 * 
 * Parameters:
 *  - _id
 *  - _value
 */
func (p *RemoteManagerClient) SetValueLabel(_id *RemoteValueID, _value string) (err os.Error) {
  err = p.SendSetValueLabel(_id, _value)
  if err != nil { return }
  return p.RecvSetValueLabel()
}

func (p *RemoteManagerClient) SendSetValueLabel(_id *RemoteValueID, _value string)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("SetValueLabel", thrift.CALL, p.SeqId)
  args478 := NewSetValueLabelArgs()
  args478._id = _id
  args478._value = _value
  err = args478.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvSetValueLabel() (err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error480 := thrift.NewTApplicationExceptionDefault()
    error481, err := error480.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error481
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result479 := NewSetValueLabelResult()
  err = result479.Read(iprot)
  iprot.ReadMessageEnd()
  return
}

/**
 * \brief Gets the units that the value is measured in.
 * \param _id The unique identifier of the value.
 * \return The value units.
 * \see ValueID
 * 
 * Parameters:
 *  - _id
 */
func (p *RemoteManagerClient) GetValueUnits(_id *RemoteValueID) (retval482 string, err os.Error) {
  err = p.SendGetValueUnits(_id)
  if err != nil { return }
  return p.RecvGetValueUnits()
}

func (p *RemoteManagerClient) SendGetValueUnits(_id *RemoteValueID)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("GetValueUnits", thrift.CALL, p.SeqId)
  args483 := NewGetValueUnitsArgs()
  args483._id = _id
  err = args483.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvGetValueUnits() (value string, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error485 := thrift.NewTApplicationExceptionDefault()
    error486, err := error485.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error486
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result484 := NewGetValueUnitsResult()
  err = result484.Read(iprot)
  iprot.ReadMessageEnd()
  value = result484.Success
  return
}

/**
 * \brief Sets the units that the value is measured in.
 * \param _id The unique identifier of the value.
 * \param _value The new value of the units.
 * \see ValueID
 * 
 * Parameters:
 *  - _id
 *  - _value
 */
func (p *RemoteManagerClient) SetValueUnits(_id *RemoteValueID, _value string) (err os.Error) {
  err = p.SendSetValueUnits(_id, _value)
  if err != nil { return }
  return p.RecvSetValueUnits()
}

func (p *RemoteManagerClient) SendSetValueUnits(_id *RemoteValueID, _value string)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("SetValueUnits", thrift.CALL, p.SeqId)
  args488 := NewSetValueUnitsArgs()
  args488._id = _id
  args488._value = _value
  err = args488.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvSetValueUnits() (err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error490 := thrift.NewTApplicationExceptionDefault()
    error491, err := error490.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error491
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result489 := NewSetValueUnitsResult()
  err = result489.Read(iprot)
  iprot.ReadMessageEnd()
  return
}

/**
 * \brief Gets a help string describing the value's purpose and usage.
 * \param _id The unique identifier of the value.
 * \return The value help text.
 * \see ValueID
 * 
 * Parameters:
 *  - _id
 */
func (p *RemoteManagerClient) GetValueHelp(_id *RemoteValueID) (retval492 string, err os.Error) {
  err = p.SendGetValueHelp(_id)
  if err != nil { return }
  return p.RecvGetValueHelp()
}

func (p *RemoteManagerClient) SendGetValueHelp(_id *RemoteValueID)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("GetValueHelp", thrift.CALL, p.SeqId)
  args493 := NewGetValueHelpArgs()
  args493._id = _id
  err = args493.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvGetValueHelp() (value string, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error495 := thrift.NewTApplicationExceptionDefault()
    error496, err := error495.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error496
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result494 := NewGetValueHelpResult()
  err = result494.Read(iprot)
  iprot.ReadMessageEnd()
  value = result494.Success
  return
}

/**
 * \brief Sets a help string describing the value's purpose and usage.
 * \param _id The unique identifier of the value.
 * \param _value The new value of the help text.
 * \see ValueID
 * 
 * Parameters:
 *  - _id
 *  - _value
 */
func (p *RemoteManagerClient) SetValueHelp(_id *RemoteValueID, _value string) (err os.Error) {
  err = p.SendSetValueHelp(_id, _value)
  if err != nil { return }
  return p.RecvSetValueHelp()
}

func (p *RemoteManagerClient) SendSetValueHelp(_id *RemoteValueID, _value string)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("SetValueHelp", thrift.CALL, p.SeqId)
  args498 := NewSetValueHelpArgs()
  args498._id = _id
  args498._value = _value
  err = args498.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvSetValueHelp() (err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error500 := thrift.NewTApplicationExceptionDefault()
    error501, err := error500.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error501
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result499 := NewSetValueHelpResult()
  err = result499.Read(iprot)
  iprot.ReadMessageEnd()
  return
}

/**
 * \brief Gets the minimum that this value may contain.
 * \param _id The unique identifier of the value.
 * \return The value minimum.
 * \see ValueID
 * 
 * Parameters:
 *  - _id
 */
func (p *RemoteManagerClient) GetValueMin(_id *RemoteValueID) (retval502 int32, err os.Error) {
  err = p.SendGetValueMin(_id)
  if err != nil { return }
  return p.RecvGetValueMin()
}

func (p *RemoteManagerClient) SendGetValueMin(_id *RemoteValueID)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("GetValueMin", thrift.CALL, p.SeqId)
  args503 := NewGetValueMinArgs()
  args503._id = _id
  err = args503.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvGetValueMin() (value int32, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error505 := thrift.NewTApplicationExceptionDefault()
    error506, err := error505.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error506
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result504 := NewGetValueMinResult()
  err = result504.Read(iprot)
  iprot.ReadMessageEnd()
  value = result504.Success
  return
}

/**
 * \brief Gets the maximum that this value may contain.
 * \param _id The unique identifier of the value.
 * \return The value maximum.
 * \see ValueID
 * 
 * Parameters:
 *  - _id
 */
func (p *RemoteManagerClient) GetValueMax(_id *RemoteValueID) (retval507 int32, err os.Error) {
  err = p.SendGetValueMax(_id)
  if err != nil { return }
  return p.RecvGetValueMax()
}

func (p *RemoteManagerClient) SendGetValueMax(_id *RemoteValueID)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("GetValueMax", thrift.CALL, p.SeqId)
  args508 := NewGetValueMaxArgs()
  args508._id = _id
  err = args508.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvGetValueMax() (value int32, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error510 := thrift.NewTApplicationExceptionDefault()
    error511, err := error510.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error511
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result509 := NewGetValueMaxResult()
  err = result509.Read(iprot)
  iprot.ReadMessageEnd()
  value = result509.Success
  return
}

/**
 * \brief Test whether the value is read-only.
 * \param _id The unique identifier of the value.
 * \return true if the value cannot be changed by the user.
 * \see ValueID
 * 
 * Parameters:
 *  - _id
 */
func (p *RemoteManagerClient) IsValueReadOnly(_id *RemoteValueID) (retval512 bool, err os.Error) {
  err = p.SendIsValueReadOnly(_id)
  if err != nil { return }
  return p.RecvIsValueReadOnly()
}

func (p *RemoteManagerClient) SendIsValueReadOnly(_id *RemoteValueID)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("IsValueReadOnly", thrift.CALL, p.SeqId)
  args513 := NewIsValueReadOnlyArgs()
  args513._id = _id
  err = args513.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvIsValueReadOnly() (value bool, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error515 := thrift.NewTApplicationExceptionDefault()
    error516, err := error515.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error516
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result514 := NewIsValueReadOnlyResult()
  err = result514.Read(iprot)
  iprot.ReadMessageEnd()
  value = result514.Success
  return
}

/**
 * \brief Test whether the value is write-only.
 * \param _id The unique identifier of the value.
 * \return true if the value can only be written to and not read.
 * \see ValueID
 * 
 * Parameters:
 *  - _id
 */
func (p *RemoteManagerClient) IsValueWriteOnly(_id *RemoteValueID) (retval517 bool, err os.Error) {
  err = p.SendIsValueWriteOnly(_id)
  if err != nil { return }
  return p.RecvIsValueWriteOnly()
}

func (p *RemoteManagerClient) SendIsValueWriteOnly(_id *RemoteValueID)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("IsValueWriteOnly", thrift.CALL, p.SeqId)
  args518 := NewIsValueWriteOnlyArgs()
  args518._id = _id
  err = args518.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvIsValueWriteOnly() (value bool, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error520 := thrift.NewTApplicationExceptionDefault()
    error521, err := error520.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error521
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result519 := NewIsValueWriteOnlyResult()
  err = result519.Read(iprot)
  iprot.ReadMessageEnd()
  value = result519.Success
  return
}

/**
 * \brief Test whether the value has been set.
 * \param _id The unique identifier of the value.
 * \return true if the value has actually been set by a status message from the device, rather than simply being the default.
 * \see ValueID
 * 
 * Parameters:
 *  - _id
 */
func (p *RemoteManagerClient) IsValueSet(_id *RemoteValueID) (retval522 bool, err os.Error) {
  err = p.SendIsValueSet(_id)
  if err != nil { return }
  return p.RecvIsValueSet()
}

func (p *RemoteManagerClient) SendIsValueSet(_id *RemoteValueID)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("IsValueSet", thrift.CALL, p.SeqId)
  args523 := NewIsValueSetArgs()
  args523._id = _id
  err = args523.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvIsValueSet() (value bool, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error525 := thrift.NewTApplicationExceptionDefault()
    error526, err := error525.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error526
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result524 := NewIsValueSetResult()
  err = result524.Read(iprot)
  iprot.ReadMessageEnd()
  value = result524.Success
  return
}

/**
 * \brief Gets a value as a bool.
 * \param _id The unique identifier of the value.
 * \param o_value Pointer to a bool that will be filled with the value.
 * \return true if the value was obtained.  Returns false if the value is not a ValueID::ValueType_Bool. The type can be tested with a call to ValueID::GetType.
 * \see ValueID::GetType, GetValueAsByte, GetValueAsFloat, GetValueAsInt, GetValueAsShort, GetValueAsString, GetValueListSelection, GetValueListItems
 * 
 * Parameters:
 *  - _id
 */
func (p *RemoteManagerClient) GetValueAsBool(_id *RemoteValueID) (retval527 *BoolBool, err os.Error) {
  err = p.SendGetValueAsBool(_id)
  if err != nil { return }
  return p.RecvGetValueAsBool()
}

func (p *RemoteManagerClient) SendGetValueAsBool(_id *RemoteValueID)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("GetValueAsBool", thrift.CALL, p.SeqId)
  args528 := NewGetValueAsBoolArgs()
  args528._id = _id
  err = args528.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvGetValueAsBool() (value *BoolBool, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error530 := thrift.NewTApplicationExceptionDefault()
    error531, err := error530.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error531
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result529 := NewGetValueAsBoolResult()
  err = result529.Read(iprot)
  iprot.ReadMessageEnd()
  value = result529.Success
  return
}

/**
 * \brief Gets a value as an 8-bit unsigned integer.
 * \param _id The unique identifier of the value.
 * \param o_value Pointer to a uint8 that will be filled with the value.
 * \return true if the value was obtained.  Returns false if the value is not a ValueID::ValueType_Byte. The type can be tested with a call to ValueID::GetType
 * \see ValueID::GetType, GetValueAsBool, GetValueAsFloat, GetValueAsInt, GetValueAsShort, GetValueAsString, GetValueListSelection, GetValueListItems
 * 
 * Parameters:
 *  - _id
 */
func (p *RemoteManagerClient) GetValueAsByte(_id *RemoteValueID) (retval532 *BoolUInt8, err os.Error) {
  err = p.SendGetValueAsByte(_id)
  if err != nil { return }
  return p.RecvGetValueAsByte()
}

func (p *RemoteManagerClient) SendGetValueAsByte(_id *RemoteValueID)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("GetValueAsByte", thrift.CALL, p.SeqId)
  args533 := NewGetValueAsByteArgs()
  args533._id = _id
  err = args533.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvGetValueAsByte() (value *BoolUInt8, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error535 := thrift.NewTApplicationExceptionDefault()
    error536, err := error535.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error536
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result534 := NewGetValueAsByteResult()
  err = result534.Read(iprot)
  iprot.ReadMessageEnd()
  value = result534.Success
  return
}

/**
 * \brief Gets a value as a float.
 * \param _id The unique identifier of the value.
 * \param o_value Pointer to a float that will be filled with the value.
 * \return true if the value was obtained.  Returns false if the value is not a ValueID::ValueType_Decimal. The type can be tested with a call to ValueID::GetType
 * \see ValueID::GetType, GetValueAsBool, GetValueAsByte, GetValueAsInt, GetValueAsShort, GetValueAsString, GetValueListSelection, GetValueListItems
 * 
 * Parameters:
 *  - _id
 */
func (p *RemoteManagerClient) GetValueAsFloat(_id *RemoteValueID) (retval537 *BoolFloat, err os.Error) {
  err = p.SendGetValueAsFloat(_id)
  if err != nil { return }
  return p.RecvGetValueAsFloat()
}

func (p *RemoteManagerClient) SendGetValueAsFloat(_id *RemoteValueID)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("GetValueAsFloat", thrift.CALL, p.SeqId)
  args538 := NewGetValueAsFloatArgs()
  args538._id = _id
  err = args538.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvGetValueAsFloat() (value *BoolFloat, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error540 := thrift.NewTApplicationExceptionDefault()
    error541, err := error540.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error541
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result539 := NewGetValueAsFloatResult()
  err = result539.Read(iprot)
  iprot.ReadMessageEnd()
  value = result539.Success
  return
}

/**
 * \brief Gets a value as a 32-bit signed integer.
 * \param _id The unique identifier of the value.
 * \param o_value Pointer to an int32 that will be filled with the value.
 * \return true if the value was obtained.  Returns false if the value is not a ValueID::ValueType_Int. The type can be tested with a call to ValueID::GetType
 * \see ValueID::GetType, GetValueAsBool, GetValueAsByte, GetValueAsFloat, GetValueAsShort, GetValueAsString, GetValueListSelection, GetValueListItems
 * 
 * Parameters:
 *  - _id
 */
func (p *RemoteManagerClient) GetValueAsInt(_id *RemoteValueID) (retval542 *BoolInt, err os.Error) {
  err = p.SendGetValueAsInt(_id)
  if err != nil { return }
  return p.RecvGetValueAsInt()
}

func (p *RemoteManagerClient) SendGetValueAsInt(_id *RemoteValueID)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("GetValueAsInt", thrift.CALL, p.SeqId)
  args543 := NewGetValueAsIntArgs()
  args543._id = _id
  err = args543.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvGetValueAsInt() (value *BoolInt, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error545 := thrift.NewTApplicationExceptionDefault()
    error546, err := error545.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error546
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result544 := NewGetValueAsIntResult()
  err = result544.Read(iprot)
  iprot.ReadMessageEnd()
  value = result544.Success
  return
}

/**
 * \brief Gets a value as a 16-bit signed integer.
 * \param _id The unique identifier of the value.
 * \param o_value Pointer to an int16 that will be filled with the value.
 * \return true if the value was obtained.  Returns false if the value is not a ValueID::ValueType_Short. The type can be tested with a call to ValueID::GetType.
 * \see ValueID::GetType, GetValueAsBool, GetValueAsByte, GetValueAsFloat, GetValueAsInt, GetValueAsString, GetValueListSelection, GetValueListItems.
 * 
 * Parameters:
 *  - _id
 */
func (p *RemoteManagerClient) GetValueAsShort(_id *RemoteValueID) (retval547 *BoolInt16, err os.Error) {
  err = p.SendGetValueAsShort(_id)
  if err != nil { return }
  return p.RecvGetValueAsShort()
}

func (p *RemoteManagerClient) SendGetValueAsShort(_id *RemoteValueID)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("GetValueAsShort", thrift.CALL, p.SeqId)
  args548 := NewGetValueAsShortArgs()
  args548._id = _id
  err = args548.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvGetValueAsShort() (value *BoolInt16, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error550 := thrift.NewTApplicationExceptionDefault()
    error551, err := error550.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error551
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result549 := NewGetValueAsShortResult()
  err = result549.Read(iprot)
  iprot.ReadMessageEnd()
  value = result549.Success
  return
}

/**
 * \brief Gets a value as a string.
 * Creates a string representation of a value, regardless of type.
 * \param _id The unique identifier of the value.
 * \param o_value Pointer to a string that will be filled with the value.
 * \return true if the value was obtained.</returns>
 * \see ValueID::GetType, GetValueAsBool, GetValueAsByte, GetValueAsFloat, GetValueAsInt, GetValueAsShort, GetValueListSelection, GetValueListItems.
 * 
 * Parameters:
 *  - _id
 */
func (p *RemoteManagerClient) GetValueAsString(_id *RemoteValueID) (retval552 *BoolString, err os.Error) {
  err = p.SendGetValueAsString(_id)
  if err != nil { return }
  return p.RecvGetValueAsString()
}

func (p *RemoteManagerClient) SendGetValueAsString(_id *RemoteValueID)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("GetValueAsString", thrift.CALL, p.SeqId)
  args553 := NewGetValueAsStringArgs()
  args553._id = _id
  err = args553.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvGetValueAsString() (value *BoolString, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error555 := thrift.NewTApplicationExceptionDefault()
    error556, err := error555.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error556
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result554 := NewGetValueAsStringResult()
  err = result554.Read(iprot)
  iprot.ReadMessageEnd()
  value = result554.Success
  return
}

/**
 * \brief Gets the selected item from a list (as a string).
 * \param _id The unique identifier of the value.
 * \param o_value Pointer to a string that will be filled with the selected item.
 * \return True if the value was obtained.  Returns false if the value is not a ValueID::ValueType_List. The type can be tested with a call to ValueID::GetType.
 * \see ValueID::GetType, GetValueAsBool, GetValueAsByte, GetValueAsFloat, GetValueAsInt, GetValueAsShort, GetValueAsString, GetValueListItems.
 * 
 * Parameters:
 *  - _id
 */
func (p *RemoteManagerClient) GetValueListSelectionString(_id *RemoteValueID) (retval557 *BoolString, err os.Error) {
  err = p.SendGetValueListSelectionString(_id)
  if err != nil { return }
  return p.RecvGetValueListSelectionString()
}

func (p *RemoteManagerClient) SendGetValueListSelectionString(_id *RemoteValueID)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("GetValueListSelection_String", thrift.CALL, p.SeqId)
  args558 := NewGetValueListSelectionStringArgs()
  args558._id = _id
  err = args558.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvGetValueListSelectionString() (value *BoolString, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error560 := thrift.NewTApplicationExceptionDefault()
    error561, err := error560.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error561
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result559 := NewGetValueListSelectionStringResult()
  err = result559.Read(iprot)
  iprot.ReadMessageEnd()
  value = result559.Success
  return
}

/**
 * \brief Gets the selected item from a list (as an integer).
 * \param _id The unique identifier of the value.
 * \param o_value Pointer to an integer that will be filled with the selected item.
 * \return True if the value was obtained.  Returns false if the value is not a ValueID::ValueType_List. The type can be tested with a call to ValueID::GetType.
 * \see ValueID::GetType, GetValueAsBool, GetValueAsByte, GetValueAsFloat, GetValueAsInt, GetValueAsShort, GetValueAsString, GetValueListItems.
 * 
 * Parameters:
 *  - _id
 */
func (p *RemoteManagerClient) GetValueListSelectionInt32(_id *RemoteValueID) (retval562 *BoolInt, err os.Error) {
  err = p.SendGetValueListSelectionInt32(_id)
  if err != nil { return }
  return p.RecvGetValueListSelectionInt32()
}

func (p *RemoteManagerClient) SendGetValueListSelectionInt32(_id *RemoteValueID)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("GetValueListSelection_Int32", thrift.CALL, p.SeqId)
  args563 := NewGetValueListSelectionInt32Args()
  args563._id = _id
  err = args563.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvGetValueListSelectionInt32() (value *BoolInt, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error565 := thrift.NewTApplicationExceptionDefault()
    error566, err := error565.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error566
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result564 := NewGetValueListSelectionInt32Result()
  err = result564.Read(iprot)
  iprot.ReadMessageEnd()
  value = result564.Success
  return
}

/**
 * \brief Gets the list of items from a list value.
 * \param _id The unique identifier of the value.
 * \param o_value Pointer to a vector of strings that will be filled with list items. The vector will be cleared before the items are added.
 * \return true if the list items were obtained.  Returns false if the value is not a ValueID::ValueType_List. The type can be tested with a call to ValueID::GetType.
 * \see ValueID::GetType, GetValueAsBool, GetValueAsByte, GetValueAsFloat, GetValueAsInt, GetValueAsShort, GetValueAsString, GetValueListSelection.
 * 
 * Parameters:
 *  - _id
 */
func (p *RemoteManagerClient) GetValueListItems(_id *RemoteValueID) (retval567 *BoolListString, err os.Error) {
  err = p.SendGetValueListItems(_id)
  if err != nil { return }
  return p.RecvGetValueListItems()
}

func (p *RemoteManagerClient) SendGetValueListItems(_id *RemoteValueID)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("GetValueListItems", thrift.CALL, p.SeqId)
  args568 := NewGetValueListItemsArgs()
  args568._id = _id
  err = args568.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvGetValueListItems() (value *BoolListString, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error570 := thrift.NewTApplicationExceptionDefault()
    error571, err := error570.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error571
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result569 := NewGetValueListItemsResult()
  err = result569.Read(iprot)
  iprot.ReadMessageEnd()
  value = result569.Success
  return
}

/**
 * \brief Gets a float value's precision.
 * \param _id The unique identifier of the value.
 * \param o_value Pointer to a uint8 that will be filled with the precision value.
 * \return true if the value was obtained.  Returns false if the value is not a ValueID::ValueType_Decimal. The type can be tested with a call to ValueID::GetType
 * \see ValueID::GetType, GetValueAsBool, GetValueAsByte, GetValueAsInt, GetValueAsShort, GetValueAsString, GetValueListSelection, GetValueListItems
 * 
 * Parameters:
 *  - _id
 */
func (p *RemoteManagerClient) GetValueFloatPrecision(_id *RemoteValueID) (retval572 *BoolUInt8, err os.Error) {
  err = p.SendGetValueFloatPrecision(_id)
  if err != nil { return }
  return p.RecvGetValueFloatPrecision()
}

func (p *RemoteManagerClient) SendGetValueFloatPrecision(_id *RemoteValueID)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("GetValueFloatPrecision", thrift.CALL, p.SeqId)
  args573 := NewGetValueFloatPrecisionArgs()
  args573._id = _id
  err = args573.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvGetValueFloatPrecision() (value *BoolUInt8, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error575 := thrift.NewTApplicationExceptionDefault()
    error576, err := error575.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error576
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result574 := NewGetValueFloatPrecisionResult()
  err = result574.Read(iprot)
  iprot.ReadMessageEnd()
  value = result574.Success
  return
}

/**
 * \brief Sets the state of a bool.
 * Due to the possibility of a device being asleep, the command is assumed to suceeed, and the value
 * held by the node is updated directly.  This will be reverted by a future status message from the device
 * if the Z-Wave message actually failed to get through.  Notification callbacks will be sent in both cases.
 * \param _id The unique identifier of the bool value.
 * \param _value The new value of the bool.
 * \return true if the value was set.  Returns false if the value is not a ValueID::ValueType_Bool. The type can be tested with a call to ValueID::GetType.
 * 
 * Parameters:
 *  - _id
 *  - _value
 */
func (p *RemoteManagerClient) SetValueBool(_id *RemoteValueID, _value bool) (retval577 bool, err os.Error) {
  err = p.SendSetValueBool(_id, _value)
  if err != nil { return }
  return p.RecvSetValueBool()
}

func (p *RemoteManagerClient) SendSetValueBool(_id *RemoteValueID, _value bool)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("SetValue_Bool", thrift.CALL, p.SeqId)
  args578 := NewSetValueBoolArgs()
  args578._id = _id
  args578._value = _value
  err = args578.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvSetValueBool() (value bool, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error580 := thrift.NewTApplicationExceptionDefault()
    error581, err := error580.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error581
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result579 := NewSetValueBoolResult()
  err = result579.Read(iprot)
  iprot.ReadMessageEnd()
  value = result579.Success
  return
}

/**
 * \brief Sets the value of a byte.
 * Due to the possibility of a device being asleep, the command is assumed to suceeed, and the value
 * held by the node is updated directly.  This will be reverted by a future status message from the device
 * if the Z-Wave message actually failed to get through.  Notification callbacks will be sent in both cases.
 * \param _id The unique identifier of the byte value.
 * \param _value The new value of the byte.
 * \return true if the value was set.  Returns false if the value is not a ValueID::ValueType_Byte. The type can be tested with a call to ValueID::GetType.
 * 
 * Parameters:
 *  - _id
 *  - _value
 */
func (p *RemoteManagerClient) SetValueUInt8(_id *RemoteValueID, _value byte) (retval582 bool, err os.Error) {
  err = p.SendSetValueUInt8(_id, _value)
  if err != nil { return }
  return p.RecvSetValueUInt8()
}

func (p *RemoteManagerClient) SendSetValueUInt8(_id *RemoteValueID, _value byte)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("SetValue_UInt8", thrift.CALL, p.SeqId)
  args583 := NewSetValueUInt8Args()
  args583._id = _id
  args583._value = _value
  err = args583.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvSetValueUInt8() (value bool, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error585 := thrift.NewTApplicationExceptionDefault()
    error586, err := error585.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error586
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result584 := NewSetValueUInt8Result()
  err = result584.Read(iprot)
  iprot.ReadMessageEnd()
  value = result584.Success
  return
}

/**
 * \brief Sets the value of a decimal.
 * It is usually better to handle decimal values using strings rather than floats, to avoid floating point accuracy issues.
 * Due to the possibility of a device being asleep, the command is assumed to succeed, and the value
 * held by the node is updated directly.  This will be reverted by a future status message from the device
 * if the Z-Wave message actually failed to get through.  Notification callbacks will be sent in both cases.
 * \param _id The unique identifier of the decimal value.
 * \param _value The new value of the decimal.
 * \return true if the value was set.  Returns false if the value is not a ValueID::ValueType_Decimal. The type can be tested with a call to ValueID::GetType.
 * 
 * Parameters:
 *  - _id
 *  - _value
 */
func (p *RemoteManagerClient) SetValueFloat(_id *RemoteValueID, _value float64) (retval587 bool, err os.Error) {
  err = p.SendSetValueFloat(_id, _value)
  if err != nil { return }
  return p.RecvSetValueFloat()
}

func (p *RemoteManagerClient) SendSetValueFloat(_id *RemoteValueID, _value float64)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("SetValue_Float", thrift.CALL, p.SeqId)
  args588 := NewSetValueFloatArgs()
  args588._id = _id
  args588._value = _value
  err = args588.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvSetValueFloat() (value bool, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error590 := thrift.NewTApplicationExceptionDefault()
    error591, err := error590.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error591
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result589 := NewSetValueFloatResult()
  err = result589.Read(iprot)
  iprot.ReadMessageEnd()
  value = result589.Success
  return
}

/**
 * \brief Sets the value of a 32-bit signed integer.
 * Due to the possibility of a device being asleep, the command is assumed to suceeed, and the value
 * held by the node is updated directly.  This will be reverted by a future status message from the device
 * if the Z-Wave message actually failed to get through.  Notification callbacks will be sent in both cases.
 * \param _id The unique identifier of the integer value.
 * \param _value The new value of the integer.
 * \return true if the value was set.  Returns false if the value is not a ValueID::ValueType_Int. The type can be tested with a call to ValueID::GetType.
 * 
 * Parameters:
 *  - _id
 *  - _value
 */
func (p *RemoteManagerClient) SetValueInt32(_id *RemoteValueID, _value int32) (retval592 bool, err os.Error) {
  err = p.SendSetValueInt32(_id, _value)
  if err != nil { return }
  return p.RecvSetValueInt32()
}

func (p *RemoteManagerClient) SendSetValueInt32(_id *RemoteValueID, _value int32)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("SetValue_Int32", thrift.CALL, p.SeqId)
  args593 := NewSetValueInt32Args()
  args593._id = _id
  args593._value = _value
  err = args593.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvSetValueInt32() (value bool, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error595 := thrift.NewTApplicationExceptionDefault()
    error596, err := error595.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error596
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result594 := NewSetValueInt32Result()
  err = result594.Read(iprot)
  iprot.ReadMessageEnd()
  value = result594.Success
  return
}

/**
 * \brief Sets the value of a 16-bit signed integer.
 * Due to the possibility of a device being asleep, the command is assumed to suceeed, and the value
 * held by the node is updated directly.  This will be reverted by a future status message from the device
 * if the Z-Wave message actually failed to get through.  Notification callbacks will be sent in both cases.
 * \param _id The unique identifier of the integer value.
 * \param _value The new value of the integer.
 * \return true if the value was set.  Returns false if the value is not a ValueID::ValueType_Short. The type can be tested with a call to ValueID::GetType.
 * 
 * Parameters:
 *  - _id
 *  - _value
 */
func (p *RemoteManagerClient) SetValueInt16(_id *RemoteValueID, _value int16) (retval597 bool, err os.Error) {
  err = p.SendSetValueInt16(_id, _value)
  if err != nil { return }
  return p.RecvSetValueInt16()
}

func (p *RemoteManagerClient) SendSetValueInt16(_id *RemoteValueID, _value int16)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("SetValue_Int16", thrift.CALL, p.SeqId)
  args598 := NewSetValueInt16Args()
  args598._id = _id
  args598._value = _value
  err = args598.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvSetValueInt16() (value bool, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error600 := thrift.NewTApplicationExceptionDefault()
    error601, err := error600.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error601
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result599 := NewSetValueInt16Result()
  err = result599.Read(iprot)
  iprot.ReadMessageEnd()
  value = result599.Success
  return
}

/**
 * \brief Sets the value from a string, regardless of type.
 * Due to the possibility of a device being asleep, the command is assumed to suceeed, and the value
 * held by the node is updated directly.  This will be reverted by a future status message from the device
 * if the Z-Wave message actually failed to get through.  Notification callbacks will be sent in both cases.
 * \param _id The unique identifier of the integer value.
 * \param _value The new value of the string.
 * \return true if the value was set.  Returns false if the value could not be parsed into the correct type for the value.
 * 
 * Parameters:
 *  - _id
 *  - _value
 */
func (p *RemoteManagerClient) SetValueString(_id *RemoteValueID, _value string) (retval602 bool, err os.Error) {
  err = p.SendSetValueString(_id, _value)
  if err != nil { return }
  return p.RecvSetValueString()
}

func (p *RemoteManagerClient) SendSetValueString(_id *RemoteValueID, _value string)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("SetValue_String", thrift.CALL, p.SeqId)
  args603 := NewSetValueStringArgs()
  args603._id = _id
  args603._value = _value
  err = args603.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvSetValueString() (value bool, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error605 := thrift.NewTApplicationExceptionDefault()
    error606, err := error605.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error606
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result604 := NewSetValueStringResult()
  err = result604.Read(iprot)
  iprot.ReadMessageEnd()
  value = result604.Success
  return
}

/**
 * \brief Sets the selected item in a list.
 * Due to the possibility of a device being asleep, the command is assumed to suceeed, and the value
 * held by the node is updated directly.  This will be reverted by a future status message from the device
 * if the Z-Wave message actually failed to get through.  Notification callbacks will be sent in both cases.
 * \param _id The unique identifier of the list value.
 * \param _selectedItem A string matching the new selected item in the list.
 * \return true if the value was set.  Returns false if the selection is not in the list, or if the value is not a ValueID::ValueType_List.
 * The type can be tested with a call to ValueID::GetType
 * 
 * Parameters:
 *  - _id
 *  - _selectedItem
 */
func (p *RemoteManagerClient) SetValueListSelection(_id *RemoteValueID, _selectedItem string) (retval607 bool, err os.Error) {
  err = p.SendSetValueListSelection(_id, _selectedItem)
  if err != nil { return }
  return p.RecvSetValueListSelection()
}

func (p *RemoteManagerClient) SendSetValueListSelection(_id *RemoteValueID, _selectedItem string)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("SetValueListSelection", thrift.CALL, p.SeqId)
  args608 := NewSetValueListSelectionArgs()
  args608._id = _id
  args608._selectedItem = _selectedItem
  err = args608.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvSetValueListSelection() (value bool, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error610 := thrift.NewTApplicationExceptionDefault()
    error611, err := error610.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error611
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result609 := NewSetValueListSelectionResult()
  err = result609.Read(iprot)
  iprot.ReadMessageEnd()
  value = result609.Success
  return
}

/**
 * \brief Starts an activity in a device.
 * Since buttons are write-only values that do not report a state, no notification callbacks are sent.
 * \param _id The unique identifier of the integer value.
 * \return true if the activity was started.  Returns false if the value is not a ValueID::ValueType_Button. The type can be tested with a call to ValueID::GetType.
 * 
 * Parameters:
 *  - _id
 */
func (p *RemoteManagerClient) PressButton(_id *RemoteValueID) (retval612 bool, err os.Error) {
  err = p.SendPressButton(_id)
  if err != nil { return }
  return p.RecvPressButton()
}

func (p *RemoteManagerClient) SendPressButton(_id *RemoteValueID)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("PressButton", thrift.CALL, p.SeqId)
  args613 := NewPressButtonArgs()
  args613._id = _id
  err = args613.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvPressButton() (value bool, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error615 := thrift.NewTApplicationExceptionDefault()
    error616, err := error615.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error616
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result614 := NewPressButtonResult()
  err = result614.Read(iprot)
  iprot.ReadMessageEnd()
  value = result614.Success
  return
}

/**
 * \brief Stops an activity in a device.
 * Since buttons are write-only values that do not report a state, no notification callbacks are sent.
 * \param _id The unique identifier of the integer value.
 * \return true if the activity was stopped.  Returns false if the value is not a ValueID::ValueType_Button. The type can be tested with a call to ValueID::GetType.
 * 
 * Parameters:
 *  - _id
 */
func (p *RemoteManagerClient) ReleaseButton(_id *RemoteValueID) (retval617 bool, err os.Error) {
  err = p.SendReleaseButton(_id)
  if err != nil { return }
  return p.RecvReleaseButton()
}

func (p *RemoteManagerClient) SendReleaseButton(_id *RemoteValueID)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("ReleaseButton", thrift.CALL, p.SeqId)
  args618 := NewReleaseButtonArgs()
  args618._id = _id
  err = args618.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvReleaseButton() (value bool, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error620 := thrift.NewTApplicationExceptionDefault()
    error621, err := error620.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error621
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result619 := NewReleaseButtonResult()
  err = result619.Read(iprot)
  iprot.ReadMessageEnd()
  value = result619.Success
  return
}

/**
 * \brief Get the number of switch points defined in a schedule.
 * \param _id The unique identifier of the schedule value.
 * \return the number of switch points defined in this schedule.  Returns zero if the value is not a ValueID::ValueType_Schedule. The type can be tested with a call to ValueID::GetType.
 * 
 * Parameters:
 *  - _id
 */
func (p *RemoteManagerClient) GetNumSwitchPoints(_id *RemoteValueID) (retval622 byte, err os.Error) {
  err = p.SendGetNumSwitchPoints(_id)
  if err != nil { return }
  return p.RecvGetNumSwitchPoints()
}

func (p *RemoteManagerClient) SendGetNumSwitchPoints(_id *RemoteValueID)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("GetNumSwitchPoints", thrift.CALL, p.SeqId)
  args623 := NewGetNumSwitchPointsArgs()
  args623._id = _id
  err = args623.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvGetNumSwitchPoints() (value byte, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error625 := thrift.NewTApplicationExceptionDefault()
    error626, err := error625.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error626
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result624 := NewGetNumSwitchPointsResult()
  err = result624.Read(iprot)
  iprot.ReadMessageEnd()
  value = result624.Success
  return
}

/**
 * \brief Set a switch point in the schedule.
 * Inserts a new switch point into the schedule, unless a switch point already exists at the specified
 * time in which case that switch point is updated with the new setback value instead.
 * A maximum of nine switch points can be set in the schedule.
 * \param _id The unique identifier of the schedule value.
 * \param _hours The hours part of the time when the switch point will trigger.  The time is set using
 * the 24-hour clock, so this value must be between 0 and 23.
 * \param _minutes The minutes part of the time when the switch point will trigger.  This value must be
 * between 0 and 59.
 * \param _setback The setback in tenths of a degree Celsius.  The setback value can range from -128 (-12.8C)
 * to 120 (12.0C).  There are two special setback values - 121 is used to set Frost Protection mode, and
 * 122 is used to set Energy Saving mode.
 * \return true if successful.  Returns false if the value is not a ValueID::ValueType_Schedule. The type can be tested with a call to ValueID::GetType.
 * \see GetNumSwitchPoints, RemoveSwitchPoint, ClearSwitchPoints
 * 
 * Parameters:
 *  - _id
 *  - _hours
 *  - _minutes
 *  - _setback
 */
func (p *RemoteManagerClient) SetSwitchPoint(_id *RemoteValueID, _hours byte, _minutes byte, _setback byte) (retval627 bool, err os.Error) {
  err = p.SendSetSwitchPoint(_id, _hours, _minutes, _setback)
  if err != nil { return }
  return p.RecvSetSwitchPoint()
}

func (p *RemoteManagerClient) SendSetSwitchPoint(_id *RemoteValueID, _hours byte, _minutes byte, _setback byte)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("SetSwitchPoint", thrift.CALL, p.SeqId)
  args628 := NewSetSwitchPointArgs()
  args628._id = _id
  args628._hours = _hours
  args628._minutes = _minutes
  args628._setback = _setback
  err = args628.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvSetSwitchPoint() (value bool, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error630 := thrift.NewTApplicationExceptionDefault()
    error631, err := error630.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error631
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result629 := NewSetSwitchPointResult()
  err = result629.Read(iprot)
  iprot.ReadMessageEnd()
  value = result629.Success
  return
}

/**
 * \brief Remove a switch point from the schedule.
 * Removes the switch point at the specified time from the schedule.
 * \param _id The unique identifier of the schedule value.
 * \param _hours The hours part of the time when the switch point will trigger.  The time is set using
 * the 24-hour clock, so this value must be between 0 and 23.
 * \param _minutes The minutes part of the time when the switch point will trigger.  This value must be
 * between 0 and 59.
 * \return true if successful.  Returns false if the value is not a ValueID::ValueType_Schedule or if there
 * is not switch point with the specified time values. The type can be tested with a call to ValueID::GetType.
 * \see GetNumSwitchPoints, SetSwitchPoint, ClearSwitchPoints
 * 
 * Parameters:
 *  - _id
 *  - _hours
 *  - _minutes
 */
func (p *RemoteManagerClient) RemoveSwitchPoint(_id *RemoteValueID, _hours byte, _minutes byte) (retval632 bool, err os.Error) {
  err = p.SendRemoveSwitchPoint(_id, _hours, _minutes)
  if err != nil { return }
  return p.RecvRemoveSwitchPoint()
}

func (p *RemoteManagerClient) SendRemoveSwitchPoint(_id *RemoteValueID, _hours byte, _minutes byte)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("RemoveSwitchPoint", thrift.CALL, p.SeqId)
  args633 := NewRemoveSwitchPointArgs()
  args633._id = _id
  args633._hours = _hours
  args633._minutes = _minutes
  err = args633.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvRemoveSwitchPoint() (value bool, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error635 := thrift.NewTApplicationExceptionDefault()
    error636, err := error635.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error636
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result634 := NewRemoveSwitchPointResult()
  err = result634.Read(iprot)
  iprot.ReadMessageEnd()
  value = result634.Success
  return
}

/**
 * \brief Clears all switch points from the schedule.
 * \param _id The unique identifier of the schedule value.
 * \see GetNumSwitchPoints, SetSwitchPoint, RemoveSwitchPoint
 * 
 * Parameters:
 *  - _id
 */
func (p *RemoteManagerClient) ClearSwitchPoints(_id *RemoteValueID) (err os.Error) {
  err = p.SendClearSwitchPoints(_id)
  if err != nil { return }
  return p.RecvClearSwitchPoints()
}

func (p *RemoteManagerClient) SendClearSwitchPoints(_id *RemoteValueID)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("ClearSwitchPoints", thrift.CALL, p.SeqId)
  args638 := NewClearSwitchPointsArgs()
  args638._id = _id
  err = args638.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvClearSwitchPoints() (err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error640 := thrift.NewTApplicationExceptionDefault()
    error641, err := error640.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error641
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result639 := NewClearSwitchPointsResult()
  err = result639.Read(iprot)
  iprot.ReadMessageEnd()
  return
}

/**
 * \brief Gets switch point data from the schedule.
 * Retrieves the time and setback values from a switch point in the schedule.
 * \param _id The unique identifier of the schedule value.
 * \param _idx The index of the switch point, between zero and one less than the value
 * returned by GetNumSwitchPoints.
 * \param o_hours a pointer to a uint8 that will be filled with the hours part of the switch point data.
 * \param o_minutes a pointer to a uint8 that will be filled with the minutes part of the switch point data.
 * \param o_setback a pointer to an int8 that will be filled with the setback value.  This can range from -128
 * (-12.8C)to 120 (12.0C).  There are two special setback values - 121 is used to set Frost Protection mode, and
 * 122 is used to set Energy Saving mode.
 * \return true if successful.  Returns false if the value is not a ValueID::ValueType_Schedule. The type can be tested with a call to ValueID::GetType.
 * \see GetNumSwitchPoints
 * 
 * Parameters:
 *  - _id
 *  - _idx
 */
func (p *RemoteManagerClient) GetSwitchPoint(_id *RemoteValueID, _idx byte) (retval642 *GetSwitchPointReturnStruct, err os.Error) {
  err = p.SendGetSwitchPoint(_id, _idx)
  if err != nil { return }
  return p.RecvGetSwitchPoint()
}

func (p *RemoteManagerClient) SendGetSwitchPoint(_id *RemoteValueID, _idx byte)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("GetSwitchPoint", thrift.CALL, p.SeqId)
  args643 := NewGetSwitchPointArgs()
  args643._id = _id
  args643._idx = _idx
  err = args643.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvGetSwitchPoint() (value *GetSwitchPointReturnStruct, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error645 := thrift.NewTApplicationExceptionDefault()
    error646, err := error645.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error646
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result644 := NewGetSwitchPointResult()
  err = result644.Read(iprot)
  iprot.ReadMessageEnd()
  value = result644.Success
  return
}

/**
 * \brief Switch all devices on.
 * All devices that support the SwitchAll command class will be turned on.
 * 
 * Parameters:
 *  - _homeId
 */
func (p *RemoteManagerClient) SwitchAllOn(_homeId int32) (err os.Error) {
  err = p.SendSwitchAllOn(_homeId)
  if err != nil { return }
  return p.RecvSwitchAllOn()
}

func (p *RemoteManagerClient) SendSwitchAllOn(_homeId int32)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("SwitchAllOn", thrift.CALL, p.SeqId)
  args648 := NewSwitchAllOnArgs()
  args648._homeId = _homeId
  err = args648.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvSwitchAllOn() (err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error650 := thrift.NewTApplicationExceptionDefault()
    error651, err := error650.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error651
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result649 := NewSwitchAllOnResult()
  err = result649.Read(iprot)
  iprot.ReadMessageEnd()
  return
}

/**
 * \brief Switch all devices off.
 * All devices that support the SwitchAll command class will be turned off.
 * 
 * Parameters:
 *  - _homeId
 */
func (p *RemoteManagerClient) SwitchAllOff(_homeId int32) (err os.Error) {
  err = p.SendSwitchAllOff(_homeId)
  if err != nil { return }
  return p.RecvSwitchAllOff()
}

func (p *RemoteManagerClient) SendSwitchAllOff(_homeId int32)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("SwitchAllOff", thrift.CALL, p.SeqId)
  args653 := NewSwitchAllOffArgs()
  args653._homeId = _homeId
  err = args653.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvSwitchAllOff() (err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error655 := thrift.NewTApplicationExceptionDefault()
    error656, err := error655.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error656
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result654 := NewSwitchAllOffResult()
  err = result654.Read(iprot)
  iprot.ReadMessageEnd()
  return
}

/**
 * \brief Set the value of a configurable parameter in a device.
 * Some devices have various parameters that can be configured to control the device behaviour.
 * These are not reported by the device over the Z-Wave network, but can usually be found in
 * the device's user manual.
 * This method returns immediately, without waiting for confirmation from the device that the
 * change has been made.
 * \param _homeId The Home ID of the Z-Wave controller that manages the node.
 * \param _nodeId The ID of the node to configure.
 * \param _param The index of the parameter.
 * \param _value The value to which the parameter should be set.
 * \param _size Is an optional number of bytes to be sent for the paramter _value. Defaults to 2.
 * \return true if the a message setting the value was sent to the device.
 * \see RequestConfigParam
 * 
 * Parameters:
 *  - _homeId
 *  - _nodeId
 *  - _param
 *  - _value
 *  - _size
 */
func (p *RemoteManagerClient) SetConfigParam(_homeId int32, _nodeId byte, _param byte, _value int32, _size byte) (retval657 bool, err os.Error) {
  err = p.SendSetConfigParam(_homeId, _nodeId, _param, _value, _size)
  if err != nil { return }
  return p.RecvSetConfigParam()
}

func (p *RemoteManagerClient) SendSetConfigParam(_homeId int32, _nodeId byte, _param byte, _value int32, _size byte)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("SetConfigParam", thrift.CALL, p.SeqId)
  args658 := NewSetConfigParamArgs()
  args658._homeId = _homeId
  args658._nodeId = _nodeId
  args658._param = _param
  args658._value = _value
  args658._size = _size
  err = args658.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvSetConfigParam() (value bool, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error660 := thrift.NewTApplicationExceptionDefault()
    error661, err := error660.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error661
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result659 := NewSetConfigParamResult()
  err = result659.Read(iprot)
  iprot.ReadMessageEnd()
  value = result659.Success
  return
}

/**
 * \brief Request the value of a configurable parameter from a device.
 * Some devices have various parameters that can be configured to control the device behaviour.
 * These are not reported by the device over the Z-Wave network, but can usually be found in
 * the device's user manual.
 * This method requests the value of a parameter from the device, and then returns immediately,
 * without waiting for a response.  If the parameter index is valid for this device, and the
 * device is awake, the value will eventually be reported via a ValueChanged notification callback.
 * The ValueID reported in the callback will have an index set the same as _param and a command class
 * set to the same value as returned by a call to Configuration::StaticGetCommandClassId.
 * \param _homeId The Home ID of the Z-Wave controller that manages the node.
 * \param _nodeId The ID of the node to configure.
 * \param _param The index of the parameter.
 * \see SetConfigParam, ValueID, Notification
 * 
 * Parameters:
 *  - _homeId
 *  - _nodeId
 *  - _param
 */
func (p *RemoteManagerClient) RequestConfigParam(_homeId int32, _nodeId byte, _param byte) (err os.Error) {
  err = p.SendRequestConfigParam(_homeId, _nodeId, _param)
  if err != nil { return }
  return p.RecvRequestConfigParam()
}

func (p *RemoteManagerClient) SendRequestConfigParam(_homeId int32, _nodeId byte, _param byte)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("RequestConfigParam", thrift.CALL, p.SeqId)
  args663 := NewRequestConfigParamArgs()
  args663._homeId = _homeId
  args663._nodeId = _nodeId
  args663._param = _param
  err = args663.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvRequestConfigParam() (err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error665 := thrift.NewTApplicationExceptionDefault()
    error666, err := error665.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error666
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result664 := NewRequestConfigParamResult()
  err = result664.Read(iprot)
  iprot.ReadMessageEnd()
  return
}

/**
 * \brief Request the values of all known configurable parameters from a device.
 * \param _homeId The Home ID of the Z-Wave controller that manages the node.
 * \param _nodeId The ID of the node to configure.
 * \see SetConfigParam, ValueID, Notification
 * 
 * Parameters:
 *  - _homeId
 *  - _nodeId
 */
func (p *RemoteManagerClient) RequestAllConfigParams(_homeId int32, _nodeId byte) (err os.Error) {
  err = p.SendRequestAllConfigParams(_homeId, _nodeId)
  if err != nil { return }
  return p.RecvRequestAllConfigParams()
}

func (p *RemoteManagerClient) SendRequestAllConfigParams(_homeId int32, _nodeId byte)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("RequestAllConfigParams", thrift.CALL, p.SeqId)
  args668 := NewRequestAllConfigParamsArgs()
  args668._homeId = _homeId
  args668._nodeId = _nodeId
  err = args668.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvRequestAllConfigParams() (err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error670 := thrift.NewTApplicationExceptionDefault()
    error671, err := error670.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error671
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result669 := NewRequestAllConfigParamsResult()
  err = result669.Read(iprot)
  iprot.ReadMessageEnd()
  return
}

/**
 * \brief Gets the number of association groups reported by this node
 * In Z-Wave, groups are numbered starting from one.  For example, if a call to GetNumGroups returns 4, the _groupIdx
 * value to use in calls to GetAssociations, AddAssociation and RemoveAssociation will be a number between 1 and 4.
 * \param _homeId The Home ID of the Z-Wave controller that manages the node.
 * \param _nodeId The ID of the node whose groups we are interested in.
 * \return The number of groups.
 * \see GetAssociations, GetMaxAssociations, AddAssociation, RemoveAssociation
 * 
 * Parameters:
 *  - _homeId
 *  - _nodeId
 */
func (p *RemoteManagerClient) GetNumGroups(_homeId int32, _nodeId byte) (retval672 byte, err os.Error) {
  err = p.SendGetNumGroups(_homeId, _nodeId)
  if err != nil { return }
  return p.RecvGetNumGroups()
}

func (p *RemoteManagerClient) SendGetNumGroups(_homeId int32, _nodeId byte)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("GetNumGroups", thrift.CALL, p.SeqId)
  args673 := NewGetNumGroupsArgs()
  args673._homeId = _homeId
  args673._nodeId = _nodeId
  err = args673.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvGetNumGroups() (value byte, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error675 := thrift.NewTApplicationExceptionDefault()
    error676, err := error675.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error676
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result674 := NewGetNumGroupsResult()
  err = result674.Read(iprot)
  iprot.ReadMessageEnd()
  value = result674.Success
  return
}

/**
 * \brief Gets the associations for a group.
 * Makes a copy of the list of associated nodes in the group, and returns it in an array of uint8's.
 * The caller is responsible for freeing the array memory with a call to delete [].
 * \param _homeId The Home ID of the Z-Wave controller that manages the node.
 * \param _nodeId The ID of the node whose associations we are interested in.
 * \param _groupIdx One-based index of the group (because Z-Wave product manuals use one-based group numbering).
 * \param o_associations If the number of associations returned is greater than zero, o_associations will be set to point to an array containing the IDs of the associated nodes.
 * \return The number of nodes in the associations array.  If zero, the array will point to NULL, and does not need to be deleted.
 * \see GetNumGroups, AddAssociation, RemoveAssociation, GetMaxAssociations
 * 
 * Parameters:
 *  - _homeId
 *  - _nodeId
 *  - _groupIdx
 */
func (p *RemoteManagerClient) GetAssociations(_homeId int32, _nodeId byte, _groupIdx byte) (retval677 *GetAssociationsReturnStruct, err os.Error) {
  err = p.SendGetAssociations(_homeId, _nodeId, _groupIdx)
  if err != nil { return }
  return p.RecvGetAssociations()
}

func (p *RemoteManagerClient) SendGetAssociations(_homeId int32, _nodeId byte, _groupIdx byte)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("GetAssociations", thrift.CALL, p.SeqId)
  args678 := NewGetAssociationsArgs()
  args678._homeId = _homeId
  args678._nodeId = _nodeId
  args678._groupIdx = _groupIdx
  err = args678.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvGetAssociations() (value *GetAssociationsReturnStruct, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error680 := thrift.NewTApplicationExceptionDefault()
    error681, err := error680.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error681
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result679 := NewGetAssociationsResult()
  err = result679.Read(iprot)
  iprot.ReadMessageEnd()
  value = result679.Success
  return
}

/**
 * \brief Gets the maximum number of associations for a group.
 * \param _homeId The Home ID of the Z-Wave controller that manages the node.
 * \param _nodeId The ID of the node whose associations we are interested in.
 * \param _groupIdx one-based index of the group (because Z-Wave product manuals use one-based group numbering).
 * \return The maximum number of nodes that can be associated into the group.
 * \see GetNumGroups, AddAssociation, RemoveAssociation, GetAssociations
 * 
 * Parameters:
 *  - _homeId
 *  - _nodeId
 *  - _groupIdx
 */
func (p *RemoteManagerClient) GetMaxAssociations(_homeId int32, _nodeId byte, _groupIdx byte) (retval682 byte, err os.Error) {
  err = p.SendGetMaxAssociations(_homeId, _nodeId, _groupIdx)
  if err != nil { return }
  return p.RecvGetMaxAssociations()
}

func (p *RemoteManagerClient) SendGetMaxAssociations(_homeId int32, _nodeId byte, _groupIdx byte)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("GetMaxAssociations", thrift.CALL, p.SeqId)
  args683 := NewGetMaxAssociationsArgs()
  args683._homeId = _homeId
  args683._nodeId = _nodeId
  args683._groupIdx = _groupIdx
  err = args683.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvGetMaxAssociations() (value byte, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error685 := thrift.NewTApplicationExceptionDefault()
    error686, err := error685.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error686
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result684 := NewGetMaxAssociationsResult()
  err = result684.Read(iprot)
  iprot.ReadMessageEnd()
  value = result684.Success
  return
}

/**
 * \brief Returns a label for the particular group of a node.
 * This label is populated by the device specific configuration files.
 * \param _homeId The Home ID of the Z-Wave controller that manages the node.
 * \param _nodeId The ID of the node whose associations are to be changed.
 * \param _groupIdx One-based index of the group (because Z-Wave product manuals use one-based group numbering).
 * \see GetNumGroups, GetAssociations, GetMaxAssociations, AddAssociation
 * 
 * Parameters:
 *  - _homeId
 *  - _nodeId
 *  - _groupIdx
 */
func (p *RemoteManagerClient) GetGroupLabel(_homeId int32, _nodeId byte, _groupIdx byte) (retval687 string, err os.Error) {
  err = p.SendGetGroupLabel(_homeId, _nodeId, _groupIdx)
  if err != nil { return }
  return p.RecvGetGroupLabel()
}

func (p *RemoteManagerClient) SendGetGroupLabel(_homeId int32, _nodeId byte, _groupIdx byte)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("GetGroupLabel", thrift.CALL, p.SeqId)
  args688 := NewGetGroupLabelArgs()
  args688._homeId = _homeId
  args688._nodeId = _nodeId
  args688._groupIdx = _groupIdx
  err = args688.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvGetGroupLabel() (value string, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error690 := thrift.NewTApplicationExceptionDefault()
    error691, err := error690.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error691
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result689 := NewGetGroupLabelResult()
  err = result689.Read(iprot)
  iprot.ReadMessageEnd()
  value = result689.Success
  return
}

/**
 * \brief Adds a node to an association group.
 * Due to the possibility of a device being asleep, the command is assumed to suceeed, and the association data
 * held in this class is updated directly.  This will be reverted by a future Association message from the device
 * if the Z-Wave message actually failed to get through.  Notification callbacks will be sent in both cases.
 * \param _homeId The Home ID of the Z-Wave controller that manages the node.
 * \param _nodeId The ID of the node whose associations are to be changed.
 * \param _groupIdx One-based index of the group (because Z-Wave product manuals use one-based group numbering).
 * \param _targetNodeId Identifier for the node that will be added to the association group.
 * \see GetNumGroups, GetAssociations, GetMaxAssociations, RemoveAssociation
 * 
 * Parameters:
 *  - _homeId
 *  - _nodeId
 *  - _groupIdx
 *  - _targetNodeId
 */
func (p *RemoteManagerClient) AddAssociation(_homeId int32, _nodeId byte, _groupIdx byte, _targetNodeId byte) (err os.Error) {
  err = p.SendAddAssociation(_homeId, _nodeId, _groupIdx, _targetNodeId)
  if err != nil { return }
  return p.RecvAddAssociation()
}

func (p *RemoteManagerClient) SendAddAssociation(_homeId int32, _nodeId byte, _groupIdx byte, _targetNodeId byte)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("AddAssociation", thrift.CALL, p.SeqId)
  args693 := NewAddAssociationArgs()
  args693._homeId = _homeId
  args693._nodeId = _nodeId
  args693._groupIdx = _groupIdx
  args693._targetNodeId = _targetNodeId
  err = args693.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvAddAssociation() (err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error695 := thrift.NewTApplicationExceptionDefault()
    error696, err := error695.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error696
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result694 := NewAddAssociationResult()
  err = result694.Read(iprot)
  iprot.ReadMessageEnd()
  return
}

/**
 * \brief Removes a node from an association group.
 * Due to the possibility of a device being asleep, the command is assumed to suceeed, and the association data
 * held in this class is updated directly.  This will be reverted by a future Association message from the device
 * if the Z-Wave message actually failed to get through.   Notification callbacks will be sent in both cases.
 * \param _homeId The Home ID of the Z-Wave controller that manages the node.
 * \param _nodeId The ID of the node whose associations are to be changed.
 * \param _groupIdx One-based index of the group (because Z-Wave product manuals use one-based group numbering).
 * \param _targetNodeId Identifier for the node that will be removed from the association group.
 * \see GetNumGroups, GetAssociations, GetMaxAssociations, AddAssociation
 * 
 * Parameters:
 *  - _homeId
 *  - _nodeId
 *  - _groupIdx
 *  - _targetNodeId
 */
func (p *RemoteManagerClient) RemoveAssociation(_homeId int32, _nodeId byte, _groupIdx byte, _targetNodeId byte) (err os.Error) {
  err = p.SendRemoveAssociation(_homeId, _nodeId, _groupIdx, _targetNodeId)
  if err != nil { return }
  return p.RecvRemoveAssociation()
}

func (p *RemoteManagerClient) SendRemoveAssociation(_homeId int32, _nodeId byte, _groupIdx byte, _targetNodeId byte)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("RemoveAssociation", thrift.CALL, p.SeqId)
  args698 := NewRemoveAssociationArgs()
  args698._homeId = _homeId
  args698._nodeId = _nodeId
  args698._groupIdx = _groupIdx
  args698._targetNodeId = _targetNodeId
  err = args698.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvRemoveAssociation() (err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error700 := thrift.NewTApplicationExceptionDefault()
    error701, err := error700.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error701
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result699 := NewRemoveAssociationResult()
  err = result699.Read(iprot)
  iprot.ReadMessageEnd()
  return
}

/**
 * \brief Hard Reset a PC Z-Wave Controller.
 * Resets a controller and erases its network configuration settings.  The controller becomes a primary controller ready to add devices to a new network.
 * \param _homeId The Home ID of the Z-Wave controller to be reset.
 * \see SoftReset
 * 
 * Parameters:
 *  - _homeId
 */
func (p *RemoteManagerClient) ResetController(_homeId int32) (err os.Error) {
  err = p.SendResetController(_homeId)
  if err != nil { return }
  return p.RecvResetController()
}

func (p *RemoteManagerClient) SendResetController(_homeId int32)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("ResetController", thrift.CALL, p.SeqId)
  args703 := NewResetControllerArgs()
  args703._homeId = _homeId
  err = args703.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvResetController() (err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error705 := thrift.NewTApplicationExceptionDefault()
    error706, err := error705.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error706
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result704 := NewResetControllerResult()
  err = result704.Read(iprot)
  iprot.ReadMessageEnd()
  return
}

/**
 * \brief Soft Reset a PC Z-Wave Controller.
 * Resets a controller without erasing its network configuration settings.
 * \param _homeId The Home ID of the Z-Wave controller to be reset.
 * \see SoftReset
 * 
 * Parameters:
 *  - _homeId
 */
func (p *RemoteManagerClient) SoftReset(_homeId int32) (err os.Error) {
  err = p.SendSoftReset(_homeId)
  if err != nil { return }
  return p.RecvSoftReset()
}

func (p *RemoteManagerClient) SendSoftReset(_homeId int32)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("SoftReset", thrift.CALL, p.SeqId)
  args708 := NewSoftResetArgs()
  args708._homeId = _homeId
  err = args708.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvSoftReset() (err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error710 := thrift.NewTApplicationExceptionDefault()
    error711, err := error710.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error711
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result709 := NewSoftResetResult()
  err = result709.Read(iprot)
  iprot.ReadMessageEnd()
  return
}

/**
 * * \brief Start a controller command process.
 * * \param _homeId The Home ID of the Z-Wave controller.
 * * \param _command The command to be sent to the controller.
 * * \param _callback pointer to a function that will be called at various stages during the command process
 * * \param _context pointer to user defined data that will be passed into to the callback function.  Defaults to NULL.
 * * \param _highPower used only with the AddDevice, AddController, RemoveDevice and RemoveController commands.
 * * Usually when adding or removing devices, the controller operates at low power so that the controller must
 * * be physically close to the device for security reasons.  If _highPower is true, the controller will
 * * operate at normal power levels instead.  Defaults to false.
 * * \param _nodeId used only with the ReplaceFailedNode command, to specify the node that is going to be replaced.
 * * \return true if the command was accepted and has started.
 * * \see CancelControllerCommand, HasNodeFailed, RemoveFailedNode, Driver::ControllerCommand, Driver::pfnControllerCallback_t,
 * * to notify the user of progress or to request actions on the user's part.  Defaults to NULL.
 * * <p> Commands
 * * - Driver::ControllerCommand_AddController - Add a new secondary controller to the Z-Wave network.
 * * - Driver::ControllerCommand_AddDevice - Add a new device (but not a controller) to the Z-Wave network.
 * * - Driver::ControllerCommand_CreateNewPrimary (Not yet implemented)
 * * - Driver::ControllerCommand_ReceiveConfiguration -
 * * - Driver::ControllerCommand_RemoveController - remove a controller from the Z-Wave network.
 * * - Driver::ControllerCommand_RemoveDevice - remove a device (but not a controller) from the Z-Wave network.
 *  * - Driver::ControllerCommand_RemoveFailedNode - move a node to the controller's list of failed nodes.  The node must actually
 * * have failed or have been disabled since the command will fail if it responds.  A node must be in the controller's failed nodes list
 * * for ControllerCommand_ReplaceFailedNode to work.
 * * - Driver::ControllerCommand_HasNodeFailed - Check whether a node is in the controller's failed nodes list.
 * * - Driver::ControllerCommand_ReplaceFailedNode - replace a failed device with another. If the node is not in
 * * the controller's failed nodes list, or the node responds, this command will fail.
 * * - Driver:: ControllerCommand_TransferPrimaryRole	(Not yet implemented) - Add a new controller to the network and
 * * make it the primary.  The existing primary will become a secondary controller.
 * * - Driver::ControllerCommand_RequestNetworkUpdate - Update the controller with network information from the SUC/SIS.
 * * - Driver::ControllerCommand_RequestNodeNeighborUpdate - Get a node to rebuild its neighbour list.  This method also does ControllerCommand_RequestNodeNeighbors afterwards.
 * * - Driver::ControllerCommand_AssignReturnRoute - Assign a network return route to a device.
 * * - Driver::ControllerCommand_DeleteAllReturnRoutes - Delete all network return routes from a device.
 * * <p> Callbacks
 * * - Driver::ControllerState_Waiting, the controller is waiting for a user action.  A notice should be displayed
 * * to the user at this point, telling them what to do next.
 * * For the add, remove, replace and transfer primary role commands, the user needs to be told to press the
 * * inclusion button on the device that  is going to be added or removed.  For ControllerCommand_ReceiveConfiguration,
 * * they must set their other controller to send its data, and for ControllerCommand_CreateNewPrimary, set the other
 * * controller to learn new data.
 * * - Driver::ControllerState_InProgress - the controller is in the process of adding or removing the chosen node.  It is now too late to cancel the command.
 * * - Driver::ControllerState_Complete - the controller has finished adding or removing the node, and the command is complete.
 * * - Driver::ControllerState_Failed - will be sent if the command fails for any reason.
 * 
 * Parameters:
 *  - _homeId
 *  - _command
 *  - _highPower
 *  - _nodeId
 *  - _arg
 */
func (p *RemoteManagerClient) BeginControllerCommand(_homeId int32, _command DriverControllerCommand, _highPower bool, _nodeId byte, _arg byte) (retval712 bool, err os.Error) {
  err = p.SendBeginControllerCommand(_homeId, _command, _highPower, _nodeId, _arg)
  if err != nil { return }
  return p.RecvBeginControllerCommand()
}

func (p *RemoteManagerClient) SendBeginControllerCommand(_homeId int32, _command DriverControllerCommand, _highPower bool, _nodeId byte, _arg byte)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("BeginControllerCommand", thrift.CALL, p.SeqId)
  args713 := NewBeginControllerCommandArgs()
  args713._homeId = _homeId
  args713._command = _command
  args713._highPower = _highPower
  args713._nodeId = _nodeId
  args713._arg = _arg
  err = args713.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvBeginControllerCommand() (value bool, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error715 := thrift.NewTApplicationExceptionDefault()
    error716, err := error715.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error716
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result714 := NewBeginControllerCommandResult()
  err = result714.Read(iprot)
  iprot.ReadMessageEnd()
  value = result714.Success
  return
}

/**
 * \brief Cancels any in-progress command running on a controller.
 * \param _homeId The Home ID of the Z-Wave controller.
 * \return true if a command was running and was cancelled.
 * \see BeginControllerCommand
 * 
 * Parameters:
 *  - _homeId
 */
func (p *RemoteManagerClient) CancelControllerCommand(_homeId int32) (retval717 bool, err os.Error) {
  err = p.SendCancelControllerCommand(_homeId)
  if err != nil { return }
  return p.RecvCancelControllerCommand()
}

func (p *RemoteManagerClient) SendCancelControllerCommand(_homeId int32)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("CancelControllerCommand", thrift.CALL, p.SeqId)
  args718 := NewCancelControllerCommandArgs()
  args718._homeId = _homeId
  err = args718.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvCancelControllerCommand() (value bool, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error720 := thrift.NewTApplicationExceptionDefault()
    error721, err := error720.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error721
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result719 := NewCancelControllerCommandResult()
  err = result719.Read(iprot)
  iprot.ReadMessageEnd()
  value = result719.Success
  return
}

/**
 * \brief Gets the number of scenes that have been defined.
 * \return The number of scenes.
 * \see GetAllScenes, CreateScene, RemoveScene, AddSceneValue, RemoveSceneValue, SceneGetValues, SceneGetValueAsBool, SceneGetValueAsByte, SceneGetValueAsFloat, SceneGetValueAsInt, SceneGetValueAsShort, SceneGetValueAsString, SetSceneValue, GetSceneLabel, SetSceneLabel, SceneExists, ActivateScene
 */
func (p *RemoteManagerClient) GetNumScenes() (retval722 byte, err os.Error) {
  err = p.SendGetNumScenes()
  if err != nil { return }
  return p.RecvGetNumScenes()
}

func (p *RemoteManagerClient) SendGetNumScenes()(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("GetNumScenes", thrift.CALL, p.SeqId)
  args723 := NewGetNumScenesArgs()
  err = args723.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvGetNumScenes() (value byte, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error725 := thrift.NewTApplicationExceptionDefault()
    error726, err := error725.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error726
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result724 := NewGetNumScenesResult()
  err = result724.Read(iprot)
  iprot.ReadMessageEnd()
  value = result724.Success
  return
}

/**
 * \brief Gets a list of all the SceneIds.
 * \param _sceneIds is a pointer to an array of integers.
 * \return The number of scenes. If zero, _sceneIds will be NULL and doesn't need to be freed.
 * \see GetNumScenes, CreateScene, RemoveScene, AddSceneValue, RemoveSceneValue, SceneGetValues, SceneGetValueAsBool, SceneGetValueAsByte, SceneGetValueAsFloat, SceneGetValueAsInt, SceneGetValueAsShort, SceneGetValueAsString, SetSceneValue, GetSceneLabel, SetSceneLabel, SceneExists, ActivateScene
 */
func (p *RemoteManagerClient) GetAllScenes() (retval727 *GetAllScenesReturnStruct, err os.Error) {
  err = p.SendGetAllScenes()
  if err != nil { return }
  return p.RecvGetAllScenes()
}

func (p *RemoteManagerClient) SendGetAllScenes()(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("GetAllScenes", thrift.CALL, p.SeqId)
  args728 := NewGetAllScenesArgs()
  err = args728.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvGetAllScenes() (value *GetAllScenesReturnStruct, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error730 := thrift.NewTApplicationExceptionDefault()
    error731, err := error730.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error731
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result729 := NewGetAllScenesResult()
  err = result729.Read(iprot)
  iprot.ReadMessageEnd()
  value = result729.Success
  return
}

/**
 * \brief Create a new Scene passing in Scene ID
 * \return uint8 Scene ID used to reference the scene. 0 is failure result.
 * \see GetNumScenes, GetAllScenes, RemoveScene, AddSceneValue, RemoveSceneValue, SceneGetValues, SceneGetValueAsBool, SceneGetValueAsByte, SceneGetValueAsFloat, SceneGetValueAsInt, SceneGetValueAsShort, SceneGetValueAsString, SetSceneValue, GetSceneLabel, SetSceneLabel, SceneExists, ActivateScene
 * 
 */
func (p *RemoteManagerClient) CreateScene() (retval732 byte, err os.Error) {
  err = p.SendCreateScene()
  if err != nil { return }
  return p.RecvCreateScene()
}

func (p *RemoteManagerClient) SendCreateScene()(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("CreateScene", thrift.CALL, p.SeqId)
  args733 := NewCreateSceneArgs()
  err = args733.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvCreateScene() (value byte, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error735 := thrift.NewTApplicationExceptionDefault()
    error736, err := error735.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error736
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result734 := NewCreateSceneResult()
  err = result734.Read(iprot)
  iprot.ReadMessageEnd()
  value = result734.Success
  return
}

/**
 * \brief Remove an existing Scene.
 * \param _sceneId is an integer representing the unique Scene ID to be removed.
 * \return true if scene was removed.
 * \see GetNumScenes, GetAllScenes, CreateScene, AddSceneValue, RemoveSceneValue, SceneGetValues, SceneGetValueAsBool, SceneGetValueAsByte, SceneGetValueAsFloat, SceneGetValueAsInt, SceneGetValueAsShort, SceneGetValueAsString, SetSceneValue, GetSceneLabel, SetSceneLabel, SceneExists, ActivateScene
 * 
 * Parameters:
 *  - _sceneId
 */
func (p *RemoteManagerClient) RemoveScene(_sceneId byte) (retval737 bool, err os.Error) {
  err = p.SendRemoveScene(_sceneId)
  if err != nil { return }
  return p.RecvRemoveScene()
}

func (p *RemoteManagerClient) SendRemoveScene(_sceneId byte)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("RemoveScene", thrift.CALL, p.SeqId)
  args738 := NewRemoveSceneArgs()
  args738._sceneId = _sceneId
  err = args738.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvRemoveScene() (value bool, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error740 := thrift.NewTApplicationExceptionDefault()
    error741, err := error740.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error741
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result739 := NewRemoveSceneResult()
  err = result739.Read(iprot)
  iprot.ReadMessageEnd()
  value = result739.Success
  return
}

/**
 * \brief Add a bool Value ID to an existing scene.
 * \param _sceneId is an integer representing the unique Scene ID.
 * \param _valueId is the Value ID to be added.
 * \param _value is the bool value to be saved.
 * \return true if Value ID was added.
 * \see GetNumScenes, GetAllScenes, CreateScene, RemoveScene, RemoveSceneValue, SceneGetValues, SceneGetValueAsBool, SceneGetValueAsByte, SceneGetValueAsFloat, SceneGetValueAsInt, SceneGetValueAsShort, SceneGetValueAsString, SetSceneValue, GetSceneLabel, SetSceneLabel, SceneExists, ActivateScene
 * 
 * Parameters:
 *  - _sceneId
 *  - _valueId
 *  - _value
 */
func (p *RemoteManagerClient) AddSceneValueBool(_sceneId byte, _valueId *RemoteValueID, _value bool) (retval742 bool, err os.Error) {
  err = p.SendAddSceneValueBool(_sceneId, _valueId, _value)
  if err != nil { return }
  return p.RecvAddSceneValueBool()
}

func (p *RemoteManagerClient) SendAddSceneValueBool(_sceneId byte, _valueId *RemoteValueID, _value bool)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("AddSceneValue_Bool", thrift.CALL, p.SeqId)
  args743 := NewAddSceneValueBoolArgs()
  args743._sceneId = _sceneId
  args743._valueId = _valueId
  args743._value = _value
  err = args743.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvAddSceneValueBool() (value bool, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error745 := thrift.NewTApplicationExceptionDefault()
    error746, err := error745.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error746
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result744 := NewAddSceneValueBoolResult()
  err = result744.Read(iprot)
  iprot.ReadMessageEnd()
  value = result744.Success
  return
}

/**
 * \brief Add a byte Value ID to an existing scene.
 * \param _sceneId is an integer representing the unique Scene ID.
 * \param _valueId is the Value ID to be added.
 * \param _value is the byte value to be saved.
 * \return true if Value ID was added.
 * \see GetNumScenes, GetAllScenes, CreateScene, RemoveScene, RemoveSceneValue, SceneGetValues, SceneGetValueAsBool, SceneGetValueAsByte, SceneGetValueAsFloat, SceneGetValueAsInt, SceneGetValueAsShort, SceneGetValueAsString, SetSceneValue, GetSceneLabel, SetSceneLabel, SceneExists, ActivateScene
 * 
 * Parameters:
 *  - _sceneId
 *  - _valueId
 *  - _value
 */
func (p *RemoteManagerClient) AddSceneValueUint8(_sceneId byte, _valueId *RemoteValueID, _value byte) (retval747 bool, err os.Error) {
  err = p.SendAddSceneValueUint8(_sceneId, _valueId, _value)
  if err != nil { return }
  return p.RecvAddSceneValueUint8()
}

func (p *RemoteManagerClient) SendAddSceneValueUint8(_sceneId byte, _valueId *RemoteValueID, _value byte)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("AddSceneValue_Uint8", thrift.CALL, p.SeqId)
  args748 := NewAddSceneValueUint8Args()
  args748._sceneId = _sceneId
  args748._valueId = _valueId
  args748._value = _value
  err = args748.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvAddSceneValueUint8() (value bool, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error750 := thrift.NewTApplicationExceptionDefault()
    error751, err := error750.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error751
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result749 := NewAddSceneValueUint8Result()
  err = result749.Read(iprot)
  iprot.ReadMessageEnd()
  value = result749.Success
  return
}

/**
 * \brief Add a decimal Value ID to an existing scene.
 * \param _sceneId is an integer representing the unique Scene ID.
 * \param _valueId is the Value ID to be added.
 * \param _value is the float value to be saved.
 * \return true if Value ID was added.
 * \see GetNumScenes, GetAllScenes, CreateScene, RemoveScene, RemoveSceneValue, SceneGetValues, SceneGetValueAsBool, SceneGetValueAsByte, SceneGetValueAsFloat, SceneGetValueAsInt, SceneGetValueAsShort, SceneGetValueAsString, SetSceneValue, GetSceneLabel, SetSceneLabel, SceneExists, ActivateScene
 * 
 * Parameters:
 *  - _sceneId
 *  - _valueId
 *  - _value
 */
func (p *RemoteManagerClient) AddSceneValueFloat(_sceneId byte, _valueId *RemoteValueID, _value float64) (retval752 bool, err os.Error) {
  err = p.SendAddSceneValueFloat(_sceneId, _valueId, _value)
  if err != nil { return }
  return p.RecvAddSceneValueFloat()
}

func (p *RemoteManagerClient) SendAddSceneValueFloat(_sceneId byte, _valueId *RemoteValueID, _value float64)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("AddSceneValue_Float", thrift.CALL, p.SeqId)
  args753 := NewAddSceneValueFloatArgs()
  args753._sceneId = _sceneId
  args753._valueId = _valueId
  args753._value = _value
  err = args753.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvAddSceneValueFloat() (value bool, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error755 := thrift.NewTApplicationExceptionDefault()
    error756, err := error755.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error756
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result754 := NewAddSceneValueFloatResult()
  err = result754.Read(iprot)
  iprot.ReadMessageEnd()
  value = result754.Success
  return
}

/**
 * \brief Add a 32-bit signed integer Value ID to an existing scene.
 * \param _sceneId is an integer representing the unique Scene ID.
 * \param _valueId is the Value ID to be added.
 * \param _value is the int32 value to be saved.
 * \return true if Value ID was added.
 * \see GetNumScenes, GetAllScenes, CreateScene, RemoveScene, RemoveSceneValue, SceneGetValues, SceneGetValueAsBool, SceneGetValueAsByte, SceneGetValueAsFloat, SceneGetValueAsInt, SceneGetValueAsShort, SceneGetValueAsString, SetSceneValue, GetSceneLabel, SetSceneLabel, SceneExists, ActivateScene
 * 
 * Parameters:
 *  - _sceneId
 *  - _valueId
 *  - _value
 */
func (p *RemoteManagerClient) AddSceneValueInt32(_sceneId byte, _valueId *RemoteValueID, _value int32) (retval757 bool, err os.Error) {
  err = p.SendAddSceneValueInt32(_sceneId, _valueId, _value)
  if err != nil { return }
  return p.RecvAddSceneValueInt32()
}

func (p *RemoteManagerClient) SendAddSceneValueInt32(_sceneId byte, _valueId *RemoteValueID, _value int32)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("AddSceneValue_Int32", thrift.CALL, p.SeqId)
  args758 := NewAddSceneValueInt32Args()
  args758._sceneId = _sceneId
  args758._valueId = _valueId
  args758._value = _value
  err = args758.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvAddSceneValueInt32() (value bool, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error760 := thrift.NewTApplicationExceptionDefault()
    error761, err := error760.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error761
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result759 := NewAddSceneValueInt32Result()
  err = result759.Read(iprot)
  iprot.ReadMessageEnd()
  value = result759.Success
  return
}

/**
 * \brief Add a 16-bit signed integer Value ID to an existing scene.
 * \param _sceneId is an integer representing the unique Scene ID.
 * \param _valueId is the Value ID to be added.
 * \param _value is the int16 value to be saved.
 * \return true if Value ID was added.
 * \see GetNumScenes, GetAllScenes, CreateScene, RemoveScene, RemoveSceneValue, SceneGetValues, SceneGetValueAsBool, SceneGetValueAsByte, SceneGetValueAsFloat, SceneGetValueAsInt, SceneGetValueAsShort, SceneGetValueAsString, SetSceneValue, GetSceneLabel, SetSceneLabel, SceneExists, ActivateScene
 * 
 * Parameters:
 *  - _sceneId
 *  - _valueId
 *  - _value
 */
func (p *RemoteManagerClient) AddSceneValueInt16(_sceneId byte, _valueId *RemoteValueID, _value int16) (retval762 bool, err os.Error) {
  err = p.SendAddSceneValueInt16(_sceneId, _valueId, _value)
  if err != nil { return }
  return p.RecvAddSceneValueInt16()
}

func (p *RemoteManagerClient) SendAddSceneValueInt16(_sceneId byte, _valueId *RemoteValueID, _value int16)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("AddSceneValue_Int16", thrift.CALL, p.SeqId)
  args763 := NewAddSceneValueInt16Args()
  args763._sceneId = _sceneId
  args763._valueId = _valueId
  args763._value = _value
  err = args763.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvAddSceneValueInt16() (value bool, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error765 := thrift.NewTApplicationExceptionDefault()
    error766, err := error765.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error766
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result764 := NewAddSceneValueInt16Result()
  err = result764.Read(iprot)
  iprot.ReadMessageEnd()
  value = result764.Success
  return
}

/**
 * \brief Add a string Value ID to an existing scene.
 * \param _sceneId is an integer representing the unique Scene ID.
 * \param _valueId is the Value ID to be added.
 * \param _value is the string value to be saved.
 * \return true if Value ID was added.
 * \see GetNumScenes, GetAllScenes, CreateScene, RemoveScene, RemoveSceneValue, SceneGetValues, SceneGetValueAsBool, SceneGetValueAsByte, SceneGetValueAsFloat, SceneGetValueAsInt, SceneGetValueAsShort, SceneGetValueAsString, SetSceneValue, GetSceneLabel, SetSceneLabel, SceneExists, ActivateScene
 * 
 * Parameters:
 *  - _sceneId
 *  - _valueId
 *  - _value
 */
func (p *RemoteManagerClient) AddSceneValueString(_sceneId byte, _valueId *RemoteValueID, _value string) (retval767 bool, err os.Error) {
  err = p.SendAddSceneValueString(_sceneId, _valueId, _value)
  if err != nil { return }
  return p.RecvAddSceneValueString()
}

func (p *RemoteManagerClient) SendAddSceneValueString(_sceneId byte, _valueId *RemoteValueID, _value string)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("AddSceneValue_String", thrift.CALL, p.SeqId)
  args768 := NewAddSceneValueStringArgs()
  args768._sceneId = _sceneId
  args768._valueId = _valueId
  args768._value = _value
  err = args768.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvAddSceneValueString() (value bool, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error770 := thrift.NewTApplicationExceptionDefault()
    error771, err := error770.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error771
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result769 := NewAddSceneValueStringResult()
  err = result769.Read(iprot)
  iprot.ReadMessageEnd()
  value = result769.Success
  return
}

/**
 * \brief Add the selected item list Value ID to an existing scene (as a string).
 * \param _sceneId is an integer representing the unique Scene ID.
 * \param _valueId is the Value ID to be added.
 * \param _value is the string value to be saved.
 * \return true if Value ID was added.
 * \see GetNumScenes, GetAllScenes, CreateScene, RemoveScene, AddSceneValue, RemoveSceneValue, SceneGetValues, SceneGetValueAsBool, SceneGetValueAsByte, SceneGetValueAsFloat, SceneGetValueAsInt, SceneGetValueAsShort, SceneGetValueAsString, SetSceneValue, GetSceneLabel, SetSceneLabel, SceneExists, ActivateScene
 * 
 * Parameters:
 *  - _sceneId
 *  - _valueId
 *  - _value
 */
func (p *RemoteManagerClient) AddSceneValueListSelectionString(_sceneId byte, _valueId *RemoteValueID, _value string) (retval772 bool, err os.Error) {
  err = p.SendAddSceneValueListSelectionString(_sceneId, _valueId, _value)
  if err != nil { return }
  return p.RecvAddSceneValueListSelectionString()
}

func (p *RemoteManagerClient) SendAddSceneValueListSelectionString(_sceneId byte, _valueId *RemoteValueID, _value string)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("AddSceneValueListSelection_String", thrift.CALL, p.SeqId)
  args773 := NewAddSceneValueListSelectionStringArgs()
  args773._sceneId = _sceneId
  args773._valueId = _valueId
  args773._value = _value
  err = args773.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvAddSceneValueListSelectionString() (value bool, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error775 := thrift.NewTApplicationExceptionDefault()
    error776, err := error775.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error776
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result774 := NewAddSceneValueListSelectionStringResult()
  err = result774.Read(iprot)
  iprot.ReadMessageEnd()
  value = result774.Success
  return
}

/**
 * \brief Add the selected item list Value ID to an existing scene (as a integer).
 * \param _sceneId is an integer representing the unique Scene ID.
 * \param _valueId is the Value ID to be added.
 * \param _value is the integer value to be saved.
 * \return true if Value ID was added.
 * \see GetNumScenes, GetAllScenes, CreateScene, RemoveScene, AddSceneValue, RemoveSceneValue, SceneGetValues, SceneGetValueAsBool, SceneGetValueAsByte, SceneGetValueAsFloat, SceneGetValueAsInt, SceneGetValueAsShort, SceneGetValueAsString, SetSceneValue, GetSceneLabel, SetSceneLabel, SceneExists, ActivateScene
 * 
 * Parameters:
 *  - _sceneId
 *  - _valueId
 *  - _value
 */
func (p *RemoteManagerClient) AddSceneValueListSelectionInt32(_sceneId byte, _valueId *RemoteValueID, _value int32) (retval777 bool, err os.Error) {
  err = p.SendAddSceneValueListSelectionInt32(_sceneId, _valueId, _value)
  if err != nil { return }
  return p.RecvAddSceneValueListSelectionInt32()
}

func (p *RemoteManagerClient) SendAddSceneValueListSelectionInt32(_sceneId byte, _valueId *RemoteValueID, _value int32)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("AddSceneValueListSelection_Int32", thrift.CALL, p.SeqId)
  args778 := NewAddSceneValueListSelectionInt32Args()
  args778._sceneId = _sceneId
  args778._valueId = _valueId
  args778._value = _value
  err = args778.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvAddSceneValueListSelectionInt32() (value bool, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error780 := thrift.NewTApplicationExceptionDefault()
    error781, err := error780.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error781
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result779 := NewAddSceneValueListSelectionInt32Result()
  err = result779.Read(iprot)
  iprot.ReadMessageEnd()
  value = result779.Success
  return
}

/**
 * \brief Remove the Value ID from an existing scene.
 * \param _sceneId is an integer representing the unique Scene ID.
 * \param _valueId is the Value ID to be removed.
 * \return true if Value ID was removed.
 * \see GetNumScenes, GetAllScenes, CreateScene, RemoveScene, AddSceneValue, SceneGetValues, SceneGetValueAsBool, SceneGetValueAsByte, SceneGetValueAsFloat, SceneGetValueAsInt, SceneGetValueAsShort, SceneGetValueAsString, SetSceneValue, GetSceneLabel, SetSceneLabel, SceneExists, ActivateScene
 * 
 * Parameters:
 *  - _sceneId
 *  - _valueId
 */
func (p *RemoteManagerClient) RemoveSceneValue(_sceneId byte, _valueId *RemoteValueID) (retval782 bool, err os.Error) {
  err = p.SendRemoveSceneValue(_sceneId, _valueId)
  if err != nil { return }
  return p.RecvRemoveSceneValue()
}

func (p *RemoteManagerClient) SendRemoveSceneValue(_sceneId byte, _valueId *RemoteValueID)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("RemoveSceneValue", thrift.CALL, p.SeqId)
  args783 := NewRemoveSceneValueArgs()
  args783._sceneId = _sceneId
  args783._valueId = _valueId
  err = args783.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvRemoveSceneValue() (value bool, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error785 := thrift.NewTApplicationExceptionDefault()
    error786, err := error785.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error786
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result784 := NewRemoveSceneValueResult()
  err = result784.Read(iprot)
  iprot.ReadMessageEnd()
  value = result784.Success
  return
}

/**
 * \brief Retrieves the scene's list of values.
 * \param _sceneId The Scene ID of the scene to retrieve the value from.
 * \param o_value Pointer to an array of ValueIDs if return is non-zero.
 * \return The number of nodes in the o_value array. If zero, the array will point to NULL and does not need to be deleted.
 * \see GetNumScenes, GetAllScenes, CreateScene, RemoveScene, AddSceneValue, RemoveSceneValue, SceneGetValueAsBool, SceneGetValueAsByte, SceneGetValueAsFloat, SceneGetValueAsInt, SceneGetValueAsShort, SceneGetValueAsString, SetSceneValue, GetSceneLabel, SetSceneLabel, SceneExists, ActivateScene
 * 
 * Parameters:
 *  - _sceneId
 */
func (p *RemoteManagerClient) SceneGetValues(_sceneId byte) (retval787 *SceneGetValuesReturnStruct, err os.Error) {
  err = p.SendSceneGetValues(_sceneId)
  if err != nil { return }
  return p.RecvSceneGetValues()
}

func (p *RemoteManagerClient) SendSceneGetValues(_sceneId byte)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("SceneGetValues", thrift.CALL, p.SeqId)
  args788 := NewSceneGetValuesArgs()
  args788._sceneId = _sceneId
  err = args788.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvSceneGetValues() (value *SceneGetValuesReturnStruct, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error790 := thrift.NewTApplicationExceptionDefault()
    error791, err := error790.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error791
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result789 := NewSceneGetValuesResult()
  err = result789.Read(iprot)
  iprot.ReadMessageEnd()
  value = result789.Success
  return
}

/**
 * \brief Retrieves a scene's value as a bool.
 * \param _sceneId The Scene ID of the scene to retrieve the value from.
 * \param _valueId The Value ID of the value to retrieve.
 * \param o_value Pointer to a bool that will be filled with the returned value.
 * \return true if the value was obtained.
 * \see GetNumScenes, GetAllScenes, CreateScene, RemoveScene, AddSceneValue, RemoveSceneValue, SceneGetValues, SceneGetValueAsByte, SceneGetValueAsFloat, SceneGetValueAsInt, SceneGetValueAsShort, SceneGetValueAsString, SetSceneValue, GetSceneLabel, SetSceneLabel, SceneExists, ActivateScene
 * 
 * Parameters:
 *  - _sceneId
 *  - _valueId
 */
func (p *RemoteManagerClient) SceneGetValueAsBool(_sceneId byte, _valueId *RemoteValueID) (retval792 *BoolBool, err os.Error) {
  err = p.SendSceneGetValueAsBool(_sceneId, _valueId)
  if err != nil { return }
  return p.RecvSceneGetValueAsBool()
}

func (p *RemoteManagerClient) SendSceneGetValueAsBool(_sceneId byte, _valueId *RemoteValueID)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("SceneGetValueAsBool", thrift.CALL, p.SeqId)
  args793 := NewSceneGetValueAsBoolArgs()
  args793._sceneId = _sceneId
  args793._valueId = _valueId
  err = args793.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvSceneGetValueAsBool() (value *BoolBool, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error795 := thrift.NewTApplicationExceptionDefault()
    error796, err := error795.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error796
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result794 := NewSceneGetValueAsBoolResult()
  err = result794.Read(iprot)
  iprot.ReadMessageEnd()
  value = result794.Success
  return
}

/**
 * \brief Retrieves a scene's value as an 8-bit unsigned integer.
 * \param _sceneId The Scene ID of the scene to retrieve the value from.
 * \param _valueId The Value ID of the value to retrieve.
 * \param o_value Pointer to a uint8 that will be filled with the returned value.
 * \return true if the value was obtained.
 * \see GetNumScenes, GetAllScenes, CreateScene, RemoveScene, AddSceneValue, RemoveSceneValue, SceneGetValues, SceneGetValueAsBool, SceneGetValueAsFloat, SceneGetValueAsInt, SceneGetValueAsShort, SceneGetValueAsString, SetSceneValue, GetSceneLabel, SetSceneLabel, SceneExists, ActivateScene
 * 
 * Parameters:
 *  - _sceneId
 *  - _valueId
 */
func (p *RemoteManagerClient) SceneGetValueAsByte(_sceneId byte, _valueId *RemoteValueID) (retval797 *BoolUInt8, err os.Error) {
  err = p.SendSceneGetValueAsByte(_sceneId, _valueId)
  if err != nil { return }
  return p.RecvSceneGetValueAsByte()
}

func (p *RemoteManagerClient) SendSceneGetValueAsByte(_sceneId byte, _valueId *RemoteValueID)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("SceneGetValueAsByte", thrift.CALL, p.SeqId)
  args798 := NewSceneGetValueAsByteArgs()
  args798._sceneId = _sceneId
  args798._valueId = _valueId
  err = args798.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvSceneGetValueAsByte() (value *BoolUInt8, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error800 := thrift.NewTApplicationExceptionDefault()
    error801, err := error800.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error801
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result799 := NewSceneGetValueAsByteResult()
  err = result799.Read(iprot)
  iprot.ReadMessageEnd()
  value = result799.Success
  return
}

/**
 * \brief Retrieves a scene's value as a float.
 * \param _sceneId The Scene ID of the scene to retrieve the value from.
 * \param _valueId The Value ID of the value to retrieve.
 * \param o_value Pointer to a float that will be filled with the returned value.
 * \return true if the value was obtained.
 * \see GetNumScenes, GetAllScenes, CreateScene, RemoveScene, AddSceneValue, RemoveSceneValue, SceneGetValues, SceneGetValueAsBool, SceneGetValueAsByte, SceneGetValueAsInt, SceneGetValueAsShort, SceneGetValueAsString, SetSceneValue, GetSceneLabel, SetSceneLabel, SceneExists, ActivateScene
 * 
 * Parameters:
 *  - _sceneId
 *  - _valueId
 */
func (p *RemoteManagerClient) SceneGetValueAsFloat(_sceneId byte, _valueId *RemoteValueID) (retval802 *BoolFloat, err os.Error) {
  err = p.SendSceneGetValueAsFloat(_sceneId, _valueId)
  if err != nil { return }
  return p.RecvSceneGetValueAsFloat()
}

func (p *RemoteManagerClient) SendSceneGetValueAsFloat(_sceneId byte, _valueId *RemoteValueID)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("SceneGetValueAsFloat", thrift.CALL, p.SeqId)
  args803 := NewSceneGetValueAsFloatArgs()
  args803._sceneId = _sceneId
  args803._valueId = _valueId
  err = args803.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvSceneGetValueAsFloat() (value *BoolFloat, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error805 := thrift.NewTApplicationExceptionDefault()
    error806, err := error805.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error806
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result804 := NewSceneGetValueAsFloatResult()
  err = result804.Read(iprot)
  iprot.ReadMessageEnd()
  value = result804.Success
  return
}

/**
 * \brief Retrieves a scene's value as a 32-bit signed integer.
 * \param _sceneId The Scene ID of the scene to retrieve the value from.
 * \param _valueId The Value ID of the value to retrieve.
 * \param o_value Pointer to a int32 that will be filled with the returned value.
 * \return true if the value was obtained.
 * \see GetNumScenes, GetAllScenes, CreateScene, RemoveScene, AddSceneValue, RemoveSceneValue, SceneGetValues, SceneGetValueAsBool, SceneGetValueAsByte, SceneGetValueAsFloat, SceneGetValueAsShort, SceneGetValueAsString, SetSceneValue, GetSceneLabel, SetSceneLabel, SceneExists, ActivateScene
 * 
 * Parameters:
 *  - _sceneId
 *  - _valueId
 */
func (p *RemoteManagerClient) SceneGetValueAsInt(_sceneId byte, _valueId *RemoteValueID) (retval807 *BoolInt, err os.Error) {
  err = p.SendSceneGetValueAsInt(_sceneId, _valueId)
  if err != nil { return }
  return p.RecvSceneGetValueAsInt()
}

func (p *RemoteManagerClient) SendSceneGetValueAsInt(_sceneId byte, _valueId *RemoteValueID)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("SceneGetValueAsInt", thrift.CALL, p.SeqId)
  args808 := NewSceneGetValueAsIntArgs()
  args808._sceneId = _sceneId
  args808._valueId = _valueId
  err = args808.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvSceneGetValueAsInt() (value *BoolInt, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error810 := thrift.NewTApplicationExceptionDefault()
    error811, err := error810.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error811
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result809 := NewSceneGetValueAsIntResult()
  err = result809.Read(iprot)
  iprot.ReadMessageEnd()
  value = result809.Success
  return
}

/**
 * \brief Retrieves a scene's value as a 16-bit signed integer.
 * \param _sceneId The Scene ID of the scene to retrieve the value from.
 * \param _valueId The Value ID of the value to retrieve.
 * \param o_value Pointer to a int16 that will be filled with the returned value.
 * \return true if the value was obtained.
 * \see GetNumScenes, GetAllScenes, CreateScene, RemoveScene, AddSceneValue, RemoveSceneValue, SceneGetValues, SceneGetValueAsBool, SceneGetValueAsByte, SceneGetValueAsFloat, SceneGetValueAsInt, SceneGetValueAsString, SetSceneValue, GetSceneLabel, SetSceneLabel, SceneExists, ActivateScene
 * 
 * Parameters:
 *  - _sceneId
 *  - _valueId
 */
func (p *RemoteManagerClient) SceneGetValueAsShort(_sceneId byte, _valueId *RemoteValueID) (retval812 *BoolInt16, err os.Error) {
  err = p.SendSceneGetValueAsShort(_sceneId, _valueId)
  if err != nil { return }
  return p.RecvSceneGetValueAsShort()
}

func (p *RemoteManagerClient) SendSceneGetValueAsShort(_sceneId byte, _valueId *RemoteValueID)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("SceneGetValueAsShort", thrift.CALL, p.SeqId)
  args813 := NewSceneGetValueAsShortArgs()
  args813._sceneId = _sceneId
  args813._valueId = _valueId
  err = args813.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvSceneGetValueAsShort() (value *BoolInt16, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error815 := thrift.NewTApplicationExceptionDefault()
    error816, err := error815.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error816
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result814 := NewSceneGetValueAsShortResult()
  err = result814.Read(iprot)
  iprot.ReadMessageEnd()
  value = result814.Success
  return
}

/**
 * \brief Retrieves a scene's value as a string.
 * \param _sceneId The Scene ID of the scene to retrieve the value from.
 * \param _valueId The Value ID of the value to retrieve.
 * \param o_value Pointer to a string that will be filled with the returned value.
 * \return true if the value was obtained.
 * \see GetNumScenes, GetAllScenes, CreateScene, RemoveScene, AddSceneValue, RemoveSceneValue, SceneGetValues, SceneGetValueAsBool, SceneGetValueAsByte, SceneGetValueAsFloat, SceneGetValueAsInt, SceneGetValueAsShort, SetSceneValue, GetSceneLabel, SetSceneLabel, SceneExists, ActivateScene
 * 
 * Parameters:
 *  - _sceneId
 *  - _valueId
 */
func (p *RemoteManagerClient) SceneGetValueAsString(_sceneId byte, _valueId *RemoteValueID) (retval817 *BoolString, err os.Error) {
  err = p.SendSceneGetValueAsString(_sceneId, _valueId)
  if err != nil { return }
  return p.RecvSceneGetValueAsString()
}

func (p *RemoteManagerClient) SendSceneGetValueAsString(_sceneId byte, _valueId *RemoteValueID)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("SceneGetValueAsString", thrift.CALL, p.SeqId)
  args818 := NewSceneGetValueAsStringArgs()
  args818._sceneId = _sceneId
  args818._valueId = _valueId
  err = args818.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvSceneGetValueAsString() (value *BoolString, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error820 := thrift.NewTApplicationExceptionDefault()
    error821, err := error820.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error821
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result819 := NewSceneGetValueAsStringResult()
  err = result819.Read(iprot)
  iprot.ReadMessageEnd()
  value = result819.Success
  return
}

/**
 * \brief Retrieves a scene's value as a list (as a string).
 * \param _sceneId The Scene ID of the scene to retrieve the value from.
 * \param _valueId The Value ID of the value to retrieve.
 * \param o_value Pointer to a string that will be filled with the returned value.
 * \return true if the value was obtained.
 * \see GetNumScenes, GetAllScenes, CreateScene, RemoveScene, AddSceneValue, RemoveSceneValue, SceneGetValues, SceneGetValueAsBool, SceneGetValueAsByte, SceneGetValueAsFloat, SceneGetValueAsInt, SceneGetValueAsShort, SceneGetValueAsString, SetSceneValue, GetSceneLabel, SetSceneLabel, SceneExists, ActivateScene
 * 
 * Parameters:
 *  - _sceneId
 *  - _valueId
 */
func (p *RemoteManagerClient) SceneGetValueListSelectionString(_sceneId byte, _valueId *RemoteValueID) (retval822 *BoolString, err os.Error) {
  err = p.SendSceneGetValueListSelectionString(_sceneId, _valueId)
  if err != nil { return }
  return p.RecvSceneGetValueListSelectionString()
}

func (p *RemoteManagerClient) SendSceneGetValueListSelectionString(_sceneId byte, _valueId *RemoteValueID)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("SceneGetValueListSelection_String", thrift.CALL, p.SeqId)
  args823 := NewSceneGetValueListSelectionStringArgs()
  args823._sceneId = _sceneId
  args823._valueId = _valueId
  err = args823.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvSceneGetValueListSelectionString() (value *BoolString, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error825 := thrift.NewTApplicationExceptionDefault()
    error826, err := error825.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error826
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result824 := NewSceneGetValueListSelectionStringResult()
  err = result824.Read(iprot)
  iprot.ReadMessageEnd()
  value = result824.Success
  return
}

/**
 * \brief Retrieves a scene's value as a list (as a integer).
 * \param _sceneId The Scene ID of the scene to retrieve the value from.
 * \param _valueId The Value ID of the value to retrieve.
 * \param o_value Pointer to a integer that will be filled with the returned value.
 * \return true if the value was obtained.
 * \see GetNumScenes, GetAllScenes, CreateScene, RemoveScene, AddSceneValue, RemoveSceneValue, SceneGetValues, SceneGetValueAsBool, SceneGetValueAsByte, SceneGetValueAsFloat, SceneGetValueAsInt, SceneGetValueAsShort, SceneGetValueAsString, SetSceneValue, GetSceneLabel, SetSceneLabel, SceneExists, ActivateScene
 * 
 * Parameters:
 *  - _sceneId
 *  - _valueId
 */
func (p *RemoteManagerClient) SceneGetValueListSelectionInt32(_sceneId byte, _valueId *RemoteValueID) (retval827 *BoolInt, err os.Error) {
  err = p.SendSceneGetValueListSelectionInt32(_sceneId, _valueId)
  if err != nil { return }
  return p.RecvSceneGetValueListSelectionInt32()
}

func (p *RemoteManagerClient) SendSceneGetValueListSelectionInt32(_sceneId byte, _valueId *RemoteValueID)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("SceneGetValueListSelection_Int32", thrift.CALL, p.SeqId)
  args828 := NewSceneGetValueListSelectionInt32Args()
  args828._sceneId = _sceneId
  args828._valueId = _valueId
  err = args828.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvSceneGetValueListSelectionInt32() (value *BoolInt, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error830 := thrift.NewTApplicationExceptionDefault()
    error831, err := error830.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error831
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result829 := NewSceneGetValueListSelectionInt32Result()
  err = result829.Read(iprot)
  iprot.ReadMessageEnd()
  value = result829.Success
  return
}

/**
 * \brief Set a bool Value ID to an existing scene's ValueID
 * \param _sceneId is an integer representing the unique Scene ID.
 * \param _valueId is the Value ID to be added.
 * \param _value is the bool value to be saved.
 * \return true if Value ID was added.
 * \see GetNumScenes, GetAllScenes, CreateScene, RemoveScene, AddSceneValue, RemoveSceneValue, SceneGetValues, SceneGetValueAsBool, SceneGetValueAsByte, SceneGetValueAsFloat, SceneGetValueAsInt, SceneGetValueAsShort, SceneGetValueAsString, GetSceneLabel, SetSceneLabel, SceneExists, ActivateScene
 * 
 * Parameters:
 *  - _sceneId
 *  - _valueId
 *  - _value
 */
func (p *RemoteManagerClient) SetSceneValueBool(_sceneId byte, _valueId *RemoteValueID, _value bool) (retval832 bool, err os.Error) {
  err = p.SendSetSceneValueBool(_sceneId, _valueId, _value)
  if err != nil { return }
  return p.RecvSetSceneValueBool()
}

func (p *RemoteManagerClient) SendSetSceneValueBool(_sceneId byte, _valueId *RemoteValueID, _value bool)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("SetSceneValue_Bool", thrift.CALL, p.SeqId)
  args833 := NewSetSceneValueBoolArgs()
  args833._sceneId = _sceneId
  args833._valueId = _valueId
  args833._value = _value
  err = args833.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvSetSceneValueBool() (value bool, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error835 := thrift.NewTApplicationExceptionDefault()
    error836, err := error835.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error836
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result834 := NewSetSceneValueBoolResult()
  err = result834.Read(iprot)
  iprot.ReadMessageEnd()
  value = result834.Success
  return
}

/**
 * \brief Set a byte Value ID to an existing scene's ValueID
 * \param _sceneId is an integer representing the unique Scene ID.
 * \param _valueId is the Value ID to be added.
 * \param _value is the byte value to be saved.
 * \return true if Value ID was added.
 * \see GetNumScenes, GetAllScenes, CreateScene, RemoveScene, AddSceneValue, RemoveSceneValue, SceneGetValues, SceneGetValueAsBool, SceneGetValueAsByte, SceneGetValueAsFloat, SceneGetValueAsInt, SceneGetValueAsShort, SceneGetValueAsString, GetSceneLabel, SetSceneLabel, SceneExists, ActivateScene
 * 
 * Parameters:
 *  - _sceneId
 *  - _valueId
 *  - _value
 */
func (p *RemoteManagerClient) SetSceneValueUint8(_sceneId byte, _valueId *RemoteValueID, _value byte) (retval837 bool, err os.Error) {
  err = p.SendSetSceneValueUint8(_sceneId, _valueId, _value)
  if err != nil { return }
  return p.RecvSetSceneValueUint8()
}

func (p *RemoteManagerClient) SendSetSceneValueUint8(_sceneId byte, _valueId *RemoteValueID, _value byte)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("SetSceneValue_Uint8", thrift.CALL, p.SeqId)
  args838 := NewSetSceneValueUint8Args()
  args838._sceneId = _sceneId
  args838._valueId = _valueId
  args838._value = _value
  err = args838.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvSetSceneValueUint8() (value bool, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error840 := thrift.NewTApplicationExceptionDefault()
    error841, err := error840.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error841
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result839 := NewSetSceneValueUint8Result()
  err = result839.Read(iprot)
  iprot.ReadMessageEnd()
  value = result839.Success
  return
}

/**
 * \brief Set a decimal Value ID to an existing scene's ValueID
 * \param _sceneId is an integer representing the unique Scene ID.
 * \param _valueId is the Value ID to be added.
 * \param _value is the float value to be saved.
 * \return true if Value ID was added.
 * \see GetNumScenes, GetAllScenes, CreateScene, RemoveScene, AddSceneValue, RemoveSceneValue, SceneGetValues, SceneGetValueAsBool, SceneGetValueAsByte, SceneGetValueAsFloat, SceneGetValueAsInt, SceneGetValueAsShort, SceneGetValueAsString, GetSceneLabel, SetSceneLabel, SceneExists, ActivateScene
 * 
 * Parameters:
 *  - _sceneId
 *  - _valueId
 *  - _value
 */
func (p *RemoteManagerClient) SetSceneValueFloat(_sceneId byte, _valueId *RemoteValueID, _value float64) (retval842 bool, err os.Error) {
  err = p.SendSetSceneValueFloat(_sceneId, _valueId, _value)
  if err != nil { return }
  return p.RecvSetSceneValueFloat()
}

func (p *RemoteManagerClient) SendSetSceneValueFloat(_sceneId byte, _valueId *RemoteValueID, _value float64)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("SetSceneValue_Float", thrift.CALL, p.SeqId)
  args843 := NewSetSceneValueFloatArgs()
  args843._sceneId = _sceneId
  args843._valueId = _valueId
  args843._value = _value
  err = args843.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvSetSceneValueFloat() (value bool, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error845 := thrift.NewTApplicationExceptionDefault()
    error846, err := error845.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error846
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result844 := NewSetSceneValueFloatResult()
  err = result844.Read(iprot)
  iprot.ReadMessageEnd()
  value = result844.Success
  return
}

/**
 * \brief Set a 32-bit signed integer Value ID to an existing scene's ValueID
 * \param _sceneId is an integer representing the unique Scene ID.
 * \param _valueId is the Value ID to be added.
 * \param _value is the int32 value to be saved.
 * \return true if Value ID was added.
 * \see GetNumScenes, GetAllScenes, CreateScene, RemoveScene, AddSceneValue, RemoveSceneValue, SceneGetValues, SceneGetValueAsBool, SceneGetValueAsByte, SceneGetValueAsFloat, SceneGetValueAsInt, SceneGetValueAsShort, SceneGetValueAsString, GetSceneLabel, SetSceneLabel, SceneExists, ActivateScene
 * 
 * Parameters:
 *  - _sceneId
 *  - _valueId
 *  - _value
 */
func (p *RemoteManagerClient) SetSceneValueInt32(_sceneId byte, _valueId *RemoteValueID, _value int32) (retval847 bool, err os.Error) {
  err = p.SendSetSceneValueInt32(_sceneId, _valueId, _value)
  if err != nil { return }
  return p.RecvSetSceneValueInt32()
}

func (p *RemoteManagerClient) SendSetSceneValueInt32(_sceneId byte, _valueId *RemoteValueID, _value int32)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("SetSceneValue_Int32", thrift.CALL, p.SeqId)
  args848 := NewSetSceneValueInt32Args()
  args848._sceneId = _sceneId
  args848._valueId = _valueId
  args848._value = _value
  err = args848.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvSetSceneValueInt32() (value bool, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error850 := thrift.NewTApplicationExceptionDefault()
    error851, err := error850.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error851
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result849 := NewSetSceneValueInt32Result()
  err = result849.Read(iprot)
  iprot.ReadMessageEnd()
  value = result849.Success
  return
}

/**
 * \brief Set a 16-bit integer Value ID to an existing scene's ValueID
 * \param _sceneId is an integer representing the unique Scene ID.
 * \param _valueId is the Value ID to be added.
 * \param _value is the int16 value to be saved.
 * \return true if Value ID was added.
 * \see GetNumScenes, GetAllScenes, CreateScene, RemoveScene, AddSceneValue, RemoveSceneValue, SceneGetValues, SceneGetValueAsBool, SceneGetValueAsByte, SceneGetValueAsFloat, SceneGetValueAsInt, SceneGetValueAsShort, SceneGetValueAsString, GetSceneLabel, SetSceneLabel, SceneExists, ActivateScene
 * 
 * Parameters:
 *  - _sceneId
 *  - _valueId
 *  - _value
 */
func (p *RemoteManagerClient) SetSceneValueInt16(_sceneId byte, _valueId *RemoteValueID, _value int16) (retval852 bool, err os.Error) {
  err = p.SendSetSceneValueInt16(_sceneId, _valueId, _value)
  if err != nil { return }
  return p.RecvSetSceneValueInt16()
}

func (p *RemoteManagerClient) SendSetSceneValueInt16(_sceneId byte, _valueId *RemoteValueID, _value int16)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("SetSceneValue_Int16", thrift.CALL, p.SeqId)
  args853 := NewSetSceneValueInt16Args()
  args853._sceneId = _sceneId
  args853._valueId = _valueId
  args853._value = _value
  err = args853.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvSetSceneValueInt16() (value bool, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error855 := thrift.NewTApplicationExceptionDefault()
    error856, err := error855.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error856
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result854 := NewSetSceneValueInt16Result()
  err = result854.Read(iprot)
  iprot.ReadMessageEnd()
  value = result854.Success
  return
}

/**
 * \brief Set a string Value ID to an existing scene's ValueID
 * \param _sceneId is an integer representing the unique Scene ID.
 * \param _valueId is the Value ID to be added.
 * \param _value is the string value to be saved.
 * \return true if Value ID was added.
 * \see GetNumScenes, GetAllScenes, CreateScene, RemoveScene, AddSceneValue, RemoveSceneValue, SceneGetValues, SceneGetValueAsBool, SceneGetValueAsByte, SceneGetValueAsFloat, SceneGetValueAsInt, SceneGetValueAsShort, SceneGetValueAsString, GetSceneLabel, SetSceneLabel, SceneExists, ActivateScene
 * 
 * Parameters:
 *  - _sceneId
 *  - _valueId
 *  - _value
 */
func (p *RemoteManagerClient) SetSceneValueString(_sceneId byte, _valueId *RemoteValueID, _value string) (retval857 bool, err os.Error) {
  err = p.SendSetSceneValueString(_sceneId, _valueId, _value)
  if err != nil { return }
  return p.RecvSetSceneValueString()
}

func (p *RemoteManagerClient) SendSetSceneValueString(_sceneId byte, _valueId *RemoteValueID, _value string)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("SetSceneValue_String", thrift.CALL, p.SeqId)
  args858 := NewSetSceneValueStringArgs()
  args858._sceneId = _sceneId
  args858._valueId = _valueId
  args858._value = _value
  err = args858.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvSetSceneValueString() (value bool, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error860 := thrift.NewTApplicationExceptionDefault()
    error861, err := error860.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error861
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result859 := NewSetSceneValueStringResult()
  err = result859.Read(iprot)
  iprot.ReadMessageEnd()
  value = result859.Success
  return
}

/**
 * \brief Set the list selected item Value ID to an existing scene's ValueID (as a string).
 * \param _sceneId is an integer representing the unique Scene ID.
 * \param _valueId is the Value ID to be added.
 * \param _value is the string value to be saved.
 * \return true if Value ID was added.
 * \see GetNumScenes, GetAllScenes, CreateScene, RemoveScene, AddSceneValue, RemoveSceneValue, SceneGetValues, SceneGetValueAsBool, SceneGetValueAsByte, SceneGetValueAsFloat, SceneGetValueAsInt, SceneGetValueAsShort, SceneGetValueAsString, SetSceneValue, GetSceneLabel, SetSceneLabel, SceneExists, ActivateScene
 * 
 * Parameters:
 *  - _sceneId
 *  - _valueId
 *  - _value
 */
func (p *RemoteManagerClient) SetSceneValueListSelectionString(_sceneId byte, _valueId *RemoteValueID, _value string) (retval862 bool, err os.Error) {
  err = p.SendSetSceneValueListSelectionString(_sceneId, _valueId, _value)
  if err != nil { return }
  return p.RecvSetSceneValueListSelectionString()
}

func (p *RemoteManagerClient) SendSetSceneValueListSelectionString(_sceneId byte, _valueId *RemoteValueID, _value string)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("SetSceneValueListSelection_String", thrift.CALL, p.SeqId)
  args863 := NewSetSceneValueListSelectionStringArgs()
  args863._sceneId = _sceneId
  args863._valueId = _valueId
  args863._value = _value
  err = args863.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvSetSceneValueListSelectionString() (value bool, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error865 := thrift.NewTApplicationExceptionDefault()
    error866, err := error865.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error866
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result864 := NewSetSceneValueListSelectionStringResult()
  err = result864.Read(iprot)
  iprot.ReadMessageEnd()
  value = result864.Success
  return
}

/**
 * \brief Set the list selected item Value ID to an existing scene's ValueID (as a integer).
 * \param _sceneId is an integer representing the unique Scene ID.
 * \param _valueId is the Value ID to be added.
 * \param _value is the integer value to be saved.
 * \return true if Value ID was added.
 * \see GetNumScenes, GetAllScenes, CreateScene, RemoveScene, AddSceneValue, RemoveSceneValue, SceneGetValues, SceneGetValueAsBool, SceneGetValueAsByte, SceneGetValueAsFloat, SceneGetValueAsInt, SceneGetValueAsShort, SceneGetValueAsString, SetSceneValue, GetSceneLabel, SetSceneLabel, SceneExists, ActivateScene
 * 
 * Parameters:
 *  - _sceneId
 *  - _valueId
 *  - _value
 */
func (p *RemoteManagerClient) SetSceneValueListSelectionInt32(_sceneId byte, _valueId *RemoteValueID, _value int32) (retval867 bool, err os.Error) {
  err = p.SendSetSceneValueListSelectionInt32(_sceneId, _valueId, _value)
  if err != nil { return }
  return p.RecvSetSceneValueListSelectionInt32()
}

func (p *RemoteManagerClient) SendSetSceneValueListSelectionInt32(_sceneId byte, _valueId *RemoteValueID, _value int32)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("SetSceneValueListSelection_Int32", thrift.CALL, p.SeqId)
  args868 := NewSetSceneValueListSelectionInt32Args()
  args868._sceneId = _sceneId
  args868._valueId = _valueId
  args868._value = _value
  err = args868.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvSetSceneValueListSelectionInt32() (value bool, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error870 := thrift.NewTApplicationExceptionDefault()
    error871, err := error870.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error871
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result869 := NewSetSceneValueListSelectionInt32Result()
  err = result869.Read(iprot)
  iprot.ReadMessageEnd()
  value = result869.Success
  return
}

/**
 * \brief Returns a label for the particular scene.
 * \param _sceneId The Scene ID
 * \return The label string.
 * \see GetNumScenes, GetAllScenes, CreateScene, RemoveScene, AddSceneValue, RemoveSceneValue, SceneGetValues, SceneGetValueAsBool, SceneGetValueAsByte, SceneGetValueAsFloat, SceneGetValueAsInt, SceneGetValueAsShort, SceneGetValueAsString, SetSceneValue, SetSceneLabel, SceneExists, ActivateScene
 * 
 * Parameters:
 *  - _sceneId
 */
func (p *RemoteManagerClient) GetSceneLabel(_sceneId byte) (retval872 string, err os.Error) {
  err = p.SendGetSceneLabel(_sceneId)
  if err != nil { return }
  return p.RecvGetSceneLabel()
}

func (p *RemoteManagerClient) SendGetSceneLabel(_sceneId byte)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("GetSceneLabel", thrift.CALL, p.SeqId)
  args873 := NewGetSceneLabelArgs()
  args873._sceneId = _sceneId
  err = args873.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvGetSceneLabel() (value string, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error875 := thrift.NewTApplicationExceptionDefault()
    error876, err := error875.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error876
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result874 := NewGetSceneLabelResult()
  err = result874.Read(iprot)
  iprot.ReadMessageEnd()
  value = result874.Success
  return
}

/**
 * \brief Sets a label for the particular scene.
 * \param _sceneId The Scene ID
 * \param _value The new value of the label.
 * \see GetNumScenes, GetAllScenes, CreateScene, RemoveScene, AddSceneValue, RemoveSceneValue, SceneGetValues, SceneGetValueAsBool, SceneGetValueAsByte, SceneGetValueAsFloat, SceneGetValueAsInt, SceneGetValueAsShort, SceneGetValueAsString, SetSceneValue, GetSceneLabel, SceneExists, ActivateScene
 * 
 * Parameters:
 *  - _sceneId
 *  - _value
 */
func (p *RemoteManagerClient) SetSceneLabel(_sceneId byte, _value string) (err os.Error) {
  err = p.SendSetSceneLabel(_sceneId, _value)
  if err != nil { return }
  return p.RecvSetSceneLabel()
}

func (p *RemoteManagerClient) SendSetSceneLabel(_sceneId byte, _value string)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("SetSceneLabel", thrift.CALL, p.SeqId)
  args878 := NewSetSceneLabelArgs()
  args878._sceneId = _sceneId
  args878._value = _value
  err = args878.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvSetSceneLabel() (err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error880 := thrift.NewTApplicationExceptionDefault()
    error881, err := error880.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error881
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result879 := NewSetSceneLabelResult()
  err = result879.Read(iprot)
  iprot.ReadMessageEnd()
  return
}

/**
 * \brief Check if a Scene ID is defined.
 * \param _sceneId The Scene ID.
 * \return true if Scene ID exists.
 * \see GetNumScenes, GetAllScenes, CreateScene, RemoveScene, AddSceneValue, RemoveSceneValue, SceneGetValues, SceneGetValueAsBool, SceneGetValueAsByte, SceneGetValueAsFloat, SceneGetValueAsInt, SceneGetValueAsShort, SceneGetValueAsString, SetSceneValue, GetSceneLabel, SetSceneLabel, ActivateScene
 * 
 * Parameters:
 *  - _sceneId
 */
func (p *RemoteManagerClient) SceneExists(_sceneId byte) (retval882 bool, err os.Error) {
  err = p.SendSceneExists(_sceneId)
  if err != nil { return }
  return p.RecvSceneExists()
}

func (p *RemoteManagerClient) SendSceneExists(_sceneId byte)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("SceneExists", thrift.CALL, p.SeqId)
  args883 := NewSceneExistsArgs()
  args883._sceneId = _sceneId
  err = args883.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvSceneExists() (value bool, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error885 := thrift.NewTApplicationExceptionDefault()
    error886, err := error885.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error886
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result884 := NewSceneExistsResult()
  err = result884.Read(iprot)
  iprot.ReadMessageEnd()
  value = result884.Success
  return
}

/**
 * \brief Activate given scene to perform all its actions.
 * \param _sceneId The Scene ID.
 * \return true if it is successful.
 * \see GetNumScenes, GetAllScenes, CreateScene, RemoveScene, AddSceneValue, RemoveSceneValue, SceneGetValues, SceneGetValueAsBool, SceneGetValueAsByte, SceneGetValueAsFloat, SceneGetValueAsInt, SceneGetValueAsShort, SceneGetValueAsString, SetSceneValue, GetSceneLabel, SetSceneLabel, SceneExists
 * 
 * Parameters:
 *  - _sceneId
 */
func (p *RemoteManagerClient) ActivateScene(_sceneId byte) (retval887 bool, err os.Error) {
  err = p.SendActivateScene(_sceneId)
  if err != nil { return }
  return p.RecvActivateScene()
}

func (p *RemoteManagerClient) SendActivateScene(_sceneId byte)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("ActivateScene", thrift.CALL, p.SeqId)
  args888 := NewActivateSceneArgs()
  args888._sceneId = _sceneId
  err = args888.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvActivateScene() (value bool, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error890 := thrift.NewTApplicationExceptionDefault()
    error891, err := error890.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error891
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result889 := NewActivateSceneResult()
  err = result889.Read(iprot)
  iprot.ReadMessageEnd()
  value = result889.Success
  return
}

func (p *RemoteManagerClient) SendAllValues() (err os.Error) {
  err = p.SendSendAllValues()
  if err != nil { return }
  return p.RecvSendAllValues()
}

func (p *RemoteManagerClient) SendSendAllValues()(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("SendAllValues", thrift.CALL, p.SeqId)
  args893 := NewSendAllValuesArgs()
  err = args893.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *RemoteManagerClient) RecvSendAllValues() (err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error895 := thrift.NewTApplicationExceptionDefault()
    error896, err := error895.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error896
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result894 := NewSendAllValuesResult()
  err = result894.Read(iprot)
  iprot.ReadMessageEnd()
  return
}


type RemoteManagerProcessor struct {
  handler IRemoteManager
  processorMap map[string]thrift.TProcessorFunction
}

func (p *RemoteManagerProcessor) Handler() IRemoteManager {
  return p.handler
}

func (p *RemoteManagerProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *RemoteManagerProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, exists bool) {
  processor, exists = p.processorMap[key]
  return processor, exists
}

func (p *RemoteManagerProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewRemoteManagerProcessor(handler IRemoteManager) *RemoteManagerProcessor {

  self897 := &RemoteManagerProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self897.processorMap["WriteConfig"] = &remoteManagerProcessorWriteConfig{handler:handler}
  self897.processorMap["GetControllerNodeId"] = &remoteManagerProcessorGetControllerNodeId{handler:handler}
  self897.processorMap["IsPrimaryController"] = &remoteManagerProcessorIsPrimaryController{handler:handler}
  self897.processorMap["IsStaticUpdateController"] = &remoteManagerProcessorIsStaticUpdateController{handler:handler}
  self897.processorMap["IsBridgeController"] = &remoteManagerProcessorIsBridgeController{handler:handler}
  self897.processorMap["GetLibraryVersion"] = &remoteManagerProcessorGetLibraryVersion{handler:handler}
  self897.processorMap["GetLibraryTypeName"] = &remoteManagerProcessorGetLibraryTypeName{handler:handler}
  self897.processorMap["GetSendQueueCount"] = &remoteManagerProcessorGetSendQueueCount{handler:handler}
  self897.processorMap["GetPollInterval"] = &remoteManagerProcessorGetPollInterval{handler:handler}
  self897.processorMap["SetPollInterval"] = &remoteManagerProcessorSetPollInterval{handler:handler}
  self897.processorMap["EnablePoll"] = &remoteManagerProcessorEnablePoll{handler:handler}
  self897.processorMap["DisablePoll"] = &remoteManagerProcessorDisablePoll{handler:handler}
  self897.processorMap["isPolled"] = &remoteManagerProcessorIsPolled{handler:handler}
  self897.processorMap["RefreshNodeInfo"] = &remoteManagerProcessorRefreshNodeInfo{handler:handler}
  self897.processorMap["RequestNodeState"] = &remoteManagerProcessorRequestNodeState{handler:handler}
  self897.processorMap["RequestNodeDynamic"] = &remoteManagerProcessorRequestNodeDynamic{handler:handler}
  self897.processorMap["IsNodeListeningDevice"] = &remoteManagerProcessorIsNodeListeningDevice{handler:handler}
  self897.processorMap["IsNodeFrequentListeningDevice"] = &remoteManagerProcessorIsNodeFrequentListeningDevice{handler:handler}
  self897.processorMap["IsNodeBeamingDevice"] = &remoteManagerProcessorIsNodeBeamingDevice{handler:handler}
  self897.processorMap["IsNodeRoutingDevice"] = &remoteManagerProcessorIsNodeRoutingDevice{handler:handler}
  self897.processorMap["IsNodeSecurityDevice"] = &remoteManagerProcessorIsNodeSecurityDevice{handler:handler}
  self897.processorMap["GetNodeMaxBaudRate"] = &remoteManagerProcessorGetNodeMaxBaudRate{handler:handler}
  self897.processorMap["GetNodeVersion"] = &remoteManagerProcessorGetNodeVersion{handler:handler}
  self897.processorMap["GetNodeBasic"] = &remoteManagerProcessorGetNodeBasic{handler:handler}
  self897.processorMap["GetNodeGeneric"] = &remoteManagerProcessorGetNodeGeneric{handler:handler}
  self897.processorMap["GetNodeSpecific"] = &remoteManagerProcessorGetNodeSpecific{handler:handler}
  self897.processorMap["GetNodeType"] = &remoteManagerProcessorGetNodeType{handler:handler}
  self897.processorMap["GetNodeNeighbors"] = &remoteManagerProcessorGetNodeNeighbors{handler:handler}
  self897.processorMap["GetNodeManufacturerName"] = &remoteManagerProcessorGetNodeManufacturerName{handler:handler}
  self897.processorMap["GetNodeProductName"] = &remoteManagerProcessorGetNodeProductName{handler:handler}
  self897.processorMap["GetNodeName"] = &remoteManagerProcessorGetNodeName{handler:handler}
  self897.processorMap["GetNodeLocation"] = &remoteManagerProcessorGetNodeLocation{handler:handler}
  self897.processorMap["GetNodeManufacturerId"] = &remoteManagerProcessorGetNodeManufacturerId{handler:handler}
  self897.processorMap["GetNodeProductType"] = &remoteManagerProcessorGetNodeProductType{handler:handler}
  self897.processorMap["GetNodeProductId"] = &remoteManagerProcessorGetNodeProductId{handler:handler}
  self897.processorMap["SetNodeManufacturerName"] = &remoteManagerProcessorSetNodeManufacturerName{handler:handler}
  self897.processorMap["SetNodeProductName"] = &remoteManagerProcessorSetNodeProductName{handler:handler}
  self897.processorMap["SetNodeName"] = &remoteManagerProcessorSetNodeName{handler:handler}
  self897.processorMap["SetNodeLocation"] = &remoteManagerProcessorSetNodeLocation{handler:handler}
  self897.processorMap["SetNodeOn"] = &remoteManagerProcessorSetNodeOn{handler:handler}
  self897.processorMap["SetNodeOff"] = &remoteManagerProcessorSetNodeOff{handler:handler}
  self897.processorMap["SetNodeLevel"] = &remoteManagerProcessorSetNodeLevel{handler:handler}
  self897.processorMap["IsNodeInfoReceived"] = &remoteManagerProcessorIsNodeInfoReceived{handler:handler}
  self897.processorMap["GetNodeClassInformation"] = &remoteManagerProcessorGetNodeClassInformation{handler:handler}
  self897.processorMap["GetValueLabel"] = &remoteManagerProcessorGetValueLabel{handler:handler}
  self897.processorMap["SetValueLabel"] = &remoteManagerProcessorSetValueLabel{handler:handler}
  self897.processorMap["GetValueUnits"] = &remoteManagerProcessorGetValueUnits{handler:handler}
  self897.processorMap["SetValueUnits"] = &remoteManagerProcessorSetValueUnits{handler:handler}
  self897.processorMap["GetValueHelp"] = &remoteManagerProcessorGetValueHelp{handler:handler}
  self897.processorMap["SetValueHelp"] = &remoteManagerProcessorSetValueHelp{handler:handler}
  self897.processorMap["GetValueMin"] = &remoteManagerProcessorGetValueMin{handler:handler}
  self897.processorMap["GetValueMax"] = &remoteManagerProcessorGetValueMax{handler:handler}
  self897.processorMap["IsValueReadOnly"] = &remoteManagerProcessorIsValueReadOnly{handler:handler}
  self897.processorMap["IsValueWriteOnly"] = &remoteManagerProcessorIsValueWriteOnly{handler:handler}
  self897.processorMap["IsValueSet"] = &remoteManagerProcessorIsValueSet{handler:handler}
  self897.processorMap["GetValueAsBool"] = &remoteManagerProcessorGetValueAsBool{handler:handler}
  self897.processorMap["GetValueAsByte"] = &remoteManagerProcessorGetValueAsByte{handler:handler}
  self897.processorMap["GetValueAsFloat"] = &remoteManagerProcessorGetValueAsFloat{handler:handler}
  self897.processorMap["GetValueAsInt"] = &remoteManagerProcessorGetValueAsInt{handler:handler}
  self897.processorMap["GetValueAsShort"] = &remoteManagerProcessorGetValueAsShort{handler:handler}
  self897.processorMap["GetValueAsString"] = &remoteManagerProcessorGetValueAsString{handler:handler}
  self897.processorMap["GetValueListSelection_String"] = &remoteManagerProcessorGetValueListSelectionString{handler:handler}
  self897.processorMap["GetValueListSelection_Int32"] = &remoteManagerProcessorGetValueListSelectionInt32{handler:handler}
  self897.processorMap["GetValueListItems"] = &remoteManagerProcessorGetValueListItems{handler:handler}
  self897.processorMap["GetValueFloatPrecision"] = &remoteManagerProcessorGetValueFloatPrecision{handler:handler}
  self897.processorMap["SetValue_Bool"] = &remoteManagerProcessorSetValueBool{handler:handler}
  self897.processorMap["SetValue_UInt8"] = &remoteManagerProcessorSetValueUInt8{handler:handler}
  self897.processorMap["SetValue_Float"] = &remoteManagerProcessorSetValueFloat{handler:handler}
  self897.processorMap["SetValue_Int32"] = &remoteManagerProcessorSetValueInt32{handler:handler}
  self897.processorMap["SetValue_Int16"] = &remoteManagerProcessorSetValueInt16{handler:handler}
  self897.processorMap["SetValue_String"] = &remoteManagerProcessorSetValueString{handler:handler}
  self897.processorMap["SetValueListSelection"] = &remoteManagerProcessorSetValueListSelection{handler:handler}
  self897.processorMap["PressButton"] = &remoteManagerProcessorPressButton{handler:handler}
  self897.processorMap["ReleaseButton"] = &remoteManagerProcessorReleaseButton{handler:handler}
  self897.processorMap["GetNumSwitchPoints"] = &remoteManagerProcessorGetNumSwitchPoints{handler:handler}
  self897.processorMap["SetSwitchPoint"] = &remoteManagerProcessorSetSwitchPoint{handler:handler}
  self897.processorMap["RemoveSwitchPoint"] = &remoteManagerProcessorRemoveSwitchPoint{handler:handler}
  self897.processorMap["ClearSwitchPoints"] = &remoteManagerProcessorClearSwitchPoints{handler:handler}
  self897.processorMap["GetSwitchPoint"] = &remoteManagerProcessorGetSwitchPoint{handler:handler}
  self897.processorMap["SwitchAllOn"] = &remoteManagerProcessorSwitchAllOn{handler:handler}
  self897.processorMap["SwitchAllOff"] = &remoteManagerProcessorSwitchAllOff{handler:handler}
  self897.processorMap["SetConfigParam"] = &remoteManagerProcessorSetConfigParam{handler:handler}
  self897.processorMap["RequestConfigParam"] = &remoteManagerProcessorRequestConfigParam{handler:handler}
  self897.processorMap["RequestAllConfigParams"] = &remoteManagerProcessorRequestAllConfigParams{handler:handler}
  self897.processorMap["GetNumGroups"] = &remoteManagerProcessorGetNumGroups{handler:handler}
  self897.processorMap["GetAssociations"] = &remoteManagerProcessorGetAssociations{handler:handler}
  self897.processorMap["GetMaxAssociations"] = &remoteManagerProcessorGetMaxAssociations{handler:handler}
  self897.processorMap["GetGroupLabel"] = &remoteManagerProcessorGetGroupLabel{handler:handler}
  self897.processorMap["AddAssociation"] = &remoteManagerProcessorAddAssociation{handler:handler}
  self897.processorMap["RemoveAssociation"] = &remoteManagerProcessorRemoveAssociation{handler:handler}
  self897.processorMap["ResetController"] = &remoteManagerProcessorResetController{handler:handler}
  self897.processorMap["SoftReset"] = &remoteManagerProcessorSoftReset{handler:handler}
  self897.processorMap["BeginControllerCommand"] = &remoteManagerProcessorBeginControllerCommand{handler:handler}
  self897.processorMap["CancelControllerCommand"] = &remoteManagerProcessorCancelControllerCommand{handler:handler}
  self897.processorMap["GetNumScenes"] = &remoteManagerProcessorGetNumScenes{handler:handler}
  self897.processorMap["GetAllScenes"] = &remoteManagerProcessorGetAllScenes{handler:handler}
  self897.processorMap["CreateScene"] = &remoteManagerProcessorCreateScene{handler:handler}
  self897.processorMap["RemoveScene"] = &remoteManagerProcessorRemoveScene{handler:handler}
  self897.processorMap["AddSceneValue_Bool"] = &remoteManagerProcessorAddSceneValueBool{handler:handler}
  self897.processorMap["AddSceneValue_Uint8"] = &remoteManagerProcessorAddSceneValueUint8{handler:handler}
  self897.processorMap["AddSceneValue_Float"] = &remoteManagerProcessorAddSceneValueFloat{handler:handler}
  self897.processorMap["AddSceneValue_Int32"] = &remoteManagerProcessorAddSceneValueInt32{handler:handler}
  self897.processorMap["AddSceneValue_Int16"] = &remoteManagerProcessorAddSceneValueInt16{handler:handler}
  self897.processorMap["AddSceneValue_String"] = &remoteManagerProcessorAddSceneValueString{handler:handler}
  self897.processorMap["AddSceneValueListSelection_String"] = &remoteManagerProcessorAddSceneValueListSelectionString{handler:handler}
  self897.processorMap["AddSceneValueListSelection_Int32"] = &remoteManagerProcessorAddSceneValueListSelectionInt32{handler:handler}
  self897.processorMap["RemoveSceneValue"] = &remoteManagerProcessorRemoveSceneValue{handler:handler}
  self897.processorMap["SceneGetValues"] = &remoteManagerProcessorSceneGetValues{handler:handler}
  self897.processorMap["SceneGetValueAsBool"] = &remoteManagerProcessorSceneGetValueAsBool{handler:handler}
  self897.processorMap["SceneGetValueAsByte"] = &remoteManagerProcessorSceneGetValueAsByte{handler:handler}
  self897.processorMap["SceneGetValueAsFloat"] = &remoteManagerProcessorSceneGetValueAsFloat{handler:handler}
  self897.processorMap["SceneGetValueAsInt"] = &remoteManagerProcessorSceneGetValueAsInt{handler:handler}
  self897.processorMap["SceneGetValueAsShort"] = &remoteManagerProcessorSceneGetValueAsShort{handler:handler}
  self897.processorMap["SceneGetValueAsString"] = &remoteManagerProcessorSceneGetValueAsString{handler:handler}
  self897.processorMap["SceneGetValueListSelection_String"] = &remoteManagerProcessorSceneGetValueListSelectionString{handler:handler}
  self897.processorMap["SceneGetValueListSelection_Int32"] = &remoteManagerProcessorSceneGetValueListSelectionInt32{handler:handler}
  self897.processorMap["SetSceneValue_Bool"] = &remoteManagerProcessorSetSceneValueBool{handler:handler}
  self897.processorMap["SetSceneValue_Uint8"] = &remoteManagerProcessorSetSceneValueUint8{handler:handler}
  self897.processorMap["SetSceneValue_Float"] = &remoteManagerProcessorSetSceneValueFloat{handler:handler}
  self897.processorMap["SetSceneValue_Int32"] = &remoteManagerProcessorSetSceneValueInt32{handler:handler}
  self897.processorMap["SetSceneValue_Int16"] = &remoteManagerProcessorSetSceneValueInt16{handler:handler}
  self897.processorMap["SetSceneValue_String"] = &remoteManagerProcessorSetSceneValueString{handler:handler}
  self897.processorMap["SetSceneValueListSelection_String"] = &remoteManagerProcessorSetSceneValueListSelectionString{handler:handler}
  self897.processorMap["SetSceneValueListSelection_Int32"] = &remoteManagerProcessorSetSceneValueListSelectionInt32{handler:handler}
  self897.processorMap["GetSceneLabel"] = &remoteManagerProcessorGetSceneLabel{handler:handler}
  self897.processorMap["SetSceneLabel"] = &remoteManagerProcessorSetSceneLabel{handler:handler}
  self897.processorMap["SceneExists"] = &remoteManagerProcessorSceneExists{handler:handler}
  self897.processorMap["ActivateScene"] = &remoteManagerProcessorActivateScene{handler:handler}
  self897.processorMap["SendAllValues"] = &remoteManagerProcessorSendAllValues{handler:handler}
return self897
}

func (p *RemoteManagerProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return }
  process, nameFound := p.GetProcessorFunction(name)
  if !nameFound || process == nil {
    iprot.Skip(thrift.STRUCT)
    iprot.ReadMessageEnd()
    x898 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
    oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
    x898.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return false, x898
  }
  return process.Process(seqId, iprot, oprot)
}

type remoteManagerProcessorWriteConfig struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorWriteConfig) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewWriteConfigArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("WriteConfig", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewWriteConfigResult()
  if err = p.handler.WriteConfig(args._homeId); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing WriteConfig: " + err.String())
    oprot.WriteMessageBegin("WriteConfig", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("WriteConfig", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorGetControllerNodeId struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorGetControllerNodeId) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetControllerNodeIdArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("GetControllerNodeId", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetControllerNodeIdResult()
  if result.Success, err = p.handler.GetControllerNodeId(args._homeId); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetControllerNodeId: " + err.String())
    oprot.WriteMessageBegin("GetControllerNodeId", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("GetControllerNodeId", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorIsPrimaryController struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorIsPrimaryController) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewIsPrimaryControllerArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("IsPrimaryController", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewIsPrimaryControllerResult()
  if result.Success, err = p.handler.IsPrimaryController(args._homeId); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing IsPrimaryController: " + err.String())
    oprot.WriteMessageBegin("IsPrimaryController", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("IsPrimaryController", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorIsStaticUpdateController struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorIsStaticUpdateController) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewIsStaticUpdateControllerArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("IsStaticUpdateController", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewIsStaticUpdateControllerResult()
  if result.Success, err = p.handler.IsStaticUpdateController(args._homeId); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing IsStaticUpdateController: " + err.String())
    oprot.WriteMessageBegin("IsStaticUpdateController", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("IsStaticUpdateController", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorIsBridgeController struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorIsBridgeController) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewIsBridgeControllerArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("IsBridgeController", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewIsBridgeControllerResult()
  if result.Success, err = p.handler.IsBridgeController(args._homeId); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing IsBridgeController: " + err.String())
    oprot.WriteMessageBegin("IsBridgeController", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("IsBridgeController", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorGetLibraryVersion struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorGetLibraryVersion) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetLibraryVersionArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("GetLibraryVersion", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetLibraryVersionResult()
  if result.Success, err = p.handler.GetLibraryVersion(args._homeId); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetLibraryVersion: " + err.String())
    oprot.WriteMessageBegin("GetLibraryVersion", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("GetLibraryVersion", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorGetLibraryTypeName struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorGetLibraryTypeName) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetLibraryTypeNameArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("GetLibraryTypeName", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetLibraryTypeNameResult()
  if result.Success, err = p.handler.GetLibraryTypeName(args._homeId); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetLibraryTypeName: " + err.String())
    oprot.WriteMessageBegin("GetLibraryTypeName", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("GetLibraryTypeName", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorGetSendQueueCount struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorGetSendQueueCount) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetSendQueueCountArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("GetSendQueueCount", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetSendQueueCountResult()
  if result.Success, err = p.handler.GetSendQueueCount(args._homeId); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetSendQueueCount: " + err.String())
    oprot.WriteMessageBegin("GetSendQueueCount", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("GetSendQueueCount", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorGetPollInterval struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorGetPollInterval) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetPollIntervalArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("GetPollInterval", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetPollIntervalResult()
  if result.Success, err = p.handler.GetPollInterval(); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetPollInterval: " + err.String())
    oprot.WriteMessageBegin("GetPollInterval", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("GetPollInterval", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorSetPollInterval struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorSetPollInterval) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewSetPollIntervalArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("SetPollInterval", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewSetPollIntervalResult()
  if err = p.handler.SetPollInterval(args._seconds); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SetPollInterval: " + err.String())
    oprot.WriteMessageBegin("SetPollInterval", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("SetPollInterval", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorEnablePoll struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorEnablePoll) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewEnablePollArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("EnablePoll", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewEnablePollResult()
  if result.Success, err = p.handler.EnablePoll(args._valueId); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing EnablePoll: " + err.String())
    oprot.WriteMessageBegin("EnablePoll", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("EnablePoll", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorDisablePoll struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorDisablePoll) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewDisablePollArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("DisablePoll", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewDisablePollResult()
  if result.Success, err = p.handler.DisablePoll(args._valueId); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DisablePoll: " + err.String())
    oprot.WriteMessageBegin("DisablePoll", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("DisablePoll", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorIsPolled struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorIsPolled) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewIsPolledArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("isPolled", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewIsPolledResult()
  if result.Success, err = p.handler.IsPolled(args._valueId); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing isPolled: " + err.String())
    oprot.WriteMessageBegin("isPolled", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("isPolled", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorRefreshNodeInfo struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorRefreshNodeInfo) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewRefreshNodeInfoArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("RefreshNodeInfo", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewRefreshNodeInfoResult()
  if result.Success, err = p.handler.RefreshNodeInfo(args._homeId, args._nodeId); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing RefreshNodeInfo: " + err.String())
    oprot.WriteMessageBegin("RefreshNodeInfo", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("RefreshNodeInfo", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorRequestNodeState struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorRequestNodeState) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewRequestNodeStateArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("RequestNodeState", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewRequestNodeStateResult()
  if result.Success, err = p.handler.RequestNodeState(args._homeId, args._nodeId); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing RequestNodeState: " + err.String())
    oprot.WriteMessageBegin("RequestNodeState", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("RequestNodeState", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorRequestNodeDynamic struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorRequestNodeDynamic) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewRequestNodeDynamicArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("RequestNodeDynamic", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewRequestNodeDynamicResult()
  if result.Success, err = p.handler.RequestNodeDynamic(args._homeId, args._nodeId); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing RequestNodeDynamic: " + err.String())
    oprot.WriteMessageBegin("RequestNodeDynamic", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("RequestNodeDynamic", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorIsNodeListeningDevice struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorIsNodeListeningDevice) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewIsNodeListeningDeviceArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("IsNodeListeningDevice", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewIsNodeListeningDeviceResult()
  if result.Success, err = p.handler.IsNodeListeningDevice(args._homeId, args._nodeId); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing IsNodeListeningDevice: " + err.String())
    oprot.WriteMessageBegin("IsNodeListeningDevice", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("IsNodeListeningDevice", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorIsNodeFrequentListeningDevice struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorIsNodeFrequentListeningDevice) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewIsNodeFrequentListeningDeviceArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("IsNodeFrequentListeningDevice", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewIsNodeFrequentListeningDeviceResult()
  if result.Success, err = p.handler.IsNodeFrequentListeningDevice(args._homeId, args._nodeId); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing IsNodeFrequentListeningDevice: " + err.String())
    oprot.WriteMessageBegin("IsNodeFrequentListeningDevice", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("IsNodeFrequentListeningDevice", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorIsNodeBeamingDevice struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorIsNodeBeamingDevice) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewIsNodeBeamingDeviceArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("IsNodeBeamingDevice", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewIsNodeBeamingDeviceResult()
  if result.Success, err = p.handler.IsNodeBeamingDevice(args._homeId, args._nodeId); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing IsNodeBeamingDevice: " + err.String())
    oprot.WriteMessageBegin("IsNodeBeamingDevice", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("IsNodeBeamingDevice", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorIsNodeRoutingDevice struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorIsNodeRoutingDevice) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewIsNodeRoutingDeviceArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("IsNodeRoutingDevice", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewIsNodeRoutingDeviceResult()
  if result.Success, err = p.handler.IsNodeRoutingDevice(args._homeId, args._nodeId); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing IsNodeRoutingDevice: " + err.String())
    oprot.WriteMessageBegin("IsNodeRoutingDevice", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("IsNodeRoutingDevice", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorIsNodeSecurityDevice struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorIsNodeSecurityDevice) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewIsNodeSecurityDeviceArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("IsNodeSecurityDevice", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewIsNodeSecurityDeviceResult()
  if result.Success, err = p.handler.IsNodeSecurityDevice(args._homeId, args._nodeId); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing IsNodeSecurityDevice: " + err.String())
    oprot.WriteMessageBegin("IsNodeSecurityDevice", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("IsNodeSecurityDevice", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorGetNodeMaxBaudRate struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorGetNodeMaxBaudRate) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetNodeMaxBaudRateArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("GetNodeMaxBaudRate", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetNodeMaxBaudRateResult()
  if result.Success, err = p.handler.GetNodeMaxBaudRate(args._homeId, args._nodeId); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetNodeMaxBaudRate: " + err.String())
    oprot.WriteMessageBegin("GetNodeMaxBaudRate", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("GetNodeMaxBaudRate", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorGetNodeVersion struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorGetNodeVersion) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetNodeVersionArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("GetNodeVersion", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetNodeVersionResult()
  if result.Success, err = p.handler.GetNodeVersion(args._homeId, args._nodeId); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetNodeVersion: " + err.String())
    oprot.WriteMessageBegin("GetNodeVersion", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("GetNodeVersion", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorGetNodeBasic struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorGetNodeBasic) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetNodeBasicArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("GetNodeBasic", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetNodeBasicResult()
  if result.Success, err = p.handler.GetNodeBasic(args._homeId, args._nodeId); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetNodeBasic: " + err.String())
    oprot.WriteMessageBegin("GetNodeBasic", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("GetNodeBasic", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorGetNodeGeneric struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorGetNodeGeneric) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetNodeGenericArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("GetNodeGeneric", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetNodeGenericResult()
  if result.Success, err = p.handler.GetNodeGeneric(args._homeId, args._nodeId); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetNodeGeneric: " + err.String())
    oprot.WriteMessageBegin("GetNodeGeneric", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("GetNodeGeneric", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorGetNodeSpecific struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorGetNodeSpecific) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetNodeSpecificArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("GetNodeSpecific", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetNodeSpecificResult()
  if result.Success, err = p.handler.GetNodeSpecific(args._homeId, args._nodeId); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetNodeSpecific: " + err.String())
    oprot.WriteMessageBegin("GetNodeSpecific", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("GetNodeSpecific", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorGetNodeType struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorGetNodeType) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetNodeTypeArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("GetNodeType", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetNodeTypeResult()
  if result.Success, err = p.handler.GetNodeType(args._homeId, args._nodeId); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetNodeType: " + err.String())
    oprot.WriteMessageBegin("GetNodeType", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("GetNodeType", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorGetNodeNeighbors struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorGetNodeNeighbors) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetNodeNeighborsArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("GetNodeNeighbors", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetNodeNeighborsResult()
  if result.Success, err = p.handler.GetNodeNeighbors(args._homeId, args._nodeId); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetNodeNeighbors: " + err.String())
    oprot.WriteMessageBegin("GetNodeNeighbors", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("GetNodeNeighbors", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorGetNodeManufacturerName struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorGetNodeManufacturerName) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetNodeManufacturerNameArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("GetNodeManufacturerName", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetNodeManufacturerNameResult()
  if result.Success, err = p.handler.GetNodeManufacturerName(args._homeId, args._nodeId); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetNodeManufacturerName: " + err.String())
    oprot.WriteMessageBegin("GetNodeManufacturerName", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("GetNodeManufacturerName", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorGetNodeProductName struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorGetNodeProductName) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetNodeProductNameArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("GetNodeProductName", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetNodeProductNameResult()
  if result.Success, err = p.handler.GetNodeProductName(args._homeId, args._nodeId); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetNodeProductName: " + err.String())
    oprot.WriteMessageBegin("GetNodeProductName", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("GetNodeProductName", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorGetNodeName struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorGetNodeName) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetNodeNameArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("GetNodeName", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetNodeNameResult()
  if result.Success, err = p.handler.GetNodeName(args._homeId, args._nodeId); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetNodeName: " + err.String())
    oprot.WriteMessageBegin("GetNodeName", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("GetNodeName", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorGetNodeLocation struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorGetNodeLocation) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetNodeLocationArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("GetNodeLocation", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetNodeLocationResult()
  if result.Success, err = p.handler.GetNodeLocation(args._homeId, args._nodeId); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetNodeLocation: " + err.String())
    oprot.WriteMessageBegin("GetNodeLocation", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("GetNodeLocation", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorGetNodeManufacturerId struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorGetNodeManufacturerId) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetNodeManufacturerIdArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("GetNodeManufacturerId", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetNodeManufacturerIdResult()
  if result.Success, err = p.handler.GetNodeManufacturerId(args._homeId, args._nodeId); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetNodeManufacturerId: " + err.String())
    oprot.WriteMessageBegin("GetNodeManufacturerId", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("GetNodeManufacturerId", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorGetNodeProductType struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorGetNodeProductType) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetNodeProductTypeArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("GetNodeProductType", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetNodeProductTypeResult()
  if result.Success, err = p.handler.GetNodeProductType(args._homeId, args._nodeId); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetNodeProductType: " + err.String())
    oprot.WriteMessageBegin("GetNodeProductType", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("GetNodeProductType", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorGetNodeProductId struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorGetNodeProductId) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetNodeProductIdArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("GetNodeProductId", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetNodeProductIdResult()
  if result.Success, err = p.handler.GetNodeProductId(args._homeId, args._nodeId); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetNodeProductId: " + err.String())
    oprot.WriteMessageBegin("GetNodeProductId", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("GetNodeProductId", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorSetNodeManufacturerName struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorSetNodeManufacturerName) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewSetNodeManufacturerNameArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("SetNodeManufacturerName", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewSetNodeManufacturerNameResult()
  if err = p.handler.SetNodeManufacturerName(args._homeId, args._nodeId, args._manufacturerName); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SetNodeManufacturerName: " + err.String())
    oprot.WriteMessageBegin("SetNodeManufacturerName", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("SetNodeManufacturerName", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorSetNodeProductName struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorSetNodeProductName) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewSetNodeProductNameArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("SetNodeProductName", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewSetNodeProductNameResult()
  if err = p.handler.SetNodeProductName(args._homeId, args._nodeId, args._productName); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SetNodeProductName: " + err.String())
    oprot.WriteMessageBegin("SetNodeProductName", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("SetNodeProductName", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorSetNodeName struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorSetNodeName) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewSetNodeNameArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("SetNodeName", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewSetNodeNameResult()
  if err = p.handler.SetNodeName(args._homeId, args._nodeId, args._nodeName); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SetNodeName: " + err.String())
    oprot.WriteMessageBegin("SetNodeName", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("SetNodeName", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorSetNodeLocation struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorSetNodeLocation) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewSetNodeLocationArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("SetNodeLocation", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewSetNodeLocationResult()
  if err = p.handler.SetNodeLocation(args._homeId, args._nodeId, args._location); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SetNodeLocation: " + err.String())
    oprot.WriteMessageBegin("SetNodeLocation", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("SetNodeLocation", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorSetNodeOn struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorSetNodeOn) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewSetNodeOnArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("SetNodeOn", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewSetNodeOnResult()
  if err = p.handler.SetNodeOn(args._homeId, args._nodeId); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SetNodeOn: " + err.String())
    oprot.WriteMessageBegin("SetNodeOn", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("SetNodeOn", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorSetNodeOff struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorSetNodeOff) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewSetNodeOffArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("SetNodeOff", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewSetNodeOffResult()
  if err = p.handler.SetNodeOff(args._homeId, args._nodeId); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SetNodeOff: " + err.String())
    oprot.WriteMessageBegin("SetNodeOff", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("SetNodeOff", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorSetNodeLevel struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorSetNodeLevel) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewSetNodeLevelArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("SetNodeLevel", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewSetNodeLevelResult()
  if err = p.handler.SetNodeLevel(args._homeId, args._nodeId, args._level); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SetNodeLevel: " + err.String())
    oprot.WriteMessageBegin("SetNodeLevel", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("SetNodeLevel", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorIsNodeInfoReceived struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorIsNodeInfoReceived) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewIsNodeInfoReceivedArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("IsNodeInfoReceived", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewIsNodeInfoReceivedResult()
  if result.Success, err = p.handler.IsNodeInfoReceived(args._homeId, args._nodeId); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing IsNodeInfoReceived: " + err.String())
    oprot.WriteMessageBegin("IsNodeInfoReceived", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("IsNodeInfoReceived", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorGetNodeClassInformation struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorGetNodeClassInformation) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetNodeClassInformationArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("GetNodeClassInformation", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetNodeClassInformationResult()
  if result.Success, err = p.handler.GetNodeClassInformation(args._homeId, args._nodeId, args._commandClassId); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetNodeClassInformation: " + err.String())
    oprot.WriteMessageBegin("GetNodeClassInformation", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("GetNodeClassInformation", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorGetValueLabel struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorGetValueLabel) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetValueLabelArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("GetValueLabel", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetValueLabelResult()
  if result.Success, err = p.handler.GetValueLabel(args._id); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetValueLabel: " + err.String())
    oprot.WriteMessageBegin("GetValueLabel", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("GetValueLabel", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorSetValueLabel struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorSetValueLabel) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewSetValueLabelArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("SetValueLabel", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewSetValueLabelResult()
  if err = p.handler.SetValueLabel(args._id, args._value); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SetValueLabel: " + err.String())
    oprot.WriteMessageBegin("SetValueLabel", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("SetValueLabel", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorGetValueUnits struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorGetValueUnits) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetValueUnitsArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("GetValueUnits", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetValueUnitsResult()
  if result.Success, err = p.handler.GetValueUnits(args._id); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetValueUnits: " + err.String())
    oprot.WriteMessageBegin("GetValueUnits", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("GetValueUnits", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorSetValueUnits struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorSetValueUnits) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewSetValueUnitsArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("SetValueUnits", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewSetValueUnitsResult()
  if err = p.handler.SetValueUnits(args._id, args._value); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SetValueUnits: " + err.String())
    oprot.WriteMessageBegin("SetValueUnits", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("SetValueUnits", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorGetValueHelp struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorGetValueHelp) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetValueHelpArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("GetValueHelp", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetValueHelpResult()
  if result.Success, err = p.handler.GetValueHelp(args._id); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetValueHelp: " + err.String())
    oprot.WriteMessageBegin("GetValueHelp", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("GetValueHelp", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorSetValueHelp struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorSetValueHelp) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewSetValueHelpArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("SetValueHelp", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewSetValueHelpResult()
  if err = p.handler.SetValueHelp(args._id, args._value); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SetValueHelp: " + err.String())
    oprot.WriteMessageBegin("SetValueHelp", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("SetValueHelp", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorGetValueMin struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorGetValueMin) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetValueMinArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("GetValueMin", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetValueMinResult()
  if result.Success, err = p.handler.GetValueMin(args._id); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetValueMin: " + err.String())
    oprot.WriteMessageBegin("GetValueMin", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("GetValueMin", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorGetValueMax struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorGetValueMax) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetValueMaxArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("GetValueMax", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetValueMaxResult()
  if result.Success, err = p.handler.GetValueMax(args._id); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetValueMax: " + err.String())
    oprot.WriteMessageBegin("GetValueMax", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("GetValueMax", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorIsValueReadOnly struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorIsValueReadOnly) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewIsValueReadOnlyArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("IsValueReadOnly", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewIsValueReadOnlyResult()
  if result.Success, err = p.handler.IsValueReadOnly(args._id); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing IsValueReadOnly: " + err.String())
    oprot.WriteMessageBegin("IsValueReadOnly", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("IsValueReadOnly", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorIsValueWriteOnly struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorIsValueWriteOnly) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewIsValueWriteOnlyArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("IsValueWriteOnly", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewIsValueWriteOnlyResult()
  if result.Success, err = p.handler.IsValueWriteOnly(args._id); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing IsValueWriteOnly: " + err.String())
    oprot.WriteMessageBegin("IsValueWriteOnly", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("IsValueWriteOnly", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorIsValueSet struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorIsValueSet) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewIsValueSetArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("IsValueSet", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewIsValueSetResult()
  if result.Success, err = p.handler.IsValueSet(args._id); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing IsValueSet: " + err.String())
    oprot.WriteMessageBegin("IsValueSet", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("IsValueSet", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorGetValueAsBool struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorGetValueAsBool) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetValueAsBoolArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("GetValueAsBool", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetValueAsBoolResult()
  if result.Success, err = p.handler.GetValueAsBool(args._id); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetValueAsBool: " + err.String())
    oprot.WriteMessageBegin("GetValueAsBool", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("GetValueAsBool", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorGetValueAsByte struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorGetValueAsByte) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetValueAsByteArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("GetValueAsByte", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetValueAsByteResult()
  if result.Success, err = p.handler.GetValueAsByte(args._id); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetValueAsByte: " + err.String())
    oprot.WriteMessageBegin("GetValueAsByte", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("GetValueAsByte", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorGetValueAsFloat struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorGetValueAsFloat) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetValueAsFloatArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("GetValueAsFloat", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetValueAsFloatResult()
  if result.Success, err = p.handler.GetValueAsFloat(args._id); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetValueAsFloat: " + err.String())
    oprot.WriteMessageBegin("GetValueAsFloat", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("GetValueAsFloat", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorGetValueAsInt struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorGetValueAsInt) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetValueAsIntArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("GetValueAsInt", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetValueAsIntResult()
  if result.Success, err = p.handler.GetValueAsInt(args._id); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetValueAsInt: " + err.String())
    oprot.WriteMessageBegin("GetValueAsInt", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("GetValueAsInt", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorGetValueAsShort struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorGetValueAsShort) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetValueAsShortArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("GetValueAsShort", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetValueAsShortResult()
  if result.Success, err = p.handler.GetValueAsShort(args._id); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetValueAsShort: " + err.String())
    oprot.WriteMessageBegin("GetValueAsShort", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("GetValueAsShort", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorGetValueAsString struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorGetValueAsString) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetValueAsStringArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("GetValueAsString", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetValueAsStringResult()
  if result.Success, err = p.handler.GetValueAsString(args._id); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetValueAsString: " + err.String())
    oprot.WriteMessageBegin("GetValueAsString", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("GetValueAsString", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorGetValueListSelectionString struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorGetValueListSelectionString) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetValueListSelectionStringArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("GetValueListSelection_String", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetValueListSelectionStringResult()
  if result.Success, err = p.handler.GetValueListSelectionString(args._id); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetValueListSelection_String: " + err.String())
    oprot.WriteMessageBegin("GetValueListSelection_String", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("GetValueListSelection_String", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorGetValueListSelectionInt32 struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorGetValueListSelectionInt32) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetValueListSelectionInt32Args()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("GetValueListSelection_Int32", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetValueListSelectionInt32Result()
  if result.Success, err = p.handler.GetValueListSelectionInt32(args._id); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetValueListSelection_Int32: " + err.String())
    oprot.WriteMessageBegin("GetValueListSelection_Int32", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("GetValueListSelection_Int32", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorGetValueListItems struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorGetValueListItems) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetValueListItemsArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("GetValueListItems", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetValueListItemsResult()
  if result.Success, err = p.handler.GetValueListItems(args._id); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetValueListItems: " + err.String())
    oprot.WriteMessageBegin("GetValueListItems", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("GetValueListItems", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorGetValueFloatPrecision struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorGetValueFloatPrecision) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetValueFloatPrecisionArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("GetValueFloatPrecision", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetValueFloatPrecisionResult()
  if result.Success, err = p.handler.GetValueFloatPrecision(args._id); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetValueFloatPrecision: " + err.String())
    oprot.WriteMessageBegin("GetValueFloatPrecision", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("GetValueFloatPrecision", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorSetValueBool struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorSetValueBool) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewSetValueBoolArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("SetValue_Bool", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewSetValueBoolResult()
  if result.Success, err = p.handler.SetValueBool(args._id, args._value); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SetValue_Bool: " + err.String())
    oprot.WriteMessageBegin("SetValue_Bool", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("SetValue_Bool", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorSetValueUInt8 struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorSetValueUInt8) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewSetValueUInt8Args()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("SetValue_UInt8", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewSetValueUInt8Result()
  if result.Success, err = p.handler.SetValueUInt8(args._id, args._value); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SetValue_UInt8: " + err.String())
    oprot.WriteMessageBegin("SetValue_UInt8", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("SetValue_UInt8", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorSetValueFloat struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorSetValueFloat) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewSetValueFloatArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("SetValue_Float", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewSetValueFloatResult()
  if result.Success, err = p.handler.SetValueFloat(args._id, args._value); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SetValue_Float: " + err.String())
    oprot.WriteMessageBegin("SetValue_Float", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("SetValue_Float", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorSetValueInt32 struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorSetValueInt32) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewSetValueInt32Args()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("SetValue_Int32", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewSetValueInt32Result()
  if result.Success, err = p.handler.SetValueInt32(args._id, args._value); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SetValue_Int32: " + err.String())
    oprot.WriteMessageBegin("SetValue_Int32", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("SetValue_Int32", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorSetValueInt16 struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorSetValueInt16) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewSetValueInt16Args()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("SetValue_Int16", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewSetValueInt16Result()
  if result.Success, err = p.handler.SetValueInt16(args._id, args._value); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SetValue_Int16: " + err.String())
    oprot.WriteMessageBegin("SetValue_Int16", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("SetValue_Int16", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorSetValueString struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorSetValueString) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewSetValueStringArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("SetValue_String", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewSetValueStringResult()
  if result.Success, err = p.handler.SetValueString(args._id, args._value); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SetValue_String: " + err.String())
    oprot.WriteMessageBegin("SetValue_String", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("SetValue_String", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorSetValueListSelection struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorSetValueListSelection) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewSetValueListSelectionArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("SetValueListSelection", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewSetValueListSelectionResult()
  if result.Success, err = p.handler.SetValueListSelection(args._id, args._selectedItem); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SetValueListSelection: " + err.String())
    oprot.WriteMessageBegin("SetValueListSelection", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("SetValueListSelection", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorPressButton struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorPressButton) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewPressButtonArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("PressButton", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewPressButtonResult()
  if result.Success, err = p.handler.PressButton(args._id); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing PressButton: " + err.String())
    oprot.WriteMessageBegin("PressButton", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("PressButton", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorReleaseButton struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorReleaseButton) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewReleaseButtonArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("ReleaseButton", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewReleaseButtonResult()
  if result.Success, err = p.handler.ReleaseButton(args._id); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ReleaseButton: " + err.String())
    oprot.WriteMessageBegin("ReleaseButton", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("ReleaseButton", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorGetNumSwitchPoints struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorGetNumSwitchPoints) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetNumSwitchPointsArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("GetNumSwitchPoints", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetNumSwitchPointsResult()
  if result.Success, err = p.handler.GetNumSwitchPoints(args._id); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetNumSwitchPoints: " + err.String())
    oprot.WriteMessageBegin("GetNumSwitchPoints", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("GetNumSwitchPoints", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorSetSwitchPoint struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorSetSwitchPoint) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewSetSwitchPointArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("SetSwitchPoint", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewSetSwitchPointResult()
  if result.Success, err = p.handler.SetSwitchPoint(args._id, args._hours, args._minutes, args._setback); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SetSwitchPoint: " + err.String())
    oprot.WriteMessageBegin("SetSwitchPoint", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("SetSwitchPoint", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorRemoveSwitchPoint struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorRemoveSwitchPoint) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewRemoveSwitchPointArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("RemoveSwitchPoint", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewRemoveSwitchPointResult()
  if result.Success, err = p.handler.RemoveSwitchPoint(args._id, args._hours, args._minutes); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing RemoveSwitchPoint: " + err.String())
    oprot.WriteMessageBegin("RemoveSwitchPoint", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("RemoveSwitchPoint", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorClearSwitchPoints struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorClearSwitchPoints) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewClearSwitchPointsArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("ClearSwitchPoints", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewClearSwitchPointsResult()
  if err = p.handler.ClearSwitchPoints(args._id); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ClearSwitchPoints: " + err.String())
    oprot.WriteMessageBegin("ClearSwitchPoints", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("ClearSwitchPoints", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorGetSwitchPoint struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorGetSwitchPoint) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetSwitchPointArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("GetSwitchPoint", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetSwitchPointResult()
  if result.Success, err = p.handler.GetSwitchPoint(args._id, args._idx); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetSwitchPoint: " + err.String())
    oprot.WriteMessageBegin("GetSwitchPoint", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("GetSwitchPoint", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorSwitchAllOn struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorSwitchAllOn) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewSwitchAllOnArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("SwitchAllOn", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewSwitchAllOnResult()
  if err = p.handler.SwitchAllOn(args._homeId); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SwitchAllOn: " + err.String())
    oprot.WriteMessageBegin("SwitchAllOn", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("SwitchAllOn", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorSwitchAllOff struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorSwitchAllOff) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewSwitchAllOffArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("SwitchAllOff", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewSwitchAllOffResult()
  if err = p.handler.SwitchAllOff(args._homeId); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SwitchAllOff: " + err.String())
    oprot.WriteMessageBegin("SwitchAllOff", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("SwitchAllOff", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorSetConfigParam struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorSetConfigParam) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewSetConfigParamArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("SetConfigParam", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewSetConfigParamResult()
  if result.Success, err = p.handler.SetConfigParam(args._homeId, args._nodeId, args._param, args._value, args._size); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SetConfigParam: " + err.String())
    oprot.WriteMessageBegin("SetConfigParam", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("SetConfigParam", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorRequestConfigParam struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorRequestConfigParam) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewRequestConfigParamArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("RequestConfigParam", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewRequestConfigParamResult()
  if err = p.handler.RequestConfigParam(args._homeId, args._nodeId, args._param); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing RequestConfigParam: " + err.String())
    oprot.WriteMessageBegin("RequestConfigParam", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("RequestConfigParam", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorRequestAllConfigParams struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorRequestAllConfigParams) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewRequestAllConfigParamsArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("RequestAllConfigParams", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewRequestAllConfigParamsResult()
  if err = p.handler.RequestAllConfigParams(args._homeId, args._nodeId); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing RequestAllConfigParams: " + err.String())
    oprot.WriteMessageBegin("RequestAllConfigParams", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("RequestAllConfigParams", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorGetNumGroups struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorGetNumGroups) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetNumGroupsArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("GetNumGroups", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetNumGroupsResult()
  if result.Success, err = p.handler.GetNumGroups(args._homeId, args._nodeId); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetNumGroups: " + err.String())
    oprot.WriteMessageBegin("GetNumGroups", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("GetNumGroups", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorGetAssociations struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorGetAssociations) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetAssociationsArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("GetAssociations", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetAssociationsResult()
  if result.Success, err = p.handler.GetAssociations(args._homeId, args._nodeId, args._groupIdx); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetAssociations: " + err.String())
    oprot.WriteMessageBegin("GetAssociations", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("GetAssociations", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorGetMaxAssociations struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorGetMaxAssociations) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetMaxAssociationsArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("GetMaxAssociations", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetMaxAssociationsResult()
  if result.Success, err = p.handler.GetMaxAssociations(args._homeId, args._nodeId, args._groupIdx); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetMaxAssociations: " + err.String())
    oprot.WriteMessageBegin("GetMaxAssociations", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("GetMaxAssociations", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorGetGroupLabel struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorGetGroupLabel) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetGroupLabelArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("GetGroupLabel", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetGroupLabelResult()
  if result.Success, err = p.handler.GetGroupLabel(args._homeId, args._nodeId, args._groupIdx); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetGroupLabel: " + err.String())
    oprot.WriteMessageBegin("GetGroupLabel", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("GetGroupLabel", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorAddAssociation struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorAddAssociation) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewAddAssociationArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("AddAssociation", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewAddAssociationResult()
  if err = p.handler.AddAssociation(args._homeId, args._nodeId, args._groupIdx, args._targetNodeId); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing AddAssociation: " + err.String())
    oprot.WriteMessageBegin("AddAssociation", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("AddAssociation", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorRemoveAssociation struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorRemoveAssociation) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewRemoveAssociationArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("RemoveAssociation", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewRemoveAssociationResult()
  if err = p.handler.RemoveAssociation(args._homeId, args._nodeId, args._groupIdx, args._targetNodeId); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing RemoveAssociation: " + err.String())
    oprot.WriteMessageBegin("RemoveAssociation", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("RemoveAssociation", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorResetController struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorResetController) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewResetControllerArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("ResetController", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewResetControllerResult()
  if err = p.handler.ResetController(args._homeId); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ResetController: " + err.String())
    oprot.WriteMessageBegin("ResetController", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("ResetController", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorSoftReset struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorSoftReset) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewSoftResetArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("SoftReset", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewSoftResetResult()
  if err = p.handler.SoftReset(args._homeId); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SoftReset: " + err.String())
    oprot.WriteMessageBegin("SoftReset", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("SoftReset", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorBeginControllerCommand struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorBeginControllerCommand) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewBeginControllerCommandArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("BeginControllerCommand", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewBeginControllerCommandResult()
  if result.Success, err = p.handler.BeginControllerCommand(args._homeId, args._command, args._highPower, args._nodeId, args._arg); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing BeginControllerCommand: " + err.String())
    oprot.WriteMessageBegin("BeginControllerCommand", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("BeginControllerCommand", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorCancelControllerCommand struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorCancelControllerCommand) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewCancelControllerCommandArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("CancelControllerCommand", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewCancelControllerCommandResult()
  if result.Success, err = p.handler.CancelControllerCommand(args._homeId); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CancelControllerCommand: " + err.String())
    oprot.WriteMessageBegin("CancelControllerCommand", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("CancelControllerCommand", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorGetNumScenes struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorGetNumScenes) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetNumScenesArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("GetNumScenes", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetNumScenesResult()
  if result.Success, err = p.handler.GetNumScenes(); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetNumScenes: " + err.String())
    oprot.WriteMessageBegin("GetNumScenes", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("GetNumScenes", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorGetAllScenes struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorGetAllScenes) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetAllScenesArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("GetAllScenes", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetAllScenesResult()
  if result.Success, err = p.handler.GetAllScenes(); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetAllScenes: " + err.String())
    oprot.WriteMessageBegin("GetAllScenes", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("GetAllScenes", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorCreateScene struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorCreateScene) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewCreateSceneArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("CreateScene", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewCreateSceneResult()
  if result.Success, err = p.handler.CreateScene(); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CreateScene: " + err.String())
    oprot.WriteMessageBegin("CreateScene", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("CreateScene", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorRemoveScene struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorRemoveScene) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewRemoveSceneArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("RemoveScene", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewRemoveSceneResult()
  if result.Success, err = p.handler.RemoveScene(args._sceneId); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing RemoveScene: " + err.String())
    oprot.WriteMessageBegin("RemoveScene", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("RemoveScene", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorAddSceneValueBool struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorAddSceneValueBool) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewAddSceneValueBoolArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("AddSceneValue_Bool", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewAddSceneValueBoolResult()
  if result.Success, err = p.handler.AddSceneValueBool(args._sceneId, args._valueId, args._value); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing AddSceneValue_Bool: " + err.String())
    oprot.WriteMessageBegin("AddSceneValue_Bool", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("AddSceneValue_Bool", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorAddSceneValueUint8 struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorAddSceneValueUint8) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewAddSceneValueUint8Args()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("AddSceneValue_Uint8", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewAddSceneValueUint8Result()
  if result.Success, err = p.handler.AddSceneValueUint8(args._sceneId, args._valueId, args._value); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing AddSceneValue_Uint8: " + err.String())
    oprot.WriteMessageBegin("AddSceneValue_Uint8", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("AddSceneValue_Uint8", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorAddSceneValueFloat struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorAddSceneValueFloat) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewAddSceneValueFloatArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("AddSceneValue_Float", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewAddSceneValueFloatResult()
  if result.Success, err = p.handler.AddSceneValueFloat(args._sceneId, args._valueId, args._value); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing AddSceneValue_Float: " + err.String())
    oprot.WriteMessageBegin("AddSceneValue_Float", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("AddSceneValue_Float", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorAddSceneValueInt32 struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorAddSceneValueInt32) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewAddSceneValueInt32Args()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("AddSceneValue_Int32", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewAddSceneValueInt32Result()
  if result.Success, err = p.handler.AddSceneValueInt32(args._sceneId, args._valueId, args._value); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing AddSceneValue_Int32: " + err.String())
    oprot.WriteMessageBegin("AddSceneValue_Int32", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("AddSceneValue_Int32", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorAddSceneValueInt16 struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorAddSceneValueInt16) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewAddSceneValueInt16Args()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("AddSceneValue_Int16", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewAddSceneValueInt16Result()
  if result.Success, err = p.handler.AddSceneValueInt16(args._sceneId, args._valueId, args._value); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing AddSceneValue_Int16: " + err.String())
    oprot.WriteMessageBegin("AddSceneValue_Int16", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("AddSceneValue_Int16", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorAddSceneValueString struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorAddSceneValueString) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewAddSceneValueStringArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("AddSceneValue_String", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewAddSceneValueStringResult()
  if result.Success, err = p.handler.AddSceneValueString(args._sceneId, args._valueId, args._value); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing AddSceneValue_String: " + err.String())
    oprot.WriteMessageBegin("AddSceneValue_String", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("AddSceneValue_String", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorAddSceneValueListSelectionString struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorAddSceneValueListSelectionString) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewAddSceneValueListSelectionStringArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("AddSceneValueListSelection_String", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewAddSceneValueListSelectionStringResult()
  if result.Success, err = p.handler.AddSceneValueListSelectionString(args._sceneId, args._valueId, args._value); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing AddSceneValueListSelection_String: " + err.String())
    oprot.WriteMessageBegin("AddSceneValueListSelection_String", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("AddSceneValueListSelection_String", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorAddSceneValueListSelectionInt32 struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorAddSceneValueListSelectionInt32) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewAddSceneValueListSelectionInt32Args()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("AddSceneValueListSelection_Int32", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewAddSceneValueListSelectionInt32Result()
  if result.Success, err = p.handler.AddSceneValueListSelectionInt32(args._sceneId, args._valueId, args._value); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing AddSceneValueListSelection_Int32: " + err.String())
    oprot.WriteMessageBegin("AddSceneValueListSelection_Int32", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("AddSceneValueListSelection_Int32", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorRemoveSceneValue struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorRemoveSceneValue) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewRemoveSceneValueArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("RemoveSceneValue", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewRemoveSceneValueResult()
  if result.Success, err = p.handler.RemoveSceneValue(args._sceneId, args._valueId); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing RemoveSceneValue: " + err.String())
    oprot.WriteMessageBegin("RemoveSceneValue", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("RemoveSceneValue", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorSceneGetValues struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorSceneGetValues) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewSceneGetValuesArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("SceneGetValues", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewSceneGetValuesResult()
  if result.Success, err = p.handler.SceneGetValues(args._sceneId); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SceneGetValues: " + err.String())
    oprot.WriteMessageBegin("SceneGetValues", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("SceneGetValues", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorSceneGetValueAsBool struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorSceneGetValueAsBool) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewSceneGetValueAsBoolArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("SceneGetValueAsBool", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewSceneGetValueAsBoolResult()
  if result.Success, err = p.handler.SceneGetValueAsBool(args._sceneId, args._valueId); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SceneGetValueAsBool: " + err.String())
    oprot.WriteMessageBegin("SceneGetValueAsBool", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("SceneGetValueAsBool", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorSceneGetValueAsByte struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorSceneGetValueAsByte) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewSceneGetValueAsByteArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("SceneGetValueAsByte", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewSceneGetValueAsByteResult()
  if result.Success, err = p.handler.SceneGetValueAsByte(args._sceneId, args._valueId); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SceneGetValueAsByte: " + err.String())
    oprot.WriteMessageBegin("SceneGetValueAsByte", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("SceneGetValueAsByte", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorSceneGetValueAsFloat struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorSceneGetValueAsFloat) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewSceneGetValueAsFloatArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("SceneGetValueAsFloat", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewSceneGetValueAsFloatResult()
  if result.Success, err = p.handler.SceneGetValueAsFloat(args._sceneId, args._valueId); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SceneGetValueAsFloat: " + err.String())
    oprot.WriteMessageBegin("SceneGetValueAsFloat", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("SceneGetValueAsFloat", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorSceneGetValueAsInt struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorSceneGetValueAsInt) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewSceneGetValueAsIntArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("SceneGetValueAsInt", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewSceneGetValueAsIntResult()
  if result.Success, err = p.handler.SceneGetValueAsInt(args._sceneId, args._valueId); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SceneGetValueAsInt: " + err.String())
    oprot.WriteMessageBegin("SceneGetValueAsInt", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("SceneGetValueAsInt", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorSceneGetValueAsShort struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorSceneGetValueAsShort) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewSceneGetValueAsShortArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("SceneGetValueAsShort", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewSceneGetValueAsShortResult()
  if result.Success, err = p.handler.SceneGetValueAsShort(args._sceneId, args._valueId); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SceneGetValueAsShort: " + err.String())
    oprot.WriteMessageBegin("SceneGetValueAsShort", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("SceneGetValueAsShort", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorSceneGetValueAsString struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorSceneGetValueAsString) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewSceneGetValueAsStringArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("SceneGetValueAsString", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewSceneGetValueAsStringResult()
  if result.Success, err = p.handler.SceneGetValueAsString(args._sceneId, args._valueId); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SceneGetValueAsString: " + err.String())
    oprot.WriteMessageBegin("SceneGetValueAsString", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("SceneGetValueAsString", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorSceneGetValueListSelectionString struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorSceneGetValueListSelectionString) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewSceneGetValueListSelectionStringArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("SceneGetValueListSelection_String", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewSceneGetValueListSelectionStringResult()
  if result.Success, err = p.handler.SceneGetValueListSelectionString(args._sceneId, args._valueId); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SceneGetValueListSelection_String: " + err.String())
    oprot.WriteMessageBegin("SceneGetValueListSelection_String", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("SceneGetValueListSelection_String", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorSceneGetValueListSelectionInt32 struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorSceneGetValueListSelectionInt32) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewSceneGetValueListSelectionInt32Args()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("SceneGetValueListSelection_Int32", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewSceneGetValueListSelectionInt32Result()
  if result.Success, err = p.handler.SceneGetValueListSelectionInt32(args._sceneId, args._valueId); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SceneGetValueListSelection_Int32: " + err.String())
    oprot.WriteMessageBegin("SceneGetValueListSelection_Int32", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("SceneGetValueListSelection_Int32", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorSetSceneValueBool struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorSetSceneValueBool) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewSetSceneValueBoolArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("SetSceneValue_Bool", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewSetSceneValueBoolResult()
  if result.Success, err = p.handler.SetSceneValueBool(args._sceneId, args._valueId, args._value); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SetSceneValue_Bool: " + err.String())
    oprot.WriteMessageBegin("SetSceneValue_Bool", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("SetSceneValue_Bool", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorSetSceneValueUint8 struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorSetSceneValueUint8) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewSetSceneValueUint8Args()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("SetSceneValue_Uint8", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewSetSceneValueUint8Result()
  if result.Success, err = p.handler.SetSceneValueUint8(args._sceneId, args._valueId, args._value); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SetSceneValue_Uint8: " + err.String())
    oprot.WriteMessageBegin("SetSceneValue_Uint8", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("SetSceneValue_Uint8", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorSetSceneValueFloat struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorSetSceneValueFloat) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewSetSceneValueFloatArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("SetSceneValue_Float", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewSetSceneValueFloatResult()
  if result.Success, err = p.handler.SetSceneValueFloat(args._sceneId, args._valueId, args._value); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SetSceneValue_Float: " + err.String())
    oprot.WriteMessageBegin("SetSceneValue_Float", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("SetSceneValue_Float", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorSetSceneValueInt32 struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorSetSceneValueInt32) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewSetSceneValueInt32Args()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("SetSceneValue_Int32", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewSetSceneValueInt32Result()
  if result.Success, err = p.handler.SetSceneValueInt32(args._sceneId, args._valueId, args._value); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SetSceneValue_Int32: " + err.String())
    oprot.WriteMessageBegin("SetSceneValue_Int32", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("SetSceneValue_Int32", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorSetSceneValueInt16 struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorSetSceneValueInt16) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewSetSceneValueInt16Args()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("SetSceneValue_Int16", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewSetSceneValueInt16Result()
  if result.Success, err = p.handler.SetSceneValueInt16(args._sceneId, args._valueId, args._value); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SetSceneValue_Int16: " + err.String())
    oprot.WriteMessageBegin("SetSceneValue_Int16", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("SetSceneValue_Int16", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorSetSceneValueString struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorSetSceneValueString) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewSetSceneValueStringArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("SetSceneValue_String", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewSetSceneValueStringResult()
  if result.Success, err = p.handler.SetSceneValueString(args._sceneId, args._valueId, args._value); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SetSceneValue_String: " + err.String())
    oprot.WriteMessageBegin("SetSceneValue_String", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("SetSceneValue_String", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorSetSceneValueListSelectionString struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorSetSceneValueListSelectionString) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewSetSceneValueListSelectionStringArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("SetSceneValueListSelection_String", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewSetSceneValueListSelectionStringResult()
  if result.Success, err = p.handler.SetSceneValueListSelectionString(args._sceneId, args._valueId, args._value); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SetSceneValueListSelection_String: " + err.String())
    oprot.WriteMessageBegin("SetSceneValueListSelection_String", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("SetSceneValueListSelection_String", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorSetSceneValueListSelectionInt32 struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorSetSceneValueListSelectionInt32) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewSetSceneValueListSelectionInt32Args()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("SetSceneValueListSelection_Int32", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewSetSceneValueListSelectionInt32Result()
  if result.Success, err = p.handler.SetSceneValueListSelectionInt32(args._sceneId, args._valueId, args._value); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SetSceneValueListSelection_Int32: " + err.String())
    oprot.WriteMessageBegin("SetSceneValueListSelection_Int32", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("SetSceneValueListSelection_Int32", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorGetSceneLabel struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorGetSceneLabel) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetSceneLabelArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("GetSceneLabel", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetSceneLabelResult()
  if result.Success, err = p.handler.GetSceneLabel(args._sceneId); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetSceneLabel: " + err.String())
    oprot.WriteMessageBegin("GetSceneLabel", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("GetSceneLabel", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorSetSceneLabel struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorSetSceneLabel) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewSetSceneLabelArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("SetSceneLabel", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewSetSceneLabelResult()
  if err = p.handler.SetSceneLabel(args._sceneId, args._value); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SetSceneLabel: " + err.String())
    oprot.WriteMessageBegin("SetSceneLabel", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("SetSceneLabel", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorSceneExists struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorSceneExists) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewSceneExistsArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("SceneExists", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewSceneExistsResult()
  if result.Success, err = p.handler.SceneExists(args._sceneId); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SceneExists: " + err.String())
    oprot.WriteMessageBegin("SceneExists", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("SceneExists", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorActivateScene struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorActivateScene) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewActivateSceneArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("ActivateScene", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewActivateSceneResult()
  if result.Success, err = p.handler.ActivateScene(args._sceneId); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ActivateScene: " + err.String())
    oprot.WriteMessageBegin("ActivateScene", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("ActivateScene", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type remoteManagerProcessorSendAllValues struct {
  handler IRemoteManager
}

func (p *remoteManagerProcessorSendAllValues) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewSendAllValuesArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("SendAllValues", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewSendAllValuesResult()
  if err = p.handler.SendAllValues(); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SendAllValues: " + err.String())
    oprot.WriteMessageBegin("SendAllValues", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("SendAllValues", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

/**
 * Attributes:
 *  - _homeId
 */
type WriteConfigArgs struct {
  thrift.TStruct
  _homeId int32 "_homeId"; // 1
}

func NewWriteConfigArgs() *WriteConfigArgs {
  output := &WriteConfigArgs{
    TStruct:thrift.NewTStruct("WriteConfig_args", []thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    }),
  }
  {
  }
  return output
}

func (p *WriteConfigArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_homeId" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *WriteConfigArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v899, err900 := iprot.ReadI32()
  if err900 != nil { return thrift.NewTProtocolExceptionReadField(1, "_homeId", p.ThriftName(), err900); }
  p._homeId = v899
  return err
}

func (p *WriteConfigArgs) ReadField_homeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *WriteConfigArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("WriteConfig_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *WriteConfigArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_homeId", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._homeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  return err
}

func (p *WriteConfigArgs) WriteField_homeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *WriteConfigArgs) TStructName() string {
  return "WriteConfigArgs"
}

func (p *WriteConfigArgs) ThriftName() string {
  return "WriteConfig_args"
}

func (p *WriteConfigArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WriteConfigArgs(%+v)", *p)
}

func (p *WriteConfigArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*WriteConfigArgs)
  if !ok {
    return 0, false
  }
  if p._homeId != data._homeId {
    if p._homeId < data._homeId {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *WriteConfigArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._homeId
  }
  return nil
}

func (p *WriteConfigArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    })
}

type WriteConfigResult struct {
  thrift.TStruct
}

func NewWriteConfigResult() *WriteConfigResult {
  output := &WriteConfigResult{
    TStruct:thrift.NewTStruct("WriteConfig_result", []thrift.TField{
    }),
  }
  {
  }
  return output
}

func (p *WriteConfigResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    err = iprot.Skip(fieldTypeId)
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *WriteConfigResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("WriteConfig_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *WriteConfigResult) TStructName() string {
  return "WriteConfigResult"
}

func (p *WriteConfigResult) ThriftName() string {
  return "WriteConfig_result"
}

func (p *WriteConfigResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WriteConfigResult(%+v)", *p)
}

func (p *WriteConfigResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  _, ok := other.(*WriteConfigResult)
  if !ok {
    return 0, false
  }
  return 0, true
}

func (p *WriteConfigResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  }
  return nil
}

func (p *WriteConfigResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    })
}

/**
 * Attributes:
 *  - _homeId
 */
type GetControllerNodeIdArgs struct {
  thrift.TStruct
  _homeId int32 "_homeId"; // 1
}

func NewGetControllerNodeIdArgs() *GetControllerNodeIdArgs {
  output := &GetControllerNodeIdArgs{
    TStruct:thrift.NewTStruct("GetControllerNodeId_args", []thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetControllerNodeIdArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_homeId" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetControllerNodeIdArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v901, err902 := iprot.ReadI32()
  if err902 != nil { return thrift.NewTProtocolExceptionReadField(1, "_homeId", p.ThriftName(), err902); }
  p._homeId = v901
  return err
}

func (p *GetControllerNodeIdArgs) ReadField_homeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetControllerNodeIdArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetControllerNodeId_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetControllerNodeIdArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_homeId", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._homeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  return err
}

func (p *GetControllerNodeIdArgs) WriteField_homeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetControllerNodeIdArgs) TStructName() string {
  return "GetControllerNodeIdArgs"
}

func (p *GetControllerNodeIdArgs) ThriftName() string {
  return "GetControllerNodeId_args"
}

func (p *GetControllerNodeIdArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetControllerNodeIdArgs(%+v)", *p)
}

func (p *GetControllerNodeIdArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetControllerNodeIdArgs)
  if !ok {
    return 0, false
  }
  if p._homeId != data._homeId {
    if p._homeId < data._homeId {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetControllerNodeIdArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._homeId
  }
  return nil
}

func (p *GetControllerNodeIdArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    })
}

/**
 * Attributes:
 *  - Success
 */
type GetControllerNodeIdResult struct {
  thrift.TStruct
  Success byte "success"; // 0
}

func NewGetControllerNodeIdResult() *GetControllerNodeIdResult {
  output := &GetControllerNodeIdResult{
    TStruct:thrift.NewTStruct("GetControllerNodeId_result", []thrift.TField{
    thrift.NewTField("success", thrift.BYTE, 0),
    }),
  }
  {
  }
  return output
}

func (p *GetControllerNodeIdResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetControllerNodeIdResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v903, err904 := iprot.ReadByte()
  if err904 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err904); }
  p.Success = v903
  return err
}

func (p *GetControllerNodeIdResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetControllerNodeIdResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetControllerNodeId_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetControllerNodeIdResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BYTE, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *GetControllerNodeIdResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetControllerNodeIdResult) TStructName() string {
  return "GetControllerNodeIdResult"
}

func (p *GetControllerNodeIdResult) ThriftName() string {
  return "GetControllerNodeId_result"
}

func (p *GetControllerNodeIdResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetControllerNodeIdResult(%+v)", *p)
}

func (p *GetControllerNodeIdResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetControllerNodeIdResult)
  if !ok {
    return 0, false
  }
  if p.Success != data.Success {
    if p.Success < data.Success {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetControllerNodeIdResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *GetControllerNodeIdResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BYTE, 0),
    })
}

/**
 * Attributes:
 *  - _homeId
 */
type IsPrimaryControllerArgs struct {
  thrift.TStruct
  _homeId int32 "_homeId"; // 1
}

func NewIsPrimaryControllerArgs() *IsPrimaryControllerArgs {
  output := &IsPrimaryControllerArgs{
    TStruct:thrift.NewTStruct("IsPrimaryController_args", []thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    }),
  }
  {
  }
  return output
}

func (p *IsPrimaryControllerArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_homeId" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *IsPrimaryControllerArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v905, err906 := iprot.ReadI32()
  if err906 != nil { return thrift.NewTProtocolExceptionReadField(1, "_homeId", p.ThriftName(), err906); }
  p._homeId = v905
  return err
}

func (p *IsPrimaryControllerArgs) ReadField_homeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *IsPrimaryControllerArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("IsPrimaryController_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *IsPrimaryControllerArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_homeId", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._homeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  return err
}

func (p *IsPrimaryControllerArgs) WriteField_homeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *IsPrimaryControllerArgs) TStructName() string {
  return "IsPrimaryControllerArgs"
}

func (p *IsPrimaryControllerArgs) ThriftName() string {
  return "IsPrimaryController_args"
}

func (p *IsPrimaryControllerArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IsPrimaryControllerArgs(%+v)", *p)
}

func (p *IsPrimaryControllerArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*IsPrimaryControllerArgs)
  if !ok {
    return 0, false
  }
  if p._homeId != data._homeId {
    if p._homeId < data._homeId {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *IsPrimaryControllerArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._homeId
  }
  return nil
}

func (p *IsPrimaryControllerArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    })
}

/**
 * Attributes:
 *  - Success
 */
type IsPrimaryControllerResult struct {
  thrift.TStruct
  Success bool "success"; // 0
}

func NewIsPrimaryControllerResult() *IsPrimaryControllerResult {
  output := &IsPrimaryControllerResult{
    TStruct:thrift.NewTStruct("IsPrimaryController_result", []thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    }),
  }
  {
  }
  return output
}

func (p *IsPrimaryControllerResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *IsPrimaryControllerResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v907, err908 := iprot.ReadBool()
  if err908 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err908); }
  p.Success = v907
  return err
}

func (p *IsPrimaryControllerResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *IsPrimaryControllerResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("IsPrimaryController_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *IsPrimaryControllerResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BOOL, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *IsPrimaryControllerResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *IsPrimaryControllerResult) TStructName() string {
  return "IsPrimaryControllerResult"
}

func (p *IsPrimaryControllerResult) ThriftName() string {
  return "IsPrimaryController_result"
}

func (p *IsPrimaryControllerResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IsPrimaryControllerResult(%+v)", *p)
}

func (p *IsPrimaryControllerResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*IsPrimaryControllerResult)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Success, data.Success); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *IsPrimaryControllerResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *IsPrimaryControllerResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    })
}

/**
 * Attributes:
 *  - _homeId
 */
type IsStaticUpdateControllerArgs struct {
  thrift.TStruct
  _homeId int32 "_homeId"; // 1
}

func NewIsStaticUpdateControllerArgs() *IsStaticUpdateControllerArgs {
  output := &IsStaticUpdateControllerArgs{
    TStruct:thrift.NewTStruct("IsStaticUpdateController_args", []thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    }),
  }
  {
  }
  return output
}

func (p *IsStaticUpdateControllerArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_homeId" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *IsStaticUpdateControllerArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v909, err910 := iprot.ReadI32()
  if err910 != nil { return thrift.NewTProtocolExceptionReadField(1, "_homeId", p.ThriftName(), err910); }
  p._homeId = v909
  return err
}

func (p *IsStaticUpdateControllerArgs) ReadField_homeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *IsStaticUpdateControllerArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("IsStaticUpdateController_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *IsStaticUpdateControllerArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_homeId", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._homeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  return err
}

func (p *IsStaticUpdateControllerArgs) WriteField_homeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *IsStaticUpdateControllerArgs) TStructName() string {
  return "IsStaticUpdateControllerArgs"
}

func (p *IsStaticUpdateControllerArgs) ThriftName() string {
  return "IsStaticUpdateController_args"
}

func (p *IsStaticUpdateControllerArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IsStaticUpdateControllerArgs(%+v)", *p)
}

func (p *IsStaticUpdateControllerArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*IsStaticUpdateControllerArgs)
  if !ok {
    return 0, false
  }
  if p._homeId != data._homeId {
    if p._homeId < data._homeId {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *IsStaticUpdateControllerArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._homeId
  }
  return nil
}

func (p *IsStaticUpdateControllerArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    })
}

/**
 * Attributes:
 *  - Success
 */
type IsStaticUpdateControllerResult struct {
  thrift.TStruct
  Success bool "success"; // 0
}

func NewIsStaticUpdateControllerResult() *IsStaticUpdateControllerResult {
  output := &IsStaticUpdateControllerResult{
    TStruct:thrift.NewTStruct("IsStaticUpdateController_result", []thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    }),
  }
  {
  }
  return output
}

func (p *IsStaticUpdateControllerResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *IsStaticUpdateControllerResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v911, err912 := iprot.ReadBool()
  if err912 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err912); }
  p.Success = v911
  return err
}

func (p *IsStaticUpdateControllerResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *IsStaticUpdateControllerResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("IsStaticUpdateController_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *IsStaticUpdateControllerResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BOOL, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *IsStaticUpdateControllerResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *IsStaticUpdateControllerResult) TStructName() string {
  return "IsStaticUpdateControllerResult"
}

func (p *IsStaticUpdateControllerResult) ThriftName() string {
  return "IsStaticUpdateController_result"
}

func (p *IsStaticUpdateControllerResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IsStaticUpdateControllerResult(%+v)", *p)
}

func (p *IsStaticUpdateControllerResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*IsStaticUpdateControllerResult)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Success, data.Success); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *IsStaticUpdateControllerResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *IsStaticUpdateControllerResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    })
}

/**
 * Attributes:
 *  - _homeId
 */
type IsBridgeControllerArgs struct {
  thrift.TStruct
  _homeId int32 "_homeId"; // 1
}

func NewIsBridgeControllerArgs() *IsBridgeControllerArgs {
  output := &IsBridgeControllerArgs{
    TStruct:thrift.NewTStruct("IsBridgeController_args", []thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    }),
  }
  {
  }
  return output
}

func (p *IsBridgeControllerArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_homeId" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *IsBridgeControllerArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v913, err914 := iprot.ReadI32()
  if err914 != nil { return thrift.NewTProtocolExceptionReadField(1, "_homeId", p.ThriftName(), err914); }
  p._homeId = v913
  return err
}

func (p *IsBridgeControllerArgs) ReadField_homeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *IsBridgeControllerArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("IsBridgeController_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *IsBridgeControllerArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_homeId", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._homeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  return err
}

func (p *IsBridgeControllerArgs) WriteField_homeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *IsBridgeControllerArgs) TStructName() string {
  return "IsBridgeControllerArgs"
}

func (p *IsBridgeControllerArgs) ThriftName() string {
  return "IsBridgeController_args"
}

func (p *IsBridgeControllerArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IsBridgeControllerArgs(%+v)", *p)
}

func (p *IsBridgeControllerArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*IsBridgeControllerArgs)
  if !ok {
    return 0, false
  }
  if p._homeId != data._homeId {
    if p._homeId < data._homeId {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *IsBridgeControllerArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._homeId
  }
  return nil
}

func (p *IsBridgeControllerArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    })
}

/**
 * Attributes:
 *  - Success
 */
type IsBridgeControllerResult struct {
  thrift.TStruct
  Success bool "success"; // 0
}

func NewIsBridgeControllerResult() *IsBridgeControllerResult {
  output := &IsBridgeControllerResult{
    TStruct:thrift.NewTStruct("IsBridgeController_result", []thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    }),
  }
  {
  }
  return output
}

func (p *IsBridgeControllerResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *IsBridgeControllerResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v915, err916 := iprot.ReadBool()
  if err916 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err916); }
  p.Success = v915
  return err
}

func (p *IsBridgeControllerResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *IsBridgeControllerResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("IsBridgeController_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *IsBridgeControllerResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BOOL, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *IsBridgeControllerResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *IsBridgeControllerResult) TStructName() string {
  return "IsBridgeControllerResult"
}

func (p *IsBridgeControllerResult) ThriftName() string {
  return "IsBridgeController_result"
}

func (p *IsBridgeControllerResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IsBridgeControllerResult(%+v)", *p)
}

func (p *IsBridgeControllerResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*IsBridgeControllerResult)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Success, data.Success); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *IsBridgeControllerResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *IsBridgeControllerResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    })
}

/**
 * Attributes:
 *  - _homeId
 */
type GetLibraryVersionArgs struct {
  thrift.TStruct
  _homeId int32 "_homeId"; // 1
}

func NewGetLibraryVersionArgs() *GetLibraryVersionArgs {
  output := &GetLibraryVersionArgs{
    TStruct:thrift.NewTStruct("GetLibraryVersion_args", []thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetLibraryVersionArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_homeId" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetLibraryVersionArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v917, err918 := iprot.ReadI32()
  if err918 != nil { return thrift.NewTProtocolExceptionReadField(1, "_homeId", p.ThriftName(), err918); }
  p._homeId = v917
  return err
}

func (p *GetLibraryVersionArgs) ReadField_homeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetLibraryVersionArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetLibraryVersion_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetLibraryVersionArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_homeId", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._homeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  return err
}

func (p *GetLibraryVersionArgs) WriteField_homeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetLibraryVersionArgs) TStructName() string {
  return "GetLibraryVersionArgs"
}

func (p *GetLibraryVersionArgs) ThriftName() string {
  return "GetLibraryVersion_args"
}

func (p *GetLibraryVersionArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetLibraryVersionArgs(%+v)", *p)
}

func (p *GetLibraryVersionArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetLibraryVersionArgs)
  if !ok {
    return 0, false
  }
  if p._homeId != data._homeId {
    if p._homeId < data._homeId {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetLibraryVersionArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._homeId
  }
  return nil
}

func (p *GetLibraryVersionArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    })
}

/**
 * Attributes:
 *  - Success
 */
type GetLibraryVersionResult struct {
  thrift.TStruct
  Success string "success"; // 0
}

func NewGetLibraryVersionResult() *GetLibraryVersionResult {
  output := &GetLibraryVersionResult{
    TStruct:thrift.NewTStruct("GetLibraryVersion_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRING, 0),
    }),
  }
  {
  }
  return output
}

func (p *GetLibraryVersionResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetLibraryVersionResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v919, err920 := iprot.ReadString()
  if err920 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err920); }
  p.Success = v919
  return err
}

func (p *GetLibraryVersionResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetLibraryVersionResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetLibraryVersion_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetLibraryVersionResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.STRING, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *GetLibraryVersionResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetLibraryVersionResult) TStructName() string {
  return "GetLibraryVersionResult"
}

func (p *GetLibraryVersionResult) ThriftName() string {
  return "GetLibraryVersion_result"
}

func (p *GetLibraryVersionResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetLibraryVersionResult(%+v)", *p)
}

func (p *GetLibraryVersionResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetLibraryVersionResult)
  if !ok {
    return 0, false
  }
  if p.Success != data.Success {
    if p.Success < data.Success {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetLibraryVersionResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *GetLibraryVersionResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRING, 0),
    })
}

/**
 * Attributes:
 *  - _homeId
 */
type GetLibraryTypeNameArgs struct {
  thrift.TStruct
  _homeId int32 "_homeId"; // 1
}

func NewGetLibraryTypeNameArgs() *GetLibraryTypeNameArgs {
  output := &GetLibraryTypeNameArgs{
    TStruct:thrift.NewTStruct("GetLibraryTypeName_args", []thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetLibraryTypeNameArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_homeId" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetLibraryTypeNameArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v921, err922 := iprot.ReadI32()
  if err922 != nil { return thrift.NewTProtocolExceptionReadField(1, "_homeId", p.ThriftName(), err922); }
  p._homeId = v921
  return err
}

func (p *GetLibraryTypeNameArgs) ReadField_homeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetLibraryTypeNameArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetLibraryTypeName_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetLibraryTypeNameArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_homeId", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._homeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  return err
}

func (p *GetLibraryTypeNameArgs) WriteField_homeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetLibraryTypeNameArgs) TStructName() string {
  return "GetLibraryTypeNameArgs"
}

func (p *GetLibraryTypeNameArgs) ThriftName() string {
  return "GetLibraryTypeName_args"
}

func (p *GetLibraryTypeNameArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetLibraryTypeNameArgs(%+v)", *p)
}

func (p *GetLibraryTypeNameArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetLibraryTypeNameArgs)
  if !ok {
    return 0, false
  }
  if p._homeId != data._homeId {
    if p._homeId < data._homeId {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetLibraryTypeNameArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._homeId
  }
  return nil
}

func (p *GetLibraryTypeNameArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    })
}

/**
 * Attributes:
 *  - Success
 */
type GetLibraryTypeNameResult struct {
  thrift.TStruct
  Success string "success"; // 0
}

func NewGetLibraryTypeNameResult() *GetLibraryTypeNameResult {
  output := &GetLibraryTypeNameResult{
    TStruct:thrift.NewTStruct("GetLibraryTypeName_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRING, 0),
    }),
  }
  {
  }
  return output
}

func (p *GetLibraryTypeNameResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetLibraryTypeNameResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v923, err924 := iprot.ReadString()
  if err924 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err924); }
  p.Success = v923
  return err
}

func (p *GetLibraryTypeNameResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetLibraryTypeNameResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetLibraryTypeName_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetLibraryTypeNameResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.STRING, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *GetLibraryTypeNameResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetLibraryTypeNameResult) TStructName() string {
  return "GetLibraryTypeNameResult"
}

func (p *GetLibraryTypeNameResult) ThriftName() string {
  return "GetLibraryTypeName_result"
}

func (p *GetLibraryTypeNameResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetLibraryTypeNameResult(%+v)", *p)
}

func (p *GetLibraryTypeNameResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetLibraryTypeNameResult)
  if !ok {
    return 0, false
  }
  if p.Success != data.Success {
    if p.Success < data.Success {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetLibraryTypeNameResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *GetLibraryTypeNameResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRING, 0),
    })
}

/**
 * Attributes:
 *  - _homeId
 */
type GetSendQueueCountArgs struct {
  thrift.TStruct
  _homeId int32 "_homeId"; // 1
}

func NewGetSendQueueCountArgs() *GetSendQueueCountArgs {
  output := &GetSendQueueCountArgs{
    TStruct:thrift.NewTStruct("GetSendQueueCount_args", []thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetSendQueueCountArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_homeId" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetSendQueueCountArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v925, err926 := iprot.ReadI32()
  if err926 != nil { return thrift.NewTProtocolExceptionReadField(1, "_homeId", p.ThriftName(), err926); }
  p._homeId = v925
  return err
}

func (p *GetSendQueueCountArgs) ReadField_homeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetSendQueueCountArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetSendQueueCount_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetSendQueueCountArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_homeId", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._homeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  return err
}

func (p *GetSendQueueCountArgs) WriteField_homeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetSendQueueCountArgs) TStructName() string {
  return "GetSendQueueCountArgs"
}

func (p *GetSendQueueCountArgs) ThriftName() string {
  return "GetSendQueueCount_args"
}

func (p *GetSendQueueCountArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetSendQueueCountArgs(%+v)", *p)
}

func (p *GetSendQueueCountArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetSendQueueCountArgs)
  if !ok {
    return 0, false
  }
  if p._homeId != data._homeId {
    if p._homeId < data._homeId {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetSendQueueCountArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._homeId
  }
  return nil
}

func (p *GetSendQueueCountArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    })
}

/**
 * Attributes:
 *  - Success
 */
type GetSendQueueCountResult struct {
  thrift.TStruct
  Success int32 "success"; // 0
}

func NewGetSendQueueCountResult() *GetSendQueueCountResult {
  output := &GetSendQueueCountResult{
    TStruct:thrift.NewTStruct("GetSendQueueCount_result", []thrift.TField{
    thrift.NewTField("success", thrift.I32, 0),
    }),
  }
  {
  }
  return output
}

func (p *GetSendQueueCountResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetSendQueueCountResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v927, err928 := iprot.ReadI32()
  if err928 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err928); }
  p.Success = v927
  return err
}

func (p *GetSendQueueCountResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetSendQueueCountResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetSendQueueCount_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetSendQueueCountResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.I32, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *GetSendQueueCountResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetSendQueueCountResult) TStructName() string {
  return "GetSendQueueCountResult"
}

func (p *GetSendQueueCountResult) ThriftName() string {
  return "GetSendQueueCount_result"
}

func (p *GetSendQueueCountResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetSendQueueCountResult(%+v)", *p)
}

func (p *GetSendQueueCountResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetSendQueueCountResult)
  if !ok {
    return 0, false
  }
  if p.Success != data.Success {
    if p.Success < data.Success {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetSendQueueCountResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *GetSendQueueCountResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.I32, 0),
    })
}

type GetPollIntervalArgs struct {
  thrift.TStruct
}

func NewGetPollIntervalArgs() *GetPollIntervalArgs {
  output := &GetPollIntervalArgs{
    TStruct:thrift.NewTStruct("GetPollInterval_args", []thrift.TField{
    }),
  }
  {
  }
  return output
}

func (p *GetPollIntervalArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    err = iprot.Skip(fieldTypeId)
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetPollIntervalArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetPollInterval_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetPollIntervalArgs) TStructName() string {
  return "GetPollIntervalArgs"
}

func (p *GetPollIntervalArgs) ThriftName() string {
  return "GetPollInterval_args"
}

func (p *GetPollIntervalArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetPollIntervalArgs(%+v)", *p)
}

func (p *GetPollIntervalArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  _, ok := other.(*GetPollIntervalArgs)
  if !ok {
    return 0, false
  }
  return 0, true
}

func (p *GetPollIntervalArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  }
  return nil
}

func (p *GetPollIntervalArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    })
}

/**
 * Attributes:
 *  - Success
 */
type GetPollIntervalResult struct {
  thrift.TStruct
  Success int32 "success"; // 0
}

func NewGetPollIntervalResult() *GetPollIntervalResult {
  output := &GetPollIntervalResult{
    TStruct:thrift.NewTStruct("GetPollInterval_result", []thrift.TField{
    thrift.NewTField("success", thrift.I32, 0),
    }),
  }
  {
  }
  return output
}

func (p *GetPollIntervalResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetPollIntervalResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v929, err930 := iprot.ReadI32()
  if err930 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err930); }
  p.Success = v929
  return err
}

func (p *GetPollIntervalResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetPollIntervalResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetPollInterval_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetPollIntervalResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.I32, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *GetPollIntervalResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetPollIntervalResult) TStructName() string {
  return "GetPollIntervalResult"
}

func (p *GetPollIntervalResult) ThriftName() string {
  return "GetPollInterval_result"
}

func (p *GetPollIntervalResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetPollIntervalResult(%+v)", *p)
}

func (p *GetPollIntervalResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetPollIntervalResult)
  if !ok {
    return 0, false
  }
  if p.Success != data.Success {
    if p.Success < data.Success {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetPollIntervalResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *GetPollIntervalResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.I32, 0),
    })
}

/**
 * Attributes:
 *  - _seconds
 */
type SetPollIntervalArgs struct {
  thrift.TStruct
  _seconds int32 "_seconds"; // 1
}

func NewSetPollIntervalArgs() *SetPollIntervalArgs {
  output := &SetPollIntervalArgs{
    TStruct:thrift.NewTStruct("SetPollInterval_args", []thrift.TField{
    thrift.NewTField("_seconds", thrift.I32, 1),
    }),
  }
  {
  }
  return output
}

func (p *SetPollIntervalArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_seconds" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SetPollIntervalArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v931, err932 := iprot.ReadI32()
  if err932 != nil { return thrift.NewTProtocolExceptionReadField(1, "_seconds", p.ThriftName(), err932); }
  p._seconds = v931
  return err
}

func (p *SetPollIntervalArgs) ReadField_seconds(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *SetPollIntervalArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SetPollInterval_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SetPollIntervalArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_seconds", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_seconds", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._seconds))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_seconds", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_seconds", p.ThriftName(), err); }
  return err
}

func (p *SetPollIntervalArgs) WriteField_seconds(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *SetPollIntervalArgs) TStructName() string {
  return "SetPollIntervalArgs"
}

func (p *SetPollIntervalArgs) ThriftName() string {
  return "SetPollInterval_args"
}

func (p *SetPollIntervalArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetPollIntervalArgs(%+v)", *p)
}

func (p *SetPollIntervalArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SetPollIntervalArgs)
  if !ok {
    return 0, false
  }
  if p._seconds != data._seconds {
    if p._seconds < data._seconds {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *SetPollIntervalArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._seconds
  }
  return nil
}

func (p *SetPollIntervalArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_seconds", thrift.I32, 1),
    })
}

type SetPollIntervalResult struct {
  thrift.TStruct
}

func NewSetPollIntervalResult() *SetPollIntervalResult {
  output := &SetPollIntervalResult{
    TStruct:thrift.NewTStruct("SetPollInterval_result", []thrift.TField{
    }),
  }
  {
  }
  return output
}

func (p *SetPollIntervalResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    err = iprot.Skip(fieldTypeId)
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SetPollIntervalResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SetPollInterval_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SetPollIntervalResult) TStructName() string {
  return "SetPollIntervalResult"
}

func (p *SetPollIntervalResult) ThriftName() string {
  return "SetPollInterval_result"
}

func (p *SetPollIntervalResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetPollIntervalResult(%+v)", *p)
}

func (p *SetPollIntervalResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  _, ok := other.(*SetPollIntervalResult)
  if !ok {
    return 0, false
  }
  return 0, true
}

func (p *SetPollIntervalResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  }
  return nil
}

func (p *SetPollIntervalResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    })
}

/**
 * Attributes:
 *  - _valueId
 */
type EnablePollArgs struct {
  thrift.TStruct
  _valueId *RemoteValueID "_valueId"; // 1
}

func NewEnablePollArgs() *EnablePollArgs {
  output := &EnablePollArgs{
    TStruct:thrift.NewTStruct("EnablePoll_args", []thrift.TField{
    thrift.NewTField("_valueId", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *EnablePollArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_valueId" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *EnablePollArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p._valueId = NewRemoteValueID()
  err935 := p._valueId.Read(iprot)
  if err935 != nil { return thrift.NewTProtocolExceptionReadStruct("p._valueIdRemoteValueID", err935); }
  return err
}

func (p *EnablePollArgs) ReadField_valueId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *EnablePollArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("EnablePoll_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *EnablePollArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._valueId != nil {
    err = oprot.WriteFieldBegin("_valueId", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_valueId", p.ThriftName(), err); }
    err = p._valueId.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RemoteValueID", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_valueId", p.ThriftName(), err); }
  }
  return err
}

func (p *EnablePollArgs) WriteField_valueId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *EnablePollArgs) TStructName() string {
  return "EnablePollArgs"
}

func (p *EnablePollArgs) ThriftName() string {
  return "EnablePoll_args"
}

func (p *EnablePollArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EnablePollArgs(%+v)", *p)
}

func (p *EnablePollArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*EnablePollArgs)
  if !ok {
    return 0, false
  }
  if cmp, ok := p._valueId.CompareTo(data._valueId); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *EnablePollArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._valueId
  }
  return nil
}

func (p *EnablePollArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_valueId", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - Success
 */
type EnablePollResult struct {
  thrift.TStruct
  Success bool "success"; // 0
}

func NewEnablePollResult() *EnablePollResult {
  output := &EnablePollResult{
    TStruct:thrift.NewTStruct("EnablePoll_result", []thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    }),
  }
  {
  }
  return output
}

func (p *EnablePollResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *EnablePollResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v936, err937 := iprot.ReadBool()
  if err937 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err937); }
  p.Success = v936
  return err
}

func (p *EnablePollResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *EnablePollResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("EnablePoll_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *EnablePollResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BOOL, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *EnablePollResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *EnablePollResult) TStructName() string {
  return "EnablePollResult"
}

func (p *EnablePollResult) ThriftName() string {
  return "EnablePoll_result"
}

func (p *EnablePollResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EnablePollResult(%+v)", *p)
}

func (p *EnablePollResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*EnablePollResult)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Success, data.Success); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *EnablePollResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *EnablePollResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    })
}

/**
 * Attributes:
 *  - _valueId
 */
type DisablePollArgs struct {
  thrift.TStruct
  _valueId *RemoteValueID "_valueId"; // 1
}

func NewDisablePollArgs() *DisablePollArgs {
  output := &DisablePollArgs{
    TStruct:thrift.NewTStruct("DisablePoll_args", []thrift.TField{
    thrift.NewTField("_valueId", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *DisablePollArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_valueId" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *DisablePollArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p._valueId = NewRemoteValueID()
  err940 := p._valueId.Read(iprot)
  if err940 != nil { return thrift.NewTProtocolExceptionReadStruct("p._valueIdRemoteValueID", err940); }
  return err
}

func (p *DisablePollArgs) ReadField_valueId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *DisablePollArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("DisablePoll_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *DisablePollArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._valueId != nil {
    err = oprot.WriteFieldBegin("_valueId", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_valueId", p.ThriftName(), err); }
    err = p._valueId.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RemoteValueID", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_valueId", p.ThriftName(), err); }
  }
  return err
}

func (p *DisablePollArgs) WriteField_valueId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *DisablePollArgs) TStructName() string {
  return "DisablePollArgs"
}

func (p *DisablePollArgs) ThriftName() string {
  return "DisablePoll_args"
}

func (p *DisablePollArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DisablePollArgs(%+v)", *p)
}

func (p *DisablePollArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*DisablePollArgs)
  if !ok {
    return 0, false
  }
  if cmp, ok := p._valueId.CompareTo(data._valueId); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *DisablePollArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._valueId
  }
  return nil
}

func (p *DisablePollArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_valueId", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - Success
 */
type DisablePollResult struct {
  thrift.TStruct
  Success bool "success"; // 0
}

func NewDisablePollResult() *DisablePollResult {
  output := &DisablePollResult{
    TStruct:thrift.NewTStruct("DisablePoll_result", []thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    }),
  }
  {
  }
  return output
}

func (p *DisablePollResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *DisablePollResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v941, err942 := iprot.ReadBool()
  if err942 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err942); }
  p.Success = v941
  return err
}

func (p *DisablePollResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *DisablePollResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("DisablePoll_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *DisablePollResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BOOL, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *DisablePollResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *DisablePollResult) TStructName() string {
  return "DisablePollResult"
}

func (p *DisablePollResult) ThriftName() string {
  return "DisablePoll_result"
}

func (p *DisablePollResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DisablePollResult(%+v)", *p)
}

func (p *DisablePollResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*DisablePollResult)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Success, data.Success); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *DisablePollResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *DisablePollResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    })
}

/**
 * Attributes:
 *  - _valueId
 */
type IsPolledArgs struct {
  thrift.TStruct
  _valueId *RemoteValueID "_valueId"; // 1
}

func NewIsPolledArgs() *IsPolledArgs {
  output := &IsPolledArgs{
    TStruct:thrift.NewTStruct("isPolled_args", []thrift.TField{
    thrift.NewTField("_valueId", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *IsPolledArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_valueId" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *IsPolledArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p._valueId = NewRemoteValueID()
  err945 := p._valueId.Read(iprot)
  if err945 != nil { return thrift.NewTProtocolExceptionReadStruct("p._valueIdRemoteValueID", err945); }
  return err
}

func (p *IsPolledArgs) ReadField_valueId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *IsPolledArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("isPolled_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *IsPolledArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._valueId != nil {
    err = oprot.WriteFieldBegin("_valueId", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_valueId", p.ThriftName(), err); }
    err = p._valueId.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RemoteValueID", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_valueId", p.ThriftName(), err); }
  }
  return err
}

func (p *IsPolledArgs) WriteField_valueId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *IsPolledArgs) TStructName() string {
  return "IsPolledArgs"
}

func (p *IsPolledArgs) ThriftName() string {
  return "isPolled_args"
}

func (p *IsPolledArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IsPolledArgs(%+v)", *p)
}

func (p *IsPolledArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*IsPolledArgs)
  if !ok {
    return 0, false
  }
  if cmp, ok := p._valueId.CompareTo(data._valueId); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *IsPolledArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._valueId
  }
  return nil
}

func (p *IsPolledArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_valueId", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - Success
 */
type IsPolledResult struct {
  thrift.TStruct
  Success bool "success"; // 0
}

func NewIsPolledResult() *IsPolledResult {
  output := &IsPolledResult{
    TStruct:thrift.NewTStruct("isPolled_result", []thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    }),
  }
  {
  }
  return output
}

func (p *IsPolledResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *IsPolledResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v946, err947 := iprot.ReadBool()
  if err947 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err947); }
  p.Success = v946
  return err
}

func (p *IsPolledResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *IsPolledResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("isPolled_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *IsPolledResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BOOL, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *IsPolledResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *IsPolledResult) TStructName() string {
  return "IsPolledResult"
}

func (p *IsPolledResult) ThriftName() string {
  return "isPolled_result"
}

func (p *IsPolledResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IsPolledResult(%+v)", *p)
}

func (p *IsPolledResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*IsPolledResult)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Success, data.Success); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *IsPolledResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *IsPolledResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    })
}

/**
 * Attributes:
 *  - _homeId
 *  - _nodeId
 */
type RefreshNodeInfoArgs struct {
  thrift.TStruct
  _homeId int32 "_homeId"; // 1
  _nodeId byte "_nodeId"; // 2
}

func NewRefreshNodeInfoArgs() *RefreshNodeInfoArgs {
  output := &RefreshNodeInfoArgs{
    TStruct:thrift.NewTStruct("RefreshNodeInfo_args", []thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    }),
  }
  {
  }
  return output
}

func (p *RefreshNodeInfoArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_homeId" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_nodeId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *RefreshNodeInfoArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v948, err949 := iprot.ReadI32()
  if err949 != nil { return thrift.NewTProtocolExceptionReadField(1, "_homeId", p.ThriftName(), err949); }
  p._homeId = v948
  return err
}

func (p *RefreshNodeInfoArgs) ReadField_homeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *RefreshNodeInfoArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v950, err951 := iprot.ReadByte()
  if err951 != nil { return thrift.NewTProtocolExceptionReadField(2, "_nodeId", p.ThriftName(), err951); }
  p._nodeId = v950
  return err
}

func (p *RefreshNodeInfoArgs) ReadField_nodeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *RefreshNodeInfoArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("RefreshNodeInfo_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *RefreshNodeInfoArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_homeId", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._homeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  return err
}

func (p *RefreshNodeInfoArgs) WriteField_homeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *RefreshNodeInfoArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_nodeId", thrift.BYTE, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._nodeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  return err
}

func (p *RefreshNodeInfoArgs) WriteField_nodeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *RefreshNodeInfoArgs) TStructName() string {
  return "RefreshNodeInfoArgs"
}

func (p *RefreshNodeInfoArgs) ThriftName() string {
  return "RefreshNodeInfo_args"
}

func (p *RefreshNodeInfoArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RefreshNodeInfoArgs(%+v)", *p)
}

func (p *RefreshNodeInfoArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*RefreshNodeInfoArgs)
  if !ok {
    return 0, false
  }
  if p._homeId != data._homeId {
    if p._homeId < data._homeId {
      return -1, true
    }
    return 1, true
  }
  if p._nodeId != data._nodeId {
    if p._nodeId < data._nodeId {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *RefreshNodeInfoArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._homeId
  case 2: return p._nodeId
  }
  return nil
}

func (p *RefreshNodeInfoArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    })
}

/**
 * Attributes:
 *  - Success
 */
type RefreshNodeInfoResult struct {
  thrift.TStruct
  Success bool "success"; // 0
}

func NewRefreshNodeInfoResult() *RefreshNodeInfoResult {
  output := &RefreshNodeInfoResult{
    TStruct:thrift.NewTStruct("RefreshNodeInfo_result", []thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    }),
  }
  {
  }
  return output
}

func (p *RefreshNodeInfoResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *RefreshNodeInfoResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v952, err953 := iprot.ReadBool()
  if err953 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err953); }
  p.Success = v952
  return err
}

func (p *RefreshNodeInfoResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *RefreshNodeInfoResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("RefreshNodeInfo_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *RefreshNodeInfoResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BOOL, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *RefreshNodeInfoResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *RefreshNodeInfoResult) TStructName() string {
  return "RefreshNodeInfoResult"
}

func (p *RefreshNodeInfoResult) ThriftName() string {
  return "RefreshNodeInfo_result"
}

func (p *RefreshNodeInfoResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RefreshNodeInfoResult(%+v)", *p)
}

func (p *RefreshNodeInfoResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*RefreshNodeInfoResult)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Success, data.Success); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *RefreshNodeInfoResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *RefreshNodeInfoResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    })
}

/**
 * Attributes:
 *  - _homeId
 *  - _nodeId
 */
type RequestNodeStateArgs struct {
  thrift.TStruct
  _homeId int32 "_homeId"; // 1
  _nodeId byte "_nodeId"; // 2
}

func NewRequestNodeStateArgs() *RequestNodeStateArgs {
  output := &RequestNodeStateArgs{
    TStruct:thrift.NewTStruct("RequestNodeState_args", []thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    }),
  }
  {
  }
  return output
}

func (p *RequestNodeStateArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_homeId" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_nodeId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *RequestNodeStateArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v954, err955 := iprot.ReadI32()
  if err955 != nil { return thrift.NewTProtocolExceptionReadField(1, "_homeId", p.ThriftName(), err955); }
  p._homeId = v954
  return err
}

func (p *RequestNodeStateArgs) ReadField_homeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *RequestNodeStateArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v956, err957 := iprot.ReadByte()
  if err957 != nil { return thrift.NewTProtocolExceptionReadField(2, "_nodeId", p.ThriftName(), err957); }
  p._nodeId = v956
  return err
}

func (p *RequestNodeStateArgs) ReadField_nodeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *RequestNodeStateArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("RequestNodeState_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *RequestNodeStateArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_homeId", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._homeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  return err
}

func (p *RequestNodeStateArgs) WriteField_homeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *RequestNodeStateArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_nodeId", thrift.BYTE, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._nodeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  return err
}

func (p *RequestNodeStateArgs) WriteField_nodeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *RequestNodeStateArgs) TStructName() string {
  return "RequestNodeStateArgs"
}

func (p *RequestNodeStateArgs) ThriftName() string {
  return "RequestNodeState_args"
}

func (p *RequestNodeStateArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RequestNodeStateArgs(%+v)", *p)
}

func (p *RequestNodeStateArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*RequestNodeStateArgs)
  if !ok {
    return 0, false
  }
  if p._homeId != data._homeId {
    if p._homeId < data._homeId {
      return -1, true
    }
    return 1, true
  }
  if p._nodeId != data._nodeId {
    if p._nodeId < data._nodeId {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *RequestNodeStateArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._homeId
  case 2: return p._nodeId
  }
  return nil
}

func (p *RequestNodeStateArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    })
}

/**
 * Attributes:
 *  - Success
 */
type RequestNodeStateResult struct {
  thrift.TStruct
  Success bool "success"; // 0
}

func NewRequestNodeStateResult() *RequestNodeStateResult {
  output := &RequestNodeStateResult{
    TStruct:thrift.NewTStruct("RequestNodeState_result", []thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    }),
  }
  {
  }
  return output
}

func (p *RequestNodeStateResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *RequestNodeStateResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v958, err959 := iprot.ReadBool()
  if err959 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err959); }
  p.Success = v958
  return err
}

func (p *RequestNodeStateResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *RequestNodeStateResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("RequestNodeState_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *RequestNodeStateResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BOOL, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *RequestNodeStateResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *RequestNodeStateResult) TStructName() string {
  return "RequestNodeStateResult"
}

func (p *RequestNodeStateResult) ThriftName() string {
  return "RequestNodeState_result"
}

func (p *RequestNodeStateResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RequestNodeStateResult(%+v)", *p)
}

func (p *RequestNodeStateResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*RequestNodeStateResult)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Success, data.Success); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *RequestNodeStateResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *RequestNodeStateResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    })
}

/**
 * Attributes:
 *  - _homeId
 *  - _nodeId
 */
type RequestNodeDynamicArgs struct {
  thrift.TStruct
  _homeId int32 "_homeId"; // 1
  _nodeId byte "_nodeId"; // 2
}

func NewRequestNodeDynamicArgs() *RequestNodeDynamicArgs {
  output := &RequestNodeDynamicArgs{
    TStruct:thrift.NewTStruct("RequestNodeDynamic_args", []thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    }),
  }
  {
  }
  return output
}

func (p *RequestNodeDynamicArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_homeId" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_nodeId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *RequestNodeDynamicArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v960, err961 := iprot.ReadI32()
  if err961 != nil { return thrift.NewTProtocolExceptionReadField(1, "_homeId", p.ThriftName(), err961); }
  p._homeId = v960
  return err
}

func (p *RequestNodeDynamicArgs) ReadField_homeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *RequestNodeDynamicArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v962, err963 := iprot.ReadByte()
  if err963 != nil { return thrift.NewTProtocolExceptionReadField(2, "_nodeId", p.ThriftName(), err963); }
  p._nodeId = v962
  return err
}

func (p *RequestNodeDynamicArgs) ReadField_nodeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *RequestNodeDynamicArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("RequestNodeDynamic_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *RequestNodeDynamicArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_homeId", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._homeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  return err
}

func (p *RequestNodeDynamicArgs) WriteField_homeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *RequestNodeDynamicArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_nodeId", thrift.BYTE, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._nodeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  return err
}

func (p *RequestNodeDynamicArgs) WriteField_nodeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *RequestNodeDynamicArgs) TStructName() string {
  return "RequestNodeDynamicArgs"
}

func (p *RequestNodeDynamicArgs) ThriftName() string {
  return "RequestNodeDynamic_args"
}

func (p *RequestNodeDynamicArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RequestNodeDynamicArgs(%+v)", *p)
}

func (p *RequestNodeDynamicArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*RequestNodeDynamicArgs)
  if !ok {
    return 0, false
  }
  if p._homeId != data._homeId {
    if p._homeId < data._homeId {
      return -1, true
    }
    return 1, true
  }
  if p._nodeId != data._nodeId {
    if p._nodeId < data._nodeId {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *RequestNodeDynamicArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._homeId
  case 2: return p._nodeId
  }
  return nil
}

func (p *RequestNodeDynamicArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    })
}

/**
 * Attributes:
 *  - Success
 */
type RequestNodeDynamicResult struct {
  thrift.TStruct
  Success bool "success"; // 0
}

func NewRequestNodeDynamicResult() *RequestNodeDynamicResult {
  output := &RequestNodeDynamicResult{
    TStruct:thrift.NewTStruct("RequestNodeDynamic_result", []thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    }),
  }
  {
  }
  return output
}

func (p *RequestNodeDynamicResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *RequestNodeDynamicResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v964, err965 := iprot.ReadBool()
  if err965 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err965); }
  p.Success = v964
  return err
}

func (p *RequestNodeDynamicResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *RequestNodeDynamicResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("RequestNodeDynamic_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *RequestNodeDynamicResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BOOL, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *RequestNodeDynamicResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *RequestNodeDynamicResult) TStructName() string {
  return "RequestNodeDynamicResult"
}

func (p *RequestNodeDynamicResult) ThriftName() string {
  return "RequestNodeDynamic_result"
}

func (p *RequestNodeDynamicResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RequestNodeDynamicResult(%+v)", *p)
}

func (p *RequestNodeDynamicResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*RequestNodeDynamicResult)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Success, data.Success); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *RequestNodeDynamicResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *RequestNodeDynamicResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    })
}

/**
 * Attributes:
 *  - _homeId
 *  - _nodeId
 */
type IsNodeListeningDeviceArgs struct {
  thrift.TStruct
  _homeId int32 "_homeId"; // 1
  _nodeId byte "_nodeId"; // 2
}

func NewIsNodeListeningDeviceArgs() *IsNodeListeningDeviceArgs {
  output := &IsNodeListeningDeviceArgs{
    TStruct:thrift.NewTStruct("IsNodeListeningDevice_args", []thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    }),
  }
  {
  }
  return output
}

func (p *IsNodeListeningDeviceArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_homeId" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_nodeId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *IsNodeListeningDeviceArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v966, err967 := iprot.ReadI32()
  if err967 != nil { return thrift.NewTProtocolExceptionReadField(1, "_homeId", p.ThriftName(), err967); }
  p._homeId = v966
  return err
}

func (p *IsNodeListeningDeviceArgs) ReadField_homeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *IsNodeListeningDeviceArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v968, err969 := iprot.ReadByte()
  if err969 != nil { return thrift.NewTProtocolExceptionReadField(2, "_nodeId", p.ThriftName(), err969); }
  p._nodeId = v968
  return err
}

func (p *IsNodeListeningDeviceArgs) ReadField_nodeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *IsNodeListeningDeviceArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("IsNodeListeningDevice_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *IsNodeListeningDeviceArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_homeId", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._homeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  return err
}

func (p *IsNodeListeningDeviceArgs) WriteField_homeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *IsNodeListeningDeviceArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_nodeId", thrift.BYTE, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._nodeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  return err
}

func (p *IsNodeListeningDeviceArgs) WriteField_nodeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *IsNodeListeningDeviceArgs) TStructName() string {
  return "IsNodeListeningDeviceArgs"
}

func (p *IsNodeListeningDeviceArgs) ThriftName() string {
  return "IsNodeListeningDevice_args"
}

func (p *IsNodeListeningDeviceArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IsNodeListeningDeviceArgs(%+v)", *p)
}

func (p *IsNodeListeningDeviceArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*IsNodeListeningDeviceArgs)
  if !ok {
    return 0, false
  }
  if p._homeId != data._homeId {
    if p._homeId < data._homeId {
      return -1, true
    }
    return 1, true
  }
  if p._nodeId != data._nodeId {
    if p._nodeId < data._nodeId {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *IsNodeListeningDeviceArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._homeId
  case 2: return p._nodeId
  }
  return nil
}

func (p *IsNodeListeningDeviceArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    })
}

/**
 * Attributes:
 *  - Success
 */
type IsNodeListeningDeviceResult struct {
  thrift.TStruct
  Success bool "success"; // 0
}

func NewIsNodeListeningDeviceResult() *IsNodeListeningDeviceResult {
  output := &IsNodeListeningDeviceResult{
    TStruct:thrift.NewTStruct("IsNodeListeningDevice_result", []thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    }),
  }
  {
  }
  return output
}

func (p *IsNodeListeningDeviceResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *IsNodeListeningDeviceResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v970, err971 := iprot.ReadBool()
  if err971 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err971); }
  p.Success = v970
  return err
}

func (p *IsNodeListeningDeviceResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *IsNodeListeningDeviceResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("IsNodeListeningDevice_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *IsNodeListeningDeviceResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BOOL, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *IsNodeListeningDeviceResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *IsNodeListeningDeviceResult) TStructName() string {
  return "IsNodeListeningDeviceResult"
}

func (p *IsNodeListeningDeviceResult) ThriftName() string {
  return "IsNodeListeningDevice_result"
}

func (p *IsNodeListeningDeviceResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IsNodeListeningDeviceResult(%+v)", *p)
}

func (p *IsNodeListeningDeviceResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*IsNodeListeningDeviceResult)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Success, data.Success); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *IsNodeListeningDeviceResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *IsNodeListeningDeviceResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    })
}

/**
 * Attributes:
 *  - _homeId
 *  - _nodeId
 */
type IsNodeFrequentListeningDeviceArgs struct {
  thrift.TStruct
  _homeId int32 "_homeId"; // 1
  _nodeId byte "_nodeId"; // 2
}

func NewIsNodeFrequentListeningDeviceArgs() *IsNodeFrequentListeningDeviceArgs {
  output := &IsNodeFrequentListeningDeviceArgs{
    TStruct:thrift.NewTStruct("IsNodeFrequentListeningDevice_args", []thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    }),
  }
  {
  }
  return output
}

func (p *IsNodeFrequentListeningDeviceArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_homeId" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_nodeId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *IsNodeFrequentListeningDeviceArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v972, err973 := iprot.ReadI32()
  if err973 != nil { return thrift.NewTProtocolExceptionReadField(1, "_homeId", p.ThriftName(), err973); }
  p._homeId = v972
  return err
}

func (p *IsNodeFrequentListeningDeviceArgs) ReadField_homeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *IsNodeFrequentListeningDeviceArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v974, err975 := iprot.ReadByte()
  if err975 != nil { return thrift.NewTProtocolExceptionReadField(2, "_nodeId", p.ThriftName(), err975); }
  p._nodeId = v974
  return err
}

func (p *IsNodeFrequentListeningDeviceArgs) ReadField_nodeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *IsNodeFrequentListeningDeviceArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("IsNodeFrequentListeningDevice_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *IsNodeFrequentListeningDeviceArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_homeId", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._homeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  return err
}

func (p *IsNodeFrequentListeningDeviceArgs) WriteField_homeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *IsNodeFrequentListeningDeviceArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_nodeId", thrift.BYTE, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._nodeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  return err
}

func (p *IsNodeFrequentListeningDeviceArgs) WriteField_nodeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *IsNodeFrequentListeningDeviceArgs) TStructName() string {
  return "IsNodeFrequentListeningDeviceArgs"
}

func (p *IsNodeFrequentListeningDeviceArgs) ThriftName() string {
  return "IsNodeFrequentListeningDevice_args"
}

func (p *IsNodeFrequentListeningDeviceArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IsNodeFrequentListeningDeviceArgs(%+v)", *p)
}

func (p *IsNodeFrequentListeningDeviceArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*IsNodeFrequentListeningDeviceArgs)
  if !ok {
    return 0, false
  }
  if p._homeId != data._homeId {
    if p._homeId < data._homeId {
      return -1, true
    }
    return 1, true
  }
  if p._nodeId != data._nodeId {
    if p._nodeId < data._nodeId {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *IsNodeFrequentListeningDeviceArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._homeId
  case 2: return p._nodeId
  }
  return nil
}

func (p *IsNodeFrequentListeningDeviceArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    })
}

/**
 * Attributes:
 *  - Success
 */
type IsNodeFrequentListeningDeviceResult struct {
  thrift.TStruct
  Success bool "success"; // 0
}

func NewIsNodeFrequentListeningDeviceResult() *IsNodeFrequentListeningDeviceResult {
  output := &IsNodeFrequentListeningDeviceResult{
    TStruct:thrift.NewTStruct("IsNodeFrequentListeningDevice_result", []thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    }),
  }
  {
  }
  return output
}

func (p *IsNodeFrequentListeningDeviceResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *IsNodeFrequentListeningDeviceResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v976, err977 := iprot.ReadBool()
  if err977 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err977); }
  p.Success = v976
  return err
}

func (p *IsNodeFrequentListeningDeviceResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *IsNodeFrequentListeningDeviceResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("IsNodeFrequentListeningDevice_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *IsNodeFrequentListeningDeviceResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BOOL, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *IsNodeFrequentListeningDeviceResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *IsNodeFrequentListeningDeviceResult) TStructName() string {
  return "IsNodeFrequentListeningDeviceResult"
}

func (p *IsNodeFrequentListeningDeviceResult) ThriftName() string {
  return "IsNodeFrequentListeningDevice_result"
}

func (p *IsNodeFrequentListeningDeviceResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IsNodeFrequentListeningDeviceResult(%+v)", *p)
}

func (p *IsNodeFrequentListeningDeviceResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*IsNodeFrequentListeningDeviceResult)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Success, data.Success); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *IsNodeFrequentListeningDeviceResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *IsNodeFrequentListeningDeviceResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    })
}

/**
 * Attributes:
 *  - _homeId
 *  - _nodeId
 */
type IsNodeBeamingDeviceArgs struct {
  thrift.TStruct
  _homeId int32 "_homeId"; // 1
  _nodeId byte "_nodeId"; // 2
}

func NewIsNodeBeamingDeviceArgs() *IsNodeBeamingDeviceArgs {
  output := &IsNodeBeamingDeviceArgs{
    TStruct:thrift.NewTStruct("IsNodeBeamingDevice_args", []thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    }),
  }
  {
  }
  return output
}

func (p *IsNodeBeamingDeviceArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_homeId" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_nodeId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *IsNodeBeamingDeviceArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v978, err979 := iprot.ReadI32()
  if err979 != nil { return thrift.NewTProtocolExceptionReadField(1, "_homeId", p.ThriftName(), err979); }
  p._homeId = v978
  return err
}

func (p *IsNodeBeamingDeviceArgs) ReadField_homeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *IsNodeBeamingDeviceArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v980, err981 := iprot.ReadByte()
  if err981 != nil { return thrift.NewTProtocolExceptionReadField(2, "_nodeId", p.ThriftName(), err981); }
  p._nodeId = v980
  return err
}

func (p *IsNodeBeamingDeviceArgs) ReadField_nodeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *IsNodeBeamingDeviceArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("IsNodeBeamingDevice_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *IsNodeBeamingDeviceArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_homeId", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._homeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  return err
}

func (p *IsNodeBeamingDeviceArgs) WriteField_homeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *IsNodeBeamingDeviceArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_nodeId", thrift.BYTE, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._nodeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  return err
}

func (p *IsNodeBeamingDeviceArgs) WriteField_nodeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *IsNodeBeamingDeviceArgs) TStructName() string {
  return "IsNodeBeamingDeviceArgs"
}

func (p *IsNodeBeamingDeviceArgs) ThriftName() string {
  return "IsNodeBeamingDevice_args"
}

func (p *IsNodeBeamingDeviceArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IsNodeBeamingDeviceArgs(%+v)", *p)
}

func (p *IsNodeBeamingDeviceArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*IsNodeBeamingDeviceArgs)
  if !ok {
    return 0, false
  }
  if p._homeId != data._homeId {
    if p._homeId < data._homeId {
      return -1, true
    }
    return 1, true
  }
  if p._nodeId != data._nodeId {
    if p._nodeId < data._nodeId {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *IsNodeBeamingDeviceArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._homeId
  case 2: return p._nodeId
  }
  return nil
}

func (p *IsNodeBeamingDeviceArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    })
}

/**
 * Attributes:
 *  - Success
 */
type IsNodeBeamingDeviceResult struct {
  thrift.TStruct
  Success bool "success"; // 0
}

func NewIsNodeBeamingDeviceResult() *IsNodeBeamingDeviceResult {
  output := &IsNodeBeamingDeviceResult{
    TStruct:thrift.NewTStruct("IsNodeBeamingDevice_result", []thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    }),
  }
  {
  }
  return output
}

func (p *IsNodeBeamingDeviceResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *IsNodeBeamingDeviceResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v982, err983 := iprot.ReadBool()
  if err983 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err983); }
  p.Success = v982
  return err
}

func (p *IsNodeBeamingDeviceResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *IsNodeBeamingDeviceResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("IsNodeBeamingDevice_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *IsNodeBeamingDeviceResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BOOL, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *IsNodeBeamingDeviceResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *IsNodeBeamingDeviceResult) TStructName() string {
  return "IsNodeBeamingDeviceResult"
}

func (p *IsNodeBeamingDeviceResult) ThriftName() string {
  return "IsNodeBeamingDevice_result"
}

func (p *IsNodeBeamingDeviceResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IsNodeBeamingDeviceResult(%+v)", *p)
}

func (p *IsNodeBeamingDeviceResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*IsNodeBeamingDeviceResult)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Success, data.Success); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *IsNodeBeamingDeviceResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *IsNodeBeamingDeviceResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    })
}

/**
 * Attributes:
 *  - _homeId
 *  - _nodeId
 */
type IsNodeRoutingDeviceArgs struct {
  thrift.TStruct
  _homeId int32 "_homeId"; // 1
  _nodeId byte "_nodeId"; // 2
}

func NewIsNodeRoutingDeviceArgs() *IsNodeRoutingDeviceArgs {
  output := &IsNodeRoutingDeviceArgs{
    TStruct:thrift.NewTStruct("IsNodeRoutingDevice_args", []thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    }),
  }
  {
  }
  return output
}

func (p *IsNodeRoutingDeviceArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_homeId" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_nodeId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *IsNodeRoutingDeviceArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v984, err985 := iprot.ReadI32()
  if err985 != nil { return thrift.NewTProtocolExceptionReadField(1, "_homeId", p.ThriftName(), err985); }
  p._homeId = v984
  return err
}

func (p *IsNodeRoutingDeviceArgs) ReadField_homeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *IsNodeRoutingDeviceArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v986, err987 := iprot.ReadByte()
  if err987 != nil { return thrift.NewTProtocolExceptionReadField(2, "_nodeId", p.ThriftName(), err987); }
  p._nodeId = v986
  return err
}

func (p *IsNodeRoutingDeviceArgs) ReadField_nodeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *IsNodeRoutingDeviceArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("IsNodeRoutingDevice_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *IsNodeRoutingDeviceArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_homeId", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._homeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  return err
}

func (p *IsNodeRoutingDeviceArgs) WriteField_homeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *IsNodeRoutingDeviceArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_nodeId", thrift.BYTE, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._nodeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  return err
}

func (p *IsNodeRoutingDeviceArgs) WriteField_nodeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *IsNodeRoutingDeviceArgs) TStructName() string {
  return "IsNodeRoutingDeviceArgs"
}

func (p *IsNodeRoutingDeviceArgs) ThriftName() string {
  return "IsNodeRoutingDevice_args"
}

func (p *IsNodeRoutingDeviceArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IsNodeRoutingDeviceArgs(%+v)", *p)
}

func (p *IsNodeRoutingDeviceArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*IsNodeRoutingDeviceArgs)
  if !ok {
    return 0, false
  }
  if p._homeId != data._homeId {
    if p._homeId < data._homeId {
      return -1, true
    }
    return 1, true
  }
  if p._nodeId != data._nodeId {
    if p._nodeId < data._nodeId {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *IsNodeRoutingDeviceArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._homeId
  case 2: return p._nodeId
  }
  return nil
}

func (p *IsNodeRoutingDeviceArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    })
}

/**
 * Attributes:
 *  - Success
 */
type IsNodeRoutingDeviceResult struct {
  thrift.TStruct
  Success bool "success"; // 0
}

func NewIsNodeRoutingDeviceResult() *IsNodeRoutingDeviceResult {
  output := &IsNodeRoutingDeviceResult{
    TStruct:thrift.NewTStruct("IsNodeRoutingDevice_result", []thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    }),
  }
  {
  }
  return output
}

func (p *IsNodeRoutingDeviceResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *IsNodeRoutingDeviceResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v988, err989 := iprot.ReadBool()
  if err989 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err989); }
  p.Success = v988
  return err
}

func (p *IsNodeRoutingDeviceResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *IsNodeRoutingDeviceResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("IsNodeRoutingDevice_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *IsNodeRoutingDeviceResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BOOL, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *IsNodeRoutingDeviceResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *IsNodeRoutingDeviceResult) TStructName() string {
  return "IsNodeRoutingDeviceResult"
}

func (p *IsNodeRoutingDeviceResult) ThriftName() string {
  return "IsNodeRoutingDevice_result"
}

func (p *IsNodeRoutingDeviceResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IsNodeRoutingDeviceResult(%+v)", *p)
}

func (p *IsNodeRoutingDeviceResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*IsNodeRoutingDeviceResult)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Success, data.Success); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *IsNodeRoutingDeviceResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *IsNodeRoutingDeviceResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    })
}

/**
 * Attributes:
 *  - _homeId
 *  - _nodeId
 */
type IsNodeSecurityDeviceArgs struct {
  thrift.TStruct
  _homeId int32 "_homeId"; // 1
  _nodeId byte "_nodeId"; // 2
}

func NewIsNodeSecurityDeviceArgs() *IsNodeSecurityDeviceArgs {
  output := &IsNodeSecurityDeviceArgs{
    TStruct:thrift.NewTStruct("IsNodeSecurityDevice_args", []thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    }),
  }
  {
  }
  return output
}

func (p *IsNodeSecurityDeviceArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_homeId" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_nodeId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *IsNodeSecurityDeviceArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v990, err991 := iprot.ReadI32()
  if err991 != nil { return thrift.NewTProtocolExceptionReadField(1, "_homeId", p.ThriftName(), err991); }
  p._homeId = v990
  return err
}

func (p *IsNodeSecurityDeviceArgs) ReadField_homeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *IsNodeSecurityDeviceArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v992, err993 := iprot.ReadByte()
  if err993 != nil { return thrift.NewTProtocolExceptionReadField(2, "_nodeId", p.ThriftName(), err993); }
  p._nodeId = v992
  return err
}

func (p *IsNodeSecurityDeviceArgs) ReadField_nodeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *IsNodeSecurityDeviceArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("IsNodeSecurityDevice_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *IsNodeSecurityDeviceArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_homeId", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._homeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  return err
}

func (p *IsNodeSecurityDeviceArgs) WriteField_homeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *IsNodeSecurityDeviceArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_nodeId", thrift.BYTE, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._nodeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  return err
}

func (p *IsNodeSecurityDeviceArgs) WriteField_nodeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *IsNodeSecurityDeviceArgs) TStructName() string {
  return "IsNodeSecurityDeviceArgs"
}

func (p *IsNodeSecurityDeviceArgs) ThriftName() string {
  return "IsNodeSecurityDevice_args"
}

func (p *IsNodeSecurityDeviceArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IsNodeSecurityDeviceArgs(%+v)", *p)
}

func (p *IsNodeSecurityDeviceArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*IsNodeSecurityDeviceArgs)
  if !ok {
    return 0, false
  }
  if p._homeId != data._homeId {
    if p._homeId < data._homeId {
      return -1, true
    }
    return 1, true
  }
  if p._nodeId != data._nodeId {
    if p._nodeId < data._nodeId {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *IsNodeSecurityDeviceArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._homeId
  case 2: return p._nodeId
  }
  return nil
}

func (p *IsNodeSecurityDeviceArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    })
}

/**
 * Attributes:
 *  - Success
 */
type IsNodeSecurityDeviceResult struct {
  thrift.TStruct
  Success bool "success"; // 0
}

func NewIsNodeSecurityDeviceResult() *IsNodeSecurityDeviceResult {
  output := &IsNodeSecurityDeviceResult{
    TStruct:thrift.NewTStruct("IsNodeSecurityDevice_result", []thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    }),
  }
  {
  }
  return output
}

func (p *IsNodeSecurityDeviceResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *IsNodeSecurityDeviceResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v994, err995 := iprot.ReadBool()
  if err995 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err995); }
  p.Success = v994
  return err
}

func (p *IsNodeSecurityDeviceResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *IsNodeSecurityDeviceResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("IsNodeSecurityDevice_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *IsNodeSecurityDeviceResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BOOL, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *IsNodeSecurityDeviceResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *IsNodeSecurityDeviceResult) TStructName() string {
  return "IsNodeSecurityDeviceResult"
}

func (p *IsNodeSecurityDeviceResult) ThriftName() string {
  return "IsNodeSecurityDevice_result"
}

func (p *IsNodeSecurityDeviceResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IsNodeSecurityDeviceResult(%+v)", *p)
}

func (p *IsNodeSecurityDeviceResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*IsNodeSecurityDeviceResult)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Success, data.Success); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *IsNodeSecurityDeviceResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *IsNodeSecurityDeviceResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    })
}

/**
 * Attributes:
 *  - _homeId
 *  - _nodeId
 */
type GetNodeMaxBaudRateArgs struct {
  thrift.TStruct
  _homeId int32 "_homeId"; // 1
  _nodeId byte "_nodeId"; // 2
}

func NewGetNodeMaxBaudRateArgs() *GetNodeMaxBaudRateArgs {
  output := &GetNodeMaxBaudRateArgs{
    TStruct:thrift.NewTStruct("GetNodeMaxBaudRate_args", []thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    }),
  }
  {
  }
  return output
}

func (p *GetNodeMaxBaudRateArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_homeId" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_nodeId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNodeMaxBaudRateArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v996, err997 := iprot.ReadI32()
  if err997 != nil { return thrift.NewTProtocolExceptionReadField(1, "_homeId", p.ThriftName(), err997); }
  p._homeId = v996
  return err
}

func (p *GetNodeMaxBaudRateArgs) ReadField_homeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetNodeMaxBaudRateArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v998, err999 := iprot.ReadByte()
  if err999 != nil { return thrift.NewTProtocolExceptionReadField(2, "_nodeId", p.ThriftName(), err999); }
  p._nodeId = v998
  return err
}

func (p *GetNodeMaxBaudRateArgs) ReadField_nodeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *GetNodeMaxBaudRateArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetNodeMaxBaudRate_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNodeMaxBaudRateArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_homeId", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._homeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  return err
}

func (p *GetNodeMaxBaudRateArgs) WriteField_homeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetNodeMaxBaudRateArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_nodeId", thrift.BYTE, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._nodeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  return err
}

func (p *GetNodeMaxBaudRateArgs) WriteField_nodeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *GetNodeMaxBaudRateArgs) TStructName() string {
  return "GetNodeMaxBaudRateArgs"
}

func (p *GetNodeMaxBaudRateArgs) ThriftName() string {
  return "GetNodeMaxBaudRate_args"
}

func (p *GetNodeMaxBaudRateArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetNodeMaxBaudRateArgs(%+v)", *p)
}

func (p *GetNodeMaxBaudRateArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetNodeMaxBaudRateArgs)
  if !ok {
    return 0, false
  }
  if p._homeId != data._homeId {
    if p._homeId < data._homeId {
      return -1, true
    }
    return 1, true
  }
  if p._nodeId != data._nodeId {
    if p._nodeId < data._nodeId {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetNodeMaxBaudRateArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._homeId
  case 2: return p._nodeId
  }
  return nil
}

func (p *GetNodeMaxBaudRateArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    })
}

/**
 * Attributes:
 *  - Success
 */
type GetNodeMaxBaudRateResult struct {
  thrift.TStruct
  Success int32 "success"; // 0
}

func NewGetNodeMaxBaudRateResult() *GetNodeMaxBaudRateResult {
  output := &GetNodeMaxBaudRateResult{
    TStruct:thrift.NewTStruct("GetNodeMaxBaudRate_result", []thrift.TField{
    thrift.NewTField("success", thrift.I32, 0),
    }),
  }
  {
  }
  return output
}

func (p *GetNodeMaxBaudRateResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNodeMaxBaudRateResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1000, err1001 := iprot.ReadI32()
  if err1001 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1001); }
  p.Success = v1000
  return err
}

func (p *GetNodeMaxBaudRateResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetNodeMaxBaudRateResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetNodeMaxBaudRate_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNodeMaxBaudRateResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.I32, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *GetNodeMaxBaudRateResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetNodeMaxBaudRateResult) TStructName() string {
  return "GetNodeMaxBaudRateResult"
}

func (p *GetNodeMaxBaudRateResult) ThriftName() string {
  return "GetNodeMaxBaudRate_result"
}

func (p *GetNodeMaxBaudRateResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetNodeMaxBaudRateResult(%+v)", *p)
}

func (p *GetNodeMaxBaudRateResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetNodeMaxBaudRateResult)
  if !ok {
    return 0, false
  }
  if p.Success != data.Success {
    if p.Success < data.Success {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetNodeMaxBaudRateResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *GetNodeMaxBaudRateResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.I32, 0),
    })
}

/**
 * Attributes:
 *  - _homeId
 *  - _nodeId
 */
type GetNodeVersionArgs struct {
  thrift.TStruct
  _homeId int32 "_homeId"; // 1
  _nodeId byte "_nodeId"; // 2
}

func NewGetNodeVersionArgs() *GetNodeVersionArgs {
  output := &GetNodeVersionArgs{
    TStruct:thrift.NewTStruct("GetNodeVersion_args", []thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    }),
  }
  {
  }
  return output
}

func (p *GetNodeVersionArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_homeId" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_nodeId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNodeVersionArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1002, err1003 := iprot.ReadI32()
  if err1003 != nil { return thrift.NewTProtocolExceptionReadField(1, "_homeId", p.ThriftName(), err1003); }
  p._homeId = v1002
  return err
}

func (p *GetNodeVersionArgs) ReadField_homeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetNodeVersionArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1004, err1005 := iprot.ReadByte()
  if err1005 != nil { return thrift.NewTProtocolExceptionReadField(2, "_nodeId", p.ThriftName(), err1005); }
  p._nodeId = v1004
  return err
}

func (p *GetNodeVersionArgs) ReadField_nodeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *GetNodeVersionArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetNodeVersion_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNodeVersionArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_homeId", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._homeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  return err
}

func (p *GetNodeVersionArgs) WriteField_homeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetNodeVersionArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_nodeId", thrift.BYTE, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._nodeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  return err
}

func (p *GetNodeVersionArgs) WriteField_nodeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *GetNodeVersionArgs) TStructName() string {
  return "GetNodeVersionArgs"
}

func (p *GetNodeVersionArgs) ThriftName() string {
  return "GetNodeVersion_args"
}

func (p *GetNodeVersionArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetNodeVersionArgs(%+v)", *p)
}

func (p *GetNodeVersionArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetNodeVersionArgs)
  if !ok {
    return 0, false
  }
  if p._homeId != data._homeId {
    if p._homeId < data._homeId {
      return -1, true
    }
    return 1, true
  }
  if p._nodeId != data._nodeId {
    if p._nodeId < data._nodeId {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetNodeVersionArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._homeId
  case 2: return p._nodeId
  }
  return nil
}

func (p *GetNodeVersionArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    })
}

/**
 * Attributes:
 *  - Success
 */
type GetNodeVersionResult struct {
  thrift.TStruct
  Success byte "success"; // 0
}

func NewGetNodeVersionResult() *GetNodeVersionResult {
  output := &GetNodeVersionResult{
    TStruct:thrift.NewTStruct("GetNodeVersion_result", []thrift.TField{
    thrift.NewTField("success", thrift.BYTE, 0),
    }),
  }
  {
  }
  return output
}

func (p *GetNodeVersionResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNodeVersionResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1006, err1007 := iprot.ReadByte()
  if err1007 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1007); }
  p.Success = v1006
  return err
}

func (p *GetNodeVersionResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetNodeVersionResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetNodeVersion_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNodeVersionResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BYTE, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *GetNodeVersionResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetNodeVersionResult) TStructName() string {
  return "GetNodeVersionResult"
}

func (p *GetNodeVersionResult) ThriftName() string {
  return "GetNodeVersion_result"
}

func (p *GetNodeVersionResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetNodeVersionResult(%+v)", *p)
}

func (p *GetNodeVersionResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetNodeVersionResult)
  if !ok {
    return 0, false
  }
  if p.Success != data.Success {
    if p.Success < data.Success {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetNodeVersionResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *GetNodeVersionResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BYTE, 0),
    })
}

/**
 * Attributes:
 *  - _homeId
 *  - _nodeId
 */
type GetNodeBasicArgs struct {
  thrift.TStruct
  _homeId int32 "_homeId"; // 1
  _nodeId byte "_nodeId"; // 2
}

func NewGetNodeBasicArgs() *GetNodeBasicArgs {
  output := &GetNodeBasicArgs{
    TStruct:thrift.NewTStruct("GetNodeBasic_args", []thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    }),
  }
  {
  }
  return output
}

func (p *GetNodeBasicArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_homeId" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_nodeId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNodeBasicArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1008, err1009 := iprot.ReadI32()
  if err1009 != nil { return thrift.NewTProtocolExceptionReadField(1, "_homeId", p.ThriftName(), err1009); }
  p._homeId = v1008
  return err
}

func (p *GetNodeBasicArgs) ReadField_homeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetNodeBasicArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1010, err1011 := iprot.ReadByte()
  if err1011 != nil { return thrift.NewTProtocolExceptionReadField(2, "_nodeId", p.ThriftName(), err1011); }
  p._nodeId = v1010
  return err
}

func (p *GetNodeBasicArgs) ReadField_nodeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *GetNodeBasicArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetNodeBasic_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNodeBasicArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_homeId", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._homeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  return err
}

func (p *GetNodeBasicArgs) WriteField_homeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetNodeBasicArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_nodeId", thrift.BYTE, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._nodeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  return err
}

func (p *GetNodeBasicArgs) WriteField_nodeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *GetNodeBasicArgs) TStructName() string {
  return "GetNodeBasicArgs"
}

func (p *GetNodeBasicArgs) ThriftName() string {
  return "GetNodeBasic_args"
}

func (p *GetNodeBasicArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetNodeBasicArgs(%+v)", *p)
}

func (p *GetNodeBasicArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetNodeBasicArgs)
  if !ok {
    return 0, false
  }
  if p._homeId != data._homeId {
    if p._homeId < data._homeId {
      return -1, true
    }
    return 1, true
  }
  if p._nodeId != data._nodeId {
    if p._nodeId < data._nodeId {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetNodeBasicArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._homeId
  case 2: return p._nodeId
  }
  return nil
}

func (p *GetNodeBasicArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    })
}

/**
 * Attributes:
 *  - Success
 */
type GetNodeBasicResult struct {
  thrift.TStruct
  Success byte "success"; // 0
}

func NewGetNodeBasicResult() *GetNodeBasicResult {
  output := &GetNodeBasicResult{
    TStruct:thrift.NewTStruct("GetNodeBasic_result", []thrift.TField{
    thrift.NewTField("success", thrift.BYTE, 0),
    }),
  }
  {
  }
  return output
}

func (p *GetNodeBasicResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNodeBasicResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1012, err1013 := iprot.ReadByte()
  if err1013 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1013); }
  p.Success = v1012
  return err
}

func (p *GetNodeBasicResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetNodeBasicResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetNodeBasic_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNodeBasicResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BYTE, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *GetNodeBasicResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetNodeBasicResult) TStructName() string {
  return "GetNodeBasicResult"
}

func (p *GetNodeBasicResult) ThriftName() string {
  return "GetNodeBasic_result"
}

func (p *GetNodeBasicResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetNodeBasicResult(%+v)", *p)
}

func (p *GetNodeBasicResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetNodeBasicResult)
  if !ok {
    return 0, false
  }
  if p.Success != data.Success {
    if p.Success < data.Success {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetNodeBasicResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *GetNodeBasicResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BYTE, 0),
    })
}

/**
 * Attributes:
 *  - _homeId
 *  - _nodeId
 */
type GetNodeGenericArgs struct {
  thrift.TStruct
  _homeId int32 "_homeId"; // 1
  _nodeId byte "_nodeId"; // 2
}

func NewGetNodeGenericArgs() *GetNodeGenericArgs {
  output := &GetNodeGenericArgs{
    TStruct:thrift.NewTStruct("GetNodeGeneric_args", []thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    }),
  }
  {
  }
  return output
}

func (p *GetNodeGenericArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_homeId" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_nodeId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNodeGenericArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1014, err1015 := iprot.ReadI32()
  if err1015 != nil { return thrift.NewTProtocolExceptionReadField(1, "_homeId", p.ThriftName(), err1015); }
  p._homeId = v1014
  return err
}

func (p *GetNodeGenericArgs) ReadField_homeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetNodeGenericArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1016, err1017 := iprot.ReadByte()
  if err1017 != nil { return thrift.NewTProtocolExceptionReadField(2, "_nodeId", p.ThriftName(), err1017); }
  p._nodeId = v1016
  return err
}

func (p *GetNodeGenericArgs) ReadField_nodeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *GetNodeGenericArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetNodeGeneric_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNodeGenericArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_homeId", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._homeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  return err
}

func (p *GetNodeGenericArgs) WriteField_homeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetNodeGenericArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_nodeId", thrift.BYTE, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._nodeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  return err
}

func (p *GetNodeGenericArgs) WriteField_nodeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *GetNodeGenericArgs) TStructName() string {
  return "GetNodeGenericArgs"
}

func (p *GetNodeGenericArgs) ThriftName() string {
  return "GetNodeGeneric_args"
}

func (p *GetNodeGenericArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetNodeGenericArgs(%+v)", *p)
}

func (p *GetNodeGenericArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetNodeGenericArgs)
  if !ok {
    return 0, false
  }
  if p._homeId != data._homeId {
    if p._homeId < data._homeId {
      return -1, true
    }
    return 1, true
  }
  if p._nodeId != data._nodeId {
    if p._nodeId < data._nodeId {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetNodeGenericArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._homeId
  case 2: return p._nodeId
  }
  return nil
}

func (p *GetNodeGenericArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    })
}

/**
 * Attributes:
 *  - Success
 */
type GetNodeGenericResult struct {
  thrift.TStruct
  Success byte "success"; // 0
}

func NewGetNodeGenericResult() *GetNodeGenericResult {
  output := &GetNodeGenericResult{
    TStruct:thrift.NewTStruct("GetNodeGeneric_result", []thrift.TField{
    thrift.NewTField("success", thrift.BYTE, 0),
    }),
  }
  {
  }
  return output
}

func (p *GetNodeGenericResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNodeGenericResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1018, err1019 := iprot.ReadByte()
  if err1019 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1019); }
  p.Success = v1018
  return err
}

func (p *GetNodeGenericResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetNodeGenericResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetNodeGeneric_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNodeGenericResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BYTE, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *GetNodeGenericResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetNodeGenericResult) TStructName() string {
  return "GetNodeGenericResult"
}

func (p *GetNodeGenericResult) ThriftName() string {
  return "GetNodeGeneric_result"
}

func (p *GetNodeGenericResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetNodeGenericResult(%+v)", *p)
}

func (p *GetNodeGenericResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetNodeGenericResult)
  if !ok {
    return 0, false
  }
  if p.Success != data.Success {
    if p.Success < data.Success {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetNodeGenericResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *GetNodeGenericResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BYTE, 0),
    })
}

/**
 * Attributes:
 *  - _homeId
 *  - _nodeId
 */
type GetNodeSpecificArgs struct {
  thrift.TStruct
  _homeId int32 "_homeId"; // 1
  _nodeId byte "_nodeId"; // 2
}

func NewGetNodeSpecificArgs() *GetNodeSpecificArgs {
  output := &GetNodeSpecificArgs{
    TStruct:thrift.NewTStruct("GetNodeSpecific_args", []thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    }),
  }
  {
  }
  return output
}

func (p *GetNodeSpecificArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_homeId" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_nodeId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNodeSpecificArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1020, err1021 := iprot.ReadI32()
  if err1021 != nil { return thrift.NewTProtocolExceptionReadField(1, "_homeId", p.ThriftName(), err1021); }
  p._homeId = v1020
  return err
}

func (p *GetNodeSpecificArgs) ReadField_homeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetNodeSpecificArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1022, err1023 := iprot.ReadByte()
  if err1023 != nil { return thrift.NewTProtocolExceptionReadField(2, "_nodeId", p.ThriftName(), err1023); }
  p._nodeId = v1022
  return err
}

func (p *GetNodeSpecificArgs) ReadField_nodeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *GetNodeSpecificArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetNodeSpecific_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNodeSpecificArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_homeId", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._homeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  return err
}

func (p *GetNodeSpecificArgs) WriteField_homeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetNodeSpecificArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_nodeId", thrift.BYTE, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._nodeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  return err
}

func (p *GetNodeSpecificArgs) WriteField_nodeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *GetNodeSpecificArgs) TStructName() string {
  return "GetNodeSpecificArgs"
}

func (p *GetNodeSpecificArgs) ThriftName() string {
  return "GetNodeSpecific_args"
}

func (p *GetNodeSpecificArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetNodeSpecificArgs(%+v)", *p)
}

func (p *GetNodeSpecificArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetNodeSpecificArgs)
  if !ok {
    return 0, false
  }
  if p._homeId != data._homeId {
    if p._homeId < data._homeId {
      return -1, true
    }
    return 1, true
  }
  if p._nodeId != data._nodeId {
    if p._nodeId < data._nodeId {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetNodeSpecificArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._homeId
  case 2: return p._nodeId
  }
  return nil
}

func (p *GetNodeSpecificArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    })
}

/**
 * Attributes:
 *  - Success
 */
type GetNodeSpecificResult struct {
  thrift.TStruct
  Success byte "success"; // 0
}

func NewGetNodeSpecificResult() *GetNodeSpecificResult {
  output := &GetNodeSpecificResult{
    TStruct:thrift.NewTStruct("GetNodeSpecific_result", []thrift.TField{
    thrift.NewTField("success", thrift.BYTE, 0),
    }),
  }
  {
  }
  return output
}

func (p *GetNodeSpecificResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNodeSpecificResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1024, err1025 := iprot.ReadByte()
  if err1025 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1025); }
  p.Success = v1024
  return err
}

func (p *GetNodeSpecificResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetNodeSpecificResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetNodeSpecific_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNodeSpecificResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BYTE, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *GetNodeSpecificResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetNodeSpecificResult) TStructName() string {
  return "GetNodeSpecificResult"
}

func (p *GetNodeSpecificResult) ThriftName() string {
  return "GetNodeSpecific_result"
}

func (p *GetNodeSpecificResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetNodeSpecificResult(%+v)", *p)
}

func (p *GetNodeSpecificResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetNodeSpecificResult)
  if !ok {
    return 0, false
  }
  if p.Success != data.Success {
    if p.Success < data.Success {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetNodeSpecificResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *GetNodeSpecificResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BYTE, 0),
    })
}

/**
 * Attributes:
 *  - _homeId
 *  - _nodeId
 */
type GetNodeTypeArgs struct {
  thrift.TStruct
  _homeId int32 "_homeId"; // 1
  _nodeId byte "_nodeId"; // 2
}

func NewGetNodeTypeArgs() *GetNodeTypeArgs {
  output := &GetNodeTypeArgs{
    TStruct:thrift.NewTStruct("GetNodeType_args", []thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    }),
  }
  {
  }
  return output
}

func (p *GetNodeTypeArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_homeId" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_nodeId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNodeTypeArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1026, err1027 := iprot.ReadI32()
  if err1027 != nil { return thrift.NewTProtocolExceptionReadField(1, "_homeId", p.ThriftName(), err1027); }
  p._homeId = v1026
  return err
}

func (p *GetNodeTypeArgs) ReadField_homeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetNodeTypeArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1028, err1029 := iprot.ReadByte()
  if err1029 != nil { return thrift.NewTProtocolExceptionReadField(2, "_nodeId", p.ThriftName(), err1029); }
  p._nodeId = v1028
  return err
}

func (p *GetNodeTypeArgs) ReadField_nodeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *GetNodeTypeArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetNodeType_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNodeTypeArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_homeId", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._homeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  return err
}

func (p *GetNodeTypeArgs) WriteField_homeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetNodeTypeArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_nodeId", thrift.BYTE, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._nodeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  return err
}

func (p *GetNodeTypeArgs) WriteField_nodeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *GetNodeTypeArgs) TStructName() string {
  return "GetNodeTypeArgs"
}

func (p *GetNodeTypeArgs) ThriftName() string {
  return "GetNodeType_args"
}

func (p *GetNodeTypeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetNodeTypeArgs(%+v)", *p)
}

func (p *GetNodeTypeArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetNodeTypeArgs)
  if !ok {
    return 0, false
  }
  if p._homeId != data._homeId {
    if p._homeId < data._homeId {
      return -1, true
    }
    return 1, true
  }
  if p._nodeId != data._nodeId {
    if p._nodeId < data._nodeId {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetNodeTypeArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._homeId
  case 2: return p._nodeId
  }
  return nil
}

func (p *GetNodeTypeArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    })
}

/**
 * Attributes:
 *  - Success
 */
type GetNodeTypeResult struct {
  thrift.TStruct
  Success string "success"; // 0
}

func NewGetNodeTypeResult() *GetNodeTypeResult {
  output := &GetNodeTypeResult{
    TStruct:thrift.NewTStruct("GetNodeType_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRING, 0),
    }),
  }
  {
  }
  return output
}

func (p *GetNodeTypeResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNodeTypeResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1030, err1031 := iprot.ReadString()
  if err1031 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1031); }
  p.Success = v1030
  return err
}

func (p *GetNodeTypeResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetNodeTypeResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetNodeType_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNodeTypeResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.STRING, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *GetNodeTypeResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetNodeTypeResult) TStructName() string {
  return "GetNodeTypeResult"
}

func (p *GetNodeTypeResult) ThriftName() string {
  return "GetNodeType_result"
}

func (p *GetNodeTypeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetNodeTypeResult(%+v)", *p)
}

func (p *GetNodeTypeResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetNodeTypeResult)
  if !ok {
    return 0, false
  }
  if p.Success != data.Success {
    if p.Success < data.Success {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetNodeTypeResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *GetNodeTypeResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRING, 0),
    })
}

/**
 * Attributes:
 *  - _homeId
 *  - _nodeId
 */
type GetNodeNeighborsArgs struct {
  thrift.TStruct
  _homeId int32 "_homeId"; // 1
  _nodeId byte "_nodeId"; // 2
}

func NewGetNodeNeighborsArgs() *GetNodeNeighborsArgs {
  output := &GetNodeNeighborsArgs{
    TStruct:thrift.NewTStruct("GetNodeNeighbors_args", []thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    }),
  }
  {
  }
  return output
}

func (p *GetNodeNeighborsArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_homeId" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_nodeId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNodeNeighborsArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1032, err1033 := iprot.ReadI32()
  if err1033 != nil { return thrift.NewTProtocolExceptionReadField(1, "_homeId", p.ThriftName(), err1033); }
  p._homeId = v1032
  return err
}

func (p *GetNodeNeighborsArgs) ReadField_homeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetNodeNeighborsArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1034, err1035 := iprot.ReadByte()
  if err1035 != nil { return thrift.NewTProtocolExceptionReadField(2, "_nodeId", p.ThriftName(), err1035); }
  p._nodeId = v1034
  return err
}

func (p *GetNodeNeighborsArgs) ReadField_nodeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *GetNodeNeighborsArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetNodeNeighbors_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNodeNeighborsArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_homeId", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._homeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  return err
}

func (p *GetNodeNeighborsArgs) WriteField_homeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetNodeNeighborsArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_nodeId", thrift.BYTE, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._nodeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  return err
}

func (p *GetNodeNeighborsArgs) WriteField_nodeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *GetNodeNeighborsArgs) TStructName() string {
  return "GetNodeNeighborsArgs"
}

func (p *GetNodeNeighborsArgs) ThriftName() string {
  return "GetNodeNeighbors_args"
}

func (p *GetNodeNeighborsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetNodeNeighborsArgs(%+v)", *p)
}

func (p *GetNodeNeighborsArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetNodeNeighborsArgs)
  if !ok {
    return 0, false
  }
  if p._homeId != data._homeId {
    if p._homeId < data._homeId {
      return -1, true
    }
    return 1, true
  }
  if p._nodeId != data._nodeId {
    if p._nodeId < data._nodeId {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetNodeNeighborsArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._homeId
  case 2: return p._nodeId
  }
  return nil
}

func (p *GetNodeNeighborsArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    })
}

/**
 * Attributes:
 *  - Success
 */
type GetNodeNeighborsResult struct {
  thrift.TStruct
  Success *UInt32ListByte "success"; // 0
}

func NewGetNodeNeighborsResult() *GetNodeNeighborsResult {
  output := &GetNodeNeighborsResult{
    TStruct:thrift.NewTStruct("GetNodeNeighbors_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    }),
  }
  {
  }
  return output
}

func (p *GetNodeNeighborsResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNodeNeighborsResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Success = NewUInt32ListByte()
  err1038 := p.Success.Read(iprot)
  if err1038 != nil { return thrift.NewTProtocolExceptionReadStruct("p.SuccessUInt32_ListByte", err1038); }
  return err
}

func (p *GetNodeNeighborsResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetNodeNeighborsResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetNodeNeighbors_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNodeNeighborsResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = p.Success.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("UInt32_ListByte", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *GetNodeNeighborsResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetNodeNeighborsResult) TStructName() string {
  return "GetNodeNeighborsResult"
}

func (p *GetNodeNeighborsResult) ThriftName() string {
  return "GetNodeNeighbors_result"
}

func (p *GetNodeNeighborsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetNodeNeighborsResult(%+v)", *p)
}

func (p *GetNodeNeighborsResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetNodeNeighborsResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetNodeNeighborsResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *GetNodeNeighborsResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    })
}

/**
 * Attributes:
 *  - _homeId
 *  - _nodeId
 */
type GetNodeManufacturerNameArgs struct {
  thrift.TStruct
  _homeId int32 "_homeId"; // 1
  _nodeId byte "_nodeId"; // 2
}

func NewGetNodeManufacturerNameArgs() *GetNodeManufacturerNameArgs {
  output := &GetNodeManufacturerNameArgs{
    TStruct:thrift.NewTStruct("GetNodeManufacturerName_args", []thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    }),
  }
  {
  }
  return output
}

func (p *GetNodeManufacturerNameArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_homeId" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_nodeId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNodeManufacturerNameArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1039, err1040 := iprot.ReadI32()
  if err1040 != nil { return thrift.NewTProtocolExceptionReadField(1, "_homeId", p.ThriftName(), err1040); }
  p._homeId = v1039
  return err
}

func (p *GetNodeManufacturerNameArgs) ReadField_homeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetNodeManufacturerNameArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1041, err1042 := iprot.ReadByte()
  if err1042 != nil { return thrift.NewTProtocolExceptionReadField(2, "_nodeId", p.ThriftName(), err1042); }
  p._nodeId = v1041
  return err
}

func (p *GetNodeManufacturerNameArgs) ReadField_nodeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *GetNodeManufacturerNameArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetNodeManufacturerName_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNodeManufacturerNameArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_homeId", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._homeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  return err
}

func (p *GetNodeManufacturerNameArgs) WriteField_homeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetNodeManufacturerNameArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_nodeId", thrift.BYTE, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._nodeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  return err
}

func (p *GetNodeManufacturerNameArgs) WriteField_nodeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *GetNodeManufacturerNameArgs) TStructName() string {
  return "GetNodeManufacturerNameArgs"
}

func (p *GetNodeManufacturerNameArgs) ThriftName() string {
  return "GetNodeManufacturerName_args"
}

func (p *GetNodeManufacturerNameArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetNodeManufacturerNameArgs(%+v)", *p)
}

func (p *GetNodeManufacturerNameArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetNodeManufacturerNameArgs)
  if !ok {
    return 0, false
  }
  if p._homeId != data._homeId {
    if p._homeId < data._homeId {
      return -1, true
    }
    return 1, true
  }
  if p._nodeId != data._nodeId {
    if p._nodeId < data._nodeId {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetNodeManufacturerNameArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._homeId
  case 2: return p._nodeId
  }
  return nil
}

func (p *GetNodeManufacturerNameArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    })
}

/**
 * Attributes:
 *  - Success
 */
type GetNodeManufacturerNameResult struct {
  thrift.TStruct
  Success string "success"; // 0
}

func NewGetNodeManufacturerNameResult() *GetNodeManufacturerNameResult {
  output := &GetNodeManufacturerNameResult{
    TStruct:thrift.NewTStruct("GetNodeManufacturerName_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRING, 0),
    }),
  }
  {
  }
  return output
}

func (p *GetNodeManufacturerNameResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNodeManufacturerNameResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1043, err1044 := iprot.ReadString()
  if err1044 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1044); }
  p.Success = v1043
  return err
}

func (p *GetNodeManufacturerNameResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetNodeManufacturerNameResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetNodeManufacturerName_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNodeManufacturerNameResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.STRING, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *GetNodeManufacturerNameResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetNodeManufacturerNameResult) TStructName() string {
  return "GetNodeManufacturerNameResult"
}

func (p *GetNodeManufacturerNameResult) ThriftName() string {
  return "GetNodeManufacturerName_result"
}

func (p *GetNodeManufacturerNameResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetNodeManufacturerNameResult(%+v)", *p)
}

func (p *GetNodeManufacturerNameResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetNodeManufacturerNameResult)
  if !ok {
    return 0, false
  }
  if p.Success != data.Success {
    if p.Success < data.Success {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetNodeManufacturerNameResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *GetNodeManufacturerNameResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRING, 0),
    })
}

/**
 * Attributes:
 *  - _homeId
 *  - _nodeId
 */
type GetNodeProductNameArgs struct {
  thrift.TStruct
  _homeId int32 "_homeId"; // 1
  _nodeId byte "_nodeId"; // 2
}

func NewGetNodeProductNameArgs() *GetNodeProductNameArgs {
  output := &GetNodeProductNameArgs{
    TStruct:thrift.NewTStruct("GetNodeProductName_args", []thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    }),
  }
  {
  }
  return output
}

func (p *GetNodeProductNameArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_homeId" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_nodeId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNodeProductNameArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1045, err1046 := iprot.ReadI32()
  if err1046 != nil { return thrift.NewTProtocolExceptionReadField(1, "_homeId", p.ThriftName(), err1046); }
  p._homeId = v1045
  return err
}

func (p *GetNodeProductNameArgs) ReadField_homeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetNodeProductNameArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1047, err1048 := iprot.ReadByte()
  if err1048 != nil { return thrift.NewTProtocolExceptionReadField(2, "_nodeId", p.ThriftName(), err1048); }
  p._nodeId = v1047
  return err
}

func (p *GetNodeProductNameArgs) ReadField_nodeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *GetNodeProductNameArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetNodeProductName_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNodeProductNameArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_homeId", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._homeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  return err
}

func (p *GetNodeProductNameArgs) WriteField_homeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetNodeProductNameArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_nodeId", thrift.BYTE, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._nodeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  return err
}

func (p *GetNodeProductNameArgs) WriteField_nodeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *GetNodeProductNameArgs) TStructName() string {
  return "GetNodeProductNameArgs"
}

func (p *GetNodeProductNameArgs) ThriftName() string {
  return "GetNodeProductName_args"
}

func (p *GetNodeProductNameArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetNodeProductNameArgs(%+v)", *p)
}

func (p *GetNodeProductNameArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetNodeProductNameArgs)
  if !ok {
    return 0, false
  }
  if p._homeId != data._homeId {
    if p._homeId < data._homeId {
      return -1, true
    }
    return 1, true
  }
  if p._nodeId != data._nodeId {
    if p._nodeId < data._nodeId {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetNodeProductNameArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._homeId
  case 2: return p._nodeId
  }
  return nil
}

func (p *GetNodeProductNameArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    })
}

/**
 * Attributes:
 *  - Success
 */
type GetNodeProductNameResult struct {
  thrift.TStruct
  Success string "success"; // 0
}

func NewGetNodeProductNameResult() *GetNodeProductNameResult {
  output := &GetNodeProductNameResult{
    TStruct:thrift.NewTStruct("GetNodeProductName_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRING, 0),
    }),
  }
  {
  }
  return output
}

func (p *GetNodeProductNameResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNodeProductNameResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1049, err1050 := iprot.ReadString()
  if err1050 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1050); }
  p.Success = v1049
  return err
}

func (p *GetNodeProductNameResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetNodeProductNameResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetNodeProductName_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNodeProductNameResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.STRING, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *GetNodeProductNameResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetNodeProductNameResult) TStructName() string {
  return "GetNodeProductNameResult"
}

func (p *GetNodeProductNameResult) ThriftName() string {
  return "GetNodeProductName_result"
}

func (p *GetNodeProductNameResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetNodeProductNameResult(%+v)", *p)
}

func (p *GetNodeProductNameResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetNodeProductNameResult)
  if !ok {
    return 0, false
  }
  if p.Success != data.Success {
    if p.Success < data.Success {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetNodeProductNameResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *GetNodeProductNameResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRING, 0),
    })
}

/**
 * Attributes:
 *  - _homeId
 *  - _nodeId
 */
type GetNodeNameArgs struct {
  thrift.TStruct
  _homeId int32 "_homeId"; // 1
  _nodeId byte "_nodeId"; // 2
}

func NewGetNodeNameArgs() *GetNodeNameArgs {
  output := &GetNodeNameArgs{
    TStruct:thrift.NewTStruct("GetNodeName_args", []thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    }),
  }
  {
  }
  return output
}

func (p *GetNodeNameArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_homeId" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_nodeId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNodeNameArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1051, err1052 := iprot.ReadI32()
  if err1052 != nil { return thrift.NewTProtocolExceptionReadField(1, "_homeId", p.ThriftName(), err1052); }
  p._homeId = v1051
  return err
}

func (p *GetNodeNameArgs) ReadField_homeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetNodeNameArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1053, err1054 := iprot.ReadByte()
  if err1054 != nil { return thrift.NewTProtocolExceptionReadField(2, "_nodeId", p.ThriftName(), err1054); }
  p._nodeId = v1053
  return err
}

func (p *GetNodeNameArgs) ReadField_nodeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *GetNodeNameArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetNodeName_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNodeNameArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_homeId", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._homeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  return err
}

func (p *GetNodeNameArgs) WriteField_homeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetNodeNameArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_nodeId", thrift.BYTE, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._nodeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  return err
}

func (p *GetNodeNameArgs) WriteField_nodeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *GetNodeNameArgs) TStructName() string {
  return "GetNodeNameArgs"
}

func (p *GetNodeNameArgs) ThriftName() string {
  return "GetNodeName_args"
}

func (p *GetNodeNameArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetNodeNameArgs(%+v)", *p)
}

func (p *GetNodeNameArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetNodeNameArgs)
  if !ok {
    return 0, false
  }
  if p._homeId != data._homeId {
    if p._homeId < data._homeId {
      return -1, true
    }
    return 1, true
  }
  if p._nodeId != data._nodeId {
    if p._nodeId < data._nodeId {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetNodeNameArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._homeId
  case 2: return p._nodeId
  }
  return nil
}

func (p *GetNodeNameArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    })
}

/**
 * Attributes:
 *  - Success
 */
type GetNodeNameResult struct {
  thrift.TStruct
  Success string "success"; // 0
}

func NewGetNodeNameResult() *GetNodeNameResult {
  output := &GetNodeNameResult{
    TStruct:thrift.NewTStruct("GetNodeName_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRING, 0),
    }),
  }
  {
  }
  return output
}

func (p *GetNodeNameResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNodeNameResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1055, err1056 := iprot.ReadString()
  if err1056 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1056); }
  p.Success = v1055
  return err
}

func (p *GetNodeNameResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetNodeNameResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetNodeName_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNodeNameResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.STRING, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *GetNodeNameResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetNodeNameResult) TStructName() string {
  return "GetNodeNameResult"
}

func (p *GetNodeNameResult) ThriftName() string {
  return "GetNodeName_result"
}

func (p *GetNodeNameResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetNodeNameResult(%+v)", *p)
}

func (p *GetNodeNameResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetNodeNameResult)
  if !ok {
    return 0, false
  }
  if p.Success != data.Success {
    if p.Success < data.Success {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetNodeNameResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *GetNodeNameResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRING, 0),
    })
}

/**
 * Attributes:
 *  - _homeId
 *  - _nodeId
 */
type GetNodeLocationArgs struct {
  thrift.TStruct
  _homeId int32 "_homeId"; // 1
  _nodeId byte "_nodeId"; // 2
}

func NewGetNodeLocationArgs() *GetNodeLocationArgs {
  output := &GetNodeLocationArgs{
    TStruct:thrift.NewTStruct("GetNodeLocation_args", []thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    }),
  }
  {
  }
  return output
}

func (p *GetNodeLocationArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_homeId" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_nodeId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNodeLocationArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1057, err1058 := iprot.ReadI32()
  if err1058 != nil { return thrift.NewTProtocolExceptionReadField(1, "_homeId", p.ThriftName(), err1058); }
  p._homeId = v1057
  return err
}

func (p *GetNodeLocationArgs) ReadField_homeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetNodeLocationArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1059, err1060 := iprot.ReadByte()
  if err1060 != nil { return thrift.NewTProtocolExceptionReadField(2, "_nodeId", p.ThriftName(), err1060); }
  p._nodeId = v1059
  return err
}

func (p *GetNodeLocationArgs) ReadField_nodeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *GetNodeLocationArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetNodeLocation_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNodeLocationArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_homeId", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._homeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  return err
}

func (p *GetNodeLocationArgs) WriteField_homeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetNodeLocationArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_nodeId", thrift.BYTE, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._nodeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  return err
}

func (p *GetNodeLocationArgs) WriteField_nodeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *GetNodeLocationArgs) TStructName() string {
  return "GetNodeLocationArgs"
}

func (p *GetNodeLocationArgs) ThriftName() string {
  return "GetNodeLocation_args"
}

func (p *GetNodeLocationArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetNodeLocationArgs(%+v)", *p)
}

func (p *GetNodeLocationArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetNodeLocationArgs)
  if !ok {
    return 0, false
  }
  if p._homeId != data._homeId {
    if p._homeId < data._homeId {
      return -1, true
    }
    return 1, true
  }
  if p._nodeId != data._nodeId {
    if p._nodeId < data._nodeId {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetNodeLocationArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._homeId
  case 2: return p._nodeId
  }
  return nil
}

func (p *GetNodeLocationArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    })
}

/**
 * Attributes:
 *  - Success
 */
type GetNodeLocationResult struct {
  thrift.TStruct
  Success string "success"; // 0
}

func NewGetNodeLocationResult() *GetNodeLocationResult {
  output := &GetNodeLocationResult{
    TStruct:thrift.NewTStruct("GetNodeLocation_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRING, 0),
    }),
  }
  {
  }
  return output
}

func (p *GetNodeLocationResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNodeLocationResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1061, err1062 := iprot.ReadString()
  if err1062 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1062); }
  p.Success = v1061
  return err
}

func (p *GetNodeLocationResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetNodeLocationResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetNodeLocation_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNodeLocationResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.STRING, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *GetNodeLocationResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetNodeLocationResult) TStructName() string {
  return "GetNodeLocationResult"
}

func (p *GetNodeLocationResult) ThriftName() string {
  return "GetNodeLocation_result"
}

func (p *GetNodeLocationResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetNodeLocationResult(%+v)", *p)
}

func (p *GetNodeLocationResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetNodeLocationResult)
  if !ok {
    return 0, false
  }
  if p.Success != data.Success {
    if p.Success < data.Success {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetNodeLocationResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *GetNodeLocationResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRING, 0),
    })
}

/**
 * Attributes:
 *  - _homeId
 *  - _nodeId
 */
type GetNodeManufacturerIdArgs struct {
  thrift.TStruct
  _homeId int32 "_homeId"; // 1
  _nodeId byte "_nodeId"; // 2
}

func NewGetNodeManufacturerIdArgs() *GetNodeManufacturerIdArgs {
  output := &GetNodeManufacturerIdArgs{
    TStruct:thrift.NewTStruct("GetNodeManufacturerId_args", []thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    }),
  }
  {
  }
  return output
}

func (p *GetNodeManufacturerIdArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_homeId" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_nodeId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNodeManufacturerIdArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1063, err1064 := iprot.ReadI32()
  if err1064 != nil { return thrift.NewTProtocolExceptionReadField(1, "_homeId", p.ThriftName(), err1064); }
  p._homeId = v1063
  return err
}

func (p *GetNodeManufacturerIdArgs) ReadField_homeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetNodeManufacturerIdArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1065, err1066 := iprot.ReadByte()
  if err1066 != nil { return thrift.NewTProtocolExceptionReadField(2, "_nodeId", p.ThriftName(), err1066); }
  p._nodeId = v1065
  return err
}

func (p *GetNodeManufacturerIdArgs) ReadField_nodeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *GetNodeManufacturerIdArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetNodeManufacturerId_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNodeManufacturerIdArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_homeId", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._homeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  return err
}

func (p *GetNodeManufacturerIdArgs) WriteField_homeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetNodeManufacturerIdArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_nodeId", thrift.BYTE, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._nodeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  return err
}

func (p *GetNodeManufacturerIdArgs) WriteField_nodeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *GetNodeManufacturerIdArgs) TStructName() string {
  return "GetNodeManufacturerIdArgs"
}

func (p *GetNodeManufacturerIdArgs) ThriftName() string {
  return "GetNodeManufacturerId_args"
}

func (p *GetNodeManufacturerIdArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetNodeManufacturerIdArgs(%+v)", *p)
}

func (p *GetNodeManufacturerIdArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetNodeManufacturerIdArgs)
  if !ok {
    return 0, false
  }
  if p._homeId != data._homeId {
    if p._homeId < data._homeId {
      return -1, true
    }
    return 1, true
  }
  if p._nodeId != data._nodeId {
    if p._nodeId < data._nodeId {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetNodeManufacturerIdArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._homeId
  case 2: return p._nodeId
  }
  return nil
}

func (p *GetNodeManufacturerIdArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    })
}

/**
 * Attributes:
 *  - Success
 */
type GetNodeManufacturerIdResult struct {
  thrift.TStruct
  Success string "success"; // 0
}

func NewGetNodeManufacturerIdResult() *GetNodeManufacturerIdResult {
  output := &GetNodeManufacturerIdResult{
    TStruct:thrift.NewTStruct("GetNodeManufacturerId_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRING, 0),
    }),
  }
  {
  }
  return output
}

func (p *GetNodeManufacturerIdResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNodeManufacturerIdResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1067, err1068 := iprot.ReadString()
  if err1068 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1068); }
  p.Success = v1067
  return err
}

func (p *GetNodeManufacturerIdResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetNodeManufacturerIdResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetNodeManufacturerId_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNodeManufacturerIdResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.STRING, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *GetNodeManufacturerIdResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetNodeManufacturerIdResult) TStructName() string {
  return "GetNodeManufacturerIdResult"
}

func (p *GetNodeManufacturerIdResult) ThriftName() string {
  return "GetNodeManufacturerId_result"
}

func (p *GetNodeManufacturerIdResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetNodeManufacturerIdResult(%+v)", *p)
}

func (p *GetNodeManufacturerIdResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetNodeManufacturerIdResult)
  if !ok {
    return 0, false
  }
  if p.Success != data.Success {
    if p.Success < data.Success {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetNodeManufacturerIdResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *GetNodeManufacturerIdResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRING, 0),
    })
}

/**
 * Attributes:
 *  - _homeId
 *  - _nodeId
 */
type GetNodeProductTypeArgs struct {
  thrift.TStruct
  _homeId int32 "_homeId"; // 1
  _nodeId byte "_nodeId"; // 2
}

func NewGetNodeProductTypeArgs() *GetNodeProductTypeArgs {
  output := &GetNodeProductTypeArgs{
    TStruct:thrift.NewTStruct("GetNodeProductType_args", []thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    }),
  }
  {
  }
  return output
}

func (p *GetNodeProductTypeArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_homeId" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_nodeId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNodeProductTypeArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1069, err1070 := iprot.ReadI32()
  if err1070 != nil { return thrift.NewTProtocolExceptionReadField(1, "_homeId", p.ThriftName(), err1070); }
  p._homeId = v1069
  return err
}

func (p *GetNodeProductTypeArgs) ReadField_homeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetNodeProductTypeArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1071, err1072 := iprot.ReadByte()
  if err1072 != nil { return thrift.NewTProtocolExceptionReadField(2, "_nodeId", p.ThriftName(), err1072); }
  p._nodeId = v1071
  return err
}

func (p *GetNodeProductTypeArgs) ReadField_nodeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *GetNodeProductTypeArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetNodeProductType_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNodeProductTypeArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_homeId", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._homeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  return err
}

func (p *GetNodeProductTypeArgs) WriteField_homeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetNodeProductTypeArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_nodeId", thrift.BYTE, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._nodeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  return err
}

func (p *GetNodeProductTypeArgs) WriteField_nodeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *GetNodeProductTypeArgs) TStructName() string {
  return "GetNodeProductTypeArgs"
}

func (p *GetNodeProductTypeArgs) ThriftName() string {
  return "GetNodeProductType_args"
}

func (p *GetNodeProductTypeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetNodeProductTypeArgs(%+v)", *p)
}

func (p *GetNodeProductTypeArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetNodeProductTypeArgs)
  if !ok {
    return 0, false
  }
  if p._homeId != data._homeId {
    if p._homeId < data._homeId {
      return -1, true
    }
    return 1, true
  }
  if p._nodeId != data._nodeId {
    if p._nodeId < data._nodeId {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetNodeProductTypeArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._homeId
  case 2: return p._nodeId
  }
  return nil
}

func (p *GetNodeProductTypeArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    })
}

/**
 * Attributes:
 *  - Success
 */
type GetNodeProductTypeResult struct {
  thrift.TStruct
  Success string "success"; // 0
}

func NewGetNodeProductTypeResult() *GetNodeProductTypeResult {
  output := &GetNodeProductTypeResult{
    TStruct:thrift.NewTStruct("GetNodeProductType_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRING, 0),
    }),
  }
  {
  }
  return output
}

func (p *GetNodeProductTypeResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNodeProductTypeResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1073, err1074 := iprot.ReadString()
  if err1074 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1074); }
  p.Success = v1073
  return err
}

func (p *GetNodeProductTypeResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetNodeProductTypeResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetNodeProductType_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNodeProductTypeResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.STRING, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *GetNodeProductTypeResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetNodeProductTypeResult) TStructName() string {
  return "GetNodeProductTypeResult"
}

func (p *GetNodeProductTypeResult) ThriftName() string {
  return "GetNodeProductType_result"
}

func (p *GetNodeProductTypeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetNodeProductTypeResult(%+v)", *p)
}

func (p *GetNodeProductTypeResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetNodeProductTypeResult)
  if !ok {
    return 0, false
  }
  if p.Success != data.Success {
    if p.Success < data.Success {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetNodeProductTypeResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *GetNodeProductTypeResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRING, 0),
    })
}

/**
 * Attributes:
 *  - _homeId
 *  - _nodeId
 */
type GetNodeProductIdArgs struct {
  thrift.TStruct
  _homeId int32 "_homeId"; // 1
  _nodeId byte "_nodeId"; // 2
}

func NewGetNodeProductIdArgs() *GetNodeProductIdArgs {
  output := &GetNodeProductIdArgs{
    TStruct:thrift.NewTStruct("GetNodeProductId_args", []thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    }),
  }
  {
  }
  return output
}

func (p *GetNodeProductIdArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_homeId" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_nodeId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNodeProductIdArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1075, err1076 := iprot.ReadI32()
  if err1076 != nil { return thrift.NewTProtocolExceptionReadField(1, "_homeId", p.ThriftName(), err1076); }
  p._homeId = v1075
  return err
}

func (p *GetNodeProductIdArgs) ReadField_homeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetNodeProductIdArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1077, err1078 := iprot.ReadByte()
  if err1078 != nil { return thrift.NewTProtocolExceptionReadField(2, "_nodeId", p.ThriftName(), err1078); }
  p._nodeId = v1077
  return err
}

func (p *GetNodeProductIdArgs) ReadField_nodeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *GetNodeProductIdArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetNodeProductId_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNodeProductIdArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_homeId", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._homeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  return err
}

func (p *GetNodeProductIdArgs) WriteField_homeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetNodeProductIdArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_nodeId", thrift.BYTE, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._nodeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  return err
}

func (p *GetNodeProductIdArgs) WriteField_nodeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *GetNodeProductIdArgs) TStructName() string {
  return "GetNodeProductIdArgs"
}

func (p *GetNodeProductIdArgs) ThriftName() string {
  return "GetNodeProductId_args"
}

func (p *GetNodeProductIdArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetNodeProductIdArgs(%+v)", *p)
}

func (p *GetNodeProductIdArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetNodeProductIdArgs)
  if !ok {
    return 0, false
  }
  if p._homeId != data._homeId {
    if p._homeId < data._homeId {
      return -1, true
    }
    return 1, true
  }
  if p._nodeId != data._nodeId {
    if p._nodeId < data._nodeId {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetNodeProductIdArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._homeId
  case 2: return p._nodeId
  }
  return nil
}

func (p *GetNodeProductIdArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    })
}

/**
 * Attributes:
 *  - Success
 */
type GetNodeProductIdResult struct {
  thrift.TStruct
  Success string "success"; // 0
}

func NewGetNodeProductIdResult() *GetNodeProductIdResult {
  output := &GetNodeProductIdResult{
    TStruct:thrift.NewTStruct("GetNodeProductId_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRING, 0),
    }),
  }
  {
  }
  return output
}

func (p *GetNodeProductIdResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNodeProductIdResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1079, err1080 := iprot.ReadString()
  if err1080 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1080); }
  p.Success = v1079
  return err
}

func (p *GetNodeProductIdResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetNodeProductIdResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetNodeProductId_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNodeProductIdResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.STRING, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *GetNodeProductIdResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetNodeProductIdResult) TStructName() string {
  return "GetNodeProductIdResult"
}

func (p *GetNodeProductIdResult) ThriftName() string {
  return "GetNodeProductId_result"
}

func (p *GetNodeProductIdResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetNodeProductIdResult(%+v)", *p)
}

func (p *GetNodeProductIdResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetNodeProductIdResult)
  if !ok {
    return 0, false
  }
  if p.Success != data.Success {
    if p.Success < data.Success {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetNodeProductIdResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *GetNodeProductIdResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRING, 0),
    })
}

/**
 * Attributes:
 *  - _homeId
 *  - _nodeId
 *  - _manufacturerName
 */
type SetNodeManufacturerNameArgs struct {
  thrift.TStruct
  _homeId int32 "_homeId"; // 1
  _nodeId byte "_nodeId"; // 2
  _manufacturerName string "_manufacturerName"; // 3
}

func NewSetNodeManufacturerNameArgs() *SetNodeManufacturerNameArgs {
  output := &SetNodeManufacturerNameArgs{
    TStruct:thrift.NewTStruct("SetNodeManufacturerName_args", []thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    thrift.NewTField("_manufacturerName", thrift.STRING, 3),
    }),
  }
  {
  }
  return output
}

func (p *SetNodeManufacturerNameArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_homeId" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_nodeId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "_manufacturerName" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SetNodeManufacturerNameArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1081, err1082 := iprot.ReadI32()
  if err1082 != nil { return thrift.NewTProtocolExceptionReadField(1, "_homeId", p.ThriftName(), err1082); }
  p._homeId = v1081
  return err
}

func (p *SetNodeManufacturerNameArgs) ReadField_homeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *SetNodeManufacturerNameArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1083, err1084 := iprot.ReadByte()
  if err1084 != nil { return thrift.NewTProtocolExceptionReadField(2, "_nodeId", p.ThriftName(), err1084); }
  p._nodeId = v1083
  return err
}

func (p *SetNodeManufacturerNameArgs) ReadField_nodeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *SetNodeManufacturerNameArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1085, err1086 := iprot.ReadString()
  if err1086 != nil { return thrift.NewTProtocolExceptionReadField(3, "_manufacturerName", p.ThriftName(), err1086); }
  p._manufacturerName = v1085
  return err
}

func (p *SetNodeManufacturerNameArgs) ReadField_manufacturerName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *SetNodeManufacturerNameArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SetNodeManufacturerName_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SetNodeManufacturerNameArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_homeId", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._homeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  return err
}

func (p *SetNodeManufacturerNameArgs) WriteField_homeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *SetNodeManufacturerNameArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_nodeId", thrift.BYTE, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._nodeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  return err
}

func (p *SetNodeManufacturerNameArgs) WriteField_nodeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *SetNodeManufacturerNameArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_manufacturerName", thrift.STRING, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_manufacturerName", p.ThriftName(), err); }
  err = oprot.WriteString(string(p._manufacturerName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_manufacturerName", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_manufacturerName", p.ThriftName(), err); }
  return err
}

func (p *SetNodeManufacturerNameArgs) WriteField_manufacturerName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *SetNodeManufacturerNameArgs) TStructName() string {
  return "SetNodeManufacturerNameArgs"
}

func (p *SetNodeManufacturerNameArgs) ThriftName() string {
  return "SetNodeManufacturerName_args"
}

func (p *SetNodeManufacturerNameArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetNodeManufacturerNameArgs(%+v)", *p)
}

func (p *SetNodeManufacturerNameArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SetNodeManufacturerNameArgs)
  if !ok {
    return 0, false
  }
  if p._homeId != data._homeId {
    if p._homeId < data._homeId {
      return -1, true
    }
    return 1, true
  }
  if p._nodeId != data._nodeId {
    if p._nodeId < data._nodeId {
      return -1, true
    }
    return 1, true
  }
  if p._manufacturerName != data._manufacturerName {
    if p._manufacturerName < data._manufacturerName {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *SetNodeManufacturerNameArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._homeId
  case 2: return p._nodeId
  case 3: return p._manufacturerName
  }
  return nil
}

func (p *SetNodeManufacturerNameArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    thrift.NewTField("_manufacturerName", thrift.STRING, 3),
    })
}

type SetNodeManufacturerNameResult struct {
  thrift.TStruct
}

func NewSetNodeManufacturerNameResult() *SetNodeManufacturerNameResult {
  output := &SetNodeManufacturerNameResult{
    TStruct:thrift.NewTStruct("SetNodeManufacturerName_result", []thrift.TField{
    }),
  }
  {
  }
  return output
}

func (p *SetNodeManufacturerNameResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    err = iprot.Skip(fieldTypeId)
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SetNodeManufacturerNameResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SetNodeManufacturerName_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SetNodeManufacturerNameResult) TStructName() string {
  return "SetNodeManufacturerNameResult"
}

func (p *SetNodeManufacturerNameResult) ThriftName() string {
  return "SetNodeManufacturerName_result"
}

func (p *SetNodeManufacturerNameResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetNodeManufacturerNameResult(%+v)", *p)
}

func (p *SetNodeManufacturerNameResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  _, ok := other.(*SetNodeManufacturerNameResult)
  if !ok {
    return 0, false
  }
  return 0, true
}

func (p *SetNodeManufacturerNameResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  }
  return nil
}

func (p *SetNodeManufacturerNameResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    })
}

/**
 * Attributes:
 *  - _homeId
 *  - _nodeId
 *  - _productName
 */
type SetNodeProductNameArgs struct {
  thrift.TStruct
  _homeId int32 "_homeId"; // 1
  _nodeId byte "_nodeId"; // 2
  _productName string "_productName"; // 3
}

func NewSetNodeProductNameArgs() *SetNodeProductNameArgs {
  output := &SetNodeProductNameArgs{
    TStruct:thrift.NewTStruct("SetNodeProductName_args", []thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    thrift.NewTField("_productName", thrift.STRING, 3),
    }),
  }
  {
  }
  return output
}

func (p *SetNodeProductNameArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_homeId" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_nodeId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "_productName" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SetNodeProductNameArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1087, err1088 := iprot.ReadI32()
  if err1088 != nil { return thrift.NewTProtocolExceptionReadField(1, "_homeId", p.ThriftName(), err1088); }
  p._homeId = v1087
  return err
}

func (p *SetNodeProductNameArgs) ReadField_homeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *SetNodeProductNameArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1089, err1090 := iprot.ReadByte()
  if err1090 != nil { return thrift.NewTProtocolExceptionReadField(2, "_nodeId", p.ThriftName(), err1090); }
  p._nodeId = v1089
  return err
}

func (p *SetNodeProductNameArgs) ReadField_nodeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *SetNodeProductNameArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1091, err1092 := iprot.ReadString()
  if err1092 != nil { return thrift.NewTProtocolExceptionReadField(3, "_productName", p.ThriftName(), err1092); }
  p._productName = v1091
  return err
}

func (p *SetNodeProductNameArgs) ReadField_productName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *SetNodeProductNameArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SetNodeProductName_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SetNodeProductNameArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_homeId", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._homeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  return err
}

func (p *SetNodeProductNameArgs) WriteField_homeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *SetNodeProductNameArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_nodeId", thrift.BYTE, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._nodeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  return err
}

func (p *SetNodeProductNameArgs) WriteField_nodeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *SetNodeProductNameArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_productName", thrift.STRING, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_productName", p.ThriftName(), err); }
  err = oprot.WriteString(string(p._productName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_productName", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_productName", p.ThriftName(), err); }
  return err
}

func (p *SetNodeProductNameArgs) WriteField_productName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *SetNodeProductNameArgs) TStructName() string {
  return "SetNodeProductNameArgs"
}

func (p *SetNodeProductNameArgs) ThriftName() string {
  return "SetNodeProductName_args"
}

func (p *SetNodeProductNameArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetNodeProductNameArgs(%+v)", *p)
}

func (p *SetNodeProductNameArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SetNodeProductNameArgs)
  if !ok {
    return 0, false
  }
  if p._homeId != data._homeId {
    if p._homeId < data._homeId {
      return -1, true
    }
    return 1, true
  }
  if p._nodeId != data._nodeId {
    if p._nodeId < data._nodeId {
      return -1, true
    }
    return 1, true
  }
  if p._productName != data._productName {
    if p._productName < data._productName {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *SetNodeProductNameArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._homeId
  case 2: return p._nodeId
  case 3: return p._productName
  }
  return nil
}

func (p *SetNodeProductNameArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    thrift.NewTField("_productName", thrift.STRING, 3),
    })
}

type SetNodeProductNameResult struct {
  thrift.TStruct
}

func NewSetNodeProductNameResult() *SetNodeProductNameResult {
  output := &SetNodeProductNameResult{
    TStruct:thrift.NewTStruct("SetNodeProductName_result", []thrift.TField{
    }),
  }
  {
  }
  return output
}

func (p *SetNodeProductNameResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    err = iprot.Skip(fieldTypeId)
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SetNodeProductNameResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SetNodeProductName_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SetNodeProductNameResult) TStructName() string {
  return "SetNodeProductNameResult"
}

func (p *SetNodeProductNameResult) ThriftName() string {
  return "SetNodeProductName_result"
}

func (p *SetNodeProductNameResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetNodeProductNameResult(%+v)", *p)
}

func (p *SetNodeProductNameResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  _, ok := other.(*SetNodeProductNameResult)
  if !ok {
    return 0, false
  }
  return 0, true
}

func (p *SetNodeProductNameResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  }
  return nil
}

func (p *SetNodeProductNameResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    })
}

/**
 * Attributes:
 *  - _homeId
 *  - _nodeId
 *  - _nodeName
 */
type SetNodeNameArgs struct {
  thrift.TStruct
  _homeId int32 "_homeId"; // 1
  _nodeId byte "_nodeId"; // 2
  _nodeName string "_nodeName"; // 3
}

func NewSetNodeNameArgs() *SetNodeNameArgs {
  output := &SetNodeNameArgs{
    TStruct:thrift.NewTStruct("SetNodeName_args", []thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    thrift.NewTField("_nodeName", thrift.STRING, 3),
    }),
  }
  {
  }
  return output
}

func (p *SetNodeNameArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_homeId" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_nodeId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "_nodeName" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SetNodeNameArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1093, err1094 := iprot.ReadI32()
  if err1094 != nil { return thrift.NewTProtocolExceptionReadField(1, "_homeId", p.ThriftName(), err1094); }
  p._homeId = v1093
  return err
}

func (p *SetNodeNameArgs) ReadField_homeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *SetNodeNameArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1095, err1096 := iprot.ReadByte()
  if err1096 != nil { return thrift.NewTProtocolExceptionReadField(2, "_nodeId", p.ThriftName(), err1096); }
  p._nodeId = v1095
  return err
}

func (p *SetNodeNameArgs) ReadField_nodeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *SetNodeNameArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1097, err1098 := iprot.ReadString()
  if err1098 != nil { return thrift.NewTProtocolExceptionReadField(3, "_nodeName", p.ThriftName(), err1098); }
  p._nodeName = v1097
  return err
}

func (p *SetNodeNameArgs) ReadField_nodeName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *SetNodeNameArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SetNodeName_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SetNodeNameArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_homeId", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._homeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  return err
}

func (p *SetNodeNameArgs) WriteField_homeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *SetNodeNameArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_nodeId", thrift.BYTE, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._nodeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  return err
}

func (p *SetNodeNameArgs) WriteField_nodeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *SetNodeNameArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_nodeName", thrift.STRING, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_nodeName", p.ThriftName(), err); }
  err = oprot.WriteString(string(p._nodeName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_nodeName", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_nodeName", p.ThriftName(), err); }
  return err
}

func (p *SetNodeNameArgs) WriteField_nodeName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *SetNodeNameArgs) TStructName() string {
  return "SetNodeNameArgs"
}

func (p *SetNodeNameArgs) ThriftName() string {
  return "SetNodeName_args"
}

func (p *SetNodeNameArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetNodeNameArgs(%+v)", *p)
}

func (p *SetNodeNameArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SetNodeNameArgs)
  if !ok {
    return 0, false
  }
  if p._homeId != data._homeId {
    if p._homeId < data._homeId {
      return -1, true
    }
    return 1, true
  }
  if p._nodeId != data._nodeId {
    if p._nodeId < data._nodeId {
      return -1, true
    }
    return 1, true
  }
  if p._nodeName != data._nodeName {
    if p._nodeName < data._nodeName {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *SetNodeNameArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._homeId
  case 2: return p._nodeId
  case 3: return p._nodeName
  }
  return nil
}

func (p *SetNodeNameArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    thrift.NewTField("_nodeName", thrift.STRING, 3),
    })
}

type SetNodeNameResult struct {
  thrift.TStruct
}

func NewSetNodeNameResult() *SetNodeNameResult {
  output := &SetNodeNameResult{
    TStruct:thrift.NewTStruct("SetNodeName_result", []thrift.TField{
    }),
  }
  {
  }
  return output
}

func (p *SetNodeNameResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    err = iprot.Skip(fieldTypeId)
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SetNodeNameResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SetNodeName_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SetNodeNameResult) TStructName() string {
  return "SetNodeNameResult"
}

func (p *SetNodeNameResult) ThriftName() string {
  return "SetNodeName_result"
}

func (p *SetNodeNameResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetNodeNameResult(%+v)", *p)
}

func (p *SetNodeNameResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  _, ok := other.(*SetNodeNameResult)
  if !ok {
    return 0, false
  }
  return 0, true
}

func (p *SetNodeNameResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  }
  return nil
}

func (p *SetNodeNameResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    })
}

/**
 * Attributes:
 *  - _homeId
 *  - _nodeId
 *  - _location
 */
type SetNodeLocationArgs struct {
  thrift.TStruct
  _homeId int32 "_homeId"; // 1
  _nodeId byte "_nodeId"; // 2
  _location string "_location"; // 3
}

func NewSetNodeLocationArgs() *SetNodeLocationArgs {
  output := &SetNodeLocationArgs{
    TStruct:thrift.NewTStruct("SetNodeLocation_args", []thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    thrift.NewTField("_location", thrift.STRING, 3),
    }),
  }
  {
  }
  return output
}

func (p *SetNodeLocationArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_homeId" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_nodeId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "_location" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SetNodeLocationArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1099, err1100 := iprot.ReadI32()
  if err1100 != nil { return thrift.NewTProtocolExceptionReadField(1, "_homeId", p.ThriftName(), err1100); }
  p._homeId = v1099
  return err
}

func (p *SetNodeLocationArgs) ReadField_homeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *SetNodeLocationArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1101, err1102 := iprot.ReadByte()
  if err1102 != nil { return thrift.NewTProtocolExceptionReadField(2, "_nodeId", p.ThriftName(), err1102); }
  p._nodeId = v1101
  return err
}

func (p *SetNodeLocationArgs) ReadField_nodeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *SetNodeLocationArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1103, err1104 := iprot.ReadString()
  if err1104 != nil { return thrift.NewTProtocolExceptionReadField(3, "_location", p.ThriftName(), err1104); }
  p._location = v1103
  return err
}

func (p *SetNodeLocationArgs) ReadField_location(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *SetNodeLocationArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SetNodeLocation_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SetNodeLocationArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_homeId", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._homeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  return err
}

func (p *SetNodeLocationArgs) WriteField_homeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *SetNodeLocationArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_nodeId", thrift.BYTE, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._nodeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  return err
}

func (p *SetNodeLocationArgs) WriteField_nodeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *SetNodeLocationArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_location", thrift.STRING, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_location", p.ThriftName(), err); }
  err = oprot.WriteString(string(p._location))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_location", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_location", p.ThriftName(), err); }
  return err
}

func (p *SetNodeLocationArgs) WriteField_location(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *SetNodeLocationArgs) TStructName() string {
  return "SetNodeLocationArgs"
}

func (p *SetNodeLocationArgs) ThriftName() string {
  return "SetNodeLocation_args"
}

func (p *SetNodeLocationArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetNodeLocationArgs(%+v)", *p)
}

func (p *SetNodeLocationArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SetNodeLocationArgs)
  if !ok {
    return 0, false
  }
  if p._homeId != data._homeId {
    if p._homeId < data._homeId {
      return -1, true
    }
    return 1, true
  }
  if p._nodeId != data._nodeId {
    if p._nodeId < data._nodeId {
      return -1, true
    }
    return 1, true
  }
  if p._location != data._location {
    if p._location < data._location {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *SetNodeLocationArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._homeId
  case 2: return p._nodeId
  case 3: return p._location
  }
  return nil
}

func (p *SetNodeLocationArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    thrift.NewTField("_location", thrift.STRING, 3),
    })
}

type SetNodeLocationResult struct {
  thrift.TStruct
}

func NewSetNodeLocationResult() *SetNodeLocationResult {
  output := &SetNodeLocationResult{
    TStruct:thrift.NewTStruct("SetNodeLocation_result", []thrift.TField{
    }),
  }
  {
  }
  return output
}

func (p *SetNodeLocationResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    err = iprot.Skip(fieldTypeId)
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SetNodeLocationResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SetNodeLocation_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SetNodeLocationResult) TStructName() string {
  return "SetNodeLocationResult"
}

func (p *SetNodeLocationResult) ThriftName() string {
  return "SetNodeLocation_result"
}

func (p *SetNodeLocationResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetNodeLocationResult(%+v)", *p)
}

func (p *SetNodeLocationResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  _, ok := other.(*SetNodeLocationResult)
  if !ok {
    return 0, false
  }
  return 0, true
}

func (p *SetNodeLocationResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  }
  return nil
}

func (p *SetNodeLocationResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    })
}

/**
 * Attributes:
 *  - _homeId
 *  - _nodeId
 */
type SetNodeOnArgs struct {
  thrift.TStruct
  _homeId int32 "_homeId"; // 1
  _nodeId byte "_nodeId"; // 2
}

func NewSetNodeOnArgs() *SetNodeOnArgs {
  output := &SetNodeOnArgs{
    TStruct:thrift.NewTStruct("SetNodeOn_args", []thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    }),
  }
  {
  }
  return output
}

func (p *SetNodeOnArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_homeId" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_nodeId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SetNodeOnArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1105, err1106 := iprot.ReadI32()
  if err1106 != nil { return thrift.NewTProtocolExceptionReadField(1, "_homeId", p.ThriftName(), err1106); }
  p._homeId = v1105
  return err
}

func (p *SetNodeOnArgs) ReadField_homeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *SetNodeOnArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1107, err1108 := iprot.ReadByte()
  if err1108 != nil { return thrift.NewTProtocolExceptionReadField(2, "_nodeId", p.ThriftName(), err1108); }
  p._nodeId = v1107
  return err
}

func (p *SetNodeOnArgs) ReadField_nodeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *SetNodeOnArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SetNodeOn_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SetNodeOnArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_homeId", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._homeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  return err
}

func (p *SetNodeOnArgs) WriteField_homeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *SetNodeOnArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_nodeId", thrift.BYTE, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._nodeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  return err
}

func (p *SetNodeOnArgs) WriteField_nodeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *SetNodeOnArgs) TStructName() string {
  return "SetNodeOnArgs"
}

func (p *SetNodeOnArgs) ThriftName() string {
  return "SetNodeOn_args"
}

func (p *SetNodeOnArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetNodeOnArgs(%+v)", *p)
}

func (p *SetNodeOnArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SetNodeOnArgs)
  if !ok {
    return 0, false
  }
  if p._homeId != data._homeId {
    if p._homeId < data._homeId {
      return -1, true
    }
    return 1, true
  }
  if p._nodeId != data._nodeId {
    if p._nodeId < data._nodeId {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *SetNodeOnArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._homeId
  case 2: return p._nodeId
  }
  return nil
}

func (p *SetNodeOnArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    })
}

type SetNodeOnResult struct {
  thrift.TStruct
}

func NewSetNodeOnResult() *SetNodeOnResult {
  output := &SetNodeOnResult{
    TStruct:thrift.NewTStruct("SetNodeOn_result", []thrift.TField{
    }),
  }
  {
  }
  return output
}

func (p *SetNodeOnResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    err = iprot.Skip(fieldTypeId)
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SetNodeOnResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SetNodeOn_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SetNodeOnResult) TStructName() string {
  return "SetNodeOnResult"
}

func (p *SetNodeOnResult) ThriftName() string {
  return "SetNodeOn_result"
}

func (p *SetNodeOnResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetNodeOnResult(%+v)", *p)
}

func (p *SetNodeOnResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  _, ok := other.(*SetNodeOnResult)
  if !ok {
    return 0, false
  }
  return 0, true
}

func (p *SetNodeOnResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  }
  return nil
}

func (p *SetNodeOnResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    })
}

/**
 * Attributes:
 *  - _homeId
 *  - _nodeId
 */
type SetNodeOffArgs struct {
  thrift.TStruct
  _homeId int32 "_homeId"; // 1
  _nodeId byte "_nodeId"; // 2
}

func NewSetNodeOffArgs() *SetNodeOffArgs {
  output := &SetNodeOffArgs{
    TStruct:thrift.NewTStruct("SetNodeOff_args", []thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    }),
  }
  {
  }
  return output
}

func (p *SetNodeOffArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_homeId" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_nodeId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SetNodeOffArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1109, err1110 := iprot.ReadI32()
  if err1110 != nil { return thrift.NewTProtocolExceptionReadField(1, "_homeId", p.ThriftName(), err1110); }
  p._homeId = v1109
  return err
}

func (p *SetNodeOffArgs) ReadField_homeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *SetNodeOffArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1111, err1112 := iprot.ReadByte()
  if err1112 != nil { return thrift.NewTProtocolExceptionReadField(2, "_nodeId", p.ThriftName(), err1112); }
  p._nodeId = v1111
  return err
}

func (p *SetNodeOffArgs) ReadField_nodeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *SetNodeOffArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SetNodeOff_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SetNodeOffArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_homeId", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._homeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  return err
}

func (p *SetNodeOffArgs) WriteField_homeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *SetNodeOffArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_nodeId", thrift.BYTE, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._nodeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  return err
}

func (p *SetNodeOffArgs) WriteField_nodeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *SetNodeOffArgs) TStructName() string {
  return "SetNodeOffArgs"
}

func (p *SetNodeOffArgs) ThriftName() string {
  return "SetNodeOff_args"
}

func (p *SetNodeOffArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetNodeOffArgs(%+v)", *p)
}

func (p *SetNodeOffArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SetNodeOffArgs)
  if !ok {
    return 0, false
  }
  if p._homeId != data._homeId {
    if p._homeId < data._homeId {
      return -1, true
    }
    return 1, true
  }
  if p._nodeId != data._nodeId {
    if p._nodeId < data._nodeId {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *SetNodeOffArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._homeId
  case 2: return p._nodeId
  }
  return nil
}

func (p *SetNodeOffArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    })
}

type SetNodeOffResult struct {
  thrift.TStruct
}

func NewSetNodeOffResult() *SetNodeOffResult {
  output := &SetNodeOffResult{
    TStruct:thrift.NewTStruct("SetNodeOff_result", []thrift.TField{
    }),
  }
  {
  }
  return output
}

func (p *SetNodeOffResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    err = iprot.Skip(fieldTypeId)
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SetNodeOffResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SetNodeOff_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SetNodeOffResult) TStructName() string {
  return "SetNodeOffResult"
}

func (p *SetNodeOffResult) ThriftName() string {
  return "SetNodeOff_result"
}

func (p *SetNodeOffResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetNodeOffResult(%+v)", *p)
}

func (p *SetNodeOffResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  _, ok := other.(*SetNodeOffResult)
  if !ok {
    return 0, false
  }
  return 0, true
}

func (p *SetNodeOffResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  }
  return nil
}

func (p *SetNodeOffResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    })
}

/**
 * Attributes:
 *  - _homeId
 *  - _nodeId
 *  - _level
 */
type SetNodeLevelArgs struct {
  thrift.TStruct
  _homeId int32 "_homeId"; // 1
  _nodeId byte "_nodeId"; // 2
  _level byte "_level"; // 3
}

func NewSetNodeLevelArgs() *SetNodeLevelArgs {
  output := &SetNodeLevelArgs{
    TStruct:thrift.NewTStruct("SetNodeLevel_args", []thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    thrift.NewTField("_level", thrift.BYTE, 3),
    }),
  }
  {
  }
  return output
}

func (p *SetNodeLevelArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_homeId" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_nodeId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "_level" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SetNodeLevelArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1113, err1114 := iprot.ReadI32()
  if err1114 != nil { return thrift.NewTProtocolExceptionReadField(1, "_homeId", p.ThriftName(), err1114); }
  p._homeId = v1113
  return err
}

func (p *SetNodeLevelArgs) ReadField_homeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *SetNodeLevelArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1115, err1116 := iprot.ReadByte()
  if err1116 != nil { return thrift.NewTProtocolExceptionReadField(2, "_nodeId", p.ThriftName(), err1116); }
  p._nodeId = v1115
  return err
}

func (p *SetNodeLevelArgs) ReadField_nodeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *SetNodeLevelArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1117, err1118 := iprot.ReadByte()
  if err1118 != nil { return thrift.NewTProtocolExceptionReadField(3, "_level", p.ThriftName(), err1118); }
  p._level = v1117
  return err
}

func (p *SetNodeLevelArgs) ReadField_level(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *SetNodeLevelArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SetNodeLevel_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SetNodeLevelArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_homeId", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._homeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  return err
}

func (p *SetNodeLevelArgs) WriteField_homeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *SetNodeLevelArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_nodeId", thrift.BYTE, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._nodeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  return err
}

func (p *SetNodeLevelArgs) WriteField_nodeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *SetNodeLevelArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_level", thrift.BYTE, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_level", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._level))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_level", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_level", p.ThriftName(), err); }
  return err
}

func (p *SetNodeLevelArgs) WriteField_level(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *SetNodeLevelArgs) TStructName() string {
  return "SetNodeLevelArgs"
}

func (p *SetNodeLevelArgs) ThriftName() string {
  return "SetNodeLevel_args"
}

func (p *SetNodeLevelArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetNodeLevelArgs(%+v)", *p)
}

func (p *SetNodeLevelArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SetNodeLevelArgs)
  if !ok {
    return 0, false
  }
  if p._homeId != data._homeId {
    if p._homeId < data._homeId {
      return -1, true
    }
    return 1, true
  }
  if p._nodeId != data._nodeId {
    if p._nodeId < data._nodeId {
      return -1, true
    }
    return 1, true
  }
  if p._level != data._level {
    if p._level < data._level {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *SetNodeLevelArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._homeId
  case 2: return p._nodeId
  case 3: return p._level
  }
  return nil
}

func (p *SetNodeLevelArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    thrift.NewTField("_level", thrift.BYTE, 3),
    })
}

type SetNodeLevelResult struct {
  thrift.TStruct
}

func NewSetNodeLevelResult() *SetNodeLevelResult {
  output := &SetNodeLevelResult{
    TStruct:thrift.NewTStruct("SetNodeLevel_result", []thrift.TField{
    }),
  }
  {
  }
  return output
}

func (p *SetNodeLevelResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    err = iprot.Skip(fieldTypeId)
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SetNodeLevelResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SetNodeLevel_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SetNodeLevelResult) TStructName() string {
  return "SetNodeLevelResult"
}

func (p *SetNodeLevelResult) ThriftName() string {
  return "SetNodeLevel_result"
}

func (p *SetNodeLevelResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetNodeLevelResult(%+v)", *p)
}

func (p *SetNodeLevelResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  _, ok := other.(*SetNodeLevelResult)
  if !ok {
    return 0, false
  }
  return 0, true
}

func (p *SetNodeLevelResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  }
  return nil
}

func (p *SetNodeLevelResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    })
}

/**
 * Attributes:
 *  - _homeId
 *  - _nodeId
 */
type IsNodeInfoReceivedArgs struct {
  thrift.TStruct
  _homeId int32 "_homeId"; // 1
  _nodeId byte "_nodeId"; // 2
}

func NewIsNodeInfoReceivedArgs() *IsNodeInfoReceivedArgs {
  output := &IsNodeInfoReceivedArgs{
    TStruct:thrift.NewTStruct("IsNodeInfoReceived_args", []thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    }),
  }
  {
  }
  return output
}

func (p *IsNodeInfoReceivedArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_homeId" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_nodeId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *IsNodeInfoReceivedArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1119, err1120 := iprot.ReadI32()
  if err1120 != nil { return thrift.NewTProtocolExceptionReadField(1, "_homeId", p.ThriftName(), err1120); }
  p._homeId = v1119
  return err
}

func (p *IsNodeInfoReceivedArgs) ReadField_homeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *IsNodeInfoReceivedArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1121, err1122 := iprot.ReadByte()
  if err1122 != nil { return thrift.NewTProtocolExceptionReadField(2, "_nodeId", p.ThriftName(), err1122); }
  p._nodeId = v1121
  return err
}

func (p *IsNodeInfoReceivedArgs) ReadField_nodeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *IsNodeInfoReceivedArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("IsNodeInfoReceived_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *IsNodeInfoReceivedArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_homeId", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._homeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  return err
}

func (p *IsNodeInfoReceivedArgs) WriteField_homeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *IsNodeInfoReceivedArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_nodeId", thrift.BYTE, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._nodeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  return err
}

func (p *IsNodeInfoReceivedArgs) WriteField_nodeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *IsNodeInfoReceivedArgs) TStructName() string {
  return "IsNodeInfoReceivedArgs"
}

func (p *IsNodeInfoReceivedArgs) ThriftName() string {
  return "IsNodeInfoReceived_args"
}

func (p *IsNodeInfoReceivedArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IsNodeInfoReceivedArgs(%+v)", *p)
}

func (p *IsNodeInfoReceivedArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*IsNodeInfoReceivedArgs)
  if !ok {
    return 0, false
  }
  if p._homeId != data._homeId {
    if p._homeId < data._homeId {
      return -1, true
    }
    return 1, true
  }
  if p._nodeId != data._nodeId {
    if p._nodeId < data._nodeId {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *IsNodeInfoReceivedArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._homeId
  case 2: return p._nodeId
  }
  return nil
}

func (p *IsNodeInfoReceivedArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    })
}

/**
 * Attributes:
 *  - Success
 */
type IsNodeInfoReceivedResult struct {
  thrift.TStruct
  Success bool "success"; // 0
}

func NewIsNodeInfoReceivedResult() *IsNodeInfoReceivedResult {
  output := &IsNodeInfoReceivedResult{
    TStruct:thrift.NewTStruct("IsNodeInfoReceived_result", []thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    }),
  }
  {
  }
  return output
}

func (p *IsNodeInfoReceivedResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *IsNodeInfoReceivedResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1123, err1124 := iprot.ReadBool()
  if err1124 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1124); }
  p.Success = v1123
  return err
}

func (p *IsNodeInfoReceivedResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *IsNodeInfoReceivedResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("IsNodeInfoReceived_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *IsNodeInfoReceivedResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BOOL, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *IsNodeInfoReceivedResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *IsNodeInfoReceivedResult) TStructName() string {
  return "IsNodeInfoReceivedResult"
}

func (p *IsNodeInfoReceivedResult) ThriftName() string {
  return "IsNodeInfoReceived_result"
}

func (p *IsNodeInfoReceivedResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IsNodeInfoReceivedResult(%+v)", *p)
}

func (p *IsNodeInfoReceivedResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*IsNodeInfoReceivedResult)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Success, data.Success); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *IsNodeInfoReceivedResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *IsNodeInfoReceivedResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    })
}

/**
 * Attributes:
 *  - _homeId
 *  - _nodeId
 *  - _commandClassId
 */
type GetNodeClassInformationArgs struct {
  thrift.TStruct
  _homeId int32 "_homeId"; // 1
  _nodeId byte "_nodeId"; // 2
  _commandClassId byte "_commandClassId"; // 3
}

func NewGetNodeClassInformationArgs() *GetNodeClassInformationArgs {
  output := &GetNodeClassInformationArgs{
    TStruct:thrift.NewTStruct("GetNodeClassInformation_args", []thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    thrift.NewTField("_commandClassId", thrift.BYTE, 3),
    }),
  }
  {
  }
  return output
}

func (p *GetNodeClassInformationArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_homeId" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_nodeId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "_commandClassId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNodeClassInformationArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1125, err1126 := iprot.ReadI32()
  if err1126 != nil { return thrift.NewTProtocolExceptionReadField(1, "_homeId", p.ThriftName(), err1126); }
  p._homeId = v1125
  return err
}

func (p *GetNodeClassInformationArgs) ReadField_homeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetNodeClassInformationArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1127, err1128 := iprot.ReadByte()
  if err1128 != nil { return thrift.NewTProtocolExceptionReadField(2, "_nodeId", p.ThriftName(), err1128); }
  p._nodeId = v1127
  return err
}

func (p *GetNodeClassInformationArgs) ReadField_nodeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *GetNodeClassInformationArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1129, err1130 := iprot.ReadByte()
  if err1130 != nil { return thrift.NewTProtocolExceptionReadField(3, "_commandClassId", p.ThriftName(), err1130); }
  p._commandClassId = v1129
  return err
}

func (p *GetNodeClassInformationArgs) ReadField_commandClassId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *GetNodeClassInformationArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetNodeClassInformation_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNodeClassInformationArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_homeId", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._homeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  return err
}

func (p *GetNodeClassInformationArgs) WriteField_homeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetNodeClassInformationArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_nodeId", thrift.BYTE, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._nodeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  return err
}

func (p *GetNodeClassInformationArgs) WriteField_nodeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *GetNodeClassInformationArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_commandClassId", thrift.BYTE, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_commandClassId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._commandClassId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_commandClassId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_commandClassId", p.ThriftName(), err); }
  return err
}

func (p *GetNodeClassInformationArgs) WriteField_commandClassId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *GetNodeClassInformationArgs) TStructName() string {
  return "GetNodeClassInformationArgs"
}

func (p *GetNodeClassInformationArgs) ThriftName() string {
  return "GetNodeClassInformation_args"
}

func (p *GetNodeClassInformationArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetNodeClassInformationArgs(%+v)", *p)
}

func (p *GetNodeClassInformationArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetNodeClassInformationArgs)
  if !ok {
    return 0, false
  }
  if p._homeId != data._homeId {
    if p._homeId < data._homeId {
      return -1, true
    }
    return 1, true
  }
  if p._nodeId != data._nodeId {
    if p._nodeId < data._nodeId {
      return -1, true
    }
    return 1, true
  }
  if p._commandClassId != data._commandClassId {
    if p._commandClassId < data._commandClassId {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetNodeClassInformationArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._homeId
  case 2: return p._nodeId
  case 3: return p._commandClassId
  }
  return nil
}

func (p *GetNodeClassInformationArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    thrift.NewTField("_commandClassId", thrift.BYTE, 3),
    })
}

/**
 * Attributes:
 *  - Success
 */
type GetNodeClassInformationResult struct {
  thrift.TStruct
  Success *BoolGetNodeClassInformation "success"; // 0
}

func NewGetNodeClassInformationResult() *GetNodeClassInformationResult {
  output := &GetNodeClassInformationResult{
    TStruct:thrift.NewTStruct("GetNodeClassInformation_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    }),
  }
  {
  }
  return output
}

func (p *GetNodeClassInformationResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNodeClassInformationResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Success = NewBoolGetNodeClassInformation()
  err1133 := p.Success.Read(iprot)
  if err1133 != nil { return thrift.NewTProtocolExceptionReadStruct("p.SuccessBool_GetNodeClassInformation", err1133); }
  return err
}

func (p *GetNodeClassInformationResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetNodeClassInformationResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetNodeClassInformation_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNodeClassInformationResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = p.Success.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("Bool_GetNodeClassInformation", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *GetNodeClassInformationResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetNodeClassInformationResult) TStructName() string {
  return "GetNodeClassInformationResult"
}

func (p *GetNodeClassInformationResult) ThriftName() string {
  return "GetNodeClassInformation_result"
}

func (p *GetNodeClassInformationResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetNodeClassInformationResult(%+v)", *p)
}

func (p *GetNodeClassInformationResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetNodeClassInformationResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetNodeClassInformationResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *GetNodeClassInformationResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    })
}

/**
 * Attributes:
 *  - _id
 */
type GetValueLabelArgs struct {
  thrift.TStruct
  _id *RemoteValueID "_id"; // 1
}

func NewGetValueLabelArgs() *GetValueLabelArgs {
  output := &GetValueLabelArgs{
    TStruct:thrift.NewTStruct("GetValueLabel_args", []thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetValueLabelArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_id" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetValueLabelArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p._id = NewRemoteValueID()
  err1136 := p._id.Read(iprot)
  if err1136 != nil { return thrift.NewTProtocolExceptionReadStruct("p._idRemoteValueID", err1136); }
  return err
}

func (p *GetValueLabelArgs) ReadField_id(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetValueLabelArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetValueLabel_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetValueLabelArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._id != nil {
    err = oprot.WriteFieldBegin("_id", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
    err = p._id.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RemoteValueID", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
  }
  return err
}

func (p *GetValueLabelArgs) WriteField_id(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetValueLabelArgs) TStructName() string {
  return "GetValueLabelArgs"
}

func (p *GetValueLabelArgs) ThriftName() string {
  return "GetValueLabel_args"
}

func (p *GetValueLabelArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetValueLabelArgs(%+v)", *p)
}

func (p *GetValueLabelArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetValueLabelArgs)
  if !ok {
    return 0, false
  }
  if cmp, ok := p._id.CompareTo(data._id); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetValueLabelArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._id
  }
  return nil
}

func (p *GetValueLabelArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - Success
 */
type GetValueLabelResult struct {
  thrift.TStruct
  Success string "success"; // 0
}

func NewGetValueLabelResult() *GetValueLabelResult {
  output := &GetValueLabelResult{
    TStruct:thrift.NewTStruct("GetValueLabel_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRING, 0),
    }),
  }
  {
  }
  return output
}

func (p *GetValueLabelResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetValueLabelResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1137, err1138 := iprot.ReadString()
  if err1138 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1138); }
  p.Success = v1137
  return err
}

func (p *GetValueLabelResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetValueLabelResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetValueLabel_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetValueLabelResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.STRING, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *GetValueLabelResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetValueLabelResult) TStructName() string {
  return "GetValueLabelResult"
}

func (p *GetValueLabelResult) ThriftName() string {
  return "GetValueLabel_result"
}

func (p *GetValueLabelResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetValueLabelResult(%+v)", *p)
}

func (p *GetValueLabelResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetValueLabelResult)
  if !ok {
    return 0, false
  }
  if p.Success != data.Success {
    if p.Success < data.Success {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetValueLabelResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *GetValueLabelResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRING, 0),
    })
}

/**
 * Attributes:
 *  - _id
 *  - _value
 */
type SetValueLabelArgs struct {
  thrift.TStruct
  _id *RemoteValueID "_id"; // 1
  _value string "_value"; // 2
}

func NewSetValueLabelArgs() *SetValueLabelArgs {
  output := &SetValueLabelArgs{
    TStruct:thrift.NewTStruct("SetValueLabel_args", []thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    thrift.NewTField("_value", thrift.STRING, 2),
    }),
  }
  {
  }
  return output
}

func (p *SetValueLabelArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_id" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_value" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SetValueLabelArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p._id = NewRemoteValueID()
  err1141 := p._id.Read(iprot)
  if err1141 != nil { return thrift.NewTProtocolExceptionReadStruct("p._idRemoteValueID", err1141); }
  return err
}

func (p *SetValueLabelArgs) ReadField_id(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *SetValueLabelArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1142, err1143 := iprot.ReadString()
  if err1143 != nil { return thrift.NewTProtocolExceptionReadField(2, "_value", p.ThriftName(), err1143); }
  p._value = v1142
  return err
}

func (p *SetValueLabelArgs) ReadField_value(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *SetValueLabelArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SetValueLabel_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SetValueLabelArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._id != nil {
    err = oprot.WriteFieldBegin("_id", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
    err = p._id.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RemoteValueID", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
  }
  return err
}

func (p *SetValueLabelArgs) WriteField_id(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *SetValueLabelArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_value", thrift.STRING, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_value", p.ThriftName(), err); }
  err = oprot.WriteString(string(p._value))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_value", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_value", p.ThriftName(), err); }
  return err
}

func (p *SetValueLabelArgs) WriteField_value(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *SetValueLabelArgs) TStructName() string {
  return "SetValueLabelArgs"
}

func (p *SetValueLabelArgs) ThriftName() string {
  return "SetValueLabel_args"
}

func (p *SetValueLabelArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetValueLabelArgs(%+v)", *p)
}

func (p *SetValueLabelArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SetValueLabelArgs)
  if !ok {
    return 0, false
  }
  if cmp, ok := p._id.CompareTo(data._id); !ok || cmp != 0 {
    return cmp, ok
  }
  if p._value != data._value {
    if p._value < data._value {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *SetValueLabelArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._id
  case 2: return p._value
  }
  return nil
}

func (p *SetValueLabelArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    thrift.NewTField("_value", thrift.STRING, 2),
    })
}

type SetValueLabelResult struct {
  thrift.TStruct
}

func NewSetValueLabelResult() *SetValueLabelResult {
  output := &SetValueLabelResult{
    TStruct:thrift.NewTStruct("SetValueLabel_result", []thrift.TField{
    }),
  }
  {
  }
  return output
}

func (p *SetValueLabelResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    err = iprot.Skip(fieldTypeId)
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SetValueLabelResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SetValueLabel_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SetValueLabelResult) TStructName() string {
  return "SetValueLabelResult"
}

func (p *SetValueLabelResult) ThriftName() string {
  return "SetValueLabel_result"
}

func (p *SetValueLabelResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetValueLabelResult(%+v)", *p)
}

func (p *SetValueLabelResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  _, ok := other.(*SetValueLabelResult)
  if !ok {
    return 0, false
  }
  return 0, true
}

func (p *SetValueLabelResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  }
  return nil
}

func (p *SetValueLabelResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    })
}

/**
 * Attributes:
 *  - _id
 */
type GetValueUnitsArgs struct {
  thrift.TStruct
  _id *RemoteValueID "_id"; // 1
}

func NewGetValueUnitsArgs() *GetValueUnitsArgs {
  output := &GetValueUnitsArgs{
    TStruct:thrift.NewTStruct("GetValueUnits_args", []thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetValueUnitsArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_id" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetValueUnitsArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p._id = NewRemoteValueID()
  err1146 := p._id.Read(iprot)
  if err1146 != nil { return thrift.NewTProtocolExceptionReadStruct("p._idRemoteValueID", err1146); }
  return err
}

func (p *GetValueUnitsArgs) ReadField_id(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetValueUnitsArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetValueUnits_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetValueUnitsArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._id != nil {
    err = oprot.WriteFieldBegin("_id", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
    err = p._id.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RemoteValueID", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
  }
  return err
}

func (p *GetValueUnitsArgs) WriteField_id(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetValueUnitsArgs) TStructName() string {
  return "GetValueUnitsArgs"
}

func (p *GetValueUnitsArgs) ThriftName() string {
  return "GetValueUnits_args"
}

func (p *GetValueUnitsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetValueUnitsArgs(%+v)", *p)
}

func (p *GetValueUnitsArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetValueUnitsArgs)
  if !ok {
    return 0, false
  }
  if cmp, ok := p._id.CompareTo(data._id); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetValueUnitsArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._id
  }
  return nil
}

func (p *GetValueUnitsArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - Success
 */
type GetValueUnitsResult struct {
  thrift.TStruct
  Success string "success"; // 0
}

func NewGetValueUnitsResult() *GetValueUnitsResult {
  output := &GetValueUnitsResult{
    TStruct:thrift.NewTStruct("GetValueUnits_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRING, 0),
    }),
  }
  {
  }
  return output
}

func (p *GetValueUnitsResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetValueUnitsResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1147, err1148 := iprot.ReadString()
  if err1148 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1148); }
  p.Success = v1147
  return err
}

func (p *GetValueUnitsResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetValueUnitsResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetValueUnits_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetValueUnitsResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.STRING, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *GetValueUnitsResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetValueUnitsResult) TStructName() string {
  return "GetValueUnitsResult"
}

func (p *GetValueUnitsResult) ThriftName() string {
  return "GetValueUnits_result"
}

func (p *GetValueUnitsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetValueUnitsResult(%+v)", *p)
}

func (p *GetValueUnitsResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetValueUnitsResult)
  if !ok {
    return 0, false
  }
  if p.Success != data.Success {
    if p.Success < data.Success {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetValueUnitsResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *GetValueUnitsResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRING, 0),
    })
}

/**
 * Attributes:
 *  - _id
 *  - _value
 */
type SetValueUnitsArgs struct {
  thrift.TStruct
  _id *RemoteValueID "_id"; // 1
  _value string "_value"; // 2
}

func NewSetValueUnitsArgs() *SetValueUnitsArgs {
  output := &SetValueUnitsArgs{
    TStruct:thrift.NewTStruct("SetValueUnits_args", []thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    thrift.NewTField("_value", thrift.STRING, 2),
    }),
  }
  {
  }
  return output
}

func (p *SetValueUnitsArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_id" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_value" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SetValueUnitsArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p._id = NewRemoteValueID()
  err1151 := p._id.Read(iprot)
  if err1151 != nil { return thrift.NewTProtocolExceptionReadStruct("p._idRemoteValueID", err1151); }
  return err
}

func (p *SetValueUnitsArgs) ReadField_id(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *SetValueUnitsArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1152, err1153 := iprot.ReadString()
  if err1153 != nil { return thrift.NewTProtocolExceptionReadField(2, "_value", p.ThriftName(), err1153); }
  p._value = v1152
  return err
}

func (p *SetValueUnitsArgs) ReadField_value(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *SetValueUnitsArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SetValueUnits_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SetValueUnitsArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._id != nil {
    err = oprot.WriteFieldBegin("_id", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
    err = p._id.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RemoteValueID", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
  }
  return err
}

func (p *SetValueUnitsArgs) WriteField_id(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *SetValueUnitsArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_value", thrift.STRING, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_value", p.ThriftName(), err); }
  err = oprot.WriteString(string(p._value))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_value", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_value", p.ThriftName(), err); }
  return err
}

func (p *SetValueUnitsArgs) WriteField_value(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *SetValueUnitsArgs) TStructName() string {
  return "SetValueUnitsArgs"
}

func (p *SetValueUnitsArgs) ThriftName() string {
  return "SetValueUnits_args"
}

func (p *SetValueUnitsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetValueUnitsArgs(%+v)", *p)
}

func (p *SetValueUnitsArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SetValueUnitsArgs)
  if !ok {
    return 0, false
  }
  if cmp, ok := p._id.CompareTo(data._id); !ok || cmp != 0 {
    return cmp, ok
  }
  if p._value != data._value {
    if p._value < data._value {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *SetValueUnitsArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._id
  case 2: return p._value
  }
  return nil
}

func (p *SetValueUnitsArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    thrift.NewTField("_value", thrift.STRING, 2),
    })
}

type SetValueUnitsResult struct {
  thrift.TStruct
}

func NewSetValueUnitsResult() *SetValueUnitsResult {
  output := &SetValueUnitsResult{
    TStruct:thrift.NewTStruct("SetValueUnits_result", []thrift.TField{
    }),
  }
  {
  }
  return output
}

func (p *SetValueUnitsResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    err = iprot.Skip(fieldTypeId)
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SetValueUnitsResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SetValueUnits_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SetValueUnitsResult) TStructName() string {
  return "SetValueUnitsResult"
}

func (p *SetValueUnitsResult) ThriftName() string {
  return "SetValueUnits_result"
}

func (p *SetValueUnitsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetValueUnitsResult(%+v)", *p)
}

func (p *SetValueUnitsResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  _, ok := other.(*SetValueUnitsResult)
  if !ok {
    return 0, false
  }
  return 0, true
}

func (p *SetValueUnitsResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  }
  return nil
}

func (p *SetValueUnitsResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    })
}

/**
 * Attributes:
 *  - _id
 */
type GetValueHelpArgs struct {
  thrift.TStruct
  _id *RemoteValueID "_id"; // 1
}

func NewGetValueHelpArgs() *GetValueHelpArgs {
  output := &GetValueHelpArgs{
    TStruct:thrift.NewTStruct("GetValueHelp_args", []thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetValueHelpArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_id" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetValueHelpArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p._id = NewRemoteValueID()
  err1156 := p._id.Read(iprot)
  if err1156 != nil { return thrift.NewTProtocolExceptionReadStruct("p._idRemoteValueID", err1156); }
  return err
}

func (p *GetValueHelpArgs) ReadField_id(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetValueHelpArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetValueHelp_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetValueHelpArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._id != nil {
    err = oprot.WriteFieldBegin("_id", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
    err = p._id.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RemoteValueID", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
  }
  return err
}

func (p *GetValueHelpArgs) WriteField_id(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetValueHelpArgs) TStructName() string {
  return "GetValueHelpArgs"
}

func (p *GetValueHelpArgs) ThriftName() string {
  return "GetValueHelp_args"
}

func (p *GetValueHelpArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetValueHelpArgs(%+v)", *p)
}

func (p *GetValueHelpArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetValueHelpArgs)
  if !ok {
    return 0, false
  }
  if cmp, ok := p._id.CompareTo(data._id); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetValueHelpArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._id
  }
  return nil
}

func (p *GetValueHelpArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - Success
 */
type GetValueHelpResult struct {
  thrift.TStruct
  Success string "success"; // 0
}

func NewGetValueHelpResult() *GetValueHelpResult {
  output := &GetValueHelpResult{
    TStruct:thrift.NewTStruct("GetValueHelp_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRING, 0),
    }),
  }
  {
  }
  return output
}

func (p *GetValueHelpResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetValueHelpResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1157, err1158 := iprot.ReadString()
  if err1158 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1158); }
  p.Success = v1157
  return err
}

func (p *GetValueHelpResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetValueHelpResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetValueHelp_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetValueHelpResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.STRING, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *GetValueHelpResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetValueHelpResult) TStructName() string {
  return "GetValueHelpResult"
}

func (p *GetValueHelpResult) ThriftName() string {
  return "GetValueHelp_result"
}

func (p *GetValueHelpResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetValueHelpResult(%+v)", *p)
}

func (p *GetValueHelpResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetValueHelpResult)
  if !ok {
    return 0, false
  }
  if p.Success != data.Success {
    if p.Success < data.Success {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetValueHelpResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *GetValueHelpResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRING, 0),
    })
}

/**
 * Attributes:
 *  - _id
 *  - _value
 */
type SetValueHelpArgs struct {
  thrift.TStruct
  _id *RemoteValueID "_id"; // 1
  _value string "_value"; // 2
}

func NewSetValueHelpArgs() *SetValueHelpArgs {
  output := &SetValueHelpArgs{
    TStruct:thrift.NewTStruct("SetValueHelp_args", []thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    thrift.NewTField("_value", thrift.STRING, 2),
    }),
  }
  {
  }
  return output
}

func (p *SetValueHelpArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_id" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_value" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SetValueHelpArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p._id = NewRemoteValueID()
  err1161 := p._id.Read(iprot)
  if err1161 != nil { return thrift.NewTProtocolExceptionReadStruct("p._idRemoteValueID", err1161); }
  return err
}

func (p *SetValueHelpArgs) ReadField_id(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *SetValueHelpArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1162, err1163 := iprot.ReadString()
  if err1163 != nil { return thrift.NewTProtocolExceptionReadField(2, "_value", p.ThriftName(), err1163); }
  p._value = v1162
  return err
}

func (p *SetValueHelpArgs) ReadField_value(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *SetValueHelpArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SetValueHelp_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SetValueHelpArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._id != nil {
    err = oprot.WriteFieldBegin("_id", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
    err = p._id.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RemoteValueID", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
  }
  return err
}

func (p *SetValueHelpArgs) WriteField_id(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *SetValueHelpArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_value", thrift.STRING, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_value", p.ThriftName(), err); }
  err = oprot.WriteString(string(p._value))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_value", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_value", p.ThriftName(), err); }
  return err
}

func (p *SetValueHelpArgs) WriteField_value(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *SetValueHelpArgs) TStructName() string {
  return "SetValueHelpArgs"
}

func (p *SetValueHelpArgs) ThriftName() string {
  return "SetValueHelp_args"
}

func (p *SetValueHelpArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetValueHelpArgs(%+v)", *p)
}

func (p *SetValueHelpArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SetValueHelpArgs)
  if !ok {
    return 0, false
  }
  if cmp, ok := p._id.CompareTo(data._id); !ok || cmp != 0 {
    return cmp, ok
  }
  if p._value != data._value {
    if p._value < data._value {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *SetValueHelpArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._id
  case 2: return p._value
  }
  return nil
}

func (p *SetValueHelpArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    thrift.NewTField("_value", thrift.STRING, 2),
    })
}

type SetValueHelpResult struct {
  thrift.TStruct
}

func NewSetValueHelpResult() *SetValueHelpResult {
  output := &SetValueHelpResult{
    TStruct:thrift.NewTStruct("SetValueHelp_result", []thrift.TField{
    }),
  }
  {
  }
  return output
}

func (p *SetValueHelpResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    err = iprot.Skip(fieldTypeId)
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SetValueHelpResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SetValueHelp_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SetValueHelpResult) TStructName() string {
  return "SetValueHelpResult"
}

func (p *SetValueHelpResult) ThriftName() string {
  return "SetValueHelp_result"
}

func (p *SetValueHelpResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetValueHelpResult(%+v)", *p)
}

func (p *SetValueHelpResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  _, ok := other.(*SetValueHelpResult)
  if !ok {
    return 0, false
  }
  return 0, true
}

func (p *SetValueHelpResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  }
  return nil
}

func (p *SetValueHelpResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    })
}

/**
 * Attributes:
 *  - _id
 */
type GetValueMinArgs struct {
  thrift.TStruct
  _id *RemoteValueID "_id"; // 1
}

func NewGetValueMinArgs() *GetValueMinArgs {
  output := &GetValueMinArgs{
    TStruct:thrift.NewTStruct("GetValueMin_args", []thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetValueMinArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_id" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetValueMinArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p._id = NewRemoteValueID()
  err1166 := p._id.Read(iprot)
  if err1166 != nil { return thrift.NewTProtocolExceptionReadStruct("p._idRemoteValueID", err1166); }
  return err
}

func (p *GetValueMinArgs) ReadField_id(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetValueMinArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetValueMin_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetValueMinArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._id != nil {
    err = oprot.WriteFieldBegin("_id", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
    err = p._id.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RemoteValueID", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
  }
  return err
}

func (p *GetValueMinArgs) WriteField_id(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetValueMinArgs) TStructName() string {
  return "GetValueMinArgs"
}

func (p *GetValueMinArgs) ThriftName() string {
  return "GetValueMin_args"
}

func (p *GetValueMinArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetValueMinArgs(%+v)", *p)
}

func (p *GetValueMinArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetValueMinArgs)
  if !ok {
    return 0, false
  }
  if cmp, ok := p._id.CompareTo(data._id); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetValueMinArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._id
  }
  return nil
}

func (p *GetValueMinArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - Success
 */
type GetValueMinResult struct {
  thrift.TStruct
  Success int32 "success"; // 0
}

func NewGetValueMinResult() *GetValueMinResult {
  output := &GetValueMinResult{
    TStruct:thrift.NewTStruct("GetValueMin_result", []thrift.TField{
    thrift.NewTField("success", thrift.I32, 0),
    }),
  }
  {
  }
  return output
}

func (p *GetValueMinResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetValueMinResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1167, err1168 := iprot.ReadI32()
  if err1168 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1168); }
  p.Success = v1167
  return err
}

func (p *GetValueMinResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetValueMinResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetValueMin_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetValueMinResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.I32, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *GetValueMinResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetValueMinResult) TStructName() string {
  return "GetValueMinResult"
}

func (p *GetValueMinResult) ThriftName() string {
  return "GetValueMin_result"
}

func (p *GetValueMinResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetValueMinResult(%+v)", *p)
}

func (p *GetValueMinResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetValueMinResult)
  if !ok {
    return 0, false
  }
  if p.Success != data.Success {
    if p.Success < data.Success {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetValueMinResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *GetValueMinResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.I32, 0),
    })
}

/**
 * Attributes:
 *  - _id
 */
type GetValueMaxArgs struct {
  thrift.TStruct
  _id *RemoteValueID "_id"; // 1
}

func NewGetValueMaxArgs() *GetValueMaxArgs {
  output := &GetValueMaxArgs{
    TStruct:thrift.NewTStruct("GetValueMax_args", []thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetValueMaxArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_id" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetValueMaxArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p._id = NewRemoteValueID()
  err1171 := p._id.Read(iprot)
  if err1171 != nil { return thrift.NewTProtocolExceptionReadStruct("p._idRemoteValueID", err1171); }
  return err
}

func (p *GetValueMaxArgs) ReadField_id(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetValueMaxArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetValueMax_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetValueMaxArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._id != nil {
    err = oprot.WriteFieldBegin("_id", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
    err = p._id.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RemoteValueID", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
  }
  return err
}

func (p *GetValueMaxArgs) WriteField_id(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetValueMaxArgs) TStructName() string {
  return "GetValueMaxArgs"
}

func (p *GetValueMaxArgs) ThriftName() string {
  return "GetValueMax_args"
}

func (p *GetValueMaxArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetValueMaxArgs(%+v)", *p)
}

func (p *GetValueMaxArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetValueMaxArgs)
  if !ok {
    return 0, false
  }
  if cmp, ok := p._id.CompareTo(data._id); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetValueMaxArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._id
  }
  return nil
}

func (p *GetValueMaxArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - Success
 */
type GetValueMaxResult struct {
  thrift.TStruct
  Success int32 "success"; // 0
}

func NewGetValueMaxResult() *GetValueMaxResult {
  output := &GetValueMaxResult{
    TStruct:thrift.NewTStruct("GetValueMax_result", []thrift.TField{
    thrift.NewTField("success", thrift.I32, 0),
    }),
  }
  {
  }
  return output
}

func (p *GetValueMaxResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetValueMaxResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1172, err1173 := iprot.ReadI32()
  if err1173 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1173); }
  p.Success = v1172
  return err
}

func (p *GetValueMaxResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetValueMaxResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetValueMax_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetValueMaxResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.I32, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *GetValueMaxResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetValueMaxResult) TStructName() string {
  return "GetValueMaxResult"
}

func (p *GetValueMaxResult) ThriftName() string {
  return "GetValueMax_result"
}

func (p *GetValueMaxResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetValueMaxResult(%+v)", *p)
}

func (p *GetValueMaxResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetValueMaxResult)
  if !ok {
    return 0, false
  }
  if p.Success != data.Success {
    if p.Success < data.Success {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetValueMaxResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *GetValueMaxResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.I32, 0),
    })
}

/**
 * Attributes:
 *  - _id
 */
type IsValueReadOnlyArgs struct {
  thrift.TStruct
  _id *RemoteValueID "_id"; // 1
}

func NewIsValueReadOnlyArgs() *IsValueReadOnlyArgs {
  output := &IsValueReadOnlyArgs{
    TStruct:thrift.NewTStruct("IsValueReadOnly_args", []thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *IsValueReadOnlyArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_id" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *IsValueReadOnlyArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p._id = NewRemoteValueID()
  err1176 := p._id.Read(iprot)
  if err1176 != nil { return thrift.NewTProtocolExceptionReadStruct("p._idRemoteValueID", err1176); }
  return err
}

func (p *IsValueReadOnlyArgs) ReadField_id(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *IsValueReadOnlyArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("IsValueReadOnly_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *IsValueReadOnlyArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._id != nil {
    err = oprot.WriteFieldBegin("_id", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
    err = p._id.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RemoteValueID", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
  }
  return err
}

func (p *IsValueReadOnlyArgs) WriteField_id(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *IsValueReadOnlyArgs) TStructName() string {
  return "IsValueReadOnlyArgs"
}

func (p *IsValueReadOnlyArgs) ThriftName() string {
  return "IsValueReadOnly_args"
}

func (p *IsValueReadOnlyArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IsValueReadOnlyArgs(%+v)", *p)
}

func (p *IsValueReadOnlyArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*IsValueReadOnlyArgs)
  if !ok {
    return 0, false
  }
  if cmp, ok := p._id.CompareTo(data._id); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *IsValueReadOnlyArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._id
  }
  return nil
}

func (p *IsValueReadOnlyArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - Success
 */
type IsValueReadOnlyResult struct {
  thrift.TStruct
  Success bool "success"; // 0
}

func NewIsValueReadOnlyResult() *IsValueReadOnlyResult {
  output := &IsValueReadOnlyResult{
    TStruct:thrift.NewTStruct("IsValueReadOnly_result", []thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    }),
  }
  {
  }
  return output
}

func (p *IsValueReadOnlyResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *IsValueReadOnlyResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1177, err1178 := iprot.ReadBool()
  if err1178 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1178); }
  p.Success = v1177
  return err
}

func (p *IsValueReadOnlyResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *IsValueReadOnlyResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("IsValueReadOnly_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *IsValueReadOnlyResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BOOL, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *IsValueReadOnlyResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *IsValueReadOnlyResult) TStructName() string {
  return "IsValueReadOnlyResult"
}

func (p *IsValueReadOnlyResult) ThriftName() string {
  return "IsValueReadOnly_result"
}

func (p *IsValueReadOnlyResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IsValueReadOnlyResult(%+v)", *p)
}

func (p *IsValueReadOnlyResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*IsValueReadOnlyResult)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Success, data.Success); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *IsValueReadOnlyResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *IsValueReadOnlyResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    })
}

/**
 * Attributes:
 *  - _id
 */
type IsValueWriteOnlyArgs struct {
  thrift.TStruct
  _id *RemoteValueID "_id"; // 1
}

func NewIsValueWriteOnlyArgs() *IsValueWriteOnlyArgs {
  output := &IsValueWriteOnlyArgs{
    TStruct:thrift.NewTStruct("IsValueWriteOnly_args", []thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *IsValueWriteOnlyArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_id" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *IsValueWriteOnlyArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p._id = NewRemoteValueID()
  err1181 := p._id.Read(iprot)
  if err1181 != nil { return thrift.NewTProtocolExceptionReadStruct("p._idRemoteValueID", err1181); }
  return err
}

func (p *IsValueWriteOnlyArgs) ReadField_id(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *IsValueWriteOnlyArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("IsValueWriteOnly_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *IsValueWriteOnlyArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._id != nil {
    err = oprot.WriteFieldBegin("_id", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
    err = p._id.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RemoteValueID", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
  }
  return err
}

func (p *IsValueWriteOnlyArgs) WriteField_id(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *IsValueWriteOnlyArgs) TStructName() string {
  return "IsValueWriteOnlyArgs"
}

func (p *IsValueWriteOnlyArgs) ThriftName() string {
  return "IsValueWriteOnly_args"
}

func (p *IsValueWriteOnlyArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IsValueWriteOnlyArgs(%+v)", *p)
}

func (p *IsValueWriteOnlyArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*IsValueWriteOnlyArgs)
  if !ok {
    return 0, false
  }
  if cmp, ok := p._id.CompareTo(data._id); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *IsValueWriteOnlyArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._id
  }
  return nil
}

func (p *IsValueWriteOnlyArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - Success
 */
type IsValueWriteOnlyResult struct {
  thrift.TStruct
  Success bool "success"; // 0
}

func NewIsValueWriteOnlyResult() *IsValueWriteOnlyResult {
  output := &IsValueWriteOnlyResult{
    TStruct:thrift.NewTStruct("IsValueWriteOnly_result", []thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    }),
  }
  {
  }
  return output
}

func (p *IsValueWriteOnlyResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *IsValueWriteOnlyResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1182, err1183 := iprot.ReadBool()
  if err1183 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1183); }
  p.Success = v1182
  return err
}

func (p *IsValueWriteOnlyResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *IsValueWriteOnlyResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("IsValueWriteOnly_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *IsValueWriteOnlyResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BOOL, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *IsValueWriteOnlyResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *IsValueWriteOnlyResult) TStructName() string {
  return "IsValueWriteOnlyResult"
}

func (p *IsValueWriteOnlyResult) ThriftName() string {
  return "IsValueWriteOnly_result"
}

func (p *IsValueWriteOnlyResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IsValueWriteOnlyResult(%+v)", *p)
}

func (p *IsValueWriteOnlyResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*IsValueWriteOnlyResult)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Success, data.Success); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *IsValueWriteOnlyResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *IsValueWriteOnlyResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    })
}

/**
 * Attributes:
 *  - _id
 */
type IsValueSetArgs struct {
  thrift.TStruct
  _id *RemoteValueID "_id"; // 1
}

func NewIsValueSetArgs() *IsValueSetArgs {
  output := &IsValueSetArgs{
    TStruct:thrift.NewTStruct("IsValueSet_args", []thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *IsValueSetArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_id" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *IsValueSetArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p._id = NewRemoteValueID()
  err1186 := p._id.Read(iprot)
  if err1186 != nil { return thrift.NewTProtocolExceptionReadStruct("p._idRemoteValueID", err1186); }
  return err
}

func (p *IsValueSetArgs) ReadField_id(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *IsValueSetArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("IsValueSet_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *IsValueSetArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._id != nil {
    err = oprot.WriteFieldBegin("_id", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
    err = p._id.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RemoteValueID", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
  }
  return err
}

func (p *IsValueSetArgs) WriteField_id(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *IsValueSetArgs) TStructName() string {
  return "IsValueSetArgs"
}

func (p *IsValueSetArgs) ThriftName() string {
  return "IsValueSet_args"
}

func (p *IsValueSetArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IsValueSetArgs(%+v)", *p)
}

func (p *IsValueSetArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*IsValueSetArgs)
  if !ok {
    return 0, false
  }
  if cmp, ok := p._id.CompareTo(data._id); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *IsValueSetArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._id
  }
  return nil
}

func (p *IsValueSetArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - Success
 */
type IsValueSetResult struct {
  thrift.TStruct
  Success bool "success"; // 0
}

func NewIsValueSetResult() *IsValueSetResult {
  output := &IsValueSetResult{
    TStruct:thrift.NewTStruct("IsValueSet_result", []thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    }),
  }
  {
  }
  return output
}

func (p *IsValueSetResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *IsValueSetResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1187, err1188 := iprot.ReadBool()
  if err1188 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1188); }
  p.Success = v1187
  return err
}

func (p *IsValueSetResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *IsValueSetResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("IsValueSet_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *IsValueSetResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BOOL, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *IsValueSetResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *IsValueSetResult) TStructName() string {
  return "IsValueSetResult"
}

func (p *IsValueSetResult) ThriftName() string {
  return "IsValueSet_result"
}

func (p *IsValueSetResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IsValueSetResult(%+v)", *p)
}

func (p *IsValueSetResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*IsValueSetResult)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Success, data.Success); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *IsValueSetResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *IsValueSetResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    })
}

/**
 * Attributes:
 *  - _id
 */
type GetValueAsBoolArgs struct {
  thrift.TStruct
  _id *RemoteValueID "_id"; // 1
}

func NewGetValueAsBoolArgs() *GetValueAsBoolArgs {
  output := &GetValueAsBoolArgs{
    TStruct:thrift.NewTStruct("GetValueAsBool_args", []thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetValueAsBoolArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_id" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetValueAsBoolArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p._id = NewRemoteValueID()
  err1191 := p._id.Read(iprot)
  if err1191 != nil { return thrift.NewTProtocolExceptionReadStruct("p._idRemoteValueID", err1191); }
  return err
}

func (p *GetValueAsBoolArgs) ReadField_id(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetValueAsBoolArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetValueAsBool_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetValueAsBoolArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._id != nil {
    err = oprot.WriteFieldBegin("_id", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
    err = p._id.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RemoteValueID", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
  }
  return err
}

func (p *GetValueAsBoolArgs) WriteField_id(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetValueAsBoolArgs) TStructName() string {
  return "GetValueAsBoolArgs"
}

func (p *GetValueAsBoolArgs) ThriftName() string {
  return "GetValueAsBool_args"
}

func (p *GetValueAsBoolArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetValueAsBoolArgs(%+v)", *p)
}

func (p *GetValueAsBoolArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetValueAsBoolArgs)
  if !ok {
    return 0, false
  }
  if cmp, ok := p._id.CompareTo(data._id); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetValueAsBoolArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._id
  }
  return nil
}

func (p *GetValueAsBoolArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - Success
 */
type GetValueAsBoolResult struct {
  thrift.TStruct
  Success *BoolBool "success"; // 0
}

func NewGetValueAsBoolResult() *GetValueAsBoolResult {
  output := &GetValueAsBoolResult{
    TStruct:thrift.NewTStruct("GetValueAsBool_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    }),
  }
  {
  }
  return output
}

func (p *GetValueAsBoolResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetValueAsBoolResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Success = NewBoolBool()
  err1194 := p.Success.Read(iprot)
  if err1194 != nil { return thrift.NewTProtocolExceptionReadStruct("p.SuccessBool_Bool", err1194); }
  return err
}

func (p *GetValueAsBoolResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetValueAsBoolResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetValueAsBool_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetValueAsBoolResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = p.Success.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("Bool_Bool", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *GetValueAsBoolResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetValueAsBoolResult) TStructName() string {
  return "GetValueAsBoolResult"
}

func (p *GetValueAsBoolResult) ThriftName() string {
  return "GetValueAsBool_result"
}

func (p *GetValueAsBoolResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetValueAsBoolResult(%+v)", *p)
}

func (p *GetValueAsBoolResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetValueAsBoolResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetValueAsBoolResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *GetValueAsBoolResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    })
}

/**
 * Attributes:
 *  - _id
 */
type GetValueAsByteArgs struct {
  thrift.TStruct
  _id *RemoteValueID "_id"; // 1
}

func NewGetValueAsByteArgs() *GetValueAsByteArgs {
  output := &GetValueAsByteArgs{
    TStruct:thrift.NewTStruct("GetValueAsByte_args", []thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetValueAsByteArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_id" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetValueAsByteArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p._id = NewRemoteValueID()
  err1197 := p._id.Read(iprot)
  if err1197 != nil { return thrift.NewTProtocolExceptionReadStruct("p._idRemoteValueID", err1197); }
  return err
}

func (p *GetValueAsByteArgs) ReadField_id(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetValueAsByteArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetValueAsByte_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetValueAsByteArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._id != nil {
    err = oprot.WriteFieldBegin("_id", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
    err = p._id.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RemoteValueID", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
  }
  return err
}

func (p *GetValueAsByteArgs) WriteField_id(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetValueAsByteArgs) TStructName() string {
  return "GetValueAsByteArgs"
}

func (p *GetValueAsByteArgs) ThriftName() string {
  return "GetValueAsByte_args"
}

func (p *GetValueAsByteArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetValueAsByteArgs(%+v)", *p)
}

func (p *GetValueAsByteArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetValueAsByteArgs)
  if !ok {
    return 0, false
  }
  if cmp, ok := p._id.CompareTo(data._id); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetValueAsByteArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._id
  }
  return nil
}

func (p *GetValueAsByteArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - Success
 */
type GetValueAsByteResult struct {
  thrift.TStruct
  Success *BoolUInt8 "success"; // 0
}

func NewGetValueAsByteResult() *GetValueAsByteResult {
  output := &GetValueAsByteResult{
    TStruct:thrift.NewTStruct("GetValueAsByte_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    }),
  }
  {
  }
  return output
}

func (p *GetValueAsByteResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetValueAsByteResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Success = NewBoolUInt8()
  err1200 := p.Success.Read(iprot)
  if err1200 != nil { return thrift.NewTProtocolExceptionReadStruct("p.SuccessBool_UInt8", err1200); }
  return err
}

func (p *GetValueAsByteResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetValueAsByteResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetValueAsByte_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetValueAsByteResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = p.Success.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("Bool_UInt8", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *GetValueAsByteResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetValueAsByteResult) TStructName() string {
  return "GetValueAsByteResult"
}

func (p *GetValueAsByteResult) ThriftName() string {
  return "GetValueAsByte_result"
}

func (p *GetValueAsByteResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetValueAsByteResult(%+v)", *p)
}

func (p *GetValueAsByteResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetValueAsByteResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetValueAsByteResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *GetValueAsByteResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    })
}

/**
 * Attributes:
 *  - _id
 */
type GetValueAsFloatArgs struct {
  thrift.TStruct
  _id *RemoteValueID "_id"; // 1
}

func NewGetValueAsFloatArgs() *GetValueAsFloatArgs {
  output := &GetValueAsFloatArgs{
    TStruct:thrift.NewTStruct("GetValueAsFloat_args", []thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetValueAsFloatArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_id" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetValueAsFloatArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p._id = NewRemoteValueID()
  err1203 := p._id.Read(iprot)
  if err1203 != nil { return thrift.NewTProtocolExceptionReadStruct("p._idRemoteValueID", err1203); }
  return err
}

func (p *GetValueAsFloatArgs) ReadField_id(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetValueAsFloatArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetValueAsFloat_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetValueAsFloatArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._id != nil {
    err = oprot.WriteFieldBegin("_id", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
    err = p._id.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RemoteValueID", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
  }
  return err
}

func (p *GetValueAsFloatArgs) WriteField_id(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetValueAsFloatArgs) TStructName() string {
  return "GetValueAsFloatArgs"
}

func (p *GetValueAsFloatArgs) ThriftName() string {
  return "GetValueAsFloat_args"
}

func (p *GetValueAsFloatArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetValueAsFloatArgs(%+v)", *p)
}

func (p *GetValueAsFloatArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetValueAsFloatArgs)
  if !ok {
    return 0, false
  }
  if cmp, ok := p._id.CompareTo(data._id); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetValueAsFloatArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._id
  }
  return nil
}

func (p *GetValueAsFloatArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - Success
 */
type GetValueAsFloatResult struct {
  thrift.TStruct
  Success *BoolFloat "success"; // 0
}

func NewGetValueAsFloatResult() *GetValueAsFloatResult {
  output := &GetValueAsFloatResult{
    TStruct:thrift.NewTStruct("GetValueAsFloat_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    }),
  }
  {
  }
  return output
}

func (p *GetValueAsFloatResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetValueAsFloatResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Success = NewBoolFloat()
  err1206 := p.Success.Read(iprot)
  if err1206 != nil { return thrift.NewTProtocolExceptionReadStruct("p.SuccessBool_Float", err1206); }
  return err
}

func (p *GetValueAsFloatResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetValueAsFloatResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetValueAsFloat_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetValueAsFloatResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = p.Success.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("Bool_Float", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *GetValueAsFloatResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetValueAsFloatResult) TStructName() string {
  return "GetValueAsFloatResult"
}

func (p *GetValueAsFloatResult) ThriftName() string {
  return "GetValueAsFloat_result"
}

func (p *GetValueAsFloatResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetValueAsFloatResult(%+v)", *p)
}

func (p *GetValueAsFloatResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetValueAsFloatResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetValueAsFloatResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *GetValueAsFloatResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    })
}

/**
 * Attributes:
 *  - _id
 */
type GetValueAsIntArgs struct {
  thrift.TStruct
  _id *RemoteValueID "_id"; // 1
}

func NewGetValueAsIntArgs() *GetValueAsIntArgs {
  output := &GetValueAsIntArgs{
    TStruct:thrift.NewTStruct("GetValueAsInt_args", []thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetValueAsIntArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_id" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetValueAsIntArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p._id = NewRemoteValueID()
  err1209 := p._id.Read(iprot)
  if err1209 != nil { return thrift.NewTProtocolExceptionReadStruct("p._idRemoteValueID", err1209); }
  return err
}

func (p *GetValueAsIntArgs) ReadField_id(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetValueAsIntArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetValueAsInt_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetValueAsIntArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._id != nil {
    err = oprot.WriteFieldBegin("_id", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
    err = p._id.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RemoteValueID", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
  }
  return err
}

func (p *GetValueAsIntArgs) WriteField_id(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetValueAsIntArgs) TStructName() string {
  return "GetValueAsIntArgs"
}

func (p *GetValueAsIntArgs) ThriftName() string {
  return "GetValueAsInt_args"
}

func (p *GetValueAsIntArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetValueAsIntArgs(%+v)", *p)
}

func (p *GetValueAsIntArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetValueAsIntArgs)
  if !ok {
    return 0, false
  }
  if cmp, ok := p._id.CompareTo(data._id); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetValueAsIntArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._id
  }
  return nil
}

func (p *GetValueAsIntArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - Success
 */
type GetValueAsIntResult struct {
  thrift.TStruct
  Success *BoolInt "success"; // 0
}

func NewGetValueAsIntResult() *GetValueAsIntResult {
  output := &GetValueAsIntResult{
    TStruct:thrift.NewTStruct("GetValueAsInt_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    }),
  }
  {
  }
  return output
}

func (p *GetValueAsIntResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetValueAsIntResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Success = NewBoolInt()
  err1212 := p.Success.Read(iprot)
  if err1212 != nil { return thrift.NewTProtocolExceptionReadStruct("p.SuccessBool_Int", err1212); }
  return err
}

func (p *GetValueAsIntResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetValueAsIntResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetValueAsInt_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetValueAsIntResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = p.Success.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("Bool_Int", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *GetValueAsIntResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetValueAsIntResult) TStructName() string {
  return "GetValueAsIntResult"
}

func (p *GetValueAsIntResult) ThriftName() string {
  return "GetValueAsInt_result"
}

func (p *GetValueAsIntResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetValueAsIntResult(%+v)", *p)
}

func (p *GetValueAsIntResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetValueAsIntResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetValueAsIntResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *GetValueAsIntResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    })
}

/**
 * Attributes:
 *  - _id
 */
type GetValueAsShortArgs struct {
  thrift.TStruct
  _id *RemoteValueID "_id"; // 1
}

func NewGetValueAsShortArgs() *GetValueAsShortArgs {
  output := &GetValueAsShortArgs{
    TStruct:thrift.NewTStruct("GetValueAsShort_args", []thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetValueAsShortArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_id" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetValueAsShortArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p._id = NewRemoteValueID()
  err1215 := p._id.Read(iprot)
  if err1215 != nil { return thrift.NewTProtocolExceptionReadStruct("p._idRemoteValueID", err1215); }
  return err
}

func (p *GetValueAsShortArgs) ReadField_id(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetValueAsShortArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetValueAsShort_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetValueAsShortArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._id != nil {
    err = oprot.WriteFieldBegin("_id", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
    err = p._id.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RemoteValueID", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
  }
  return err
}

func (p *GetValueAsShortArgs) WriteField_id(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetValueAsShortArgs) TStructName() string {
  return "GetValueAsShortArgs"
}

func (p *GetValueAsShortArgs) ThriftName() string {
  return "GetValueAsShort_args"
}

func (p *GetValueAsShortArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetValueAsShortArgs(%+v)", *p)
}

func (p *GetValueAsShortArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetValueAsShortArgs)
  if !ok {
    return 0, false
  }
  if cmp, ok := p._id.CompareTo(data._id); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetValueAsShortArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._id
  }
  return nil
}

func (p *GetValueAsShortArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - Success
 */
type GetValueAsShortResult struct {
  thrift.TStruct
  Success *BoolInt16 "success"; // 0
}

func NewGetValueAsShortResult() *GetValueAsShortResult {
  output := &GetValueAsShortResult{
    TStruct:thrift.NewTStruct("GetValueAsShort_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    }),
  }
  {
  }
  return output
}

func (p *GetValueAsShortResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetValueAsShortResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Success = NewBoolInt16()
  err1218 := p.Success.Read(iprot)
  if err1218 != nil { return thrift.NewTProtocolExceptionReadStruct("p.SuccessBool_Int16", err1218); }
  return err
}

func (p *GetValueAsShortResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetValueAsShortResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetValueAsShort_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetValueAsShortResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = p.Success.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("Bool_Int16", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *GetValueAsShortResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetValueAsShortResult) TStructName() string {
  return "GetValueAsShortResult"
}

func (p *GetValueAsShortResult) ThriftName() string {
  return "GetValueAsShort_result"
}

func (p *GetValueAsShortResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetValueAsShortResult(%+v)", *p)
}

func (p *GetValueAsShortResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetValueAsShortResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetValueAsShortResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *GetValueAsShortResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    })
}

/**
 * Attributes:
 *  - _id
 */
type GetValueAsStringArgs struct {
  thrift.TStruct
  _id *RemoteValueID "_id"; // 1
}

func NewGetValueAsStringArgs() *GetValueAsStringArgs {
  output := &GetValueAsStringArgs{
    TStruct:thrift.NewTStruct("GetValueAsString_args", []thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetValueAsStringArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_id" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetValueAsStringArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p._id = NewRemoteValueID()
  err1221 := p._id.Read(iprot)
  if err1221 != nil { return thrift.NewTProtocolExceptionReadStruct("p._idRemoteValueID", err1221); }
  return err
}

func (p *GetValueAsStringArgs) ReadField_id(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetValueAsStringArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetValueAsString_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetValueAsStringArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._id != nil {
    err = oprot.WriteFieldBegin("_id", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
    err = p._id.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RemoteValueID", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
  }
  return err
}

func (p *GetValueAsStringArgs) WriteField_id(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetValueAsStringArgs) TStructName() string {
  return "GetValueAsStringArgs"
}

func (p *GetValueAsStringArgs) ThriftName() string {
  return "GetValueAsString_args"
}

func (p *GetValueAsStringArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetValueAsStringArgs(%+v)", *p)
}

func (p *GetValueAsStringArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetValueAsStringArgs)
  if !ok {
    return 0, false
  }
  if cmp, ok := p._id.CompareTo(data._id); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetValueAsStringArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._id
  }
  return nil
}

func (p *GetValueAsStringArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - Success
 */
type GetValueAsStringResult struct {
  thrift.TStruct
  Success *BoolString "success"; // 0
}

func NewGetValueAsStringResult() *GetValueAsStringResult {
  output := &GetValueAsStringResult{
    TStruct:thrift.NewTStruct("GetValueAsString_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    }),
  }
  {
  }
  return output
}

func (p *GetValueAsStringResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetValueAsStringResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Success = NewBoolString()
  err1224 := p.Success.Read(iprot)
  if err1224 != nil { return thrift.NewTProtocolExceptionReadStruct("p.SuccessBool_String", err1224); }
  return err
}

func (p *GetValueAsStringResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetValueAsStringResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetValueAsString_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetValueAsStringResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = p.Success.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("Bool_String", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *GetValueAsStringResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetValueAsStringResult) TStructName() string {
  return "GetValueAsStringResult"
}

func (p *GetValueAsStringResult) ThriftName() string {
  return "GetValueAsString_result"
}

func (p *GetValueAsStringResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetValueAsStringResult(%+v)", *p)
}

func (p *GetValueAsStringResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetValueAsStringResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetValueAsStringResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *GetValueAsStringResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    })
}

/**
 * Attributes:
 *  - _id
 */
type GetValueListSelectionStringArgs struct {
  thrift.TStruct
  _id *RemoteValueID "_id"; // 1
}

func NewGetValueListSelectionStringArgs() *GetValueListSelectionStringArgs {
  output := &GetValueListSelectionStringArgs{
    TStruct:thrift.NewTStruct("GetValueListSelection_String_args", []thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetValueListSelectionStringArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_id" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetValueListSelectionStringArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p._id = NewRemoteValueID()
  err1227 := p._id.Read(iprot)
  if err1227 != nil { return thrift.NewTProtocolExceptionReadStruct("p._idRemoteValueID", err1227); }
  return err
}

func (p *GetValueListSelectionStringArgs) ReadField_id(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetValueListSelectionStringArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetValueListSelection_String_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetValueListSelectionStringArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._id != nil {
    err = oprot.WriteFieldBegin("_id", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
    err = p._id.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RemoteValueID", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
  }
  return err
}

func (p *GetValueListSelectionStringArgs) WriteField_id(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetValueListSelectionStringArgs) TStructName() string {
  return "GetValueListSelectionStringArgs"
}

func (p *GetValueListSelectionStringArgs) ThriftName() string {
  return "GetValueListSelection_String_args"
}

func (p *GetValueListSelectionStringArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetValueListSelectionStringArgs(%+v)", *p)
}

func (p *GetValueListSelectionStringArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetValueListSelectionStringArgs)
  if !ok {
    return 0, false
  }
  if cmp, ok := p._id.CompareTo(data._id); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetValueListSelectionStringArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._id
  }
  return nil
}

func (p *GetValueListSelectionStringArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - Success
 */
type GetValueListSelectionStringResult struct {
  thrift.TStruct
  Success *BoolString "success"; // 0
}

func NewGetValueListSelectionStringResult() *GetValueListSelectionStringResult {
  output := &GetValueListSelectionStringResult{
    TStruct:thrift.NewTStruct("GetValueListSelection_String_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    }),
  }
  {
  }
  return output
}

func (p *GetValueListSelectionStringResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetValueListSelectionStringResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Success = NewBoolString()
  err1230 := p.Success.Read(iprot)
  if err1230 != nil { return thrift.NewTProtocolExceptionReadStruct("p.SuccessBool_String", err1230); }
  return err
}

func (p *GetValueListSelectionStringResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetValueListSelectionStringResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetValueListSelection_String_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetValueListSelectionStringResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = p.Success.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("Bool_String", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *GetValueListSelectionStringResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetValueListSelectionStringResult) TStructName() string {
  return "GetValueListSelectionStringResult"
}

func (p *GetValueListSelectionStringResult) ThriftName() string {
  return "GetValueListSelection_String_result"
}

func (p *GetValueListSelectionStringResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetValueListSelectionStringResult(%+v)", *p)
}

func (p *GetValueListSelectionStringResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetValueListSelectionStringResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetValueListSelectionStringResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *GetValueListSelectionStringResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    })
}

/**
 * Attributes:
 *  - _id
 */
type GetValueListSelectionInt32Args struct {
  thrift.TStruct
  _id *RemoteValueID "_id"; // 1
}

func NewGetValueListSelectionInt32Args() *GetValueListSelectionInt32Args {
  output := &GetValueListSelectionInt32Args{
    TStruct:thrift.NewTStruct("GetValueListSelection_Int32_args", []thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetValueListSelectionInt32Args) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_id" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetValueListSelectionInt32Args) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p._id = NewRemoteValueID()
  err1233 := p._id.Read(iprot)
  if err1233 != nil { return thrift.NewTProtocolExceptionReadStruct("p._idRemoteValueID", err1233); }
  return err
}

func (p *GetValueListSelectionInt32Args) ReadField_id(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetValueListSelectionInt32Args) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetValueListSelection_Int32_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetValueListSelectionInt32Args) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._id != nil {
    err = oprot.WriteFieldBegin("_id", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
    err = p._id.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RemoteValueID", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
  }
  return err
}

func (p *GetValueListSelectionInt32Args) WriteField_id(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetValueListSelectionInt32Args) TStructName() string {
  return "GetValueListSelectionInt32Args"
}

func (p *GetValueListSelectionInt32Args) ThriftName() string {
  return "GetValueListSelection_Int32_args"
}

func (p *GetValueListSelectionInt32Args) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetValueListSelectionInt32Args(%+v)", *p)
}

func (p *GetValueListSelectionInt32Args) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetValueListSelectionInt32Args)
  if !ok {
    return 0, false
  }
  if cmp, ok := p._id.CompareTo(data._id); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetValueListSelectionInt32Args) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._id
  }
  return nil
}

func (p *GetValueListSelectionInt32Args) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - Success
 */
type GetValueListSelectionInt32Result struct {
  thrift.TStruct
  Success *BoolInt "success"; // 0
}

func NewGetValueListSelectionInt32Result() *GetValueListSelectionInt32Result {
  output := &GetValueListSelectionInt32Result{
    TStruct:thrift.NewTStruct("GetValueListSelection_Int32_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    }),
  }
  {
  }
  return output
}

func (p *GetValueListSelectionInt32Result) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetValueListSelectionInt32Result) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Success = NewBoolInt()
  err1236 := p.Success.Read(iprot)
  if err1236 != nil { return thrift.NewTProtocolExceptionReadStruct("p.SuccessBool_Int", err1236); }
  return err
}

func (p *GetValueListSelectionInt32Result) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetValueListSelectionInt32Result) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetValueListSelection_Int32_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetValueListSelectionInt32Result) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = p.Success.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("Bool_Int", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *GetValueListSelectionInt32Result) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetValueListSelectionInt32Result) TStructName() string {
  return "GetValueListSelectionInt32Result"
}

func (p *GetValueListSelectionInt32Result) ThriftName() string {
  return "GetValueListSelection_Int32_result"
}

func (p *GetValueListSelectionInt32Result) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetValueListSelectionInt32Result(%+v)", *p)
}

func (p *GetValueListSelectionInt32Result) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetValueListSelectionInt32Result)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetValueListSelectionInt32Result) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *GetValueListSelectionInt32Result) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    })
}

/**
 * Attributes:
 *  - _id
 */
type GetValueListItemsArgs struct {
  thrift.TStruct
  _id *RemoteValueID "_id"; // 1
}

func NewGetValueListItemsArgs() *GetValueListItemsArgs {
  output := &GetValueListItemsArgs{
    TStruct:thrift.NewTStruct("GetValueListItems_args", []thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetValueListItemsArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_id" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetValueListItemsArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p._id = NewRemoteValueID()
  err1239 := p._id.Read(iprot)
  if err1239 != nil { return thrift.NewTProtocolExceptionReadStruct("p._idRemoteValueID", err1239); }
  return err
}

func (p *GetValueListItemsArgs) ReadField_id(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetValueListItemsArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetValueListItems_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetValueListItemsArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._id != nil {
    err = oprot.WriteFieldBegin("_id", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
    err = p._id.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RemoteValueID", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
  }
  return err
}

func (p *GetValueListItemsArgs) WriteField_id(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetValueListItemsArgs) TStructName() string {
  return "GetValueListItemsArgs"
}

func (p *GetValueListItemsArgs) ThriftName() string {
  return "GetValueListItems_args"
}

func (p *GetValueListItemsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetValueListItemsArgs(%+v)", *p)
}

func (p *GetValueListItemsArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetValueListItemsArgs)
  if !ok {
    return 0, false
  }
  if cmp, ok := p._id.CompareTo(data._id); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetValueListItemsArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._id
  }
  return nil
}

func (p *GetValueListItemsArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - Success
 */
type GetValueListItemsResult struct {
  thrift.TStruct
  Success *BoolListString "success"; // 0
}

func NewGetValueListItemsResult() *GetValueListItemsResult {
  output := &GetValueListItemsResult{
    TStruct:thrift.NewTStruct("GetValueListItems_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    }),
  }
  {
  }
  return output
}

func (p *GetValueListItemsResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetValueListItemsResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Success = NewBoolListString()
  err1242 := p.Success.Read(iprot)
  if err1242 != nil { return thrift.NewTProtocolExceptionReadStruct("p.SuccessBool_ListString", err1242); }
  return err
}

func (p *GetValueListItemsResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetValueListItemsResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetValueListItems_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetValueListItemsResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = p.Success.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("Bool_ListString", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *GetValueListItemsResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetValueListItemsResult) TStructName() string {
  return "GetValueListItemsResult"
}

func (p *GetValueListItemsResult) ThriftName() string {
  return "GetValueListItems_result"
}

func (p *GetValueListItemsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetValueListItemsResult(%+v)", *p)
}

func (p *GetValueListItemsResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetValueListItemsResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetValueListItemsResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *GetValueListItemsResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    })
}

/**
 * Attributes:
 *  - _id
 */
type GetValueFloatPrecisionArgs struct {
  thrift.TStruct
  _id *RemoteValueID "_id"; // 1
}

func NewGetValueFloatPrecisionArgs() *GetValueFloatPrecisionArgs {
  output := &GetValueFloatPrecisionArgs{
    TStruct:thrift.NewTStruct("GetValueFloatPrecision_args", []thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetValueFloatPrecisionArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_id" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetValueFloatPrecisionArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p._id = NewRemoteValueID()
  err1245 := p._id.Read(iprot)
  if err1245 != nil { return thrift.NewTProtocolExceptionReadStruct("p._idRemoteValueID", err1245); }
  return err
}

func (p *GetValueFloatPrecisionArgs) ReadField_id(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetValueFloatPrecisionArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetValueFloatPrecision_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetValueFloatPrecisionArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._id != nil {
    err = oprot.WriteFieldBegin("_id", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
    err = p._id.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RemoteValueID", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
  }
  return err
}

func (p *GetValueFloatPrecisionArgs) WriteField_id(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetValueFloatPrecisionArgs) TStructName() string {
  return "GetValueFloatPrecisionArgs"
}

func (p *GetValueFloatPrecisionArgs) ThriftName() string {
  return "GetValueFloatPrecision_args"
}

func (p *GetValueFloatPrecisionArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetValueFloatPrecisionArgs(%+v)", *p)
}

func (p *GetValueFloatPrecisionArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetValueFloatPrecisionArgs)
  if !ok {
    return 0, false
  }
  if cmp, ok := p._id.CompareTo(data._id); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetValueFloatPrecisionArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._id
  }
  return nil
}

func (p *GetValueFloatPrecisionArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - Success
 */
type GetValueFloatPrecisionResult struct {
  thrift.TStruct
  Success *BoolUInt8 "success"; // 0
}

func NewGetValueFloatPrecisionResult() *GetValueFloatPrecisionResult {
  output := &GetValueFloatPrecisionResult{
    TStruct:thrift.NewTStruct("GetValueFloatPrecision_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    }),
  }
  {
  }
  return output
}

func (p *GetValueFloatPrecisionResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetValueFloatPrecisionResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Success = NewBoolUInt8()
  err1248 := p.Success.Read(iprot)
  if err1248 != nil { return thrift.NewTProtocolExceptionReadStruct("p.SuccessBool_UInt8", err1248); }
  return err
}

func (p *GetValueFloatPrecisionResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetValueFloatPrecisionResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetValueFloatPrecision_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetValueFloatPrecisionResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = p.Success.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("Bool_UInt8", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *GetValueFloatPrecisionResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetValueFloatPrecisionResult) TStructName() string {
  return "GetValueFloatPrecisionResult"
}

func (p *GetValueFloatPrecisionResult) ThriftName() string {
  return "GetValueFloatPrecision_result"
}

func (p *GetValueFloatPrecisionResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetValueFloatPrecisionResult(%+v)", *p)
}

func (p *GetValueFloatPrecisionResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetValueFloatPrecisionResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetValueFloatPrecisionResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *GetValueFloatPrecisionResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    })
}

/**
 * Attributes:
 *  - _id
 *  - _value
 */
type SetValueBoolArgs struct {
  thrift.TStruct
  _id *RemoteValueID "_id"; // 1
  _value bool "_value"; // 2
}

func NewSetValueBoolArgs() *SetValueBoolArgs {
  output := &SetValueBoolArgs{
    TStruct:thrift.NewTStruct("SetValue_Bool_args", []thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    thrift.NewTField("_value", thrift.BOOL, 2),
    }),
  }
  {
  }
  return output
}

func (p *SetValueBoolArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_id" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_value" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SetValueBoolArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p._id = NewRemoteValueID()
  err1251 := p._id.Read(iprot)
  if err1251 != nil { return thrift.NewTProtocolExceptionReadStruct("p._idRemoteValueID", err1251); }
  return err
}

func (p *SetValueBoolArgs) ReadField_id(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *SetValueBoolArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1252, err1253 := iprot.ReadBool()
  if err1253 != nil { return thrift.NewTProtocolExceptionReadField(2, "_value", p.ThriftName(), err1253); }
  p._value = v1252
  return err
}

func (p *SetValueBoolArgs) ReadField_value(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *SetValueBoolArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SetValue_Bool_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SetValueBoolArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._id != nil {
    err = oprot.WriteFieldBegin("_id", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
    err = p._id.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RemoteValueID", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
  }
  return err
}

func (p *SetValueBoolArgs) WriteField_id(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *SetValueBoolArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_value", thrift.BOOL, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_value", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p._value))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_value", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_value", p.ThriftName(), err); }
  return err
}

func (p *SetValueBoolArgs) WriteField_value(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *SetValueBoolArgs) TStructName() string {
  return "SetValueBoolArgs"
}

func (p *SetValueBoolArgs) ThriftName() string {
  return "SetValue_Bool_args"
}

func (p *SetValueBoolArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetValueBoolArgs(%+v)", *p)
}

func (p *SetValueBoolArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SetValueBoolArgs)
  if !ok {
    return 0, false
  }
  if cmp, ok := p._id.CompareTo(data._id); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp := thrift.CompareBool(p._value, data._value); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *SetValueBoolArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._id
  case 2: return p._value
  }
  return nil
}

func (p *SetValueBoolArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    thrift.NewTField("_value", thrift.BOOL, 2),
    })
}

/**
 * Attributes:
 *  - Success
 */
type SetValueBoolResult struct {
  thrift.TStruct
  Success bool "success"; // 0
}

func NewSetValueBoolResult() *SetValueBoolResult {
  output := &SetValueBoolResult{
    TStruct:thrift.NewTStruct("SetValue_Bool_result", []thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    }),
  }
  {
  }
  return output
}

func (p *SetValueBoolResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SetValueBoolResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1254, err1255 := iprot.ReadBool()
  if err1255 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1255); }
  p.Success = v1254
  return err
}

func (p *SetValueBoolResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *SetValueBoolResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SetValue_Bool_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SetValueBoolResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BOOL, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *SetValueBoolResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *SetValueBoolResult) TStructName() string {
  return "SetValueBoolResult"
}

func (p *SetValueBoolResult) ThriftName() string {
  return "SetValue_Bool_result"
}

func (p *SetValueBoolResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetValueBoolResult(%+v)", *p)
}

func (p *SetValueBoolResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SetValueBoolResult)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Success, data.Success); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *SetValueBoolResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *SetValueBoolResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    })
}

/**
 * Attributes:
 *  - _id
 *  - _value
 */
type SetValueUInt8Args struct {
  thrift.TStruct
  _id *RemoteValueID "_id"; // 1
  _value byte "_value"; // 2
}

func NewSetValueUInt8Args() *SetValueUInt8Args {
  output := &SetValueUInt8Args{
    TStruct:thrift.NewTStruct("SetValue_UInt8_args", []thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    thrift.NewTField("_value", thrift.BYTE, 2),
    }),
  }
  {
  }
  return output
}

func (p *SetValueUInt8Args) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_id" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_value" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SetValueUInt8Args) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p._id = NewRemoteValueID()
  err1258 := p._id.Read(iprot)
  if err1258 != nil { return thrift.NewTProtocolExceptionReadStruct("p._idRemoteValueID", err1258); }
  return err
}

func (p *SetValueUInt8Args) ReadField_id(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *SetValueUInt8Args) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1259, err1260 := iprot.ReadByte()
  if err1260 != nil { return thrift.NewTProtocolExceptionReadField(2, "_value", p.ThriftName(), err1260); }
  p._value = v1259
  return err
}

func (p *SetValueUInt8Args) ReadField_value(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *SetValueUInt8Args) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SetValue_UInt8_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SetValueUInt8Args) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._id != nil {
    err = oprot.WriteFieldBegin("_id", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
    err = p._id.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RemoteValueID", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
  }
  return err
}

func (p *SetValueUInt8Args) WriteField_id(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *SetValueUInt8Args) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_value", thrift.BYTE, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_value", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._value))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_value", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_value", p.ThriftName(), err); }
  return err
}

func (p *SetValueUInt8Args) WriteField_value(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *SetValueUInt8Args) TStructName() string {
  return "SetValueUInt8Args"
}

func (p *SetValueUInt8Args) ThriftName() string {
  return "SetValue_UInt8_args"
}

func (p *SetValueUInt8Args) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetValueUInt8Args(%+v)", *p)
}

func (p *SetValueUInt8Args) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SetValueUInt8Args)
  if !ok {
    return 0, false
  }
  if cmp, ok := p._id.CompareTo(data._id); !ok || cmp != 0 {
    return cmp, ok
  }
  if p._value != data._value {
    if p._value < data._value {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *SetValueUInt8Args) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._id
  case 2: return p._value
  }
  return nil
}

func (p *SetValueUInt8Args) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    thrift.NewTField("_value", thrift.BYTE, 2),
    })
}

/**
 * Attributes:
 *  - Success
 */
type SetValueUInt8Result struct {
  thrift.TStruct
  Success bool "success"; // 0
}

func NewSetValueUInt8Result() *SetValueUInt8Result {
  output := &SetValueUInt8Result{
    TStruct:thrift.NewTStruct("SetValue_UInt8_result", []thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    }),
  }
  {
  }
  return output
}

func (p *SetValueUInt8Result) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SetValueUInt8Result) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1261, err1262 := iprot.ReadBool()
  if err1262 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1262); }
  p.Success = v1261
  return err
}

func (p *SetValueUInt8Result) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *SetValueUInt8Result) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SetValue_UInt8_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SetValueUInt8Result) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BOOL, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *SetValueUInt8Result) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *SetValueUInt8Result) TStructName() string {
  return "SetValueUInt8Result"
}

func (p *SetValueUInt8Result) ThriftName() string {
  return "SetValue_UInt8_result"
}

func (p *SetValueUInt8Result) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetValueUInt8Result(%+v)", *p)
}

func (p *SetValueUInt8Result) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SetValueUInt8Result)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Success, data.Success); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *SetValueUInt8Result) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *SetValueUInt8Result) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    })
}

/**
 * Attributes:
 *  - _id
 *  - _value
 */
type SetValueFloatArgs struct {
  thrift.TStruct
  _id *RemoteValueID "_id"; // 1
  _value float64 "_value"; // 2
}

func NewSetValueFloatArgs() *SetValueFloatArgs {
  output := &SetValueFloatArgs{
    TStruct:thrift.NewTStruct("SetValue_Float_args", []thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    thrift.NewTField("_value", thrift.DOUBLE, 2),
    }),
  }
  {
  }
  return output
}

func (p *SetValueFloatArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_id" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_value" {
      if fieldTypeId == thrift.DOUBLE {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SetValueFloatArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p._id = NewRemoteValueID()
  err1265 := p._id.Read(iprot)
  if err1265 != nil { return thrift.NewTProtocolExceptionReadStruct("p._idRemoteValueID", err1265); }
  return err
}

func (p *SetValueFloatArgs) ReadField_id(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *SetValueFloatArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1266, err1267 := iprot.ReadDouble()
  if err1267 != nil { return thrift.NewTProtocolExceptionReadField(2, "_value", p.ThriftName(), err1267); }
  p._value = v1266
  return err
}

func (p *SetValueFloatArgs) ReadField_value(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *SetValueFloatArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SetValue_Float_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SetValueFloatArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._id != nil {
    err = oprot.WriteFieldBegin("_id", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
    err = p._id.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RemoteValueID", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
  }
  return err
}

func (p *SetValueFloatArgs) WriteField_id(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *SetValueFloatArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_value", thrift.DOUBLE, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_value", p.ThriftName(), err); }
  err = oprot.WriteDouble(float64(p._value))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_value", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_value", p.ThriftName(), err); }
  return err
}

func (p *SetValueFloatArgs) WriteField_value(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *SetValueFloatArgs) TStructName() string {
  return "SetValueFloatArgs"
}

func (p *SetValueFloatArgs) ThriftName() string {
  return "SetValue_Float_args"
}

func (p *SetValueFloatArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetValueFloatArgs(%+v)", *p)
}

func (p *SetValueFloatArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SetValueFloatArgs)
  if !ok {
    return 0, false
  }
  if cmp, ok := p._id.CompareTo(data._id); !ok || cmp != 0 {
    return cmp, ok
  }
  if p._value != data._value {
    if p._value < data._value {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *SetValueFloatArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._id
  case 2: return p._value
  }
  return nil
}

func (p *SetValueFloatArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    thrift.NewTField("_value", thrift.DOUBLE, 2),
    })
}

/**
 * Attributes:
 *  - Success
 */
type SetValueFloatResult struct {
  thrift.TStruct
  Success bool "success"; // 0
}

func NewSetValueFloatResult() *SetValueFloatResult {
  output := &SetValueFloatResult{
    TStruct:thrift.NewTStruct("SetValue_Float_result", []thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    }),
  }
  {
  }
  return output
}

func (p *SetValueFloatResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SetValueFloatResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1268, err1269 := iprot.ReadBool()
  if err1269 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1269); }
  p.Success = v1268
  return err
}

func (p *SetValueFloatResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *SetValueFloatResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SetValue_Float_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SetValueFloatResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BOOL, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *SetValueFloatResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *SetValueFloatResult) TStructName() string {
  return "SetValueFloatResult"
}

func (p *SetValueFloatResult) ThriftName() string {
  return "SetValue_Float_result"
}

func (p *SetValueFloatResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetValueFloatResult(%+v)", *p)
}

func (p *SetValueFloatResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SetValueFloatResult)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Success, data.Success); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *SetValueFloatResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *SetValueFloatResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    })
}

/**
 * Attributes:
 *  - _id
 *  - _value
 */
type SetValueInt32Args struct {
  thrift.TStruct
  _id *RemoteValueID "_id"; // 1
  _value int32 "_value"; // 2
}

func NewSetValueInt32Args() *SetValueInt32Args {
  output := &SetValueInt32Args{
    TStruct:thrift.NewTStruct("SetValue_Int32_args", []thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    thrift.NewTField("_value", thrift.I32, 2),
    }),
  }
  {
  }
  return output
}

func (p *SetValueInt32Args) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_id" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_value" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SetValueInt32Args) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p._id = NewRemoteValueID()
  err1272 := p._id.Read(iprot)
  if err1272 != nil { return thrift.NewTProtocolExceptionReadStruct("p._idRemoteValueID", err1272); }
  return err
}

func (p *SetValueInt32Args) ReadField_id(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *SetValueInt32Args) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1273, err1274 := iprot.ReadI32()
  if err1274 != nil { return thrift.NewTProtocolExceptionReadField(2, "_value", p.ThriftName(), err1274); }
  p._value = v1273
  return err
}

func (p *SetValueInt32Args) ReadField_value(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *SetValueInt32Args) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SetValue_Int32_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SetValueInt32Args) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._id != nil {
    err = oprot.WriteFieldBegin("_id", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
    err = p._id.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RemoteValueID", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
  }
  return err
}

func (p *SetValueInt32Args) WriteField_id(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *SetValueInt32Args) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_value", thrift.I32, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_value", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._value))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_value", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_value", p.ThriftName(), err); }
  return err
}

func (p *SetValueInt32Args) WriteField_value(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *SetValueInt32Args) TStructName() string {
  return "SetValueInt32Args"
}

func (p *SetValueInt32Args) ThriftName() string {
  return "SetValue_Int32_args"
}

func (p *SetValueInt32Args) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetValueInt32Args(%+v)", *p)
}

func (p *SetValueInt32Args) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SetValueInt32Args)
  if !ok {
    return 0, false
  }
  if cmp, ok := p._id.CompareTo(data._id); !ok || cmp != 0 {
    return cmp, ok
  }
  if p._value != data._value {
    if p._value < data._value {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *SetValueInt32Args) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._id
  case 2: return p._value
  }
  return nil
}

func (p *SetValueInt32Args) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    thrift.NewTField("_value", thrift.I32, 2),
    })
}

/**
 * Attributes:
 *  - Success
 */
type SetValueInt32Result struct {
  thrift.TStruct
  Success bool "success"; // 0
}

func NewSetValueInt32Result() *SetValueInt32Result {
  output := &SetValueInt32Result{
    TStruct:thrift.NewTStruct("SetValue_Int32_result", []thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    }),
  }
  {
  }
  return output
}

func (p *SetValueInt32Result) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SetValueInt32Result) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1275, err1276 := iprot.ReadBool()
  if err1276 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1276); }
  p.Success = v1275
  return err
}

func (p *SetValueInt32Result) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *SetValueInt32Result) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SetValue_Int32_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SetValueInt32Result) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BOOL, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *SetValueInt32Result) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *SetValueInt32Result) TStructName() string {
  return "SetValueInt32Result"
}

func (p *SetValueInt32Result) ThriftName() string {
  return "SetValue_Int32_result"
}

func (p *SetValueInt32Result) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetValueInt32Result(%+v)", *p)
}

func (p *SetValueInt32Result) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SetValueInt32Result)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Success, data.Success); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *SetValueInt32Result) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *SetValueInt32Result) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    })
}

/**
 * Attributes:
 *  - _id
 *  - _value
 */
type SetValueInt16Args struct {
  thrift.TStruct
  _id *RemoteValueID "_id"; // 1
  _value int16 "_value"; // 2
}

func NewSetValueInt16Args() *SetValueInt16Args {
  output := &SetValueInt16Args{
    TStruct:thrift.NewTStruct("SetValue_Int16_args", []thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    thrift.NewTField("_value", thrift.I16, 2),
    }),
  }
  {
  }
  return output
}

func (p *SetValueInt16Args) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_id" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_value" {
      if fieldTypeId == thrift.I16 {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SetValueInt16Args) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p._id = NewRemoteValueID()
  err1279 := p._id.Read(iprot)
  if err1279 != nil { return thrift.NewTProtocolExceptionReadStruct("p._idRemoteValueID", err1279); }
  return err
}

func (p *SetValueInt16Args) ReadField_id(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *SetValueInt16Args) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1280, err1281 := iprot.ReadI16()
  if err1281 != nil { return thrift.NewTProtocolExceptionReadField(2, "_value", p.ThriftName(), err1281); }
  p._value = v1280
  return err
}

func (p *SetValueInt16Args) ReadField_value(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *SetValueInt16Args) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SetValue_Int16_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SetValueInt16Args) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._id != nil {
    err = oprot.WriteFieldBegin("_id", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
    err = p._id.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RemoteValueID", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
  }
  return err
}

func (p *SetValueInt16Args) WriteField_id(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *SetValueInt16Args) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_value", thrift.I16, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_value", p.ThriftName(), err); }
  err = oprot.WriteI16(int16(p._value))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_value", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_value", p.ThriftName(), err); }
  return err
}

func (p *SetValueInt16Args) WriteField_value(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *SetValueInt16Args) TStructName() string {
  return "SetValueInt16Args"
}

func (p *SetValueInt16Args) ThriftName() string {
  return "SetValue_Int16_args"
}

func (p *SetValueInt16Args) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetValueInt16Args(%+v)", *p)
}

func (p *SetValueInt16Args) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SetValueInt16Args)
  if !ok {
    return 0, false
  }
  if cmp, ok := p._id.CompareTo(data._id); !ok || cmp != 0 {
    return cmp, ok
  }
  if p._value != data._value {
    if p._value < data._value {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *SetValueInt16Args) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._id
  case 2: return p._value
  }
  return nil
}

func (p *SetValueInt16Args) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    thrift.NewTField("_value", thrift.I16, 2),
    })
}

/**
 * Attributes:
 *  - Success
 */
type SetValueInt16Result struct {
  thrift.TStruct
  Success bool "success"; // 0
}

func NewSetValueInt16Result() *SetValueInt16Result {
  output := &SetValueInt16Result{
    TStruct:thrift.NewTStruct("SetValue_Int16_result", []thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    }),
  }
  {
  }
  return output
}

func (p *SetValueInt16Result) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SetValueInt16Result) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1282, err1283 := iprot.ReadBool()
  if err1283 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1283); }
  p.Success = v1282
  return err
}

func (p *SetValueInt16Result) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *SetValueInt16Result) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SetValue_Int16_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SetValueInt16Result) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BOOL, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *SetValueInt16Result) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *SetValueInt16Result) TStructName() string {
  return "SetValueInt16Result"
}

func (p *SetValueInt16Result) ThriftName() string {
  return "SetValue_Int16_result"
}

func (p *SetValueInt16Result) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetValueInt16Result(%+v)", *p)
}

func (p *SetValueInt16Result) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SetValueInt16Result)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Success, data.Success); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *SetValueInt16Result) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *SetValueInt16Result) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    })
}

/**
 * Attributes:
 *  - _id
 *  - _value
 */
type SetValueStringArgs struct {
  thrift.TStruct
  _id *RemoteValueID "_id"; // 1
  _value string "_value"; // 2
}

func NewSetValueStringArgs() *SetValueStringArgs {
  output := &SetValueStringArgs{
    TStruct:thrift.NewTStruct("SetValue_String_args", []thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    thrift.NewTField("_value", thrift.STRING, 2),
    }),
  }
  {
  }
  return output
}

func (p *SetValueStringArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_id" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_value" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SetValueStringArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p._id = NewRemoteValueID()
  err1286 := p._id.Read(iprot)
  if err1286 != nil { return thrift.NewTProtocolExceptionReadStruct("p._idRemoteValueID", err1286); }
  return err
}

func (p *SetValueStringArgs) ReadField_id(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *SetValueStringArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1287, err1288 := iprot.ReadString()
  if err1288 != nil { return thrift.NewTProtocolExceptionReadField(2, "_value", p.ThriftName(), err1288); }
  p._value = v1287
  return err
}

func (p *SetValueStringArgs) ReadField_value(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *SetValueStringArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SetValue_String_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SetValueStringArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._id != nil {
    err = oprot.WriteFieldBegin("_id", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
    err = p._id.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RemoteValueID", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
  }
  return err
}

func (p *SetValueStringArgs) WriteField_id(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *SetValueStringArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_value", thrift.STRING, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_value", p.ThriftName(), err); }
  err = oprot.WriteString(string(p._value))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_value", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_value", p.ThriftName(), err); }
  return err
}

func (p *SetValueStringArgs) WriteField_value(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *SetValueStringArgs) TStructName() string {
  return "SetValueStringArgs"
}

func (p *SetValueStringArgs) ThriftName() string {
  return "SetValue_String_args"
}

func (p *SetValueStringArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetValueStringArgs(%+v)", *p)
}

func (p *SetValueStringArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SetValueStringArgs)
  if !ok {
    return 0, false
  }
  if cmp, ok := p._id.CompareTo(data._id); !ok || cmp != 0 {
    return cmp, ok
  }
  if p._value != data._value {
    if p._value < data._value {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *SetValueStringArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._id
  case 2: return p._value
  }
  return nil
}

func (p *SetValueStringArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    thrift.NewTField("_value", thrift.STRING, 2),
    })
}

/**
 * Attributes:
 *  - Success
 */
type SetValueStringResult struct {
  thrift.TStruct
  Success bool "success"; // 0
}

func NewSetValueStringResult() *SetValueStringResult {
  output := &SetValueStringResult{
    TStruct:thrift.NewTStruct("SetValue_String_result", []thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    }),
  }
  {
  }
  return output
}

func (p *SetValueStringResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SetValueStringResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1289, err1290 := iprot.ReadBool()
  if err1290 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1290); }
  p.Success = v1289
  return err
}

func (p *SetValueStringResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *SetValueStringResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SetValue_String_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SetValueStringResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BOOL, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *SetValueStringResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *SetValueStringResult) TStructName() string {
  return "SetValueStringResult"
}

func (p *SetValueStringResult) ThriftName() string {
  return "SetValue_String_result"
}

func (p *SetValueStringResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetValueStringResult(%+v)", *p)
}

func (p *SetValueStringResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SetValueStringResult)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Success, data.Success); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *SetValueStringResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *SetValueStringResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    })
}

/**
 * Attributes:
 *  - _id
 *  - _selectedItem
 */
type SetValueListSelectionArgs struct {
  thrift.TStruct
  _id *RemoteValueID "_id"; // 1
  _selectedItem string "_selectedItem"; // 2
}

func NewSetValueListSelectionArgs() *SetValueListSelectionArgs {
  output := &SetValueListSelectionArgs{
    TStruct:thrift.NewTStruct("SetValueListSelection_args", []thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    thrift.NewTField("_selectedItem", thrift.STRING, 2),
    }),
  }
  {
  }
  return output
}

func (p *SetValueListSelectionArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_id" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_selectedItem" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SetValueListSelectionArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p._id = NewRemoteValueID()
  err1293 := p._id.Read(iprot)
  if err1293 != nil { return thrift.NewTProtocolExceptionReadStruct("p._idRemoteValueID", err1293); }
  return err
}

func (p *SetValueListSelectionArgs) ReadField_id(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *SetValueListSelectionArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1294, err1295 := iprot.ReadString()
  if err1295 != nil { return thrift.NewTProtocolExceptionReadField(2, "_selectedItem", p.ThriftName(), err1295); }
  p._selectedItem = v1294
  return err
}

func (p *SetValueListSelectionArgs) ReadField_selectedItem(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *SetValueListSelectionArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SetValueListSelection_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SetValueListSelectionArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._id != nil {
    err = oprot.WriteFieldBegin("_id", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
    err = p._id.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RemoteValueID", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
  }
  return err
}

func (p *SetValueListSelectionArgs) WriteField_id(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *SetValueListSelectionArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_selectedItem", thrift.STRING, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_selectedItem", p.ThriftName(), err); }
  err = oprot.WriteString(string(p._selectedItem))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_selectedItem", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_selectedItem", p.ThriftName(), err); }
  return err
}

func (p *SetValueListSelectionArgs) WriteField_selectedItem(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *SetValueListSelectionArgs) TStructName() string {
  return "SetValueListSelectionArgs"
}

func (p *SetValueListSelectionArgs) ThriftName() string {
  return "SetValueListSelection_args"
}

func (p *SetValueListSelectionArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetValueListSelectionArgs(%+v)", *p)
}

func (p *SetValueListSelectionArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SetValueListSelectionArgs)
  if !ok {
    return 0, false
  }
  if cmp, ok := p._id.CompareTo(data._id); !ok || cmp != 0 {
    return cmp, ok
  }
  if p._selectedItem != data._selectedItem {
    if p._selectedItem < data._selectedItem {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *SetValueListSelectionArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._id
  case 2: return p._selectedItem
  }
  return nil
}

func (p *SetValueListSelectionArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    thrift.NewTField("_selectedItem", thrift.STRING, 2),
    })
}

/**
 * Attributes:
 *  - Success
 */
type SetValueListSelectionResult struct {
  thrift.TStruct
  Success bool "success"; // 0
}

func NewSetValueListSelectionResult() *SetValueListSelectionResult {
  output := &SetValueListSelectionResult{
    TStruct:thrift.NewTStruct("SetValueListSelection_result", []thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    }),
  }
  {
  }
  return output
}

func (p *SetValueListSelectionResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SetValueListSelectionResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1296, err1297 := iprot.ReadBool()
  if err1297 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1297); }
  p.Success = v1296
  return err
}

func (p *SetValueListSelectionResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *SetValueListSelectionResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SetValueListSelection_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SetValueListSelectionResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BOOL, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *SetValueListSelectionResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *SetValueListSelectionResult) TStructName() string {
  return "SetValueListSelectionResult"
}

func (p *SetValueListSelectionResult) ThriftName() string {
  return "SetValueListSelection_result"
}

func (p *SetValueListSelectionResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetValueListSelectionResult(%+v)", *p)
}

func (p *SetValueListSelectionResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SetValueListSelectionResult)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Success, data.Success); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *SetValueListSelectionResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *SetValueListSelectionResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    })
}

/**
 * Attributes:
 *  - _id
 */
type PressButtonArgs struct {
  thrift.TStruct
  _id *RemoteValueID "_id"; // 1
}

func NewPressButtonArgs() *PressButtonArgs {
  output := &PressButtonArgs{
    TStruct:thrift.NewTStruct("PressButton_args", []thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *PressButtonArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_id" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *PressButtonArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p._id = NewRemoteValueID()
  err1300 := p._id.Read(iprot)
  if err1300 != nil { return thrift.NewTProtocolExceptionReadStruct("p._idRemoteValueID", err1300); }
  return err
}

func (p *PressButtonArgs) ReadField_id(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *PressButtonArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("PressButton_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *PressButtonArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._id != nil {
    err = oprot.WriteFieldBegin("_id", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
    err = p._id.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RemoteValueID", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
  }
  return err
}

func (p *PressButtonArgs) WriteField_id(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *PressButtonArgs) TStructName() string {
  return "PressButtonArgs"
}

func (p *PressButtonArgs) ThriftName() string {
  return "PressButton_args"
}

func (p *PressButtonArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PressButtonArgs(%+v)", *p)
}

func (p *PressButtonArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*PressButtonArgs)
  if !ok {
    return 0, false
  }
  if cmp, ok := p._id.CompareTo(data._id); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *PressButtonArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._id
  }
  return nil
}

func (p *PressButtonArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - Success
 */
type PressButtonResult struct {
  thrift.TStruct
  Success bool "success"; // 0
}

func NewPressButtonResult() *PressButtonResult {
  output := &PressButtonResult{
    TStruct:thrift.NewTStruct("PressButton_result", []thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    }),
  }
  {
  }
  return output
}

func (p *PressButtonResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *PressButtonResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1301, err1302 := iprot.ReadBool()
  if err1302 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1302); }
  p.Success = v1301
  return err
}

func (p *PressButtonResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *PressButtonResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("PressButton_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *PressButtonResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BOOL, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *PressButtonResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *PressButtonResult) TStructName() string {
  return "PressButtonResult"
}

func (p *PressButtonResult) ThriftName() string {
  return "PressButton_result"
}

func (p *PressButtonResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PressButtonResult(%+v)", *p)
}

func (p *PressButtonResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*PressButtonResult)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Success, data.Success); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *PressButtonResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *PressButtonResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    })
}

/**
 * Attributes:
 *  - _id
 */
type ReleaseButtonArgs struct {
  thrift.TStruct
  _id *RemoteValueID "_id"; // 1
}

func NewReleaseButtonArgs() *ReleaseButtonArgs {
  output := &ReleaseButtonArgs{
    TStruct:thrift.NewTStruct("ReleaseButton_args", []thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *ReleaseButtonArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_id" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *ReleaseButtonArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p._id = NewRemoteValueID()
  err1305 := p._id.Read(iprot)
  if err1305 != nil { return thrift.NewTProtocolExceptionReadStruct("p._idRemoteValueID", err1305); }
  return err
}

func (p *ReleaseButtonArgs) ReadField_id(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *ReleaseButtonArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("ReleaseButton_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *ReleaseButtonArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._id != nil {
    err = oprot.WriteFieldBegin("_id", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
    err = p._id.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RemoteValueID", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
  }
  return err
}

func (p *ReleaseButtonArgs) WriteField_id(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *ReleaseButtonArgs) TStructName() string {
  return "ReleaseButtonArgs"
}

func (p *ReleaseButtonArgs) ThriftName() string {
  return "ReleaseButton_args"
}

func (p *ReleaseButtonArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReleaseButtonArgs(%+v)", *p)
}

func (p *ReleaseButtonArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*ReleaseButtonArgs)
  if !ok {
    return 0, false
  }
  if cmp, ok := p._id.CompareTo(data._id); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *ReleaseButtonArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._id
  }
  return nil
}

func (p *ReleaseButtonArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - Success
 */
type ReleaseButtonResult struct {
  thrift.TStruct
  Success bool "success"; // 0
}

func NewReleaseButtonResult() *ReleaseButtonResult {
  output := &ReleaseButtonResult{
    TStruct:thrift.NewTStruct("ReleaseButton_result", []thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    }),
  }
  {
  }
  return output
}

func (p *ReleaseButtonResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *ReleaseButtonResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1306, err1307 := iprot.ReadBool()
  if err1307 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1307); }
  p.Success = v1306
  return err
}

func (p *ReleaseButtonResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *ReleaseButtonResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("ReleaseButton_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *ReleaseButtonResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BOOL, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *ReleaseButtonResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *ReleaseButtonResult) TStructName() string {
  return "ReleaseButtonResult"
}

func (p *ReleaseButtonResult) ThriftName() string {
  return "ReleaseButton_result"
}

func (p *ReleaseButtonResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReleaseButtonResult(%+v)", *p)
}

func (p *ReleaseButtonResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*ReleaseButtonResult)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Success, data.Success); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *ReleaseButtonResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *ReleaseButtonResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    })
}

/**
 * Attributes:
 *  - _id
 */
type GetNumSwitchPointsArgs struct {
  thrift.TStruct
  _id *RemoteValueID "_id"; // 1
}

func NewGetNumSwitchPointsArgs() *GetNumSwitchPointsArgs {
  output := &GetNumSwitchPointsArgs{
    TStruct:thrift.NewTStruct("GetNumSwitchPoints_args", []thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetNumSwitchPointsArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_id" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNumSwitchPointsArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p._id = NewRemoteValueID()
  err1310 := p._id.Read(iprot)
  if err1310 != nil { return thrift.NewTProtocolExceptionReadStruct("p._idRemoteValueID", err1310); }
  return err
}

func (p *GetNumSwitchPointsArgs) ReadField_id(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetNumSwitchPointsArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetNumSwitchPoints_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNumSwitchPointsArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._id != nil {
    err = oprot.WriteFieldBegin("_id", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
    err = p._id.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RemoteValueID", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
  }
  return err
}

func (p *GetNumSwitchPointsArgs) WriteField_id(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetNumSwitchPointsArgs) TStructName() string {
  return "GetNumSwitchPointsArgs"
}

func (p *GetNumSwitchPointsArgs) ThriftName() string {
  return "GetNumSwitchPoints_args"
}

func (p *GetNumSwitchPointsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetNumSwitchPointsArgs(%+v)", *p)
}

func (p *GetNumSwitchPointsArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetNumSwitchPointsArgs)
  if !ok {
    return 0, false
  }
  if cmp, ok := p._id.CompareTo(data._id); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetNumSwitchPointsArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._id
  }
  return nil
}

func (p *GetNumSwitchPointsArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - Success
 */
type GetNumSwitchPointsResult struct {
  thrift.TStruct
  Success byte "success"; // 0
}

func NewGetNumSwitchPointsResult() *GetNumSwitchPointsResult {
  output := &GetNumSwitchPointsResult{
    TStruct:thrift.NewTStruct("GetNumSwitchPoints_result", []thrift.TField{
    thrift.NewTField("success", thrift.BYTE, 0),
    }),
  }
  {
  }
  return output
}

func (p *GetNumSwitchPointsResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNumSwitchPointsResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1311, err1312 := iprot.ReadByte()
  if err1312 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1312); }
  p.Success = v1311
  return err
}

func (p *GetNumSwitchPointsResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetNumSwitchPointsResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetNumSwitchPoints_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNumSwitchPointsResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BYTE, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *GetNumSwitchPointsResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetNumSwitchPointsResult) TStructName() string {
  return "GetNumSwitchPointsResult"
}

func (p *GetNumSwitchPointsResult) ThriftName() string {
  return "GetNumSwitchPoints_result"
}

func (p *GetNumSwitchPointsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetNumSwitchPointsResult(%+v)", *p)
}

func (p *GetNumSwitchPointsResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetNumSwitchPointsResult)
  if !ok {
    return 0, false
  }
  if p.Success != data.Success {
    if p.Success < data.Success {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetNumSwitchPointsResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *GetNumSwitchPointsResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BYTE, 0),
    })
}

/**
 * Attributes:
 *  - _id
 *  - _hours
 *  - _minutes
 *  - _setback
 */
type SetSwitchPointArgs struct {
  thrift.TStruct
  _id *RemoteValueID "_id"; // 1
  _hours byte "_hours"; // 2
  _minutes byte "_minutes"; // 3
  _setback byte "_setback"; // 4
}

func NewSetSwitchPointArgs() *SetSwitchPointArgs {
  output := &SetSwitchPointArgs{
    TStruct:thrift.NewTStruct("SetSwitchPoint_args", []thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    thrift.NewTField("_hours", thrift.BYTE, 2),
    thrift.NewTField("_minutes", thrift.BYTE, 3),
    thrift.NewTField("_setback", thrift.BYTE, 4),
    }),
  }
  {
  }
  return output
}

func (p *SetSwitchPointArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_id" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_hours" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "_minutes" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 4 || fieldName == "_setback" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SetSwitchPointArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p._id = NewRemoteValueID()
  err1315 := p._id.Read(iprot)
  if err1315 != nil { return thrift.NewTProtocolExceptionReadStruct("p._idRemoteValueID", err1315); }
  return err
}

func (p *SetSwitchPointArgs) ReadField_id(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *SetSwitchPointArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1316, err1317 := iprot.ReadByte()
  if err1317 != nil { return thrift.NewTProtocolExceptionReadField(2, "_hours", p.ThriftName(), err1317); }
  p._hours = v1316
  return err
}

func (p *SetSwitchPointArgs) ReadField_hours(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *SetSwitchPointArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1318, err1319 := iprot.ReadByte()
  if err1319 != nil { return thrift.NewTProtocolExceptionReadField(3, "_minutes", p.ThriftName(), err1319); }
  p._minutes = v1318
  return err
}

func (p *SetSwitchPointArgs) ReadField_minutes(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *SetSwitchPointArgs) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1320, err1321 := iprot.ReadByte()
  if err1321 != nil { return thrift.NewTProtocolExceptionReadField(4, "_setback", p.ThriftName(), err1321); }
  p._setback = v1320
  return err
}

func (p *SetSwitchPointArgs) ReadField_setback(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField4(iprot)
}

func (p *SetSwitchPointArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SetSwitchPoint_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = p.WriteField4(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SetSwitchPointArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._id != nil {
    err = oprot.WriteFieldBegin("_id", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
    err = p._id.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RemoteValueID", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
  }
  return err
}

func (p *SetSwitchPointArgs) WriteField_id(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *SetSwitchPointArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_hours", thrift.BYTE, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_hours", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._hours))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_hours", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_hours", p.ThriftName(), err); }
  return err
}

func (p *SetSwitchPointArgs) WriteField_hours(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *SetSwitchPointArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_minutes", thrift.BYTE, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_minutes", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._minutes))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_minutes", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_minutes", p.ThriftName(), err); }
  return err
}

func (p *SetSwitchPointArgs) WriteField_minutes(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *SetSwitchPointArgs) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_setback", thrift.BYTE, 4)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "_setback", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._setback))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "_setback", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "_setback", p.ThriftName(), err); }
  return err
}

func (p *SetSwitchPointArgs) WriteField_setback(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField4(oprot)
}

func (p *SetSwitchPointArgs) TStructName() string {
  return "SetSwitchPointArgs"
}

func (p *SetSwitchPointArgs) ThriftName() string {
  return "SetSwitchPoint_args"
}

func (p *SetSwitchPointArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetSwitchPointArgs(%+v)", *p)
}

func (p *SetSwitchPointArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SetSwitchPointArgs)
  if !ok {
    return 0, false
  }
  if cmp, ok := p._id.CompareTo(data._id); !ok || cmp != 0 {
    return cmp, ok
  }
  if p._hours != data._hours {
    if p._hours < data._hours {
      return -1, true
    }
    return 1, true
  }
  if p._minutes != data._minutes {
    if p._minutes < data._minutes {
      return -1, true
    }
    return 1, true
  }
  if p._setback != data._setback {
    if p._setback < data._setback {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *SetSwitchPointArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._id
  case 2: return p._hours
  case 3: return p._minutes
  case 4: return p._setback
  }
  return nil
}

func (p *SetSwitchPointArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    thrift.NewTField("_hours", thrift.BYTE, 2),
    thrift.NewTField("_minutes", thrift.BYTE, 3),
    thrift.NewTField("_setback", thrift.BYTE, 4),
    })
}

/**
 * Attributes:
 *  - Success
 */
type SetSwitchPointResult struct {
  thrift.TStruct
  Success bool "success"; // 0
}

func NewSetSwitchPointResult() *SetSwitchPointResult {
  output := &SetSwitchPointResult{
    TStruct:thrift.NewTStruct("SetSwitchPoint_result", []thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    }),
  }
  {
  }
  return output
}

func (p *SetSwitchPointResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SetSwitchPointResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1322, err1323 := iprot.ReadBool()
  if err1323 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1323); }
  p.Success = v1322
  return err
}

func (p *SetSwitchPointResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *SetSwitchPointResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SetSwitchPoint_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SetSwitchPointResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BOOL, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *SetSwitchPointResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *SetSwitchPointResult) TStructName() string {
  return "SetSwitchPointResult"
}

func (p *SetSwitchPointResult) ThriftName() string {
  return "SetSwitchPoint_result"
}

func (p *SetSwitchPointResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetSwitchPointResult(%+v)", *p)
}

func (p *SetSwitchPointResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SetSwitchPointResult)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Success, data.Success); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *SetSwitchPointResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *SetSwitchPointResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    })
}

/**
 * Attributes:
 *  - _id
 *  - _hours
 *  - _minutes
 */
type RemoveSwitchPointArgs struct {
  thrift.TStruct
  _id *RemoteValueID "_id"; // 1
  _hours byte "_hours"; // 2
  _minutes byte "_minutes"; // 3
}

func NewRemoveSwitchPointArgs() *RemoveSwitchPointArgs {
  output := &RemoveSwitchPointArgs{
    TStruct:thrift.NewTStruct("RemoveSwitchPoint_args", []thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    thrift.NewTField("_hours", thrift.BYTE, 2),
    thrift.NewTField("_minutes", thrift.BYTE, 3),
    }),
  }
  {
  }
  return output
}

func (p *RemoveSwitchPointArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_id" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_hours" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "_minutes" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *RemoveSwitchPointArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p._id = NewRemoteValueID()
  err1326 := p._id.Read(iprot)
  if err1326 != nil { return thrift.NewTProtocolExceptionReadStruct("p._idRemoteValueID", err1326); }
  return err
}

func (p *RemoveSwitchPointArgs) ReadField_id(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *RemoveSwitchPointArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1327, err1328 := iprot.ReadByte()
  if err1328 != nil { return thrift.NewTProtocolExceptionReadField(2, "_hours", p.ThriftName(), err1328); }
  p._hours = v1327
  return err
}

func (p *RemoveSwitchPointArgs) ReadField_hours(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *RemoveSwitchPointArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1329, err1330 := iprot.ReadByte()
  if err1330 != nil { return thrift.NewTProtocolExceptionReadField(3, "_minutes", p.ThriftName(), err1330); }
  p._minutes = v1329
  return err
}

func (p *RemoveSwitchPointArgs) ReadField_minutes(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *RemoveSwitchPointArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("RemoveSwitchPoint_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *RemoveSwitchPointArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._id != nil {
    err = oprot.WriteFieldBegin("_id", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
    err = p._id.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RemoteValueID", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
  }
  return err
}

func (p *RemoveSwitchPointArgs) WriteField_id(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *RemoveSwitchPointArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_hours", thrift.BYTE, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_hours", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._hours))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_hours", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_hours", p.ThriftName(), err); }
  return err
}

func (p *RemoveSwitchPointArgs) WriteField_hours(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *RemoveSwitchPointArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_minutes", thrift.BYTE, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_minutes", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._minutes))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_minutes", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_minutes", p.ThriftName(), err); }
  return err
}

func (p *RemoveSwitchPointArgs) WriteField_minutes(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *RemoveSwitchPointArgs) TStructName() string {
  return "RemoveSwitchPointArgs"
}

func (p *RemoveSwitchPointArgs) ThriftName() string {
  return "RemoveSwitchPoint_args"
}

func (p *RemoveSwitchPointArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RemoveSwitchPointArgs(%+v)", *p)
}

func (p *RemoveSwitchPointArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*RemoveSwitchPointArgs)
  if !ok {
    return 0, false
  }
  if cmp, ok := p._id.CompareTo(data._id); !ok || cmp != 0 {
    return cmp, ok
  }
  if p._hours != data._hours {
    if p._hours < data._hours {
      return -1, true
    }
    return 1, true
  }
  if p._minutes != data._minutes {
    if p._minutes < data._minutes {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *RemoveSwitchPointArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._id
  case 2: return p._hours
  case 3: return p._minutes
  }
  return nil
}

func (p *RemoveSwitchPointArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    thrift.NewTField("_hours", thrift.BYTE, 2),
    thrift.NewTField("_minutes", thrift.BYTE, 3),
    })
}

/**
 * Attributes:
 *  - Success
 */
type RemoveSwitchPointResult struct {
  thrift.TStruct
  Success bool "success"; // 0
}

func NewRemoveSwitchPointResult() *RemoveSwitchPointResult {
  output := &RemoveSwitchPointResult{
    TStruct:thrift.NewTStruct("RemoveSwitchPoint_result", []thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    }),
  }
  {
  }
  return output
}

func (p *RemoveSwitchPointResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *RemoveSwitchPointResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1331, err1332 := iprot.ReadBool()
  if err1332 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1332); }
  p.Success = v1331
  return err
}

func (p *RemoveSwitchPointResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *RemoveSwitchPointResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("RemoveSwitchPoint_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *RemoveSwitchPointResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BOOL, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *RemoveSwitchPointResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *RemoveSwitchPointResult) TStructName() string {
  return "RemoveSwitchPointResult"
}

func (p *RemoveSwitchPointResult) ThriftName() string {
  return "RemoveSwitchPoint_result"
}

func (p *RemoveSwitchPointResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RemoveSwitchPointResult(%+v)", *p)
}

func (p *RemoveSwitchPointResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*RemoveSwitchPointResult)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Success, data.Success); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *RemoveSwitchPointResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *RemoveSwitchPointResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    })
}

/**
 * Attributes:
 *  - _id
 */
type ClearSwitchPointsArgs struct {
  thrift.TStruct
  _id *RemoteValueID "_id"; // 1
}

func NewClearSwitchPointsArgs() *ClearSwitchPointsArgs {
  output := &ClearSwitchPointsArgs{
    TStruct:thrift.NewTStruct("ClearSwitchPoints_args", []thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *ClearSwitchPointsArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_id" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *ClearSwitchPointsArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p._id = NewRemoteValueID()
  err1335 := p._id.Read(iprot)
  if err1335 != nil { return thrift.NewTProtocolExceptionReadStruct("p._idRemoteValueID", err1335); }
  return err
}

func (p *ClearSwitchPointsArgs) ReadField_id(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *ClearSwitchPointsArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("ClearSwitchPoints_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *ClearSwitchPointsArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._id != nil {
    err = oprot.WriteFieldBegin("_id", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
    err = p._id.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RemoteValueID", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
  }
  return err
}

func (p *ClearSwitchPointsArgs) WriteField_id(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *ClearSwitchPointsArgs) TStructName() string {
  return "ClearSwitchPointsArgs"
}

func (p *ClearSwitchPointsArgs) ThriftName() string {
  return "ClearSwitchPoints_args"
}

func (p *ClearSwitchPointsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ClearSwitchPointsArgs(%+v)", *p)
}

func (p *ClearSwitchPointsArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*ClearSwitchPointsArgs)
  if !ok {
    return 0, false
  }
  if cmp, ok := p._id.CompareTo(data._id); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *ClearSwitchPointsArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._id
  }
  return nil
}

func (p *ClearSwitchPointsArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    })
}

type ClearSwitchPointsResult struct {
  thrift.TStruct
}

func NewClearSwitchPointsResult() *ClearSwitchPointsResult {
  output := &ClearSwitchPointsResult{
    TStruct:thrift.NewTStruct("ClearSwitchPoints_result", []thrift.TField{
    }),
  }
  {
  }
  return output
}

func (p *ClearSwitchPointsResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    err = iprot.Skip(fieldTypeId)
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *ClearSwitchPointsResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("ClearSwitchPoints_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *ClearSwitchPointsResult) TStructName() string {
  return "ClearSwitchPointsResult"
}

func (p *ClearSwitchPointsResult) ThriftName() string {
  return "ClearSwitchPoints_result"
}

func (p *ClearSwitchPointsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ClearSwitchPointsResult(%+v)", *p)
}

func (p *ClearSwitchPointsResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  _, ok := other.(*ClearSwitchPointsResult)
  if !ok {
    return 0, false
  }
  return 0, true
}

func (p *ClearSwitchPointsResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  }
  return nil
}

func (p *ClearSwitchPointsResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    })
}

/**
 * Attributes:
 *  - _id
 *  - _idx
 */
type GetSwitchPointArgs struct {
  thrift.TStruct
  _id *RemoteValueID "_id"; // 1
  _idx byte "_idx"; // 2
}

func NewGetSwitchPointArgs() *GetSwitchPointArgs {
  output := &GetSwitchPointArgs{
    TStruct:thrift.NewTStruct("GetSwitchPoint_args", []thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    thrift.NewTField("_idx", thrift.BYTE, 2),
    }),
  }
  {
  }
  return output
}

func (p *GetSwitchPointArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_id" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_idx" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetSwitchPointArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p._id = NewRemoteValueID()
  err1338 := p._id.Read(iprot)
  if err1338 != nil { return thrift.NewTProtocolExceptionReadStruct("p._idRemoteValueID", err1338); }
  return err
}

func (p *GetSwitchPointArgs) ReadField_id(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetSwitchPointArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1339, err1340 := iprot.ReadByte()
  if err1340 != nil { return thrift.NewTProtocolExceptionReadField(2, "_idx", p.ThriftName(), err1340); }
  p._idx = v1339
  return err
}

func (p *GetSwitchPointArgs) ReadField_idx(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *GetSwitchPointArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetSwitchPoint_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetSwitchPointArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._id != nil {
    err = oprot.WriteFieldBegin("_id", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
    err = p._id.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RemoteValueID", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_id", p.ThriftName(), err); }
  }
  return err
}

func (p *GetSwitchPointArgs) WriteField_id(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetSwitchPointArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_idx", thrift.BYTE, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_idx", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._idx))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_idx", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_idx", p.ThriftName(), err); }
  return err
}

func (p *GetSwitchPointArgs) WriteField_idx(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *GetSwitchPointArgs) TStructName() string {
  return "GetSwitchPointArgs"
}

func (p *GetSwitchPointArgs) ThriftName() string {
  return "GetSwitchPoint_args"
}

func (p *GetSwitchPointArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetSwitchPointArgs(%+v)", *p)
}

func (p *GetSwitchPointArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetSwitchPointArgs)
  if !ok {
    return 0, false
  }
  if cmp, ok := p._id.CompareTo(data._id); !ok || cmp != 0 {
    return cmp, ok
  }
  if p._idx != data._idx {
    if p._idx < data._idx {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetSwitchPointArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._id
  case 2: return p._idx
  }
  return nil
}

func (p *GetSwitchPointArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_id", thrift.STRUCT, 1),
    thrift.NewTField("_idx", thrift.BYTE, 2),
    })
}

/**
 * Attributes:
 *  - Success
 */
type GetSwitchPointResult struct {
  thrift.TStruct
  Success *GetSwitchPointReturnStruct "success"; // 0
}

func NewGetSwitchPointResult() *GetSwitchPointResult {
  output := &GetSwitchPointResult{
    TStruct:thrift.NewTStruct("GetSwitchPoint_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    }),
  }
  {
  }
  return output
}

func (p *GetSwitchPointResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetSwitchPointResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Success = NewGetSwitchPointReturnStruct()
  err1343 := p.Success.Read(iprot)
  if err1343 != nil { return thrift.NewTProtocolExceptionReadStruct("p.SuccessGetSwitchPointReturnStruct", err1343); }
  return err
}

func (p *GetSwitchPointResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetSwitchPointResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetSwitchPoint_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetSwitchPointResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = p.Success.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("GetSwitchPointReturnStruct", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *GetSwitchPointResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetSwitchPointResult) TStructName() string {
  return "GetSwitchPointResult"
}

func (p *GetSwitchPointResult) ThriftName() string {
  return "GetSwitchPoint_result"
}

func (p *GetSwitchPointResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetSwitchPointResult(%+v)", *p)
}

func (p *GetSwitchPointResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetSwitchPointResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetSwitchPointResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *GetSwitchPointResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    })
}

/**
 * Attributes:
 *  - _homeId
 */
type SwitchAllOnArgs struct {
  thrift.TStruct
  _homeId int32 "_homeId"; // 1
}

func NewSwitchAllOnArgs() *SwitchAllOnArgs {
  output := &SwitchAllOnArgs{
    TStruct:thrift.NewTStruct("SwitchAllOn_args", []thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    }),
  }
  {
  }
  return output
}

func (p *SwitchAllOnArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_homeId" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SwitchAllOnArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1344, err1345 := iprot.ReadI32()
  if err1345 != nil { return thrift.NewTProtocolExceptionReadField(1, "_homeId", p.ThriftName(), err1345); }
  p._homeId = v1344
  return err
}

func (p *SwitchAllOnArgs) ReadField_homeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *SwitchAllOnArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SwitchAllOn_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SwitchAllOnArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_homeId", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._homeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  return err
}

func (p *SwitchAllOnArgs) WriteField_homeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *SwitchAllOnArgs) TStructName() string {
  return "SwitchAllOnArgs"
}

func (p *SwitchAllOnArgs) ThriftName() string {
  return "SwitchAllOn_args"
}

func (p *SwitchAllOnArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SwitchAllOnArgs(%+v)", *p)
}

func (p *SwitchAllOnArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SwitchAllOnArgs)
  if !ok {
    return 0, false
  }
  if p._homeId != data._homeId {
    if p._homeId < data._homeId {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *SwitchAllOnArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._homeId
  }
  return nil
}

func (p *SwitchAllOnArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    })
}

type SwitchAllOnResult struct {
  thrift.TStruct
}

func NewSwitchAllOnResult() *SwitchAllOnResult {
  output := &SwitchAllOnResult{
    TStruct:thrift.NewTStruct("SwitchAllOn_result", []thrift.TField{
    }),
  }
  {
  }
  return output
}

func (p *SwitchAllOnResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    err = iprot.Skip(fieldTypeId)
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SwitchAllOnResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SwitchAllOn_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SwitchAllOnResult) TStructName() string {
  return "SwitchAllOnResult"
}

func (p *SwitchAllOnResult) ThriftName() string {
  return "SwitchAllOn_result"
}

func (p *SwitchAllOnResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SwitchAllOnResult(%+v)", *p)
}

func (p *SwitchAllOnResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  _, ok := other.(*SwitchAllOnResult)
  if !ok {
    return 0, false
  }
  return 0, true
}

func (p *SwitchAllOnResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  }
  return nil
}

func (p *SwitchAllOnResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    })
}

/**
 * Attributes:
 *  - _homeId
 */
type SwitchAllOffArgs struct {
  thrift.TStruct
  _homeId int32 "_homeId"; // 1
}

func NewSwitchAllOffArgs() *SwitchAllOffArgs {
  output := &SwitchAllOffArgs{
    TStruct:thrift.NewTStruct("SwitchAllOff_args", []thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    }),
  }
  {
  }
  return output
}

func (p *SwitchAllOffArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_homeId" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SwitchAllOffArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1346, err1347 := iprot.ReadI32()
  if err1347 != nil { return thrift.NewTProtocolExceptionReadField(1, "_homeId", p.ThriftName(), err1347); }
  p._homeId = v1346
  return err
}

func (p *SwitchAllOffArgs) ReadField_homeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *SwitchAllOffArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SwitchAllOff_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SwitchAllOffArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_homeId", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._homeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  return err
}

func (p *SwitchAllOffArgs) WriteField_homeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *SwitchAllOffArgs) TStructName() string {
  return "SwitchAllOffArgs"
}

func (p *SwitchAllOffArgs) ThriftName() string {
  return "SwitchAllOff_args"
}

func (p *SwitchAllOffArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SwitchAllOffArgs(%+v)", *p)
}

func (p *SwitchAllOffArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SwitchAllOffArgs)
  if !ok {
    return 0, false
  }
  if p._homeId != data._homeId {
    if p._homeId < data._homeId {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *SwitchAllOffArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._homeId
  }
  return nil
}

func (p *SwitchAllOffArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    })
}

type SwitchAllOffResult struct {
  thrift.TStruct
}

func NewSwitchAllOffResult() *SwitchAllOffResult {
  output := &SwitchAllOffResult{
    TStruct:thrift.NewTStruct("SwitchAllOff_result", []thrift.TField{
    }),
  }
  {
  }
  return output
}

func (p *SwitchAllOffResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    err = iprot.Skip(fieldTypeId)
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SwitchAllOffResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SwitchAllOff_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SwitchAllOffResult) TStructName() string {
  return "SwitchAllOffResult"
}

func (p *SwitchAllOffResult) ThriftName() string {
  return "SwitchAllOff_result"
}

func (p *SwitchAllOffResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SwitchAllOffResult(%+v)", *p)
}

func (p *SwitchAllOffResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  _, ok := other.(*SwitchAllOffResult)
  if !ok {
    return 0, false
  }
  return 0, true
}

func (p *SwitchAllOffResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  }
  return nil
}

func (p *SwitchAllOffResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    })
}

/**
 * Attributes:
 *  - _homeId
 *  - _nodeId
 *  - _param
 *  - _value
 *  - _size
 */
type SetConfigParamArgs struct {
  thrift.TStruct
  _homeId int32 "_homeId"; // 1
  _nodeId byte "_nodeId"; // 2
  _param byte "_param"; // 3
  _value int32 "_value"; // 4
  _size byte "_size"; // 5
}

func NewSetConfigParamArgs() *SetConfigParamArgs {
  output := &SetConfigParamArgs{
    TStruct:thrift.NewTStruct("SetConfigParam_args", []thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    thrift.NewTField("_param", thrift.BYTE, 3),
    thrift.NewTField("_value", thrift.I32, 4),
    thrift.NewTField("_size", thrift.BYTE, 5),
    }),
  }
  {
    output._size = 2
  }
  return output
}

func (p *SetConfigParamArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_homeId" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_nodeId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "_param" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 4 || fieldName == "_value" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 5 || fieldName == "_size" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField5(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField5(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SetConfigParamArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1348, err1349 := iprot.ReadI32()
  if err1349 != nil { return thrift.NewTProtocolExceptionReadField(1, "_homeId", p.ThriftName(), err1349); }
  p._homeId = v1348
  return err
}

func (p *SetConfigParamArgs) ReadField_homeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *SetConfigParamArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1350, err1351 := iprot.ReadByte()
  if err1351 != nil { return thrift.NewTProtocolExceptionReadField(2, "_nodeId", p.ThriftName(), err1351); }
  p._nodeId = v1350
  return err
}

func (p *SetConfigParamArgs) ReadField_nodeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *SetConfigParamArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1352, err1353 := iprot.ReadByte()
  if err1353 != nil { return thrift.NewTProtocolExceptionReadField(3, "_param", p.ThriftName(), err1353); }
  p._param = v1352
  return err
}

func (p *SetConfigParamArgs) ReadField_param(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *SetConfigParamArgs) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1354, err1355 := iprot.ReadI32()
  if err1355 != nil { return thrift.NewTProtocolExceptionReadField(4, "_value", p.ThriftName(), err1355); }
  p._value = v1354
  return err
}

func (p *SetConfigParamArgs) ReadField_value(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField4(iprot)
}

func (p *SetConfigParamArgs) ReadField5(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1356, err1357 := iprot.ReadByte()
  if err1357 != nil { return thrift.NewTProtocolExceptionReadField(5, "_size", p.ThriftName(), err1357); }
  p._size = v1356
  return err
}

func (p *SetConfigParamArgs) ReadField_size(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField5(iprot)
}

func (p *SetConfigParamArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SetConfigParam_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = p.WriteField4(oprot)
  if err != nil { return err }
  err = p.WriteField5(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SetConfigParamArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_homeId", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._homeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  return err
}

func (p *SetConfigParamArgs) WriteField_homeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *SetConfigParamArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_nodeId", thrift.BYTE, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._nodeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  return err
}

func (p *SetConfigParamArgs) WriteField_nodeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *SetConfigParamArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_param", thrift.BYTE, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_param", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._param))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_param", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_param", p.ThriftName(), err); }
  return err
}

func (p *SetConfigParamArgs) WriteField_param(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *SetConfigParamArgs) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_value", thrift.I32, 4)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "_value", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._value))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "_value", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "_value", p.ThriftName(), err); }
  return err
}

func (p *SetConfigParamArgs) WriteField_value(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField4(oprot)
}

func (p *SetConfigParamArgs) WriteField5(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_size", thrift.BYTE, 5)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "_size", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._size))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "_size", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "_size", p.ThriftName(), err); }
  return err
}

func (p *SetConfigParamArgs) WriteField_size(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField5(oprot)
}

func (p *SetConfigParamArgs) TStructName() string {
  return "SetConfigParamArgs"
}

func (p *SetConfigParamArgs) ThriftName() string {
  return "SetConfigParam_args"
}

func (p *SetConfigParamArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetConfigParamArgs(%+v)", *p)
}

func (p *SetConfigParamArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SetConfigParamArgs)
  if !ok {
    return 0, false
  }
  if p._homeId != data._homeId {
    if p._homeId < data._homeId {
      return -1, true
    }
    return 1, true
  }
  if p._nodeId != data._nodeId {
    if p._nodeId < data._nodeId {
      return -1, true
    }
    return 1, true
  }
  if p._param != data._param {
    if p._param < data._param {
      return -1, true
    }
    return 1, true
  }
  if p._value != data._value {
    if p._value < data._value {
      return -1, true
    }
    return 1, true
  }
  if p._size != data._size {
    if p._size < data._size {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *SetConfigParamArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._homeId
  case 2: return p._nodeId
  case 3: return p._param
  case 4: return p._value
  case 5: return p._size
  }
  return nil
}

func (p *SetConfigParamArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    thrift.NewTField("_param", thrift.BYTE, 3),
    thrift.NewTField("_value", thrift.I32, 4),
    thrift.NewTField("_size", thrift.BYTE, 5),
    })
}

/**
 * Attributes:
 *  - Success
 */
type SetConfigParamResult struct {
  thrift.TStruct
  Success bool "success"; // 0
}

func NewSetConfigParamResult() *SetConfigParamResult {
  output := &SetConfigParamResult{
    TStruct:thrift.NewTStruct("SetConfigParam_result", []thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    }),
  }
  {
  }
  return output
}

func (p *SetConfigParamResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SetConfigParamResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1358, err1359 := iprot.ReadBool()
  if err1359 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1359); }
  p.Success = v1358
  return err
}

func (p *SetConfigParamResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *SetConfigParamResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SetConfigParam_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SetConfigParamResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BOOL, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *SetConfigParamResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *SetConfigParamResult) TStructName() string {
  return "SetConfigParamResult"
}

func (p *SetConfigParamResult) ThriftName() string {
  return "SetConfigParam_result"
}

func (p *SetConfigParamResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetConfigParamResult(%+v)", *p)
}

func (p *SetConfigParamResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SetConfigParamResult)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Success, data.Success); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *SetConfigParamResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *SetConfigParamResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    })
}

/**
 * Attributes:
 *  - _homeId
 *  - _nodeId
 *  - _param
 */
type RequestConfigParamArgs struct {
  thrift.TStruct
  _homeId int32 "_homeId"; // 1
  _nodeId byte "_nodeId"; // 2
  _param byte "_param"; // 3
}

func NewRequestConfigParamArgs() *RequestConfigParamArgs {
  output := &RequestConfigParamArgs{
    TStruct:thrift.NewTStruct("RequestConfigParam_args", []thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    thrift.NewTField("_param", thrift.BYTE, 3),
    }),
  }
  {
  }
  return output
}

func (p *RequestConfigParamArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_homeId" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_nodeId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "_param" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *RequestConfigParamArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1360, err1361 := iprot.ReadI32()
  if err1361 != nil { return thrift.NewTProtocolExceptionReadField(1, "_homeId", p.ThriftName(), err1361); }
  p._homeId = v1360
  return err
}

func (p *RequestConfigParamArgs) ReadField_homeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *RequestConfigParamArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1362, err1363 := iprot.ReadByte()
  if err1363 != nil { return thrift.NewTProtocolExceptionReadField(2, "_nodeId", p.ThriftName(), err1363); }
  p._nodeId = v1362
  return err
}

func (p *RequestConfigParamArgs) ReadField_nodeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *RequestConfigParamArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1364, err1365 := iprot.ReadByte()
  if err1365 != nil { return thrift.NewTProtocolExceptionReadField(3, "_param", p.ThriftName(), err1365); }
  p._param = v1364
  return err
}

func (p *RequestConfigParamArgs) ReadField_param(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *RequestConfigParamArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("RequestConfigParam_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *RequestConfigParamArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_homeId", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._homeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  return err
}

func (p *RequestConfigParamArgs) WriteField_homeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *RequestConfigParamArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_nodeId", thrift.BYTE, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._nodeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  return err
}

func (p *RequestConfigParamArgs) WriteField_nodeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *RequestConfigParamArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_param", thrift.BYTE, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_param", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._param))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_param", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_param", p.ThriftName(), err); }
  return err
}

func (p *RequestConfigParamArgs) WriteField_param(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *RequestConfigParamArgs) TStructName() string {
  return "RequestConfigParamArgs"
}

func (p *RequestConfigParamArgs) ThriftName() string {
  return "RequestConfigParam_args"
}

func (p *RequestConfigParamArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RequestConfigParamArgs(%+v)", *p)
}

func (p *RequestConfigParamArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*RequestConfigParamArgs)
  if !ok {
    return 0, false
  }
  if p._homeId != data._homeId {
    if p._homeId < data._homeId {
      return -1, true
    }
    return 1, true
  }
  if p._nodeId != data._nodeId {
    if p._nodeId < data._nodeId {
      return -1, true
    }
    return 1, true
  }
  if p._param != data._param {
    if p._param < data._param {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *RequestConfigParamArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._homeId
  case 2: return p._nodeId
  case 3: return p._param
  }
  return nil
}

func (p *RequestConfigParamArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    thrift.NewTField("_param", thrift.BYTE, 3),
    })
}

type RequestConfigParamResult struct {
  thrift.TStruct
}

func NewRequestConfigParamResult() *RequestConfigParamResult {
  output := &RequestConfigParamResult{
    TStruct:thrift.NewTStruct("RequestConfigParam_result", []thrift.TField{
    }),
  }
  {
  }
  return output
}

func (p *RequestConfigParamResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    err = iprot.Skip(fieldTypeId)
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *RequestConfigParamResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("RequestConfigParam_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *RequestConfigParamResult) TStructName() string {
  return "RequestConfigParamResult"
}

func (p *RequestConfigParamResult) ThriftName() string {
  return "RequestConfigParam_result"
}

func (p *RequestConfigParamResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RequestConfigParamResult(%+v)", *p)
}

func (p *RequestConfigParamResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  _, ok := other.(*RequestConfigParamResult)
  if !ok {
    return 0, false
  }
  return 0, true
}

func (p *RequestConfigParamResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  }
  return nil
}

func (p *RequestConfigParamResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    })
}

/**
 * Attributes:
 *  - _homeId
 *  - _nodeId
 */
type RequestAllConfigParamsArgs struct {
  thrift.TStruct
  _homeId int32 "_homeId"; // 1
  _nodeId byte "_nodeId"; // 2
}

func NewRequestAllConfigParamsArgs() *RequestAllConfigParamsArgs {
  output := &RequestAllConfigParamsArgs{
    TStruct:thrift.NewTStruct("RequestAllConfigParams_args", []thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    }),
  }
  {
  }
  return output
}

func (p *RequestAllConfigParamsArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_homeId" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_nodeId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *RequestAllConfigParamsArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1366, err1367 := iprot.ReadI32()
  if err1367 != nil { return thrift.NewTProtocolExceptionReadField(1, "_homeId", p.ThriftName(), err1367); }
  p._homeId = v1366
  return err
}

func (p *RequestAllConfigParamsArgs) ReadField_homeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *RequestAllConfigParamsArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1368, err1369 := iprot.ReadByte()
  if err1369 != nil { return thrift.NewTProtocolExceptionReadField(2, "_nodeId", p.ThriftName(), err1369); }
  p._nodeId = v1368
  return err
}

func (p *RequestAllConfigParamsArgs) ReadField_nodeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *RequestAllConfigParamsArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("RequestAllConfigParams_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *RequestAllConfigParamsArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_homeId", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._homeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  return err
}

func (p *RequestAllConfigParamsArgs) WriteField_homeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *RequestAllConfigParamsArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_nodeId", thrift.BYTE, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._nodeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  return err
}

func (p *RequestAllConfigParamsArgs) WriteField_nodeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *RequestAllConfigParamsArgs) TStructName() string {
  return "RequestAllConfigParamsArgs"
}

func (p *RequestAllConfigParamsArgs) ThriftName() string {
  return "RequestAllConfigParams_args"
}

func (p *RequestAllConfigParamsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RequestAllConfigParamsArgs(%+v)", *p)
}

func (p *RequestAllConfigParamsArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*RequestAllConfigParamsArgs)
  if !ok {
    return 0, false
  }
  if p._homeId != data._homeId {
    if p._homeId < data._homeId {
      return -1, true
    }
    return 1, true
  }
  if p._nodeId != data._nodeId {
    if p._nodeId < data._nodeId {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *RequestAllConfigParamsArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._homeId
  case 2: return p._nodeId
  }
  return nil
}

func (p *RequestAllConfigParamsArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    })
}

type RequestAllConfigParamsResult struct {
  thrift.TStruct
}

func NewRequestAllConfigParamsResult() *RequestAllConfigParamsResult {
  output := &RequestAllConfigParamsResult{
    TStruct:thrift.NewTStruct("RequestAllConfigParams_result", []thrift.TField{
    }),
  }
  {
  }
  return output
}

func (p *RequestAllConfigParamsResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    err = iprot.Skip(fieldTypeId)
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *RequestAllConfigParamsResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("RequestAllConfigParams_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *RequestAllConfigParamsResult) TStructName() string {
  return "RequestAllConfigParamsResult"
}

func (p *RequestAllConfigParamsResult) ThriftName() string {
  return "RequestAllConfigParams_result"
}

func (p *RequestAllConfigParamsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RequestAllConfigParamsResult(%+v)", *p)
}

func (p *RequestAllConfigParamsResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  _, ok := other.(*RequestAllConfigParamsResult)
  if !ok {
    return 0, false
  }
  return 0, true
}

func (p *RequestAllConfigParamsResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  }
  return nil
}

func (p *RequestAllConfigParamsResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    })
}

/**
 * Attributes:
 *  - _homeId
 *  - _nodeId
 */
type GetNumGroupsArgs struct {
  thrift.TStruct
  _homeId int32 "_homeId"; // 1
  _nodeId byte "_nodeId"; // 2
}

func NewGetNumGroupsArgs() *GetNumGroupsArgs {
  output := &GetNumGroupsArgs{
    TStruct:thrift.NewTStruct("GetNumGroups_args", []thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    }),
  }
  {
  }
  return output
}

func (p *GetNumGroupsArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_homeId" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_nodeId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNumGroupsArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1370, err1371 := iprot.ReadI32()
  if err1371 != nil { return thrift.NewTProtocolExceptionReadField(1, "_homeId", p.ThriftName(), err1371); }
  p._homeId = v1370
  return err
}

func (p *GetNumGroupsArgs) ReadField_homeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetNumGroupsArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1372, err1373 := iprot.ReadByte()
  if err1373 != nil { return thrift.NewTProtocolExceptionReadField(2, "_nodeId", p.ThriftName(), err1373); }
  p._nodeId = v1372
  return err
}

func (p *GetNumGroupsArgs) ReadField_nodeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *GetNumGroupsArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetNumGroups_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNumGroupsArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_homeId", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._homeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  return err
}

func (p *GetNumGroupsArgs) WriteField_homeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetNumGroupsArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_nodeId", thrift.BYTE, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._nodeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  return err
}

func (p *GetNumGroupsArgs) WriteField_nodeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *GetNumGroupsArgs) TStructName() string {
  return "GetNumGroupsArgs"
}

func (p *GetNumGroupsArgs) ThriftName() string {
  return "GetNumGroups_args"
}

func (p *GetNumGroupsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetNumGroupsArgs(%+v)", *p)
}

func (p *GetNumGroupsArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetNumGroupsArgs)
  if !ok {
    return 0, false
  }
  if p._homeId != data._homeId {
    if p._homeId < data._homeId {
      return -1, true
    }
    return 1, true
  }
  if p._nodeId != data._nodeId {
    if p._nodeId < data._nodeId {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetNumGroupsArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._homeId
  case 2: return p._nodeId
  }
  return nil
}

func (p *GetNumGroupsArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    })
}

/**
 * Attributes:
 *  - Success
 */
type GetNumGroupsResult struct {
  thrift.TStruct
  Success byte "success"; // 0
}

func NewGetNumGroupsResult() *GetNumGroupsResult {
  output := &GetNumGroupsResult{
    TStruct:thrift.NewTStruct("GetNumGroups_result", []thrift.TField{
    thrift.NewTField("success", thrift.BYTE, 0),
    }),
  }
  {
  }
  return output
}

func (p *GetNumGroupsResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNumGroupsResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1374, err1375 := iprot.ReadByte()
  if err1375 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1375); }
  p.Success = v1374
  return err
}

func (p *GetNumGroupsResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetNumGroupsResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetNumGroups_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNumGroupsResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BYTE, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *GetNumGroupsResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetNumGroupsResult) TStructName() string {
  return "GetNumGroupsResult"
}

func (p *GetNumGroupsResult) ThriftName() string {
  return "GetNumGroups_result"
}

func (p *GetNumGroupsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetNumGroupsResult(%+v)", *p)
}

func (p *GetNumGroupsResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetNumGroupsResult)
  if !ok {
    return 0, false
  }
  if p.Success != data.Success {
    if p.Success < data.Success {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetNumGroupsResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *GetNumGroupsResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BYTE, 0),
    })
}

/**
 * Attributes:
 *  - _homeId
 *  - _nodeId
 *  - _groupIdx
 */
type GetAssociationsArgs struct {
  thrift.TStruct
  _homeId int32 "_homeId"; // 1
  _nodeId byte "_nodeId"; // 2
  _groupIdx byte "_groupIdx"; // 3
}

func NewGetAssociationsArgs() *GetAssociationsArgs {
  output := &GetAssociationsArgs{
    TStruct:thrift.NewTStruct("GetAssociations_args", []thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    thrift.NewTField("_groupIdx", thrift.BYTE, 3),
    }),
  }
  {
  }
  return output
}

func (p *GetAssociationsArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_homeId" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_nodeId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "_groupIdx" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetAssociationsArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1376, err1377 := iprot.ReadI32()
  if err1377 != nil { return thrift.NewTProtocolExceptionReadField(1, "_homeId", p.ThriftName(), err1377); }
  p._homeId = v1376
  return err
}

func (p *GetAssociationsArgs) ReadField_homeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetAssociationsArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1378, err1379 := iprot.ReadByte()
  if err1379 != nil { return thrift.NewTProtocolExceptionReadField(2, "_nodeId", p.ThriftName(), err1379); }
  p._nodeId = v1378
  return err
}

func (p *GetAssociationsArgs) ReadField_nodeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *GetAssociationsArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1380, err1381 := iprot.ReadByte()
  if err1381 != nil { return thrift.NewTProtocolExceptionReadField(3, "_groupIdx", p.ThriftName(), err1381); }
  p._groupIdx = v1380
  return err
}

func (p *GetAssociationsArgs) ReadField_groupIdx(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *GetAssociationsArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetAssociations_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetAssociationsArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_homeId", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._homeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  return err
}

func (p *GetAssociationsArgs) WriteField_homeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetAssociationsArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_nodeId", thrift.BYTE, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._nodeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  return err
}

func (p *GetAssociationsArgs) WriteField_nodeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *GetAssociationsArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_groupIdx", thrift.BYTE, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_groupIdx", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._groupIdx))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_groupIdx", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_groupIdx", p.ThriftName(), err); }
  return err
}

func (p *GetAssociationsArgs) WriteField_groupIdx(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *GetAssociationsArgs) TStructName() string {
  return "GetAssociationsArgs"
}

func (p *GetAssociationsArgs) ThriftName() string {
  return "GetAssociations_args"
}

func (p *GetAssociationsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetAssociationsArgs(%+v)", *p)
}

func (p *GetAssociationsArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetAssociationsArgs)
  if !ok {
    return 0, false
  }
  if p._homeId != data._homeId {
    if p._homeId < data._homeId {
      return -1, true
    }
    return 1, true
  }
  if p._nodeId != data._nodeId {
    if p._nodeId < data._nodeId {
      return -1, true
    }
    return 1, true
  }
  if p._groupIdx != data._groupIdx {
    if p._groupIdx < data._groupIdx {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetAssociationsArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._homeId
  case 2: return p._nodeId
  case 3: return p._groupIdx
  }
  return nil
}

func (p *GetAssociationsArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    thrift.NewTField("_groupIdx", thrift.BYTE, 3),
    })
}

/**
 * Attributes:
 *  - Success
 */
type GetAssociationsResult struct {
  thrift.TStruct
  Success *GetAssociationsReturnStruct "success"; // 0
}

func NewGetAssociationsResult() *GetAssociationsResult {
  output := &GetAssociationsResult{
    TStruct:thrift.NewTStruct("GetAssociations_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    }),
  }
  {
  }
  return output
}

func (p *GetAssociationsResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetAssociationsResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Success = NewGetAssociationsReturnStruct()
  err1384 := p.Success.Read(iprot)
  if err1384 != nil { return thrift.NewTProtocolExceptionReadStruct("p.SuccessGetAssociationsReturnStruct", err1384); }
  return err
}

func (p *GetAssociationsResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetAssociationsResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetAssociations_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetAssociationsResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = p.Success.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("GetAssociationsReturnStruct", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *GetAssociationsResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetAssociationsResult) TStructName() string {
  return "GetAssociationsResult"
}

func (p *GetAssociationsResult) ThriftName() string {
  return "GetAssociations_result"
}

func (p *GetAssociationsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetAssociationsResult(%+v)", *p)
}

func (p *GetAssociationsResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetAssociationsResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetAssociationsResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *GetAssociationsResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    })
}

/**
 * Attributes:
 *  - _homeId
 *  - _nodeId
 *  - _groupIdx
 */
type GetMaxAssociationsArgs struct {
  thrift.TStruct
  _homeId int32 "_homeId"; // 1
  _nodeId byte "_nodeId"; // 2
  _groupIdx byte "_groupIdx"; // 3
}

func NewGetMaxAssociationsArgs() *GetMaxAssociationsArgs {
  output := &GetMaxAssociationsArgs{
    TStruct:thrift.NewTStruct("GetMaxAssociations_args", []thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    thrift.NewTField("_groupIdx", thrift.BYTE, 3),
    }),
  }
  {
  }
  return output
}

func (p *GetMaxAssociationsArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_homeId" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_nodeId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "_groupIdx" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetMaxAssociationsArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1385, err1386 := iprot.ReadI32()
  if err1386 != nil { return thrift.NewTProtocolExceptionReadField(1, "_homeId", p.ThriftName(), err1386); }
  p._homeId = v1385
  return err
}

func (p *GetMaxAssociationsArgs) ReadField_homeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetMaxAssociationsArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1387, err1388 := iprot.ReadByte()
  if err1388 != nil { return thrift.NewTProtocolExceptionReadField(2, "_nodeId", p.ThriftName(), err1388); }
  p._nodeId = v1387
  return err
}

func (p *GetMaxAssociationsArgs) ReadField_nodeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *GetMaxAssociationsArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1389, err1390 := iprot.ReadByte()
  if err1390 != nil { return thrift.NewTProtocolExceptionReadField(3, "_groupIdx", p.ThriftName(), err1390); }
  p._groupIdx = v1389
  return err
}

func (p *GetMaxAssociationsArgs) ReadField_groupIdx(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *GetMaxAssociationsArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetMaxAssociations_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetMaxAssociationsArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_homeId", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._homeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  return err
}

func (p *GetMaxAssociationsArgs) WriteField_homeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetMaxAssociationsArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_nodeId", thrift.BYTE, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._nodeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  return err
}

func (p *GetMaxAssociationsArgs) WriteField_nodeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *GetMaxAssociationsArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_groupIdx", thrift.BYTE, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_groupIdx", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._groupIdx))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_groupIdx", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_groupIdx", p.ThriftName(), err); }
  return err
}

func (p *GetMaxAssociationsArgs) WriteField_groupIdx(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *GetMaxAssociationsArgs) TStructName() string {
  return "GetMaxAssociationsArgs"
}

func (p *GetMaxAssociationsArgs) ThriftName() string {
  return "GetMaxAssociations_args"
}

func (p *GetMaxAssociationsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetMaxAssociationsArgs(%+v)", *p)
}

func (p *GetMaxAssociationsArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetMaxAssociationsArgs)
  if !ok {
    return 0, false
  }
  if p._homeId != data._homeId {
    if p._homeId < data._homeId {
      return -1, true
    }
    return 1, true
  }
  if p._nodeId != data._nodeId {
    if p._nodeId < data._nodeId {
      return -1, true
    }
    return 1, true
  }
  if p._groupIdx != data._groupIdx {
    if p._groupIdx < data._groupIdx {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetMaxAssociationsArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._homeId
  case 2: return p._nodeId
  case 3: return p._groupIdx
  }
  return nil
}

func (p *GetMaxAssociationsArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    thrift.NewTField("_groupIdx", thrift.BYTE, 3),
    })
}

/**
 * Attributes:
 *  - Success
 */
type GetMaxAssociationsResult struct {
  thrift.TStruct
  Success byte "success"; // 0
}

func NewGetMaxAssociationsResult() *GetMaxAssociationsResult {
  output := &GetMaxAssociationsResult{
    TStruct:thrift.NewTStruct("GetMaxAssociations_result", []thrift.TField{
    thrift.NewTField("success", thrift.BYTE, 0),
    }),
  }
  {
  }
  return output
}

func (p *GetMaxAssociationsResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetMaxAssociationsResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1391, err1392 := iprot.ReadByte()
  if err1392 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1392); }
  p.Success = v1391
  return err
}

func (p *GetMaxAssociationsResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetMaxAssociationsResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetMaxAssociations_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetMaxAssociationsResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BYTE, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *GetMaxAssociationsResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetMaxAssociationsResult) TStructName() string {
  return "GetMaxAssociationsResult"
}

func (p *GetMaxAssociationsResult) ThriftName() string {
  return "GetMaxAssociations_result"
}

func (p *GetMaxAssociationsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetMaxAssociationsResult(%+v)", *p)
}

func (p *GetMaxAssociationsResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetMaxAssociationsResult)
  if !ok {
    return 0, false
  }
  if p.Success != data.Success {
    if p.Success < data.Success {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetMaxAssociationsResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *GetMaxAssociationsResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BYTE, 0),
    })
}

/**
 * Attributes:
 *  - _homeId
 *  - _nodeId
 *  - _groupIdx
 */
type GetGroupLabelArgs struct {
  thrift.TStruct
  _homeId int32 "_homeId"; // 1
  _nodeId byte "_nodeId"; // 2
  _groupIdx byte "_groupIdx"; // 3
}

func NewGetGroupLabelArgs() *GetGroupLabelArgs {
  output := &GetGroupLabelArgs{
    TStruct:thrift.NewTStruct("GetGroupLabel_args", []thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    thrift.NewTField("_groupIdx", thrift.BYTE, 3),
    }),
  }
  {
  }
  return output
}

func (p *GetGroupLabelArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_homeId" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_nodeId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "_groupIdx" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetGroupLabelArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1393, err1394 := iprot.ReadI32()
  if err1394 != nil { return thrift.NewTProtocolExceptionReadField(1, "_homeId", p.ThriftName(), err1394); }
  p._homeId = v1393
  return err
}

func (p *GetGroupLabelArgs) ReadField_homeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetGroupLabelArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1395, err1396 := iprot.ReadByte()
  if err1396 != nil { return thrift.NewTProtocolExceptionReadField(2, "_nodeId", p.ThriftName(), err1396); }
  p._nodeId = v1395
  return err
}

func (p *GetGroupLabelArgs) ReadField_nodeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *GetGroupLabelArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1397, err1398 := iprot.ReadByte()
  if err1398 != nil { return thrift.NewTProtocolExceptionReadField(3, "_groupIdx", p.ThriftName(), err1398); }
  p._groupIdx = v1397
  return err
}

func (p *GetGroupLabelArgs) ReadField_groupIdx(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *GetGroupLabelArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetGroupLabel_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetGroupLabelArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_homeId", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._homeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  return err
}

func (p *GetGroupLabelArgs) WriteField_homeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetGroupLabelArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_nodeId", thrift.BYTE, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._nodeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  return err
}

func (p *GetGroupLabelArgs) WriteField_nodeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *GetGroupLabelArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_groupIdx", thrift.BYTE, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_groupIdx", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._groupIdx))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_groupIdx", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_groupIdx", p.ThriftName(), err); }
  return err
}

func (p *GetGroupLabelArgs) WriteField_groupIdx(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *GetGroupLabelArgs) TStructName() string {
  return "GetGroupLabelArgs"
}

func (p *GetGroupLabelArgs) ThriftName() string {
  return "GetGroupLabel_args"
}

func (p *GetGroupLabelArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetGroupLabelArgs(%+v)", *p)
}

func (p *GetGroupLabelArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetGroupLabelArgs)
  if !ok {
    return 0, false
  }
  if p._homeId != data._homeId {
    if p._homeId < data._homeId {
      return -1, true
    }
    return 1, true
  }
  if p._nodeId != data._nodeId {
    if p._nodeId < data._nodeId {
      return -1, true
    }
    return 1, true
  }
  if p._groupIdx != data._groupIdx {
    if p._groupIdx < data._groupIdx {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetGroupLabelArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._homeId
  case 2: return p._nodeId
  case 3: return p._groupIdx
  }
  return nil
}

func (p *GetGroupLabelArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    thrift.NewTField("_groupIdx", thrift.BYTE, 3),
    })
}

/**
 * Attributes:
 *  - Success
 */
type GetGroupLabelResult struct {
  thrift.TStruct
  Success string "success"; // 0
}

func NewGetGroupLabelResult() *GetGroupLabelResult {
  output := &GetGroupLabelResult{
    TStruct:thrift.NewTStruct("GetGroupLabel_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRING, 0),
    }),
  }
  {
  }
  return output
}

func (p *GetGroupLabelResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetGroupLabelResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1399, err1400 := iprot.ReadString()
  if err1400 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1400); }
  p.Success = v1399
  return err
}

func (p *GetGroupLabelResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetGroupLabelResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetGroupLabel_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetGroupLabelResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.STRING, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *GetGroupLabelResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetGroupLabelResult) TStructName() string {
  return "GetGroupLabelResult"
}

func (p *GetGroupLabelResult) ThriftName() string {
  return "GetGroupLabel_result"
}

func (p *GetGroupLabelResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetGroupLabelResult(%+v)", *p)
}

func (p *GetGroupLabelResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetGroupLabelResult)
  if !ok {
    return 0, false
  }
  if p.Success != data.Success {
    if p.Success < data.Success {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetGroupLabelResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *GetGroupLabelResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRING, 0),
    })
}

/**
 * Attributes:
 *  - _homeId
 *  - _nodeId
 *  - _groupIdx
 *  - _targetNodeId
 */
type AddAssociationArgs struct {
  thrift.TStruct
  _homeId int32 "_homeId"; // 1
  _nodeId byte "_nodeId"; // 2
  _groupIdx byte "_groupIdx"; // 3
  _targetNodeId byte "_targetNodeId"; // 4
}

func NewAddAssociationArgs() *AddAssociationArgs {
  output := &AddAssociationArgs{
    TStruct:thrift.NewTStruct("AddAssociation_args", []thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    thrift.NewTField("_groupIdx", thrift.BYTE, 3),
    thrift.NewTField("_targetNodeId", thrift.BYTE, 4),
    }),
  }
  {
  }
  return output
}

func (p *AddAssociationArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_homeId" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_nodeId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "_groupIdx" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 4 || fieldName == "_targetNodeId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *AddAssociationArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1401, err1402 := iprot.ReadI32()
  if err1402 != nil { return thrift.NewTProtocolExceptionReadField(1, "_homeId", p.ThriftName(), err1402); }
  p._homeId = v1401
  return err
}

func (p *AddAssociationArgs) ReadField_homeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *AddAssociationArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1403, err1404 := iprot.ReadByte()
  if err1404 != nil { return thrift.NewTProtocolExceptionReadField(2, "_nodeId", p.ThriftName(), err1404); }
  p._nodeId = v1403
  return err
}

func (p *AddAssociationArgs) ReadField_nodeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *AddAssociationArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1405, err1406 := iprot.ReadByte()
  if err1406 != nil { return thrift.NewTProtocolExceptionReadField(3, "_groupIdx", p.ThriftName(), err1406); }
  p._groupIdx = v1405
  return err
}

func (p *AddAssociationArgs) ReadField_groupIdx(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *AddAssociationArgs) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1407, err1408 := iprot.ReadByte()
  if err1408 != nil { return thrift.NewTProtocolExceptionReadField(4, "_targetNodeId", p.ThriftName(), err1408); }
  p._targetNodeId = v1407
  return err
}

func (p *AddAssociationArgs) ReadField_targetNodeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField4(iprot)
}

func (p *AddAssociationArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("AddAssociation_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = p.WriteField4(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *AddAssociationArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_homeId", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._homeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  return err
}

func (p *AddAssociationArgs) WriteField_homeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *AddAssociationArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_nodeId", thrift.BYTE, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._nodeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  return err
}

func (p *AddAssociationArgs) WriteField_nodeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *AddAssociationArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_groupIdx", thrift.BYTE, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_groupIdx", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._groupIdx))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_groupIdx", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_groupIdx", p.ThriftName(), err); }
  return err
}

func (p *AddAssociationArgs) WriteField_groupIdx(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *AddAssociationArgs) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_targetNodeId", thrift.BYTE, 4)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "_targetNodeId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._targetNodeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "_targetNodeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "_targetNodeId", p.ThriftName(), err); }
  return err
}

func (p *AddAssociationArgs) WriteField_targetNodeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField4(oprot)
}

func (p *AddAssociationArgs) TStructName() string {
  return "AddAssociationArgs"
}

func (p *AddAssociationArgs) ThriftName() string {
  return "AddAssociation_args"
}

func (p *AddAssociationArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AddAssociationArgs(%+v)", *p)
}

func (p *AddAssociationArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*AddAssociationArgs)
  if !ok {
    return 0, false
  }
  if p._homeId != data._homeId {
    if p._homeId < data._homeId {
      return -1, true
    }
    return 1, true
  }
  if p._nodeId != data._nodeId {
    if p._nodeId < data._nodeId {
      return -1, true
    }
    return 1, true
  }
  if p._groupIdx != data._groupIdx {
    if p._groupIdx < data._groupIdx {
      return -1, true
    }
    return 1, true
  }
  if p._targetNodeId != data._targetNodeId {
    if p._targetNodeId < data._targetNodeId {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *AddAssociationArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._homeId
  case 2: return p._nodeId
  case 3: return p._groupIdx
  case 4: return p._targetNodeId
  }
  return nil
}

func (p *AddAssociationArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    thrift.NewTField("_groupIdx", thrift.BYTE, 3),
    thrift.NewTField("_targetNodeId", thrift.BYTE, 4),
    })
}

type AddAssociationResult struct {
  thrift.TStruct
}

func NewAddAssociationResult() *AddAssociationResult {
  output := &AddAssociationResult{
    TStruct:thrift.NewTStruct("AddAssociation_result", []thrift.TField{
    }),
  }
  {
  }
  return output
}

func (p *AddAssociationResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    err = iprot.Skip(fieldTypeId)
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *AddAssociationResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("AddAssociation_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *AddAssociationResult) TStructName() string {
  return "AddAssociationResult"
}

func (p *AddAssociationResult) ThriftName() string {
  return "AddAssociation_result"
}

func (p *AddAssociationResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AddAssociationResult(%+v)", *p)
}

func (p *AddAssociationResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  _, ok := other.(*AddAssociationResult)
  if !ok {
    return 0, false
  }
  return 0, true
}

func (p *AddAssociationResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  }
  return nil
}

func (p *AddAssociationResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    })
}

/**
 * Attributes:
 *  - _homeId
 *  - _nodeId
 *  - _groupIdx
 *  - _targetNodeId
 */
type RemoveAssociationArgs struct {
  thrift.TStruct
  _homeId int32 "_homeId"; // 1
  _nodeId byte "_nodeId"; // 2
  _groupIdx byte "_groupIdx"; // 3
  _targetNodeId byte "_targetNodeId"; // 4
}

func NewRemoveAssociationArgs() *RemoveAssociationArgs {
  output := &RemoveAssociationArgs{
    TStruct:thrift.NewTStruct("RemoveAssociation_args", []thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    thrift.NewTField("_groupIdx", thrift.BYTE, 3),
    thrift.NewTField("_targetNodeId", thrift.BYTE, 4),
    }),
  }
  {
  }
  return output
}

func (p *RemoveAssociationArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_homeId" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_nodeId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "_groupIdx" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 4 || fieldName == "_targetNodeId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *RemoveAssociationArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1409, err1410 := iprot.ReadI32()
  if err1410 != nil { return thrift.NewTProtocolExceptionReadField(1, "_homeId", p.ThriftName(), err1410); }
  p._homeId = v1409
  return err
}

func (p *RemoveAssociationArgs) ReadField_homeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *RemoveAssociationArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1411, err1412 := iprot.ReadByte()
  if err1412 != nil { return thrift.NewTProtocolExceptionReadField(2, "_nodeId", p.ThriftName(), err1412); }
  p._nodeId = v1411
  return err
}

func (p *RemoveAssociationArgs) ReadField_nodeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *RemoveAssociationArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1413, err1414 := iprot.ReadByte()
  if err1414 != nil { return thrift.NewTProtocolExceptionReadField(3, "_groupIdx", p.ThriftName(), err1414); }
  p._groupIdx = v1413
  return err
}

func (p *RemoveAssociationArgs) ReadField_groupIdx(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *RemoveAssociationArgs) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1415, err1416 := iprot.ReadByte()
  if err1416 != nil { return thrift.NewTProtocolExceptionReadField(4, "_targetNodeId", p.ThriftName(), err1416); }
  p._targetNodeId = v1415
  return err
}

func (p *RemoveAssociationArgs) ReadField_targetNodeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField4(iprot)
}

func (p *RemoveAssociationArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("RemoveAssociation_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = p.WriteField4(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *RemoveAssociationArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_homeId", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._homeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  return err
}

func (p *RemoveAssociationArgs) WriteField_homeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *RemoveAssociationArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_nodeId", thrift.BYTE, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._nodeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_nodeId", p.ThriftName(), err); }
  return err
}

func (p *RemoveAssociationArgs) WriteField_nodeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *RemoveAssociationArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_groupIdx", thrift.BYTE, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_groupIdx", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._groupIdx))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_groupIdx", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_groupIdx", p.ThriftName(), err); }
  return err
}

func (p *RemoveAssociationArgs) WriteField_groupIdx(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *RemoveAssociationArgs) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_targetNodeId", thrift.BYTE, 4)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "_targetNodeId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._targetNodeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "_targetNodeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "_targetNodeId", p.ThriftName(), err); }
  return err
}

func (p *RemoveAssociationArgs) WriteField_targetNodeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField4(oprot)
}

func (p *RemoveAssociationArgs) TStructName() string {
  return "RemoveAssociationArgs"
}

func (p *RemoveAssociationArgs) ThriftName() string {
  return "RemoveAssociation_args"
}

func (p *RemoveAssociationArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RemoveAssociationArgs(%+v)", *p)
}

func (p *RemoveAssociationArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*RemoveAssociationArgs)
  if !ok {
    return 0, false
  }
  if p._homeId != data._homeId {
    if p._homeId < data._homeId {
      return -1, true
    }
    return 1, true
  }
  if p._nodeId != data._nodeId {
    if p._nodeId < data._nodeId {
      return -1, true
    }
    return 1, true
  }
  if p._groupIdx != data._groupIdx {
    if p._groupIdx < data._groupIdx {
      return -1, true
    }
    return 1, true
  }
  if p._targetNodeId != data._targetNodeId {
    if p._targetNodeId < data._targetNodeId {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *RemoveAssociationArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._homeId
  case 2: return p._nodeId
  case 3: return p._groupIdx
  case 4: return p._targetNodeId
  }
  return nil
}

func (p *RemoveAssociationArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_nodeId", thrift.BYTE, 2),
    thrift.NewTField("_groupIdx", thrift.BYTE, 3),
    thrift.NewTField("_targetNodeId", thrift.BYTE, 4),
    })
}

type RemoveAssociationResult struct {
  thrift.TStruct
}

func NewRemoveAssociationResult() *RemoveAssociationResult {
  output := &RemoveAssociationResult{
    TStruct:thrift.NewTStruct("RemoveAssociation_result", []thrift.TField{
    }),
  }
  {
  }
  return output
}

func (p *RemoveAssociationResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    err = iprot.Skip(fieldTypeId)
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *RemoveAssociationResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("RemoveAssociation_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *RemoveAssociationResult) TStructName() string {
  return "RemoveAssociationResult"
}

func (p *RemoveAssociationResult) ThriftName() string {
  return "RemoveAssociation_result"
}

func (p *RemoveAssociationResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RemoveAssociationResult(%+v)", *p)
}

func (p *RemoveAssociationResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  _, ok := other.(*RemoveAssociationResult)
  if !ok {
    return 0, false
  }
  return 0, true
}

func (p *RemoveAssociationResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  }
  return nil
}

func (p *RemoveAssociationResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    })
}

/**
 * Attributes:
 *  - _homeId
 */
type ResetControllerArgs struct {
  thrift.TStruct
  _homeId int32 "_homeId"; // 1
}

func NewResetControllerArgs() *ResetControllerArgs {
  output := &ResetControllerArgs{
    TStruct:thrift.NewTStruct("ResetController_args", []thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    }),
  }
  {
  }
  return output
}

func (p *ResetControllerArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_homeId" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *ResetControllerArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1417, err1418 := iprot.ReadI32()
  if err1418 != nil { return thrift.NewTProtocolExceptionReadField(1, "_homeId", p.ThriftName(), err1418); }
  p._homeId = v1417
  return err
}

func (p *ResetControllerArgs) ReadField_homeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *ResetControllerArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("ResetController_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *ResetControllerArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_homeId", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._homeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  return err
}

func (p *ResetControllerArgs) WriteField_homeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *ResetControllerArgs) TStructName() string {
  return "ResetControllerArgs"
}

func (p *ResetControllerArgs) ThriftName() string {
  return "ResetController_args"
}

func (p *ResetControllerArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ResetControllerArgs(%+v)", *p)
}

func (p *ResetControllerArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*ResetControllerArgs)
  if !ok {
    return 0, false
  }
  if p._homeId != data._homeId {
    if p._homeId < data._homeId {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *ResetControllerArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._homeId
  }
  return nil
}

func (p *ResetControllerArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    })
}

type ResetControllerResult struct {
  thrift.TStruct
}

func NewResetControllerResult() *ResetControllerResult {
  output := &ResetControllerResult{
    TStruct:thrift.NewTStruct("ResetController_result", []thrift.TField{
    }),
  }
  {
  }
  return output
}

func (p *ResetControllerResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    err = iprot.Skip(fieldTypeId)
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *ResetControllerResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("ResetController_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *ResetControllerResult) TStructName() string {
  return "ResetControllerResult"
}

func (p *ResetControllerResult) ThriftName() string {
  return "ResetController_result"
}

func (p *ResetControllerResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ResetControllerResult(%+v)", *p)
}

func (p *ResetControllerResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  _, ok := other.(*ResetControllerResult)
  if !ok {
    return 0, false
  }
  return 0, true
}

func (p *ResetControllerResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  }
  return nil
}

func (p *ResetControllerResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    })
}

/**
 * Attributes:
 *  - _homeId
 */
type SoftResetArgs struct {
  thrift.TStruct
  _homeId int32 "_homeId"; // 1
}

func NewSoftResetArgs() *SoftResetArgs {
  output := &SoftResetArgs{
    TStruct:thrift.NewTStruct("SoftReset_args", []thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    }),
  }
  {
  }
  return output
}

func (p *SoftResetArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_homeId" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SoftResetArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1419, err1420 := iprot.ReadI32()
  if err1420 != nil { return thrift.NewTProtocolExceptionReadField(1, "_homeId", p.ThriftName(), err1420); }
  p._homeId = v1419
  return err
}

func (p *SoftResetArgs) ReadField_homeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *SoftResetArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SoftReset_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SoftResetArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_homeId", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._homeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  return err
}

func (p *SoftResetArgs) WriteField_homeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *SoftResetArgs) TStructName() string {
  return "SoftResetArgs"
}

func (p *SoftResetArgs) ThriftName() string {
  return "SoftReset_args"
}

func (p *SoftResetArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SoftResetArgs(%+v)", *p)
}

func (p *SoftResetArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SoftResetArgs)
  if !ok {
    return 0, false
  }
  if p._homeId != data._homeId {
    if p._homeId < data._homeId {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *SoftResetArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._homeId
  }
  return nil
}

func (p *SoftResetArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    })
}

type SoftResetResult struct {
  thrift.TStruct
}

func NewSoftResetResult() *SoftResetResult {
  output := &SoftResetResult{
    TStruct:thrift.NewTStruct("SoftReset_result", []thrift.TField{
    }),
  }
  {
  }
  return output
}

func (p *SoftResetResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    err = iprot.Skip(fieldTypeId)
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SoftResetResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SoftReset_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SoftResetResult) TStructName() string {
  return "SoftResetResult"
}

func (p *SoftResetResult) ThriftName() string {
  return "SoftReset_result"
}

func (p *SoftResetResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SoftResetResult(%+v)", *p)
}

func (p *SoftResetResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  _, ok := other.(*SoftResetResult)
  if !ok {
    return 0, false
  }
  return 0, true
}

func (p *SoftResetResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  }
  return nil
}

func (p *SoftResetResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    })
}

/**
 * Attributes:
 *  - _homeId
 *  - _command
 *  - _highPower
 *  - _nodeId
 *  - _arg
 */
type BeginControllerCommandArgs struct {
  thrift.TStruct
  _homeId int32 "_homeId"; // 1
  _command DriverControllerCommand "_command"; // 2
  _highPower bool "_highPower"; // 3
  _nodeId byte "_nodeId"; // 4
  _arg byte "_arg"; // 5
}

func NewBeginControllerCommandArgs() *BeginControllerCommandArgs {
  output := &BeginControllerCommandArgs{
    TStruct:thrift.NewTStruct("BeginControllerCommand_args", []thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_command", thrift.I32, 2),
    thrift.NewTField("_highPower", thrift.BOOL, 3),
    thrift.NewTField("_nodeId", thrift.BYTE, 4),
    thrift.NewTField("_arg", thrift.BYTE, 5),
    }),
  }
  {
  }
  return output
}

func (p *BeginControllerCommandArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_homeId" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_command" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "_highPower" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 4 || fieldName == "_nodeId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 5 || fieldName == "_arg" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField5(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField5(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *BeginControllerCommandArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1421, err1422 := iprot.ReadI32()
  if err1422 != nil { return thrift.NewTProtocolExceptionReadField(1, "_homeId", p.ThriftName(), err1422); }
  p._homeId = v1421
  return err
}

func (p *BeginControllerCommandArgs) ReadField_homeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *BeginControllerCommandArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1423, err1424 := iprot.ReadI32()
  if err1424 != nil { return thrift.NewTProtocolExceptionReadField(2, "_command", p.ThriftName(), err1424); }
  p._command = DriverControllerCommand(v1423)
  return err
}

func (p *BeginControllerCommandArgs) ReadField_command(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *BeginControllerCommandArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1425, err1426 := iprot.ReadBool()
  if err1426 != nil { return thrift.NewTProtocolExceptionReadField(3, "_highPower", p.ThriftName(), err1426); }
  p._highPower = v1425
  return err
}

func (p *BeginControllerCommandArgs) ReadField_highPower(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *BeginControllerCommandArgs) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1427, err1428 := iprot.ReadByte()
  if err1428 != nil { return thrift.NewTProtocolExceptionReadField(4, "_nodeId", p.ThriftName(), err1428); }
  p._nodeId = v1427
  return err
}

func (p *BeginControllerCommandArgs) ReadField_nodeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField4(iprot)
}

func (p *BeginControllerCommandArgs) ReadField5(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1429, err1430 := iprot.ReadByte()
  if err1430 != nil { return thrift.NewTProtocolExceptionReadField(5, "_arg", p.ThriftName(), err1430); }
  p._arg = v1429
  return err
}

func (p *BeginControllerCommandArgs) ReadField_arg(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField5(iprot)
}

func (p *BeginControllerCommandArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("BeginControllerCommand_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = p.WriteField4(oprot)
  if err != nil { return err }
  err = p.WriteField5(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *BeginControllerCommandArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_homeId", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._homeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  return err
}

func (p *BeginControllerCommandArgs) WriteField_homeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *BeginControllerCommandArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_command", thrift.I32, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_command", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._command))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_command", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_command", p.ThriftName(), err); }
  return err
}

func (p *BeginControllerCommandArgs) WriteField_command(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *BeginControllerCommandArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_highPower", thrift.BOOL, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_highPower", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p._highPower))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_highPower", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_highPower", p.ThriftName(), err); }
  return err
}

func (p *BeginControllerCommandArgs) WriteField_highPower(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *BeginControllerCommandArgs) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_nodeId", thrift.BYTE, 4)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._nodeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "_nodeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "_nodeId", p.ThriftName(), err); }
  return err
}

func (p *BeginControllerCommandArgs) WriteField_nodeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField4(oprot)
}

func (p *BeginControllerCommandArgs) WriteField5(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_arg", thrift.BYTE, 5)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "_arg", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._arg))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "_arg", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "_arg", p.ThriftName(), err); }
  return err
}

func (p *BeginControllerCommandArgs) WriteField_arg(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField5(oprot)
}

func (p *BeginControllerCommandArgs) TStructName() string {
  return "BeginControllerCommandArgs"
}

func (p *BeginControllerCommandArgs) ThriftName() string {
  return "BeginControllerCommand_args"
}

func (p *BeginControllerCommandArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BeginControllerCommandArgs(%+v)", *p)
}

func (p *BeginControllerCommandArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*BeginControllerCommandArgs)
  if !ok {
    return 0, false
  }
  if p._homeId != data._homeId {
    if p._homeId < data._homeId {
      return -1, true
    }
    return 1, true
  }
  if p._command != data._command {
    if p._command < data._command {
      return -1, true
    }
    return 1, true
  }
  if cmp := thrift.CompareBool(p._highPower, data._highPower); cmp != 0 {
    return cmp, true
  }
  if p._nodeId != data._nodeId {
    if p._nodeId < data._nodeId {
      return -1, true
    }
    return 1, true
  }
  if p._arg != data._arg {
    if p._arg < data._arg {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *BeginControllerCommandArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._homeId
  case 2: return p._command
  case 3: return p._highPower
  case 4: return p._nodeId
  case 5: return p._arg
  }
  return nil
}

func (p *BeginControllerCommandArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    thrift.NewTField("_command", thrift.I32, 2),
    thrift.NewTField("_highPower", thrift.BOOL, 3),
    thrift.NewTField("_nodeId", thrift.BYTE, 4),
    thrift.NewTField("_arg", thrift.BYTE, 5),
    })
}

/**
 * Attributes:
 *  - Success
 */
type BeginControllerCommandResult struct {
  thrift.TStruct
  Success bool "success"; // 0
}

func NewBeginControllerCommandResult() *BeginControllerCommandResult {
  output := &BeginControllerCommandResult{
    TStruct:thrift.NewTStruct("BeginControllerCommand_result", []thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    }),
  }
  {
  }
  return output
}

func (p *BeginControllerCommandResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *BeginControllerCommandResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1431, err1432 := iprot.ReadBool()
  if err1432 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1432); }
  p.Success = v1431
  return err
}

func (p *BeginControllerCommandResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *BeginControllerCommandResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("BeginControllerCommand_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *BeginControllerCommandResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BOOL, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *BeginControllerCommandResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *BeginControllerCommandResult) TStructName() string {
  return "BeginControllerCommandResult"
}

func (p *BeginControllerCommandResult) ThriftName() string {
  return "BeginControllerCommand_result"
}

func (p *BeginControllerCommandResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BeginControllerCommandResult(%+v)", *p)
}

func (p *BeginControllerCommandResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*BeginControllerCommandResult)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Success, data.Success); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *BeginControllerCommandResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *BeginControllerCommandResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    })
}

/**
 * Attributes:
 *  - _homeId
 */
type CancelControllerCommandArgs struct {
  thrift.TStruct
  _homeId int32 "_homeId"; // 1
}

func NewCancelControllerCommandArgs() *CancelControllerCommandArgs {
  output := &CancelControllerCommandArgs{
    TStruct:thrift.NewTStruct("CancelControllerCommand_args", []thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    }),
  }
  {
  }
  return output
}

func (p *CancelControllerCommandArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_homeId" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *CancelControllerCommandArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1433, err1434 := iprot.ReadI32()
  if err1434 != nil { return thrift.NewTProtocolExceptionReadField(1, "_homeId", p.ThriftName(), err1434); }
  p._homeId = v1433
  return err
}

func (p *CancelControllerCommandArgs) ReadField_homeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *CancelControllerCommandArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("CancelControllerCommand_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *CancelControllerCommandArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_homeId", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._homeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_homeId", p.ThriftName(), err); }
  return err
}

func (p *CancelControllerCommandArgs) WriteField_homeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *CancelControllerCommandArgs) TStructName() string {
  return "CancelControllerCommandArgs"
}

func (p *CancelControllerCommandArgs) ThriftName() string {
  return "CancelControllerCommand_args"
}

func (p *CancelControllerCommandArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CancelControllerCommandArgs(%+v)", *p)
}

func (p *CancelControllerCommandArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*CancelControllerCommandArgs)
  if !ok {
    return 0, false
  }
  if p._homeId != data._homeId {
    if p._homeId < data._homeId {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *CancelControllerCommandArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._homeId
  }
  return nil
}

func (p *CancelControllerCommandArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_homeId", thrift.I32, 1),
    })
}

/**
 * Attributes:
 *  - Success
 */
type CancelControllerCommandResult struct {
  thrift.TStruct
  Success bool "success"; // 0
}

func NewCancelControllerCommandResult() *CancelControllerCommandResult {
  output := &CancelControllerCommandResult{
    TStruct:thrift.NewTStruct("CancelControllerCommand_result", []thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    }),
  }
  {
  }
  return output
}

func (p *CancelControllerCommandResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *CancelControllerCommandResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1435, err1436 := iprot.ReadBool()
  if err1436 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1436); }
  p.Success = v1435
  return err
}

func (p *CancelControllerCommandResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *CancelControllerCommandResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("CancelControllerCommand_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *CancelControllerCommandResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BOOL, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *CancelControllerCommandResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *CancelControllerCommandResult) TStructName() string {
  return "CancelControllerCommandResult"
}

func (p *CancelControllerCommandResult) ThriftName() string {
  return "CancelControllerCommand_result"
}

func (p *CancelControllerCommandResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CancelControllerCommandResult(%+v)", *p)
}

func (p *CancelControllerCommandResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*CancelControllerCommandResult)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Success, data.Success); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *CancelControllerCommandResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *CancelControllerCommandResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    })
}

type GetNumScenesArgs struct {
  thrift.TStruct
}

func NewGetNumScenesArgs() *GetNumScenesArgs {
  output := &GetNumScenesArgs{
    TStruct:thrift.NewTStruct("GetNumScenes_args", []thrift.TField{
    }),
  }
  {
  }
  return output
}

func (p *GetNumScenesArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    err = iprot.Skip(fieldTypeId)
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNumScenesArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetNumScenes_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNumScenesArgs) TStructName() string {
  return "GetNumScenesArgs"
}

func (p *GetNumScenesArgs) ThriftName() string {
  return "GetNumScenes_args"
}

func (p *GetNumScenesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetNumScenesArgs(%+v)", *p)
}

func (p *GetNumScenesArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  _, ok := other.(*GetNumScenesArgs)
  if !ok {
    return 0, false
  }
  return 0, true
}

func (p *GetNumScenesArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  }
  return nil
}

func (p *GetNumScenesArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    })
}

/**
 * Attributes:
 *  - Success
 */
type GetNumScenesResult struct {
  thrift.TStruct
  Success byte "success"; // 0
}

func NewGetNumScenesResult() *GetNumScenesResult {
  output := &GetNumScenesResult{
    TStruct:thrift.NewTStruct("GetNumScenes_result", []thrift.TField{
    thrift.NewTField("success", thrift.BYTE, 0),
    }),
  }
  {
  }
  return output
}

func (p *GetNumScenesResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNumScenesResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1437, err1438 := iprot.ReadByte()
  if err1438 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1438); }
  p.Success = v1437
  return err
}

func (p *GetNumScenesResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetNumScenesResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetNumScenes_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNumScenesResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BYTE, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *GetNumScenesResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetNumScenesResult) TStructName() string {
  return "GetNumScenesResult"
}

func (p *GetNumScenesResult) ThriftName() string {
  return "GetNumScenes_result"
}

func (p *GetNumScenesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetNumScenesResult(%+v)", *p)
}

func (p *GetNumScenesResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetNumScenesResult)
  if !ok {
    return 0, false
  }
  if p.Success != data.Success {
    if p.Success < data.Success {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetNumScenesResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *GetNumScenesResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BYTE, 0),
    })
}

type GetAllScenesArgs struct {
  thrift.TStruct
}

func NewGetAllScenesArgs() *GetAllScenesArgs {
  output := &GetAllScenesArgs{
    TStruct:thrift.NewTStruct("GetAllScenes_args", []thrift.TField{
    }),
  }
  {
  }
  return output
}

func (p *GetAllScenesArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    err = iprot.Skip(fieldTypeId)
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetAllScenesArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetAllScenes_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetAllScenesArgs) TStructName() string {
  return "GetAllScenesArgs"
}

func (p *GetAllScenesArgs) ThriftName() string {
  return "GetAllScenes_args"
}

func (p *GetAllScenesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetAllScenesArgs(%+v)", *p)
}

func (p *GetAllScenesArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  _, ok := other.(*GetAllScenesArgs)
  if !ok {
    return 0, false
  }
  return 0, true
}

func (p *GetAllScenesArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  }
  return nil
}

func (p *GetAllScenesArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    })
}

/**
 * Attributes:
 *  - Success
 */
type GetAllScenesResult struct {
  thrift.TStruct
  Success *GetAllScenesReturnStruct "success"; // 0
}

func NewGetAllScenesResult() *GetAllScenesResult {
  output := &GetAllScenesResult{
    TStruct:thrift.NewTStruct("GetAllScenes_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    }),
  }
  {
  }
  return output
}

func (p *GetAllScenesResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetAllScenesResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Success = NewGetAllScenesReturnStruct()
  err1441 := p.Success.Read(iprot)
  if err1441 != nil { return thrift.NewTProtocolExceptionReadStruct("p.SuccessGetAllScenesReturnStruct", err1441); }
  return err
}

func (p *GetAllScenesResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetAllScenesResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetAllScenes_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetAllScenesResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = p.Success.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("GetAllScenesReturnStruct", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *GetAllScenesResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetAllScenesResult) TStructName() string {
  return "GetAllScenesResult"
}

func (p *GetAllScenesResult) ThriftName() string {
  return "GetAllScenes_result"
}

func (p *GetAllScenesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetAllScenesResult(%+v)", *p)
}

func (p *GetAllScenesResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetAllScenesResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetAllScenesResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *GetAllScenesResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    })
}

type CreateSceneArgs struct {
  thrift.TStruct
}

func NewCreateSceneArgs() *CreateSceneArgs {
  output := &CreateSceneArgs{
    TStruct:thrift.NewTStruct("CreateScene_args", []thrift.TField{
    }),
  }
  {
  }
  return output
}

func (p *CreateSceneArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    err = iprot.Skip(fieldTypeId)
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *CreateSceneArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("CreateScene_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *CreateSceneArgs) TStructName() string {
  return "CreateSceneArgs"
}

func (p *CreateSceneArgs) ThriftName() string {
  return "CreateScene_args"
}

func (p *CreateSceneArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CreateSceneArgs(%+v)", *p)
}

func (p *CreateSceneArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  _, ok := other.(*CreateSceneArgs)
  if !ok {
    return 0, false
  }
  return 0, true
}

func (p *CreateSceneArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  }
  return nil
}

func (p *CreateSceneArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    })
}

/**
 * Attributes:
 *  - Success
 */
type CreateSceneResult struct {
  thrift.TStruct
  Success byte "success"; // 0
}

func NewCreateSceneResult() *CreateSceneResult {
  output := &CreateSceneResult{
    TStruct:thrift.NewTStruct("CreateScene_result", []thrift.TField{
    thrift.NewTField("success", thrift.BYTE, 0),
    }),
  }
  {
  }
  return output
}

func (p *CreateSceneResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *CreateSceneResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1442, err1443 := iprot.ReadByte()
  if err1443 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1443); }
  p.Success = v1442
  return err
}

func (p *CreateSceneResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *CreateSceneResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("CreateScene_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *CreateSceneResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BYTE, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *CreateSceneResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *CreateSceneResult) TStructName() string {
  return "CreateSceneResult"
}

func (p *CreateSceneResult) ThriftName() string {
  return "CreateScene_result"
}

func (p *CreateSceneResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CreateSceneResult(%+v)", *p)
}

func (p *CreateSceneResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*CreateSceneResult)
  if !ok {
    return 0, false
  }
  if p.Success != data.Success {
    if p.Success < data.Success {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *CreateSceneResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *CreateSceneResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BYTE, 0),
    })
}

/**
 * Attributes:
 *  - _sceneId
 */
type RemoveSceneArgs struct {
  thrift.TStruct
  _sceneId byte "_sceneId"; // 1
}

func NewRemoveSceneArgs() *RemoveSceneArgs {
  output := &RemoveSceneArgs{
    TStruct:thrift.NewTStruct("RemoveScene_args", []thrift.TField{
    thrift.NewTField("_sceneId", thrift.BYTE, 1),
    }),
  }
  {
  }
  return output
}

func (p *RemoveSceneArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_sceneId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *RemoveSceneArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1444, err1445 := iprot.ReadByte()
  if err1445 != nil { return thrift.NewTProtocolExceptionReadField(1, "_sceneId", p.ThriftName(), err1445); }
  p._sceneId = v1444
  return err
}

func (p *RemoveSceneArgs) ReadField_sceneId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *RemoveSceneArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("RemoveScene_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *RemoveSceneArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_sceneId", thrift.BYTE, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._sceneId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  return err
}

func (p *RemoveSceneArgs) WriteField_sceneId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *RemoveSceneArgs) TStructName() string {
  return "RemoveSceneArgs"
}

func (p *RemoveSceneArgs) ThriftName() string {
  return "RemoveScene_args"
}

func (p *RemoveSceneArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RemoveSceneArgs(%+v)", *p)
}

func (p *RemoveSceneArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*RemoveSceneArgs)
  if !ok {
    return 0, false
  }
  if p._sceneId != data._sceneId {
    if p._sceneId < data._sceneId {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *RemoveSceneArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._sceneId
  }
  return nil
}

func (p *RemoveSceneArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_sceneId", thrift.BYTE, 1),
    })
}

/**
 * Attributes:
 *  - Success
 */
type RemoveSceneResult struct {
  thrift.TStruct
  Success bool "success"; // 0
}

func NewRemoveSceneResult() *RemoveSceneResult {
  output := &RemoveSceneResult{
    TStruct:thrift.NewTStruct("RemoveScene_result", []thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    }),
  }
  {
  }
  return output
}

func (p *RemoveSceneResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *RemoveSceneResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1446, err1447 := iprot.ReadBool()
  if err1447 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1447); }
  p.Success = v1446
  return err
}

func (p *RemoveSceneResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *RemoveSceneResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("RemoveScene_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *RemoveSceneResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BOOL, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *RemoveSceneResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *RemoveSceneResult) TStructName() string {
  return "RemoveSceneResult"
}

func (p *RemoveSceneResult) ThriftName() string {
  return "RemoveScene_result"
}

func (p *RemoveSceneResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RemoveSceneResult(%+v)", *p)
}

func (p *RemoveSceneResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*RemoveSceneResult)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Success, data.Success); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *RemoveSceneResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *RemoveSceneResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    })
}

/**
 * Attributes:
 *  - _sceneId
 *  - _valueId
 *  - _value
 */
type AddSceneValueBoolArgs struct {
  thrift.TStruct
  _sceneId byte "_sceneId"; // 1
  _valueId *RemoteValueID "_valueId"; // 2
  _value bool "_value"; // 3
}

func NewAddSceneValueBoolArgs() *AddSceneValueBoolArgs {
  output := &AddSceneValueBoolArgs{
    TStruct:thrift.NewTStruct("AddSceneValue_Bool_args", []thrift.TField{
    thrift.NewTField("_sceneId", thrift.BYTE, 1),
    thrift.NewTField("_valueId", thrift.STRUCT, 2),
    thrift.NewTField("_value", thrift.BOOL, 3),
    }),
  }
  {
  }
  return output
}

func (p *AddSceneValueBoolArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_sceneId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_valueId" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "_value" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *AddSceneValueBoolArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1448, err1449 := iprot.ReadByte()
  if err1449 != nil { return thrift.NewTProtocolExceptionReadField(1, "_sceneId", p.ThriftName(), err1449); }
  p._sceneId = v1448
  return err
}

func (p *AddSceneValueBoolArgs) ReadField_sceneId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *AddSceneValueBoolArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p._valueId = NewRemoteValueID()
  err1452 := p._valueId.Read(iprot)
  if err1452 != nil { return thrift.NewTProtocolExceptionReadStruct("p._valueIdRemoteValueID", err1452); }
  return err
}

func (p *AddSceneValueBoolArgs) ReadField_valueId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *AddSceneValueBoolArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1453, err1454 := iprot.ReadBool()
  if err1454 != nil { return thrift.NewTProtocolExceptionReadField(3, "_value", p.ThriftName(), err1454); }
  p._value = v1453
  return err
}

func (p *AddSceneValueBoolArgs) ReadField_value(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *AddSceneValueBoolArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("AddSceneValue_Bool_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *AddSceneValueBoolArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_sceneId", thrift.BYTE, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._sceneId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  return err
}

func (p *AddSceneValueBoolArgs) WriteField_sceneId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *AddSceneValueBoolArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._valueId != nil {
    err = oprot.WriteFieldBegin("_valueId", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_valueId", p.ThriftName(), err); }
    err = p._valueId.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RemoteValueID", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_valueId", p.ThriftName(), err); }
  }
  return err
}

func (p *AddSceneValueBoolArgs) WriteField_valueId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *AddSceneValueBoolArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_value", thrift.BOOL, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_value", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p._value))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_value", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_value", p.ThriftName(), err); }
  return err
}

func (p *AddSceneValueBoolArgs) WriteField_value(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *AddSceneValueBoolArgs) TStructName() string {
  return "AddSceneValueBoolArgs"
}

func (p *AddSceneValueBoolArgs) ThriftName() string {
  return "AddSceneValue_Bool_args"
}

func (p *AddSceneValueBoolArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AddSceneValueBoolArgs(%+v)", *p)
}

func (p *AddSceneValueBoolArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*AddSceneValueBoolArgs)
  if !ok {
    return 0, false
  }
  if p._sceneId != data._sceneId {
    if p._sceneId < data._sceneId {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p._valueId.CompareTo(data._valueId); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp := thrift.CompareBool(p._value, data._value); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *AddSceneValueBoolArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._sceneId
  case 2: return p._valueId
  case 3: return p._value
  }
  return nil
}

func (p *AddSceneValueBoolArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_sceneId", thrift.BYTE, 1),
    thrift.NewTField("_valueId", thrift.STRUCT, 2),
    thrift.NewTField("_value", thrift.BOOL, 3),
    })
}

/**
 * Attributes:
 *  - Success
 */
type AddSceneValueBoolResult struct {
  thrift.TStruct
  Success bool "success"; // 0
}

func NewAddSceneValueBoolResult() *AddSceneValueBoolResult {
  output := &AddSceneValueBoolResult{
    TStruct:thrift.NewTStruct("AddSceneValue_Bool_result", []thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    }),
  }
  {
  }
  return output
}

func (p *AddSceneValueBoolResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *AddSceneValueBoolResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1455, err1456 := iprot.ReadBool()
  if err1456 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1456); }
  p.Success = v1455
  return err
}

func (p *AddSceneValueBoolResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *AddSceneValueBoolResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("AddSceneValue_Bool_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *AddSceneValueBoolResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BOOL, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *AddSceneValueBoolResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *AddSceneValueBoolResult) TStructName() string {
  return "AddSceneValueBoolResult"
}

func (p *AddSceneValueBoolResult) ThriftName() string {
  return "AddSceneValue_Bool_result"
}

func (p *AddSceneValueBoolResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AddSceneValueBoolResult(%+v)", *p)
}

func (p *AddSceneValueBoolResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*AddSceneValueBoolResult)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Success, data.Success); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *AddSceneValueBoolResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *AddSceneValueBoolResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    })
}

/**
 * Attributes:
 *  - _sceneId
 *  - _valueId
 *  - _value
 */
type AddSceneValueUint8Args struct {
  thrift.TStruct
  _sceneId byte "_sceneId"; // 1
  _valueId *RemoteValueID "_valueId"; // 2
  _value byte "_value"; // 3
}

func NewAddSceneValueUint8Args() *AddSceneValueUint8Args {
  output := &AddSceneValueUint8Args{
    TStruct:thrift.NewTStruct("AddSceneValue_Uint8_args", []thrift.TField{
    thrift.NewTField("_sceneId", thrift.BYTE, 1),
    thrift.NewTField("_valueId", thrift.STRUCT, 2),
    thrift.NewTField("_value", thrift.BYTE, 3),
    }),
  }
  {
  }
  return output
}

func (p *AddSceneValueUint8Args) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_sceneId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_valueId" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "_value" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *AddSceneValueUint8Args) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1457, err1458 := iprot.ReadByte()
  if err1458 != nil { return thrift.NewTProtocolExceptionReadField(1, "_sceneId", p.ThriftName(), err1458); }
  p._sceneId = v1457
  return err
}

func (p *AddSceneValueUint8Args) ReadField_sceneId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *AddSceneValueUint8Args) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p._valueId = NewRemoteValueID()
  err1461 := p._valueId.Read(iprot)
  if err1461 != nil { return thrift.NewTProtocolExceptionReadStruct("p._valueIdRemoteValueID", err1461); }
  return err
}

func (p *AddSceneValueUint8Args) ReadField_valueId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *AddSceneValueUint8Args) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1462, err1463 := iprot.ReadByte()
  if err1463 != nil { return thrift.NewTProtocolExceptionReadField(3, "_value", p.ThriftName(), err1463); }
  p._value = v1462
  return err
}

func (p *AddSceneValueUint8Args) ReadField_value(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *AddSceneValueUint8Args) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("AddSceneValue_Uint8_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *AddSceneValueUint8Args) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_sceneId", thrift.BYTE, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._sceneId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  return err
}

func (p *AddSceneValueUint8Args) WriteField_sceneId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *AddSceneValueUint8Args) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._valueId != nil {
    err = oprot.WriteFieldBegin("_valueId", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_valueId", p.ThriftName(), err); }
    err = p._valueId.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RemoteValueID", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_valueId", p.ThriftName(), err); }
  }
  return err
}

func (p *AddSceneValueUint8Args) WriteField_valueId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *AddSceneValueUint8Args) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_value", thrift.BYTE, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_value", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._value))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_value", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_value", p.ThriftName(), err); }
  return err
}

func (p *AddSceneValueUint8Args) WriteField_value(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *AddSceneValueUint8Args) TStructName() string {
  return "AddSceneValueUint8Args"
}

func (p *AddSceneValueUint8Args) ThriftName() string {
  return "AddSceneValue_Uint8_args"
}

func (p *AddSceneValueUint8Args) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AddSceneValueUint8Args(%+v)", *p)
}

func (p *AddSceneValueUint8Args) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*AddSceneValueUint8Args)
  if !ok {
    return 0, false
  }
  if p._sceneId != data._sceneId {
    if p._sceneId < data._sceneId {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p._valueId.CompareTo(data._valueId); !ok || cmp != 0 {
    return cmp, ok
  }
  if p._value != data._value {
    if p._value < data._value {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *AddSceneValueUint8Args) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._sceneId
  case 2: return p._valueId
  case 3: return p._value
  }
  return nil
}

func (p *AddSceneValueUint8Args) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_sceneId", thrift.BYTE, 1),
    thrift.NewTField("_valueId", thrift.STRUCT, 2),
    thrift.NewTField("_value", thrift.BYTE, 3),
    })
}

/**
 * Attributes:
 *  - Success
 */
type AddSceneValueUint8Result struct {
  thrift.TStruct
  Success bool "success"; // 0
}

func NewAddSceneValueUint8Result() *AddSceneValueUint8Result {
  output := &AddSceneValueUint8Result{
    TStruct:thrift.NewTStruct("AddSceneValue_Uint8_result", []thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    }),
  }
  {
  }
  return output
}

func (p *AddSceneValueUint8Result) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *AddSceneValueUint8Result) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1464, err1465 := iprot.ReadBool()
  if err1465 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1465); }
  p.Success = v1464
  return err
}

func (p *AddSceneValueUint8Result) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *AddSceneValueUint8Result) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("AddSceneValue_Uint8_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *AddSceneValueUint8Result) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BOOL, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *AddSceneValueUint8Result) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *AddSceneValueUint8Result) TStructName() string {
  return "AddSceneValueUint8Result"
}

func (p *AddSceneValueUint8Result) ThriftName() string {
  return "AddSceneValue_Uint8_result"
}

func (p *AddSceneValueUint8Result) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AddSceneValueUint8Result(%+v)", *p)
}

func (p *AddSceneValueUint8Result) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*AddSceneValueUint8Result)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Success, data.Success); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *AddSceneValueUint8Result) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *AddSceneValueUint8Result) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    })
}

/**
 * Attributes:
 *  - _sceneId
 *  - _valueId
 *  - _value
 */
type AddSceneValueFloatArgs struct {
  thrift.TStruct
  _sceneId byte "_sceneId"; // 1
  _valueId *RemoteValueID "_valueId"; // 2
  _value float64 "_value"; // 3
}

func NewAddSceneValueFloatArgs() *AddSceneValueFloatArgs {
  output := &AddSceneValueFloatArgs{
    TStruct:thrift.NewTStruct("AddSceneValue_Float_args", []thrift.TField{
    thrift.NewTField("_sceneId", thrift.BYTE, 1),
    thrift.NewTField("_valueId", thrift.STRUCT, 2),
    thrift.NewTField("_value", thrift.DOUBLE, 3),
    }),
  }
  {
  }
  return output
}

func (p *AddSceneValueFloatArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_sceneId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_valueId" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "_value" {
      if fieldTypeId == thrift.DOUBLE {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *AddSceneValueFloatArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1466, err1467 := iprot.ReadByte()
  if err1467 != nil { return thrift.NewTProtocolExceptionReadField(1, "_sceneId", p.ThriftName(), err1467); }
  p._sceneId = v1466
  return err
}

func (p *AddSceneValueFloatArgs) ReadField_sceneId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *AddSceneValueFloatArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p._valueId = NewRemoteValueID()
  err1470 := p._valueId.Read(iprot)
  if err1470 != nil { return thrift.NewTProtocolExceptionReadStruct("p._valueIdRemoteValueID", err1470); }
  return err
}

func (p *AddSceneValueFloatArgs) ReadField_valueId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *AddSceneValueFloatArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1471, err1472 := iprot.ReadDouble()
  if err1472 != nil { return thrift.NewTProtocolExceptionReadField(3, "_value", p.ThriftName(), err1472); }
  p._value = v1471
  return err
}

func (p *AddSceneValueFloatArgs) ReadField_value(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *AddSceneValueFloatArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("AddSceneValue_Float_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *AddSceneValueFloatArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_sceneId", thrift.BYTE, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._sceneId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  return err
}

func (p *AddSceneValueFloatArgs) WriteField_sceneId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *AddSceneValueFloatArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._valueId != nil {
    err = oprot.WriteFieldBegin("_valueId", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_valueId", p.ThriftName(), err); }
    err = p._valueId.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RemoteValueID", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_valueId", p.ThriftName(), err); }
  }
  return err
}

func (p *AddSceneValueFloatArgs) WriteField_valueId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *AddSceneValueFloatArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_value", thrift.DOUBLE, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_value", p.ThriftName(), err); }
  err = oprot.WriteDouble(float64(p._value))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_value", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_value", p.ThriftName(), err); }
  return err
}

func (p *AddSceneValueFloatArgs) WriteField_value(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *AddSceneValueFloatArgs) TStructName() string {
  return "AddSceneValueFloatArgs"
}

func (p *AddSceneValueFloatArgs) ThriftName() string {
  return "AddSceneValue_Float_args"
}

func (p *AddSceneValueFloatArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AddSceneValueFloatArgs(%+v)", *p)
}

func (p *AddSceneValueFloatArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*AddSceneValueFloatArgs)
  if !ok {
    return 0, false
  }
  if p._sceneId != data._sceneId {
    if p._sceneId < data._sceneId {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p._valueId.CompareTo(data._valueId); !ok || cmp != 0 {
    return cmp, ok
  }
  if p._value != data._value {
    if p._value < data._value {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *AddSceneValueFloatArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._sceneId
  case 2: return p._valueId
  case 3: return p._value
  }
  return nil
}

func (p *AddSceneValueFloatArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_sceneId", thrift.BYTE, 1),
    thrift.NewTField("_valueId", thrift.STRUCT, 2),
    thrift.NewTField("_value", thrift.DOUBLE, 3),
    })
}

/**
 * Attributes:
 *  - Success
 */
type AddSceneValueFloatResult struct {
  thrift.TStruct
  Success bool "success"; // 0
}

func NewAddSceneValueFloatResult() *AddSceneValueFloatResult {
  output := &AddSceneValueFloatResult{
    TStruct:thrift.NewTStruct("AddSceneValue_Float_result", []thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    }),
  }
  {
  }
  return output
}

func (p *AddSceneValueFloatResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *AddSceneValueFloatResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1473, err1474 := iprot.ReadBool()
  if err1474 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1474); }
  p.Success = v1473
  return err
}

func (p *AddSceneValueFloatResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *AddSceneValueFloatResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("AddSceneValue_Float_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *AddSceneValueFloatResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BOOL, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *AddSceneValueFloatResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *AddSceneValueFloatResult) TStructName() string {
  return "AddSceneValueFloatResult"
}

func (p *AddSceneValueFloatResult) ThriftName() string {
  return "AddSceneValue_Float_result"
}

func (p *AddSceneValueFloatResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AddSceneValueFloatResult(%+v)", *p)
}

func (p *AddSceneValueFloatResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*AddSceneValueFloatResult)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Success, data.Success); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *AddSceneValueFloatResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *AddSceneValueFloatResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    })
}

/**
 * Attributes:
 *  - _sceneId
 *  - _valueId
 *  - _value
 */
type AddSceneValueInt32Args struct {
  thrift.TStruct
  _sceneId byte "_sceneId"; // 1
  _valueId *RemoteValueID "_valueId"; // 2
  _value int32 "_value"; // 3
}

func NewAddSceneValueInt32Args() *AddSceneValueInt32Args {
  output := &AddSceneValueInt32Args{
    TStruct:thrift.NewTStruct("AddSceneValue_Int32_args", []thrift.TField{
    thrift.NewTField("_sceneId", thrift.BYTE, 1),
    thrift.NewTField("_valueId", thrift.STRUCT, 2),
    thrift.NewTField("_value", thrift.I32, 3),
    }),
  }
  {
  }
  return output
}

func (p *AddSceneValueInt32Args) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_sceneId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_valueId" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "_value" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *AddSceneValueInt32Args) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1475, err1476 := iprot.ReadByte()
  if err1476 != nil { return thrift.NewTProtocolExceptionReadField(1, "_sceneId", p.ThriftName(), err1476); }
  p._sceneId = v1475
  return err
}

func (p *AddSceneValueInt32Args) ReadField_sceneId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *AddSceneValueInt32Args) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p._valueId = NewRemoteValueID()
  err1479 := p._valueId.Read(iprot)
  if err1479 != nil { return thrift.NewTProtocolExceptionReadStruct("p._valueIdRemoteValueID", err1479); }
  return err
}

func (p *AddSceneValueInt32Args) ReadField_valueId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *AddSceneValueInt32Args) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1480, err1481 := iprot.ReadI32()
  if err1481 != nil { return thrift.NewTProtocolExceptionReadField(3, "_value", p.ThriftName(), err1481); }
  p._value = v1480
  return err
}

func (p *AddSceneValueInt32Args) ReadField_value(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *AddSceneValueInt32Args) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("AddSceneValue_Int32_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *AddSceneValueInt32Args) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_sceneId", thrift.BYTE, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._sceneId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  return err
}

func (p *AddSceneValueInt32Args) WriteField_sceneId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *AddSceneValueInt32Args) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._valueId != nil {
    err = oprot.WriteFieldBegin("_valueId", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_valueId", p.ThriftName(), err); }
    err = p._valueId.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RemoteValueID", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_valueId", p.ThriftName(), err); }
  }
  return err
}

func (p *AddSceneValueInt32Args) WriteField_valueId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *AddSceneValueInt32Args) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_value", thrift.I32, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_value", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._value))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_value", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_value", p.ThriftName(), err); }
  return err
}

func (p *AddSceneValueInt32Args) WriteField_value(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *AddSceneValueInt32Args) TStructName() string {
  return "AddSceneValueInt32Args"
}

func (p *AddSceneValueInt32Args) ThriftName() string {
  return "AddSceneValue_Int32_args"
}

func (p *AddSceneValueInt32Args) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AddSceneValueInt32Args(%+v)", *p)
}

func (p *AddSceneValueInt32Args) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*AddSceneValueInt32Args)
  if !ok {
    return 0, false
  }
  if p._sceneId != data._sceneId {
    if p._sceneId < data._sceneId {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p._valueId.CompareTo(data._valueId); !ok || cmp != 0 {
    return cmp, ok
  }
  if p._value != data._value {
    if p._value < data._value {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *AddSceneValueInt32Args) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._sceneId
  case 2: return p._valueId
  case 3: return p._value
  }
  return nil
}

func (p *AddSceneValueInt32Args) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_sceneId", thrift.BYTE, 1),
    thrift.NewTField("_valueId", thrift.STRUCT, 2),
    thrift.NewTField("_value", thrift.I32, 3),
    })
}

/**
 * Attributes:
 *  - Success
 */
type AddSceneValueInt32Result struct {
  thrift.TStruct
  Success bool "success"; // 0
}

func NewAddSceneValueInt32Result() *AddSceneValueInt32Result {
  output := &AddSceneValueInt32Result{
    TStruct:thrift.NewTStruct("AddSceneValue_Int32_result", []thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    }),
  }
  {
  }
  return output
}

func (p *AddSceneValueInt32Result) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *AddSceneValueInt32Result) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1482, err1483 := iprot.ReadBool()
  if err1483 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1483); }
  p.Success = v1482
  return err
}

func (p *AddSceneValueInt32Result) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *AddSceneValueInt32Result) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("AddSceneValue_Int32_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *AddSceneValueInt32Result) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BOOL, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *AddSceneValueInt32Result) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *AddSceneValueInt32Result) TStructName() string {
  return "AddSceneValueInt32Result"
}

func (p *AddSceneValueInt32Result) ThriftName() string {
  return "AddSceneValue_Int32_result"
}

func (p *AddSceneValueInt32Result) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AddSceneValueInt32Result(%+v)", *p)
}

func (p *AddSceneValueInt32Result) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*AddSceneValueInt32Result)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Success, data.Success); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *AddSceneValueInt32Result) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *AddSceneValueInt32Result) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    })
}

/**
 * Attributes:
 *  - _sceneId
 *  - _valueId
 *  - _value
 */
type AddSceneValueInt16Args struct {
  thrift.TStruct
  _sceneId byte "_sceneId"; // 1
  _valueId *RemoteValueID "_valueId"; // 2
  _value int16 "_value"; // 3
}

func NewAddSceneValueInt16Args() *AddSceneValueInt16Args {
  output := &AddSceneValueInt16Args{
    TStruct:thrift.NewTStruct("AddSceneValue_Int16_args", []thrift.TField{
    thrift.NewTField("_sceneId", thrift.BYTE, 1),
    thrift.NewTField("_valueId", thrift.STRUCT, 2),
    thrift.NewTField("_value", thrift.I16, 3),
    }),
  }
  {
  }
  return output
}

func (p *AddSceneValueInt16Args) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_sceneId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_valueId" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "_value" {
      if fieldTypeId == thrift.I16 {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *AddSceneValueInt16Args) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1484, err1485 := iprot.ReadByte()
  if err1485 != nil { return thrift.NewTProtocolExceptionReadField(1, "_sceneId", p.ThriftName(), err1485); }
  p._sceneId = v1484
  return err
}

func (p *AddSceneValueInt16Args) ReadField_sceneId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *AddSceneValueInt16Args) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p._valueId = NewRemoteValueID()
  err1488 := p._valueId.Read(iprot)
  if err1488 != nil { return thrift.NewTProtocolExceptionReadStruct("p._valueIdRemoteValueID", err1488); }
  return err
}

func (p *AddSceneValueInt16Args) ReadField_valueId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *AddSceneValueInt16Args) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1489, err1490 := iprot.ReadI16()
  if err1490 != nil { return thrift.NewTProtocolExceptionReadField(3, "_value", p.ThriftName(), err1490); }
  p._value = v1489
  return err
}

func (p *AddSceneValueInt16Args) ReadField_value(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *AddSceneValueInt16Args) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("AddSceneValue_Int16_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *AddSceneValueInt16Args) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_sceneId", thrift.BYTE, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._sceneId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  return err
}

func (p *AddSceneValueInt16Args) WriteField_sceneId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *AddSceneValueInt16Args) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._valueId != nil {
    err = oprot.WriteFieldBegin("_valueId", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_valueId", p.ThriftName(), err); }
    err = p._valueId.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RemoteValueID", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_valueId", p.ThriftName(), err); }
  }
  return err
}

func (p *AddSceneValueInt16Args) WriteField_valueId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *AddSceneValueInt16Args) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_value", thrift.I16, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_value", p.ThriftName(), err); }
  err = oprot.WriteI16(int16(p._value))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_value", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_value", p.ThriftName(), err); }
  return err
}

func (p *AddSceneValueInt16Args) WriteField_value(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *AddSceneValueInt16Args) TStructName() string {
  return "AddSceneValueInt16Args"
}

func (p *AddSceneValueInt16Args) ThriftName() string {
  return "AddSceneValue_Int16_args"
}

func (p *AddSceneValueInt16Args) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AddSceneValueInt16Args(%+v)", *p)
}

func (p *AddSceneValueInt16Args) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*AddSceneValueInt16Args)
  if !ok {
    return 0, false
  }
  if p._sceneId != data._sceneId {
    if p._sceneId < data._sceneId {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p._valueId.CompareTo(data._valueId); !ok || cmp != 0 {
    return cmp, ok
  }
  if p._value != data._value {
    if p._value < data._value {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *AddSceneValueInt16Args) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._sceneId
  case 2: return p._valueId
  case 3: return p._value
  }
  return nil
}

func (p *AddSceneValueInt16Args) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_sceneId", thrift.BYTE, 1),
    thrift.NewTField("_valueId", thrift.STRUCT, 2),
    thrift.NewTField("_value", thrift.I16, 3),
    })
}

/**
 * Attributes:
 *  - Success
 */
type AddSceneValueInt16Result struct {
  thrift.TStruct
  Success bool "success"; // 0
}

func NewAddSceneValueInt16Result() *AddSceneValueInt16Result {
  output := &AddSceneValueInt16Result{
    TStruct:thrift.NewTStruct("AddSceneValue_Int16_result", []thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    }),
  }
  {
  }
  return output
}

func (p *AddSceneValueInt16Result) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *AddSceneValueInt16Result) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1491, err1492 := iprot.ReadBool()
  if err1492 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1492); }
  p.Success = v1491
  return err
}

func (p *AddSceneValueInt16Result) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *AddSceneValueInt16Result) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("AddSceneValue_Int16_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *AddSceneValueInt16Result) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BOOL, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *AddSceneValueInt16Result) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *AddSceneValueInt16Result) TStructName() string {
  return "AddSceneValueInt16Result"
}

func (p *AddSceneValueInt16Result) ThriftName() string {
  return "AddSceneValue_Int16_result"
}

func (p *AddSceneValueInt16Result) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AddSceneValueInt16Result(%+v)", *p)
}

func (p *AddSceneValueInt16Result) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*AddSceneValueInt16Result)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Success, data.Success); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *AddSceneValueInt16Result) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *AddSceneValueInt16Result) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    })
}

/**
 * Attributes:
 *  - _sceneId
 *  - _valueId
 *  - _value
 */
type AddSceneValueStringArgs struct {
  thrift.TStruct
  _sceneId byte "_sceneId"; // 1
  _valueId *RemoteValueID "_valueId"; // 2
  _value string "_value"; // 3
}

func NewAddSceneValueStringArgs() *AddSceneValueStringArgs {
  output := &AddSceneValueStringArgs{
    TStruct:thrift.NewTStruct("AddSceneValue_String_args", []thrift.TField{
    thrift.NewTField("_sceneId", thrift.BYTE, 1),
    thrift.NewTField("_valueId", thrift.STRUCT, 2),
    thrift.NewTField("_value", thrift.STRING, 3),
    }),
  }
  {
  }
  return output
}

func (p *AddSceneValueStringArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_sceneId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_valueId" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "_value" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *AddSceneValueStringArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1493, err1494 := iprot.ReadByte()
  if err1494 != nil { return thrift.NewTProtocolExceptionReadField(1, "_sceneId", p.ThriftName(), err1494); }
  p._sceneId = v1493
  return err
}

func (p *AddSceneValueStringArgs) ReadField_sceneId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *AddSceneValueStringArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p._valueId = NewRemoteValueID()
  err1497 := p._valueId.Read(iprot)
  if err1497 != nil { return thrift.NewTProtocolExceptionReadStruct("p._valueIdRemoteValueID", err1497); }
  return err
}

func (p *AddSceneValueStringArgs) ReadField_valueId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *AddSceneValueStringArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1498, err1499 := iprot.ReadString()
  if err1499 != nil { return thrift.NewTProtocolExceptionReadField(3, "_value", p.ThriftName(), err1499); }
  p._value = v1498
  return err
}

func (p *AddSceneValueStringArgs) ReadField_value(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *AddSceneValueStringArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("AddSceneValue_String_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *AddSceneValueStringArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_sceneId", thrift.BYTE, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._sceneId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  return err
}

func (p *AddSceneValueStringArgs) WriteField_sceneId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *AddSceneValueStringArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._valueId != nil {
    err = oprot.WriteFieldBegin("_valueId", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_valueId", p.ThriftName(), err); }
    err = p._valueId.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RemoteValueID", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_valueId", p.ThriftName(), err); }
  }
  return err
}

func (p *AddSceneValueStringArgs) WriteField_valueId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *AddSceneValueStringArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_value", thrift.STRING, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_value", p.ThriftName(), err); }
  err = oprot.WriteString(string(p._value))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_value", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_value", p.ThriftName(), err); }
  return err
}

func (p *AddSceneValueStringArgs) WriteField_value(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *AddSceneValueStringArgs) TStructName() string {
  return "AddSceneValueStringArgs"
}

func (p *AddSceneValueStringArgs) ThriftName() string {
  return "AddSceneValue_String_args"
}

func (p *AddSceneValueStringArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AddSceneValueStringArgs(%+v)", *p)
}

func (p *AddSceneValueStringArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*AddSceneValueStringArgs)
  if !ok {
    return 0, false
  }
  if p._sceneId != data._sceneId {
    if p._sceneId < data._sceneId {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p._valueId.CompareTo(data._valueId); !ok || cmp != 0 {
    return cmp, ok
  }
  if p._value != data._value {
    if p._value < data._value {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *AddSceneValueStringArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._sceneId
  case 2: return p._valueId
  case 3: return p._value
  }
  return nil
}

func (p *AddSceneValueStringArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_sceneId", thrift.BYTE, 1),
    thrift.NewTField("_valueId", thrift.STRUCT, 2),
    thrift.NewTField("_value", thrift.STRING, 3),
    })
}

/**
 * Attributes:
 *  - Success
 */
type AddSceneValueStringResult struct {
  thrift.TStruct
  Success bool "success"; // 0
}

func NewAddSceneValueStringResult() *AddSceneValueStringResult {
  output := &AddSceneValueStringResult{
    TStruct:thrift.NewTStruct("AddSceneValue_String_result", []thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    }),
  }
  {
  }
  return output
}

func (p *AddSceneValueStringResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *AddSceneValueStringResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1500, err1501 := iprot.ReadBool()
  if err1501 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1501); }
  p.Success = v1500
  return err
}

func (p *AddSceneValueStringResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *AddSceneValueStringResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("AddSceneValue_String_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *AddSceneValueStringResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BOOL, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *AddSceneValueStringResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *AddSceneValueStringResult) TStructName() string {
  return "AddSceneValueStringResult"
}

func (p *AddSceneValueStringResult) ThriftName() string {
  return "AddSceneValue_String_result"
}

func (p *AddSceneValueStringResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AddSceneValueStringResult(%+v)", *p)
}

func (p *AddSceneValueStringResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*AddSceneValueStringResult)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Success, data.Success); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *AddSceneValueStringResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *AddSceneValueStringResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    })
}

/**
 * Attributes:
 *  - _sceneId
 *  - _valueId
 *  - _value
 */
type AddSceneValueListSelectionStringArgs struct {
  thrift.TStruct
  _sceneId byte "_sceneId"; // 1
  _valueId *RemoteValueID "_valueId"; // 2
  _value string "_value"; // 3
}

func NewAddSceneValueListSelectionStringArgs() *AddSceneValueListSelectionStringArgs {
  output := &AddSceneValueListSelectionStringArgs{
    TStruct:thrift.NewTStruct("AddSceneValueListSelection_String_args", []thrift.TField{
    thrift.NewTField("_sceneId", thrift.BYTE, 1),
    thrift.NewTField("_valueId", thrift.STRUCT, 2),
    thrift.NewTField("_value", thrift.STRING, 3),
    }),
  }
  {
  }
  return output
}

func (p *AddSceneValueListSelectionStringArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_sceneId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_valueId" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "_value" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *AddSceneValueListSelectionStringArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1502, err1503 := iprot.ReadByte()
  if err1503 != nil { return thrift.NewTProtocolExceptionReadField(1, "_sceneId", p.ThriftName(), err1503); }
  p._sceneId = v1502
  return err
}

func (p *AddSceneValueListSelectionStringArgs) ReadField_sceneId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *AddSceneValueListSelectionStringArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p._valueId = NewRemoteValueID()
  err1506 := p._valueId.Read(iprot)
  if err1506 != nil { return thrift.NewTProtocolExceptionReadStruct("p._valueIdRemoteValueID", err1506); }
  return err
}

func (p *AddSceneValueListSelectionStringArgs) ReadField_valueId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *AddSceneValueListSelectionStringArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1507, err1508 := iprot.ReadString()
  if err1508 != nil { return thrift.NewTProtocolExceptionReadField(3, "_value", p.ThriftName(), err1508); }
  p._value = v1507
  return err
}

func (p *AddSceneValueListSelectionStringArgs) ReadField_value(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *AddSceneValueListSelectionStringArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("AddSceneValueListSelection_String_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *AddSceneValueListSelectionStringArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_sceneId", thrift.BYTE, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._sceneId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  return err
}

func (p *AddSceneValueListSelectionStringArgs) WriteField_sceneId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *AddSceneValueListSelectionStringArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._valueId != nil {
    err = oprot.WriteFieldBegin("_valueId", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_valueId", p.ThriftName(), err); }
    err = p._valueId.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RemoteValueID", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_valueId", p.ThriftName(), err); }
  }
  return err
}

func (p *AddSceneValueListSelectionStringArgs) WriteField_valueId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *AddSceneValueListSelectionStringArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_value", thrift.STRING, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_value", p.ThriftName(), err); }
  err = oprot.WriteString(string(p._value))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_value", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_value", p.ThriftName(), err); }
  return err
}

func (p *AddSceneValueListSelectionStringArgs) WriteField_value(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *AddSceneValueListSelectionStringArgs) TStructName() string {
  return "AddSceneValueListSelectionStringArgs"
}

func (p *AddSceneValueListSelectionStringArgs) ThriftName() string {
  return "AddSceneValueListSelection_String_args"
}

func (p *AddSceneValueListSelectionStringArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AddSceneValueListSelectionStringArgs(%+v)", *p)
}

func (p *AddSceneValueListSelectionStringArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*AddSceneValueListSelectionStringArgs)
  if !ok {
    return 0, false
  }
  if p._sceneId != data._sceneId {
    if p._sceneId < data._sceneId {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p._valueId.CompareTo(data._valueId); !ok || cmp != 0 {
    return cmp, ok
  }
  if p._value != data._value {
    if p._value < data._value {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *AddSceneValueListSelectionStringArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._sceneId
  case 2: return p._valueId
  case 3: return p._value
  }
  return nil
}

func (p *AddSceneValueListSelectionStringArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_sceneId", thrift.BYTE, 1),
    thrift.NewTField("_valueId", thrift.STRUCT, 2),
    thrift.NewTField("_value", thrift.STRING, 3),
    })
}

/**
 * Attributes:
 *  - Success
 */
type AddSceneValueListSelectionStringResult struct {
  thrift.TStruct
  Success bool "success"; // 0
}

func NewAddSceneValueListSelectionStringResult() *AddSceneValueListSelectionStringResult {
  output := &AddSceneValueListSelectionStringResult{
    TStruct:thrift.NewTStruct("AddSceneValueListSelection_String_result", []thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    }),
  }
  {
  }
  return output
}

func (p *AddSceneValueListSelectionStringResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *AddSceneValueListSelectionStringResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1509, err1510 := iprot.ReadBool()
  if err1510 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1510); }
  p.Success = v1509
  return err
}

func (p *AddSceneValueListSelectionStringResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *AddSceneValueListSelectionStringResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("AddSceneValueListSelection_String_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *AddSceneValueListSelectionStringResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BOOL, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *AddSceneValueListSelectionStringResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *AddSceneValueListSelectionStringResult) TStructName() string {
  return "AddSceneValueListSelectionStringResult"
}

func (p *AddSceneValueListSelectionStringResult) ThriftName() string {
  return "AddSceneValueListSelection_String_result"
}

func (p *AddSceneValueListSelectionStringResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AddSceneValueListSelectionStringResult(%+v)", *p)
}

func (p *AddSceneValueListSelectionStringResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*AddSceneValueListSelectionStringResult)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Success, data.Success); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *AddSceneValueListSelectionStringResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *AddSceneValueListSelectionStringResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    })
}

/**
 * Attributes:
 *  - _sceneId
 *  - _valueId
 *  - _value
 */
type AddSceneValueListSelectionInt32Args struct {
  thrift.TStruct
  _sceneId byte "_sceneId"; // 1
  _valueId *RemoteValueID "_valueId"; // 2
  _value int32 "_value"; // 3
}

func NewAddSceneValueListSelectionInt32Args() *AddSceneValueListSelectionInt32Args {
  output := &AddSceneValueListSelectionInt32Args{
    TStruct:thrift.NewTStruct("AddSceneValueListSelection_Int32_args", []thrift.TField{
    thrift.NewTField("_sceneId", thrift.BYTE, 1),
    thrift.NewTField("_valueId", thrift.STRUCT, 2),
    thrift.NewTField("_value", thrift.I32, 3),
    }),
  }
  {
  }
  return output
}

func (p *AddSceneValueListSelectionInt32Args) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_sceneId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_valueId" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "_value" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *AddSceneValueListSelectionInt32Args) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1511, err1512 := iprot.ReadByte()
  if err1512 != nil { return thrift.NewTProtocolExceptionReadField(1, "_sceneId", p.ThriftName(), err1512); }
  p._sceneId = v1511
  return err
}

func (p *AddSceneValueListSelectionInt32Args) ReadField_sceneId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *AddSceneValueListSelectionInt32Args) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p._valueId = NewRemoteValueID()
  err1515 := p._valueId.Read(iprot)
  if err1515 != nil { return thrift.NewTProtocolExceptionReadStruct("p._valueIdRemoteValueID", err1515); }
  return err
}

func (p *AddSceneValueListSelectionInt32Args) ReadField_valueId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *AddSceneValueListSelectionInt32Args) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1516, err1517 := iprot.ReadI32()
  if err1517 != nil { return thrift.NewTProtocolExceptionReadField(3, "_value", p.ThriftName(), err1517); }
  p._value = v1516
  return err
}

func (p *AddSceneValueListSelectionInt32Args) ReadField_value(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *AddSceneValueListSelectionInt32Args) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("AddSceneValueListSelection_Int32_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *AddSceneValueListSelectionInt32Args) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_sceneId", thrift.BYTE, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._sceneId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  return err
}

func (p *AddSceneValueListSelectionInt32Args) WriteField_sceneId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *AddSceneValueListSelectionInt32Args) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._valueId != nil {
    err = oprot.WriteFieldBegin("_valueId", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_valueId", p.ThriftName(), err); }
    err = p._valueId.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RemoteValueID", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_valueId", p.ThriftName(), err); }
  }
  return err
}

func (p *AddSceneValueListSelectionInt32Args) WriteField_valueId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *AddSceneValueListSelectionInt32Args) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_value", thrift.I32, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_value", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._value))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_value", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_value", p.ThriftName(), err); }
  return err
}

func (p *AddSceneValueListSelectionInt32Args) WriteField_value(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *AddSceneValueListSelectionInt32Args) TStructName() string {
  return "AddSceneValueListSelectionInt32Args"
}

func (p *AddSceneValueListSelectionInt32Args) ThriftName() string {
  return "AddSceneValueListSelection_Int32_args"
}

func (p *AddSceneValueListSelectionInt32Args) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AddSceneValueListSelectionInt32Args(%+v)", *p)
}

func (p *AddSceneValueListSelectionInt32Args) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*AddSceneValueListSelectionInt32Args)
  if !ok {
    return 0, false
  }
  if p._sceneId != data._sceneId {
    if p._sceneId < data._sceneId {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p._valueId.CompareTo(data._valueId); !ok || cmp != 0 {
    return cmp, ok
  }
  if p._value != data._value {
    if p._value < data._value {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *AddSceneValueListSelectionInt32Args) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._sceneId
  case 2: return p._valueId
  case 3: return p._value
  }
  return nil
}

func (p *AddSceneValueListSelectionInt32Args) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_sceneId", thrift.BYTE, 1),
    thrift.NewTField("_valueId", thrift.STRUCT, 2),
    thrift.NewTField("_value", thrift.I32, 3),
    })
}

/**
 * Attributes:
 *  - Success
 */
type AddSceneValueListSelectionInt32Result struct {
  thrift.TStruct
  Success bool "success"; // 0
}

func NewAddSceneValueListSelectionInt32Result() *AddSceneValueListSelectionInt32Result {
  output := &AddSceneValueListSelectionInt32Result{
    TStruct:thrift.NewTStruct("AddSceneValueListSelection_Int32_result", []thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    }),
  }
  {
  }
  return output
}

func (p *AddSceneValueListSelectionInt32Result) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *AddSceneValueListSelectionInt32Result) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1518, err1519 := iprot.ReadBool()
  if err1519 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1519); }
  p.Success = v1518
  return err
}

func (p *AddSceneValueListSelectionInt32Result) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *AddSceneValueListSelectionInt32Result) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("AddSceneValueListSelection_Int32_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *AddSceneValueListSelectionInt32Result) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BOOL, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *AddSceneValueListSelectionInt32Result) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *AddSceneValueListSelectionInt32Result) TStructName() string {
  return "AddSceneValueListSelectionInt32Result"
}

func (p *AddSceneValueListSelectionInt32Result) ThriftName() string {
  return "AddSceneValueListSelection_Int32_result"
}

func (p *AddSceneValueListSelectionInt32Result) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AddSceneValueListSelectionInt32Result(%+v)", *p)
}

func (p *AddSceneValueListSelectionInt32Result) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*AddSceneValueListSelectionInt32Result)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Success, data.Success); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *AddSceneValueListSelectionInt32Result) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *AddSceneValueListSelectionInt32Result) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    })
}

/**
 * Attributes:
 *  - _sceneId
 *  - _valueId
 */
type RemoveSceneValueArgs struct {
  thrift.TStruct
  _sceneId byte "_sceneId"; // 1
  _valueId *RemoteValueID "_valueId"; // 2
}

func NewRemoveSceneValueArgs() *RemoveSceneValueArgs {
  output := &RemoveSceneValueArgs{
    TStruct:thrift.NewTStruct("RemoveSceneValue_args", []thrift.TField{
    thrift.NewTField("_sceneId", thrift.BYTE, 1),
    thrift.NewTField("_valueId", thrift.STRUCT, 2),
    }),
  }
  {
  }
  return output
}

func (p *RemoveSceneValueArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_sceneId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_valueId" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *RemoveSceneValueArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1520, err1521 := iprot.ReadByte()
  if err1521 != nil { return thrift.NewTProtocolExceptionReadField(1, "_sceneId", p.ThriftName(), err1521); }
  p._sceneId = v1520
  return err
}

func (p *RemoveSceneValueArgs) ReadField_sceneId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *RemoveSceneValueArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p._valueId = NewRemoteValueID()
  err1524 := p._valueId.Read(iprot)
  if err1524 != nil { return thrift.NewTProtocolExceptionReadStruct("p._valueIdRemoteValueID", err1524); }
  return err
}

func (p *RemoveSceneValueArgs) ReadField_valueId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *RemoveSceneValueArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("RemoveSceneValue_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *RemoveSceneValueArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_sceneId", thrift.BYTE, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._sceneId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  return err
}

func (p *RemoveSceneValueArgs) WriteField_sceneId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *RemoveSceneValueArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._valueId != nil {
    err = oprot.WriteFieldBegin("_valueId", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_valueId", p.ThriftName(), err); }
    err = p._valueId.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RemoteValueID", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_valueId", p.ThriftName(), err); }
  }
  return err
}

func (p *RemoveSceneValueArgs) WriteField_valueId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *RemoveSceneValueArgs) TStructName() string {
  return "RemoveSceneValueArgs"
}

func (p *RemoveSceneValueArgs) ThriftName() string {
  return "RemoveSceneValue_args"
}

func (p *RemoveSceneValueArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RemoveSceneValueArgs(%+v)", *p)
}

func (p *RemoveSceneValueArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*RemoveSceneValueArgs)
  if !ok {
    return 0, false
  }
  if p._sceneId != data._sceneId {
    if p._sceneId < data._sceneId {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p._valueId.CompareTo(data._valueId); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *RemoveSceneValueArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._sceneId
  case 2: return p._valueId
  }
  return nil
}

func (p *RemoveSceneValueArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_sceneId", thrift.BYTE, 1),
    thrift.NewTField("_valueId", thrift.STRUCT, 2),
    })
}

/**
 * Attributes:
 *  - Success
 */
type RemoveSceneValueResult struct {
  thrift.TStruct
  Success bool "success"; // 0
}

func NewRemoveSceneValueResult() *RemoveSceneValueResult {
  output := &RemoveSceneValueResult{
    TStruct:thrift.NewTStruct("RemoveSceneValue_result", []thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    }),
  }
  {
  }
  return output
}

func (p *RemoveSceneValueResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *RemoveSceneValueResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1525, err1526 := iprot.ReadBool()
  if err1526 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1526); }
  p.Success = v1525
  return err
}

func (p *RemoveSceneValueResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *RemoveSceneValueResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("RemoveSceneValue_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *RemoveSceneValueResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BOOL, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *RemoveSceneValueResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *RemoveSceneValueResult) TStructName() string {
  return "RemoveSceneValueResult"
}

func (p *RemoveSceneValueResult) ThriftName() string {
  return "RemoveSceneValue_result"
}

func (p *RemoveSceneValueResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RemoveSceneValueResult(%+v)", *p)
}

func (p *RemoveSceneValueResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*RemoveSceneValueResult)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Success, data.Success); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *RemoveSceneValueResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *RemoveSceneValueResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    })
}

/**
 * Attributes:
 *  - _sceneId
 */
type SceneGetValuesArgs struct {
  thrift.TStruct
  _sceneId byte "_sceneId"; // 1
}

func NewSceneGetValuesArgs() *SceneGetValuesArgs {
  output := &SceneGetValuesArgs{
    TStruct:thrift.NewTStruct("SceneGetValues_args", []thrift.TField{
    thrift.NewTField("_sceneId", thrift.BYTE, 1),
    }),
  }
  {
  }
  return output
}

func (p *SceneGetValuesArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_sceneId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SceneGetValuesArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1527, err1528 := iprot.ReadByte()
  if err1528 != nil { return thrift.NewTProtocolExceptionReadField(1, "_sceneId", p.ThriftName(), err1528); }
  p._sceneId = v1527
  return err
}

func (p *SceneGetValuesArgs) ReadField_sceneId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *SceneGetValuesArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SceneGetValues_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SceneGetValuesArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_sceneId", thrift.BYTE, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._sceneId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  return err
}

func (p *SceneGetValuesArgs) WriteField_sceneId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *SceneGetValuesArgs) TStructName() string {
  return "SceneGetValuesArgs"
}

func (p *SceneGetValuesArgs) ThriftName() string {
  return "SceneGetValues_args"
}

func (p *SceneGetValuesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SceneGetValuesArgs(%+v)", *p)
}

func (p *SceneGetValuesArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SceneGetValuesArgs)
  if !ok {
    return 0, false
  }
  if p._sceneId != data._sceneId {
    if p._sceneId < data._sceneId {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *SceneGetValuesArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._sceneId
  }
  return nil
}

func (p *SceneGetValuesArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_sceneId", thrift.BYTE, 1),
    })
}

/**
 * Attributes:
 *  - Success
 */
type SceneGetValuesResult struct {
  thrift.TStruct
  Success *SceneGetValuesReturnStruct "success"; // 0
}

func NewSceneGetValuesResult() *SceneGetValuesResult {
  output := &SceneGetValuesResult{
    TStruct:thrift.NewTStruct("SceneGetValues_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    }),
  }
  {
  }
  return output
}

func (p *SceneGetValuesResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SceneGetValuesResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Success = NewSceneGetValuesReturnStruct()
  err1531 := p.Success.Read(iprot)
  if err1531 != nil { return thrift.NewTProtocolExceptionReadStruct("p.SuccessSceneGetValuesReturnStruct", err1531); }
  return err
}

func (p *SceneGetValuesResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *SceneGetValuesResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SceneGetValues_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SceneGetValuesResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = p.Success.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("SceneGetValuesReturnStruct", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *SceneGetValuesResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *SceneGetValuesResult) TStructName() string {
  return "SceneGetValuesResult"
}

func (p *SceneGetValuesResult) ThriftName() string {
  return "SceneGetValues_result"
}

func (p *SceneGetValuesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SceneGetValuesResult(%+v)", *p)
}

func (p *SceneGetValuesResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SceneGetValuesResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *SceneGetValuesResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *SceneGetValuesResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    })
}

/**
 * Attributes:
 *  - _sceneId
 *  - _valueId
 */
type SceneGetValueAsBoolArgs struct {
  thrift.TStruct
  _sceneId byte "_sceneId"; // 1
  _valueId *RemoteValueID "_valueId"; // 2
}

func NewSceneGetValueAsBoolArgs() *SceneGetValueAsBoolArgs {
  output := &SceneGetValueAsBoolArgs{
    TStruct:thrift.NewTStruct("SceneGetValueAsBool_args", []thrift.TField{
    thrift.NewTField("_sceneId", thrift.BYTE, 1),
    thrift.NewTField("_valueId", thrift.STRUCT, 2),
    }),
  }
  {
  }
  return output
}

func (p *SceneGetValueAsBoolArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_sceneId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_valueId" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SceneGetValueAsBoolArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1532, err1533 := iprot.ReadByte()
  if err1533 != nil { return thrift.NewTProtocolExceptionReadField(1, "_sceneId", p.ThriftName(), err1533); }
  p._sceneId = v1532
  return err
}

func (p *SceneGetValueAsBoolArgs) ReadField_sceneId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *SceneGetValueAsBoolArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p._valueId = NewRemoteValueID()
  err1536 := p._valueId.Read(iprot)
  if err1536 != nil { return thrift.NewTProtocolExceptionReadStruct("p._valueIdRemoteValueID", err1536); }
  return err
}

func (p *SceneGetValueAsBoolArgs) ReadField_valueId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *SceneGetValueAsBoolArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SceneGetValueAsBool_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SceneGetValueAsBoolArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_sceneId", thrift.BYTE, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._sceneId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  return err
}

func (p *SceneGetValueAsBoolArgs) WriteField_sceneId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *SceneGetValueAsBoolArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._valueId != nil {
    err = oprot.WriteFieldBegin("_valueId", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_valueId", p.ThriftName(), err); }
    err = p._valueId.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RemoteValueID", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_valueId", p.ThriftName(), err); }
  }
  return err
}

func (p *SceneGetValueAsBoolArgs) WriteField_valueId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *SceneGetValueAsBoolArgs) TStructName() string {
  return "SceneGetValueAsBoolArgs"
}

func (p *SceneGetValueAsBoolArgs) ThriftName() string {
  return "SceneGetValueAsBool_args"
}

func (p *SceneGetValueAsBoolArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SceneGetValueAsBoolArgs(%+v)", *p)
}

func (p *SceneGetValueAsBoolArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SceneGetValueAsBoolArgs)
  if !ok {
    return 0, false
  }
  if p._sceneId != data._sceneId {
    if p._sceneId < data._sceneId {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p._valueId.CompareTo(data._valueId); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *SceneGetValueAsBoolArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._sceneId
  case 2: return p._valueId
  }
  return nil
}

func (p *SceneGetValueAsBoolArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_sceneId", thrift.BYTE, 1),
    thrift.NewTField("_valueId", thrift.STRUCT, 2),
    })
}

/**
 * Attributes:
 *  - Success
 */
type SceneGetValueAsBoolResult struct {
  thrift.TStruct
  Success *BoolBool "success"; // 0
}

func NewSceneGetValueAsBoolResult() *SceneGetValueAsBoolResult {
  output := &SceneGetValueAsBoolResult{
    TStruct:thrift.NewTStruct("SceneGetValueAsBool_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    }),
  }
  {
  }
  return output
}

func (p *SceneGetValueAsBoolResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SceneGetValueAsBoolResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Success = NewBoolBool()
  err1539 := p.Success.Read(iprot)
  if err1539 != nil { return thrift.NewTProtocolExceptionReadStruct("p.SuccessBool_Bool", err1539); }
  return err
}

func (p *SceneGetValueAsBoolResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *SceneGetValueAsBoolResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SceneGetValueAsBool_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SceneGetValueAsBoolResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = p.Success.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("Bool_Bool", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *SceneGetValueAsBoolResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *SceneGetValueAsBoolResult) TStructName() string {
  return "SceneGetValueAsBoolResult"
}

func (p *SceneGetValueAsBoolResult) ThriftName() string {
  return "SceneGetValueAsBool_result"
}

func (p *SceneGetValueAsBoolResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SceneGetValueAsBoolResult(%+v)", *p)
}

func (p *SceneGetValueAsBoolResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SceneGetValueAsBoolResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *SceneGetValueAsBoolResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *SceneGetValueAsBoolResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    })
}

/**
 * Attributes:
 *  - _sceneId
 *  - _valueId
 */
type SceneGetValueAsByteArgs struct {
  thrift.TStruct
  _sceneId byte "_sceneId"; // 1
  _valueId *RemoteValueID "_valueId"; // 2
}

func NewSceneGetValueAsByteArgs() *SceneGetValueAsByteArgs {
  output := &SceneGetValueAsByteArgs{
    TStruct:thrift.NewTStruct("SceneGetValueAsByte_args", []thrift.TField{
    thrift.NewTField("_sceneId", thrift.BYTE, 1),
    thrift.NewTField("_valueId", thrift.STRUCT, 2),
    }),
  }
  {
  }
  return output
}

func (p *SceneGetValueAsByteArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_sceneId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_valueId" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SceneGetValueAsByteArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1540, err1541 := iprot.ReadByte()
  if err1541 != nil { return thrift.NewTProtocolExceptionReadField(1, "_sceneId", p.ThriftName(), err1541); }
  p._sceneId = v1540
  return err
}

func (p *SceneGetValueAsByteArgs) ReadField_sceneId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *SceneGetValueAsByteArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p._valueId = NewRemoteValueID()
  err1544 := p._valueId.Read(iprot)
  if err1544 != nil { return thrift.NewTProtocolExceptionReadStruct("p._valueIdRemoteValueID", err1544); }
  return err
}

func (p *SceneGetValueAsByteArgs) ReadField_valueId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *SceneGetValueAsByteArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SceneGetValueAsByte_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SceneGetValueAsByteArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_sceneId", thrift.BYTE, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._sceneId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  return err
}

func (p *SceneGetValueAsByteArgs) WriteField_sceneId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *SceneGetValueAsByteArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._valueId != nil {
    err = oprot.WriteFieldBegin("_valueId", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_valueId", p.ThriftName(), err); }
    err = p._valueId.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RemoteValueID", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_valueId", p.ThriftName(), err); }
  }
  return err
}

func (p *SceneGetValueAsByteArgs) WriteField_valueId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *SceneGetValueAsByteArgs) TStructName() string {
  return "SceneGetValueAsByteArgs"
}

func (p *SceneGetValueAsByteArgs) ThriftName() string {
  return "SceneGetValueAsByte_args"
}

func (p *SceneGetValueAsByteArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SceneGetValueAsByteArgs(%+v)", *p)
}

func (p *SceneGetValueAsByteArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SceneGetValueAsByteArgs)
  if !ok {
    return 0, false
  }
  if p._sceneId != data._sceneId {
    if p._sceneId < data._sceneId {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p._valueId.CompareTo(data._valueId); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *SceneGetValueAsByteArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._sceneId
  case 2: return p._valueId
  }
  return nil
}

func (p *SceneGetValueAsByteArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_sceneId", thrift.BYTE, 1),
    thrift.NewTField("_valueId", thrift.STRUCT, 2),
    })
}

/**
 * Attributes:
 *  - Success
 */
type SceneGetValueAsByteResult struct {
  thrift.TStruct
  Success *BoolUInt8 "success"; // 0
}

func NewSceneGetValueAsByteResult() *SceneGetValueAsByteResult {
  output := &SceneGetValueAsByteResult{
    TStruct:thrift.NewTStruct("SceneGetValueAsByte_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    }),
  }
  {
  }
  return output
}

func (p *SceneGetValueAsByteResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SceneGetValueAsByteResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Success = NewBoolUInt8()
  err1547 := p.Success.Read(iprot)
  if err1547 != nil { return thrift.NewTProtocolExceptionReadStruct("p.SuccessBool_UInt8", err1547); }
  return err
}

func (p *SceneGetValueAsByteResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *SceneGetValueAsByteResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SceneGetValueAsByte_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SceneGetValueAsByteResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = p.Success.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("Bool_UInt8", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *SceneGetValueAsByteResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *SceneGetValueAsByteResult) TStructName() string {
  return "SceneGetValueAsByteResult"
}

func (p *SceneGetValueAsByteResult) ThriftName() string {
  return "SceneGetValueAsByte_result"
}

func (p *SceneGetValueAsByteResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SceneGetValueAsByteResult(%+v)", *p)
}

func (p *SceneGetValueAsByteResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SceneGetValueAsByteResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *SceneGetValueAsByteResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *SceneGetValueAsByteResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    })
}

/**
 * Attributes:
 *  - _sceneId
 *  - _valueId
 */
type SceneGetValueAsFloatArgs struct {
  thrift.TStruct
  _sceneId byte "_sceneId"; // 1
  _valueId *RemoteValueID "_valueId"; // 2
}

func NewSceneGetValueAsFloatArgs() *SceneGetValueAsFloatArgs {
  output := &SceneGetValueAsFloatArgs{
    TStruct:thrift.NewTStruct("SceneGetValueAsFloat_args", []thrift.TField{
    thrift.NewTField("_sceneId", thrift.BYTE, 1),
    thrift.NewTField("_valueId", thrift.STRUCT, 2),
    }),
  }
  {
  }
  return output
}

func (p *SceneGetValueAsFloatArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_sceneId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_valueId" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SceneGetValueAsFloatArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1548, err1549 := iprot.ReadByte()
  if err1549 != nil { return thrift.NewTProtocolExceptionReadField(1, "_sceneId", p.ThriftName(), err1549); }
  p._sceneId = v1548
  return err
}

func (p *SceneGetValueAsFloatArgs) ReadField_sceneId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *SceneGetValueAsFloatArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p._valueId = NewRemoteValueID()
  err1552 := p._valueId.Read(iprot)
  if err1552 != nil { return thrift.NewTProtocolExceptionReadStruct("p._valueIdRemoteValueID", err1552); }
  return err
}

func (p *SceneGetValueAsFloatArgs) ReadField_valueId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *SceneGetValueAsFloatArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SceneGetValueAsFloat_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SceneGetValueAsFloatArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_sceneId", thrift.BYTE, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._sceneId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  return err
}

func (p *SceneGetValueAsFloatArgs) WriteField_sceneId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *SceneGetValueAsFloatArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._valueId != nil {
    err = oprot.WriteFieldBegin("_valueId", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_valueId", p.ThriftName(), err); }
    err = p._valueId.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RemoteValueID", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_valueId", p.ThriftName(), err); }
  }
  return err
}

func (p *SceneGetValueAsFloatArgs) WriteField_valueId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *SceneGetValueAsFloatArgs) TStructName() string {
  return "SceneGetValueAsFloatArgs"
}

func (p *SceneGetValueAsFloatArgs) ThriftName() string {
  return "SceneGetValueAsFloat_args"
}

func (p *SceneGetValueAsFloatArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SceneGetValueAsFloatArgs(%+v)", *p)
}

func (p *SceneGetValueAsFloatArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SceneGetValueAsFloatArgs)
  if !ok {
    return 0, false
  }
  if p._sceneId != data._sceneId {
    if p._sceneId < data._sceneId {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p._valueId.CompareTo(data._valueId); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *SceneGetValueAsFloatArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._sceneId
  case 2: return p._valueId
  }
  return nil
}

func (p *SceneGetValueAsFloatArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_sceneId", thrift.BYTE, 1),
    thrift.NewTField("_valueId", thrift.STRUCT, 2),
    })
}

/**
 * Attributes:
 *  - Success
 */
type SceneGetValueAsFloatResult struct {
  thrift.TStruct
  Success *BoolFloat "success"; // 0
}

func NewSceneGetValueAsFloatResult() *SceneGetValueAsFloatResult {
  output := &SceneGetValueAsFloatResult{
    TStruct:thrift.NewTStruct("SceneGetValueAsFloat_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    }),
  }
  {
  }
  return output
}

func (p *SceneGetValueAsFloatResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SceneGetValueAsFloatResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Success = NewBoolFloat()
  err1555 := p.Success.Read(iprot)
  if err1555 != nil { return thrift.NewTProtocolExceptionReadStruct("p.SuccessBool_Float", err1555); }
  return err
}

func (p *SceneGetValueAsFloatResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *SceneGetValueAsFloatResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SceneGetValueAsFloat_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SceneGetValueAsFloatResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = p.Success.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("Bool_Float", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *SceneGetValueAsFloatResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *SceneGetValueAsFloatResult) TStructName() string {
  return "SceneGetValueAsFloatResult"
}

func (p *SceneGetValueAsFloatResult) ThriftName() string {
  return "SceneGetValueAsFloat_result"
}

func (p *SceneGetValueAsFloatResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SceneGetValueAsFloatResult(%+v)", *p)
}

func (p *SceneGetValueAsFloatResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SceneGetValueAsFloatResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *SceneGetValueAsFloatResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *SceneGetValueAsFloatResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    })
}

/**
 * Attributes:
 *  - _sceneId
 *  - _valueId
 */
type SceneGetValueAsIntArgs struct {
  thrift.TStruct
  _sceneId byte "_sceneId"; // 1
  _valueId *RemoteValueID "_valueId"; // 2
}

func NewSceneGetValueAsIntArgs() *SceneGetValueAsIntArgs {
  output := &SceneGetValueAsIntArgs{
    TStruct:thrift.NewTStruct("SceneGetValueAsInt_args", []thrift.TField{
    thrift.NewTField("_sceneId", thrift.BYTE, 1),
    thrift.NewTField("_valueId", thrift.STRUCT, 2),
    }),
  }
  {
  }
  return output
}

func (p *SceneGetValueAsIntArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_sceneId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_valueId" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SceneGetValueAsIntArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1556, err1557 := iprot.ReadByte()
  if err1557 != nil { return thrift.NewTProtocolExceptionReadField(1, "_sceneId", p.ThriftName(), err1557); }
  p._sceneId = v1556
  return err
}

func (p *SceneGetValueAsIntArgs) ReadField_sceneId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *SceneGetValueAsIntArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p._valueId = NewRemoteValueID()
  err1560 := p._valueId.Read(iprot)
  if err1560 != nil { return thrift.NewTProtocolExceptionReadStruct("p._valueIdRemoteValueID", err1560); }
  return err
}

func (p *SceneGetValueAsIntArgs) ReadField_valueId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *SceneGetValueAsIntArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SceneGetValueAsInt_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SceneGetValueAsIntArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_sceneId", thrift.BYTE, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._sceneId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  return err
}

func (p *SceneGetValueAsIntArgs) WriteField_sceneId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *SceneGetValueAsIntArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._valueId != nil {
    err = oprot.WriteFieldBegin("_valueId", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_valueId", p.ThriftName(), err); }
    err = p._valueId.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RemoteValueID", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_valueId", p.ThriftName(), err); }
  }
  return err
}

func (p *SceneGetValueAsIntArgs) WriteField_valueId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *SceneGetValueAsIntArgs) TStructName() string {
  return "SceneGetValueAsIntArgs"
}

func (p *SceneGetValueAsIntArgs) ThriftName() string {
  return "SceneGetValueAsInt_args"
}

func (p *SceneGetValueAsIntArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SceneGetValueAsIntArgs(%+v)", *p)
}

func (p *SceneGetValueAsIntArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SceneGetValueAsIntArgs)
  if !ok {
    return 0, false
  }
  if p._sceneId != data._sceneId {
    if p._sceneId < data._sceneId {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p._valueId.CompareTo(data._valueId); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *SceneGetValueAsIntArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._sceneId
  case 2: return p._valueId
  }
  return nil
}

func (p *SceneGetValueAsIntArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_sceneId", thrift.BYTE, 1),
    thrift.NewTField("_valueId", thrift.STRUCT, 2),
    })
}

/**
 * Attributes:
 *  - Success
 */
type SceneGetValueAsIntResult struct {
  thrift.TStruct
  Success *BoolInt "success"; // 0
}

func NewSceneGetValueAsIntResult() *SceneGetValueAsIntResult {
  output := &SceneGetValueAsIntResult{
    TStruct:thrift.NewTStruct("SceneGetValueAsInt_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    }),
  }
  {
  }
  return output
}

func (p *SceneGetValueAsIntResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SceneGetValueAsIntResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Success = NewBoolInt()
  err1563 := p.Success.Read(iprot)
  if err1563 != nil { return thrift.NewTProtocolExceptionReadStruct("p.SuccessBool_Int", err1563); }
  return err
}

func (p *SceneGetValueAsIntResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *SceneGetValueAsIntResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SceneGetValueAsInt_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SceneGetValueAsIntResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = p.Success.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("Bool_Int", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *SceneGetValueAsIntResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *SceneGetValueAsIntResult) TStructName() string {
  return "SceneGetValueAsIntResult"
}

func (p *SceneGetValueAsIntResult) ThriftName() string {
  return "SceneGetValueAsInt_result"
}

func (p *SceneGetValueAsIntResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SceneGetValueAsIntResult(%+v)", *p)
}

func (p *SceneGetValueAsIntResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SceneGetValueAsIntResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *SceneGetValueAsIntResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *SceneGetValueAsIntResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    })
}

/**
 * Attributes:
 *  - _sceneId
 *  - _valueId
 */
type SceneGetValueAsShortArgs struct {
  thrift.TStruct
  _sceneId byte "_sceneId"; // 1
  _valueId *RemoteValueID "_valueId"; // 2
}

func NewSceneGetValueAsShortArgs() *SceneGetValueAsShortArgs {
  output := &SceneGetValueAsShortArgs{
    TStruct:thrift.NewTStruct("SceneGetValueAsShort_args", []thrift.TField{
    thrift.NewTField("_sceneId", thrift.BYTE, 1),
    thrift.NewTField("_valueId", thrift.STRUCT, 2),
    }),
  }
  {
  }
  return output
}

func (p *SceneGetValueAsShortArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_sceneId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_valueId" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SceneGetValueAsShortArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1564, err1565 := iprot.ReadByte()
  if err1565 != nil { return thrift.NewTProtocolExceptionReadField(1, "_sceneId", p.ThriftName(), err1565); }
  p._sceneId = v1564
  return err
}

func (p *SceneGetValueAsShortArgs) ReadField_sceneId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *SceneGetValueAsShortArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p._valueId = NewRemoteValueID()
  err1568 := p._valueId.Read(iprot)
  if err1568 != nil { return thrift.NewTProtocolExceptionReadStruct("p._valueIdRemoteValueID", err1568); }
  return err
}

func (p *SceneGetValueAsShortArgs) ReadField_valueId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *SceneGetValueAsShortArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SceneGetValueAsShort_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SceneGetValueAsShortArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_sceneId", thrift.BYTE, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._sceneId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  return err
}

func (p *SceneGetValueAsShortArgs) WriteField_sceneId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *SceneGetValueAsShortArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._valueId != nil {
    err = oprot.WriteFieldBegin("_valueId", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_valueId", p.ThriftName(), err); }
    err = p._valueId.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RemoteValueID", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_valueId", p.ThriftName(), err); }
  }
  return err
}

func (p *SceneGetValueAsShortArgs) WriteField_valueId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *SceneGetValueAsShortArgs) TStructName() string {
  return "SceneGetValueAsShortArgs"
}

func (p *SceneGetValueAsShortArgs) ThriftName() string {
  return "SceneGetValueAsShort_args"
}

func (p *SceneGetValueAsShortArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SceneGetValueAsShortArgs(%+v)", *p)
}

func (p *SceneGetValueAsShortArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SceneGetValueAsShortArgs)
  if !ok {
    return 0, false
  }
  if p._sceneId != data._sceneId {
    if p._sceneId < data._sceneId {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p._valueId.CompareTo(data._valueId); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *SceneGetValueAsShortArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._sceneId
  case 2: return p._valueId
  }
  return nil
}

func (p *SceneGetValueAsShortArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_sceneId", thrift.BYTE, 1),
    thrift.NewTField("_valueId", thrift.STRUCT, 2),
    })
}

/**
 * Attributes:
 *  - Success
 */
type SceneGetValueAsShortResult struct {
  thrift.TStruct
  Success *BoolInt16 "success"; // 0
}

func NewSceneGetValueAsShortResult() *SceneGetValueAsShortResult {
  output := &SceneGetValueAsShortResult{
    TStruct:thrift.NewTStruct("SceneGetValueAsShort_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    }),
  }
  {
  }
  return output
}

func (p *SceneGetValueAsShortResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SceneGetValueAsShortResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Success = NewBoolInt16()
  err1571 := p.Success.Read(iprot)
  if err1571 != nil { return thrift.NewTProtocolExceptionReadStruct("p.SuccessBool_Int16", err1571); }
  return err
}

func (p *SceneGetValueAsShortResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *SceneGetValueAsShortResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SceneGetValueAsShort_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SceneGetValueAsShortResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = p.Success.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("Bool_Int16", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *SceneGetValueAsShortResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *SceneGetValueAsShortResult) TStructName() string {
  return "SceneGetValueAsShortResult"
}

func (p *SceneGetValueAsShortResult) ThriftName() string {
  return "SceneGetValueAsShort_result"
}

func (p *SceneGetValueAsShortResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SceneGetValueAsShortResult(%+v)", *p)
}

func (p *SceneGetValueAsShortResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SceneGetValueAsShortResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *SceneGetValueAsShortResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *SceneGetValueAsShortResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    })
}

/**
 * Attributes:
 *  - _sceneId
 *  - _valueId
 */
type SceneGetValueAsStringArgs struct {
  thrift.TStruct
  _sceneId byte "_sceneId"; // 1
  _valueId *RemoteValueID "_valueId"; // 2
}

func NewSceneGetValueAsStringArgs() *SceneGetValueAsStringArgs {
  output := &SceneGetValueAsStringArgs{
    TStruct:thrift.NewTStruct("SceneGetValueAsString_args", []thrift.TField{
    thrift.NewTField("_sceneId", thrift.BYTE, 1),
    thrift.NewTField("_valueId", thrift.STRUCT, 2),
    }),
  }
  {
  }
  return output
}

func (p *SceneGetValueAsStringArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_sceneId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_valueId" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SceneGetValueAsStringArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1572, err1573 := iprot.ReadByte()
  if err1573 != nil { return thrift.NewTProtocolExceptionReadField(1, "_sceneId", p.ThriftName(), err1573); }
  p._sceneId = v1572
  return err
}

func (p *SceneGetValueAsStringArgs) ReadField_sceneId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *SceneGetValueAsStringArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p._valueId = NewRemoteValueID()
  err1576 := p._valueId.Read(iprot)
  if err1576 != nil { return thrift.NewTProtocolExceptionReadStruct("p._valueIdRemoteValueID", err1576); }
  return err
}

func (p *SceneGetValueAsStringArgs) ReadField_valueId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *SceneGetValueAsStringArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SceneGetValueAsString_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SceneGetValueAsStringArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_sceneId", thrift.BYTE, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._sceneId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  return err
}

func (p *SceneGetValueAsStringArgs) WriteField_sceneId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *SceneGetValueAsStringArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._valueId != nil {
    err = oprot.WriteFieldBegin("_valueId", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_valueId", p.ThriftName(), err); }
    err = p._valueId.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RemoteValueID", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_valueId", p.ThriftName(), err); }
  }
  return err
}

func (p *SceneGetValueAsStringArgs) WriteField_valueId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *SceneGetValueAsStringArgs) TStructName() string {
  return "SceneGetValueAsStringArgs"
}

func (p *SceneGetValueAsStringArgs) ThriftName() string {
  return "SceneGetValueAsString_args"
}

func (p *SceneGetValueAsStringArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SceneGetValueAsStringArgs(%+v)", *p)
}

func (p *SceneGetValueAsStringArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SceneGetValueAsStringArgs)
  if !ok {
    return 0, false
  }
  if p._sceneId != data._sceneId {
    if p._sceneId < data._sceneId {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p._valueId.CompareTo(data._valueId); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *SceneGetValueAsStringArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._sceneId
  case 2: return p._valueId
  }
  return nil
}

func (p *SceneGetValueAsStringArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_sceneId", thrift.BYTE, 1),
    thrift.NewTField("_valueId", thrift.STRUCT, 2),
    })
}

/**
 * Attributes:
 *  - Success
 */
type SceneGetValueAsStringResult struct {
  thrift.TStruct
  Success *BoolString "success"; // 0
}

func NewSceneGetValueAsStringResult() *SceneGetValueAsStringResult {
  output := &SceneGetValueAsStringResult{
    TStruct:thrift.NewTStruct("SceneGetValueAsString_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    }),
  }
  {
  }
  return output
}

func (p *SceneGetValueAsStringResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SceneGetValueAsStringResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Success = NewBoolString()
  err1579 := p.Success.Read(iprot)
  if err1579 != nil { return thrift.NewTProtocolExceptionReadStruct("p.SuccessBool_String", err1579); }
  return err
}

func (p *SceneGetValueAsStringResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *SceneGetValueAsStringResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SceneGetValueAsString_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SceneGetValueAsStringResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = p.Success.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("Bool_String", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *SceneGetValueAsStringResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *SceneGetValueAsStringResult) TStructName() string {
  return "SceneGetValueAsStringResult"
}

func (p *SceneGetValueAsStringResult) ThriftName() string {
  return "SceneGetValueAsString_result"
}

func (p *SceneGetValueAsStringResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SceneGetValueAsStringResult(%+v)", *p)
}

func (p *SceneGetValueAsStringResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SceneGetValueAsStringResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *SceneGetValueAsStringResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *SceneGetValueAsStringResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    })
}

/**
 * Attributes:
 *  - _sceneId
 *  - _valueId
 */
type SceneGetValueListSelectionStringArgs struct {
  thrift.TStruct
  _sceneId byte "_sceneId"; // 1
  _valueId *RemoteValueID "_valueId"; // 2
}

func NewSceneGetValueListSelectionStringArgs() *SceneGetValueListSelectionStringArgs {
  output := &SceneGetValueListSelectionStringArgs{
    TStruct:thrift.NewTStruct("SceneGetValueListSelection_String_args", []thrift.TField{
    thrift.NewTField("_sceneId", thrift.BYTE, 1),
    thrift.NewTField("_valueId", thrift.STRUCT, 2),
    }),
  }
  {
  }
  return output
}

func (p *SceneGetValueListSelectionStringArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_sceneId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_valueId" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SceneGetValueListSelectionStringArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1580, err1581 := iprot.ReadByte()
  if err1581 != nil { return thrift.NewTProtocolExceptionReadField(1, "_sceneId", p.ThriftName(), err1581); }
  p._sceneId = v1580
  return err
}

func (p *SceneGetValueListSelectionStringArgs) ReadField_sceneId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *SceneGetValueListSelectionStringArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p._valueId = NewRemoteValueID()
  err1584 := p._valueId.Read(iprot)
  if err1584 != nil { return thrift.NewTProtocolExceptionReadStruct("p._valueIdRemoteValueID", err1584); }
  return err
}

func (p *SceneGetValueListSelectionStringArgs) ReadField_valueId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *SceneGetValueListSelectionStringArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SceneGetValueListSelection_String_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SceneGetValueListSelectionStringArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_sceneId", thrift.BYTE, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._sceneId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  return err
}

func (p *SceneGetValueListSelectionStringArgs) WriteField_sceneId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *SceneGetValueListSelectionStringArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._valueId != nil {
    err = oprot.WriteFieldBegin("_valueId", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_valueId", p.ThriftName(), err); }
    err = p._valueId.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RemoteValueID", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_valueId", p.ThriftName(), err); }
  }
  return err
}

func (p *SceneGetValueListSelectionStringArgs) WriteField_valueId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *SceneGetValueListSelectionStringArgs) TStructName() string {
  return "SceneGetValueListSelectionStringArgs"
}

func (p *SceneGetValueListSelectionStringArgs) ThriftName() string {
  return "SceneGetValueListSelection_String_args"
}

func (p *SceneGetValueListSelectionStringArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SceneGetValueListSelectionStringArgs(%+v)", *p)
}

func (p *SceneGetValueListSelectionStringArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SceneGetValueListSelectionStringArgs)
  if !ok {
    return 0, false
  }
  if p._sceneId != data._sceneId {
    if p._sceneId < data._sceneId {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p._valueId.CompareTo(data._valueId); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *SceneGetValueListSelectionStringArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._sceneId
  case 2: return p._valueId
  }
  return nil
}

func (p *SceneGetValueListSelectionStringArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_sceneId", thrift.BYTE, 1),
    thrift.NewTField("_valueId", thrift.STRUCT, 2),
    })
}

/**
 * Attributes:
 *  - Success
 */
type SceneGetValueListSelectionStringResult struct {
  thrift.TStruct
  Success *BoolString "success"; // 0
}

func NewSceneGetValueListSelectionStringResult() *SceneGetValueListSelectionStringResult {
  output := &SceneGetValueListSelectionStringResult{
    TStruct:thrift.NewTStruct("SceneGetValueListSelection_String_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    }),
  }
  {
  }
  return output
}

func (p *SceneGetValueListSelectionStringResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SceneGetValueListSelectionStringResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Success = NewBoolString()
  err1587 := p.Success.Read(iprot)
  if err1587 != nil { return thrift.NewTProtocolExceptionReadStruct("p.SuccessBool_String", err1587); }
  return err
}

func (p *SceneGetValueListSelectionStringResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *SceneGetValueListSelectionStringResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SceneGetValueListSelection_String_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SceneGetValueListSelectionStringResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = p.Success.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("Bool_String", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *SceneGetValueListSelectionStringResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *SceneGetValueListSelectionStringResult) TStructName() string {
  return "SceneGetValueListSelectionStringResult"
}

func (p *SceneGetValueListSelectionStringResult) ThriftName() string {
  return "SceneGetValueListSelection_String_result"
}

func (p *SceneGetValueListSelectionStringResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SceneGetValueListSelectionStringResult(%+v)", *p)
}

func (p *SceneGetValueListSelectionStringResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SceneGetValueListSelectionStringResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *SceneGetValueListSelectionStringResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *SceneGetValueListSelectionStringResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    })
}

/**
 * Attributes:
 *  - _sceneId
 *  - _valueId
 */
type SceneGetValueListSelectionInt32Args struct {
  thrift.TStruct
  _sceneId byte "_sceneId"; // 1
  _valueId *RemoteValueID "_valueId"; // 2
}

func NewSceneGetValueListSelectionInt32Args() *SceneGetValueListSelectionInt32Args {
  output := &SceneGetValueListSelectionInt32Args{
    TStruct:thrift.NewTStruct("SceneGetValueListSelection_Int32_args", []thrift.TField{
    thrift.NewTField("_sceneId", thrift.BYTE, 1),
    thrift.NewTField("_valueId", thrift.STRUCT, 2),
    }),
  }
  {
  }
  return output
}

func (p *SceneGetValueListSelectionInt32Args) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_sceneId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_valueId" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SceneGetValueListSelectionInt32Args) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1588, err1589 := iprot.ReadByte()
  if err1589 != nil { return thrift.NewTProtocolExceptionReadField(1, "_sceneId", p.ThriftName(), err1589); }
  p._sceneId = v1588
  return err
}

func (p *SceneGetValueListSelectionInt32Args) ReadField_sceneId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *SceneGetValueListSelectionInt32Args) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p._valueId = NewRemoteValueID()
  err1592 := p._valueId.Read(iprot)
  if err1592 != nil { return thrift.NewTProtocolExceptionReadStruct("p._valueIdRemoteValueID", err1592); }
  return err
}

func (p *SceneGetValueListSelectionInt32Args) ReadField_valueId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *SceneGetValueListSelectionInt32Args) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SceneGetValueListSelection_Int32_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SceneGetValueListSelectionInt32Args) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_sceneId", thrift.BYTE, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._sceneId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  return err
}

func (p *SceneGetValueListSelectionInt32Args) WriteField_sceneId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *SceneGetValueListSelectionInt32Args) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._valueId != nil {
    err = oprot.WriteFieldBegin("_valueId", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_valueId", p.ThriftName(), err); }
    err = p._valueId.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RemoteValueID", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_valueId", p.ThriftName(), err); }
  }
  return err
}

func (p *SceneGetValueListSelectionInt32Args) WriteField_valueId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *SceneGetValueListSelectionInt32Args) TStructName() string {
  return "SceneGetValueListSelectionInt32Args"
}

func (p *SceneGetValueListSelectionInt32Args) ThriftName() string {
  return "SceneGetValueListSelection_Int32_args"
}

func (p *SceneGetValueListSelectionInt32Args) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SceneGetValueListSelectionInt32Args(%+v)", *p)
}

func (p *SceneGetValueListSelectionInt32Args) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SceneGetValueListSelectionInt32Args)
  if !ok {
    return 0, false
  }
  if p._sceneId != data._sceneId {
    if p._sceneId < data._sceneId {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p._valueId.CompareTo(data._valueId); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *SceneGetValueListSelectionInt32Args) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._sceneId
  case 2: return p._valueId
  }
  return nil
}

func (p *SceneGetValueListSelectionInt32Args) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_sceneId", thrift.BYTE, 1),
    thrift.NewTField("_valueId", thrift.STRUCT, 2),
    })
}

/**
 * Attributes:
 *  - Success
 */
type SceneGetValueListSelectionInt32Result struct {
  thrift.TStruct
  Success *BoolInt "success"; // 0
}

func NewSceneGetValueListSelectionInt32Result() *SceneGetValueListSelectionInt32Result {
  output := &SceneGetValueListSelectionInt32Result{
    TStruct:thrift.NewTStruct("SceneGetValueListSelection_Int32_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    }),
  }
  {
  }
  return output
}

func (p *SceneGetValueListSelectionInt32Result) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SceneGetValueListSelectionInt32Result) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Success = NewBoolInt()
  err1595 := p.Success.Read(iprot)
  if err1595 != nil { return thrift.NewTProtocolExceptionReadStruct("p.SuccessBool_Int", err1595); }
  return err
}

func (p *SceneGetValueListSelectionInt32Result) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *SceneGetValueListSelectionInt32Result) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SceneGetValueListSelection_Int32_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SceneGetValueListSelectionInt32Result) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = p.Success.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("Bool_Int", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *SceneGetValueListSelectionInt32Result) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *SceneGetValueListSelectionInt32Result) TStructName() string {
  return "SceneGetValueListSelectionInt32Result"
}

func (p *SceneGetValueListSelectionInt32Result) ThriftName() string {
  return "SceneGetValueListSelection_Int32_result"
}

func (p *SceneGetValueListSelectionInt32Result) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SceneGetValueListSelectionInt32Result(%+v)", *p)
}

func (p *SceneGetValueListSelectionInt32Result) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SceneGetValueListSelectionInt32Result)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *SceneGetValueListSelectionInt32Result) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *SceneGetValueListSelectionInt32Result) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    })
}

/**
 * Attributes:
 *  - _sceneId
 *  - _valueId
 *  - _value
 */
type SetSceneValueBoolArgs struct {
  thrift.TStruct
  _sceneId byte "_sceneId"; // 1
  _valueId *RemoteValueID "_valueId"; // 2
  _value bool "_value"; // 3
}

func NewSetSceneValueBoolArgs() *SetSceneValueBoolArgs {
  output := &SetSceneValueBoolArgs{
    TStruct:thrift.NewTStruct("SetSceneValue_Bool_args", []thrift.TField{
    thrift.NewTField("_sceneId", thrift.BYTE, 1),
    thrift.NewTField("_valueId", thrift.STRUCT, 2),
    thrift.NewTField("_value", thrift.BOOL, 3),
    }),
  }
  {
  }
  return output
}

func (p *SetSceneValueBoolArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_sceneId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_valueId" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "_value" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SetSceneValueBoolArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1596, err1597 := iprot.ReadByte()
  if err1597 != nil { return thrift.NewTProtocolExceptionReadField(1, "_sceneId", p.ThriftName(), err1597); }
  p._sceneId = v1596
  return err
}

func (p *SetSceneValueBoolArgs) ReadField_sceneId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *SetSceneValueBoolArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p._valueId = NewRemoteValueID()
  err1600 := p._valueId.Read(iprot)
  if err1600 != nil { return thrift.NewTProtocolExceptionReadStruct("p._valueIdRemoteValueID", err1600); }
  return err
}

func (p *SetSceneValueBoolArgs) ReadField_valueId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *SetSceneValueBoolArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1601, err1602 := iprot.ReadBool()
  if err1602 != nil { return thrift.NewTProtocolExceptionReadField(3, "_value", p.ThriftName(), err1602); }
  p._value = v1601
  return err
}

func (p *SetSceneValueBoolArgs) ReadField_value(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *SetSceneValueBoolArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SetSceneValue_Bool_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SetSceneValueBoolArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_sceneId", thrift.BYTE, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._sceneId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  return err
}

func (p *SetSceneValueBoolArgs) WriteField_sceneId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *SetSceneValueBoolArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._valueId != nil {
    err = oprot.WriteFieldBegin("_valueId", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_valueId", p.ThriftName(), err); }
    err = p._valueId.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RemoteValueID", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_valueId", p.ThriftName(), err); }
  }
  return err
}

func (p *SetSceneValueBoolArgs) WriteField_valueId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *SetSceneValueBoolArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_value", thrift.BOOL, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_value", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p._value))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_value", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_value", p.ThriftName(), err); }
  return err
}

func (p *SetSceneValueBoolArgs) WriteField_value(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *SetSceneValueBoolArgs) TStructName() string {
  return "SetSceneValueBoolArgs"
}

func (p *SetSceneValueBoolArgs) ThriftName() string {
  return "SetSceneValue_Bool_args"
}

func (p *SetSceneValueBoolArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetSceneValueBoolArgs(%+v)", *p)
}

func (p *SetSceneValueBoolArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SetSceneValueBoolArgs)
  if !ok {
    return 0, false
  }
  if p._sceneId != data._sceneId {
    if p._sceneId < data._sceneId {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p._valueId.CompareTo(data._valueId); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp := thrift.CompareBool(p._value, data._value); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *SetSceneValueBoolArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._sceneId
  case 2: return p._valueId
  case 3: return p._value
  }
  return nil
}

func (p *SetSceneValueBoolArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_sceneId", thrift.BYTE, 1),
    thrift.NewTField("_valueId", thrift.STRUCT, 2),
    thrift.NewTField("_value", thrift.BOOL, 3),
    })
}

/**
 * Attributes:
 *  - Success
 */
type SetSceneValueBoolResult struct {
  thrift.TStruct
  Success bool "success"; // 0
}

func NewSetSceneValueBoolResult() *SetSceneValueBoolResult {
  output := &SetSceneValueBoolResult{
    TStruct:thrift.NewTStruct("SetSceneValue_Bool_result", []thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    }),
  }
  {
  }
  return output
}

func (p *SetSceneValueBoolResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SetSceneValueBoolResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1603, err1604 := iprot.ReadBool()
  if err1604 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1604); }
  p.Success = v1603
  return err
}

func (p *SetSceneValueBoolResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *SetSceneValueBoolResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SetSceneValue_Bool_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SetSceneValueBoolResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BOOL, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *SetSceneValueBoolResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *SetSceneValueBoolResult) TStructName() string {
  return "SetSceneValueBoolResult"
}

func (p *SetSceneValueBoolResult) ThriftName() string {
  return "SetSceneValue_Bool_result"
}

func (p *SetSceneValueBoolResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetSceneValueBoolResult(%+v)", *p)
}

func (p *SetSceneValueBoolResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SetSceneValueBoolResult)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Success, data.Success); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *SetSceneValueBoolResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *SetSceneValueBoolResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    })
}

/**
 * Attributes:
 *  - _sceneId
 *  - _valueId
 *  - _value
 */
type SetSceneValueUint8Args struct {
  thrift.TStruct
  _sceneId byte "_sceneId"; // 1
  _valueId *RemoteValueID "_valueId"; // 2
  _value byte "_value"; // 3
}

func NewSetSceneValueUint8Args() *SetSceneValueUint8Args {
  output := &SetSceneValueUint8Args{
    TStruct:thrift.NewTStruct("SetSceneValue_Uint8_args", []thrift.TField{
    thrift.NewTField("_sceneId", thrift.BYTE, 1),
    thrift.NewTField("_valueId", thrift.STRUCT, 2),
    thrift.NewTField("_value", thrift.BYTE, 3),
    }),
  }
  {
  }
  return output
}

func (p *SetSceneValueUint8Args) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_sceneId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_valueId" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "_value" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SetSceneValueUint8Args) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1605, err1606 := iprot.ReadByte()
  if err1606 != nil { return thrift.NewTProtocolExceptionReadField(1, "_sceneId", p.ThriftName(), err1606); }
  p._sceneId = v1605
  return err
}

func (p *SetSceneValueUint8Args) ReadField_sceneId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *SetSceneValueUint8Args) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p._valueId = NewRemoteValueID()
  err1609 := p._valueId.Read(iprot)
  if err1609 != nil { return thrift.NewTProtocolExceptionReadStruct("p._valueIdRemoteValueID", err1609); }
  return err
}

func (p *SetSceneValueUint8Args) ReadField_valueId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *SetSceneValueUint8Args) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1610, err1611 := iprot.ReadByte()
  if err1611 != nil { return thrift.NewTProtocolExceptionReadField(3, "_value", p.ThriftName(), err1611); }
  p._value = v1610
  return err
}

func (p *SetSceneValueUint8Args) ReadField_value(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *SetSceneValueUint8Args) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SetSceneValue_Uint8_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SetSceneValueUint8Args) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_sceneId", thrift.BYTE, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._sceneId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  return err
}

func (p *SetSceneValueUint8Args) WriteField_sceneId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *SetSceneValueUint8Args) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._valueId != nil {
    err = oprot.WriteFieldBegin("_valueId", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_valueId", p.ThriftName(), err); }
    err = p._valueId.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RemoteValueID", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_valueId", p.ThriftName(), err); }
  }
  return err
}

func (p *SetSceneValueUint8Args) WriteField_valueId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *SetSceneValueUint8Args) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_value", thrift.BYTE, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_value", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._value))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_value", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_value", p.ThriftName(), err); }
  return err
}

func (p *SetSceneValueUint8Args) WriteField_value(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *SetSceneValueUint8Args) TStructName() string {
  return "SetSceneValueUint8Args"
}

func (p *SetSceneValueUint8Args) ThriftName() string {
  return "SetSceneValue_Uint8_args"
}

func (p *SetSceneValueUint8Args) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetSceneValueUint8Args(%+v)", *p)
}

func (p *SetSceneValueUint8Args) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SetSceneValueUint8Args)
  if !ok {
    return 0, false
  }
  if p._sceneId != data._sceneId {
    if p._sceneId < data._sceneId {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p._valueId.CompareTo(data._valueId); !ok || cmp != 0 {
    return cmp, ok
  }
  if p._value != data._value {
    if p._value < data._value {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *SetSceneValueUint8Args) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._sceneId
  case 2: return p._valueId
  case 3: return p._value
  }
  return nil
}

func (p *SetSceneValueUint8Args) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_sceneId", thrift.BYTE, 1),
    thrift.NewTField("_valueId", thrift.STRUCT, 2),
    thrift.NewTField("_value", thrift.BYTE, 3),
    })
}

/**
 * Attributes:
 *  - Success
 */
type SetSceneValueUint8Result struct {
  thrift.TStruct
  Success bool "success"; // 0
}

func NewSetSceneValueUint8Result() *SetSceneValueUint8Result {
  output := &SetSceneValueUint8Result{
    TStruct:thrift.NewTStruct("SetSceneValue_Uint8_result", []thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    }),
  }
  {
  }
  return output
}

func (p *SetSceneValueUint8Result) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SetSceneValueUint8Result) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1612, err1613 := iprot.ReadBool()
  if err1613 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1613); }
  p.Success = v1612
  return err
}

func (p *SetSceneValueUint8Result) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *SetSceneValueUint8Result) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SetSceneValue_Uint8_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SetSceneValueUint8Result) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BOOL, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *SetSceneValueUint8Result) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *SetSceneValueUint8Result) TStructName() string {
  return "SetSceneValueUint8Result"
}

func (p *SetSceneValueUint8Result) ThriftName() string {
  return "SetSceneValue_Uint8_result"
}

func (p *SetSceneValueUint8Result) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetSceneValueUint8Result(%+v)", *p)
}

func (p *SetSceneValueUint8Result) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SetSceneValueUint8Result)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Success, data.Success); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *SetSceneValueUint8Result) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *SetSceneValueUint8Result) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    })
}

/**
 * Attributes:
 *  - _sceneId
 *  - _valueId
 *  - _value
 */
type SetSceneValueFloatArgs struct {
  thrift.TStruct
  _sceneId byte "_sceneId"; // 1
  _valueId *RemoteValueID "_valueId"; // 2
  _value float64 "_value"; // 3
}

func NewSetSceneValueFloatArgs() *SetSceneValueFloatArgs {
  output := &SetSceneValueFloatArgs{
    TStruct:thrift.NewTStruct("SetSceneValue_Float_args", []thrift.TField{
    thrift.NewTField("_sceneId", thrift.BYTE, 1),
    thrift.NewTField("_valueId", thrift.STRUCT, 2),
    thrift.NewTField("_value", thrift.DOUBLE, 3),
    }),
  }
  {
  }
  return output
}

func (p *SetSceneValueFloatArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_sceneId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_valueId" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "_value" {
      if fieldTypeId == thrift.DOUBLE {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SetSceneValueFloatArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1614, err1615 := iprot.ReadByte()
  if err1615 != nil { return thrift.NewTProtocolExceptionReadField(1, "_sceneId", p.ThriftName(), err1615); }
  p._sceneId = v1614
  return err
}

func (p *SetSceneValueFloatArgs) ReadField_sceneId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *SetSceneValueFloatArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p._valueId = NewRemoteValueID()
  err1618 := p._valueId.Read(iprot)
  if err1618 != nil { return thrift.NewTProtocolExceptionReadStruct("p._valueIdRemoteValueID", err1618); }
  return err
}

func (p *SetSceneValueFloatArgs) ReadField_valueId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *SetSceneValueFloatArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1619, err1620 := iprot.ReadDouble()
  if err1620 != nil { return thrift.NewTProtocolExceptionReadField(3, "_value", p.ThriftName(), err1620); }
  p._value = v1619
  return err
}

func (p *SetSceneValueFloatArgs) ReadField_value(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *SetSceneValueFloatArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SetSceneValue_Float_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SetSceneValueFloatArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_sceneId", thrift.BYTE, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._sceneId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  return err
}

func (p *SetSceneValueFloatArgs) WriteField_sceneId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *SetSceneValueFloatArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._valueId != nil {
    err = oprot.WriteFieldBegin("_valueId", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_valueId", p.ThriftName(), err); }
    err = p._valueId.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RemoteValueID", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_valueId", p.ThriftName(), err); }
  }
  return err
}

func (p *SetSceneValueFloatArgs) WriteField_valueId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *SetSceneValueFloatArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_value", thrift.DOUBLE, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_value", p.ThriftName(), err); }
  err = oprot.WriteDouble(float64(p._value))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_value", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_value", p.ThriftName(), err); }
  return err
}

func (p *SetSceneValueFloatArgs) WriteField_value(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *SetSceneValueFloatArgs) TStructName() string {
  return "SetSceneValueFloatArgs"
}

func (p *SetSceneValueFloatArgs) ThriftName() string {
  return "SetSceneValue_Float_args"
}

func (p *SetSceneValueFloatArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetSceneValueFloatArgs(%+v)", *p)
}

func (p *SetSceneValueFloatArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SetSceneValueFloatArgs)
  if !ok {
    return 0, false
  }
  if p._sceneId != data._sceneId {
    if p._sceneId < data._sceneId {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p._valueId.CompareTo(data._valueId); !ok || cmp != 0 {
    return cmp, ok
  }
  if p._value != data._value {
    if p._value < data._value {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *SetSceneValueFloatArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._sceneId
  case 2: return p._valueId
  case 3: return p._value
  }
  return nil
}

func (p *SetSceneValueFloatArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_sceneId", thrift.BYTE, 1),
    thrift.NewTField("_valueId", thrift.STRUCT, 2),
    thrift.NewTField("_value", thrift.DOUBLE, 3),
    })
}

/**
 * Attributes:
 *  - Success
 */
type SetSceneValueFloatResult struct {
  thrift.TStruct
  Success bool "success"; // 0
}

func NewSetSceneValueFloatResult() *SetSceneValueFloatResult {
  output := &SetSceneValueFloatResult{
    TStruct:thrift.NewTStruct("SetSceneValue_Float_result", []thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    }),
  }
  {
  }
  return output
}

func (p *SetSceneValueFloatResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SetSceneValueFloatResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1621, err1622 := iprot.ReadBool()
  if err1622 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1622); }
  p.Success = v1621
  return err
}

func (p *SetSceneValueFloatResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *SetSceneValueFloatResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SetSceneValue_Float_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SetSceneValueFloatResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BOOL, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *SetSceneValueFloatResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *SetSceneValueFloatResult) TStructName() string {
  return "SetSceneValueFloatResult"
}

func (p *SetSceneValueFloatResult) ThriftName() string {
  return "SetSceneValue_Float_result"
}

func (p *SetSceneValueFloatResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetSceneValueFloatResult(%+v)", *p)
}

func (p *SetSceneValueFloatResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SetSceneValueFloatResult)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Success, data.Success); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *SetSceneValueFloatResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *SetSceneValueFloatResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    })
}

/**
 * Attributes:
 *  - _sceneId
 *  - _valueId
 *  - _value
 */
type SetSceneValueInt32Args struct {
  thrift.TStruct
  _sceneId byte "_sceneId"; // 1
  _valueId *RemoteValueID "_valueId"; // 2
  _value int32 "_value"; // 3
}

func NewSetSceneValueInt32Args() *SetSceneValueInt32Args {
  output := &SetSceneValueInt32Args{
    TStruct:thrift.NewTStruct("SetSceneValue_Int32_args", []thrift.TField{
    thrift.NewTField("_sceneId", thrift.BYTE, 1),
    thrift.NewTField("_valueId", thrift.STRUCT, 2),
    thrift.NewTField("_value", thrift.I32, 3),
    }),
  }
  {
  }
  return output
}

func (p *SetSceneValueInt32Args) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_sceneId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_valueId" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "_value" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SetSceneValueInt32Args) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1623, err1624 := iprot.ReadByte()
  if err1624 != nil { return thrift.NewTProtocolExceptionReadField(1, "_sceneId", p.ThriftName(), err1624); }
  p._sceneId = v1623
  return err
}

func (p *SetSceneValueInt32Args) ReadField_sceneId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *SetSceneValueInt32Args) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p._valueId = NewRemoteValueID()
  err1627 := p._valueId.Read(iprot)
  if err1627 != nil { return thrift.NewTProtocolExceptionReadStruct("p._valueIdRemoteValueID", err1627); }
  return err
}

func (p *SetSceneValueInt32Args) ReadField_valueId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *SetSceneValueInt32Args) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1628, err1629 := iprot.ReadI32()
  if err1629 != nil { return thrift.NewTProtocolExceptionReadField(3, "_value", p.ThriftName(), err1629); }
  p._value = v1628
  return err
}

func (p *SetSceneValueInt32Args) ReadField_value(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *SetSceneValueInt32Args) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SetSceneValue_Int32_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SetSceneValueInt32Args) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_sceneId", thrift.BYTE, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._sceneId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  return err
}

func (p *SetSceneValueInt32Args) WriteField_sceneId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *SetSceneValueInt32Args) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._valueId != nil {
    err = oprot.WriteFieldBegin("_valueId", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_valueId", p.ThriftName(), err); }
    err = p._valueId.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RemoteValueID", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_valueId", p.ThriftName(), err); }
  }
  return err
}

func (p *SetSceneValueInt32Args) WriteField_valueId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *SetSceneValueInt32Args) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_value", thrift.I32, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_value", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._value))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_value", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_value", p.ThriftName(), err); }
  return err
}

func (p *SetSceneValueInt32Args) WriteField_value(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *SetSceneValueInt32Args) TStructName() string {
  return "SetSceneValueInt32Args"
}

func (p *SetSceneValueInt32Args) ThriftName() string {
  return "SetSceneValue_Int32_args"
}

func (p *SetSceneValueInt32Args) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetSceneValueInt32Args(%+v)", *p)
}

func (p *SetSceneValueInt32Args) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SetSceneValueInt32Args)
  if !ok {
    return 0, false
  }
  if p._sceneId != data._sceneId {
    if p._sceneId < data._sceneId {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p._valueId.CompareTo(data._valueId); !ok || cmp != 0 {
    return cmp, ok
  }
  if p._value != data._value {
    if p._value < data._value {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *SetSceneValueInt32Args) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._sceneId
  case 2: return p._valueId
  case 3: return p._value
  }
  return nil
}

func (p *SetSceneValueInt32Args) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_sceneId", thrift.BYTE, 1),
    thrift.NewTField("_valueId", thrift.STRUCT, 2),
    thrift.NewTField("_value", thrift.I32, 3),
    })
}

/**
 * Attributes:
 *  - Success
 */
type SetSceneValueInt32Result struct {
  thrift.TStruct
  Success bool "success"; // 0
}

func NewSetSceneValueInt32Result() *SetSceneValueInt32Result {
  output := &SetSceneValueInt32Result{
    TStruct:thrift.NewTStruct("SetSceneValue_Int32_result", []thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    }),
  }
  {
  }
  return output
}

func (p *SetSceneValueInt32Result) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SetSceneValueInt32Result) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1630, err1631 := iprot.ReadBool()
  if err1631 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1631); }
  p.Success = v1630
  return err
}

func (p *SetSceneValueInt32Result) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *SetSceneValueInt32Result) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SetSceneValue_Int32_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SetSceneValueInt32Result) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BOOL, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *SetSceneValueInt32Result) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *SetSceneValueInt32Result) TStructName() string {
  return "SetSceneValueInt32Result"
}

func (p *SetSceneValueInt32Result) ThriftName() string {
  return "SetSceneValue_Int32_result"
}

func (p *SetSceneValueInt32Result) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetSceneValueInt32Result(%+v)", *p)
}

func (p *SetSceneValueInt32Result) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SetSceneValueInt32Result)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Success, data.Success); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *SetSceneValueInt32Result) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *SetSceneValueInt32Result) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    })
}

/**
 * Attributes:
 *  - _sceneId
 *  - _valueId
 *  - _value
 */
type SetSceneValueInt16Args struct {
  thrift.TStruct
  _sceneId byte "_sceneId"; // 1
  _valueId *RemoteValueID "_valueId"; // 2
  _value int16 "_value"; // 3
}

func NewSetSceneValueInt16Args() *SetSceneValueInt16Args {
  output := &SetSceneValueInt16Args{
    TStruct:thrift.NewTStruct("SetSceneValue_Int16_args", []thrift.TField{
    thrift.NewTField("_sceneId", thrift.BYTE, 1),
    thrift.NewTField("_valueId", thrift.STRUCT, 2),
    thrift.NewTField("_value", thrift.I16, 3),
    }),
  }
  {
  }
  return output
}

func (p *SetSceneValueInt16Args) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_sceneId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_valueId" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "_value" {
      if fieldTypeId == thrift.I16 {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SetSceneValueInt16Args) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1632, err1633 := iprot.ReadByte()
  if err1633 != nil { return thrift.NewTProtocolExceptionReadField(1, "_sceneId", p.ThriftName(), err1633); }
  p._sceneId = v1632
  return err
}

func (p *SetSceneValueInt16Args) ReadField_sceneId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *SetSceneValueInt16Args) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p._valueId = NewRemoteValueID()
  err1636 := p._valueId.Read(iprot)
  if err1636 != nil { return thrift.NewTProtocolExceptionReadStruct("p._valueIdRemoteValueID", err1636); }
  return err
}

func (p *SetSceneValueInt16Args) ReadField_valueId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *SetSceneValueInt16Args) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1637, err1638 := iprot.ReadI16()
  if err1638 != nil { return thrift.NewTProtocolExceptionReadField(3, "_value", p.ThriftName(), err1638); }
  p._value = v1637
  return err
}

func (p *SetSceneValueInt16Args) ReadField_value(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *SetSceneValueInt16Args) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SetSceneValue_Int16_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SetSceneValueInt16Args) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_sceneId", thrift.BYTE, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._sceneId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  return err
}

func (p *SetSceneValueInt16Args) WriteField_sceneId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *SetSceneValueInt16Args) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._valueId != nil {
    err = oprot.WriteFieldBegin("_valueId", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_valueId", p.ThriftName(), err); }
    err = p._valueId.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RemoteValueID", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_valueId", p.ThriftName(), err); }
  }
  return err
}

func (p *SetSceneValueInt16Args) WriteField_valueId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *SetSceneValueInt16Args) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_value", thrift.I16, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_value", p.ThriftName(), err); }
  err = oprot.WriteI16(int16(p._value))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_value", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_value", p.ThriftName(), err); }
  return err
}

func (p *SetSceneValueInt16Args) WriteField_value(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *SetSceneValueInt16Args) TStructName() string {
  return "SetSceneValueInt16Args"
}

func (p *SetSceneValueInt16Args) ThriftName() string {
  return "SetSceneValue_Int16_args"
}

func (p *SetSceneValueInt16Args) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetSceneValueInt16Args(%+v)", *p)
}

func (p *SetSceneValueInt16Args) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SetSceneValueInt16Args)
  if !ok {
    return 0, false
  }
  if p._sceneId != data._sceneId {
    if p._sceneId < data._sceneId {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p._valueId.CompareTo(data._valueId); !ok || cmp != 0 {
    return cmp, ok
  }
  if p._value != data._value {
    if p._value < data._value {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *SetSceneValueInt16Args) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._sceneId
  case 2: return p._valueId
  case 3: return p._value
  }
  return nil
}

func (p *SetSceneValueInt16Args) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_sceneId", thrift.BYTE, 1),
    thrift.NewTField("_valueId", thrift.STRUCT, 2),
    thrift.NewTField("_value", thrift.I16, 3),
    })
}

/**
 * Attributes:
 *  - Success
 */
type SetSceneValueInt16Result struct {
  thrift.TStruct
  Success bool "success"; // 0
}

func NewSetSceneValueInt16Result() *SetSceneValueInt16Result {
  output := &SetSceneValueInt16Result{
    TStruct:thrift.NewTStruct("SetSceneValue_Int16_result", []thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    }),
  }
  {
  }
  return output
}

func (p *SetSceneValueInt16Result) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SetSceneValueInt16Result) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1639, err1640 := iprot.ReadBool()
  if err1640 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1640); }
  p.Success = v1639
  return err
}

func (p *SetSceneValueInt16Result) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *SetSceneValueInt16Result) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SetSceneValue_Int16_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SetSceneValueInt16Result) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BOOL, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *SetSceneValueInt16Result) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *SetSceneValueInt16Result) TStructName() string {
  return "SetSceneValueInt16Result"
}

func (p *SetSceneValueInt16Result) ThriftName() string {
  return "SetSceneValue_Int16_result"
}

func (p *SetSceneValueInt16Result) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetSceneValueInt16Result(%+v)", *p)
}

func (p *SetSceneValueInt16Result) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SetSceneValueInt16Result)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Success, data.Success); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *SetSceneValueInt16Result) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *SetSceneValueInt16Result) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    })
}

/**
 * Attributes:
 *  - _sceneId
 *  - _valueId
 *  - _value
 */
type SetSceneValueStringArgs struct {
  thrift.TStruct
  _sceneId byte "_sceneId"; // 1
  _valueId *RemoteValueID "_valueId"; // 2
  _value string "_value"; // 3
}

func NewSetSceneValueStringArgs() *SetSceneValueStringArgs {
  output := &SetSceneValueStringArgs{
    TStruct:thrift.NewTStruct("SetSceneValue_String_args", []thrift.TField{
    thrift.NewTField("_sceneId", thrift.BYTE, 1),
    thrift.NewTField("_valueId", thrift.STRUCT, 2),
    thrift.NewTField("_value", thrift.STRING, 3),
    }),
  }
  {
  }
  return output
}

func (p *SetSceneValueStringArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_sceneId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_valueId" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "_value" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SetSceneValueStringArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1641, err1642 := iprot.ReadByte()
  if err1642 != nil { return thrift.NewTProtocolExceptionReadField(1, "_sceneId", p.ThriftName(), err1642); }
  p._sceneId = v1641
  return err
}

func (p *SetSceneValueStringArgs) ReadField_sceneId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *SetSceneValueStringArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p._valueId = NewRemoteValueID()
  err1645 := p._valueId.Read(iprot)
  if err1645 != nil { return thrift.NewTProtocolExceptionReadStruct("p._valueIdRemoteValueID", err1645); }
  return err
}

func (p *SetSceneValueStringArgs) ReadField_valueId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *SetSceneValueStringArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1646, err1647 := iprot.ReadString()
  if err1647 != nil { return thrift.NewTProtocolExceptionReadField(3, "_value", p.ThriftName(), err1647); }
  p._value = v1646
  return err
}

func (p *SetSceneValueStringArgs) ReadField_value(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *SetSceneValueStringArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SetSceneValue_String_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SetSceneValueStringArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_sceneId", thrift.BYTE, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._sceneId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  return err
}

func (p *SetSceneValueStringArgs) WriteField_sceneId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *SetSceneValueStringArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._valueId != nil {
    err = oprot.WriteFieldBegin("_valueId", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_valueId", p.ThriftName(), err); }
    err = p._valueId.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RemoteValueID", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_valueId", p.ThriftName(), err); }
  }
  return err
}

func (p *SetSceneValueStringArgs) WriteField_valueId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *SetSceneValueStringArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_value", thrift.STRING, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_value", p.ThriftName(), err); }
  err = oprot.WriteString(string(p._value))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_value", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_value", p.ThriftName(), err); }
  return err
}

func (p *SetSceneValueStringArgs) WriteField_value(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *SetSceneValueStringArgs) TStructName() string {
  return "SetSceneValueStringArgs"
}

func (p *SetSceneValueStringArgs) ThriftName() string {
  return "SetSceneValue_String_args"
}

func (p *SetSceneValueStringArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetSceneValueStringArgs(%+v)", *p)
}

func (p *SetSceneValueStringArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SetSceneValueStringArgs)
  if !ok {
    return 0, false
  }
  if p._sceneId != data._sceneId {
    if p._sceneId < data._sceneId {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p._valueId.CompareTo(data._valueId); !ok || cmp != 0 {
    return cmp, ok
  }
  if p._value != data._value {
    if p._value < data._value {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *SetSceneValueStringArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._sceneId
  case 2: return p._valueId
  case 3: return p._value
  }
  return nil
}

func (p *SetSceneValueStringArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_sceneId", thrift.BYTE, 1),
    thrift.NewTField("_valueId", thrift.STRUCT, 2),
    thrift.NewTField("_value", thrift.STRING, 3),
    })
}

/**
 * Attributes:
 *  - Success
 */
type SetSceneValueStringResult struct {
  thrift.TStruct
  Success bool "success"; // 0
}

func NewSetSceneValueStringResult() *SetSceneValueStringResult {
  output := &SetSceneValueStringResult{
    TStruct:thrift.NewTStruct("SetSceneValue_String_result", []thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    }),
  }
  {
  }
  return output
}

func (p *SetSceneValueStringResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SetSceneValueStringResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1648, err1649 := iprot.ReadBool()
  if err1649 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1649); }
  p.Success = v1648
  return err
}

func (p *SetSceneValueStringResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *SetSceneValueStringResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SetSceneValue_String_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SetSceneValueStringResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BOOL, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *SetSceneValueStringResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *SetSceneValueStringResult) TStructName() string {
  return "SetSceneValueStringResult"
}

func (p *SetSceneValueStringResult) ThriftName() string {
  return "SetSceneValue_String_result"
}

func (p *SetSceneValueStringResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetSceneValueStringResult(%+v)", *p)
}

func (p *SetSceneValueStringResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SetSceneValueStringResult)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Success, data.Success); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *SetSceneValueStringResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *SetSceneValueStringResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    })
}

/**
 * Attributes:
 *  - _sceneId
 *  - _valueId
 *  - _value
 */
type SetSceneValueListSelectionStringArgs struct {
  thrift.TStruct
  _sceneId byte "_sceneId"; // 1
  _valueId *RemoteValueID "_valueId"; // 2
  _value string "_value"; // 3
}

func NewSetSceneValueListSelectionStringArgs() *SetSceneValueListSelectionStringArgs {
  output := &SetSceneValueListSelectionStringArgs{
    TStruct:thrift.NewTStruct("SetSceneValueListSelection_String_args", []thrift.TField{
    thrift.NewTField("_sceneId", thrift.BYTE, 1),
    thrift.NewTField("_valueId", thrift.STRUCT, 2),
    thrift.NewTField("_value", thrift.STRING, 3),
    }),
  }
  {
  }
  return output
}

func (p *SetSceneValueListSelectionStringArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_sceneId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_valueId" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "_value" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SetSceneValueListSelectionStringArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1650, err1651 := iprot.ReadByte()
  if err1651 != nil { return thrift.NewTProtocolExceptionReadField(1, "_sceneId", p.ThriftName(), err1651); }
  p._sceneId = v1650
  return err
}

func (p *SetSceneValueListSelectionStringArgs) ReadField_sceneId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *SetSceneValueListSelectionStringArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p._valueId = NewRemoteValueID()
  err1654 := p._valueId.Read(iprot)
  if err1654 != nil { return thrift.NewTProtocolExceptionReadStruct("p._valueIdRemoteValueID", err1654); }
  return err
}

func (p *SetSceneValueListSelectionStringArgs) ReadField_valueId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *SetSceneValueListSelectionStringArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1655, err1656 := iprot.ReadString()
  if err1656 != nil { return thrift.NewTProtocolExceptionReadField(3, "_value", p.ThriftName(), err1656); }
  p._value = v1655
  return err
}

func (p *SetSceneValueListSelectionStringArgs) ReadField_value(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *SetSceneValueListSelectionStringArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SetSceneValueListSelection_String_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SetSceneValueListSelectionStringArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_sceneId", thrift.BYTE, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._sceneId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  return err
}

func (p *SetSceneValueListSelectionStringArgs) WriteField_sceneId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *SetSceneValueListSelectionStringArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._valueId != nil {
    err = oprot.WriteFieldBegin("_valueId", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_valueId", p.ThriftName(), err); }
    err = p._valueId.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RemoteValueID", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_valueId", p.ThriftName(), err); }
  }
  return err
}

func (p *SetSceneValueListSelectionStringArgs) WriteField_valueId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *SetSceneValueListSelectionStringArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_value", thrift.STRING, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_value", p.ThriftName(), err); }
  err = oprot.WriteString(string(p._value))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_value", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_value", p.ThriftName(), err); }
  return err
}

func (p *SetSceneValueListSelectionStringArgs) WriteField_value(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *SetSceneValueListSelectionStringArgs) TStructName() string {
  return "SetSceneValueListSelectionStringArgs"
}

func (p *SetSceneValueListSelectionStringArgs) ThriftName() string {
  return "SetSceneValueListSelection_String_args"
}

func (p *SetSceneValueListSelectionStringArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetSceneValueListSelectionStringArgs(%+v)", *p)
}

func (p *SetSceneValueListSelectionStringArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SetSceneValueListSelectionStringArgs)
  if !ok {
    return 0, false
  }
  if p._sceneId != data._sceneId {
    if p._sceneId < data._sceneId {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p._valueId.CompareTo(data._valueId); !ok || cmp != 0 {
    return cmp, ok
  }
  if p._value != data._value {
    if p._value < data._value {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *SetSceneValueListSelectionStringArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._sceneId
  case 2: return p._valueId
  case 3: return p._value
  }
  return nil
}

func (p *SetSceneValueListSelectionStringArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_sceneId", thrift.BYTE, 1),
    thrift.NewTField("_valueId", thrift.STRUCT, 2),
    thrift.NewTField("_value", thrift.STRING, 3),
    })
}

/**
 * Attributes:
 *  - Success
 */
type SetSceneValueListSelectionStringResult struct {
  thrift.TStruct
  Success bool "success"; // 0
}

func NewSetSceneValueListSelectionStringResult() *SetSceneValueListSelectionStringResult {
  output := &SetSceneValueListSelectionStringResult{
    TStruct:thrift.NewTStruct("SetSceneValueListSelection_String_result", []thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    }),
  }
  {
  }
  return output
}

func (p *SetSceneValueListSelectionStringResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SetSceneValueListSelectionStringResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1657, err1658 := iprot.ReadBool()
  if err1658 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1658); }
  p.Success = v1657
  return err
}

func (p *SetSceneValueListSelectionStringResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *SetSceneValueListSelectionStringResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SetSceneValueListSelection_String_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SetSceneValueListSelectionStringResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BOOL, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *SetSceneValueListSelectionStringResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *SetSceneValueListSelectionStringResult) TStructName() string {
  return "SetSceneValueListSelectionStringResult"
}

func (p *SetSceneValueListSelectionStringResult) ThriftName() string {
  return "SetSceneValueListSelection_String_result"
}

func (p *SetSceneValueListSelectionStringResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetSceneValueListSelectionStringResult(%+v)", *p)
}

func (p *SetSceneValueListSelectionStringResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SetSceneValueListSelectionStringResult)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Success, data.Success); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *SetSceneValueListSelectionStringResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *SetSceneValueListSelectionStringResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    })
}

/**
 * Attributes:
 *  - _sceneId
 *  - _valueId
 *  - _value
 */
type SetSceneValueListSelectionInt32Args struct {
  thrift.TStruct
  _sceneId byte "_sceneId"; // 1
  _valueId *RemoteValueID "_valueId"; // 2
  _value int32 "_value"; // 3
}

func NewSetSceneValueListSelectionInt32Args() *SetSceneValueListSelectionInt32Args {
  output := &SetSceneValueListSelectionInt32Args{
    TStruct:thrift.NewTStruct("SetSceneValueListSelection_Int32_args", []thrift.TField{
    thrift.NewTField("_sceneId", thrift.BYTE, 1),
    thrift.NewTField("_valueId", thrift.STRUCT, 2),
    thrift.NewTField("_value", thrift.I32, 3),
    }),
  }
  {
  }
  return output
}

func (p *SetSceneValueListSelectionInt32Args) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_sceneId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_valueId" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "_value" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SetSceneValueListSelectionInt32Args) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1659, err1660 := iprot.ReadByte()
  if err1660 != nil { return thrift.NewTProtocolExceptionReadField(1, "_sceneId", p.ThriftName(), err1660); }
  p._sceneId = v1659
  return err
}

func (p *SetSceneValueListSelectionInt32Args) ReadField_sceneId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *SetSceneValueListSelectionInt32Args) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p._valueId = NewRemoteValueID()
  err1663 := p._valueId.Read(iprot)
  if err1663 != nil { return thrift.NewTProtocolExceptionReadStruct("p._valueIdRemoteValueID", err1663); }
  return err
}

func (p *SetSceneValueListSelectionInt32Args) ReadField_valueId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *SetSceneValueListSelectionInt32Args) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1664, err1665 := iprot.ReadI32()
  if err1665 != nil { return thrift.NewTProtocolExceptionReadField(3, "_value", p.ThriftName(), err1665); }
  p._value = v1664
  return err
}

func (p *SetSceneValueListSelectionInt32Args) ReadField_value(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *SetSceneValueListSelectionInt32Args) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SetSceneValueListSelection_Int32_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SetSceneValueListSelectionInt32Args) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_sceneId", thrift.BYTE, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._sceneId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  return err
}

func (p *SetSceneValueListSelectionInt32Args) WriteField_sceneId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *SetSceneValueListSelectionInt32Args) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p._valueId != nil {
    err = oprot.WriteFieldBegin("_valueId", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_valueId", p.ThriftName(), err); }
    err = p._valueId.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RemoteValueID", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_valueId", p.ThriftName(), err); }
  }
  return err
}

func (p *SetSceneValueListSelectionInt32Args) WriteField_valueId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *SetSceneValueListSelectionInt32Args) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_value", thrift.I32, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_value", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p._value))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_value", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "_value", p.ThriftName(), err); }
  return err
}

func (p *SetSceneValueListSelectionInt32Args) WriteField_value(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *SetSceneValueListSelectionInt32Args) TStructName() string {
  return "SetSceneValueListSelectionInt32Args"
}

func (p *SetSceneValueListSelectionInt32Args) ThriftName() string {
  return "SetSceneValueListSelection_Int32_args"
}

func (p *SetSceneValueListSelectionInt32Args) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetSceneValueListSelectionInt32Args(%+v)", *p)
}

func (p *SetSceneValueListSelectionInt32Args) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SetSceneValueListSelectionInt32Args)
  if !ok {
    return 0, false
  }
  if p._sceneId != data._sceneId {
    if p._sceneId < data._sceneId {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p._valueId.CompareTo(data._valueId); !ok || cmp != 0 {
    return cmp, ok
  }
  if p._value != data._value {
    if p._value < data._value {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *SetSceneValueListSelectionInt32Args) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._sceneId
  case 2: return p._valueId
  case 3: return p._value
  }
  return nil
}

func (p *SetSceneValueListSelectionInt32Args) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_sceneId", thrift.BYTE, 1),
    thrift.NewTField("_valueId", thrift.STRUCT, 2),
    thrift.NewTField("_value", thrift.I32, 3),
    })
}

/**
 * Attributes:
 *  - Success
 */
type SetSceneValueListSelectionInt32Result struct {
  thrift.TStruct
  Success bool "success"; // 0
}

func NewSetSceneValueListSelectionInt32Result() *SetSceneValueListSelectionInt32Result {
  output := &SetSceneValueListSelectionInt32Result{
    TStruct:thrift.NewTStruct("SetSceneValueListSelection_Int32_result", []thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    }),
  }
  {
  }
  return output
}

func (p *SetSceneValueListSelectionInt32Result) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SetSceneValueListSelectionInt32Result) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1666, err1667 := iprot.ReadBool()
  if err1667 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1667); }
  p.Success = v1666
  return err
}

func (p *SetSceneValueListSelectionInt32Result) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *SetSceneValueListSelectionInt32Result) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SetSceneValueListSelection_Int32_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SetSceneValueListSelectionInt32Result) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BOOL, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *SetSceneValueListSelectionInt32Result) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *SetSceneValueListSelectionInt32Result) TStructName() string {
  return "SetSceneValueListSelectionInt32Result"
}

func (p *SetSceneValueListSelectionInt32Result) ThriftName() string {
  return "SetSceneValueListSelection_Int32_result"
}

func (p *SetSceneValueListSelectionInt32Result) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetSceneValueListSelectionInt32Result(%+v)", *p)
}

func (p *SetSceneValueListSelectionInt32Result) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SetSceneValueListSelectionInt32Result)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Success, data.Success); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *SetSceneValueListSelectionInt32Result) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *SetSceneValueListSelectionInt32Result) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    })
}

/**
 * Attributes:
 *  - _sceneId
 */
type GetSceneLabelArgs struct {
  thrift.TStruct
  _sceneId byte "_sceneId"; // 1
}

func NewGetSceneLabelArgs() *GetSceneLabelArgs {
  output := &GetSceneLabelArgs{
    TStruct:thrift.NewTStruct("GetSceneLabel_args", []thrift.TField{
    thrift.NewTField("_sceneId", thrift.BYTE, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetSceneLabelArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_sceneId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetSceneLabelArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1668, err1669 := iprot.ReadByte()
  if err1669 != nil { return thrift.NewTProtocolExceptionReadField(1, "_sceneId", p.ThriftName(), err1669); }
  p._sceneId = v1668
  return err
}

func (p *GetSceneLabelArgs) ReadField_sceneId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetSceneLabelArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetSceneLabel_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetSceneLabelArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_sceneId", thrift.BYTE, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._sceneId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  return err
}

func (p *GetSceneLabelArgs) WriteField_sceneId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetSceneLabelArgs) TStructName() string {
  return "GetSceneLabelArgs"
}

func (p *GetSceneLabelArgs) ThriftName() string {
  return "GetSceneLabel_args"
}

func (p *GetSceneLabelArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetSceneLabelArgs(%+v)", *p)
}

func (p *GetSceneLabelArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetSceneLabelArgs)
  if !ok {
    return 0, false
  }
  if p._sceneId != data._sceneId {
    if p._sceneId < data._sceneId {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetSceneLabelArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._sceneId
  }
  return nil
}

func (p *GetSceneLabelArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_sceneId", thrift.BYTE, 1),
    })
}

/**
 * Attributes:
 *  - Success
 */
type GetSceneLabelResult struct {
  thrift.TStruct
  Success string "success"; // 0
}

func NewGetSceneLabelResult() *GetSceneLabelResult {
  output := &GetSceneLabelResult{
    TStruct:thrift.NewTStruct("GetSceneLabel_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRING, 0),
    }),
  }
  {
  }
  return output
}

func (p *GetSceneLabelResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetSceneLabelResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1670, err1671 := iprot.ReadString()
  if err1671 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1671); }
  p.Success = v1670
  return err
}

func (p *GetSceneLabelResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetSceneLabelResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GetSceneLabel_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetSceneLabelResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.STRING, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *GetSceneLabelResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetSceneLabelResult) TStructName() string {
  return "GetSceneLabelResult"
}

func (p *GetSceneLabelResult) ThriftName() string {
  return "GetSceneLabel_result"
}

func (p *GetSceneLabelResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetSceneLabelResult(%+v)", *p)
}

func (p *GetSceneLabelResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetSceneLabelResult)
  if !ok {
    return 0, false
  }
  if p.Success != data.Success {
    if p.Success < data.Success {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetSceneLabelResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *GetSceneLabelResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRING, 0),
    })
}

/**
 * Attributes:
 *  - _sceneId
 *  - _value
 */
type SetSceneLabelArgs struct {
  thrift.TStruct
  _sceneId byte "_sceneId"; // 1
  _value string "_value"; // 2
}

func NewSetSceneLabelArgs() *SetSceneLabelArgs {
  output := &SetSceneLabelArgs{
    TStruct:thrift.NewTStruct("SetSceneLabel_args", []thrift.TField{
    thrift.NewTField("_sceneId", thrift.BYTE, 1),
    thrift.NewTField("_value", thrift.STRING, 2),
    }),
  }
  {
  }
  return output
}

func (p *SetSceneLabelArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_sceneId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "_value" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SetSceneLabelArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1672, err1673 := iprot.ReadByte()
  if err1673 != nil { return thrift.NewTProtocolExceptionReadField(1, "_sceneId", p.ThriftName(), err1673); }
  p._sceneId = v1672
  return err
}

func (p *SetSceneLabelArgs) ReadField_sceneId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *SetSceneLabelArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1674, err1675 := iprot.ReadString()
  if err1675 != nil { return thrift.NewTProtocolExceptionReadField(2, "_value", p.ThriftName(), err1675); }
  p._value = v1674
  return err
}

func (p *SetSceneLabelArgs) ReadField_value(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *SetSceneLabelArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SetSceneLabel_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SetSceneLabelArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_sceneId", thrift.BYTE, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._sceneId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  return err
}

func (p *SetSceneLabelArgs) WriteField_sceneId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *SetSceneLabelArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_value", thrift.STRING, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_value", p.ThriftName(), err); }
  err = oprot.WriteString(string(p._value))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_value", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "_value", p.ThriftName(), err); }
  return err
}

func (p *SetSceneLabelArgs) WriteField_value(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *SetSceneLabelArgs) TStructName() string {
  return "SetSceneLabelArgs"
}

func (p *SetSceneLabelArgs) ThriftName() string {
  return "SetSceneLabel_args"
}

func (p *SetSceneLabelArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetSceneLabelArgs(%+v)", *p)
}

func (p *SetSceneLabelArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SetSceneLabelArgs)
  if !ok {
    return 0, false
  }
  if p._sceneId != data._sceneId {
    if p._sceneId < data._sceneId {
      return -1, true
    }
    return 1, true
  }
  if p._value != data._value {
    if p._value < data._value {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *SetSceneLabelArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._sceneId
  case 2: return p._value
  }
  return nil
}

func (p *SetSceneLabelArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_sceneId", thrift.BYTE, 1),
    thrift.NewTField("_value", thrift.STRING, 2),
    })
}

type SetSceneLabelResult struct {
  thrift.TStruct
}

func NewSetSceneLabelResult() *SetSceneLabelResult {
  output := &SetSceneLabelResult{
    TStruct:thrift.NewTStruct("SetSceneLabel_result", []thrift.TField{
    }),
  }
  {
  }
  return output
}

func (p *SetSceneLabelResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    err = iprot.Skip(fieldTypeId)
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SetSceneLabelResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SetSceneLabel_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SetSceneLabelResult) TStructName() string {
  return "SetSceneLabelResult"
}

func (p *SetSceneLabelResult) ThriftName() string {
  return "SetSceneLabel_result"
}

func (p *SetSceneLabelResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetSceneLabelResult(%+v)", *p)
}

func (p *SetSceneLabelResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  _, ok := other.(*SetSceneLabelResult)
  if !ok {
    return 0, false
  }
  return 0, true
}

func (p *SetSceneLabelResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  }
  return nil
}

func (p *SetSceneLabelResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    })
}

/**
 * Attributes:
 *  - _sceneId
 */
type SceneExistsArgs struct {
  thrift.TStruct
  _sceneId byte "_sceneId"; // 1
}

func NewSceneExistsArgs() *SceneExistsArgs {
  output := &SceneExistsArgs{
    TStruct:thrift.NewTStruct("SceneExists_args", []thrift.TField{
    thrift.NewTField("_sceneId", thrift.BYTE, 1),
    }),
  }
  {
  }
  return output
}

func (p *SceneExistsArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_sceneId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SceneExistsArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1676, err1677 := iprot.ReadByte()
  if err1677 != nil { return thrift.NewTProtocolExceptionReadField(1, "_sceneId", p.ThriftName(), err1677); }
  p._sceneId = v1676
  return err
}

func (p *SceneExistsArgs) ReadField_sceneId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *SceneExistsArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SceneExists_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SceneExistsArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_sceneId", thrift.BYTE, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._sceneId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  return err
}

func (p *SceneExistsArgs) WriteField_sceneId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *SceneExistsArgs) TStructName() string {
  return "SceneExistsArgs"
}

func (p *SceneExistsArgs) ThriftName() string {
  return "SceneExists_args"
}

func (p *SceneExistsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SceneExistsArgs(%+v)", *p)
}

func (p *SceneExistsArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SceneExistsArgs)
  if !ok {
    return 0, false
  }
  if p._sceneId != data._sceneId {
    if p._sceneId < data._sceneId {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *SceneExistsArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._sceneId
  }
  return nil
}

func (p *SceneExistsArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_sceneId", thrift.BYTE, 1),
    })
}

/**
 * Attributes:
 *  - Success
 */
type SceneExistsResult struct {
  thrift.TStruct
  Success bool "success"; // 0
}

func NewSceneExistsResult() *SceneExistsResult {
  output := &SceneExistsResult{
    TStruct:thrift.NewTStruct("SceneExists_result", []thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    }),
  }
  {
  }
  return output
}

func (p *SceneExistsResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SceneExistsResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1678, err1679 := iprot.ReadBool()
  if err1679 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1679); }
  p.Success = v1678
  return err
}

func (p *SceneExistsResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *SceneExistsResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SceneExists_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SceneExistsResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BOOL, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *SceneExistsResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *SceneExistsResult) TStructName() string {
  return "SceneExistsResult"
}

func (p *SceneExistsResult) ThriftName() string {
  return "SceneExists_result"
}

func (p *SceneExistsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SceneExistsResult(%+v)", *p)
}

func (p *SceneExistsResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SceneExistsResult)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Success, data.Success); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *SceneExistsResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *SceneExistsResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    })
}

/**
 * Attributes:
 *  - _sceneId
 */
type ActivateSceneArgs struct {
  thrift.TStruct
  _sceneId byte "_sceneId"; // 1
}

func NewActivateSceneArgs() *ActivateSceneArgs {
  output := &ActivateSceneArgs{
    TStruct:thrift.NewTStruct("ActivateScene_args", []thrift.TField{
    thrift.NewTField("_sceneId", thrift.BYTE, 1),
    }),
  }
  {
  }
  return output
}

func (p *ActivateSceneArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "_sceneId" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *ActivateSceneArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1680, err1681 := iprot.ReadByte()
  if err1681 != nil { return thrift.NewTProtocolExceptionReadField(1, "_sceneId", p.ThriftName(), err1681); }
  p._sceneId = v1680
  return err
}

func (p *ActivateSceneArgs) ReadField_sceneId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *ActivateSceneArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("ActivateScene_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *ActivateSceneArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("_sceneId", thrift.BYTE, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p._sceneId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "_sceneId", p.ThriftName(), err); }
  return err
}

func (p *ActivateSceneArgs) WriteField_sceneId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *ActivateSceneArgs) TStructName() string {
  return "ActivateSceneArgs"
}

func (p *ActivateSceneArgs) ThriftName() string {
  return "ActivateScene_args"
}

func (p *ActivateSceneArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ActivateSceneArgs(%+v)", *p)
}

func (p *ActivateSceneArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*ActivateSceneArgs)
  if !ok {
    return 0, false
  }
  if p._sceneId != data._sceneId {
    if p._sceneId < data._sceneId {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *ActivateSceneArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p._sceneId
  }
  return nil
}

func (p *ActivateSceneArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("_sceneId", thrift.BYTE, 1),
    })
}

/**
 * Attributes:
 *  - Success
 */
type ActivateSceneResult struct {
  thrift.TStruct
  Success bool "success"; // 0
}

func NewActivateSceneResult() *ActivateSceneResult {
  output := &ActivateSceneResult{
    TStruct:thrift.NewTStruct("ActivateScene_result", []thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    }),
  }
  {
  }
  return output
}

func (p *ActivateSceneResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *ActivateSceneResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1682, err1683 := iprot.ReadBool()
  if err1683 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1683); }
  p.Success = v1682
  return err
}

func (p *ActivateSceneResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *ActivateSceneResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("ActivateScene_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *ActivateSceneResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BOOL, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *ActivateSceneResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *ActivateSceneResult) TStructName() string {
  return "ActivateSceneResult"
}

func (p *ActivateSceneResult) ThriftName() string {
  return "ActivateScene_result"
}

func (p *ActivateSceneResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ActivateSceneResult(%+v)", *p)
}

func (p *ActivateSceneResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*ActivateSceneResult)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Success, data.Success); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *ActivateSceneResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *ActivateSceneResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    })
}

type SendAllValuesArgs struct {
  thrift.TStruct
}

func NewSendAllValuesArgs() *SendAllValuesArgs {
  output := &SendAllValuesArgs{
    TStruct:thrift.NewTStruct("SendAllValues_args", []thrift.TField{
    }),
  }
  {
  }
  return output
}

func (p *SendAllValuesArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    err = iprot.Skip(fieldTypeId)
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SendAllValuesArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SendAllValues_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SendAllValuesArgs) TStructName() string {
  return "SendAllValuesArgs"
}

func (p *SendAllValuesArgs) ThriftName() string {
  return "SendAllValues_args"
}

func (p *SendAllValuesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SendAllValuesArgs(%+v)", *p)
}

func (p *SendAllValuesArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  _, ok := other.(*SendAllValuesArgs)
  if !ok {
    return 0, false
  }
  return 0, true
}

func (p *SendAllValuesArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  }
  return nil
}

func (p *SendAllValuesArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    })
}

type SendAllValuesResult struct {
  thrift.TStruct
}

func NewSendAllValuesResult() *SendAllValuesResult {
  output := &SendAllValuesResult{
    TStruct:thrift.NewTStruct("SendAllValues_result", []thrift.TField{
    }),
  }
  {
  }
  return output
}

func (p *SendAllValuesResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    err = iprot.Skip(fieldTypeId)
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SendAllValuesResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SendAllValues_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SendAllValuesResult) TStructName() string {
  return "SendAllValuesResult"
}

func (p *SendAllValuesResult) ThriftName() string {
  return "SendAllValues_result"
}

func (p *SendAllValuesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SendAllValuesResult(%+v)", *p)
}

func (p *SendAllValuesResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  _, ok := other.(*SendAllValuesResult)
  if !ok {
    return 0, false
  }
  return 0, true
}

func (p *SendAllValuesResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  }
  return nil
}

func (p *SendAllValuesResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    })
}


