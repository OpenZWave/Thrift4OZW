/* Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package main

import (
        "flag"
        "fmt"
        "http"
        "net"
        "os"
        "strconv"
        "thrift"
        "thriftlib/OpenZWave"
)

func Usage() {
  fmt.Fprint(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:\n")
  flag.PrintDefaults()
  fmt.Fprint(os.Stderr, "Functions:\n")
  fmt.Fprint(os.Stderr, "  WriteConfig(_homeId int32) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetControllerNodeId(_homeId int32) (retval1758 byte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsPrimaryController(_homeId int32) (retval1759 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsStaticUpdateController(_homeId int32) (retval1760 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsBridgeController(_homeId int32) (retval1761 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetLibraryVersion(_homeId int32) (retval1762 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetLibraryTypeName(_homeId int32) (retval1763 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetSendQueueCount(_homeId int32) (retval1764 int32, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  LogDriverStatistics(_homeId int32) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetPollInterval() (retval1766 int32, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetPollInterval(_seconds int32) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  EnablePoll(_valueId *RemoteValueID) (retval1768 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  DisablePoll(_valueId *RemoteValueID) (retval1769 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  isPolled(_valueId *RemoteValueID) (retval1770 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  RefreshNodeInfo(_homeId int32, _nodeId byte) (retval1771 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  RequestNodeState(_homeId int32, _nodeId byte) (retval1772 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  RequestNodeDynamic(_homeId int32, _nodeId byte) (retval1773 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsNodeListeningDevice(_homeId int32, _nodeId byte) (retval1774 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsNodeFrequentListeningDevice(_homeId int32, _nodeId byte) (retval1775 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsNodeBeamingDevice(_homeId int32, _nodeId byte) (retval1776 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsNodeRoutingDevice(_homeId int32, _nodeId byte) (retval1777 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsNodeSecurityDevice(_homeId int32, _nodeId byte) (retval1778 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeMaxBaudRate(_homeId int32, _nodeId byte) (retval1779 int32, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeVersion(_homeId int32, _nodeId byte) (retval1780 byte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeSecurity(_homeId int32, _nodeId byte) (retval1781 byte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeBasic(_homeId int32, _nodeId byte) (retval1782 byte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeGeneric(_homeId int32, _nodeId byte) (retval1783 byte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeSpecific(_homeId int32, _nodeId byte) (retval1784 byte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeType(_homeId int32, _nodeId byte) (retval1785 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeNeighbors(_homeId int32, _nodeId byte) (retval1786 *UInt32ListByte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeManufacturerName(_homeId int32, _nodeId byte) (retval1787 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeProductName(_homeId int32, _nodeId byte) (retval1788 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeName(_homeId int32, _nodeId byte) (retval1789 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeLocation(_homeId int32, _nodeId byte) (retval1790 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeManufacturerId(_homeId int32, _nodeId byte) (retval1791 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeProductType(_homeId int32, _nodeId byte) (retval1792 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeProductId(_homeId int32, _nodeId byte) (retval1793 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetNodeManufacturerName(_homeId int32, _nodeId byte, _manufacturerName string) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetNodeProductName(_homeId int32, _nodeId byte, _productName string) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetNodeName(_homeId int32, _nodeId byte, _nodeName string) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetNodeLocation(_homeId int32, _nodeId byte, _location string) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetNodeOn(_homeId int32, _nodeId byte) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetNodeOff(_homeId int32, _nodeId byte) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetNodeLevel(_homeId int32, _nodeId byte, _level byte) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsNodeInfoReceived(_homeId int32, _nodeId byte) (retval1801 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeClassInformation(_homeId int32, _nodeId byte, _commandClassId byte) (retval1802 *BoolGetNodeClassInformation, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueLabel(_id *RemoteValueID) (retval1803 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetValueLabel(_id *RemoteValueID, _value string) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueUnits(_id *RemoteValueID) (retval1805 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetValueUnits(_id *RemoteValueID, _value string) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueHelp(_id *RemoteValueID) (retval1807 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetValueHelp(_id *RemoteValueID, _value string) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueMin(_id *RemoteValueID) (retval1809 int32, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueMax(_id *RemoteValueID) (retval1810 int32, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsValueReadOnly(_id *RemoteValueID) (retval1811 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsValueWriteOnly(_id *RemoteValueID) (retval1812 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsValueSet(_id *RemoteValueID) (retval1813 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueAsBool(_id *RemoteValueID) (retval1814 *BoolBool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueAsByte(_id *RemoteValueID) (retval1815 *BoolUInt8, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueAsFloat(_id *RemoteValueID) (retval1816 *BoolFloat, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueAsInt(_id *RemoteValueID) (retval1817 *BoolInt, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueAsShort(_id *RemoteValueID) (retval1818 *BoolInt16, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueAsString(_id *RemoteValueID) (retval1819 *BoolString, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueListSelection_String(_id *RemoteValueID) (retval1820 *BoolString, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueListSelection_Int32(_id *RemoteValueID) (retval1821 *BoolInt, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueListItems(_id *RemoteValueID) (retval1822 *BoolListString, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueFloatPrecision(_id *RemoteValueID) (retval1823 *BoolUInt8, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetValue_Bool(_id *RemoteValueID, _value bool) (retval1824 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetValue_UInt8(_id *RemoteValueID, _value byte) (retval1825 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetValue_Float(_id *RemoteValueID, _value float64) (retval1826 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetValue_Int32(_id *RemoteValueID, _value int32) (retval1827 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetValue_Int16(_id *RemoteValueID, _value int16) (retval1828 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetValue_String(_id *RemoteValueID, _value string) (retval1829 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetValueListSelection(_id *RemoteValueID, _selectedItem string) (retval1830 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  RefreshValue(_id *RemoteValueID) (retval1831 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  PressButton(_id *RemoteValueID) (retval1832 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  ReleaseButton(_id *RemoteValueID) (retval1833 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNumSwitchPoints(_id *RemoteValueID) (retval1834 byte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetSwitchPoint(_id *RemoteValueID, _hours byte, _minutes byte, _setback byte) (retval1835 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  RemoveSwitchPoint(_id *RemoteValueID, _hours byte, _minutes byte) (retval1836 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  ClearSwitchPoints(_id *RemoteValueID) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetSwitchPoint(_id *RemoteValueID, _idx byte) (retval1838 *GetSwitchPointReturnStruct, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SwitchAllOn(_homeId int32) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SwitchAllOff(_homeId int32) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetConfigParam(_homeId int32, _nodeId byte, _param byte, _value int32, _size byte) (retval1841 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  RequestConfigParam(_homeId int32, _nodeId byte, _param byte) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  RequestAllConfigParams(_homeId int32, _nodeId byte) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNumGroups(_homeId int32, _nodeId byte) (retval1844 byte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetAssociations(_homeId int32, _nodeId byte, _groupIdx byte) (retval1845 *GetAssociationsReturnStruct, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetMaxAssociations(_homeId int32, _nodeId byte, _groupIdx byte) (retval1846 byte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetGroupLabel(_homeId int32, _nodeId byte, _groupIdx byte) (retval1847 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  AddAssociation(_homeId int32, _nodeId byte, _groupIdx byte, _targetNodeId byte) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  RemoveAssociation(_homeId int32, _nodeId byte, _groupIdx byte, _targetNodeId byte) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  ResetController(_homeId int32) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SoftReset(_homeId int32) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  BeginControllerCommand(_homeId int32, _command DriverControllerCommand, _highPower bool, _nodeId byte, _arg byte) (retval1852 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  CancelControllerCommand(_homeId int32) (retval1853 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNumScenes() (retval1854 byte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetAllScenes() (retval1855 *GetAllScenesReturnStruct, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  CreateScene() (retval1856 byte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  RemoveScene(_sceneId byte) (retval1857 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  AddSceneValue_Bool(_sceneId byte, _valueId *RemoteValueID, _value bool) (retval1858 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  AddSceneValue_Uint8(_sceneId byte, _valueId *RemoteValueID, _value byte) (retval1859 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  AddSceneValue_Float(_sceneId byte, _valueId *RemoteValueID, _value float64) (retval1860 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  AddSceneValue_Int32(_sceneId byte, _valueId *RemoteValueID, _value int32) (retval1861 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  AddSceneValue_Int16(_sceneId byte, _valueId *RemoteValueID, _value int16) (retval1862 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  AddSceneValue_String(_sceneId byte, _valueId *RemoteValueID, _value string) (retval1863 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  AddSceneValueListSelection_String(_sceneId byte, _valueId *RemoteValueID, _value string) (retval1864 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  AddSceneValueListSelection_Int32(_sceneId byte, _valueId *RemoteValueID, _value int32) (retval1865 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  RemoveSceneValue(_sceneId byte, _valueId *RemoteValueID) (retval1866 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SceneGetValues(_sceneId byte) (retval1867 *SceneGetValuesReturnStruct, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SceneGetValueAsBool(_sceneId byte, _valueId *RemoteValueID) (retval1868 *BoolBool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SceneGetValueAsByte(_sceneId byte, _valueId *RemoteValueID) (retval1869 *BoolUInt8, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SceneGetValueAsFloat(_sceneId byte, _valueId *RemoteValueID) (retval1870 *BoolFloat, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SceneGetValueAsInt(_sceneId byte, _valueId *RemoteValueID) (retval1871 *BoolInt, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SceneGetValueAsShort(_sceneId byte, _valueId *RemoteValueID) (retval1872 *BoolInt16, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SceneGetValueAsString(_sceneId byte, _valueId *RemoteValueID) (retval1873 *BoolString, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SceneGetValueListSelection_String(_sceneId byte, _valueId *RemoteValueID) (retval1874 *BoolString, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SceneGetValueListSelection_Int32(_sceneId byte, _valueId *RemoteValueID) (retval1875 *BoolInt, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetSceneValue_Bool(_sceneId byte, _valueId *RemoteValueID, _value bool) (retval1876 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetSceneValue_Uint8(_sceneId byte, _valueId *RemoteValueID, _value byte) (retval1877 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetSceneValue_Float(_sceneId byte, _valueId *RemoteValueID, _value float64) (retval1878 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetSceneValue_Int32(_sceneId byte, _valueId *RemoteValueID, _value int32) (retval1879 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetSceneValue_Int16(_sceneId byte, _valueId *RemoteValueID, _value int16) (retval1880 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetSceneValue_String(_sceneId byte, _valueId *RemoteValueID, _value string) (retval1881 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetSceneValueListSelection_String(_sceneId byte, _valueId *RemoteValueID, _value string) (retval1882 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetSceneValueListSelection_Int32(_sceneId byte, _valueId *RemoteValueID, _value int32) (retval1883 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetSceneLabel(_sceneId byte) (retval1884 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetSceneLabel(_sceneId byte, _value string) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SceneExists(_sceneId byte) (retval1886 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  ActivateScene(_sceneId byte) (retval1887 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetDriverStatistics(_homeId int32) (retval1888 *GetDriverStatisticsReturnStruct, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SendAllValues() (err os.Error)\n")
  fmt.Fprint(os.Stderr, "\n")
  os.Exit(0)
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  var help bool
  var url http.URL
  var trans thrift.TTransport
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.BoolVar(&help, "help", false, "See usage string")
  flag.Parse()
  if help || flag.NArg() == 0 {
    flag.Usage()
  }
  
  if len(urlString) > 0 {
    url, err := http.ParseURL(urlString)
    if err != nil {
      fmt.Fprint(os.Stderr, "Error parsing URL: ", err.String(), "\n")
      flag.Usage()
    }
    host = url.Host
    useHttp = len(url.Scheme) <= 0 || url.Scheme == "http"
  } else if useHttp {
    _, err := http.ParseURL(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprint(os.Stderr, "Error parsing URL: ", err.String(), "\n")
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err os.Error
  if useHttp {
    trans, err = thrift.NewTHttpClient(url.Raw)
  } else {
    addr, err := net.ResolveTCPAddr("tcp", fmt.Sprint(host, ":", port))
    if err != nil {
      fmt.Fprint(os.Stderr, "Error resolving address", err.String())
      os.Exit(1)
    }
    trans, err = thrift.NewTNonblockingSocketAddr(addr)
    if framed {
      trans = thrift.NewTFramedTransport(trans)
    }
  }
  if err != nil {
    fmt.Fprint(os.Stderr, "Error creating transport", err.String())
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactory()
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
    break
  default:
    fmt.Fprint(os.Stderr, "Invalid protocol specified: ", protocol, "\n")
    Usage()
    os.Exit(1)
  }
  client := OpenZWave.NewRemoteManagerClientFactory(trans, protocolFactory)
  if err = trans.Open(); err != nil {
    fmt.Fprint(os.Stderr, "Error opening socket to ", host, ":", port, " ", err.String())
    os.Exit(1)
  }
  
  switch cmd {
  case "WriteConfig":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "WriteConfig requires 1 args\n")
      flag.Usage()
    }
    tmp0, err1890 := (strconv.Atoi(flag.Arg(1)))
    if err1890 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.WriteConfig(value0))
    fmt.Print("\n")
    break
  case "GetControllerNodeId":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetControllerNodeId requires 1 args\n")
      flag.Usage()
    }
    tmp0, err1891 := (strconv.Atoi(flag.Arg(1)))
    if err1891 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetControllerNodeId(value0))
    fmt.Print("\n")
    break
  case "IsPrimaryController":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "IsPrimaryController requires 1 args\n")
      flag.Usage()
    }
    tmp0, err1892 := (strconv.Atoi(flag.Arg(1)))
    if err1892 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.IsPrimaryController(value0))
    fmt.Print("\n")
    break
  case "IsStaticUpdateController":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "IsStaticUpdateController requires 1 args\n")
      flag.Usage()
    }
    tmp0, err1893 := (strconv.Atoi(flag.Arg(1)))
    if err1893 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.IsStaticUpdateController(value0))
    fmt.Print("\n")
    break
  case "IsBridgeController":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "IsBridgeController requires 1 args\n")
      flag.Usage()
    }
    tmp0, err1894 := (strconv.Atoi(flag.Arg(1)))
    if err1894 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.IsBridgeController(value0))
    fmt.Print("\n")
    break
  case "GetLibraryVersion":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetLibraryVersion requires 1 args\n")
      flag.Usage()
    }
    tmp0, err1895 := (strconv.Atoi(flag.Arg(1)))
    if err1895 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetLibraryVersion(value0))
    fmt.Print("\n")
    break
  case "GetLibraryTypeName":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetLibraryTypeName requires 1 args\n")
      flag.Usage()
    }
    tmp0, err1896 := (strconv.Atoi(flag.Arg(1)))
    if err1896 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetLibraryTypeName(value0))
    fmt.Print("\n")
    break
  case "GetSendQueueCount":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetSendQueueCount requires 1 args\n")
      flag.Usage()
    }
    tmp0, err1897 := (strconv.Atoi(flag.Arg(1)))
    if err1897 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetSendQueueCount(value0))
    fmt.Print("\n")
    break
  case "LogDriverStatistics":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "LogDriverStatistics requires 1 args\n")
      flag.Usage()
    }
    tmp0, err1898 := (strconv.Atoi(flag.Arg(1)))
    if err1898 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.LogDriverStatistics(value0))
    fmt.Print("\n")
    break
  case "GetPollInterval":
    if flag.NArg() - 1 != 0 {
      fmt.Fprint(os.Stderr, "GetPollInterval requires 0 args\n")
      flag.Usage()
    }
    fmt.Print(client.GetPollInterval())
    fmt.Print("\n")
    break
  case "SetPollInterval":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "SetPollInterval requires 1 args\n")
      flag.Usage()
    }
    tmp0, err1899 := (strconv.Atoi(flag.Arg(1)))
    if err1899 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.SetPollInterval(value0))
    fmt.Print("\n")
    break
  case "EnablePoll":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "EnablePoll requires 1 args\n")
      flag.Usage()
    }
    arg1900 := flag.Arg(1)
    mbTrans1901 := thrift.NewTMemoryBufferLen(len(arg1900))
    defer mbTrans1901.Close()
    _, err1902 := mbTrans1901.WriteString(arg1900)
    if err1902 != nil {
      Usage()
      return
    }
    factory1903 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1904 := factory1903.GetProtocol(mbTrans1901)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err1905 := argvalue0.Read(jsProt1904)
    if err1905 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.EnablePoll(value0))
    fmt.Print("\n")
    break
  case "DisablePoll":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "DisablePoll requires 1 args\n")
      flag.Usage()
    }
    arg1906 := flag.Arg(1)
    mbTrans1907 := thrift.NewTMemoryBufferLen(len(arg1906))
    defer mbTrans1907.Close()
    _, err1908 := mbTrans1907.WriteString(arg1906)
    if err1908 != nil {
      Usage()
      return
    }
    factory1909 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1910 := factory1909.GetProtocol(mbTrans1907)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err1911 := argvalue0.Read(jsProt1910)
    if err1911 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DisablePoll(value0))
    fmt.Print("\n")
    break
  case "isPolled":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "IsPolled requires 1 args\n")
      flag.Usage()
    }
    arg1912 := flag.Arg(1)
    mbTrans1913 := thrift.NewTMemoryBufferLen(len(arg1912))
    defer mbTrans1913.Close()
    _, err1914 := mbTrans1913.WriteString(arg1912)
    if err1914 != nil {
      Usage()
      return
    }
    factory1915 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1916 := factory1915.GetProtocol(mbTrans1913)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err1917 := argvalue0.Read(jsProt1916)
    if err1917 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.IsPolled(value0))
    fmt.Print("\n")
    break
  case "RefreshNodeInfo":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "RefreshNodeInfo requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1918 := (strconv.Atoi(flag.Arg(1)))
    if err1918 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1919 := (strconv.Atoi(flag.Arg(2)))
    if err1919 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.RefreshNodeInfo(value0, value1))
    fmt.Print("\n")
    break
  case "RequestNodeState":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "RequestNodeState requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1920 := (strconv.Atoi(flag.Arg(1)))
    if err1920 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1921 := (strconv.Atoi(flag.Arg(2)))
    if err1921 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.RequestNodeState(value0, value1))
    fmt.Print("\n")
    break
  case "RequestNodeDynamic":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "RequestNodeDynamic requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1922 := (strconv.Atoi(flag.Arg(1)))
    if err1922 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1923 := (strconv.Atoi(flag.Arg(2)))
    if err1923 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.RequestNodeDynamic(value0, value1))
    fmt.Print("\n")
    break
  case "IsNodeListeningDevice":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "IsNodeListeningDevice requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1924 := (strconv.Atoi(flag.Arg(1)))
    if err1924 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1925 := (strconv.Atoi(flag.Arg(2)))
    if err1925 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.IsNodeListeningDevice(value0, value1))
    fmt.Print("\n")
    break
  case "IsNodeFrequentListeningDevice":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "IsNodeFrequentListeningDevice requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1926 := (strconv.Atoi(flag.Arg(1)))
    if err1926 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1927 := (strconv.Atoi(flag.Arg(2)))
    if err1927 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.IsNodeFrequentListeningDevice(value0, value1))
    fmt.Print("\n")
    break
  case "IsNodeBeamingDevice":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "IsNodeBeamingDevice requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1928 := (strconv.Atoi(flag.Arg(1)))
    if err1928 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1929 := (strconv.Atoi(flag.Arg(2)))
    if err1929 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.IsNodeBeamingDevice(value0, value1))
    fmt.Print("\n")
    break
  case "IsNodeRoutingDevice":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "IsNodeRoutingDevice requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1930 := (strconv.Atoi(flag.Arg(1)))
    if err1930 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1931 := (strconv.Atoi(flag.Arg(2)))
    if err1931 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.IsNodeRoutingDevice(value0, value1))
    fmt.Print("\n")
    break
  case "IsNodeSecurityDevice":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "IsNodeSecurityDevice requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1932 := (strconv.Atoi(flag.Arg(1)))
    if err1932 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1933 := (strconv.Atoi(flag.Arg(2)))
    if err1933 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.IsNodeSecurityDevice(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeMaxBaudRate":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeMaxBaudRate requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1934 := (strconv.Atoi(flag.Arg(1)))
    if err1934 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1935 := (strconv.Atoi(flag.Arg(2)))
    if err1935 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeMaxBaudRate(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeVersion":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeVersion requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1936 := (strconv.Atoi(flag.Arg(1)))
    if err1936 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1937 := (strconv.Atoi(flag.Arg(2)))
    if err1937 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeVersion(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeSecurity":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeSecurity requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1938 := (strconv.Atoi(flag.Arg(1)))
    if err1938 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1939 := (strconv.Atoi(flag.Arg(2)))
    if err1939 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeSecurity(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeBasic":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeBasic requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1940 := (strconv.Atoi(flag.Arg(1)))
    if err1940 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1941 := (strconv.Atoi(flag.Arg(2)))
    if err1941 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeBasic(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeGeneric":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeGeneric requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1942 := (strconv.Atoi(flag.Arg(1)))
    if err1942 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1943 := (strconv.Atoi(flag.Arg(2)))
    if err1943 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeGeneric(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeSpecific":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeSpecific requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1944 := (strconv.Atoi(flag.Arg(1)))
    if err1944 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1945 := (strconv.Atoi(flag.Arg(2)))
    if err1945 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeSpecific(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeType":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeType requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1946 := (strconv.Atoi(flag.Arg(1)))
    if err1946 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1947 := (strconv.Atoi(flag.Arg(2)))
    if err1947 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeType(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeNeighbors":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeNeighbors requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1948 := (strconv.Atoi(flag.Arg(1)))
    if err1948 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1949 := (strconv.Atoi(flag.Arg(2)))
    if err1949 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeNeighbors(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeManufacturerName":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeManufacturerName requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1950 := (strconv.Atoi(flag.Arg(1)))
    if err1950 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1951 := (strconv.Atoi(flag.Arg(2)))
    if err1951 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeManufacturerName(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeProductName":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeProductName requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1952 := (strconv.Atoi(flag.Arg(1)))
    if err1952 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1953 := (strconv.Atoi(flag.Arg(2)))
    if err1953 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeProductName(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeName":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeName requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1954 := (strconv.Atoi(flag.Arg(1)))
    if err1954 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1955 := (strconv.Atoi(flag.Arg(2)))
    if err1955 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeName(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeLocation":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeLocation requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1956 := (strconv.Atoi(flag.Arg(1)))
    if err1956 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1957 := (strconv.Atoi(flag.Arg(2)))
    if err1957 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeLocation(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeManufacturerId":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeManufacturerId requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1958 := (strconv.Atoi(flag.Arg(1)))
    if err1958 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1959 := (strconv.Atoi(flag.Arg(2)))
    if err1959 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeManufacturerId(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeProductType":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeProductType requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1960 := (strconv.Atoi(flag.Arg(1)))
    if err1960 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1961 := (strconv.Atoi(flag.Arg(2)))
    if err1961 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeProductType(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeProductId":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeProductId requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1962 := (strconv.Atoi(flag.Arg(1)))
    if err1962 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1963 := (strconv.Atoi(flag.Arg(2)))
    if err1963 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeProductId(value0, value1))
    fmt.Print("\n")
    break
  case "SetNodeManufacturerName":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetNodeManufacturerName requires 3 args\n")
      flag.Usage()
    }
    tmp0, err1964 := (strconv.Atoi(flag.Arg(1)))
    if err1964 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1965 := (strconv.Atoi(flag.Arg(2)))
    if err1965 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.SetNodeManufacturerName(value0, value1, value2))
    fmt.Print("\n")
    break
  case "SetNodeProductName":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetNodeProductName requires 3 args\n")
      flag.Usage()
    }
    tmp0, err1967 := (strconv.Atoi(flag.Arg(1)))
    if err1967 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1968 := (strconv.Atoi(flag.Arg(2)))
    if err1968 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.SetNodeProductName(value0, value1, value2))
    fmt.Print("\n")
    break
  case "SetNodeName":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetNodeName requires 3 args\n")
      flag.Usage()
    }
    tmp0, err1970 := (strconv.Atoi(flag.Arg(1)))
    if err1970 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1971 := (strconv.Atoi(flag.Arg(2)))
    if err1971 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.SetNodeName(value0, value1, value2))
    fmt.Print("\n")
    break
  case "SetNodeLocation":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetNodeLocation requires 3 args\n")
      flag.Usage()
    }
    tmp0, err1973 := (strconv.Atoi(flag.Arg(1)))
    if err1973 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1974 := (strconv.Atoi(flag.Arg(2)))
    if err1974 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.SetNodeLocation(value0, value1, value2))
    fmt.Print("\n")
    break
  case "SetNodeOn":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetNodeOn requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1976 := (strconv.Atoi(flag.Arg(1)))
    if err1976 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1977 := (strconv.Atoi(flag.Arg(2)))
    if err1977 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.SetNodeOn(value0, value1))
    fmt.Print("\n")
    break
  case "SetNodeOff":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetNodeOff requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1978 := (strconv.Atoi(flag.Arg(1)))
    if err1978 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1979 := (strconv.Atoi(flag.Arg(2)))
    if err1979 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.SetNodeOff(value0, value1))
    fmt.Print("\n")
    break
  case "SetNodeLevel":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetNodeLevel requires 3 args\n")
      flag.Usage()
    }
    tmp0, err1980 := (strconv.Atoi(flag.Arg(1)))
    if err1980 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1981 := (strconv.Atoi(flag.Arg(2)))
    if err1981 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    tmp2, err1982 := (strconv.Atoi(flag.Arg(3)))
    if err1982 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    fmt.Print(client.SetNodeLevel(value0, value1, value2))
    fmt.Print("\n")
    break
  case "IsNodeInfoReceived":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "IsNodeInfoReceived requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1983 := (strconv.Atoi(flag.Arg(1)))
    if err1983 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1984 := (strconv.Atoi(flag.Arg(2)))
    if err1984 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.IsNodeInfoReceived(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeClassInformation":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "GetNodeClassInformation requires 3 args\n")
      flag.Usage()
    }
    tmp0, err1985 := (strconv.Atoi(flag.Arg(1)))
    if err1985 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1986 := (strconv.Atoi(flag.Arg(2)))
    if err1986 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    tmp2, err1987 := (strconv.Atoi(flag.Arg(3)))
    if err1987 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    fmt.Print(client.GetNodeClassInformation(value0, value1, value2))
    fmt.Print("\n")
    break
  case "GetValueLabel":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueLabel requires 1 args\n")
      flag.Usage()
    }
    arg1988 := flag.Arg(1)
    mbTrans1989 := thrift.NewTMemoryBufferLen(len(arg1988))
    defer mbTrans1989.Close()
    _, err1990 := mbTrans1989.WriteString(arg1988)
    if err1990 != nil {
      Usage()
      return
    }
    factory1991 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1992 := factory1991.GetProtocol(mbTrans1989)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err1993 := argvalue0.Read(jsProt1992)
    if err1993 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueLabel(value0))
    fmt.Print("\n")
    break
  case "SetValueLabel":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetValueLabel requires 2 args\n")
      flag.Usage()
    }
    arg1994 := flag.Arg(1)
    mbTrans1995 := thrift.NewTMemoryBufferLen(len(arg1994))
    defer mbTrans1995.Close()
    _, err1996 := mbTrans1995.WriteString(arg1994)
    if err1996 != nil {
      Usage()
      return
    }
    factory1997 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1998 := factory1997.GetProtocol(mbTrans1995)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err1999 := argvalue0.Read(jsProt1998)
    if err1999 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.SetValueLabel(value0, value1))
    fmt.Print("\n")
    break
  case "GetValueUnits":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueUnits requires 1 args\n")
      flag.Usage()
    }
    arg2001 := flag.Arg(1)
    mbTrans2002 := thrift.NewTMemoryBufferLen(len(arg2001))
    defer mbTrans2002.Close()
    _, err2003 := mbTrans2002.WriteString(arg2001)
    if err2003 != nil {
      Usage()
      return
    }
    factory2004 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2005 := factory2004.GetProtocol(mbTrans2002)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2006 := argvalue0.Read(jsProt2005)
    if err2006 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueUnits(value0))
    fmt.Print("\n")
    break
  case "SetValueUnits":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetValueUnits requires 2 args\n")
      flag.Usage()
    }
    arg2007 := flag.Arg(1)
    mbTrans2008 := thrift.NewTMemoryBufferLen(len(arg2007))
    defer mbTrans2008.Close()
    _, err2009 := mbTrans2008.WriteString(arg2007)
    if err2009 != nil {
      Usage()
      return
    }
    factory2010 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2011 := factory2010.GetProtocol(mbTrans2008)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2012 := argvalue0.Read(jsProt2011)
    if err2012 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.SetValueUnits(value0, value1))
    fmt.Print("\n")
    break
  case "GetValueHelp":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueHelp requires 1 args\n")
      flag.Usage()
    }
    arg2014 := flag.Arg(1)
    mbTrans2015 := thrift.NewTMemoryBufferLen(len(arg2014))
    defer mbTrans2015.Close()
    _, err2016 := mbTrans2015.WriteString(arg2014)
    if err2016 != nil {
      Usage()
      return
    }
    factory2017 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2018 := factory2017.GetProtocol(mbTrans2015)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2019 := argvalue0.Read(jsProt2018)
    if err2019 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueHelp(value0))
    fmt.Print("\n")
    break
  case "SetValueHelp":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetValueHelp requires 2 args\n")
      flag.Usage()
    }
    arg2020 := flag.Arg(1)
    mbTrans2021 := thrift.NewTMemoryBufferLen(len(arg2020))
    defer mbTrans2021.Close()
    _, err2022 := mbTrans2021.WriteString(arg2020)
    if err2022 != nil {
      Usage()
      return
    }
    factory2023 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2024 := factory2023.GetProtocol(mbTrans2021)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2025 := argvalue0.Read(jsProt2024)
    if err2025 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.SetValueHelp(value0, value1))
    fmt.Print("\n")
    break
  case "GetValueMin":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueMin requires 1 args\n")
      flag.Usage()
    }
    arg2027 := flag.Arg(1)
    mbTrans2028 := thrift.NewTMemoryBufferLen(len(arg2027))
    defer mbTrans2028.Close()
    _, err2029 := mbTrans2028.WriteString(arg2027)
    if err2029 != nil {
      Usage()
      return
    }
    factory2030 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2031 := factory2030.GetProtocol(mbTrans2028)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2032 := argvalue0.Read(jsProt2031)
    if err2032 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueMin(value0))
    fmt.Print("\n")
    break
  case "GetValueMax":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueMax requires 1 args\n")
      flag.Usage()
    }
    arg2033 := flag.Arg(1)
    mbTrans2034 := thrift.NewTMemoryBufferLen(len(arg2033))
    defer mbTrans2034.Close()
    _, err2035 := mbTrans2034.WriteString(arg2033)
    if err2035 != nil {
      Usage()
      return
    }
    factory2036 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2037 := factory2036.GetProtocol(mbTrans2034)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2038 := argvalue0.Read(jsProt2037)
    if err2038 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueMax(value0))
    fmt.Print("\n")
    break
  case "IsValueReadOnly":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "IsValueReadOnly requires 1 args\n")
      flag.Usage()
    }
    arg2039 := flag.Arg(1)
    mbTrans2040 := thrift.NewTMemoryBufferLen(len(arg2039))
    defer mbTrans2040.Close()
    _, err2041 := mbTrans2040.WriteString(arg2039)
    if err2041 != nil {
      Usage()
      return
    }
    factory2042 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2043 := factory2042.GetProtocol(mbTrans2040)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2044 := argvalue0.Read(jsProt2043)
    if err2044 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.IsValueReadOnly(value0))
    fmt.Print("\n")
    break
  case "IsValueWriteOnly":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "IsValueWriteOnly requires 1 args\n")
      flag.Usage()
    }
    arg2045 := flag.Arg(1)
    mbTrans2046 := thrift.NewTMemoryBufferLen(len(arg2045))
    defer mbTrans2046.Close()
    _, err2047 := mbTrans2046.WriteString(arg2045)
    if err2047 != nil {
      Usage()
      return
    }
    factory2048 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2049 := factory2048.GetProtocol(mbTrans2046)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2050 := argvalue0.Read(jsProt2049)
    if err2050 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.IsValueWriteOnly(value0))
    fmt.Print("\n")
    break
  case "IsValueSet":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "IsValueSet requires 1 args\n")
      flag.Usage()
    }
    arg2051 := flag.Arg(1)
    mbTrans2052 := thrift.NewTMemoryBufferLen(len(arg2051))
    defer mbTrans2052.Close()
    _, err2053 := mbTrans2052.WriteString(arg2051)
    if err2053 != nil {
      Usage()
      return
    }
    factory2054 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2055 := factory2054.GetProtocol(mbTrans2052)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2056 := argvalue0.Read(jsProt2055)
    if err2056 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.IsValueSet(value0))
    fmt.Print("\n")
    break
  case "GetValueAsBool":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueAsBool requires 1 args\n")
      flag.Usage()
    }
    arg2057 := flag.Arg(1)
    mbTrans2058 := thrift.NewTMemoryBufferLen(len(arg2057))
    defer mbTrans2058.Close()
    _, err2059 := mbTrans2058.WriteString(arg2057)
    if err2059 != nil {
      Usage()
      return
    }
    factory2060 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2061 := factory2060.GetProtocol(mbTrans2058)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2062 := argvalue0.Read(jsProt2061)
    if err2062 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueAsBool(value0))
    fmt.Print("\n")
    break
  case "GetValueAsByte":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueAsByte requires 1 args\n")
      flag.Usage()
    }
    arg2063 := flag.Arg(1)
    mbTrans2064 := thrift.NewTMemoryBufferLen(len(arg2063))
    defer mbTrans2064.Close()
    _, err2065 := mbTrans2064.WriteString(arg2063)
    if err2065 != nil {
      Usage()
      return
    }
    factory2066 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2067 := factory2066.GetProtocol(mbTrans2064)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2068 := argvalue0.Read(jsProt2067)
    if err2068 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueAsByte(value0))
    fmt.Print("\n")
    break
  case "GetValueAsFloat":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueAsFloat requires 1 args\n")
      flag.Usage()
    }
    arg2069 := flag.Arg(1)
    mbTrans2070 := thrift.NewTMemoryBufferLen(len(arg2069))
    defer mbTrans2070.Close()
    _, err2071 := mbTrans2070.WriteString(arg2069)
    if err2071 != nil {
      Usage()
      return
    }
    factory2072 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2073 := factory2072.GetProtocol(mbTrans2070)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2074 := argvalue0.Read(jsProt2073)
    if err2074 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueAsFloat(value0))
    fmt.Print("\n")
    break
  case "GetValueAsInt":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueAsInt requires 1 args\n")
      flag.Usage()
    }
    arg2075 := flag.Arg(1)
    mbTrans2076 := thrift.NewTMemoryBufferLen(len(arg2075))
    defer mbTrans2076.Close()
    _, err2077 := mbTrans2076.WriteString(arg2075)
    if err2077 != nil {
      Usage()
      return
    }
    factory2078 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2079 := factory2078.GetProtocol(mbTrans2076)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2080 := argvalue0.Read(jsProt2079)
    if err2080 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueAsInt(value0))
    fmt.Print("\n")
    break
  case "GetValueAsShort":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueAsShort requires 1 args\n")
      flag.Usage()
    }
    arg2081 := flag.Arg(1)
    mbTrans2082 := thrift.NewTMemoryBufferLen(len(arg2081))
    defer mbTrans2082.Close()
    _, err2083 := mbTrans2082.WriteString(arg2081)
    if err2083 != nil {
      Usage()
      return
    }
    factory2084 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2085 := factory2084.GetProtocol(mbTrans2082)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2086 := argvalue0.Read(jsProt2085)
    if err2086 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueAsShort(value0))
    fmt.Print("\n")
    break
  case "GetValueAsString":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueAsString requires 1 args\n")
      flag.Usage()
    }
    arg2087 := flag.Arg(1)
    mbTrans2088 := thrift.NewTMemoryBufferLen(len(arg2087))
    defer mbTrans2088.Close()
    _, err2089 := mbTrans2088.WriteString(arg2087)
    if err2089 != nil {
      Usage()
      return
    }
    factory2090 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2091 := factory2090.GetProtocol(mbTrans2088)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2092 := argvalue0.Read(jsProt2091)
    if err2092 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueAsString(value0))
    fmt.Print("\n")
    break
  case "GetValueListSelection_String":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueListSelectionString requires 1 args\n")
      flag.Usage()
    }
    arg2093 := flag.Arg(1)
    mbTrans2094 := thrift.NewTMemoryBufferLen(len(arg2093))
    defer mbTrans2094.Close()
    _, err2095 := mbTrans2094.WriteString(arg2093)
    if err2095 != nil {
      Usage()
      return
    }
    factory2096 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2097 := factory2096.GetProtocol(mbTrans2094)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2098 := argvalue0.Read(jsProt2097)
    if err2098 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueListSelectionString(value0))
    fmt.Print("\n")
    break
  case "GetValueListSelection_Int32":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueListSelectionInt32 requires 1 args\n")
      flag.Usage()
    }
    arg2099 := flag.Arg(1)
    mbTrans2100 := thrift.NewTMemoryBufferLen(len(arg2099))
    defer mbTrans2100.Close()
    _, err2101 := mbTrans2100.WriteString(arg2099)
    if err2101 != nil {
      Usage()
      return
    }
    factory2102 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2103 := factory2102.GetProtocol(mbTrans2100)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2104 := argvalue0.Read(jsProt2103)
    if err2104 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueListSelectionInt32(value0))
    fmt.Print("\n")
    break
  case "GetValueListItems":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueListItems requires 1 args\n")
      flag.Usage()
    }
    arg2105 := flag.Arg(1)
    mbTrans2106 := thrift.NewTMemoryBufferLen(len(arg2105))
    defer mbTrans2106.Close()
    _, err2107 := mbTrans2106.WriteString(arg2105)
    if err2107 != nil {
      Usage()
      return
    }
    factory2108 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2109 := factory2108.GetProtocol(mbTrans2106)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2110 := argvalue0.Read(jsProt2109)
    if err2110 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueListItems(value0))
    fmt.Print("\n")
    break
  case "GetValueFloatPrecision":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueFloatPrecision requires 1 args\n")
      flag.Usage()
    }
    arg2111 := flag.Arg(1)
    mbTrans2112 := thrift.NewTMemoryBufferLen(len(arg2111))
    defer mbTrans2112.Close()
    _, err2113 := mbTrans2112.WriteString(arg2111)
    if err2113 != nil {
      Usage()
      return
    }
    factory2114 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2115 := factory2114.GetProtocol(mbTrans2112)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2116 := argvalue0.Read(jsProt2115)
    if err2116 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueFloatPrecision(value0))
    fmt.Print("\n")
    break
  case "SetValue_Bool":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetValueBool requires 2 args\n")
      flag.Usage()
    }
    arg2117 := flag.Arg(1)
    mbTrans2118 := thrift.NewTMemoryBufferLen(len(arg2117))
    defer mbTrans2118.Close()
    _, err2119 := mbTrans2118.WriteString(arg2117)
    if err2119 != nil {
      Usage()
      return
    }
    factory2120 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2121 := factory2120.GetProtocol(mbTrans2118)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2122 := argvalue0.Read(jsProt2121)
    if err2122 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2) == "true"
    value1 := argvalue1
    fmt.Print(client.SetValueBool(value0, value1))
    fmt.Print("\n")
    break
  case "SetValue_UInt8":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetValueUInt8 requires 2 args\n")
      flag.Usage()
    }
    arg2124 := flag.Arg(1)
    mbTrans2125 := thrift.NewTMemoryBufferLen(len(arg2124))
    defer mbTrans2125.Close()
    _, err2126 := mbTrans2125.WriteString(arg2124)
    if err2126 != nil {
      Usage()
      return
    }
    factory2127 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2128 := factory2127.GetProtocol(mbTrans2125)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2129 := argvalue0.Read(jsProt2128)
    if err2129 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err2130 := (strconv.Atoi(flag.Arg(2)))
    if err2130 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.SetValueUInt8(value0, value1))
    fmt.Print("\n")
    break
  case "SetValue_Float":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetValueFloat requires 2 args\n")
      flag.Usage()
    }
    arg2131 := flag.Arg(1)
    mbTrans2132 := thrift.NewTMemoryBufferLen(len(arg2131))
    defer mbTrans2132.Close()
    _, err2133 := mbTrans2132.WriteString(arg2131)
    if err2133 != nil {
      Usage()
      return
    }
    factory2134 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2135 := factory2134.GetProtocol(mbTrans2132)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2136 := argvalue0.Read(jsProt2135)
    if err2136 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1, err2137 := (strconv.Atof64(flag.Arg(2)))
    if err2137 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SetValueFloat(value0, value1))
    fmt.Print("\n")
    break
  case "SetValue_Int32":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetValueInt32 requires 2 args\n")
      flag.Usage()
    }
    arg2138 := flag.Arg(1)
    mbTrans2139 := thrift.NewTMemoryBufferLen(len(arg2138))
    defer mbTrans2139.Close()
    _, err2140 := mbTrans2139.WriteString(arg2138)
    if err2140 != nil {
      Usage()
      return
    }
    factory2141 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2142 := factory2141.GetProtocol(mbTrans2139)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2143 := argvalue0.Read(jsProt2142)
    if err2143 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err2144 := (strconv.Atoi(flag.Arg(2)))
    if err2144 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    fmt.Print(client.SetValueInt32(value0, value1))
    fmt.Print("\n")
    break
  case "SetValue_Int16":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetValueInt16 requires 2 args\n")
      flag.Usage()
    }
    arg2145 := flag.Arg(1)
    mbTrans2146 := thrift.NewTMemoryBufferLen(len(arg2145))
    defer mbTrans2146.Close()
    _, err2147 := mbTrans2146.WriteString(arg2145)
    if err2147 != nil {
      Usage()
      return
    }
    factory2148 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2149 := factory2148.GetProtocol(mbTrans2146)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2150 := argvalue0.Read(jsProt2149)
    if err2150 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err2151 := (strconv.Atoi(flag.Arg(2)))
    if err2151 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.SetValueInt16(value0, value1))
    fmt.Print("\n")
    break
  case "SetValue_String":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetValueString requires 2 args\n")
      flag.Usage()
    }
    arg2152 := flag.Arg(1)
    mbTrans2153 := thrift.NewTMemoryBufferLen(len(arg2152))
    defer mbTrans2153.Close()
    _, err2154 := mbTrans2153.WriteString(arg2152)
    if err2154 != nil {
      Usage()
      return
    }
    factory2155 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2156 := factory2155.GetProtocol(mbTrans2153)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2157 := argvalue0.Read(jsProt2156)
    if err2157 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.SetValueString(value0, value1))
    fmt.Print("\n")
    break
  case "SetValueListSelection":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetValueListSelection requires 2 args\n")
      flag.Usage()
    }
    arg2159 := flag.Arg(1)
    mbTrans2160 := thrift.NewTMemoryBufferLen(len(arg2159))
    defer mbTrans2160.Close()
    _, err2161 := mbTrans2160.WriteString(arg2159)
    if err2161 != nil {
      Usage()
      return
    }
    factory2162 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2163 := factory2162.GetProtocol(mbTrans2160)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2164 := argvalue0.Read(jsProt2163)
    if err2164 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.SetValueListSelection(value0, value1))
    fmt.Print("\n")
    break
  case "RefreshValue":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "RefreshValue requires 1 args\n")
      flag.Usage()
    }
    arg2166 := flag.Arg(1)
    mbTrans2167 := thrift.NewTMemoryBufferLen(len(arg2166))
    defer mbTrans2167.Close()
    _, err2168 := mbTrans2167.WriteString(arg2166)
    if err2168 != nil {
      Usage()
      return
    }
    factory2169 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2170 := factory2169.GetProtocol(mbTrans2167)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2171 := argvalue0.Read(jsProt2170)
    if err2171 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RefreshValue(value0))
    fmt.Print("\n")
    break
  case "PressButton":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "PressButton requires 1 args\n")
      flag.Usage()
    }
    arg2172 := flag.Arg(1)
    mbTrans2173 := thrift.NewTMemoryBufferLen(len(arg2172))
    defer mbTrans2173.Close()
    _, err2174 := mbTrans2173.WriteString(arg2172)
    if err2174 != nil {
      Usage()
      return
    }
    factory2175 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2176 := factory2175.GetProtocol(mbTrans2173)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2177 := argvalue0.Read(jsProt2176)
    if err2177 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.PressButton(value0))
    fmt.Print("\n")
    break
  case "ReleaseButton":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "ReleaseButton requires 1 args\n")
      flag.Usage()
    }
    arg2178 := flag.Arg(1)
    mbTrans2179 := thrift.NewTMemoryBufferLen(len(arg2178))
    defer mbTrans2179.Close()
    _, err2180 := mbTrans2179.WriteString(arg2178)
    if err2180 != nil {
      Usage()
      return
    }
    factory2181 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2182 := factory2181.GetProtocol(mbTrans2179)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2183 := argvalue0.Read(jsProt2182)
    if err2183 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ReleaseButton(value0))
    fmt.Print("\n")
    break
  case "GetNumSwitchPoints":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetNumSwitchPoints requires 1 args\n")
      flag.Usage()
    }
    arg2184 := flag.Arg(1)
    mbTrans2185 := thrift.NewTMemoryBufferLen(len(arg2184))
    defer mbTrans2185.Close()
    _, err2186 := mbTrans2185.WriteString(arg2184)
    if err2186 != nil {
      Usage()
      return
    }
    factory2187 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2188 := factory2187.GetProtocol(mbTrans2185)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2189 := argvalue0.Read(jsProt2188)
    if err2189 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetNumSwitchPoints(value0))
    fmt.Print("\n")
    break
  case "SetSwitchPoint":
    if flag.NArg() - 1 != 4 {
      fmt.Fprint(os.Stderr, "SetSwitchPoint requires 4 args\n")
      flag.Usage()
    }
    arg2190 := flag.Arg(1)
    mbTrans2191 := thrift.NewTMemoryBufferLen(len(arg2190))
    defer mbTrans2191.Close()
    _, err2192 := mbTrans2191.WriteString(arg2190)
    if err2192 != nil {
      Usage()
      return
    }
    factory2193 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2194 := factory2193.GetProtocol(mbTrans2191)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2195 := argvalue0.Read(jsProt2194)
    if err2195 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err2196 := (strconv.Atoi(flag.Arg(2)))
    if err2196 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    tmp2, err2197 := (strconv.Atoi(flag.Arg(3)))
    if err2197 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    tmp3, err2198 := (strconv.Atoi(flag.Arg(4)))
    if err2198 != nil {
      Usage()
      return
    }
    argvalue3 := byte(tmp3)
    value3 := argvalue3
    fmt.Print(client.SetSwitchPoint(value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "RemoveSwitchPoint":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "RemoveSwitchPoint requires 3 args\n")
      flag.Usage()
    }
    arg2199 := flag.Arg(1)
    mbTrans2200 := thrift.NewTMemoryBufferLen(len(arg2199))
    defer mbTrans2200.Close()
    _, err2201 := mbTrans2200.WriteString(arg2199)
    if err2201 != nil {
      Usage()
      return
    }
    factory2202 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2203 := factory2202.GetProtocol(mbTrans2200)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2204 := argvalue0.Read(jsProt2203)
    if err2204 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err2205 := (strconv.Atoi(flag.Arg(2)))
    if err2205 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    tmp2, err2206 := (strconv.Atoi(flag.Arg(3)))
    if err2206 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    fmt.Print(client.RemoveSwitchPoint(value0, value1, value2))
    fmt.Print("\n")
    break
  case "ClearSwitchPoints":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "ClearSwitchPoints requires 1 args\n")
      flag.Usage()
    }
    arg2207 := flag.Arg(1)
    mbTrans2208 := thrift.NewTMemoryBufferLen(len(arg2207))
    defer mbTrans2208.Close()
    _, err2209 := mbTrans2208.WriteString(arg2207)
    if err2209 != nil {
      Usage()
      return
    }
    factory2210 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2211 := factory2210.GetProtocol(mbTrans2208)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2212 := argvalue0.Read(jsProt2211)
    if err2212 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ClearSwitchPoints(value0))
    fmt.Print("\n")
    break
  case "GetSwitchPoint":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetSwitchPoint requires 2 args\n")
      flag.Usage()
    }
    arg2213 := flag.Arg(1)
    mbTrans2214 := thrift.NewTMemoryBufferLen(len(arg2213))
    defer mbTrans2214.Close()
    _, err2215 := mbTrans2214.WriteString(arg2213)
    if err2215 != nil {
      Usage()
      return
    }
    factory2216 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2217 := factory2216.GetProtocol(mbTrans2214)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2218 := argvalue0.Read(jsProt2217)
    if err2218 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err2219 := (strconv.Atoi(flag.Arg(2)))
    if err2219 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetSwitchPoint(value0, value1))
    fmt.Print("\n")
    break
  case "SwitchAllOn":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "SwitchAllOn requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2220 := (strconv.Atoi(flag.Arg(1)))
    if err2220 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.SwitchAllOn(value0))
    fmt.Print("\n")
    break
  case "SwitchAllOff":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "SwitchAllOff requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2221 := (strconv.Atoi(flag.Arg(1)))
    if err2221 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.SwitchAllOff(value0))
    fmt.Print("\n")
    break
  case "SetConfigParam":
    if flag.NArg() - 1 != 5 {
      fmt.Fprint(os.Stderr, "SetConfigParam requires 5 args\n")
      flag.Usage()
    }
    tmp0, err2222 := (strconv.Atoi(flag.Arg(1)))
    if err2222 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2223 := (strconv.Atoi(flag.Arg(2)))
    if err2223 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    tmp2, err2224 := (strconv.Atoi(flag.Arg(3)))
    if err2224 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    tmp3, err2225 := (strconv.Atoi(flag.Arg(4)))
    if err2225 != nil {
      Usage()
      return
    }
    argvalue3 := int32(tmp3)
    value3 := argvalue3
    tmp4, err2226 := (strconv.Atoi(flag.Arg(5)))
    if err2226 != nil {
      Usage()
      return
    }
    argvalue4 := byte(tmp4)
    value4 := argvalue4
    fmt.Print(client.SetConfigParam(value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "RequestConfigParam":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "RequestConfigParam requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2227 := (strconv.Atoi(flag.Arg(1)))
    if err2227 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2228 := (strconv.Atoi(flag.Arg(2)))
    if err2228 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    tmp2, err2229 := (strconv.Atoi(flag.Arg(3)))
    if err2229 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    fmt.Print(client.RequestConfigParam(value0, value1, value2))
    fmt.Print("\n")
    break
  case "RequestAllConfigParams":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "RequestAllConfigParams requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2230 := (strconv.Atoi(flag.Arg(1)))
    if err2230 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2231 := (strconv.Atoi(flag.Arg(2)))
    if err2231 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.RequestAllConfigParams(value0, value1))
    fmt.Print("\n")
    break
  case "GetNumGroups":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNumGroups requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2232 := (strconv.Atoi(flag.Arg(1)))
    if err2232 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2233 := (strconv.Atoi(flag.Arg(2)))
    if err2233 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNumGroups(value0, value1))
    fmt.Print("\n")
    break
  case "GetAssociations":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "GetAssociations requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2234 := (strconv.Atoi(flag.Arg(1)))
    if err2234 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2235 := (strconv.Atoi(flag.Arg(2)))
    if err2235 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    tmp2, err2236 := (strconv.Atoi(flag.Arg(3)))
    if err2236 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    fmt.Print(client.GetAssociations(value0, value1, value2))
    fmt.Print("\n")
    break
  case "GetMaxAssociations":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "GetMaxAssociations requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2237 := (strconv.Atoi(flag.Arg(1)))
    if err2237 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2238 := (strconv.Atoi(flag.Arg(2)))
    if err2238 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    tmp2, err2239 := (strconv.Atoi(flag.Arg(3)))
    if err2239 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    fmt.Print(client.GetMaxAssociations(value0, value1, value2))
    fmt.Print("\n")
    break
  case "GetGroupLabel":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "GetGroupLabel requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2240 := (strconv.Atoi(flag.Arg(1)))
    if err2240 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2241 := (strconv.Atoi(flag.Arg(2)))
    if err2241 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    tmp2, err2242 := (strconv.Atoi(flag.Arg(3)))
    if err2242 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    fmt.Print(client.GetGroupLabel(value0, value1, value2))
    fmt.Print("\n")
    break
  case "AddAssociation":
    if flag.NArg() - 1 != 4 {
      fmt.Fprint(os.Stderr, "AddAssociation requires 4 args\n")
      flag.Usage()
    }
    tmp0, err2243 := (strconv.Atoi(flag.Arg(1)))
    if err2243 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2244 := (strconv.Atoi(flag.Arg(2)))
    if err2244 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    tmp2, err2245 := (strconv.Atoi(flag.Arg(3)))
    if err2245 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    tmp3, err2246 := (strconv.Atoi(flag.Arg(4)))
    if err2246 != nil {
      Usage()
      return
    }
    argvalue3 := byte(tmp3)
    value3 := argvalue3
    fmt.Print(client.AddAssociation(value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "RemoveAssociation":
    if flag.NArg() - 1 != 4 {
      fmt.Fprint(os.Stderr, "RemoveAssociation requires 4 args\n")
      flag.Usage()
    }
    tmp0, err2247 := (strconv.Atoi(flag.Arg(1)))
    if err2247 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2248 := (strconv.Atoi(flag.Arg(2)))
    if err2248 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    tmp2, err2249 := (strconv.Atoi(flag.Arg(3)))
    if err2249 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    tmp3, err2250 := (strconv.Atoi(flag.Arg(4)))
    if err2250 != nil {
      Usage()
      return
    }
    argvalue3 := byte(tmp3)
    value3 := argvalue3
    fmt.Print(client.RemoveAssociation(value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "ResetController":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "ResetController requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2251 := (strconv.Atoi(flag.Arg(1)))
    if err2251 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.ResetController(value0))
    fmt.Print("\n")
    break
  case "SoftReset":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "SoftReset requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2252 := (strconv.Atoi(flag.Arg(1)))
    if err2252 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.SoftReset(value0))
    fmt.Print("\n")
    break
  case "BeginControllerCommand":
    if flag.NArg() - 1 != 5 {
      fmt.Fprint(os.Stderr, "BeginControllerCommand requires 5 args\n")
      flag.Usage()
    }
    tmp0, err2253 := (strconv.Atoi(flag.Arg(1)))
    if err2253 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := OpenZWave.DriverControllerCommand(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3) == "true"
    value2 := argvalue2
    tmp3, err2255 := (strconv.Atoi(flag.Arg(4)))
    if err2255 != nil {
      Usage()
      return
    }
    argvalue3 := byte(tmp3)
    value3 := argvalue3
    tmp4, err2256 := (strconv.Atoi(flag.Arg(5)))
    if err2256 != nil {
      Usage()
      return
    }
    argvalue4 := byte(tmp4)
    value4 := argvalue4
    fmt.Print(client.BeginControllerCommand(value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "CancelControllerCommand":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "CancelControllerCommand requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2257 := (strconv.Atoi(flag.Arg(1)))
    if err2257 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.CancelControllerCommand(value0))
    fmt.Print("\n")
    break
  case "GetNumScenes":
    if flag.NArg() - 1 != 0 {
      fmt.Fprint(os.Stderr, "GetNumScenes requires 0 args\n")
      flag.Usage()
    }
    fmt.Print(client.GetNumScenes())
    fmt.Print("\n")
    break
  case "GetAllScenes":
    if flag.NArg() - 1 != 0 {
      fmt.Fprint(os.Stderr, "GetAllScenes requires 0 args\n")
      flag.Usage()
    }
    fmt.Print(client.GetAllScenes())
    fmt.Print("\n")
    break
  case "CreateScene":
    if flag.NArg() - 1 != 0 {
      fmt.Fprint(os.Stderr, "CreateScene requires 0 args\n")
      flag.Usage()
    }
    fmt.Print(client.CreateScene())
    fmt.Print("\n")
    break
  case "RemoveScene":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "RemoveScene requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2258 := (strconv.Atoi(flag.Arg(1)))
    if err2258 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    fmt.Print(client.RemoveScene(value0))
    fmt.Print("\n")
    break
  case "AddSceneValue_Bool":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "AddSceneValueBool requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2259 := (strconv.Atoi(flag.Arg(1)))
    if err2259 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2260 := flag.Arg(2)
    mbTrans2261 := thrift.NewTMemoryBufferLen(len(arg2260))
    defer mbTrans2261.Close()
    _, err2262 := mbTrans2261.WriteString(arg2260)
    if err2262 != nil {
      Usage()
      return
    }
    factory2263 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2264 := factory2263.GetProtocol(mbTrans2261)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2265 := argvalue1.Read(jsProt2264)
    if err2265 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := flag.Arg(3) == "true"
    value2 := argvalue2
    fmt.Print(client.AddSceneValueBool(value0, value1, value2))
    fmt.Print("\n")
    break
  case "AddSceneValue_Uint8":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "AddSceneValueUint8 requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2267 := (strconv.Atoi(flag.Arg(1)))
    if err2267 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2268 := flag.Arg(2)
    mbTrans2269 := thrift.NewTMemoryBufferLen(len(arg2268))
    defer mbTrans2269.Close()
    _, err2270 := mbTrans2269.WriteString(arg2268)
    if err2270 != nil {
      Usage()
      return
    }
    factory2271 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2272 := factory2271.GetProtocol(mbTrans2269)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2273 := argvalue1.Read(jsProt2272)
    if err2273 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    tmp2, err2274 := (strconv.Atoi(flag.Arg(3)))
    if err2274 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    fmt.Print(client.AddSceneValueUint8(value0, value1, value2))
    fmt.Print("\n")
    break
  case "AddSceneValue_Float":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "AddSceneValueFloat requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2275 := (strconv.Atoi(flag.Arg(1)))
    if err2275 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2276 := flag.Arg(2)
    mbTrans2277 := thrift.NewTMemoryBufferLen(len(arg2276))
    defer mbTrans2277.Close()
    _, err2278 := mbTrans2277.WriteString(arg2276)
    if err2278 != nil {
      Usage()
      return
    }
    factory2279 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2280 := factory2279.GetProtocol(mbTrans2277)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2281 := argvalue1.Read(jsProt2280)
    if err2281 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2, err2282 := (strconv.Atof64(flag.Arg(3)))
    if err2282 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.AddSceneValueFloat(value0, value1, value2))
    fmt.Print("\n")
    break
  case "AddSceneValue_Int32":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "AddSceneValueInt32 requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2283 := (strconv.Atoi(flag.Arg(1)))
    if err2283 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2284 := flag.Arg(2)
    mbTrans2285 := thrift.NewTMemoryBufferLen(len(arg2284))
    defer mbTrans2285.Close()
    _, err2286 := mbTrans2285.WriteString(arg2284)
    if err2286 != nil {
      Usage()
      return
    }
    factory2287 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2288 := factory2287.GetProtocol(mbTrans2285)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2289 := argvalue1.Read(jsProt2288)
    if err2289 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    tmp2, err2290 := (strconv.Atoi(flag.Arg(3)))
    if err2290 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    fmt.Print(client.AddSceneValueInt32(value0, value1, value2))
    fmt.Print("\n")
    break
  case "AddSceneValue_Int16":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "AddSceneValueInt16 requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2291 := (strconv.Atoi(flag.Arg(1)))
    if err2291 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2292 := flag.Arg(2)
    mbTrans2293 := thrift.NewTMemoryBufferLen(len(arg2292))
    defer mbTrans2293.Close()
    _, err2294 := mbTrans2293.WriteString(arg2292)
    if err2294 != nil {
      Usage()
      return
    }
    factory2295 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2296 := factory2295.GetProtocol(mbTrans2293)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2297 := argvalue1.Read(jsProt2296)
    if err2297 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    tmp2, err2298 := (strconv.Atoi(flag.Arg(3)))
    if err2298 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    fmt.Print(client.AddSceneValueInt16(value0, value1, value2))
    fmt.Print("\n")
    break
  case "AddSceneValue_String":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "AddSceneValueString requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2299 := (strconv.Atoi(flag.Arg(1)))
    if err2299 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2300 := flag.Arg(2)
    mbTrans2301 := thrift.NewTMemoryBufferLen(len(arg2300))
    defer mbTrans2301.Close()
    _, err2302 := mbTrans2301.WriteString(arg2300)
    if err2302 != nil {
      Usage()
      return
    }
    factory2303 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2304 := factory2303.GetProtocol(mbTrans2301)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2305 := argvalue1.Read(jsProt2304)
    if err2305 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.AddSceneValueString(value0, value1, value2))
    fmt.Print("\n")
    break
  case "AddSceneValueListSelection_String":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "AddSceneValueListSelectionString requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2307 := (strconv.Atoi(flag.Arg(1)))
    if err2307 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2308 := flag.Arg(2)
    mbTrans2309 := thrift.NewTMemoryBufferLen(len(arg2308))
    defer mbTrans2309.Close()
    _, err2310 := mbTrans2309.WriteString(arg2308)
    if err2310 != nil {
      Usage()
      return
    }
    factory2311 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2312 := factory2311.GetProtocol(mbTrans2309)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2313 := argvalue1.Read(jsProt2312)
    if err2313 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.AddSceneValueListSelectionString(value0, value1, value2))
    fmt.Print("\n")
    break
  case "AddSceneValueListSelection_Int32":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "AddSceneValueListSelectionInt32 requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2315 := (strconv.Atoi(flag.Arg(1)))
    if err2315 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2316 := flag.Arg(2)
    mbTrans2317 := thrift.NewTMemoryBufferLen(len(arg2316))
    defer mbTrans2317.Close()
    _, err2318 := mbTrans2317.WriteString(arg2316)
    if err2318 != nil {
      Usage()
      return
    }
    factory2319 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2320 := factory2319.GetProtocol(mbTrans2317)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2321 := argvalue1.Read(jsProt2320)
    if err2321 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    tmp2, err2322 := (strconv.Atoi(flag.Arg(3)))
    if err2322 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    fmt.Print(client.AddSceneValueListSelectionInt32(value0, value1, value2))
    fmt.Print("\n")
    break
  case "RemoveSceneValue":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "RemoveSceneValue requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2323 := (strconv.Atoi(flag.Arg(1)))
    if err2323 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2324 := flag.Arg(2)
    mbTrans2325 := thrift.NewTMemoryBufferLen(len(arg2324))
    defer mbTrans2325.Close()
    _, err2326 := mbTrans2325.WriteString(arg2324)
    if err2326 != nil {
      Usage()
      return
    }
    factory2327 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2328 := factory2327.GetProtocol(mbTrans2325)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2329 := argvalue1.Read(jsProt2328)
    if err2329 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.RemoveSceneValue(value0, value1))
    fmt.Print("\n")
    break
  case "SceneGetValues":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "SceneGetValues requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2330 := (strconv.Atoi(flag.Arg(1)))
    if err2330 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    fmt.Print(client.SceneGetValues(value0))
    fmt.Print("\n")
    break
  case "SceneGetValueAsBool":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SceneGetValueAsBool requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2331 := (strconv.Atoi(flag.Arg(1)))
    if err2331 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2332 := flag.Arg(2)
    mbTrans2333 := thrift.NewTMemoryBufferLen(len(arg2332))
    defer mbTrans2333.Close()
    _, err2334 := mbTrans2333.WriteString(arg2332)
    if err2334 != nil {
      Usage()
      return
    }
    factory2335 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2336 := factory2335.GetProtocol(mbTrans2333)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2337 := argvalue1.Read(jsProt2336)
    if err2337 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SceneGetValueAsBool(value0, value1))
    fmt.Print("\n")
    break
  case "SceneGetValueAsByte":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SceneGetValueAsByte requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2338 := (strconv.Atoi(flag.Arg(1)))
    if err2338 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2339 := flag.Arg(2)
    mbTrans2340 := thrift.NewTMemoryBufferLen(len(arg2339))
    defer mbTrans2340.Close()
    _, err2341 := mbTrans2340.WriteString(arg2339)
    if err2341 != nil {
      Usage()
      return
    }
    factory2342 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2343 := factory2342.GetProtocol(mbTrans2340)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2344 := argvalue1.Read(jsProt2343)
    if err2344 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SceneGetValueAsByte(value0, value1))
    fmt.Print("\n")
    break
  case "SceneGetValueAsFloat":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SceneGetValueAsFloat requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2345 := (strconv.Atoi(flag.Arg(1)))
    if err2345 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2346 := flag.Arg(2)
    mbTrans2347 := thrift.NewTMemoryBufferLen(len(arg2346))
    defer mbTrans2347.Close()
    _, err2348 := mbTrans2347.WriteString(arg2346)
    if err2348 != nil {
      Usage()
      return
    }
    factory2349 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2350 := factory2349.GetProtocol(mbTrans2347)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2351 := argvalue1.Read(jsProt2350)
    if err2351 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SceneGetValueAsFloat(value0, value1))
    fmt.Print("\n")
    break
  case "SceneGetValueAsInt":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SceneGetValueAsInt requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2352 := (strconv.Atoi(flag.Arg(1)))
    if err2352 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2353 := flag.Arg(2)
    mbTrans2354 := thrift.NewTMemoryBufferLen(len(arg2353))
    defer mbTrans2354.Close()
    _, err2355 := mbTrans2354.WriteString(arg2353)
    if err2355 != nil {
      Usage()
      return
    }
    factory2356 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2357 := factory2356.GetProtocol(mbTrans2354)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2358 := argvalue1.Read(jsProt2357)
    if err2358 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SceneGetValueAsInt(value0, value1))
    fmt.Print("\n")
    break
  case "SceneGetValueAsShort":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SceneGetValueAsShort requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2359 := (strconv.Atoi(flag.Arg(1)))
    if err2359 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2360 := flag.Arg(2)
    mbTrans2361 := thrift.NewTMemoryBufferLen(len(arg2360))
    defer mbTrans2361.Close()
    _, err2362 := mbTrans2361.WriteString(arg2360)
    if err2362 != nil {
      Usage()
      return
    }
    factory2363 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2364 := factory2363.GetProtocol(mbTrans2361)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2365 := argvalue1.Read(jsProt2364)
    if err2365 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SceneGetValueAsShort(value0, value1))
    fmt.Print("\n")
    break
  case "SceneGetValueAsString":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SceneGetValueAsString requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2366 := (strconv.Atoi(flag.Arg(1)))
    if err2366 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2367 := flag.Arg(2)
    mbTrans2368 := thrift.NewTMemoryBufferLen(len(arg2367))
    defer mbTrans2368.Close()
    _, err2369 := mbTrans2368.WriteString(arg2367)
    if err2369 != nil {
      Usage()
      return
    }
    factory2370 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2371 := factory2370.GetProtocol(mbTrans2368)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2372 := argvalue1.Read(jsProt2371)
    if err2372 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SceneGetValueAsString(value0, value1))
    fmt.Print("\n")
    break
  case "SceneGetValueListSelection_String":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SceneGetValueListSelectionString requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2373 := (strconv.Atoi(flag.Arg(1)))
    if err2373 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2374 := flag.Arg(2)
    mbTrans2375 := thrift.NewTMemoryBufferLen(len(arg2374))
    defer mbTrans2375.Close()
    _, err2376 := mbTrans2375.WriteString(arg2374)
    if err2376 != nil {
      Usage()
      return
    }
    factory2377 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2378 := factory2377.GetProtocol(mbTrans2375)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2379 := argvalue1.Read(jsProt2378)
    if err2379 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SceneGetValueListSelectionString(value0, value1))
    fmt.Print("\n")
    break
  case "SceneGetValueListSelection_Int32":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SceneGetValueListSelectionInt32 requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2380 := (strconv.Atoi(flag.Arg(1)))
    if err2380 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2381 := flag.Arg(2)
    mbTrans2382 := thrift.NewTMemoryBufferLen(len(arg2381))
    defer mbTrans2382.Close()
    _, err2383 := mbTrans2382.WriteString(arg2381)
    if err2383 != nil {
      Usage()
      return
    }
    factory2384 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2385 := factory2384.GetProtocol(mbTrans2382)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2386 := argvalue1.Read(jsProt2385)
    if err2386 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SceneGetValueListSelectionInt32(value0, value1))
    fmt.Print("\n")
    break
  case "SetSceneValue_Bool":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetSceneValueBool requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2387 := (strconv.Atoi(flag.Arg(1)))
    if err2387 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2388 := flag.Arg(2)
    mbTrans2389 := thrift.NewTMemoryBufferLen(len(arg2388))
    defer mbTrans2389.Close()
    _, err2390 := mbTrans2389.WriteString(arg2388)
    if err2390 != nil {
      Usage()
      return
    }
    factory2391 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2392 := factory2391.GetProtocol(mbTrans2389)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2393 := argvalue1.Read(jsProt2392)
    if err2393 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := flag.Arg(3) == "true"
    value2 := argvalue2
    fmt.Print(client.SetSceneValueBool(value0, value1, value2))
    fmt.Print("\n")
    break
  case "SetSceneValue_Uint8":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetSceneValueUint8 requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2395 := (strconv.Atoi(flag.Arg(1)))
    if err2395 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2396 := flag.Arg(2)
    mbTrans2397 := thrift.NewTMemoryBufferLen(len(arg2396))
    defer mbTrans2397.Close()
    _, err2398 := mbTrans2397.WriteString(arg2396)
    if err2398 != nil {
      Usage()
      return
    }
    factory2399 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2400 := factory2399.GetProtocol(mbTrans2397)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2401 := argvalue1.Read(jsProt2400)
    if err2401 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    tmp2, err2402 := (strconv.Atoi(flag.Arg(3)))
    if err2402 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    fmt.Print(client.SetSceneValueUint8(value0, value1, value2))
    fmt.Print("\n")
    break
  case "SetSceneValue_Float":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetSceneValueFloat requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2403 := (strconv.Atoi(flag.Arg(1)))
    if err2403 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2404 := flag.Arg(2)
    mbTrans2405 := thrift.NewTMemoryBufferLen(len(arg2404))
    defer mbTrans2405.Close()
    _, err2406 := mbTrans2405.WriteString(arg2404)
    if err2406 != nil {
      Usage()
      return
    }
    factory2407 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2408 := factory2407.GetProtocol(mbTrans2405)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2409 := argvalue1.Read(jsProt2408)
    if err2409 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2, err2410 := (strconv.Atof64(flag.Arg(3)))
    if err2410 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.SetSceneValueFloat(value0, value1, value2))
    fmt.Print("\n")
    break
  case "SetSceneValue_Int32":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetSceneValueInt32 requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2411 := (strconv.Atoi(flag.Arg(1)))
    if err2411 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2412 := flag.Arg(2)
    mbTrans2413 := thrift.NewTMemoryBufferLen(len(arg2412))
    defer mbTrans2413.Close()
    _, err2414 := mbTrans2413.WriteString(arg2412)
    if err2414 != nil {
      Usage()
      return
    }
    factory2415 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2416 := factory2415.GetProtocol(mbTrans2413)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2417 := argvalue1.Read(jsProt2416)
    if err2417 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    tmp2, err2418 := (strconv.Atoi(flag.Arg(3)))
    if err2418 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    fmt.Print(client.SetSceneValueInt32(value0, value1, value2))
    fmt.Print("\n")
    break
  case "SetSceneValue_Int16":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetSceneValueInt16 requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2419 := (strconv.Atoi(flag.Arg(1)))
    if err2419 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2420 := flag.Arg(2)
    mbTrans2421 := thrift.NewTMemoryBufferLen(len(arg2420))
    defer mbTrans2421.Close()
    _, err2422 := mbTrans2421.WriteString(arg2420)
    if err2422 != nil {
      Usage()
      return
    }
    factory2423 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2424 := factory2423.GetProtocol(mbTrans2421)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2425 := argvalue1.Read(jsProt2424)
    if err2425 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    tmp2, err2426 := (strconv.Atoi(flag.Arg(3)))
    if err2426 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    fmt.Print(client.SetSceneValueInt16(value0, value1, value2))
    fmt.Print("\n")
    break
  case "SetSceneValue_String":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetSceneValueString requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2427 := (strconv.Atoi(flag.Arg(1)))
    if err2427 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2428 := flag.Arg(2)
    mbTrans2429 := thrift.NewTMemoryBufferLen(len(arg2428))
    defer mbTrans2429.Close()
    _, err2430 := mbTrans2429.WriteString(arg2428)
    if err2430 != nil {
      Usage()
      return
    }
    factory2431 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2432 := factory2431.GetProtocol(mbTrans2429)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2433 := argvalue1.Read(jsProt2432)
    if err2433 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.SetSceneValueString(value0, value1, value2))
    fmt.Print("\n")
    break
  case "SetSceneValueListSelection_String":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetSceneValueListSelectionString requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2435 := (strconv.Atoi(flag.Arg(1)))
    if err2435 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2436 := flag.Arg(2)
    mbTrans2437 := thrift.NewTMemoryBufferLen(len(arg2436))
    defer mbTrans2437.Close()
    _, err2438 := mbTrans2437.WriteString(arg2436)
    if err2438 != nil {
      Usage()
      return
    }
    factory2439 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2440 := factory2439.GetProtocol(mbTrans2437)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2441 := argvalue1.Read(jsProt2440)
    if err2441 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.SetSceneValueListSelectionString(value0, value1, value2))
    fmt.Print("\n")
    break
  case "SetSceneValueListSelection_Int32":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetSceneValueListSelectionInt32 requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2443 := (strconv.Atoi(flag.Arg(1)))
    if err2443 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2444 := flag.Arg(2)
    mbTrans2445 := thrift.NewTMemoryBufferLen(len(arg2444))
    defer mbTrans2445.Close()
    _, err2446 := mbTrans2445.WriteString(arg2444)
    if err2446 != nil {
      Usage()
      return
    }
    factory2447 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2448 := factory2447.GetProtocol(mbTrans2445)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2449 := argvalue1.Read(jsProt2448)
    if err2449 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    tmp2, err2450 := (strconv.Atoi(flag.Arg(3)))
    if err2450 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    fmt.Print(client.SetSceneValueListSelectionInt32(value0, value1, value2))
    fmt.Print("\n")
    break
  case "GetSceneLabel":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetSceneLabel requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2451 := (strconv.Atoi(flag.Arg(1)))
    if err2451 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetSceneLabel(value0))
    fmt.Print("\n")
    break
  case "SetSceneLabel":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetSceneLabel requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2452 := (strconv.Atoi(flag.Arg(1)))
    if err2452 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.SetSceneLabel(value0, value1))
    fmt.Print("\n")
    break
  case "SceneExists":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "SceneExists requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2454 := (strconv.Atoi(flag.Arg(1)))
    if err2454 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    fmt.Print(client.SceneExists(value0))
    fmt.Print("\n")
    break
  case "ActivateScene":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "ActivateScene requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2455 := (strconv.Atoi(flag.Arg(1)))
    if err2455 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    fmt.Print(client.ActivateScene(value0))
    fmt.Print("\n")
    break
  case "GetDriverStatistics":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetDriverStatistics requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2456 := (strconv.Atoi(flag.Arg(1)))
    if err2456 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetDriverStatistics(value0))
    fmt.Print("\n")
    break
  case "SendAllValues":
    if flag.NArg() - 1 != 0 {
      fmt.Fprint(os.Stderr, "SendAllValues requires 0 args\n")
      flag.Usage()
    }
    fmt.Print(client.SendAllValues())
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprint(os.Stderr, "Invalid function ", cmd, "\n")
  }
}
