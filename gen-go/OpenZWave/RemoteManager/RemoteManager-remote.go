/* Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package main

import (
        "flag"
        "fmt"
        "http"
        "net"
        "os"
        "strconv"
        "thrift"
        "thriftlib/OpenZWave"
)

func Usage() {
  fmt.Fprint(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:\n")
  flag.PrintDefaults()
  fmt.Fprint(os.Stderr, "Functions:\n")
  fmt.Fprint(os.Stderr, "  WriteConfig(_homeId int32) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetControllerNodeId(_homeId int32) (retval1738 byte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsPrimaryController(_homeId int32) (retval1739 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsStaticUpdateController(_homeId int32) (retval1740 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsBridgeController(_homeId int32) (retval1741 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetLibraryVersion(_homeId int32) (retval1742 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetLibraryTypeName(_homeId int32) (retval1743 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetSendQueueCount(_homeId int32) (retval1744 int32, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetPollInterval() (retval1745 int32, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetPollInterval(_seconds int32) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  EnablePoll(_valueId *RemoteValueID) (retval1747 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  DisablePoll(_valueId *RemoteValueID) (retval1748 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  isPolled(_valueId *RemoteValueID) (retval1749 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  RefreshNodeInfo(_homeId int32, _nodeId byte) (retval1750 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  RequestNodeState(_homeId int32, _nodeId byte) (retval1751 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  RequestNodeDynamic(_homeId int32, _nodeId byte) (retval1752 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsNodeListeningDevice(_homeId int32, _nodeId byte) (retval1753 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsNodeFrequentListeningDevice(_homeId int32, _nodeId byte) (retval1754 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsNodeBeamingDevice(_homeId int32, _nodeId byte) (retval1755 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsNodeRoutingDevice(_homeId int32, _nodeId byte) (retval1756 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsNodeSecurityDevice(_homeId int32, _nodeId byte) (retval1757 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeMaxBaudRate(_homeId int32, _nodeId byte) (retval1758 int32, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeVersion(_homeId int32, _nodeId byte) (retval1759 byte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeBasic(_homeId int32, _nodeId byte) (retval1760 byte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeGeneric(_homeId int32, _nodeId byte) (retval1761 byte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeSpecific(_homeId int32, _nodeId byte) (retval1762 byte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeType(_homeId int32, _nodeId byte) (retval1763 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeNeighbors(_homeId int32, _nodeId byte) (retval1764 *UInt32ListByte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeManufacturerName(_homeId int32, _nodeId byte) (retval1765 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeProductName(_homeId int32, _nodeId byte) (retval1766 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeName(_homeId int32, _nodeId byte) (retval1767 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeLocation(_homeId int32, _nodeId byte) (retval1768 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeManufacturerId(_homeId int32, _nodeId byte) (retval1769 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeProductType(_homeId int32, _nodeId byte) (retval1770 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeProductId(_homeId int32, _nodeId byte) (retval1771 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetNodeManufacturerName(_homeId int32, _nodeId byte, _manufacturerName string) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetNodeProductName(_homeId int32, _nodeId byte, _productName string) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetNodeName(_homeId int32, _nodeId byte, _nodeName string) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetNodeLocation(_homeId int32, _nodeId byte, _location string) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetNodeOn(_homeId int32, _nodeId byte) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetNodeOff(_homeId int32, _nodeId byte) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetNodeLevel(_homeId int32, _nodeId byte, _level byte) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsNodeInfoReceived(_homeId int32, _nodeId byte) (retval1779 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeClassInformation(_homeId int32, _nodeId byte, _commandClassId byte) (retval1780 *BoolGetNodeClassInformation, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueLabel(_id *RemoteValueID) (retval1781 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetValueLabel(_id *RemoteValueID, _value string) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueUnits(_id *RemoteValueID) (retval1783 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetValueUnits(_id *RemoteValueID, _value string) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueHelp(_id *RemoteValueID) (retval1785 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetValueHelp(_id *RemoteValueID, _value string) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueMin(_id *RemoteValueID) (retval1787 int32, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueMax(_id *RemoteValueID) (retval1788 int32, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsValueReadOnly(_id *RemoteValueID) (retval1789 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsValueWriteOnly(_id *RemoteValueID) (retval1790 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsValueSet(_id *RemoteValueID) (retval1791 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueAsBool(_id *RemoteValueID) (retval1792 *BoolBool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueAsByte(_id *RemoteValueID) (retval1793 *BoolUInt8, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueAsFloat(_id *RemoteValueID) (retval1794 *BoolFloat, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueAsInt(_id *RemoteValueID) (retval1795 *BoolInt, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueAsShort(_id *RemoteValueID) (retval1796 *BoolInt16, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueAsString(_id *RemoteValueID) (retval1797 *BoolString, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueListSelection_String(_id *RemoteValueID) (retval1798 *BoolString, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueListSelection_Int32(_id *RemoteValueID) (retval1799 *BoolInt, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueListItems(_id *RemoteValueID) (retval1800 *BoolListString, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueFloatPrecision(_id *RemoteValueID) (retval1801 *BoolUInt8, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetValue_Bool(_id *RemoteValueID, _value bool) (retval1802 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetValue_UInt8(_id *RemoteValueID, _value byte) (retval1803 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetValue_Float(_id *RemoteValueID, _value float64) (retval1804 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetValue_Int32(_id *RemoteValueID, _value int32) (retval1805 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetValue_Int16(_id *RemoteValueID, _value int16) (retval1806 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetValue_String(_id *RemoteValueID, _value string) (retval1807 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetValueListSelection(_id *RemoteValueID, _selectedItem string) (retval1808 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  RefreshValue(_id *RemoteValueID) (retval1809 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  PressButton(_id *RemoteValueID) (retval1810 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  ReleaseButton(_id *RemoteValueID) (retval1811 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNumSwitchPoints(_id *RemoteValueID) (retval1812 byte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetSwitchPoint(_id *RemoteValueID, _hours byte, _minutes byte, _setback byte) (retval1813 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  RemoveSwitchPoint(_id *RemoteValueID, _hours byte, _minutes byte) (retval1814 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  ClearSwitchPoints(_id *RemoteValueID) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetSwitchPoint(_id *RemoteValueID, _idx byte) (retval1816 *GetSwitchPointReturnStruct, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SwitchAllOn(_homeId int32) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SwitchAllOff(_homeId int32) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetConfigParam(_homeId int32, _nodeId byte, _param byte, _value int32, _size byte) (retval1819 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  RequestConfigParam(_homeId int32, _nodeId byte, _param byte) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  RequestAllConfigParams(_homeId int32, _nodeId byte) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNumGroups(_homeId int32, _nodeId byte) (retval1822 byte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetAssociations(_homeId int32, _nodeId byte, _groupIdx byte) (retval1823 *GetAssociationsReturnStruct, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetMaxAssociations(_homeId int32, _nodeId byte, _groupIdx byte) (retval1824 byte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetGroupLabel(_homeId int32, _nodeId byte, _groupIdx byte) (retval1825 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  AddAssociation(_homeId int32, _nodeId byte, _groupIdx byte, _targetNodeId byte) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  RemoveAssociation(_homeId int32, _nodeId byte, _groupIdx byte, _targetNodeId byte) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  ResetController(_homeId int32) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SoftReset(_homeId int32) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  BeginControllerCommand(_homeId int32, _command DriverControllerCommand, _highPower bool, _nodeId byte, _arg byte) (retval1830 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  CancelControllerCommand(_homeId int32) (retval1831 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNumScenes() (retval1832 byte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetAllScenes() (retval1833 *GetAllScenesReturnStruct, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  CreateScene() (retval1834 byte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  RemoveScene(_sceneId byte) (retval1835 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  AddSceneValue_Bool(_sceneId byte, _valueId *RemoteValueID, _value bool) (retval1836 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  AddSceneValue_Uint8(_sceneId byte, _valueId *RemoteValueID, _value byte) (retval1837 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  AddSceneValue_Float(_sceneId byte, _valueId *RemoteValueID, _value float64) (retval1838 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  AddSceneValue_Int32(_sceneId byte, _valueId *RemoteValueID, _value int32) (retval1839 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  AddSceneValue_Int16(_sceneId byte, _valueId *RemoteValueID, _value int16) (retval1840 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  AddSceneValue_String(_sceneId byte, _valueId *RemoteValueID, _value string) (retval1841 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  AddSceneValueListSelection_String(_sceneId byte, _valueId *RemoteValueID, _value string) (retval1842 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  AddSceneValueListSelection_Int32(_sceneId byte, _valueId *RemoteValueID, _value int32) (retval1843 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  RemoveSceneValue(_sceneId byte, _valueId *RemoteValueID) (retval1844 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SceneGetValues(_sceneId byte) (retval1845 *SceneGetValuesReturnStruct, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SceneGetValueAsBool(_sceneId byte, _valueId *RemoteValueID) (retval1846 *BoolBool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SceneGetValueAsByte(_sceneId byte, _valueId *RemoteValueID) (retval1847 *BoolUInt8, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SceneGetValueAsFloat(_sceneId byte, _valueId *RemoteValueID) (retval1848 *BoolFloat, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SceneGetValueAsInt(_sceneId byte, _valueId *RemoteValueID) (retval1849 *BoolInt, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SceneGetValueAsShort(_sceneId byte, _valueId *RemoteValueID) (retval1850 *BoolInt16, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SceneGetValueAsString(_sceneId byte, _valueId *RemoteValueID) (retval1851 *BoolString, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SceneGetValueListSelection_String(_sceneId byte, _valueId *RemoteValueID) (retval1852 *BoolString, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SceneGetValueListSelection_Int32(_sceneId byte, _valueId *RemoteValueID) (retval1853 *BoolInt, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetSceneValue_Bool(_sceneId byte, _valueId *RemoteValueID, _value bool) (retval1854 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetSceneValue_Uint8(_sceneId byte, _valueId *RemoteValueID, _value byte) (retval1855 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetSceneValue_Float(_sceneId byte, _valueId *RemoteValueID, _value float64) (retval1856 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetSceneValue_Int32(_sceneId byte, _valueId *RemoteValueID, _value int32) (retval1857 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetSceneValue_Int16(_sceneId byte, _valueId *RemoteValueID, _value int16) (retval1858 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetSceneValue_String(_sceneId byte, _valueId *RemoteValueID, _value string) (retval1859 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetSceneValueListSelection_String(_sceneId byte, _valueId *RemoteValueID, _value string) (retval1860 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetSceneValueListSelection_Int32(_sceneId byte, _valueId *RemoteValueID, _value int32) (retval1861 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetSceneLabel(_sceneId byte) (retval1862 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetSceneLabel(_sceneId byte, _value string) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SceneExists(_sceneId byte) (retval1864 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  ActivateScene(_sceneId byte) (retval1865 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetDriverStatistics(_homeId int32) (retval1866 *GetDriverStatisticsReturnStruct, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SendAllValues() (err os.Error)\n")
  fmt.Fprint(os.Stderr, "\n")
  os.Exit(0)
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  var help bool
  var url http.URL
  var trans thrift.TTransport
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.BoolVar(&help, "help", false, "See usage string")
  flag.Parse()
  if help || flag.NArg() == 0 {
    flag.Usage()
  }
  
  if len(urlString) > 0 {
    url, err := http.ParseURL(urlString)
    if err != nil {
      fmt.Fprint(os.Stderr, "Error parsing URL: ", err.String(), "\n")
      flag.Usage()
    }
    host = url.Host
    useHttp = len(url.Scheme) <= 0 || url.Scheme == "http"
  } else if useHttp {
    _, err := http.ParseURL(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprint(os.Stderr, "Error parsing URL: ", err.String(), "\n")
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err os.Error
  if useHttp {
    trans, err = thrift.NewTHttpClient(url.Raw)
  } else {
    addr, err := net.ResolveTCPAddr("tcp", fmt.Sprint(host, ":", port))
    if err != nil {
      fmt.Fprint(os.Stderr, "Error resolving address", err.String())
      os.Exit(1)
    }
    trans, err = thrift.NewTNonblockingSocketAddr(addr)
    if framed {
      trans = thrift.NewTFramedTransport(trans)
    }
  }
  if err != nil {
    fmt.Fprint(os.Stderr, "Error creating transport", err.String())
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactory()
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
    break
  default:
    fmt.Fprint(os.Stderr, "Invalid protocol specified: ", protocol, "\n")
    Usage()
    os.Exit(1)
  }
  client := OpenZWave.NewRemoteManagerClientFactory(trans, protocolFactory)
  if err = trans.Open(); err != nil {
    fmt.Fprint(os.Stderr, "Error opening socket to ", host, ":", port, " ", err.String())
    os.Exit(1)
  }
  
  switch cmd {
  case "WriteConfig":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "WriteConfig requires 1 args\n")
      flag.Usage()
    }
    tmp0, err1868 := (strconv.Atoi(flag.Arg(1)))
    if err1868 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.WriteConfig(value0))
    fmt.Print("\n")
    break
  case "GetControllerNodeId":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetControllerNodeId requires 1 args\n")
      flag.Usage()
    }
    tmp0, err1869 := (strconv.Atoi(flag.Arg(1)))
    if err1869 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetControllerNodeId(value0))
    fmt.Print("\n")
    break
  case "IsPrimaryController":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "IsPrimaryController requires 1 args\n")
      flag.Usage()
    }
    tmp0, err1870 := (strconv.Atoi(flag.Arg(1)))
    if err1870 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.IsPrimaryController(value0))
    fmt.Print("\n")
    break
  case "IsStaticUpdateController":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "IsStaticUpdateController requires 1 args\n")
      flag.Usage()
    }
    tmp0, err1871 := (strconv.Atoi(flag.Arg(1)))
    if err1871 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.IsStaticUpdateController(value0))
    fmt.Print("\n")
    break
  case "IsBridgeController":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "IsBridgeController requires 1 args\n")
      flag.Usage()
    }
    tmp0, err1872 := (strconv.Atoi(flag.Arg(1)))
    if err1872 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.IsBridgeController(value0))
    fmt.Print("\n")
    break
  case "GetLibraryVersion":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetLibraryVersion requires 1 args\n")
      flag.Usage()
    }
    tmp0, err1873 := (strconv.Atoi(flag.Arg(1)))
    if err1873 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetLibraryVersion(value0))
    fmt.Print("\n")
    break
  case "GetLibraryTypeName":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetLibraryTypeName requires 1 args\n")
      flag.Usage()
    }
    tmp0, err1874 := (strconv.Atoi(flag.Arg(1)))
    if err1874 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetLibraryTypeName(value0))
    fmt.Print("\n")
    break
  case "GetSendQueueCount":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetSendQueueCount requires 1 args\n")
      flag.Usage()
    }
    tmp0, err1875 := (strconv.Atoi(flag.Arg(1)))
    if err1875 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetSendQueueCount(value0))
    fmt.Print("\n")
    break
  case "GetPollInterval":
    if flag.NArg() - 1 != 0 {
      fmt.Fprint(os.Stderr, "GetPollInterval requires 0 args\n")
      flag.Usage()
    }
    fmt.Print(client.GetPollInterval())
    fmt.Print("\n")
    break
  case "SetPollInterval":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "SetPollInterval requires 1 args\n")
      flag.Usage()
    }
    tmp0, err1876 := (strconv.Atoi(flag.Arg(1)))
    if err1876 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.SetPollInterval(value0))
    fmt.Print("\n")
    break
  case "EnablePoll":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "EnablePoll requires 1 args\n")
      flag.Usage()
    }
    arg1877 := flag.Arg(1)
    mbTrans1878 := thrift.NewTMemoryBufferLen(len(arg1877))
    defer mbTrans1878.Close()
    _, err1879 := mbTrans1878.WriteString(arg1877)
    if err1879 != nil {
      Usage()
      return
    }
    factory1880 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1881 := factory1880.GetProtocol(mbTrans1878)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err1882 := argvalue0.Read(jsProt1881)
    if err1882 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.EnablePoll(value0))
    fmt.Print("\n")
    break
  case "DisablePoll":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "DisablePoll requires 1 args\n")
      flag.Usage()
    }
    arg1883 := flag.Arg(1)
    mbTrans1884 := thrift.NewTMemoryBufferLen(len(arg1883))
    defer mbTrans1884.Close()
    _, err1885 := mbTrans1884.WriteString(arg1883)
    if err1885 != nil {
      Usage()
      return
    }
    factory1886 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1887 := factory1886.GetProtocol(mbTrans1884)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err1888 := argvalue0.Read(jsProt1887)
    if err1888 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DisablePoll(value0))
    fmt.Print("\n")
    break
  case "isPolled":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "IsPolled requires 1 args\n")
      flag.Usage()
    }
    arg1889 := flag.Arg(1)
    mbTrans1890 := thrift.NewTMemoryBufferLen(len(arg1889))
    defer mbTrans1890.Close()
    _, err1891 := mbTrans1890.WriteString(arg1889)
    if err1891 != nil {
      Usage()
      return
    }
    factory1892 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1893 := factory1892.GetProtocol(mbTrans1890)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err1894 := argvalue0.Read(jsProt1893)
    if err1894 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.IsPolled(value0))
    fmt.Print("\n")
    break
  case "RefreshNodeInfo":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "RefreshNodeInfo requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1895 := (strconv.Atoi(flag.Arg(1)))
    if err1895 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1896 := (strconv.Atoi(flag.Arg(2)))
    if err1896 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.RefreshNodeInfo(value0, value1))
    fmt.Print("\n")
    break
  case "RequestNodeState":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "RequestNodeState requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1897 := (strconv.Atoi(flag.Arg(1)))
    if err1897 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1898 := (strconv.Atoi(flag.Arg(2)))
    if err1898 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.RequestNodeState(value0, value1))
    fmt.Print("\n")
    break
  case "RequestNodeDynamic":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "RequestNodeDynamic requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1899 := (strconv.Atoi(flag.Arg(1)))
    if err1899 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1900 := (strconv.Atoi(flag.Arg(2)))
    if err1900 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.RequestNodeDynamic(value0, value1))
    fmt.Print("\n")
    break
  case "IsNodeListeningDevice":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "IsNodeListeningDevice requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1901 := (strconv.Atoi(flag.Arg(1)))
    if err1901 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1902 := (strconv.Atoi(flag.Arg(2)))
    if err1902 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.IsNodeListeningDevice(value0, value1))
    fmt.Print("\n")
    break
  case "IsNodeFrequentListeningDevice":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "IsNodeFrequentListeningDevice requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1903 := (strconv.Atoi(flag.Arg(1)))
    if err1903 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1904 := (strconv.Atoi(flag.Arg(2)))
    if err1904 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.IsNodeFrequentListeningDevice(value0, value1))
    fmt.Print("\n")
    break
  case "IsNodeBeamingDevice":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "IsNodeBeamingDevice requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1905 := (strconv.Atoi(flag.Arg(1)))
    if err1905 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1906 := (strconv.Atoi(flag.Arg(2)))
    if err1906 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.IsNodeBeamingDevice(value0, value1))
    fmt.Print("\n")
    break
  case "IsNodeRoutingDevice":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "IsNodeRoutingDevice requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1907 := (strconv.Atoi(flag.Arg(1)))
    if err1907 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1908 := (strconv.Atoi(flag.Arg(2)))
    if err1908 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.IsNodeRoutingDevice(value0, value1))
    fmt.Print("\n")
    break
  case "IsNodeSecurityDevice":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "IsNodeSecurityDevice requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1909 := (strconv.Atoi(flag.Arg(1)))
    if err1909 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1910 := (strconv.Atoi(flag.Arg(2)))
    if err1910 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.IsNodeSecurityDevice(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeMaxBaudRate":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeMaxBaudRate requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1911 := (strconv.Atoi(flag.Arg(1)))
    if err1911 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1912 := (strconv.Atoi(flag.Arg(2)))
    if err1912 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeMaxBaudRate(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeVersion":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeVersion requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1913 := (strconv.Atoi(flag.Arg(1)))
    if err1913 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1914 := (strconv.Atoi(flag.Arg(2)))
    if err1914 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeVersion(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeBasic":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeBasic requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1915 := (strconv.Atoi(flag.Arg(1)))
    if err1915 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1916 := (strconv.Atoi(flag.Arg(2)))
    if err1916 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeBasic(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeGeneric":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeGeneric requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1917 := (strconv.Atoi(flag.Arg(1)))
    if err1917 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1918 := (strconv.Atoi(flag.Arg(2)))
    if err1918 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeGeneric(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeSpecific":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeSpecific requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1919 := (strconv.Atoi(flag.Arg(1)))
    if err1919 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1920 := (strconv.Atoi(flag.Arg(2)))
    if err1920 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeSpecific(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeType":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeType requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1921 := (strconv.Atoi(flag.Arg(1)))
    if err1921 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1922 := (strconv.Atoi(flag.Arg(2)))
    if err1922 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeType(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeNeighbors":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeNeighbors requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1923 := (strconv.Atoi(flag.Arg(1)))
    if err1923 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1924 := (strconv.Atoi(flag.Arg(2)))
    if err1924 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeNeighbors(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeManufacturerName":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeManufacturerName requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1925 := (strconv.Atoi(flag.Arg(1)))
    if err1925 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1926 := (strconv.Atoi(flag.Arg(2)))
    if err1926 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeManufacturerName(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeProductName":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeProductName requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1927 := (strconv.Atoi(flag.Arg(1)))
    if err1927 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1928 := (strconv.Atoi(flag.Arg(2)))
    if err1928 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeProductName(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeName":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeName requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1929 := (strconv.Atoi(flag.Arg(1)))
    if err1929 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1930 := (strconv.Atoi(flag.Arg(2)))
    if err1930 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeName(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeLocation":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeLocation requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1931 := (strconv.Atoi(flag.Arg(1)))
    if err1931 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1932 := (strconv.Atoi(flag.Arg(2)))
    if err1932 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeLocation(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeManufacturerId":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeManufacturerId requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1933 := (strconv.Atoi(flag.Arg(1)))
    if err1933 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1934 := (strconv.Atoi(flag.Arg(2)))
    if err1934 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeManufacturerId(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeProductType":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeProductType requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1935 := (strconv.Atoi(flag.Arg(1)))
    if err1935 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1936 := (strconv.Atoi(flag.Arg(2)))
    if err1936 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeProductType(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeProductId":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeProductId requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1937 := (strconv.Atoi(flag.Arg(1)))
    if err1937 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1938 := (strconv.Atoi(flag.Arg(2)))
    if err1938 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeProductId(value0, value1))
    fmt.Print("\n")
    break
  case "SetNodeManufacturerName":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetNodeManufacturerName requires 3 args\n")
      flag.Usage()
    }
    tmp0, err1939 := (strconv.Atoi(flag.Arg(1)))
    if err1939 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1940 := (strconv.Atoi(flag.Arg(2)))
    if err1940 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.SetNodeManufacturerName(value0, value1, value2))
    fmt.Print("\n")
    break
  case "SetNodeProductName":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetNodeProductName requires 3 args\n")
      flag.Usage()
    }
    tmp0, err1942 := (strconv.Atoi(flag.Arg(1)))
    if err1942 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1943 := (strconv.Atoi(flag.Arg(2)))
    if err1943 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.SetNodeProductName(value0, value1, value2))
    fmt.Print("\n")
    break
  case "SetNodeName":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetNodeName requires 3 args\n")
      flag.Usage()
    }
    tmp0, err1945 := (strconv.Atoi(flag.Arg(1)))
    if err1945 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1946 := (strconv.Atoi(flag.Arg(2)))
    if err1946 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.SetNodeName(value0, value1, value2))
    fmt.Print("\n")
    break
  case "SetNodeLocation":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetNodeLocation requires 3 args\n")
      flag.Usage()
    }
    tmp0, err1948 := (strconv.Atoi(flag.Arg(1)))
    if err1948 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1949 := (strconv.Atoi(flag.Arg(2)))
    if err1949 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.SetNodeLocation(value0, value1, value2))
    fmt.Print("\n")
    break
  case "SetNodeOn":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetNodeOn requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1951 := (strconv.Atoi(flag.Arg(1)))
    if err1951 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1952 := (strconv.Atoi(flag.Arg(2)))
    if err1952 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.SetNodeOn(value0, value1))
    fmt.Print("\n")
    break
  case "SetNodeOff":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetNodeOff requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1953 := (strconv.Atoi(flag.Arg(1)))
    if err1953 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1954 := (strconv.Atoi(flag.Arg(2)))
    if err1954 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.SetNodeOff(value0, value1))
    fmt.Print("\n")
    break
  case "SetNodeLevel":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetNodeLevel requires 3 args\n")
      flag.Usage()
    }
    tmp0, err1955 := (strconv.Atoi(flag.Arg(1)))
    if err1955 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1956 := (strconv.Atoi(flag.Arg(2)))
    if err1956 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    tmp2, err1957 := (strconv.Atoi(flag.Arg(3)))
    if err1957 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    fmt.Print(client.SetNodeLevel(value0, value1, value2))
    fmt.Print("\n")
    break
  case "IsNodeInfoReceived":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "IsNodeInfoReceived requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1958 := (strconv.Atoi(flag.Arg(1)))
    if err1958 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1959 := (strconv.Atoi(flag.Arg(2)))
    if err1959 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.IsNodeInfoReceived(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeClassInformation":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "GetNodeClassInformation requires 3 args\n")
      flag.Usage()
    }
    tmp0, err1960 := (strconv.Atoi(flag.Arg(1)))
    if err1960 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1961 := (strconv.Atoi(flag.Arg(2)))
    if err1961 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    tmp2, err1962 := (strconv.Atoi(flag.Arg(3)))
    if err1962 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    fmt.Print(client.GetNodeClassInformation(value0, value1, value2))
    fmt.Print("\n")
    break
  case "GetValueLabel":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueLabel requires 1 args\n")
      flag.Usage()
    }
    arg1963 := flag.Arg(1)
    mbTrans1964 := thrift.NewTMemoryBufferLen(len(arg1963))
    defer mbTrans1964.Close()
    _, err1965 := mbTrans1964.WriteString(arg1963)
    if err1965 != nil {
      Usage()
      return
    }
    factory1966 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1967 := factory1966.GetProtocol(mbTrans1964)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err1968 := argvalue0.Read(jsProt1967)
    if err1968 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueLabel(value0))
    fmt.Print("\n")
    break
  case "SetValueLabel":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetValueLabel requires 2 args\n")
      flag.Usage()
    }
    arg1969 := flag.Arg(1)
    mbTrans1970 := thrift.NewTMemoryBufferLen(len(arg1969))
    defer mbTrans1970.Close()
    _, err1971 := mbTrans1970.WriteString(arg1969)
    if err1971 != nil {
      Usage()
      return
    }
    factory1972 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1973 := factory1972.GetProtocol(mbTrans1970)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err1974 := argvalue0.Read(jsProt1973)
    if err1974 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.SetValueLabel(value0, value1))
    fmt.Print("\n")
    break
  case "GetValueUnits":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueUnits requires 1 args\n")
      flag.Usage()
    }
    arg1976 := flag.Arg(1)
    mbTrans1977 := thrift.NewTMemoryBufferLen(len(arg1976))
    defer mbTrans1977.Close()
    _, err1978 := mbTrans1977.WriteString(arg1976)
    if err1978 != nil {
      Usage()
      return
    }
    factory1979 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1980 := factory1979.GetProtocol(mbTrans1977)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err1981 := argvalue0.Read(jsProt1980)
    if err1981 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueUnits(value0))
    fmt.Print("\n")
    break
  case "SetValueUnits":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetValueUnits requires 2 args\n")
      flag.Usage()
    }
    arg1982 := flag.Arg(1)
    mbTrans1983 := thrift.NewTMemoryBufferLen(len(arg1982))
    defer mbTrans1983.Close()
    _, err1984 := mbTrans1983.WriteString(arg1982)
    if err1984 != nil {
      Usage()
      return
    }
    factory1985 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1986 := factory1985.GetProtocol(mbTrans1983)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err1987 := argvalue0.Read(jsProt1986)
    if err1987 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.SetValueUnits(value0, value1))
    fmt.Print("\n")
    break
  case "GetValueHelp":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueHelp requires 1 args\n")
      flag.Usage()
    }
    arg1989 := flag.Arg(1)
    mbTrans1990 := thrift.NewTMemoryBufferLen(len(arg1989))
    defer mbTrans1990.Close()
    _, err1991 := mbTrans1990.WriteString(arg1989)
    if err1991 != nil {
      Usage()
      return
    }
    factory1992 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1993 := factory1992.GetProtocol(mbTrans1990)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err1994 := argvalue0.Read(jsProt1993)
    if err1994 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueHelp(value0))
    fmt.Print("\n")
    break
  case "SetValueHelp":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetValueHelp requires 2 args\n")
      flag.Usage()
    }
    arg1995 := flag.Arg(1)
    mbTrans1996 := thrift.NewTMemoryBufferLen(len(arg1995))
    defer mbTrans1996.Close()
    _, err1997 := mbTrans1996.WriteString(arg1995)
    if err1997 != nil {
      Usage()
      return
    }
    factory1998 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1999 := factory1998.GetProtocol(mbTrans1996)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2000 := argvalue0.Read(jsProt1999)
    if err2000 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.SetValueHelp(value0, value1))
    fmt.Print("\n")
    break
  case "GetValueMin":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueMin requires 1 args\n")
      flag.Usage()
    }
    arg2002 := flag.Arg(1)
    mbTrans2003 := thrift.NewTMemoryBufferLen(len(arg2002))
    defer mbTrans2003.Close()
    _, err2004 := mbTrans2003.WriteString(arg2002)
    if err2004 != nil {
      Usage()
      return
    }
    factory2005 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2006 := factory2005.GetProtocol(mbTrans2003)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2007 := argvalue0.Read(jsProt2006)
    if err2007 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueMin(value0))
    fmt.Print("\n")
    break
  case "GetValueMax":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueMax requires 1 args\n")
      flag.Usage()
    }
    arg2008 := flag.Arg(1)
    mbTrans2009 := thrift.NewTMemoryBufferLen(len(arg2008))
    defer mbTrans2009.Close()
    _, err2010 := mbTrans2009.WriteString(arg2008)
    if err2010 != nil {
      Usage()
      return
    }
    factory2011 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2012 := factory2011.GetProtocol(mbTrans2009)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2013 := argvalue0.Read(jsProt2012)
    if err2013 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueMax(value0))
    fmt.Print("\n")
    break
  case "IsValueReadOnly":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "IsValueReadOnly requires 1 args\n")
      flag.Usage()
    }
    arg2014 := flag.Arg(1)
    mbTrans2015 := thrift.NewTMemoryBufferLen(len(arg2014))
    defer mbTrans2015.Close()
    _, err2016 := mbTrans2015.WriteString(arg2014)
    if err2016 != nil {
      Usage()
      return
    }
    factory2017 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2018 := factory2017.GetProtocol(mbTrans2015)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2019 := argvalue0.Read(jsProt2018)
    if err2019 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.IsValueReadOnly(value0))
    fmt.Print("\n")
    break
  case "IsValueWriteOnly":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "IsValueWriteOnly requires 1 args\n")
      flag.Usage()
    }
    arg2020 := flag.Arg(1)
    mbTrans2021 := thrift.NewTMemoryBufferLen(len(arg2020))
    defer mbTrans2021.Close()
    _, err2022 := mbTrans2021.WriteString(arg2020)
    if err2022 != nil {
      Usage()
      return
    }
    factory2023 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2024 := factory2023.GetProtocol(mbTrans2021)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2025 := argvalue0.Read(jsProt2024)
    if err2025 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.IsValueWriteOnly(value0))
    fmt.Print("\n")
    break
  case "IsValueSet":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "IsValueSet requires 1 args\n")
      flag.Usage()
    }
    arg2026 := flag.Arg(1)
    mbTrans2027 := thrift.NewTMemoryBufferLen(len(arg2026))
    defer mbTrans2027.Close()
    _, err2028 := mbTrans2027.WriteString(arg2026)
    if err2028 != nil {
      Usage()
      return
    }
    factory2029 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2030 := factory2029.GetProtocol(mbTrans2027)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2031 := argvalue0.Read(jsProt2030)
    if err2031 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.IsValueSet(value0))
    fmt.Print("\n")
    break
  case "GetValueAsBool":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueAsBool requires 1 args\n")
      flag.Usage()
    }
    arg2032 := flag.Arg(1)
    mbTrans2033 := thrift.NewTMemoryBufferLen(len(arg2032))
    defer mbTrans2033.Close()
    _, err2034 := mbTrans2033.WriteString(arg2032)
    if err2034 != nil {
      Usage()
      return
    }
    factory2035 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2036 := factory2035.GetProtocol(mbTrans2033)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2037 := argvalue0.Read(jsProt2036)
    if err2037 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueAsBool(value0))
    fmt.Print("\n")
    break
  case "GetValueAsByte":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueAsByte requires 1 args\n")
      flag.Usage()
    }
    arg2038 := flag.Arg(1)
    mbTrans2039 := thrift.NewTMemoryBufferLen(len(arg2038))
    defer mbTrans2039.Close()
    _, err2040 := mbTrans2039.WriteString(arg2038)
    if err2040 != nil {
      Usage()
      return
    }
    factory2041 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2042 := factory2041.GetProtocol(mbTrans2039)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2043 := argvalue0.Read(jsProt2042)
    if err2043 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueAsByte(value0))
    fmt.Print("\n")
    break
  case "GetValueAsFloat":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueAsFloat requires 1 args\n")
      flag.Usage()
    }
    arg2044 := flag.Arg(1)
    mbTrans2045 := thrift.NewTMemoryBufferLen(len(arg2044))
    defer mbTrans2045.Close()
    _, err2046 := mbTrans2045.WriteString(arg2044)
    if err2046 != nil {
      Usage()
      return
    }
    factory2047 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2048 := factory2047.GetProtocol(mbTrans2045)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2049 := argvalue0.Read(jsProt2048)
    if err2049 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueAsFloat(value0))
    fmt.Print("\n")
    break
  case "GetValueAsInt":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueAsInt requires 1 args\n")
      flag.Usage()
    }
    arg2050 := flag.Arg(1)
    mbTrans2051 := thrift.NewTMemoryBufferLen(len(arg2050))
    defer mbTrans2051.Close()
    _, err2052 := mbTrans2051.WriteString(arg2050)
    if err2052 != nil {
      Usage()
      return
    }
    factory2053 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2054 := factory2053.GetProtocol(mbTrans2051)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2055 := argvalue0.Read(jsProt2054)
    if err2055 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueAsInt(value0))
    fmt.Print("\n")
    break
  case "GetValueAsShort":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueAsShort requires 1 args\n")
      flag.Usage()
    }
    arg2056 := flag.Arg(1)
    mbTrans2057 := thrift.NewTMemoryBufferLen(len(arg2056))
    defer mbTrans2057.Close()
    _, err2058 := mbTrans2057.WriteString(arg2056)
    if err2058 != nil {
      Usage()
      return
    }
    factory2059 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2060 := factory2059.GetProtocol(mbTrans2057)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2061 := argvalue0.Read(jsProt2060)
    if err2061 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueAsShort(value0))
    fmt.Print("\n")
    break
  case "GetValueAsString":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueAsString requires 1 args\n")
      flag.Usage()
    }
    arg2062 := flag.Arg(1)
    mbTrans2063 := thrift.NewTMemoryBufferLen(len(arg2062))
    defer mbTrans2063.Close()
    _, err2064 := mbTrans2063.WriteString(arg2062)
    if err2064 != nil {
      Usage()
      return
    }
    factory2065 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2066 := factory2065.GetProtocol(mbTrans2063)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2067 := argvalue0.Read(jsProt2066)
    if err2067 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueAsString(value0))
    fmt.Print("\n")
    break
  case "GetValueListSelection_String":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueListSelectionString requires 1 args\n")
      flag.Usage()
    }
    arg2068 := flag.Arg(1)
    mbTrans2069 := thrift.NewTMemoryBufferLen(len(arg2068))
    defer mbTrans2069.Close()
    _, err2070 := mbTrans2069.WriteString(arg2068)
    if err2070 != nil {
      Usage()
      return
    }
    factory2071 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2072 := factory2071.GetProtocol(mbTrans2069)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2073 := argvalue0.Read(jsProt2072)
    if err2073 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueListSelectionString(value0))
    fmt.Print("\n")
    break
  case "GetValueListSelection_Int32":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueListSelectionInt32 requires 1 args\n")
      flag.Usage()
    }
    arg2074 := flag.Arg(1)
    mbTrans2075 := thrift.NewTMemoryBufferLen(len(arg2074))
    defer mbTrans2075.Close()
    _, err2076 := mbTrans2075.WriteString(arg2074)
    if err2076 != nil {
      Usage()
      return
    }
    factory2077 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2078 := factory2077.GetProtocol(mbTrans2075)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2079 := argvalue0.Read(jsProt2078)
    if err2079 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueListSelectionInt32(value0))
    fmt.Print("\n")
    break
  case "GetValueListItems":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueListItems requires 1 args\n")
      flag.Usage()
    }
    arg2080 := flag.Arg(1)
    mbTrans2081 := thrift.NewTMemoryBufferLen(len(arg2080))
    defer mbTrans2081.Close()
    _, err2082 := mbTrans2081.WriteString(arg2080)
    if err2082 != nil {
      Usage()
      return
    }
    factory2083 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2084 := factory2083.GetProtocol(mbTrans2081)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2085 := argvalue0.Read(jsProt2084)
    if err2085 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueListItems(value0))
    fmt.Print("\n")
    break
  case "GetValueFloatPrecision":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueFloatPrecision requires 1 args\n")
      flag.Usage()
    }
    arg2086 := flag.Arg(1)
    mbTrans2087 := thrift.NewTMemoryBufferLen(len(arg2086))
    defer mbTrans2087.Close()
    _, err2088 := mbTrans2087.WriteString(arg2086)
    if err2088 != nil {
      Usage()
      return
    }
    factory2089 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2090 := factory2089.GetProtocol(mbTrans2087)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2091 := argvalue0.Read(jsProt2090)
    if err2091 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueFloatPrecision(value0))
    fmt.Print("\n")
    break
  case "SetValue_Bool":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetValueBool requires 2 args\n")
      flag.Usage()
    }
    arg2092 := flag.Arg(1)
    mbTrans2093 := thrift.NewTMemoryBufferLen(len(arg2092))
    defer mbTrans2093.Close()
    _, err2094 := mbTrans2093.WriteString(arg2092)
    if err2094 != nil {
      Usage()
      return
    }
    factory2095 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2096 := factory2095.GetProtocol(mbTrans2093)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2097 := argvalue0.Read(jsProt2096)
    if err2097 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2) == "true"
    value1 := argvalue1
    fmt.Print(client.SetValueBool(value0, value1))
    fmt.Print("\n")
    break
  case "SetValue_UInt8":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetValueUInt8 requires 2 args\n")
      flag.Usage()
    }
    arg2099 := flag.Arg(1)
    mbTrans2100 := thrift.NewTMemoryBufferLen(len(arg2099))
    defer mbTrans2100.Close()
    _, err2101 := mbTrans2100.WriteString(arg2099)
    if err2101 != nil {
      Usage()
      return
    }
    factory2102 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2103 := factory2102.GetProtocol(mbTrans2100)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2104 := argvalue0.Read(jsProt2103)
    if err2104 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err2105 := (strconv.Atoi(flag.Arg(2)))
    if err2105 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.SetValueUInt8(value0, value1))
    fmt.Print("\n")
    break
  case "SetValue_Float":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetValueFloat requires 2 args\n")
      flag.Usage()
    }
    arg2106 := flag.Arg(1)
    mbTrans2107 := thrift.NewTMemoryBufferLen(len(arg2106))
    defer mbTrans2107.Close()
    _, err2108 := mbTrans2107.WriteString(arg2106)
    if err2108 != nil {
      Usage()
      return
    }
    factory2109 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2110 := factory2109.GetProtocol(mbTrans2107)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2111 := argvalue0.Read(jsProt2110)
    if err2111 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1, err2112 := (strconv.Atof64(flag.Arg(2)))
    if err2112 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SetValueFloat(value0, value1))
    fmt.Print("\n")
    break
  case "SetValue_Int32":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetValueInt32 requires 2 args\n")
      flag.Usage()
    }
    arg2113 := flag.Arg(1)
    mbTrans2114 := thrift.NewTMemoryBufferLen(len(arg2113))
    defer mbTrans2114.Close()
    _, err2115 := mbTrans2114.WriteString(arg2113)
    if err2115 != nil {
      Usage()
      return
    }
    factory2116 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2117 := factory2116.GetProtocol(mbTrans2114)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2118 := argvalue0.Read(jsProt2117)
    if err2118 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err2119 := (strconv.Atoi(flag.Arg(2)))
    if err2119 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    fmt.Print(client.SetValueInt32(value0, value1))
    fmt.Print("\n")
    break
  case "SetValue_Int16":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetValueInt16 requires 2 args\n")
      flag.Usage()
    }
    arg2120 := flag.Arg(1)
    mbTrans2121 := thrift.NewTMemoryBufferLen(len(arg2120))
    defer mbTrans2121.Close()
    _, err2122 := mbTrans2121.WriteString(arg2120)
    if err2122 != nil {
      Usage()
      return
    }
    factory2123 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2124 := factory2123.GetProtocol(mbTrans2121)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2125 := argvalue0.Read(jsProt2124)
    if err2125 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err2126 := (strconv.Atoi(flag.Arg(2)))
    if err2126 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.SetValueInt16(value0, value1))
    fmt.Print("\n")
    break
  case "SetValue_String":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetValueString requires 2 args\n")
      flag.Usage()
    }
    arg2127 := flag.Arg(1)
    mbTrans2128 := thrift.NewTMemoryBufferLen(len(arg2127))
    defer mbTrans2128.Close()
    _, err2129 := mbTrans2128.WriteString(arg2127)
    if err2129 != nil {
      Usage()
      return
    }
    factory2130 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2131 := factory2130.GetProtocol(mbTrans2128)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2132 := argvalue0.Read(jsProt2131)
    if err2132 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.SetValueString(value0, value1))
    fmt.Print("\n")
    break
  case "SetValueListSelection":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetValueListSelection requires 2 args\n")
      flag.Usage()
    }
    arg2134 := flag.Arg(1)
    mbTrans2135 := thrift.NewTMemoryBufferLen(len(arg2134))
    defer mbTrans2135.Close()
    _, err2136 := mbTrans2135.WriteString(arg2134)
    if err2136 != nil {
      Usage()
      return
    }
    factory2137 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2138 := factory2137.GetProtocol(mbTrans2135)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2139 := argvalue0.Read(jsProt2138)
    if err2139 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.SetValueListSelection(value0, value1))
    fmt.Print("\n")
    break
  case "RefreshValue":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "RefreshValue requires 1 args\n")
      flag.Usage()
    }
    arg2141 := flag.Arg(1)
    mbTrans2142 := thrift.NewTMemoryBufferLen(len(arg2141))
    defer mbTrans2142.Close()
    _, err2143 := mbTrans2142.WriteString(arg2141)
    if err2143 != nil {
      Usage()
      return
    }
    factory2144 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2145 := factory2144.GetProtocol(mbTrans2142)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2146 := argvalue0.Read(jsProt2145)
    if err2146 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RefreshValue(value0))
    fmt.Print("\n")
    break
  case "PressButton":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "PressButton requires 1 args\n")
      flag.Usage()
    }
    arg2147 := flag.Arg(1)
    mbTrans2148 := thrift.NewTMemoryBufferLen(len(arg2147))
    defer mbTrans2148.Close()
    _, err2149 := mbTrans2148.WriteString(arg2147)
    if err2149 != nil {
      Usage()
      return
    }
    factory2150 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2151 := factory2150.GetProtocol(mbTrans2148)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2152 := argvalue0.Read(jsProt2151)
    if err2152 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.PressButton(value0))
    fmt.Print("\n")
    break
  case "ReleaseButton":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "ReleaseButton requires 1 args\n")
      flag.Usage()
    }
    arg2153 := flag.Arg(1)
    mbTrans2154 := thrift.NewTMemoryBufferLen(len(arg2153))
    defer mbTrans2154.Close()
    _, err2155 := mbTrans2154.WriteString(arg2153)
    if err2155 != nil {
      Usage()
      return
    }
    factory2156 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2157 := factory2156.GetProtocol(mbTrans2154)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2158 := argvalue0.Read(jsProt2157)
    if err2158 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ReleaseButton(value0))
    fmt.Print("\n")
    break
  case "GetNumSwitchPoints":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetNumSwitchPoints requires 1 args\n")
      flag.Usage()
    }
    arg2159 := flag.Arg(1)
    mbTrans2160 := thrift.NewTMemoryBufferLen(len(arg2159))
    defer mbTrans2160.Close()
    _, err2161 := mbTrans2160.WriteString(arg2159)
    if err2161 != nil {
      Usage()
      return
    }
    factory2162 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2163 := factory2162.GetProtocol(mbTrans2160)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2164 := argvalue0.Read(jsProt2163)
    if err2164 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetNumSwitchPoints(value0))
    fmt.Print("\n")
    break
  case "SetSwitchPoint":
    if flag.NArg() - 1 != 4 {
      fmt.Fprint(os.Stderr, "SetSwitchPoint requires 4 args\n")
      flag.Usage()
    }
    arg2165 := flag.Arg(1)
    mbTrans2166 := thrift.NewTMemoryBufferLen(len(arg2165))
    defer mbTrans2166.Close()
    _, err2167 := mbTrans2166.WriteString(arg2165)
    if err2167 != nil {
      Usage()
      return
    }
    factory2168 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2169 := factory2168.GetProtocol(mbTrans2166)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2170 := argvalue0.Read(jsProt2169)
    if err2170 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err2171 := (strconv.Atoi(flag.Arg(2)))
    if err2171 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    tmp2, err2172 := (strconv.Atoi(flag.Arg(3)))
    if err2172 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    tmp3, err2173 := (strconv.Atoi(flag.Arg(4)))
    if err2173 != nil {
      Usage()
      return
    }
    argvalue3 := byte(tmp3)
    value3 := argvalue3
    fmt.Print(client.SetSwitchPoint(value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "RemoveSwitchPoint":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "RemoveSwitchPoint requires 3 args\n")
      flag.Usage()
    }
    arg2174 := flag.Arg(1)
    mbTrans2175 := thrift.NewTMemoryBufferLen(len(arg2174))
    defer mbTrans2175.Close()
    _, err2176 := mbTrans2175.WriteString(arg2174)
    if err2176 != nil {
      Usage()
      return
    }
    factory2177 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2178 := factory2177.GetProtocol(mbTrans2175)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2179 := argvalue0.Read(jsProt2178)
    if err2179 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err2180 := (strconv.Atoi(flag.Arg(2)))
    if err2180 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    tmp2, err2181 := (strconv.Atoi(flag.Arg(3)))
    if err2181 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    fmt.Print(client.RemoveSwitchPoint(value0, value1, value2))
    fmt.Print("\n")
    break
  case "ClearSwitchPoints":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "ClearSwitchPoints requires 1 args\n")
      flag.Usage()
    }
    arg2182 := flag.Arg(1)
    mbTrans2183 := thrift.NewTMemoryBufferLen(len(arg2182))
    defer mbTrans2183.Close()
    _, err2184 := mbTrans2183.WriteString(arg2182)
    if err2184 != nil {
      Usage()
      return
    }
    factory2185 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2186 := factory2185.GetProtocol(mbTrans2183)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2187 := argvalue0.Read(jsProt2186)
    if err2187 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ClearSwitchPoints(value0))
    fmt.Print("\n")
    break
  case "GetSwitchPoint":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetSwitchPoint requires 2 args\n")
      flag.Usage()
    }
    arg2188 := flag.Arg(1)
    mbTrans2189 := thrift.NewTMemoryBufferLen(len(arg2188))
    defer mbTrans2189.Close()
    _, err2190 := mbTrans2189.WriteString(arg2188)
    if err2190 != nil {
      Usage()
      return
    }
    factory2191 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2192 := factory2191.GetProtocol(mbTrans2189)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2193 := argvalue0.Read(jsProt2192)
    if err2193 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err2194 := (strconv.Atoi(flag.Arg(2)))
    if err2194 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetSwitchPoint(value0, value1))
    fmt.Print("\n")
    break
  case "SwitchAllOn":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "SwitchAllOn requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2195 := (strconv.Atoi(flag.Arg(1)))
    if err2195 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.SwitchAllOn(value0))
    fmt.Print("\n")
    break
  case "SwitchAllOff":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "SwitchAllOff requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2196 := (strconv.Atoi(flag.Arg(1)))
    if err2196 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.SwitchAllOff(value0))
    fmt.Print("\n")
    break
  case "SetConfigParam":
    if flag.NArg() - 1 != 5 {
      fmt.Fprint(os.Stderr, "SetConfigParam requires 5 args\n")
      flag.Usage()
    }
    tmp0, err2197 := (strconv.Atoi(flag.Arg(1)))
    if err2197 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2198 := (strconv.Atoi(flag.Arg(2)))
    if err2198 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    tmp2, err2199 := (strconv.Atoi(flag.Arg(3)))
    if err2199 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    tmp3, err2200 := (strconv.Atoi(flag.Arg(4)))
    if err2200 != nil {
      Usage()
      return
    }
    argvalue3 := int32(tmp3)
    value3 := argvalue3
    tmp4, err2201 := (strconv.Atoi(flag.Arg(5)))
    if err2201 != nil {
      Usage()
      return
    }
    argvalue4 := byte(tmp4)
    value4 := argvalue4
    fmt.Print(client.SetConfigParam(value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "RequestConfigParam":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "RequestConfigParam requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2202 := (strconv.Atoi(flag.Arg(1)))
    if err2202 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2203 := (strconv.Atoi(flag.Arg(2)))
    if err2203 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    tmp2, err2204 := (strconv.Atoi(flag.Arg(3)))
    if err2204 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    fmt.Print(client.RequestConfigParam(value0, value1, value2))
    fmt.Print("\n")
    break
  case "RequestAllConfigParams":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "RequestAllConfigParams requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2205 := (strconv.Atoi(flag.Arg(1)))
    if err2205 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2206 := (strconv.Atoi(flag.Arg(2)))
    if err2206 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.RequestAllConfigParams(value0, value1))
    fmt.Print("\n")
    break
  case "GetNumGroups":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNumGroups requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2207 := (strconv.Atoi(flag.Arg(1)))
    if err2207 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2208 := (strconv.Atoi(flag.Arg(2)))
    if err2208 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNumGroups(value0, value1))
    fmt.Print("\n")
    break
  case "GetAssociations":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "GetAssociations requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2209 := (strconv.Atoi(flag.Arg(1)))
    if err2209 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2210 := (strconv.Atoi(flag.Arg(2)))
    if err2210 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    tmp2, err2211 := (strconv.Atoi(flag.Arg(3)))
    if err2211 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    fmt.Print(client.GetAssociations(value0, value1, value2))
    fmt.Print("\n")
    break
  case "GetMaxAssociations":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "GetMaxAssociations requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2212 := (strconv.Atoi(flag.Arg(1)))
    if err2212 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2213 := (strconv.Atoi(flag.Arg(2)))
    if err2213 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    tmp2, err2214 := (strconv.Atoi(flag.Arg(3)))
    if err2214 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    fmt.Print(client.GetMaxAssociations(value0, value1, value2))
    fmt.Print("\n")
    break
  case "GetGroupLabel":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "GetGroupLabel requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2215 := (strconv.Atoi(flag.Arg(1)))
    if err2215 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2216 := (strconv.Atoi(flag.Arg(2)))
    if err2216 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    tmp2, err2217 := (strconv.Atoi(flag.Arg(3)))
    if err2217 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    fmt.Print(client.GetGroupLabel(value0, value1, value2))
    fmt.Print("\n")
    break
  case "AddAssociation":
    if flag.NArg() - 1 != 4 {
      fmt.Fprint(os.Stderr, "AddAssociation requires 4 args\n")
      flag.Usage()
    }
    tmp0, err2218 := (strconv.Atoi(flag.Arg(1)))
    if err2218 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2219 := (strconv.Atoi(flag.Arg(2)))
    if err2219 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    tmp2, err2220 := (strconv.Atoi(flag.Arg(3)))
    if err2220 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    tmp3, err2221 := (strconv.Atoi(flag.Arg(4)))
    if err2221 != nil {
      Usage()
      return
    }
    argvalue3 := byte(tmp3)
    value3 := argvalue3
    fmt.Print(client.AddAssociation(value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "RemoveAssociation":
    if flag.NArg() - 1 != 4 {
      fmt.Fprint(os.Stderr, "RemoveAssociation requires 4 args\n")
      flag.Usage()
    }
    tmp0, err2222 := (strconv.Atoi(flag.Arg(1)))
    if err2222 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2223 := (strconv.Atoi(flag.Arg(2)))
    if err2223 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    tmp2, err2224 := (strconv.Atoi(flag.Arg(3)))
    if err2224 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    tmp3, err2225 := (strconv.Atoi(flag.Arg(4)))
    if err2225 != nil {
      Usage()
      return
    }
    argvalue3 := byte(tmp3)
    value3 := argvalue3
    fmt.Print(client.RemoveAssociation(value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "ResetController":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "ResetController requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2226 := (strconv.Atoi(flag.Arg(1)))
    if err2226 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.ResetController(value0))
    fmt.Print("\n")
    break
  case "SoftReset":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "SoftReset requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2227 := (strconv.Atoi(flag.Arg(1)))
    if err2227 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.SoftReset(value0))
    fmt.Print("\n")
    break
  case "BeginControllerCommand":
    if flag.NArg() - 1 != 5 {
      fmt.Fprint(os.Stderr, "BeginControllerCommand requires 5 args\n")
      flag.Usage()
    }
    tmp0, err2228 := (strconv.Atoi(flag.Arg(1)))
    if err2228 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := OpenZWave.DriverControllerCommand(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3) == "true"
    value2 := argvalue2
    tmp3, err2230 := (strconv.Atoi(flag.Arg(4)))
    if err2230 != nil {
      Usage()
      return
    }
    argvalue3 := byte(tmp3)
    value3 := argvalue3
    tmp4, err2231 := (strconv.Atoi(flag.Arg(5)))
    if err2231 != nil {
      Usage()
      return
    }
    argvalue4 := byte(tmp4)
    value4 := argvalue4
    fmt.Print(client.BeginControllerCommand(value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "CancelControllerCommand":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "CancelControllerCommand requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2232 := (strconv.Atoi(flag.Arg(1)))
    if err2232 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.CancelControllerCommand(value0))
    fmt.Print("\n")
    break
  case "GetNumScenes":
    if flag.NArg() - 1 != 0 {
      fmt.Fprint(os.Stderr, "GetNumScenes requires 0 args\n")
      flag.Usage()
    }
    fmt.Print(client.GetNumScenes())
    fmt.Print("\n")
    break
  case "GetAllScenes":
    if flag.NArg() - 1 != 0 {
      fmt.Fprint(os.Stderr, "GetAllScenes requires 0 args\n")
      flag.Usage()
    }
    fmt.Print(client.GetAllScenes())
    fmt.Print("\n")
    break
  case "CreateScene":
    if flag.NArg() - 1 != 0 {
      fmt.Fprint(os.Stderr, "CreateScene requires 0 args\n")
      flag.Usage()
    }
    fmt.Print(client.CreateScene())
    fmt.Print("\n")
    break
  case "RemoveScene":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "RemoveScene requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2233 := (strconv.Atoi(flag.Arg(1)))
    if err2233 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    fmt.Print(client.RemoveScene(value0))
    fmt.Print("\n")
    break
  case "AddSceneValue_Bool":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "AddSceneValueBool requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2234 := (strconv.Atoi(flag.Arg(1)))
    if err2234 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2235 := flag.Arg(2)
    mbTrans2236 := thrift.NewTMemoryBufferLen(len(arg2235))
    defer mbTrans2236.Close()
    _, err2237 := mbTrans2236.WriteString(arg2235)
    if err2237 != nil {
      Usage()
      return
    }
    factory2238 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2239 := factory2238.GetProtocol(mbTrans2236)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2240 := argvalue1.Read(jsProt2239)
    if err2240 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := flag.Arg(3) == "true"
    value2 := argvalue2
    fmt.Print(client.AddSceneValueBool(value0, value1, value2))
    fmt.Print("\n")
    break
  case "AddSceneValue_Uint8":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "AddSceneValueUint8 requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2242 := (strconv.Atoi(flag.Arg(1)))
    if err2242 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2243 := flag.Arg(2)
    mbTrans2244 := thrift.NewTMemoryBufferLen(len(arg2243))
    defer mbTrans2244.Close()
    _, err2245 := mbTrans2244.WriteString(arg2243)
    if err2245 != nil {
      Usage()
      return
    }
    factory2246 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2247 := factory2246.GetProtocol(mbTrans2244)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2248 := argvalue1.Read(jsProt2247)
    if err2248 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    tmp2, err2249 := (strconv.Atoi(flag.Arg(3)))
    if err2249 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    fmt.Print(client.AddSceneValueUint8(value0, value1, value2))
    fmt.Print("\n")
    break
  case "AddSceneValue_Float":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "AddSceneValueFloat requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2250 := (strconv.Atoi(flag.Arg(1)))
    if err2250 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2251 := flag.Arg(2)
    mbTrans2252 := thrift.NewTMemoryBufferLen(len(arg2251))
    defer mbTrans2252.Close()
    _, err2253 := mbTrans2252.WriteString(arg2251)
    if err2253 != nil {
      Usage()
      return
    }
    factory2254 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2255 := factory2254.GetProtocol(mbTrans2252)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2256 := argvalue1.Read(jsProt2255)
    if err2256 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2, err2257 := (strconv.Atof64(flag.Arg(3)))
    if err2257 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.AddSceneValueFloat(value0, value1, value2))
    fmt.Print("\n")
    break
  case "AddSceneValue_Int32":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "AddSceneValueInt32 requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2258 := (strconv.Atoi(flag.Arg(1)))
    if err2258 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2259 := flag.Arg(2)
    mbTrans2260 := thrift.NewTMemoryBufferLen(len(arg2259))
    defer mbTrans2260.Close()
    _, err2261 := mbTrans2260.WriteString(arg2259)
    if err2261 != nil {
      Usage()
      return
    }
    factory2262 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2263 := factory2262.GetProtocol(mbTrans2260)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2264 := argvalue1.Read(jsProt2263)
    if err2264 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    tmp2, err2265 := (strconv.Atoi(flag.Arg(3)))
    if err2265 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    fmt.Print(client.AddSceneValueInt32(value0, value1, value2))
    fmt.Print("\n")
    break
  case "AddSceneValue_Int16":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "AddSceneValueInt16 requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2266 := (strconv.Atoi(flag.Arg(1)))
    if err2266 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2267 := flag.Arg(2)
    mbTrans2268 := thrift.NewTMemoryBufferLen(len(arg2267))
    defer mbTrans2268.Close()
    _, err2269 := mbTrans2268.WriteString(arg2267)
    if err2269 != nil {
      Usage()
      return
    }
    factory2270 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2271 := factory2270.GetProtocol(mbTrans2268)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2272 := argvalue1.Read(jsProt2271)
    if err2272 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    tmp2, err2273 := (strconv.Atoi(flag.Arg(3)))
    if err2273 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    fmt.Print(client.AddSceneValueInt16(value0, value1, value2))
    fmt.Print("\n")
    break
  case "AddSceneValue_String":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "AddSceneValueString requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2274 := (strconv.Atoi(flag.Arg(1)))
    if err2274 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2275 := flag.Arg(2)
    mbTrans2276 := thrift.NewTMemoryBufferLen(len(arg2275))
    defer mbTrans2276.Close()
    _, err2277 := mbTrans2276.WriteString(arg2275)
    if err2277 != nil {
      Usage()
      return
    }
    factory2278 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2279 := factory2278.GetProtocol(mbTrans2276)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2280 := argvalue1.Read(jsProt2279)
    if err2280 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.AddSceneValueString(value0, value1, value2))
    fmt.Print("\n")
    break
  case "AddSceneValueListSelection_String":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "AddSceneValueListSelectionString requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2282 := (strconv.Atoi(flag.Arg(1)))
    if err2282 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2283 := flag.Arg(2)
    mbTrans2284 := thrift.NewTMemoryBufferLen(len(arg2283))
    defer mbTrans2284.Close()
    _, err2285 := mbTrans2284.WriteString(arg2283)
    if err2285 != nil {
      Usage()
      return
    }
    factory2286 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2287 := factory2286.GetProtocol(mbTrans2284)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2288 := argvalue1.Read(jsProt2287)
    if err2288 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.AddSceneValueListSelectionString(value0, value1, value2))
    fmt.Print("\n")
    break
  case "AddSceneValueListSelection_Int32":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "AddSceneValueListSelectionInt32 requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2290 := (strconv.Atoi(flag.Arg(1)))
    if err2290 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2291 := flag.Arg(2)
    mbTrans2292 := thrift.NewTMemoryBufferLen(len(arg2291))
    defer mbTrans2292.Close()
    _, err2293 := mbTrans2292.WriteString(arg2291)
    if err2293 != nil {
      Usage()
      return
    }
    factory2294 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2295 := factory2294.GetProtocol(mbTrans2292)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2296 := argvalue1.Read(jsProt2295)
    if err2296 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    tmp2, err2297 := (strconv.Atoi(flag.Arg(3)))
    if err2297 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    fmt.Print(client.AddSceneValueListSelectionInt32(value0, value1, value2))
    fmt.Print("\n")
    break
  case "RemoveSceneValue":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "RemoveSceneValue requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2298 := (strconv.Atoi(flag.Arg(1)))
    if err2298 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2299 := flag.Arg(2)
    mbTrans2300 := thrift.NewTMemoryBufferLen(len(arg2299))
    defer mbTrans2300.Close()
    _, err2301 := mbTrans2300.WriteString(arg2299)
    if err2301 != nil {
      Usage()
      return
    }
    factory2302 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2303 := factory2302.GetProtocol(mbTrans2300)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2304 := argvalue1.Read(jsProt2303)
    if err2304 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.RemoveSceneValue(value0, value1))
    fmt.Print("\n")
    break
  case "SceneGetValues":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "SceneGetValues requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2305 := (strconv.Atoi(flag.Arg(1)))
    if err2305 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    fmt.Print(client.SceneGetValues(value0))
    fmt.Print("\n")
    break
  case "SceneGetValueAsBool":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SceneGetValueAsBool requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2306 := (strconv.Atoi(flag.Arg(1)))
    if err2306 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2307 := flag.Arg(2)
    mbTrans2308 := thrift.NewTMemoryBufferLen(len(arg2307))
    defer mbTrans2308.Close()
    _, err2309 := mbTrans2308.WriteString(arg2307)
    if err2309 != nil {
      Usage()
      return
    }
    factory2310 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2311 := factory2310.GetProtocol(mbTrans2308)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2312 := argvalue1.Read(jsProt2311)
    if err2312 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SceneGetValueAsBool(value0, value1))
    fmt.Print("\n")
    break
  case "SceneGetValueAsByte":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SceneGetValueAsByte requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2313 := (strconv.Atoi(flag.Arg(1)))
    if err2313 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2314 := flag.Arg(2)
    mbTrans2315 := thrift.NewTMemoryBufferLen(len(arg2314))
    defer mbTrans2315.Close()
    _, err2316 := mbTrans2315.WriteString(arg2314)
    if err2316 != nil {
      Usage()
      return
    }
    factory2317 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2318 := factory2317.GetProtocol(mbTrans2315)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2319 := argvalue1.Read(jsProt2318)
    if err2319 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SceneGetValueAsByte(value0, value1))
    fmt.Print("\n")
    break
  case "SceneGetValueAsFloat":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SceneGetValueAsFloat requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2320 := (strconv.Atoi(flag.Arg(1)))
    if err2320 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2321 := flag.Arg(2)
    mbTrans2322 := thrift.NewTMemoryBufferLen(len(arg2321))
    defer mbTrans2322.Close()
    _, err2323 := mbTrans2322.WriteString(arg2321)
    if err2323 != nil {
      Usage()
      return
    }
    factory2324 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2325 := factory2324.GetProtocol(mbTrans2322)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2326 := argvalue1.Read(jsProt2325)
    if err2326 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SceneGetValueAsFloat(value0, value1))
    fmt.Print("\n")
    break
  case "SceneGetValueAsInt":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SceneGetValueAsInt requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2327 := (strconv.Atoi(flag.Arg(1)))
    if err2327 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2328 := flag.Arg(2)
    mbTrans2329 := thrift.NewTMemoryBufferLen(len(arg2328))
    defer mbTrans2329.Close()
    _, err2330 := mbTrans2329.WriteString(arg2328)
    if err2330 != nil {
      Usage()
      return
    }
    factory2331 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2332 := factory2331.GetProtocol(mbTrans2329)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2333 := argvalue1.Read(jsProt2332)
    if err2333 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SceneGetValueAsInt(value0, value1))
    fmt.Print("\n")
    break
  case "SceneGetValueAsShort":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SceneGetValueAsShort requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2334 := (strconv.Atoi(flag.Arg(1)))
    if err2334 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2335 := flag.Arg(2)
    mbTrans2336 := thrift.NewTMemoryBufferLen(len(arg2335))
    defer mbTrans2336.Close()
    _, err2337 := mbTrans2336.WriteString(arg2335)
    if err2337 != nil {
      Usage()
      return
    }
    factory2338 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2339 := factory2338.GetProtocol(mbTrans2336)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2340 := argvalue1.Read(jsProt2339)
    if err2340 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SceneGetValueAsShort(value0, value1))
    fmt.Print("\n")
    break
  case "SceneGetValueAsString":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SceneGetValueAsString requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2341 := (strconv.Atoi(flag.Arg(1)))
    if err2341 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2342 := flag.Arg(2)
    mbTrans2343 := thrift.NewTMemoryBufferLen(len(arg2342))
    defer mbTrans2343.Close()
    _, err2344 := mbTrans2343.WriteString(arg2342)
    if err2344 != nil {
      Usage()
      return
    }
    factory2345 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2346 := factory2345.GetProtocol(mbTrans2343)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2347 := argvalue1.Read(jsProt2346)
    if err2347 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SceneGetValueAsString(value0, value1))
    fmt.Print("\n")
    break
  case "SceneGetValueListSelection_String":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SceneGetValueListSelectionString requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2348 := (strconv.Atoi(flag.Arg(1)))
    if err2348 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2349 := flag.Arg(2)
    mbTrans2350 := thrift.NewTMemoryBufferLen(len(arg2349))
    defer mbTrans2350.Close()
    _, err2351 := mbTrans2350.WriteString(arg2349)
    if err2351 != nil {
      Usage()
      return
    }
    factory2352 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2353 := factory2352.GetProtocol(mbTrans2350)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2354 := argvalue1.Read(jsProt2353)
    if err2354 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SceneGetValueListSelectionString(value0, value1))
    fmt.Print("\n")
    break
  case "SceneGetValueListSelection_Int32":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SceneGetValueListSelectionInt32 requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2355 := (strconv.Atoi(flag.Arg(1)))
    if err2355 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2356 := flag.Arg(2)
    mbTrans2357 := thrift.NewTMemoryBufferLen(len(arg2356))
    defer mbTrans2357.Close()
    _, err2358 := mbTrans2357.WriteString(arg2356)
    if err2358 != nil {
      Usage()
      return
    }
    factory2359 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2360 := factory2359.GetProtocol(mbTrans2357)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2361 := argvalue1.Read(jsProt2360)
    if err2361 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SceneGetValueListSelectionInt32(value0, value1))
    fmt.Print("\n")
    break
  case "SetSceneValue_Bool":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetSceneValueBool requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2362 := (strconv.Atoi(flag.Arg(1)))
    if err2362 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2363 := flag.Arg(2)
    mbTrans2364 := thrift.NewTMemoryBufferLen(len(arg2363))
    defer mbTrans2364.Close()
    _, err2365 := mbTrans2364.WriteString(arg2363)
    if err2365 != nil {
      Usage()
      return
    }
    factory2366 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2367 := factory2366.GetProtocol(mbTrans2364)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2368 := argvalue1.Read(jsProt2367)
    if err2368 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := flag.Arg(3) == "true"
    value2 := argvalue2
    fmt.Print(client.SetSceneValueBool(value0, value1, value2))
    fmt.Print("\n")
    break
  case "SetSceneValue_Uint8":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetSceneValueUint8 requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2370 := (strconv.Atoi(flag.Arg(1)))
    if err2370 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2371 := flag.Arg(2)
    mbTrans2372 := thrift.NewTMemoryBufferLen(len(arg2371))
    defer mbTrans2372.Close()
    _, err2373 := mbTrans2372.WriteString(arg2371)
    if err2373 != nil {
      Usage()
      return
    }
    factory2374 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2375 := factory2374.GetProtocol(mbTrans2372)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2376 := argvalue1.Read(jsProt2375)
    if err2376 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    tmp2, err2377 := (strconv.Atoi(flag.Arg(3)))
    if err2377 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    fmt.Print(client.SetSceneValueUint8(value0, value1, value2))
    fmt.Print("\n")
    break
  case "SetSceneValue_Float":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetSceneValueFloat requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2378 := (strconv.Atoi(flag.Arg(1)))
    if err2378 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2379 := flag.Arg(2)
    mbTrans2380 := thrift.NewTMemoryBufferLen(len(arg2379))
    defer mbTrans2380.Close()
    _, err2381 := mbTrans2380.WriteString(arg2379)
    if err2381 != nil {
      Usage()
      return
    }
    factory2382 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2383 := factory2382.GetProtocol(mbTrans2380)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2384 := argvalue1.Read(jsProt2383)
    if err2384 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2, err2385 := (strconv.Atof64(flag.Arg(3)))
    if err2385 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.SetSceneValueFloat(value0, value1, value2))
    fmt.Print("\n")
    break
  case "SetSceneValue_Int32":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetSceneValueInt32 requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2386 := (strconv.Atoi(flag.Arg(1)))
    if err2386 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2387 := flag.Arg(2)
    mbTrans2388 := thrift.NewTMemoryBufferLen(len(arg2387))
    defer mbTrans2388.Close()
    _, err2389 := mbTrans2388.WriteString(arg2387)
    if err2389 != nil {
      Usage()
      return
    }
    factory2390 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2391 := factory2390.GetProtocol(mbTrans2388)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2392 := argvalue1.Read(jsProt2391)
    if err2392 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    tmp2, err2393 := (strconv.Atoi(flag.Arg(3)))
    if err2393 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    fmt.Print(client.SetSceneValueInt32(value0, value1, value2))
    fmt.Print("\n")
    break
  case "SetSceneValue_Int16":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetSceneValueInt16 requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2394 := (strconv.Atoi(flag.Arg(1)))
    if err2394 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2395 := flag.Arg(2)
    mbTrans2396 := thrift.NewTMemoryBufferLen(len(arg2395))
    defer mbTrans2396.Close()
    _, err2397 := mbTrans2396.WriteString(arg2395)
    if err2397 != nil {
      Usage()
      return
    }
    factory2398 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2399 := factory2398.GetProtocol(mbTrans2396)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2400 := argvalue1.Read(jsProt2399)
    if err2400 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    tmp2, err2401 := (strconv.Atoi(flag.Arg(3)))
    if err2401 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    fmt.Print(client.SetSceneValueInt16(value0, value1, value2))
    fmt.Print("\n")
    break
  case "SetSceneValue_String":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetSceneValueString requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2402 := (strconv.Atoi(flag.Arg(1)))
    if err2402 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2403 := flag.Arg(2)
    mbTrans2404 := thrift.NewTMemoryBufferLen(len(arg2403))
    defer mbTrans2404.Close()
    _, err2405 := mbTrans2404.WriteString(arg2403)
    if err2405 != nil {
      Usage()
      return
    }
    factory2406 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2407 := factory2406.GetProtocol(mbTrans2404)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2408 := argvalue1.Read(jsProt2407)
    if err2408 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.SetSceneValueString(value0, value1, value2))
    fmt.Print("\n")
    break
  case "SetSceneValueListSelection_String":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetSceneValueListSelectionString requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2410 := (strconv.Atoi(flag.Arg(1)))
    if err2410 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2411 := flag.Arg(2)
    mbTrans2412 := thrift.NewTMemoryBufferLen(len(arg2411))
    defer mbTrans2412.Close()
    _, err2413 := mbTrans2412.WriteString(arg2411)
    if err2413 != nil {
      Usage()
      return
    }
    factory2414 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2415 := factory2414.GetProtocol(mbTrans2412)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2416 := argvalue1.Read(jsProt2415)
    if err2416 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.SetSceneValueListSelectionString(value0, value1, value2))
    fmt.Print("\n")
    break
  case "SetSceneValueListSelection_Int32":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetSceneValueListSelectionInt32 requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2418 := (strconv.Atoi(flag.Arg(1)))
    if err2418 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2419 := flag.Arg(2)
    mbTrans2420 := thrift.NewTMemoryBufferLen(len(arg2419))
    defer mbTrans2420.Close()
    _, err2421 := mbTrans2420.WriteString(arg2419)
    if err2421 != nil {
      Usage()
      return
    }
    factory2422 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2423 := factory2422.GetProtocol(mbTrans2420)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2424 := argvalue1.Read(jsProt2423)
    if err2424 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    tmp2, err2425 := (strconv.Atoi(flag.Arg(3)))
    if err2425 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    fmt.Print(client.SetSceneValueListSelectionInt32(value0, value1, value2))
    fmt.Print("\n")
    break
  case "GetSceneLabel":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetSceneLabel requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2426 := (strconv.Atoi(flag.Arg(1)))
    if err2426 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetSceneLabel(value0))
    fmt.Print("\n")
    break
  case "SetSceneLabel":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetSceneLabel requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2427 := (strconv.Atoi(flag.Arg(1)))
    if err2427 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.SetSceneLabel(value0, value1))
    fmt.Print("\n")
    break
  case "SceneExists":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "SceneExists requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2429 := (strconv.Atoi(flag.Arg(1)))
    if err2429 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    fmt.Print(client.SceneExists(value0))
    fmt.Print("\n")
    break
  case "ActivateScene":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "ActivateScene requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2430 := (strconv.Atoi(flag.Arg(1)))
    if err2430 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    fmt.Print(client.ActivateScene(value0))
    fmt.Print("\n")
    break
  case "GetDriverStatistics":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetDriverStatistics requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2431 := (strconv.Atoi(flag.Arg(1)))
    if err2431 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetDriverStatistics(value0))
    fmt.Print("\n")
    break
  case "SendAllValues":
    if flag.NArg() - 1 != 0 {
      fmt.Fprint(os.Stderr, "SendAllValues requires 0 args\n")
      flag.Usage()
    }
    fmt.Print(client.SendAllValues())
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprint(os.Stderr, "Invalid function ", cmd, "\n")
  }
}
