/* Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package main

import (
        "flag"
        "fmt"
        "http"
        "net"
        "os"
        "strconv"
        "thrift"
        "thriftlib/OpenZWave"
)

func Usage() {
  fmt.Fprint(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:\n")
  flag.PrintDefaults()
  fmt.Fprint(os.Stderr, "Functions:\n")
  fmt.Fprint(os.Stderr, "  WriteConfig(_homeId int32) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetControllerNodeId(_homeId int32) (retval1980 byte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetSUCNodeId(_homeId int32) (retval1981 byte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsPrimaryController(_homeId int32) (retval1982 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsStaticUpdateController(_homeId int32) (retval1983 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsBridgeController(_homeId int32) (retval1984 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetLibraryVersion(_homeId int32) (retval1985 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetLibraryTypeName(_homeId int32) (retval1986 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetSendQueueCount(_homeId int32) (retval1987 int32, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  LogDriverStatistics(_homeId int32) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetControllerPath(_homeId int32) (retval1989 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetPollInterval() (retval1990 int32, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetPollInterval(_milliseconds int32, _bIntervalBetweenPolls bool) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  EnablePoll(_valueId *RemoteValueID, _intensity byte) (retval1992 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  DisablePoll(_valueId *RemoteValueID) (retval1993 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  isPolled(_valueId *RemoteValueID) (retval1994 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetPollIntensity(_valueId *RemoteValueID, _intensity byte) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  RefreshNodeInfo(_homeId int32, _nodeId byte) (retval1996 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  RequestNodeState(_homeId int32, _nodeId byte) (retval1997 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  RequestNodeDynamic(_homeId int32, _nodeId byte) (retval1998 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsNodeListeningDevice(_homeId int32, _nodeId byte) (retval1999 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsNodeFrequentListeningDevice(_homeId int32, _nodeId byte) (retval2000 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsNodeBeamingDevice(_homeId int32, _nodeId byte) (retval2001 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsNodeRoutingDevice(_homeId int32, _nodeId byte) (retval2002 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsNodeSecurityDevice(_homeId int32, _nodeId byte) (retval2003 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeMaxBaudRate(_homeId int32, _nodeId byte) (retval2004 int32, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeVersion(_homeId int32, _nodeId byte) (retval2005 byte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeSecurity(_homeId int32, _nodeId byte) (retval2006 byte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeBasic(_homeId int32, _nodeId byte) (retval2007 byte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeGeneric(_homeId int32, _nodeId byte) (retval2008 byte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeSpecific(_homeId int32, _nodeId byte) (retval2009 byte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeType(_homeId int32, _nodeId byte) (retval2010 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeNeighbors(_homeId int32, _nodeId byte) (retval2011 *UInt32ListByte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeManufacturerName(_homeId int32, _nodeId byte) (retval2012 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeProductName(_homeId int32, _nodeId byte) (retval2013 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeName(_homeId int32, _nodeId byte) (retval2014 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeLocation(_homeId int32, _nodeId byte) (retval2015 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeManufacturerId(_homeId int32, _nodeId byte) (retval2016 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeProductType(_homeId int32, _nodeId byte) (retval2017 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeProductId(_homeId int32, _nodeId byte) (retval2018 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetNodeManufacturerName(_homeId int32, _nodeId byte, _manufacturerName string) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetNodeProductName(_homeId int32, _nodeId byte, _productName string) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetNodeName(_homeId int32, _nodeId byte, _nodeName string) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetNodeLocation(_homeId int32, _nodeId byte, _location string) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetNodeOn(_homeId int32, _nodeId byte) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetNodeOff(_homeId int32, _nodeId byte) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetNodeLevel(_homeId int32, _nodeId byte, _level byte) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsNodeInfoReceived(_homeId int32, _nodeId byte) (retval2026 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeClassInformation(_homeId int32, _nodeId byte, _commandClassId byte) (retval2027 *BoolGetNodeClassInformation, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsNodeAwake(_homeId int32, _nodeId byte) (retval2028 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsNodeFailed(_homeId int32, _nodeId byte) (retval2029 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeQueryStage(_homeId int32, _nodeId byte) (retval2030 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueLabel(_id *RemoteValueID) (retval2031 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetValueLabel(_id *RemoteValueID, _value string) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueUnits(_id *RemoteValueID) (retval2033 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetValueUnits(_id *RemoteValueID, _value string) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueHelp(_id *RemoteValueID) (retval2035 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetValueHelp(_id *RemoteValueID, _value string) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueMin(_id *RemoteValueID) (retval2037 int32, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueMax(_id *RemoteValueID) (retval2038 int32, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsValueReadOnly(_id *RemoteValueID) (retval2039 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsValueWriteOnly(_id *RemoteValueID) (retval2040 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsValueSet(_id *RemoteValueID) (retval2041 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsValuePolled(_id *RemoteValueID) (retval2042 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueAsBool(_id *RemoteValueID) (retval2043 *BoolBool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueAsByte(_id *RemoteValueID) (retval2044 *BoolUInt8, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueAsFloat(_id *RemoteValueID) (retval2045 *BoolFloat, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueAsInt(_id *RemoteValueID) (retval2046 *BoolInt, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueAsShort(_id *RemoteValueID) (retval2047 *BoolInt16, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueAsString(_id *RemoteValueID) (retval2048 *BoolString, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueListSelection_String(_id *RemoteValueID) (retval2049 *BoolString, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueListSelection_Int32(_id *RemoteValueID) (retval2050 *BoolInt, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueListItems(_id *RemoteValueID) (retval2051 *BoolListString, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueFloatPrecision(_id *RemoteValueID) (retval2052 *BoolUInt8, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetValue_Bool(_id *RemoteValueID, _value bool) (retval2053 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetValue_UInt8(_id *RemoteValueID, _value byte, _length byte) (retval2054 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetValue_Float(_id *RemoteValueID, _value float64) (retval2055 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetValue_Int32(_id *RemoteValueID, _value int32) (retval2056 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetValue_Int16(_id *RemoteValueID, _value int16) (retval2057 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetValue_String(_id *RemoteValueID, _value string) (retval2058 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetValueListSelection(_id *RemoteValueID, _selectedItem string) (retval2059 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  RefreshValue(_id *RemoteValueID) (retval2060 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetChangeVerified(_id *RemoteValueID, _verify bool) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  PressButton(_id *RemoteValueID) (retval2062 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  ReleaseButton(_id *RemoteValueID) (retval2063 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNumSwitchPoints(_id *RemoteValueID) (retval2064 byte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetSwitchPoint(_id *RemoteValueID, _hours byte, _minutes byte, _setback byte) (retval2065 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  RemoveSwitchPoint(_id *RemoteValueID, _hours byte, _minutes byte) (retval2066 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  ClearSwitchPoints(_id *RemoteValueID) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetSwitchPoint(_id *RemoteValueID, _idx byte) (retval2068 *GetSwitchPointReturnStruct, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SwitchAllOn(_homeId int32) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SwitchAllOff(_homeId int32) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetConfigParam(_homeId int32, _nodeId byte, _param byte, _value int32, _size byte) (retval2071 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  RequestConfigParam(_homeId int32, _nodeId byte, _param byte) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  RequestAllConfigParams(_homeId int32, _nodeId byte) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNumGroups(_homeId int32, _nodeId byte) (retval2074 byte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetAssociations(_homeId int32, _nodeId byte, _groupIdx byte) (retval2075 *GetAssociationsReturnStruct, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetMaxAssociations(_homeId int32, _nodeId byte, _groupIdx byte) (retval2076 byte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetGroupLabel(_homeId int32, _nodeId byte, _groupIdx byte) (retval2077 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  AddAssociation(_homeId int32, _nodeId byte, _groupIdx byte, _targetNodeId byte) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  RemoveAssociation(_homeId int32, _nodeId byte, _groupIdx byte, _targetNodeId byte) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  ResetController(_homeId int32) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SoftReset(_homeId int32) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  BeginControllerCommand(_homeId int32, _command DriverControllerCommand, _highPower bool, _nodeId byte, _arg byte) (retval2082 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  CancelControllerCommand(_homeId int32) (retval2083 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  TestNetworkNode(_homeId int32, _nodeId byte, _count int32) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  TestNetwork(_homeId int32, _count int32) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  HealNetworkNode(_homeId int32, _nodeId byte, _doRR bool) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  HealNetwork(_homeId int32, _doRR bool) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNumScenes() (retval2088 byte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetAllScenes() (retval2089 *GetAllScenesReturnStruct, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  RemoveAllScenes(_homeId int32) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  CreateScene() (retval2091 byte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  RemoveScene(_sceneId byte) (retval2092 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  AddSceneValue_Bool(_sceneId byte, _valueId *RemoteValueID, _value bool) (retval2093 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  AddSceneValue_Uint8(_sceneId byte, _valueId *RemoteValueID, _value byte) (retval2094 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  AddSceneValue_Float(_sceneId byte, _valueId *RemoteValueID, _value float64) (retval2095 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  AddSceneValue_Int32(_sceneId byte, _valueId *RemoteValueID, _value int32) (retval2096 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  AddSceneValue_Int16(_sceneId byte, _valueId *RemoteValueID, _value int16) (retval2097 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  AddSceneValue_String(_sceneId byte, _valueId *RemoteValueID, _value string) (retval2098 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  AddSceneValueListSelection_String(_sceneId byte, _valueId *RemoteValueID, _value string) (retval2099 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  AddSceneValueListSelection_Int32(_sceneId byte, _valueId *RemoteValueID, _value int32) (retval2100 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  RemoveSceneValue(_sceneId byte, _valueId *RemoteValueID) (retval2101 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SceneGetValues(_sceneId byte) (retval2102 *SceneGetValuesReturnStruct, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SceneGetValueAsBool(_sceneId byte, _valueId *RemoteValueID) (retval2103 *BoolBool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SceneGetValueAsByte(_sceneId byte, _valueId *RemoteValueID) (retval2104 *BoolUInt8, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SceneGetValueAsFloat(_sceneId byte, _valueId *RemoteValueID) (retval2105 *BoolFloat, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SceneGetValueAsInt(_sceneId byte, _valueId *RemoteValueID) (retval2106 *BoolInt, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SceneGetValueAsShort(_sceneId byte, _valueId *RemoteValueID) (retval2107 *BoolInt16, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SceneGetValueAsString(_sceneId byte, _valueId *RemoteValueID) (retval2108 *BoolString, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SceneGetValueListSelection_String(_sceneId byte, _valueId *RemoteValueID) (retval2109 *BoolString, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SceneGetValueListSelection_Int32(_sceneId byte, _valueId *RemoteValueID) (retval2110 *BoolInt, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetSceneValue_Bool(_sceneId byte, _valueId *RemoteValueID, _value bool) (retval2111 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetSceneValue_Uint8(_sceneId byte, _valueId *RemoteValueID, _value byte) (retval2112 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetSceneValue_Float(_sceneId byte, _valueId *RemoteValueID, _value float64) (retval2113 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetSceneValue_Int32(_sceneId byte, _valueId *RemoteValueID, _value int32) (retval2114 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetSceneValue_Int16(_sceneId byte, _valueId *RemoteValueID, _value int16) (retval2115 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetSceneValue_String(_sceneId byte, _valueId *RemoteValueID, _value string) (retval2116 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetSceneValueListSelection_String(_sceneId byte, _valueId *RemoteValueID, _value string) (retval2117 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetSceneValueListSelection_Int32(_sceneId byte, _valueId *RemoteValueID, _value int32) (retval2118 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetSceneLabel(_sceneId byte) (retval2119 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetSceneLabel(_sceneId byte, _value string) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SceneExists(_sceneId byte) (retval2121 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  ActivateScene(_sceneId byte) (retval2122 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetDriverStatistics(_homeId int32) (retval2123 *GetDriverStatisticsReturnStruct, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeStatistics(_homeId int32, _nodeId byte) (retval2124 *GetNodeStatisticsReturnStruct, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SendAllValues() (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  ping() (err os.Error)\n")
  fmt.Fprint(os.Stderr, "\n")
  os.Exit(0)
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  var help bool
  var url http.URL
  var trans thrift.TTransport
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.BoolVar(&help, "help", false, "See usage string")
  flag.Parse()
  if help || flag.NArg() == 0 {
    flag.Usage()
  }
  
  if len(urlString) > 0 {
    url, err := http.ParseURL(urlString)
    if err != nil {
      fmt.Fprint(os.Stderr, "Error parsing URL: ", err.String(), "\n")
      flag.Usage()
    }
    host = url.Host
    useHttp = len(url.Scheme) <= 0 || url.Scheme == "http"
  } else if useHttp {
    _, err := http.ParseURL(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprint(os.Stderr, "Error parsing URL: ", err.String(), "\n")
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err os.Error
  if useHttp {
    trans, err = thrift.NewTHttpClient(url.Raw)
  } else {
    addr, err := net.ResolveTCPAddr("tcp", fmt.Sprint(host, ":", port))
    if err != nil {
      fmt.Fprint(os.Stderr, "Error resolving address", err.String())
      os.Exit(1)
    }
    trans, err = thrift.NewTNonblockingSocketAddr(addr)
    if framed {
      trans = thrift.NewTFramedTransport(trans)
    }
  }
  if err != nil {
    fmt.Fprint(os.Stderr, "Error creating transport", err.String())
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactory()
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
    break
  default:
    fmt.Fprint(os.Stderr, "Invalid protocol specified: ", protocol, "\n")
    Usage()
    os.Exit(1)
  }
  client := OpenZWave.NewRemoteManagerClientFactory(trans, protocolFactory)
  if err = trans.Open(); err != nil {
    fmt.Fprint(os.Stderr, "Error opening socket to ", host, ":", port, " ", err.String())
    os.Exit(1)
  }
  
  switch cmd {
  case "WriteConfig":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "WriteConfig requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2127 := (strconv.Atoi(flag.Arg(1)))
    if err2127 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.WriteConfig(value0))
    fmt.Print("\n")
    break
  case "GetControllerNodeId":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetControllerNodeId requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2128 := (strconv.Atoi(flag.Arg(1)))
    if err2128 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetControllerNodeId(value0))
    fmt.Print("\n")
    break
  case "GetSUCNodeId":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetSUCNodeId requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2129 := (strconv.Atoi(flag.Arg(1)))
    if err2129 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetSUCNodeId(value0))
    fmt.Print("\n")
    break
  case "IsPrimaryController":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "IsPrimaryController requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2130 := (strconv.Atoi(flag.Arg(1)))
    if err2130 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.IsPrimaryController(value0))
    fmt.Print("\n")
    break
  case "IsStaticUpdateController":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "IsStaticUpdateController requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2131 := (strconv.Atoi(flag.Arg(1)))
    if err2131 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.IsStaticUpdateController(value0))
    fmt.Print("\n")
    break
  case "IsBridgeController":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "IsBridgeController requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2132 := (strconv.Atoi(flag.Arg(1)))
    if err2132 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.IsBridgeController(value0))
    fmt.Print("\n")
    break
  case "GetLibraryVersion":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetLibraryVersion requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2133 := (strconv.Atoi(flag.Arg(1)))
    if err2133 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetLibraryVersion(value0))
    fmt.Print("\n")
    break
  case "GetLibraryTypeName":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetLibraryTypeName requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2134 := (strconv.Atoi(flag.Arg(1)))
    if err2134 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetLibraryTypeName(value0))
    fmt.Print("\n")
    break
  case "GetSendQueueCount":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetSendQueueCount requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2135 := (strconv.Atoi(flag.Arg(1)))
    if err2135 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetSendQueueCount(value0))
    fmt.Print("\n")
    break
  case "LogDriverStatistics":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "LogDriverStatistics requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2136 := (strconv.Atoi(flag.Arg(1)))
    if err2136 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.LogDriverStatistics(value0))
    fmt.Print("\n")
    break
  case "GetControllerPath":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetControllerPath requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2137 := (strconv.Atoi(flag.Arg(1)))
    if err2137 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetControllerPath(value0))
    fmt.Print("\n")
    break
  case "GetPollInterval":
    if flag.NArg() - 1 != 0 {
      fmt.Fprint(os.Stderr, "GetPollInterval requires 0 args\n")
      flag.Usage()
    }
    fmt.Print(client.GetPollInterval())
    fmt.Print("\n")
    break
  case "SetPollInterval":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetPollInterval requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2138 := (strconv.Atoi(flag.Arg(1)))
    if err2138 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2) == "true"
    value1 := argvalue1
    fmt.Print(client.SetPollInterval(value0, value1))
    fmt.Print("\n")
    break
  case "EnablePoll":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "EnablePoll requires 2 args\n")
      flag.Usage()
    }
    arg2140 := flag.Arg(1)
    mbTrans2141 := thrift.NewTMemoryBufferLen(len(arg2140))
    defer mbTrans2141.Close()
    _, err2142 := mbTrans2141.WriteString(arg2140)
    if err2142 != nil {
      Usage()
      return
    }
    factory2143 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2144 := factory2143.GetProtocol(mbTrans2141)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2145 := argvalue0.Read(jsProt2144)
    if err2145 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err2146 := (strconv.Atoi(flag.Arg(2)))
    if err2146 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.EnablePoll(value0, value1))
    fmt.Print("\n")
    break
  case "DisablePoll":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "DisablePoll requires 1 args\n")
      flag.Usage()
    }
    arg2147 := flag.Arg(1)
    mbTrans2148 := thrift.NewTMemoryBufferLen(len(arg2147))
    defer mbTrans2148.Close()
    _, err2149 := mbTrans2148.WriteString(arg2147)
    if err2149 != nil {
      Usage()
      return
    }
    factory2150 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2151 := factory2150.GetProtocol(mbTrans2148)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2152 := argvalue0.Read(jsProt2151)
    if err2152 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DisablePoll(value0))
    fmt.Print("\n")
    break
  case "isPolled":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "IsPolled requires 1 args\n")
      flag.Usage()
    }
    arg2153 := flag.Arg(1)
    mbTrans2154 := thrift.NewTMemoryBufferLen(len(arg2153))
    defer mbTrans2154.Close()
    _, err2155 := mbTrans2154.WriteString(arg2153)
    if err2155 != nil {
      Usage()
      return
    }
    factory2156 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2157 := factory2156.GetProtocol(mbTrans2154)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2158 := argvalue0.Read(jsProt2157)
    if err2158 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.IsPolled(value0))
    fmt.Print("\n")
    break
  case "SetPollIntensity":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetPollIntensity requires 2 args\n")
      flag.Usage()
    }
    arg2159 := flag.Arg(1)
    mbTrans2160 := thrift.NewTMemoryBufferLen(len(arg2159))
    defer mbTrans2160.Close()
    _, err2161 := mbTrans2160.WriteString(arg2159)
    if err2161 != nil {
      Usage()
      return
    }
    factory2162 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2163 := factory2162.GetProtocol(mbTrans2160)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2164 := argvalue0.Read(jsProt2163)
    if err2164 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err2165 := (strconv.Atoi(flag.Arg(2)))
    if err2165 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.SetPollIntensity(value0, value1))
    fmt.Print("\n")
    break
  case "RefreshNodeInfo":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "RefreshNodeInfo requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2166 := (strconv.Atoi(flag.Arg(1)))
    if err2166 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2167 := (strconv.Atoi(flag.Arg(2)))
    if err2167 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.RefreshNodeInfo(value0, value1))
    fmt.Print("\n")
    break
  case "RequestNodeState":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "RequestNodeState requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2168 := (strconv.Atoi(flag.Arg(1)))
    if err2168 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2169 := (strconv.Atoi(flag.Arg(2)))
    if err2169 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.RequestNodeState(value0, value1))
    fmt.Print("\n")
    break
  case "RequestNodeDynamic":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "RequestNodeDynamic requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2170 := (strconv.Atoi(flag.Arg(1)))
    if err2170 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2171 := (strconv.Atoi(flag.Arg(2)))
    if err2171 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.RequestNodeDynamic(value0, value1))
    fmt.Print("\n")
    break
  case "IsNodeListeningDevice":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "IsNodeListeningDevice requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2172 := (strconv.Atoi(flag.Arg(1)))
    if err2172 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2173 := (strconv.Atoi(flag.Arg(2)))
    if err2173 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.IsNodeListeningDevice(value0, value1))
    fmt.Print("\n")
    break
  case "IsNodeFrequentListeningDevice":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "IsNodeFrequentListeningDevice requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2174 := (strconv.Atoi(flag.Arg(1)))
    if err2174 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2175 := (strconv.Atoi(flag.Arg(2)))
    if err2175 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.IsNodeFrequentListeningDevice(value0, value1))
    fmt.Print("\n")
    break
  case "IsNodeBeamingDevice":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "IsNodeBeamingDevice requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2176 := (strconv.Atoi(flag.Arg(1)))
    if err2176 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2177 := (strconv.Atoi(flag.Arg(2)))
    if err2177 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.IsNodeBeamingDevice(value0, value1))
    fmt.Print("\n")
    break
  case "IsNodeRoutingDevice":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "IsNodeRoutingDevice requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2178 := (strconv.Atoi(flag.Arg(1)))
    if err2178 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2179 := (strconv.Atoi(flag.Arg(2)))
    if err2179 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.IsNodeRoutingDevice(value0, value1))
    fmt.Print("\n")
    break
  case "IsNodeSecurityDevice":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "IsNodeSecurityDevice requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2180 := (strconv.Atoi(flag.Arg(1)))
    if err2180 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2181 := (strconv.Atoi(flag.Arg(2)))
    if err2181 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.IsNodeSecurityDevice(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeMaxBaudRate":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeMaxBaudRate requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2182 := (strconv.Atoi(flag.Arg(1)))
    if err2182 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2183 := (strconv.Atoi(flag.Arg(2)))
    if err2183 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeMaxBaudRate(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeVersion":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeVersion requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2184 := (strconv.Atoi(flag.Arg(1)))
    if err2184 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2185 := (strconv.Atoi(flag.Arg(2)))
    if err2185 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeVersion(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeSecurity":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeSecurity requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2186 := (strconv.Atoi(flag.Arg(1)))
    if err2186 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2187 := (strconv.Atoi(flag.Arg(2)))
    if err2187 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeSecurity(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeBasic":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeBasic requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2188 := (strconv.Atoi(flag.Arg(1)))
    if err2188 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2189 := (strconv.Atoi(flag.Arg(2)))
    if err2189 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeBasic(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeGeneric":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeGeneric requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2190 := (strconv.Atoi(flag.Arg(1)))
    if err2190 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2191 := (strconv.Atoi(flag.Arg(2)))
    if err2191 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeGeneric(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeSpecific":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeSpecific requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2192 := (strconv.Atoi(flag.Arg(1)))
    if err2192 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2193 := (strconv.Atoi(flag.Arg(2)))
    if err2193 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeSpecific(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeType":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeType requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2194 := (strconv.Atoi(flag.Arg(1)))
    if err2194 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2195 := (strconv.Atoi(flag.Arg(2)))
    if err2195 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeType(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeNeighbors":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeNeighbors requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2196 := (strconv.Atoi(flag.Arg(1)))
    if err2196 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2197 := (strconv.Atoi(flag.Arg(2)))
    if err2197 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeNeighbors(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeManufacturerName":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeManufacturerName requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2198 := (strconv.Atoi(flag.Arg(1)))
    if err2198 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2199 := (strconv.Atoi(flag.Arg(2)))
    if err2199 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeManufacturerName(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeProductName":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeProductName requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2200 := (strconv.Atoi(flag.Arg(1)))
    if err2200 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2201 := (strconv.Atoi(flag.Arg(2)))
    if err2201 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeProductName(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeName":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeName requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2202 := (strconv.Atoi(flag.Arg(1)))
    if err2202 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2203 := (strconv.Atoi(flag.Arg(2)))
    if err2203 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeName(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeLocation":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeLocation requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2204 := (strconv.Atoi(flag.Arg(1)))
    if err2204 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2205 := (strconv.Atoi(flag.Arg(2)))
    if err2205 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeLocation(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeManufacturerId":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeManufacturerId requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2206 := (strconv.Atoi(flag.Arg(1)))
    if err2206 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2207 := (strconv.Atoi(flag.Arg(2)))
    if err2207 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeManufacturerId(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeProductType":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeProductType requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2208 := (strconv.Atoi(flag.Arg(1)))
    if err2208 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2209 := (strconv.Atoi(flag.Arg(2)))
    if err2209 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeProductType(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeProductId":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeProductId requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2210 := (strconv.Atoi(flag.Arg(1)))
    if err2210 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2211 := (strconv.Atoi(flag.Arg(2)))
    if err2211 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeProductId(value0, value1))
    fmt.Print("\n")
    break
  case "SetNodeManufacturerName":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetNodeManufacturerName requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2212 := (strconv.Atoi(flag.Arg(1)))
    if err2212 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2213 := (strconv.Atoi(flag.Arg(2)))
    if err2213 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.SetNodeManufacturerName(value0, value1, value2))
    fmt.Print("\n")
    break
  case "SetNodeProductName":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetNodeProductName requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2215 := (strconv.Atoi(flag.Arg(1)))
    if err2215 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2216 := (strconv.Atoi(flag.Arg(2)))
    if err2216 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.SetNodeProductName(value0, value1, value2))
    fmt.Print("\n")
    break
  case "SetNodeName":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetNodeName requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2218 := (strconv.Atoi(flag.Arg(1)))
    if err2218 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2219 := (strconv.Atoi(flag.Arg(2)))
    if err2219 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.SetNodeName(value0, value1, value2))
    fmt.Print("\n")
    break
  case "SetNodeLocation":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetNodeLocation requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2221 := (strconv.Atoi(flag.Arg(1)))
    if err2221 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2222 := (strconv.Atoi(flag.Arg(2)))
    if err2222 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.SetNodeLocation(value0, value1, value2))
    fmt.Print("\n")
    break
  case "SetNodeOn":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetNodeOn requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2224 := (strconv.Atoi(flag.Arg(1)))
    if err2224 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2225 := (strconv.Atoi(flag.Arg(2)))
    if err2225 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.SetNodeOn(value0, value1))
    fmt.Print("\n")
    break
  case "SetNodeOff":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetNodeOff requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2226 := (strconv.Atoi(flag.Arg(1)))
    if err2226 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2227 := (strconv.Atoi(flag.Arg(2)))
    if err2227 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.SetNodeOff(value0, value1))
    fmt.Print("\n")
    break
  case "SetNodeLevel":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetNodeLevel requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2228 := (strconv.Atoi(flag.Arg(1)))
    if err2228 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2229 := (strconv.Atoi(flag.Arg(2)))
    if err2229 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    tmp2, err2230 := (strconv.Atoi(flag.Arg(3)))
    if err2230 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    fmt.Print(client.SetNodeLevel(value0, value1, value2))
    fmt.Print("\n")
    break
  case "IsNodeInfoReceived":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "IsNodeInfoReceived requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2231 := (strconv.Atoi(flag.Arg(1)))
    if err2231 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2232 := (strconv.Atoi(flag.Arg(2)))
    if err2232 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.IsNodeInfoReceived(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeClassInformation":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "GetNodeClassInformation requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2233 := (strconv.Atoi(flag.Arg(1)))
    if err2233 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2234 := (strconv.Atoi(flag.Arg(2)))
    if err2234 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    tmp2, err2235 := (strconv.Atoi(flag.Arg(3)))
    if err2235 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    fmt.Print(client.GetNodeClassInformation(value0, value1, value2))
    fmt.Print("\n")
    break
  case "IsNodeAwake":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "IsNodeAwake requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2236 := (strconv.Atoi(flag.Arg(1)))
    if err2236 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2237 := (strconv.Atoi(flag.Arg(2)))
    if err2237 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.IsNodeAwake(value0, value1))
    fmt.Print("\n")
    break
  case "IsNodeFailed":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "IsNodeFailed requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2238 := (strconv.Atoi(flag.Arg(1)))
    if err2238 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2239 := (strconv.Atoi(flag.Arg(2)))
    if err2239 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.IsNodeFailed(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeQueryStage":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeQueryStage requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2240 := (strconv.Atoi(flag.Arg(1)))
    if err2240 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2241 := (strconv.Atoi(flag.Arg(2)))
    if err2241 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeQueryStage(value0, value1))
    fmt.Print("\n")
    break
  case "GetValueLabel":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueLabel requires 1 args\n")
      flag.Usage()
    }
    arg2242 := flag.Arg(1)
    mbTrans2243 := thrift.NewTMemoryBufferLen(len(arg2242))
    defer mbTrans2243.Close()
    _, err2244 := mbTrans2243.WriteString(arg2242)
    if err2244 != nil {
      Usage()
      return
    }
    factory2245 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2246 := factory2245.GetProtocol(mbTrans2243)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2247 := argvalue0.Read(jsProt2246)
    if err2247 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueLabel(value0))
    fmt.Print("\n")
    break
  case "SetValueLabel":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetValueLabel requires 2 args\n")
      flag.Usage()
    }
    arg2248 := flag.Arg(1)
    mbTrans2249 := thrift.NewTMemoryBufferLen(len(arg2248))
    defer mbTrans2249.Close()
    _, err2250 := mbTrans2249.WriteString(arg2248)
    if err2250 != nil {
      Usage()
      return
    }
    factory2251 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2252 := factory2251.GetProtocol(mbTrans2249)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2253 := argvalue0.Read(jsProt2252)
    if err2253 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.SetValueLabel(value0, value1))
    fmt.Print("\n")
    break
  case "GetValueUnits":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueUnits requires 1 args\n")
      flag.Usage()
    }
    arg2255 := flag.Arg(1)
    mbTrans2256 := thrift.NewTMemoryBufferLen(len(arg2255))
    defer mbTrans2256.Close()
    _, err2257 := mbTrans2256.WriteString(arg2255)
    if err2257 != nil {
      Usage()
      return
    }
    factory2258 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2259 := factory2258.GetProtocol(mbTrans2256)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2260 := argvalue0.Read(jsProt2259)
    if err2260 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueUnits(value0))
    fmt.Print("\n")
    break
  case "SetValueUnits":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetValueUnits requires 2 args\n")
      flag.Usage()
    }
    arg2261 := flag.Arg(1)
    mbTrans2262 := thrift.NewTMemoryBufferLen(len(arg2261))
    defer mbTrans2262.Close()
    _, err2263 := mbTrans2262.WriteString(arg2261)
    if err2263 != nil {
      Usage()
      return
    }
    factory2264 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2265 := factory2264.GetProtocol(mbTrans2262)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2266 := argvalue0.Read(jsProt2265)
    if err2266 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.SetValueUnits(value0, value1))
    fmt.Print("\n")
    break
  case "GetValueHelp":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueHelp requires 1 args\n")
      flag.Usage()
    }
    arg2268 := flag.Arg(1)
    mbTrans2269 := thrift.NewTMemoryBufferLen(len(arg2268))
    defer mbTrans2269.Close()
    _, err2270 := mbTrans2269.WriteString(arg2268)
    if err2270 != nil {
      Usage()
      return
    }
    factory2271 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2272 := factory2271.GetProtocol(mbTrans2269)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2273 := argvalue0.Read(jsProt2272)
    if err2273 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueHelp(value0))
    fmt.Print("\n")
    break
  case "SetValueHelp":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetValueHelp requires 2 args\n")
      flag.Usage()
    }
    arg2274 := flag.Arg(1)
    mbTrans2275 := thrift.NewTMemoryBufferLen(len(arg2274))
    defer mbTrans2275.Close()
    _, err2276 := mbTrans2275.WriteString(arg2274)
    if err2276 != nil {
      Usage()
      return
    }
    factory2277 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2278 := factory2277.GetProtocol(mbTrans2275)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2279 := argvalue0.Read(jsProt2278)
    if err2279 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.SetValueHelp(value0, value1))
    fmt.Print("\n")
    break
  case "GetValueMin":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueMin requires 1 args\n")
      flag.Usage()
    }
    arg2281 := flag.Arg(1)
    mbTrans2282 := thrift.NewTMemoryBufferLen(len(arg2281))
    defer mbTrans2282.Close()
    _, err2283 := mbTrans2282.WriteString(arg2281)
    if err2283 != nil {
      Usage()
      return
    }
    factory2284 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2285 := factory2284.GetProtocol(mbTrans2282)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2286 := argvalue0.Read(jsProt2285)
    if err2286 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueMin(value0))
    fmt.Print("\n")
    break
  case "GetValueMax":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueMax requires 1 args\n")
      flag.Usage()
    }
    arg2287 := flag.Arg(1)
    mbTrans2288 := thrift.NewTMemoryBufferLen(len(arg2287))
    defer mbTrans2288.Close()
    _, err2289 := mbTrans2288.WriteString(arg2287)
    if err2289 != nil {
      Usage()
      return
    }
    factory2290 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2291 := factory2290.GetProtocol(mbTrans2288)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2292 := argvalue0.Read(jsProt2291)
    if err2292 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueMax(value0))
    fmt.Print("\n")
    break
  case "IsValueReadOnly":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "IsValueReadOnly requires 1 args\n")
      flag.Usage()
    }
    arg2293 := flag.Arg(1)
    mbTrans2294 := thrift.NewTMemoryBufferLen(len(arg2293))
    defer mbTrans2294.Close()
    _, err2295 := mbTrans2294.WriteString(arg2293)
    if err2295 != nil {
      Usage()
      return
    }
    factory2296 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2297 := factory2296.GetProtocol(mbTrans2294)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2298 := argvalue0.Read(jsProt2297)
    if err2298 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.IsValueReadOnly(value0))
    fmt.Print("\n")
    break
  case "IsValueWriteOnly":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "IsValueWriteOnly requires 1 args\n")
      flag.Usage()
    }
    arg2299 := flag.Arg(1)
    mbTrans2300 := thrift.NewTMemoryBufferLen(len(arg2299))
    defer mbTrans2300.Close()
    _, err2301 := mbTrans2300.WriteString(arg2299)
    if err2301 != nil {
      Usage()
      return
    }
    factory2302 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2303 := factory2302.GetProtocol(mbTrans2300)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2304 := argvalue0.Read(jsProt2303)
    if err2304 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.IsValueWriteOnly(value0))
    fmt.Print("\n")
    break
  case "IsValueSet":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "IsValueSet requires 1 args\n")
      flag.Usage()
    }
    arg2305 := flag.Arg(1)
    mbTrans2306 := thrift.NewTMemoryBufferLen(len(arg2305))
    defer mbTrans2306.Close()
    _, err2307 := mbTrans2306.WriteString(arg2305)
    if err2307 != nil {
      Usage()
      return
    }
    factory2308 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2309 := factory2308.GetProtocol(mbTrans2306)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2310 := argvalue0.Read(jsProt2309)
    if err2310 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.IsValueSet(value0))
    fmt.Print("\n")
    break
  case "IsValuePolled":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "IsValuePolled requires 1 args\n")
      flag.Usage()
    }
    arg2311 := flag.Arg(1)
    mbTrans2312 := thrift.NewTMemoryBufferLen(len(arg2311))
    defer mbTrans2312.Close()
    _, err2313 := mbTrans2312.WriteString(arg2311)
    if err2313 != nil {
      Usage()
      return
    }
    factory2314 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2315 := factory2314.GetProtocol(mbTrans2312)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2316 := argvalue0.Read(jsProt2315)
    if err2316 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.IsValuePolled(value0))
    fmt.Print("\n")
    break
  case "GetValueAsBool":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueAsBool requires 1 args\n")
      flag.Usage()
    }
    arg2317 := flag.Arg(1)
    mbTrans2318 := thrift.NewTMemoryBufferLen(len(arg2317))
    defer mbTrans2318.Close()
    _, err2319 := mbTrans2318.WriteString(arg2317)
    if err2319 != nil {
      Usage()
      return
    }
    factory2320 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2321 := factory2320.GetProtocol(mbTrans2318)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2322 := argvalue0.Read(jsProt2321)
    if err2322 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueAsBool(value0))
    fmt.Print("\n")
    break
  case "GetValueAsByte":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueAsByte requires 1 args\n")
      flag.Usage()
    }
    arg2323 := flag.Arg(1)
    mbTrans2324 := thrift.NewTMemoryBufferLen(len(arg2323))
    defer mbTrans2324.Close()
    _, err2325 := mbTrans2324.WriteString(arg2323)
    if err2325 != nil {
      Usage()
      return
    }
    factory2326 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2327 := factory2326.GetProtocol(mbTrans2324)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2328 := argvalue0.Read(jsProt2327)
    if err2328 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueAsByte(value0))
    fmt.Print("\n")
    break
  case "GetValueAsFloat":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueAsFloat requires 1 args\n")
      flag.Usage()
    }
    arg2329 := flag.Arg(1)
    mbTrans2330 := thrift.NewTMemoryBufferLen(len(arg2329))
    defer mbTrans2330.Close()
    _, err2331 := mbTrans2330.WriteString(arg2329)
    if err2331 != nil {
      Usage()
      return
    }
    factory2332 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2333 := factory2332.GetProtocol(mbTrans2330)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2334 := argvalue0.Read(jsProt2333)
    if err2334 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueAsFloat(value0))
    fmt.Print("\n")
    break
  case "GetValueAsInt":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueAsInt requires 1 args\n")
      flag.Usage()
    }
    arg2335 := flag.Arg(1)
    mbTrans2336 := thrift.NewTMemoryBufferLen(len(arg2335))
    defer mbTrans2336.Close()
    _, err2337 := mbTrans2336.WriteString(arg2335)
    if err2337 != nil {
      Usage()
      return
    }
    factory2338 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2339 := factory2338.GetProtocol(mbTrans2336)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2340 := argvalue0.Read(jsProt2339)
    if err2340 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueAsInt(value0))
    fmt.Print("\n")
    break
  case "GetValueAsShort":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueAsShort requires 1 args\n")
      flag.Usage()
    }
    arg2341 := flag.Arg(1)
    mbTrans2342 := thrift.NewTMemoryBufferLen(len(arg2341))
    defer mbTrans2342.Close()
    _, err2343 := mbTrans2342.WriteString(arg2341)
    if err2343 != nil {
      Usage()
      return
    }
    factory2344 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2345 := factory2344.GetProtocol(mbTrans2342)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2346 := argvalue0.Read(jsProt2345)
    if err2346 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueAsShort(value0))
    fmt.Print("\n")
    break
  case "GetValueAsString":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueAsString requires 1 args\n")
      flag.Usage()
    }
    arg2347 := flag.Arg(1)
    mbTrans2348 := thrift.NewTMemoryBufferLen(len(arg2347))
    defer mbTrans2348.Close()
    _, err2349 := mbTrans2348.WriteString(arg2347)
    if err2349 != nil {
      Usage()
      return
    }
    factory2350 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2351 := factory2350.GetProtocol(mbTrans2348)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2352 := argvalue0.Read(jsProt2351)
    if err2352 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueAsString(value0))
    fmt.Print("\n")
    break
  case "GetValueListSelection_String":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueListSelectionString requires 1 args\n")
      flag.Usage()
    }
    arg2353 := flag.Arg(1)
    mbTrans2354 := thrift.NewTMemoryBufferLen(len(arg2353))
    defer mbTrans2354.Close()
    _, err2355 := mbTrans2354.WriteString(arg2353)
    if err2355 != nil {
      Usage()
      return
    }
    factory2356 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2357 := factory2356.GetProtocol(mbTrans2354)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2358 := argvalue0.Read(jsProt2357)
    if err2358 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueListSelectionString(value0))
    fmt.Print("\n")
    break
  case "GetValueListSelection_Int32":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueListSelectionInt32 requires 1 args\n")
      flag.Usage()
    }
    arg2359 := flag.Arg(1)
    mbTrans2360 := thrift.NewTMemoryBufferLen(len(arg2359))
    defer mbTrans2360.Close()
    _, err2361 := mbTrans2360.WriteString(arg2359)
    if err2361 != nil {
      Usage()
      return
    }
    factory2362 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2363 := factory2362.GetProtocol(mbTrans2360)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2364 := argvalue0.Read(jsProt2363)
    if err2364 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueListSelectionInt32(value0))
    fmt.Print("\n")
    break
  case "GetValueListItems":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueListItems requires 1 args\n")
      flag.Usage()
    }
    arg2365 := flag.Arg(1)
    mbTrans2366 := thrift.NewTMemoryBufferLen(len(arg2365))
    defer mbTrans2366.Close()
    _, err2367 := mbTrans2366.WriteString(arg2365)
    if err2367 != nil {
      Usage()
      return
    }
    factory2368 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2369 := factory2368.GetProtocol(mbTrans2366)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2370 := argvalue0.Read(jsProt2369)
    if err2370 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueListItems(value0))
    fmt.Print("\n")
    break
  case "GetValueFloatPrecision":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueFloatPrecision requires 1 args\n")
      flag.Usage()
    }
    arg2371 := flag.Arg(1)
    mbTrans2372 := thrift.NewTMemoryBufferLen(len(arg2371))
    defer mbTrans2372.Close()
    _, err2373 := mbTrans2372.WriteString(arg2371)
    if err2373 != nil {
      Usage()
      return
    }
    factory2374 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2375 := factory2374.GetProtocol(mbTrans2372)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2376 := argvalue0.Read(jsProt2375)
    if err2376 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueFloatPrecision(value0))
    fmt.Print("\n")
    break
  case "SetValue_Bool":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetValueBool requires 2 args\n")
      flag.Usage()
    }
    arg2377 := flag.Arg(1)
    mbTrans2378 := thrift.NewTMemoryBufferLen(len(arg2377))
    defer mbTrans2378.Close()
    _, err2379 := mbTrans2378.WriteString(arg2377)
    if err2379 != nil {
      Usage()
      return
    }
    factory2380 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2381 := factory2380.GetProtocol(mbTrans2378)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2382 := argvalue0.Read(jsProt2381)
    if err2382 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2) == "true"
    value1 := argvalue1
    fmt.Print(client.SetValueBool(value0, value1))
    fmt.Print("\n")
    break
  case "SetValue_UInt8":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetValueUInt8 requires 3 args\n")
      flag.Usage()
    }
    arg2384 := flag.Arg(1)
    mbTrans2385 := thrift.NewTMemoryBufferLen(len(arg2384))
    defer mbTrans2385.Close()
    _, err2386 := mbTrans2385.WriteString(arg2384)
    if err2386 != nil {
      Usage()
      return
    }
    factory2387 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2388 := factory2387.GetProtocol(mbTrans2385)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2389 := argvalue0.Read(jsProt2388)
    if err2389 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err2390 := (strconv.Atoi(flag.Arg(2)))
    if err2390 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    tmp2, err2391 := (strconv.Atoi(flag.Arg(3)))
    if err2391 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    fmt.Print(client.SetValueUInt8(value0, value1, value2))
    fmt.Print("\n")
    break
  case "SetValue_Float":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetValueFloat requires 2 args\n")
      flag.Usage()
    }
    arg2392 := flag.Arg(1)
    mbTrans2393 := thrift.NewTMemoryBufferLen(len(arg2392))
    defer mbTrans2393.Close()
    _, err2394 := mbTrans2393.WriteString(arg2392)
    if err2394 != nil {
      Usage()
      return
    }
    factory2395 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2396 := factory2395.GetProtocol(mbTrans2393)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2397 := argvalue0.Read(jsProt2396)
    if err2397 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1, err2398 := (strconv.Atof64(flag.Arg(2)))
    if err2398 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SetValueFloat(value0, value1))
    fmt.Print("\n")
    break
  case "SetValue_Int32":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetValueInt32 requires 2 args\n")
      flag.Usage()
    }
    arg2399 := flag.Arg(1)
    mbTrans2400 := thrift.NewTMemoryBufferLen(len(arg2399))
    defer mbTrans2400.Close()
    _, err2401 := mbTrans2400.WriteString(arg2399)
    if err2401 != nil {
      Usage()
      return
    }
    factory2402 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2403 := factory2402.GetProtocol(mbTrans2400)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2404 := argvalue0.Read(jsProt2403)
    if err2404 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err2405 := (strconv.Atoi(flag.Arg(2)))
    if err2405 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    fmt.Print(client.SetValueInt32(value0, value1))
    fmt.Print("\n")
    break
  case "SetValue_Int16":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetValueInt16 requires 2 args\n")
      flag.Usage()
    }
    arg2406 := flag.Arg(1)
    mbTrans2407 := thrift.NewTMemoryBufferLen(len(arg2406))
    defer mbTrans2407.Close()
    _, err2408 := mbTrans2407.WriteString(arg2406)
    if err2408 != nil {
      Usage()
      return
    }
    factory2409 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2410 := factory2409.GetProtocol(mbTrans2407)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2411 := argvalue0.Read(jsProt2410)
    if err2411 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err2412 := (strconv.Atoi(flag.Arg(2)))
    if err2412 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.SetValueInt16(value0, value1))
    fmt.Print("\n")
    break
  case "SetValue_String":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetValueString requires 2 args\n")
      flag.Usage()
    }
    arg2413 := flag.Arg(1)
    mbTrans2414 := thrift.NewTMemoryBufferLen(len(arg2413))
    defer mbTrans2414.Close()
    _, err2415 := mbTrans2414.WriteString(arg2413)
    if err2415 != nil {
      Usage()
      return
    }
    factory2416 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2417 := factory2416.GetProtocol(mbTrans2414)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2418 := argvalue0.Read(jsProt2417)
    if err2418 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.SetValueString(value0, value1))
    fmt.Print("\n")
    break
  case "SetValueListSelection":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetValueListSelection requires 2 args\n")
      flag.Usage()
    }
    arg2420 := flag.Arg(1)
    mbTrans2421 := thrift.NewTMemoryBufferLen(len(arg2420))
    defer mbTrans2421.Close()
    _, err2422 := mbTrans2421.WriteString(arg2420)
    if err2422 != nil {
      Usage()
      return
    }
    factory2423 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2424 := factory2423.GetProtocol(mbTrans2421)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2425 := argvalue0.Read(jsProt2424)
    if err2425 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.SetValueListSelection(value0, value1))
    fmt.Print("\n")
    break
  case "RefreshValue":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "RefreshValue requires 1 args\n")
      flag.Usage()
    }
    arg2427 := flag.Arg(1)
    mbTrans2428 := thrift.NewTMemoryBufferLen(len(arg2427))
    defer mbTrans2428.Close()
    _, err2429 := mbTrans2428.WriteString(arg2427)
    if err2429 != nil {
      Usage()
      return
    }
    factory2430 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2431 := factory2430.GetProtocol(mbTrans2428)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2432 := argvalue0.Read(jsProt2431)
    if err2432 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RefreshValue(value0))
    fmt.Print("\n")
    break
  case "SetChangeVerified":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetChangeVerified requires 2 args\n")
      flag.Usage()
    }
    arg2433 := flag.Arg(1)
    mbTrans2434 := thrift.NewTMemoryBufferLen(len(arg2433))
    defer mbTrans2434.Close()
    _, err2435 := mbTrans2434.WriteString(arg2433)
    if err2435 != nil {
      Usage()
      return
    }
    factory2436 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2437 := factory2436.GetProtocol(mbTrans2434)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2438 := argvalue0.Read(jsProt2437)
    if err2438 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2) == "true"
    value1 := argvalue1
    fmt.Print(client.SetChangeVerified(value0, value1))
    fmt.Print("\n")
    break
  case "PressButton":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "PressButton requires 1 args\n")
      flag.Usage()
    }
    arg2440 := flag.Arg(1)
    mbTrans2441 := thrift.NewTMemoryBufferLen(len(arg2440))
    defer mbTrans2441.Close()
    _, err2442 := mbTrans2441.WriteString(arg2440)
    if err2442 != nil {
      Usage()
      return
    }
    factory2443 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2444 := factory2443.GetProtocol(mbTrans2441)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2445 := argvalue0.Read(jsProt2444)
    if err2445 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.PressButton(value0))
    fmt.Print("\n")
    break
  case "ReleaseButton":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "ReleaseButton requires 1 args\n")
      flag.Usage()
    }
    arg2446 := flag.Arg(1)
    mbTrans2447 := thrift.NewTMemoryBufferLen(len(arg2446))
    defer mbTrans2447.Close()
    _, err2448 := mbTrans2447.WriteString(arg2446)
    if err2448 != nil {
      Usage()
      return
    }
    factory2449 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2450 := factory2449.GetProtocol(mbTrans2447)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2451 := argvalue0.Read(jsProt2450)
    if err2451 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ReleaseButton(value0))
    fmt.Print("\n")
    break
  case "GetNumSwitchPoints":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetNumSwitchPoints requires 1 args\n")
      flag.Usage()
    }
    arg2452 := flag.Arg(1)
    mbTrans2453 := thrift.NewTMemoryBufferLen(len(arg2452))
    defer mbTrans2453.Close()
    _, err2454 := mbTrans2453.WriteString(arg2452)
    if err2454 != nil {
      Usage()
      return
    }
    factory2455 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2456 := factory2455.GetProtocol(mbTrans2453)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2457 := argvalue0.Read(jsProt2456)
    if err2457 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetNumSwitchPoints(value0))
    fmt.Print("\n")
    break
  case "SetSwitchPoint":
    if flag.NArg() - 1 != 4 {
      fmt.Fprint(os.Stderr, "SetSwitchPoint requires 4 args\n")
      flag.Usage()
    }
    arg2458 := flag.Arg(1)
    mbTrans2459 := thrift.NewTMemoryBufferLen(len(arg2458))
    defer mbTrans2459.Close()
    _, err2460 := mbTrans2459.WriteString(arg2458)
    if err2460 != nil {
      Usage()
      return
    }
    factory2461 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2462 := factory2461.GetProtocol(mbTrans2459)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2463 := argvalue0.Read(jsProt2462)
    if err2463 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err2464 := (strconv.Atoi(flag.Arg(2)))
    if err2464 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    tmp2, err2465 := (strconv.Atoi(flag.Arg(3)))
    if err2465 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    tmp3, err2466 := (strconv.Atoi(flag.Arg(4)))
    if err2466 != nil {
      Usage()
      return
    }
    argvalue3 := byte(tmp3)
    value3 := argvalue3
    fmt.Print(client.SetSwitchPoint(value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "RemoveSwitchPoint":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "RemoveSwitchPoint requires 3 args\n")
      flag.Usage()
    }
    arg2467 := flag.Arg(1)
    mbTrans2468 := thrift.NewTMemoryBufferLen(len(arg2467))
    defer mbTrans2468.Close()
    _, err2469 := mbTrans2468.WriteString(arg2467)
    if err2469 != nil {
      Usage()
      return
    }
    factory2470 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2471 := factory2470.GetProtocol(mbTrans2468)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2472 := argvalue0.Read(jsProt2471)
    if err2472 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err2473 := (strconv.Atoi(flag.Arg(2)))
    if err2473 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    tmp2, err2474 := (strconv.Atoi(flag.Arg(3)))
    if err2474 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    fmt.Print(client.RemoveSwitchPoint(value0, value1, value2))
    fmt.Print("\n")
    break
  case "ClearSwitchPoints":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "ClearSwitchPoints requires 1 args\n")
      flag.Usage()
    }
    arg2475 := flag.Arg(1)
    mbTrans2476 := thrift.NewTMemoryBufferLen(len(arg2475))
    defer mbTrans2476.Close()
    _, err2477 := mbTrans2476.WriteString(arg2475)
    if err2477 != nil {
      Usage()
      return
    }
    factory2478 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2479 := factory2478.GetProtocol(mbTrans2476)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2480 := argvalue0.Read(jsProt2479)
    if err2480 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ClearSwitchPoints(value0))
    fmt.Print("\n")
    break
  case "GetSwitchPoint":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetSwitchPoint requires 2 args\n")
      flag.Usage()
    }
    arg2481 := flag.Arg(1)
    mbTrans2482 := thrift.NewTMemoryBufferLen(len(arg2481))
    defer mbTrans2482.Close()
    _, err2483 := mbTrans2482.WriteString(arg2481)
    if err2483 != nil {
      Usage()
      return
    }
    factory2484 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2485 := factory2484.GetProtocol(mbTrans2482)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2486 := argvalue0.Read(jsProt2485)
    if err2486 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err2487 := (strconv.Atoi(flag.Arg(2)))
    if err2487 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetSwitchPoint(value0, value1))
    fmt.Print("\n")
    break
  case "SwitchAllOn":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "SwitchAllOn requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2488 := (strconv.Atoi(flag.Arg(1)))
    if err2488 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.SwitchAllOn(value0))
    fmt.Print("\n")
    break
  case "SwitchAllOff":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "SwitchAllOff requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2489 := (strconv.Atoi(flag.Arg(1)))
    if err2489 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.SwitchAllOff(value0))
    fmt.Print("\n")
    break
  case "SetConfigParam":
    if flag.NArg() - 1 != 5 {
      fmt.Fprint(os.Stderr, "SetConfigParam requires 5 args\n")
      flag.Usage()
    }
    tmp0, err2490 := (strconv.Atoi(flag.Arg(1)))
    if err2490 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2491 := (strconv.Atoi(flag.Arg(2)))
    if err2491 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    tmp2, err2492 := (strconv.Atoi(flag.Arg(3)))
    if err2492 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    tmp3, err2493 := (strconv.Atoi(flag.Arg(4)))
    if err2493 != nil {
      Usage()
      return
    }
    argvalue3 := int32(tmp3)
    value3 := argvalue3
    tmp4, err2494 := (strconv.Atoi(flag.Arg(5)))
    if err2494 != nil {
      Usage()
      return
    }
    argvalue4 := byte(tmp4)
    value4 := argvalue4
    fmt.Print(client.SetConfigParam(value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "RequestConfigParam":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "RequestConfigParam requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2495 := (strconv.Atoi(flag.Arg(1)))
    if err2495 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2496 := (strconv.Atoi(flag.Arg(2)))
    if err2496 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    tmp2, err2497 := (strconv.Atoi(flag.Arg(3)))
    if err2497 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    fmt.Print(client.RequestConfigParam(value0, value1, value2))
    fmt.Print("\n")
    break
  case "RequestAllConfigParams":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "RequestAllConfigParams requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2498 := (strconv.Atoi(flag.Arg(1)))
    if err2498 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2499 := (strconv.Atoi(flag.Arg(2)))
    if err2499 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.RequestAllConfigParams(value0, value1))
    fmt.Print("\n")
    break
  case "GetNumGroups":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNumGroups requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2500 := (strconv.Atoi(flag.Arg(1)))
    if err2500 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2501 := (strconv.Atoi(flag.Arg(2)))
    if err2501 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNumGroups(value0, value1))
    fmt.Print("\n")
    break
  case "GetAssociations":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "GetAssociations requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2502 := (strconv.Atoi(flag.Arg(1)))
    if err2502 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2503 := (strconv.Atoi(flag.Arg(2)))
    if err2503 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    tmp2, err2504 := (strconv.Atoi(flag.Arg(3)))
    if err2504 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    fmt.Print(client.GetAssociations(value0, value1, value2))
    fmt.Print("\n")
    break
  case "GetMaxAssociations":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "GetMaxAssociations requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2505 := (strconv.Atoi(flag.Arg(1)))
    if err2505 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2506 := (strconv.Atoi(flag.Arg(2)))
    if err2506 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    tmp2, err2507 := (strconv.Atoi(flag.Arg(3)))
    if err2507 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    fmt.Print(client.GetMaxAssociations(value0, value1, value2))
    fmt.Print("\n")
    break
  case "GetGroupLabel":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "GetGroupLabel requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2508 := (strconv.Atoi(flag.Arg(1)))
    if err2508 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2509 := (strconv.Atoi(flag.Arg(2)))
    if err2509 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    tmp2, err2510 := (strconv.Atoi(flag.Arg(3)))
    if err2510 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    fmt.Print(client.GetGroupLabel(value0, value1, value2))
    fmt.Print("\n")
    break
  case "AddAssociation":
    if flag.NArg() - 1 != 4 {
      fmt.Fprint(os.Stderr, "AddAssociation requires 4 args\n")
      flag.Usage()
    }
    tmp0, err2511 := (strconv.Atoi(flag.Arg(1)))
    if err2511 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2512 := (strconv.Atoi(flag.Arg(2)))
    if err2512 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    tmp2, err2513 := (strconv.Atoi(flag.Arg(3)))
    if err2513 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    tmp3, err2514 := (strconv.Atoi(flag.Arg(4)))
    if err2514 != nil {
      Usage()
      return
    }
    argvalue3 := byte(tmp3)
    value3 := argvalue3
    fmt.Print(client.AddAssociation(value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "RemoveAssociation":
    if flag.NArg() - 1 != 4 {
      fmt.Fprint(os.Stderr, "RemoveAssociation requires 4 args\n")
      flag.Usage()
    }
    tmp0, err2515 := (strconv.Atoi(flag.Arg(1)))
    if err2515 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2516 := (strconv.Atoi(flag.Arg(2)))
    if err2516 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    tmp2, err2517 := (strconv.Atoi(flag.Arg(3)))
    if err2517 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    tmp3, err2518 := (strconv.Atoi(flag.Arg(4)))
    if err2518 != nil {
      Usage()
      return
    }
    argvalue3 := byte(tmp3)
    value3 := argvalue3
    fmt.Print(client.RemoveAssociation(value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "ResetController":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "ResetController requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2519 := (strconv.Atoi(flag.Arg(1)))
    if err2519 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.ResetController(value0))
    fmt.Print("\n")
    break
  case "SoftReset":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "SoftReset requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2520 := (strconv.Atoi(flag.Arg(1)))
    if err2520 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.SoftReset(value0))
    fmt.Print("\n")
    break
  case "BeginControllerCommand":
    if flag.NArg() - 1 != 5 {
      fmt.Fprint(os.Stderr, "BeginControllerCommand requires 5 args\n")
      flag.Usage()
    }
    tmp0, err2521 := (strconv.Atoi(flag.Arg(1)))
    if err2521 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := OpenZWave.DriverControllerCommand(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3) == "true"
    value2 := argvalue2
    tmp3, err2523 := (strconv.Atoi(flag.Arg(4)))
    if err2523 != nil {
      Usage()
      return
    }
    argvalue3 := byte(tmp3)
    value3 := argvalue3
    tmp4, err2524 := (strconv.Atoi(flag.Arg(5)))
    if err2524 != nil {
      Usage()
      return
    }
    argvalue4 := byte(tmp4)
    value4 := argvalue4
    fmt.Print(client.BeginControllerCommand(value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "CancelControllerCommand":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "CancelControllerCommand requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2525 := (strconv.Atoi(flag.Arg(1)))
    if err2525 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.CancelControllerCommand(value0))
    fmt.Print("\n")
    break
  case "TestNetworkNode":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "TestNetworkNode requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2526 := (strconv.Atoi(flag.Arg(1)))
    if err2526 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2527 := (strconv.Atoi(flag.Arg(2)))
    if err2527 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    tmp2, err2528 := (strconv.Atoi(flag.Arg(3)))
    if err2528 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    fmt.Print(client.TestNetworkNode(value0, value1, value2))
    fmt.Print("\n")
    break
  case "TestNetwork":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "TestNetwork requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2529 := (strconv.Atoi(flag.Arg(1)))
    if err2529 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2530 := (strconv.Atoi(flag.Arg(2)))
    if err2530 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    fmt.Print(client.TestNetwork(value0, value1))
    fmt.Print("\n")
    break
  case "HealNetworkNode":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "HealNetworkNode requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2531 := (strconv.Atoi(flag.Arg(1)))
    if err2531 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2532 := (strconv.Atoi(flag.Arg(2)))
    if err2532 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3) == "true"
    value2 := argvalue2
    fmt.Print(client.HealNetworkNode(value0, value1, value2))
    fmt.Print("\n")
    break
  case "HealNetwork":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "HealNetwork requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2534 := (strconv.Atoi(flag.Arg(1)))
    if err2534 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2) == "true"
    value1 := argvalue1
    fmt.Print(client.HealNetwork(value0, value1))
    fmt.Print("\n")
    break
  case "GetNumScenes":
    if flag.NArg() - 1 != 0 {
      fmt.Fprint(os.Stderr, "GetNumScenes requires 0 args\n")
      flag.Usage()
    }
    fmt.Print(client.GetNumScenes())
    fmt.Print("\n")
    break
  case "GetAllScenes":
    if flag.NArg() - 1 != 0 {
      fmt.Fprint(os.Stderr, "GetAllScenes requires 0 args\n")
      flag.Usage()
    }
    fmt.Print(client.GetAllScenes())
    fmt.Print("\n")
    break
  case "RemoveAllScenes":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "RemoveAllScenes requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2536 := (strconv.Atoi(flag.Arg(1)))
    if err2536 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.RemoveAllScenes(value0))
    fmt.Print("\n")
    break
  case "CreateScene":
    if flag.NArg() - 1 != 0 {
      fmt.Fprint(os.Stderr, "CreateScene requires 0 args\n")
      flag.Usage()
    }
    fmt.Print(client.CreateScene())
    fmt.Print("\n")
    break
  case "RemoveScene":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "RemoveScene requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2537 := (strconv.Atoi(flag.Arg(1)))
    if err2537 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    fmt.Print(client.RemoveScene(value0))
    fmt.Print("\n")
    break
  case "AddSceneValue_Bool":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "AddSceneValueBool requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2538 := (strconv.Atoi(flag.Arg(1)))
    if err2538 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2539 := flag.Arg(2)
    mbTrans2540 := thrift.NewTMemoryBufferLen(len(arg2539))
    defer mbTrans2540.Close()
    _, err2541 := mbTrans2540.WriteString(arg2539)
    if err2541 != nil {
      Usage()
      return
    }
    factory2542 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2543 := factory2542.GetProtocol(mbTrans2540)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2544 := argvalue1.Read(jsProt2543)
    if err2544 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := flag.Arg(3) == "true"
    value2 := argvalue2
    fmt.Print(client.AddSceneValueBool(value0, value1, value2))
    fmt.Print("\n")
    break
  case "AddSceneValue_Uint8":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "AddSceneValueUint8 requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2546 := (strconv.Atoi(flag.Arg(1)))
    if err2546 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2547 := flag.Arg(2)
    mbTrans2548 := thrift.NewTMemoryBufferLen(len(arg2547))
    defer mbTrans2548.Close()
    _, err2549 := mbTrans2548.WriteString(arg2547)
    if err2549 != nil {
      Usage()
      return
    }
    factory2550 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2551 := factory2550.GetProtocol(mbTrans2548)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2552 := argvalue1.Read(jsProt2551)
    if err2552 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    tmp2, err2553 := (strconv.Atoi(flag.Arg(3)))
    if err2553 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    fmt.Print(client.AddSceneValueUint8(value0, value1, value2))
    fmt.Print("\n")
    break
  case "AddSceneValue_Float":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "AddSceneValueFloat requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2554 := (strconv.Atoi(flag.Arg(1)))
    if err2554 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2555 := flag.Arg(2)
    mbTrans2556 := thrift.NewTMemoryBufferLen(len(arg2555))
    defer mbTrans2556.Close()
    _, err2557 := mbTrans2556.WriteString(arg2555)
    if err2557 != nil {
      Usage()
      return
    }
    factory2558 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2559 := factory2558.GetProtocol(mbTrans2556)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2560 := argvalue1.Read(jsProt2559)
    if err2560 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2, err2561 := (strconv.Atof64(flag.Arg(3)))
    if err2561 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.AddSceneValueFloat(value0, value1, value2))
    fmt.Print("\n")
    break
  case "AddSceneValue_Int32":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "AddSceneValueInt32 requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2562 := (strconv.Atoi(flag.Arg(1)))
    if err2562 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2563 := flag.Arg(2)
    mbTrans2564 := thrift.NewTMemoryBufferLen(len(arg2563))
    defer mbTrans2564.Close()
    _, err2565 := mbTrans2564.WriteString(arg2563)
    if err2565 != nil {
      Usage()
      return
    }
    factory2566 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2567 := factory2566.GetProtocol(mbTrans2564)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2568 := argvalue1.Read(jsProt2567)
    if err2568 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    tmp2, err2569 := (strconv.Atoi(flag.Arg(3)))
    if err2569 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    fmt.Print(client.AddSceneValueInt32(value0, value1, value2))
    fmt.Print("\n")
    break
  case "AddSceneValue_Int16":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "AddSceneValueInt16 requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2570 := (strconv.Atoi(flag.Arg(1)))
    if err2570 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2571 := flag.Arg(2)
    mbTrans2572 := thrift.NewTMemoryBufferLen(len(arg2571))
    defer mbTrans2572.Close()
    _, err2573 := mbTrans2572.WriteString(arg2571)
    if err2573 != nil {
      Usage()
      return
    }
    factory2574 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2575 := factory2574.GetProtocol(mbTrans2572)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2576 := argvalue1.Read(jsProt2575)
    if err2576 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    tmp2, err2577 := (strconv.Atoi(flag.Arg(3)))
    if err2577 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    fmt.Print(client.AddSceneValueInt16(value0, value1, value2))
    fmt.Print("\n")
    break
  case "AddSceneValue_String":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "AddSceneValueString requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2578 := (strconv.Atoi(flag.Arg(1)))
    if err2578 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2579 := flag.Arg(2)
    mbTrans2580 := thrift.NewTMemoryBufferLen(len(arg2579))
    defer mbTrans2580.Close()
    _, err2581 := mbTrans2580.WriteString(arg2579)
    if err2581 != nil {
      Usage()
      return
    }
    factory2582 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2583 := factory2582.GetProtocol(mbTrans2580)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2584 := argvalue1.Read(jsProt2583)
    if err2584 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.AddSceneValueString(value0, value1, value2))
    fmt.Print("\n")
    break
  case "AddSceneValueListSelection_String":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "AddSceneValueListSelectionString requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2586 := (strconv.Atoi(flag.Arg(1)))
    if err2586 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2587 := flag.Arg(2)
    mbTrans2588 := thrift.NewTMemoryBufferLen(len(arg2587))
    defer mbTrans2588.Close()
    _, err2589 := mbTrans2588.WriteString(arg2587)
    if err2589 != nil {
      Usage()
      return
    }
    factory2590 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2591 := factory2590.GetProtocol(mbTrans2588)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2592 := argvalue1.Read(jsProt2591)
    if err2592 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.AddSceneValueListSelectionString(value0, value1, value2))
    fmt.Print("\n")
    break
  case "AddSceneValueListSelection_Int32":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "AddSceneValueListSelectionInt32 requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2594 := (strconv.Atoi(flag.Arg(1)))
    if err2594 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2595 := flag.Arg(2)
    mbTrans2596 := thrift.NewTMemoryBufferLen(len(arg2595))
    defer mbTrans2596.Close()
    _, err2597 := mbTrans2596.WriteString(arg2595)
    if err2597 != nil {
      Usage()
      return
    }
    factory2598 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2599 := factory2598.GetProtocol(mbTrans2596)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2600 := argvalue1.Read(jsProt2599)
    if err2600 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    tmp2, err2601 := (strconv.Atoi(flag.Arg(3)))
    if err2601 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    fmt.Print(client.AddSceneValueListSelectionInt32(value0, value1, value2))
    fmt.Print("\n")
    break
  case "RemoveSceneValue":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "RemoveSceneValue requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2602 := (strconv.Atoi(flag.Arg(1)))
    if err2602 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2603 := flag.Arg(2)
    mbTrans2604 := thrift.NewTMemoryBufferLen(len(arg2603))
    defer mbTrans2604.Close()
    _, err2605 := mbTrans2604.WriteString(arg2603)
    if err2605 != nil {
      Usage()
      return
    }
    factory2606 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2607 := factory2606.GetProtocol(mbTrans2604)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2608 := argvalue1.Read(jsProt2607)
    if err2608 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.RemoveSceneValue(value0, value1))
    fmt.Print("\n")
    break
  case "SceneGetValues":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "SceneGetValues requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2609 := (strconv.Atoi(flag.Arg(1)))
    if err2609 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    fmt.Print(client.SceneGetValues(value0))
    fmt.Print("\n")
    break
  case "SceneGetValueAsBool":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SceneGetValueAsBool requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2610 := (strconv.Atoi(flag.Arg(1)))
    if err2610 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2611 := flag.Arg(2)
    mbTrans2612 := thrift.NewTMemoryBufferLen(len(arg2611))
    defer mbTrans2612.Close()
    _, err2613 := mbTrans2612.WriteString(arg2611)
    if err2613 != nil {
      Usage()
      return
    }
    factory2614 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2615 := factory2614.GetProtocol(mbTrans2612)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2616 := argvalue1.Read(jsProt2615)
    if err2616 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SceneGetValueAsBool(value0, value1))
    fmt.Print("\n")
    break
  case "SceneGetValueAsByte":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SceneGetValueAsByte requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2617 := (strconv.Atoi(flag.Arg(1)))
    if err2617 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2618 := flag.Arg(2)
    mbTrans2619 := thrift.NewTMemoryBufferLen(len(arg2618))
    defer mbTrans2619.Close()
    _, err2620 := mbTrans2619.WriteString(arg2618)
    if err2620 != nil {
      Usage()
      return
    }
    factory2621 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2622 := factory2621.GetProtocol(mbTrans2619)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2623 := argvalue1.Read(jsProt2622)
    if err2623 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SceneGetValueAsByte(value0, value1))
    fmt.Print("\n")
    break
  case "SceneGetValueAsFloat":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SceneGetValueAsFloat requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2624 := (strconv.Atoi(flag.Arg(1)))
    if err2624 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2625 := flag.Arg(2)
    mbTrans2626 := thrift.NewTMemoryBufferLen(len(arg2625))
    defer mbTrans2626.Close()
    _, err2627 := mbTrans2626.WriteString(arg2625)
    if err2627 != nil {
      Usage()
      return
    }
    factory2628 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2629 := factory2628.GetProtocol(mbTrans2626)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2630 := argvalue1.Read(jsProt2629)
    if err2630 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SceneGetValueAsFloat(value0, value1))
    fmt.Print("\n")
    break
  case "SceneGetValueAsInt":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SceneGetValueAsInt requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2631 := (strconv.Atoi(flag.Arg(1)))
    if err2631 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2632 := flag.Arg(2)
    mbTrans2633 := thrift.NewTMemoryBufferLen(len(arg2632))
    defer mbTrans2633.Close()
    _, err2634 := mbTrans2633.WriteString(arg2632)
    if err2634 != nil {
      Usage()
      return
    }
    factory2635 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2636 := factory2635.GetProtocol(mbTrans2633)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2637 := argvalue1.Read(jsProt2636)
    if err2637 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SceneGetValueAsInt(value0, value1))
    fmt.Print("\n")
    break
  case "SceneGetValueAsShort":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SceneGetValueAsShort requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2638 := (strconv.Atoi(flag.Arg(1)))
    if err2638 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2639 := flag.Arg(2)
    mbTrans2640 := thrift.NewTMemoryBufferLen(len(arg2639))
    defer mbTrans2640.Close()
    _, err2641 := mbTrans2640.WriteString(arg2639)
    if err2641 != nil {
      Usage()
      return
    }
    factory2642 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2643 := factory2642.GetProtocol(mbTrans2640)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2644 := argvalue1.Read(jsProt2643)
    if err2644 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SceneGetValueAsShort(value0, value1))
    fmt.Print("\n")
    break
  case "SceneGetValueAsString":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SceneGetValueAsString requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2645 := (strconv.Atoi(flag.Arg(1)))
    if err2645 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2646 := flag.Arg(2)
    mbTrans2647 := thrift.NewTMemoryBufferLen(len(arg2646))
    defer mbTrans2647.Close()
    _, err2648 := mbTrans2647.WriteString(arg2646)
    if err2648 != nil {
      Usage()
      return
    }
    factory2649 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2650 := factory2649.GetProtocol(mbTrans2647)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2651 := argvalue1.Read(jsProt2650)
    if err2651 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SceneGetValueAsString(value0, value1))
    fmt.Print("\n")
    break
  case "SceneGetValueListSelection_String":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SceneGetValueListSelectionString requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2652 := (strconv.Atoi(flag.Arg(1)))
    if err2652 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2653 := flag.Arg(2)
    mbTrans2654 := thrift.NewTMemoryBufferLen(len(arg2653))
    defer mbTrans2654.Close()
    _, err2655 := mbTrans2654.WriteString(arg2653)
    if err2655 != nil {
      Usage()
      return
    }
    factory2656 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2657 := factory2656.GetProtocol(mbTrans2654)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2658 := argvalue1.Read(jsProt2657)
    if err2658 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SceneGetValueListSelectionString(value0, value1))
    fmt.Print("\n")
    break
  case "SceneGetValueListSelection_Int32":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SceneGetValueListSelectionInt32 requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2659 := (strconv.Atoi(flag.Arg(1)))
    if err2659 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2660 := flag.Arg(2)
    mbTrans2661 := thrift.NewTMemoryBufferLen(len(arg2660))
    defer mbTrans2661.Close()
    _, err2662 := mbTrans2661.WriteString(arg2660)
    if err2662 != nil {
      Usage()
      return
    }
    factory2663 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2664 := factory2663.GetProtocol(mbTrans2661)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2665 := argvalue1.Read(jsProt2664)
    if err2665 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SceneGetValueListSelectionInt32(value0, value1))
    fmt.Print("\n")
    break
  case "SetSceneValue_Bool":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetSceneValueBool requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2666 := (strconv.Atoi(flag.Arg(1)))
    if err2666 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2667 := flag.Arg(2)
    mbTrans2668 := thrift.NewTMemoryBufferLen(len(arg2667))
    defer mbTrans2668.Close()
    _, err2669 := mbTrans2668.WriteString(arg2667)
    if err2669 != nil {
      Usage()
      return
    }
    factory2670 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2671 := factory2670.GetProtocol(mbTrans2668)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2672 := argvalue1.Read(jsProt2671)
    if err2672 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := flag.Arg(3) == "true"
    value2 := argvalue2
    fmt.Print(client.SetSceneValueBool(value0, value1, value2))
    fmt.Print("\n")
    break
  case "SetSceneValue_Uint8":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetSceneValueUint8 requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2674 := (strconv.Atoi(flag.Arg(1)))
    if err2674 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2675 := flag.Arg(2)
    mbTrans2676 := thrift.NewTMemoryBufferLen(len(arg2675))
    defer mbTrans2676.Close()
    _, err2677 := mbTrans2676.WriteString(arg2675)
    if err2677 != nil {
      Usage()
      return
    }
    factory2678 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2679 := factory2678.GetProtocol(mbTrans2676)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2680 := argvalue1.Read(jsProt2679)
    if err2680 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    tmp2, err2681 := (strconv.Atoi(flag.Arg(3)))
    if err2681 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    fmt.Print(client.SetSceneValueUint8(value0, value1, value2))
    fmt.Print("\n")
    break
  case "SetSceneValue_Float":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetSceneValueFloat requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2682 := (strconv.Atoi(flag.Arg(1)))
    if err2682 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2683 := flag.Arg(2)
    mbTrans2684 := thrift.NewTMemoryBufferLen(len(arg2683))
    defer mbTrans2684.Close()
    _, err2685 := mbTrans2684.WriteString(arg2683)
    if err2685 != nil {
      Usage()
      return
    }
    factory2686 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2687 := factory2686.GetProtocol(mbTrans2684)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2688 := argvalue1.Read(jsProt2687)
    if err2688 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2, err2689 := (strconv.Atof64(flag.Arg(3)))
    if err2689 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.SetSceneValueFloat(value0, value1, value2))
    fmt.Print("\n")
    break
  case "SetSceneValue_Int32":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetSceneValueInt32 requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2690 := (strconv.Atoi(flag.Arg(1)))
    if err2690 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2691 := flag.Arg(2)
    mbTrans2692 := thrift.NewTMemoryBufferLen(len(arg2691))
    defer mbTrans2692.Close()
    _, err2693 := mbTrans2692.WriteString(arg2691)
    if err2693 != nil {
      Usage()
      return
    }
    factory2694 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2695 := factory2694.GetProtocol(mbTrans2692)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2696 := argvalue1.Read(jsProt2695)
    if err2696 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    tmp2, err2697 := (strconv.Atoi(flag.Arg(3)))
    if err2697 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    fmt.Print(client.SetSceneValueInt32(value0, value1, value2))
    fmt.Print("\n")
    break
  case "SetSceneValue_Int16":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetSceneValueInt16 requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2698 := (strconv.Atoi(flag.Arg(1)))
    if err2698 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2699 := flag.Arg(2)
    mbTrans2700 := thrift.NewTMemoryBufferLen(len(arg2699))
    defer mbTrans2700.Close()
    _, err2701 := mbTrans2700.WriteString(arg2699)
    if err2701 != nil {
      Usage()
      return
    }
    factory2702 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2703 := factory2702.GetProtocol(mbTrans2700)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2704 := argvalue1.Read(jsProt2703)
    if err2704 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    tmp2, err2705 := (strconv.Atoi(flag.Arg(3)))
    if err2705 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    fmt.Print(client.SetSceneValueInt16(value0, value1, value2))
    fmt.Print("\n")
    break
  case "SetSceneValue_String":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetSceneValueString requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2706 := (strconv.Atoi(flag.Arg(1)))
    if err2706 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2707 := flag.Arg(2)
    mbTrans2708 := thrift.NewTMemoryBufferLen(len(arg2707))
    defer mbTrans2708.Close()
    _, err2709 := mbTrans2708.WriteString(arg2707)
    if err2709 != nil {
      Usage()
      return
    }
    factory2710 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2711 := factory2710.GetProtocol(mbTrans2708)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2712 := argvalue1.Read(jsProt2711)
    if err2712 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.SetSceneValueString(value0, value1, value2))
    fmt.Print("\n")
    break
  case "SetSceneValueListSelection_String":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetSceneValueListSelectionString requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2714 := (strconv.Atoi(flag.Arg(1)))
    if err2714 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2715 := flag.Arg(2)
    mbTrans2716 := thrift.NewTMemoryBufferLen(len(arg2715))
    defer mbTrans2716.Close()
    _, err2717 := mbTrans2716.WriteString(arg2715)
    if err2717 != nil {
      Usage()
      return
    }
    factory2718 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2719 := factory2718.GetProtocol(mbTrans2716)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2720 := argvalue1.Read(jsProt2719)
    if err2720 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.SetSceneValueListSelectionString(value0, value1, value2))
    fmt.Print("\n")
    break
  case "SetSceneValueListSelection_Int32":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetSceneValueListSelectionInt32 requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2722 := (strconv.Atoi(flag.Arg(1)))
    if err2722 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2723 := flag.Arg(2)
    mbTrans2724 := thrift.NewTMemoryBufferLen(len(arg2723))
    defer mbTrans2724.Close()
    _, err2725 := mbTrans2724.WriteString(arg2723)
    if err2725 != nil {
      Usage()
      return
    }
    factory2726 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2727 := factory2726.GetProtocol(mbTrans2724)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2728 := argvalue1.Read(jsProt2727)
    if err2728 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    tmp2, err2729 := (strconv.Atoi(flag.Arg(3)))
    if err2729 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    fmt.Print(client.SetSceneValueListSelectionInt32(value0, value1, value2))
    fmt.Print("\n")
    break
  case "GetSceneLabel":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetSceneLabel requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2730 := (strconv.Atoi(flag.Arg(1)))
    if err2730 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetSceneLabel(value0))
    fmt.Print("\n")
    break
  case "SetSceneLabel":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetSceneLabel requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2731 := (strconv.Atoi(flag.Arg(1)))
    if err2731 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.SetSceneLabel(value0, value1))
    fmt.Print("\n")
    break
  case "SceneExists":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "SceneExists requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2733 := (strconv.Atoi(flag.Arg(1)))
    if err2733 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    fmt.Print(client.SceneExists(value0))
    fmt.Print("\n")
    break
  case "ActivateScene":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "ActivateScene requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2734 := (strconv.Atoi(flag.Arg(1)))
    if err2734 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    fmt.Print(client.ActivateScene(value0))
    fmt.Print("\n")
    break
  case "GetDriverStatistics":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetDriverStatistics requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2735 := (strconv.Atoi(flag.Arg(1)))
    if err2735 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetDriverStatistics(value0))
    fmt.Print("\n")
    break
  case "GetNodeStatistics":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeStatistics requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2736 := (strconv.Atoi(flag.Arg(1)))
    if err2736 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2737 := (strconv.Atoi(flag.Arg(2)))
    if err2737 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeStatistics(value0, value1))
    fmt.Print("\n")
    break
  case "SendAllValues":
    if flag.NArg() - 1 != 0 {
      fmt.Fprint(os.Stderr, "SendAllValues requires 0 args\n")
      flag.Usage()
    }
    fmt.Print(client.SendAllValues())
    fmt.Print("\n")
    break
  case "ping":
    if flag.NArg() - 1 != 0 {
      fmt.Fprint(os.Stderr, "Ping requires 0 args\n")
      flag.Usage()
    }
    fmt.Print(client.Ping())
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprint(os.Stderr, "Invalid function ", cmd, "\n")
  }
}
