/* Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package main

import (
        "flag"
        "fmt"
        "http"
        "net"
        "os"
        "strconv"
        "thrift"
        "thriftlib/OpenZWave"
)

func Usage() {
  fmt.Fprint(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:\n")
  flag.PrintDefaults()
  fmt.Fprint(os.Stderr, "Functions:\n")
  fmt.Fprint(os.Stderr, "  WriteConfig(_homeId int32) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetControllerNodeId(_homeId int32) (retval1784 byte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsPrimaryController(_homeId int32) (retval1785 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsStaticUpdateController(_homeId int32) (retval1786 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsBridgeController(_homeId int32) (retval1787 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetLibraryVersion(_homeId int32) (retval1788 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetLibraryTypeName(_homeId int32) (retval1789 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetSendQueueCount(_homeId int32) (retval1790 int32, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  LogDriverStatistics(_homeId int32) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetPollInterval() (retval1792 int32, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetPollInterval(_milliseconds int32, _bIntervalBetweenPolls bool) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  EnablePoll(_valueId *RemoteValueID, _intensity byte) (retval1794 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  DisablePoll(_valueId *RemoteValueID) (retval1795 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  isPolled(_valueId *RemoteValueID) (retval1796 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetPollIntensity(_valueId *RemoteValueID, _intensity byte) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  RefreshNodeInfo(_homeId int32, _nodeId byte) (retval1798 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  RequestNodeState(_homeId int32, _nodeId byte) (retval1799 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  RequestNodeDynamic(_homeId int32, _nodeId byte) (retval1800 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsNodeListeningDevice(_homeId int32, _nodeId byte) (retval1801 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsNodeFrequentListeningDevice(_homeId int32, _nodeId byte) (retval1802 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsNodeBeamingDevice(_homeId int32, _nodeId byte) (retval1803 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsNodeRoutingDevice(_homeId int32, _nodeId byte) (retval1804 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsNodeSecurityDevice(_homeId int32, _nodeId byte) (retval1805 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeMaxBaudRate(_homeId int32, _nodeId byte) (retval1806 int32, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeVersion(_homeId int32, _nodeId byte) (retval1807 byte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeSecurity(_homeId int32, _nodeId byte) (retval1808 byte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeBasic(_homeId int32, _nodeId byte) (retval1809 byte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeGeneric(_homeId int32, _nodeId byte) (retval1810 byte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeSpecific(_homeId int32, _nodeId byte) (retval1811 byte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeType(_homeId int32, _nodeId byte) (retval1812 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeNeighbors(_homeId int32, _nodeId byte) (retval1813 *UInt32ListByte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeManufacturerName(_homeId int32, _nodeId byte) (retval1814 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeProductName(_homeId int32, _nodeId byte) (retval1815 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeName(_homeId int32, _nodeId byte) (retval1816 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeLocation(_homeId int32, _nodeId byte) (retval1817 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeManufacturerId(_homeId int32, _nodeId byte) (retval1818 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeProductType(_homeId int32, _nodeId byte) (retval1819 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeProductId(_homeId int32, _nodeId byte) (retval1820 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetNodeManufacturerName(_homeId int32, _nodeId byte, _manufacturerName string) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetNodeProductName(_homeId int32, _nodeId byte, _productName string) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetNodeName(_homeId int32, _nodeId byte, _nodeName string) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetNodeLocation(_homeId int32, _nodeId byte, _location string) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetNodeOn(_homeId int32, _nodeId byte) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetNodeOff(_homeId int32, _nodeId byte) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetNodeLevel(_homeId int32, _nodeId byte, _level byte) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsNodeInfoReceived(_homeId int32, _nodeId byte) (retval1828 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeClassInformation(_homeId int32, _nodeId byte, _commandClassId byte) (retval1829 *BoolGetNodeClassInformation, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueLabel(_id *RemoteValueID) (retval1830 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetValueLabel(_id *RemoteValueID, _value string) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueUnits(_id *RemoteValueID) (retval1832 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetValueUnits(_id *RemoteValueID, _value string) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueHelp(_id *RemoteValueID) (retval1834 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetValueHelp(_id *RemoteValueID, _value string) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueMin(_id *RemoteValueID) (retval1836 int32, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueMax(_id *RemoteValueID) (retval1837 int32, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsValueReadOnly(_id *RemoteValueID) (retval1838 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsValueWriteOnly(_id *RemoteValueID) (retval1839 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsValueSet(_id *RemoteValueID) (retval1840 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsValuePolled(_id *RemoteValueID) (retval1841 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueAsBool(_id *RemoteValueID) (retval1842 *BoolBool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueAsByte(_id *RemoteValueID) (retval1843 *BoolUInt8, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueAsFloat(_id *RemoteValueID) (retval1844 *BoolFloat, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueAsInt(_id *RemoteValueID) (retval1845 *BoolInt, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueAsShort(_id *RemoteValueID) (retval1846 *BoolInt16, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueAsString(_id *RemoteValueID) (retval1847 *BoolString, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueListSelection_String(_id *RemoteValueID) (retval1848 *BoolString, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueListSelection_Int32(_id *RemoteValueID) (retval1849 *BoolInt, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueListItems(_id *RemoteValueID) (retval1850 *BoolListString, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueFloatPrecision(_id *RemoteValueID) (retval1851 *BoolUInt8, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetValue_Bool(_id *RemoteValueID, _value bool) (retval1852 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetValue_UInt8(_id *RemoteValueID, _value byte) (retval1853 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetValue_Float(_id *RemoteValueID, _value float64) (retval1854 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetValue_Int32(_id *RemoteValueID, _value int32) (retval1855 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetValue_Int16(_id *RemoteValueID, _value int16) (retval1856 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetValue_String(_id *RemoteValueID, _value string) (retval1857 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetValueListSelection(_id *RemoteValueID, _selectedItem string) (retval1858 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  RefreshValue(_id *RemoteValueID) (retval1859 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  PressButton(_id *RemoteValueID) (retval1860 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  ReleaseButton(_id *RemoteValueID) (retval1861 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNumSwitchPoints(_id *RemoteValueID) (retval1862 byte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetSwitchPoint(_id *RemoteValueID, _hours byte, _minutes byte, _setback byte) (retval1863 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  RemoveSwitchPoint(_id *RemoteValueID, _hours byte, _minutes byte) (retval1864 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  ClearSwitchPoints(_id *RemoteValueID) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetSwitchPoint(_id *RemoteValueID, _idx byte) (retval1866 *GetSwitchPointReturnStruct, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SwitchAllOn(_homeId int32) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SwitchAllOff(_homeId int32) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetConfigParam(_homeId int32, _nodeId byte, _param byte, _value int32, _size byte) (retval1869 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  RequestConfigParam(_homeId int32, _nodeId byte, _param byte) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  RequestAllConfigParams(_homeId int32, _nodeId byte) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNumGroups(_homeId int32, _nodeId byte) (retval1872 byte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetAssociations(_homeId int32, _nodeId byte, _groupIdx byte) (retval1873 *GetAssociationsReturnStruct, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetMaxAssociations(_homeId int32, _nodeId byte, _groupIdx byte) (retval1874 byte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetGroupLabel(_homeId int32, _nodeId byte, _groupIdx byte) (retval1875 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  AddAssociation(_homeId int32, _nodeId byte, _groupIdx byte, _targetNodeId byte) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  RemoveAssociation(_homeId int32, _nodeId byte, _groupIdx byte, _targetNodeId byte) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  ResetController(_homeId int32) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SoftReset(_homeId int32) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  BeginControllerCommand(_homeId int32, _command DriverControllerCommand, _highPower bool, _nodeId byte, _arg byte) (retval1880 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  CancelControllerCommand(_homeId int32) (retval1881 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNumScenes() (retval1882 byte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetAllScenes() (retval1883 *GetAllScenesReturnStruct, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  CreateScene() (retval1884 byte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  RemoveScene(_sceneId byte) (retval1885 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  AddSceneValue_Bool(_sceneId byte, _valueId *RemoteValueID, _value bool) (retval1886 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  AddSceneValue_Uint8(_sceneId byte, _valueId *RemoteValueID, _value byte) (retval1887 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  AddSceneValue_Float(_sceneId byte, _valueId *RemoteValueID, _value float64) (retval1888 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  AddSceneValue_Int32(_sceneId byte, _valueId *RemoteValueID, _value int32) (retval1889 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  AddSceneValue_Int16(_sceneId byte, _valueId *RemoteValueID, _value int16) (retval1890 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  AddSceneValue_String(_sceneId byte, _valueId *RemoteValueID, _value string) (retval1891 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  AddSceneValueListSelection_String(_sceneId byte, _valueId *RemoteValueID, _value string) (retval1892 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  AddSceneValueListSelection_Int32(_sceneId byte, _valueId *RemoteValueID, _value int32) (retval1893 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  RemoveSceneValue(_sceneId byte, _valueId *RemoteValueID) (retval1894 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SceneGetValues(_sceneId byte) (retval1895 *SceneGetValuesReturnStruct, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SceneGetValueAsBool(_sceneId byte, _valueId *RemoteValueID) (retval1896 *BoolBool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SceneGetValueAsByte(_sceneId byte, _valueId *RemoteValueID) (retval1897 *BoolUInt8, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SceneGetValueAsFloat(_sceneId byte, _valueId *RemoteValueID) (retval1898 *BoolFloat, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SceneGetValueAsInt(_sceneId byte, _valueId *RemoteValueID) (retval1899 *BoolInt, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SceneGetValueAsShort(_sceneId byte, _valueId *RemoteValueID) (retval1900 *BoolInt16, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SceneGetValueAsString(_sceneId byte, _valueId *RemoteValueID) (retval1901 *BoolString, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SceneGetValueListSelection_String(_sceneId byte, _valueId *RemoteValueID) (retval1902 *BoolString, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SceneGetValueListSelection_Int32(_sceneId byte, _valueId *RemoteValueID) (retval1903 *BoolInt, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetSceneValue_Bool(_sceneId byte, _valueId *RemoteValueID, _value bool) (retval1904 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetSceneValue_Uint8(_sceneId byte, _valueId *RemoteValueID, _value byte) (retval1905 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetSceneValue_Float(_sceneId byte, _valueId *RemoteValueID, _value float64) (retval1906 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetSceneValue_Int32(_sceneId byte, _valueId *RemoteValueID, _value int32) (retval1907 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetSceneValue_Int16(_sceneId byte, _valueId *RemoteValueID, _value int16) (retval1908 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetSceneValue_String(_sceneId byte, _valueId *RemoteValueID, _value string) (retval1909 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetSceneValueListSelection_String(_sceneId byte, _valueId *RemoteValueID, _value string) (retval1910 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetSceneValueListSelection_Int32(_sceneId byte, _valueId *RemoteValueID, _value int32) (retval1911 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetSceneLabel(_sceneId byte) (retval1912 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetSceneLabel(_sceneId byte, _value string) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SceneExists(_sceneId byte) (retval1914 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  ActivateScene(_sceneId byte) (retval1915 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetDriverStatistics(_homeId int32) (retval1916 *GetDriverStatisticsReturnStruct, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SendAllValues() (err os.Error)\n")
  fmt.Fprint(os.Stderr, "\n")
  os.Exit(0)
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  var help bool
  var url http.URL
  var trans thrift.TTransport
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.BoolVar(&help, "help", false, "See usage string")
  flag.Parse()
  if help || flag.NArg() == 0 {
    flag.Usage()
  }
  
  if len(urlString) > 0 {
    url, err := http.ParseURL(urlString)
    if err != nil {
      fmt.Fprint(os.Stderr, "Error parsing URL: ", err.String(), "\n")
      flag.Usage()
    }
    host = url.Host
    useHttp = len(url.Scheme) <= 0 || url.Scheme == "http"
  } else if useHttp {
    _, err := http.ParseURL(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprint(os.Stderr, "Error parsing URL: ", err.String(), "\n")
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err os.Error
  if useHttp {
    trans, err = thrift.NewTHttpClient(url.Raw)
  } else {
    addr, err := net.ResolveTCPAddr("tcp", fmt.Sprint(host, ":", port))
    if err != nil {
      fmt.Fprint(os.Stderr, "Error resolving address", err.String())
      os.Exit(1)
    }
    trans, err = thrift.NewTNonblockingSocketAddr(addr)
    if framed {
      trans = thrift.NewTFramedTransport(trans)
    }
  }
  if err != nil {
    fmt.Fprint(os.Stderr, "Error creating transport", err.String())
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactory()
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
    break
  default:
    fmt.Fprint(os.Stderr, "Invalid protocol specified: ", protocol, "\n")
    Usage()
    os.Exit(1)
  }
  client := OpenZWave.NewRemoteManagerClientFactory(trans, protocolFactory)
  if err = trans.Open(); err != nil {
    fmt.Fprint(os.Stderr, "Error opening socket to ", host, ":", port, " ", err.String())
    os.Exit(1)
  }
  
  switch cmd {
  case "WriteConfig":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "WriteConfig requires 1 args\n")
      flag.Usage()
    }
    tmp0, err1918 := (strconv.Atoi(flag.Arg(1)))
    if err1918 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.WriteConfig(value0))
    fmt.Print("\n")
    break
  case "GetControllerNodeId":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetControllerNodeId requires 1 args\n")
      flag.Usage()
    }
    tmp0, err1919 := (strconv.Atoi(flag.Arg(1)))
    if err1919 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetControllerNodeId(value0))
    fmt.Print("\n")
    break
  case "IsPrimaryController":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "IsPrimaryController requires 1 args\n")
      flag.Usage()
    }
    tmp0, err1920 := (strconv.Atoi(flag.Arg(1)))
    if err1920 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.IsPrimaryController(value0))
    fmt.Print("\n")
    break
  case "IsStaticUpdateController":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "IsStaticUpdateController requires 1 args\n")
      flag.Usage()
    }
    tmp0, err1921 := (strconv.Atoi(flag.Arg(1)))
    if err1921 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.IsStaticUpdateController(value0))
    fmt.Print("\n")
    break
  case "IsBridgeController":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "IsBridgeController requires 1 args\n")
      flag.Usage()
    }
    tmp0, err1922 := (strconv.Atoi(flag.Arg(1)))
    if err1922 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.IsBridgeController(value0))
    fmt.Print("\n")
    break
  case "GetLibraryVersion":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetLibraryVersion requires 1 args\n")
      flag.Usage()
    }
    tmp0, err1923 := (strconv.Atoi(flag.Arg(1)))
    if err1923 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetLibraryVersion(value0))
    fmt.Print("\n")
    break
  case "GetLibraryTypeName":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetLibraryTypeName requires 1 args\n")
      flag.Usage()
    }
    tmp0, err1924 := (strconv.Atoi(flag.Arg(1)))
    if err1924 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetLibraryTypeName(value0))
    fmt.Print("\n")
    break
  case "GetSendQueueCount":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetSendQueueCount requires 1 args\n")
      flag.Usage()
    }
    tmp0, err1925 := (strconv.Atoi(flag.Arg(1)))
    if err1925 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetSendQueueCount(value0))
    fmt.Print("\n")
    break
  case "LogDriverStatistics":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "LogDriverStatistics requires 1 args\n")
      flag.Usage()
    }
    tmp0, err1926 := (strconv.Atoi(flag.Arg(1)))
    if err1926 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.LogDriverStatistics(value0))
    fmt.Print("\n")
    break
  case "GetPollInterval":
    if flag.NArg() - 1 != 0 {
      fmt.Fprint(os.Stderr, "GetPollInterval requires 0 args\n")
      flag.Usage()
    }
    fmt.Print(client.GetPollInterval())
    fmt.Print("\n")
    break
  case "SetPollInterval":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetPollInterval requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1927 := (strconv.Atoi(flag.Arg(1)))
    if err1927 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2) == "true"
    value1 := argvalue1
    fmt.Print(client.SetPollInterval(value0, value1))
    fmt.Print("\n")
    break
  case "EnablePoll":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "EnablePoll requires 2 args\n")
      flag.Usage()
    }
    arg1929 := flag.Arg(1)
    mbTrans1930 := thrift.NewTMemoryBufferLen(len(arg1929))
    defer mbTrans1930.Close()
    _, err1931 := mbTrans1930.WriteString(arg1929)
    if err1931 != nil {
      Usage()
      return
    }
    factory1932 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1933 := factory1932.GetProtocol(mbTrans1930)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err1934 := argvalue0.Read(jsProt1933)
    if err1934 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err1935 := (strconv.Atoi(flag.Arg(2)))
    if err1935 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.EnablePoll(value0, value1))
    fmt.Print("\n")
    break
  case "DisablePoll":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "DisablePoll requires 1 args\n")
      flag.Usage()
    }
    arg1936 := flag.Arg(1)
    mbTrans1937 := thrift.NewTMemoryBufferLen(len(arg1936))
    defer mbTrans1937.Close()
    _, err1938 := mbTrans1937.WriteString(arg1936)
    if err1938 != nil {
      Usage()
      return
    }
    factory1939 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1940 := factory1939.GetProtocol(mbTrans1937)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err1941 := argvalue0.Read(jsProt1940)
    if err1941 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DisablePoll(value0))
    fmt.Print("\n")
    break
  case "isPolled":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "IsPolled requires 1 args\n")
      flag.Usage()
    }
    arg1942 := flag.Arg(1)
    mbTrans1943 := thrift.NewTMemoryBufferLen(len(arg1942))
    defer mbTrans1943.Close()
    _, err1944 := mbTrans1943.WriteString(arg1942)
    if err1944 != nil {
      Usage()
      return
    }
    factory1945 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1946 := factory1945.GetProtocol(mbTrans1943)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err1947 := argvalue0.Read(jsProt1946)
    if err1947 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.IsPolled(value0))
    fmt.Print("\n")
    break
  case "SetPollIntensity":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetPollIntensity requires 2 args\n")
      flag.Usage()
    }
    arg1948 := flag.Arg(1)
    mbTrans1949 := thrift.NewTMemoryBufferLen(len(arg1948))
    defer mbTrans1949.Close()
    _, err1950 := mbTrans1949.WriteString(arg1948)
    if err1950 != nil {
      Usage()
      return
    }
    factory1951 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1952 := factory1951.GetProtocol(mbTrans1949)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err1953 := argvalue0.Read(jsProt1952)
    if err1953 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err1954 := (strconv.Atoi(flag.Arg(2)))
    if err1954 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.SetPollIntensity(value0, value1))
    fmt.Print("\n")
    break
  case "RefreshNodeInfo":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "RefreshNodeInfo requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1955 := (strconv.Atoi(flag.Arg(1)))
    if err1955 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1956 := (strconv.Atoi(flag.Arg(2)))
    if err1956 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.RefreshNodeInfo(value0, value1))
    fmt.Print("\n")
    break
  case "RequestNodeState":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "RequestNodeState requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1957 := (strconv.Atoi(flag.Arg(1)))
    if err1957 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1958 := (strconv.Atoi(flag.Arg(2)))
    if err1958 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.RequestNodeState(value0, value1))
    fmt.Print("\n")
    break
  case "RequestNodeDynamic":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "RequestNodeDynamic requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1959 := (strconv.Atoi(flag.Arg(1)))
    if err1959 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1960 := (strconv.Atoi(flag.Arg(2)))
    if err1960 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.RequestNodeDynamic(value0, value1))
    fmt.Print("\n")
    break
  case "IsNodeListeningDevice":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "IsNodeListeningDevice requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1961 := (strconv.Atoi(flag.Arg(1)))
    if err1961 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1962 := (strconv.Atoi(flag.Arg(2)))
    if err1962 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.IsNodeListeningDevice(value0, value1))
    fmt.Print("\n")
    break
  case "IsNodeFrequentListeningDevice":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "IsNodeFrequentListeningDevice requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1963 := (strconv.Atoi(flag.Arg(1)))
    if err1963 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1964 := (strconv.Atoi(flag.Arg(2)))
    if err1964 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.IsNodeFrequentListeningDevice(value0, value1))
    fmt.Print("\n")
    break
  case "IsNodeBeamingDevice":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "IsNodeBeamingDevice requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1965 := (strconv.Atoi(flag.Arg(1)))
    if err1965 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1966 := (strconv.Atoi(flag.Arg(2)))
    if err1966 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.IsNodeBeamingDevice(value0, value1))
    fmt.Print("\n")
    break
  case "IsNodeRoutingDevice":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "IsNodeRoutingDevice requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1967 := (strconv.Atoi(flag.Arg(1)))
    if err1967 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1968 := (strconv.Atoi(flag.Arg(2)))
    if err1968 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.IsNodeRoutingDevice(value0, value1))
    fmt.Print("\n")
    break
  case "IsNodeSecurityDevice":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "IsNodeSecurityDevice requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1969 := (strconv.Atoi(flag.Arg(1)))
    if err1969 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1970 := (strconv.Atoi(flag.Arg(2)))
    if err1970 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.IsNodeSecurityDevice(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeMaxBaudRate":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeMaxBaudRate requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1971 := (strconv.Atoi(flag.Arg(1)))
    if err1971 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1972 := (strconv.Atoi(flag.Arg(2)))
    if err1972 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeMaxBaudRate(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeVersion":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeVersion requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1973 := (strconv.Atoi(flag.Arg(1)))
    if err1973 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1974 := (strconv.Atoi(flag.Arg(2)))
    if err1974 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeVersion(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeSecurity":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeSecurity requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1975 := (strconv.Atoi(flag.Arg(1)))
    if err1975 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1976 := (strconv.Atoi(flag.Arg(2)))
    if err1976 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeSecurity(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeBasic":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeBasic requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1977 := (strconv.Atoi(flag.Arg(1)))
    if err1977 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1978 := (strconv.Atoi(flag.Arg(2)))
    if err1978 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeBasic(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeGeneric":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeGeneric requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1979 := (strconv.Atoi(flag.Arg(1)))
    if err1979 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1980 := (strconv.Atoi(flag.Arg(2)))
    if err1980 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeGeneric(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeSpecific":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeSpecific requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1981 := (strconv.Atoi(flag.Arg(1)))
    if err1981 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1982 := (strconv.Atoi(flag.Arg(2)))
    if err1982 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeSpecific(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeType":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeType requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1983 := (strconv.Atoi(flag.Arg(1)))
    if err1983 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1984 := (strconv.Atoi(flag.Arg(2)))
    if err1984 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeType(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeNeighbors":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeNeighbors requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1985 := (strconv.Atoi(flag.Arg(1)))
    if err1985 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1986 := (strconv.Atoi(flag.Arg(2)))
    if err1986 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeNeighbors(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeManufacturerName":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeManufacturerName requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1987 := (strconv.Atoi(flag.Arg(1)))
    if err1987 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1988 := (strconv.Atoi(flag.Arg(2)))
    if err1988 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeManufacturerName(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeProductName":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeProductName requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1989 := (strconv.Atoi(flag.Arg(1)))
    if err1989 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1990 := (strconv.Atoi(flag.Arg(2)))
    if err1990 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeProductName(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeName":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeName requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1991 := (strconv.Atoi(flag.Arg(1)))
    if err1991 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1992 := (strconv.Atoi(flag.Arg(2)))
    if err1992 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeName(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeLocation":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeLocation requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1993 := (strconv.Atoi(flag.Arg(1)))
    if err1993 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1994 := (strconv.Atoi(flag.Arg(2)))
    if err1994 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeLocation(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeManufacturerId":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeManufacturerId requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1995 := (strconv.Atoi(flag.Arg(1)))
    if err1995 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1996 := (strconv.Atoi(flag.Arg(2)))
    if err1996 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeManufacturerId(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeProductType":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeProductType requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1997 := (strconv.Atoi(flag.Arg(1)))
    if err1997 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1998 := (strconv.Atoi(flag.Arg(2)))
    if err1998 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeProductType(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeProductId":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeProductId requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1999 := (strconv.Atoi(flag.Arg(1)))
    if err1999 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2000 := (strconv.Atoi(flag.Arg(2)))
    if err2000 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeProductId(value0, value1))
    fmt.Print("\n")
    break
  case "SetNodeManufacturerName":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetNodeManufacturerName requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2001 := (strconv.Atoi(flag.Arg(1)))
    if err2001 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2002 := (strconv.Atoi(flag.Arg(2)))
    if err2002 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.SetNodeManufacturerName(value0, value1, value2))
    fmt.Print("\n")
    break
  case "SetNodeProductName":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetNodeProductName requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2004 := (strconv.Atoi(flag.Arg(1)))
    if err2004 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2005 := (strconv.Atoi(flag.Arg(2)))
    if err2005 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.SetNodeProductName(value0, value1, value2))
    fmt.Print("\n")
    break
  case "SetNodeName":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetNodeName requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2007 := (strconv.Atoi(flag.Arg(1)))
    if err2007 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2008 := (strconv.Atoi(flag.Arg(2)))
    if err2008 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.SetNodeName(value0, value1, value2))
    fmt.Print("\n")
    break
  case "SetNodeLocation":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetNodeLocation requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2010 := (strconv.Atoi(flag.Arg(1)))
    if err2010 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2011 := (strconv.Atoi(flag.Arg(2)))
    if err2011 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.SetNodeLocation(value0, value1, value2))
    fmt.Print("\n")
    break
  case "SetNodeOn":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetNodeOn requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2013 := (strconv.Atoi(flag.Arg(1)))
    if err2013 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2014 := (strconv.Atoi(flag.Arg(2)))
    if err2014 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.SetNodeOn(value0, value1))
    fmt.Print("\n")
    break
  case "SetNodeOff":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetNodeOff requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2015 := (strconv.Atoi(flag.Arg(1)))
    if err2015 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2016 := (strconv.Atoi(flag.Arg(2)))
    if err2016 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.SetNodeOff(value0, value1))
    fmt.Print("\n")
    break
  case "SetNodeLevel":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetNodeLevel requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2017 := (strconv.Atoi(flag.Arg(1)))
    if err2017 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2018 := (strconv.Atoi(flag.Arg(2)))
    if err2018 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    tmp2, err2019 := (strconv.Atoi(flag.Arg(3)))
    if err2019 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    fmt.Print(client.SetNodeLevel(value0, value1, value2))
    fmt.Print("\n")
    break
  case "IsNodeInfoReceived":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "IsNodeInfoReceived requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2020 := (strconv.Atoi(flag.Arg(1)))
    if err2020 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2021 := (strconv.Atoi(flag.Arg(2)))
    if err2021 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.IsNodeInfoReceived(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeClassInformation":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "GetNodeClassInformation requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2022 := (strconv.Atoi(flag.Arg(1)))
    if err2022 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2023 := (strconv.Atoi(flag.Arg(2)))
    if err2023 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    tmp2, err2024 := (strconv.Atoi(flag.Arg(3)))
    if err2024 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    fmt.Print(client.GetNodeClassInformation(value0, value1, value2))
    fmt.Print("\n")
    break
  case "GetValueLabel":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueLabel requires 1 args\n")
      flag.Usage()
    }
    arg2025 := flag.Arg(1)
    mbTrans2026 := thrift.NewTMemoryBufferLen(len(arg2025))
    defer mbTrans2026.Close()
    _, err2027 := mbTrans2026.WriteString(arg2025)
    if err2027 != nil {
      Usage()
      return
    }
    factory2028 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2029 := factory2028.GetProtocol(mbTrans2026)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2030 := argvalue0.Read(jsProt2029)
    if err2030 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueLabel(value0))
    fmt.Print("\n")
    break
  case "SetValueLabel":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetValueLabel requires 2 args\n")
      flag.Usage()
    }
    arg2031 := flag.Arg(1)
    mbTrans2032 := thrift.NewTMemoryBufferLen(len(arg2031))
    defer mbTrans2032.Close()
    _, err2033 := mbTrans2032.WriteString(arg2031)
    if err2033 != nil {
      Usage()
      return
    }
    factory2034 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2035 := factory2034.GetProtocol(mbTrans2032)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2036 := argvalue0.Read(jsProt2035)
    if err2036 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.SetValueLabel(value0, value1))
    fmt.Print("\n")
    break
  case "GetValueUnits":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueUnits requires 1 args\n")
      flag.Usage()
    }
    arg2038 := flag.Arg(1)
    mbTrans2039 := thrift.NewTMemoryBufferLen(len(arg2038))
    defer mbTrans2039.Close()
    _, err2040 := mbTrans2039.WriteString(arg2038)
    if err2040 != nil {
      Usage()
      return
    }
    factory2041 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2042 := factory2041.GetProtocol(mbTrans2039)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2043 := argvalue0.Read(jsProt2042)
    if err2043 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueUnits(value0))
    fmt.Print("\n")
    break
  case "SetValueUnits":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetValueUnits requires 2 args\n")
      flag.Usage()
    }
    arg2044 := flag.Arg(1)
    mbTrans2045 := thrift.NewTMemoryBufferLen(len(arg2044))
    defer mbTrans2045.Close()
    _, err2046 := mbTrans2045.WriteString(arg2044)
    if err2046 != nil {
      Usage()
      return
    }
    factory2047 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2048 := factory2047.GetProtocol(mbTrans2045)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2049 := argvalue0.Read(jsProt2048)
    if err2049 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.SetValueUnits(value0, value1))
    fmt.Print("\n")
    break
  case "GetValueHelp":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueHelp requires 1 args\n")
      flag.Usage()
    }
    arg2051 := flag.Arg(1)
    mbTrans2052 := thrift.NewTMemoryBufferLen(len(arg2051))
    defer mbTrans2052.Close()
    _, err2053 := mbTrans2052.WriteString(arg2051)
    if err2053 != nil {
      Usage()
      return
    }
    factory2054 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2055 := factory2054.GetProtocol(mbTrans2052)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2056 := argvalue0.Read(jsProt2055)
    if err2056 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueHelp(value0))
    fmt.Print("\n")
    break
  case "SetValueHelp":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetValueHelp requires 2 args\n")
      flag.Usage()
    }
    arg2057 := flag.Arg(1)
    mbTrans2058 := thrift.NewTMemoryBufferLen(len(arg2057))
    defer mbTrans2058.Close()
    _, err2059 := mbTrans2058.WriteString(arg2057)
    if err2059 != nil {
      Usage()
      return
    }
    factory2060 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2061 := factory2060.GetProtocol(mbTrans2058)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2062 := argvalue0.Read(jsProt2061)
    if err2062 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.SetValueHelp(value0, value1))
    fmt.Print("\n")
    break
  case "GetValueMin":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueMin requires 1 args\n")
      flag.Usage()
    }
    arg2064 := flag.Arg(1)
    mbTrans2065 := thrift.NewTMemoryBufferLen(len(arg2064))
    defer mbTrans2065.Close()
    _, err2066 := mbTrans2065.WriteString(arg2064)
    if err2066 != nil {
      Usage()
      return
    }
    factory2067 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2068 := factory2067.GetProtocol(mbTrans2065)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2069 := argvalue0.Read(jsProt2068)
    if err2069 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueMin(value0))
    fmt.Print("\n")
    break
  case "GetValueMax":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueMax requires 1 args\n")
      flag.Usage()
    }
    arg2070 := flag.Arg(1)
    mbTrans2071 := thrift.NewTMemoryBufferLen(len(arg2070))
    defer mbTrans2071.Close()
    _, err2072 := mbTrans2071.WriteString(arg2070)
    if err2072 != nil {
      Usage()
      return
    }
    factory2073 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2074 := factory2073.GetProtocol(mbTrans2071)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2075 := argvalue0.Read(jsProt2074)
    if err2075 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueMax(value0))
    fmt.Print("\n")
    break
  case "IsValueReadOnly":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "IsValueReadOnly requires 1 args\n")
      flag.Usage()
    }
    arg2076 := flag.Arg(1)
    mbTrans2077 := thrift.NewTMemoryBufferLen(len(arg2076))
    defer mbTrans2077.Close()
    _, err2078 := mbTrans2077.WriteString(arg2076)
    if err2078 != nil {
      Usage()
      return
    }
    factory2079 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2080 := factory2079.GetProtocol(mbTrans2077)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2081 := argvalue0.Read(jsProt2080)
    if err2081 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.IsValueReadOnly(value0))
    fmt.Print("\n")
    break
  case "IsValueWriteOnly":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "IsValueWriteOnly requires 1 args\n")
      flag.Usage()
    }
    arg2082 := flag.Arg(1)
    mbTrans2083 := thrift.NewTMemoryBufferLen(len(arg2082))
    defer mbTrans2083.Close()
    _, err2084 := mbTrans2083.WriteString(arg2082)
    if err2084 != nil {
      Usage()
      return
    }
    factory2085 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2086 := factory2085.GetProtocol(mbTrans2083)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2087 := argvalue0.Read(jsProt2086)
    if err2087 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.IsValueWriteOnly(value0))
    fmt.Print("\n")
    break
  case "IsValueSet":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "IsValueSet requires 1 args\n")
      flag.Usage()
    }
    arg2088 := flag.Arg(1)
    mbTrans2089 := thrift.NewTMemoryBufferLen(len(arg2088))
    defer mbTrans2089.Close()
    _, err2090 := mbTrans2089.WriteString(arg2088)
    if err2090 != nil {
      Usage()
      return
    }
    factory2091 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2092 := factory2091.GetProtocol(mbTrans2089)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2093 := argvalue0.Read(jsProt2092)
    if err2093 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.IsValueSet(value0))
    fmt.Print("\n")
    break
  case "IsValuePolled":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "IsValuePolled requires 1 args\n")
      flag.Usage()
    }
    arg2094 := flag.Arg(1)
    mbTrans2095 := thrift.NewTMemoryBufferLen(len(arg2094))
    defer mbTrans2095.Close()
    _, err2096 := mbTrans2095.WriteString(arg2094)
    if err2096 != nil {
      Usage()
      return
    }
    factory2097 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2098 := factory2097.GetProtocol(mbTrans2095)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2099 := argvalue0.Read(jsProt2098)
    if err2099 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.IsValuePolled(value0))
    fmt.Print("\n")
    break
  case "GetValueAsBool":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueAsBool requires 1 args\n")
      flag.Usage()
    }
    arg2100 := flag.Arg(1)
    mbTrans2101 := thrift.NewTMemoryBufferLen(len(arg2100))
    defer mbTrans2101.Close()
    _, err2102 := mbTrans2101.WriteString(arg2100)
    if err2102 != nil {
      Usage()
      return
    }
    factory2103 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2104 := factory2103.GetProtocol(mbTrans2101)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2105 := argvalue0.Read(jsProt2104)
    if err2105 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueAsBool(value0))
    fmt.Print("\n")
    break
  case "GetValueAsByte":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueAsByte requires 1 args\n")
      flag.Usage()
    }
    arg2106 := flag.Arg(1)
    mbTrans2107 := thrift.NewTMemoryBufferLen(len(arg2106))
    defer mbTrans2107.Close()
    _, err2108 := mbTrans2107.WriteString(arg2106)
    if err2108 != nil {
      Usage()
      return
    }
    factory2109 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2110 := factory2109.GetProtocol(mbTrans2107)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2111 := argvalue0.Read(jsProt2110)
    if err2111 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueAsByte(value0))
    fmt.Print("\n")
    break
  case "GetValueAsFloat":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueAsFloat requires 1 args\n")
      flag.Usage()
    }
    arg2112 := flag.Arg(1)
    mbTrans2113 := thrift.NewTMemoryBufferLen(len(arg2112))
    defer mbTrans2113.Close()
    _, err2114 := mbTrans2113.WriteString(arg2112)
    if err2114 != nil {
      Usage()
      return
    }
    factory2115 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2116 := factory2115.GetProtocol(mbTrans2113)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2117 := argvalue0.Read(jsProt2116)
    if err2117 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueAsFloat(value0))
    fmt.Print("\n")
    break
  case "GetValueAsInt":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueAsInt requires 1 args\n")
      flag.Usage()
    }
    arg2118 := flag.Arg(1)
    mbTrans2119 := thrift.NewTMemoryBufferLen(len(arg2118))
    defer mbTrans2119.Close()
    _, err2120 := mbTrans2119.WriteString(arg2118)
    if err2120 != nil {
      Usage()
      return
    }
    factory2121 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2122 := factory2121.GetProtocol(mbTrans2119)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2123 := argvalue0.Read(jsProt2122)
    if err2123 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueAsInt(value0))
    fmt.Print("\n")
    break
  case "GetValueAsShort":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueAsShort requires 1 args\n")
      flag.Usage()
    }
    arg2124 := flag.Arg(1)
    mbTrans2125 := thrift.NewTMemoryBufferLen(len(arg2124))
    defer mbTrans2125.Close()
    _, err2126 := mbTrans2125.WriteString(arg2124)
    if err2126 != nil {
      Usage()
      return
    }
    factory2127 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2128 := factory2127.GetProtocol(mbTrans2125)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2129 := argvalue0.Read(jsProt2128)
    if err2129 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueAsShort(value0))
    fmt.Print("\n")
    break
  case "GetValueAsString":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueAsString requires 1 args\n")
      flag.Usage()
    }
    arg2130 := flag.Arg(1)
    mbTrans2131 := thrift.NewTMemoryBufferLen(len(arg2130))
    defer mbTrans2131.Close()
    _, err2132 := mbTrans2131.WriteString(arg2130)
    if err2132 != nil {
      Usage()
      return
    }
    factory2133 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2134 := factory2133.GetProtocol(mbTrans2131)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2135 := argvalue0.Read(jsProt2134)
    if err2135 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueAsString(value0))
    fmt.Print("\n")
    break
  case "GetValueListSelection_String":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueListSelectionString requires 1 args\n")
      flag.Usage()
    }
    arg2136 := flag.Arg(1)
    mbTrans2137 := thrift.NewTMemoryBufferLen(len(arg2136))
    defer mbTrans2137.Close()
    _, err2138 := mbTrans2137.WriteString(arg2136)
    if err2138 != nil {
      Usage()
      return
    }
    factory2139 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2140 := factory2139.GetProtocol(mbTrans2137)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2141 := argvalue0.Read(jsProt2140)
    if err2141 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueListSelectionString(value0))
    fmt.Print("\n")
    break
  case "GetValueListSelection_Int32":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueListSelectionInt32 requires 1 args\n")
      flag.Usage()
    }
    arg2142 := flag.Arg(1)
    mbTrans2143 := thrift.NewTMemoryBufferLen(len(arg2142))
    defer mbTrans2143.Close()
    _, err2144 := mbTrans2143.WriteString(arg2142)
    if err2144 != nil {
      Usage()
      return
    }
    factory2145 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2146 := factory2145.GetProtocol(mbTrans2143)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2147 := argvalue0.Read(jsProt2146)
    if err2147 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueListSelectionInt32(value0))
    fmt.Print("\n")
    break
  case "GetValueListItems":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueListItems requires 1 args\n")
      flag.Usage()
    }
    arg2148 := flag.Arg(1)
    mbTrans2149 := thrift.NewTMemoryBufferLen(len(arg2148))
    defer mbTrans2149.Close()
    _, err2150 := mbTrans2149.WriteString(arg2148)
    if err2150 != nil {
      Usage()
      return
    }
    factory2151 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2152 := factory2151.GetProtocol(mbTrans2149)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2153 := argvalue0.Read(jsProt2152)
    if err2153 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueListItems(value0))
    fmt.Print("\n")
    break
  case "GetValueFloatPrecision":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueFloatPrecision requires 1 args\n")
      flag.Usage()
    }
    arg2154 := flag.Arg(1)
    mbTrans2155 := thrift.NewTMemoryBufferLen(len(arg2154))
    defer mbTrans2155.Close()
    _, err2156 := mbTrans2155.WriteString(arg2154)
    if err2156 != nil {
      Usage()
      return
    }
    factory2157 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2158 := factory2157.GetProtocol(mbTrans2155)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2159 := argvalue0.Read(jsProt2158)
    if err2159 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueFloatPrecision(value0))
    fmt.Print("\n")
    break
  case "SetValue_Bool":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetValueBool requires 2 args\n")
      flag.Usage()
    }
    arg2160 := flag.Arg(1)
    mbTrans2161 := thrift.NewTMemoryBufferLen(len(arg2160))
    defer mbTrans2161.Close()
    _, err2162 := mbTrans2161.WriteString(arg2160)
    if err2162 != nil {
      Usage()
      return
    }
    factory2163 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2164 := factory2163.GetProtocol(mbTrans2161)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2165 := argvalue0.Read(jsProt2164)
    if err2165 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2) == "true"
    value1 := argvalue1
    fmt.Print(client.SetValueBool(value0, value1))
    fmt.Print("\n")
    break
  case "SetValue_UInt8":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetValueUInt8 requires 2 args\n")
      flag.Usage()
    }
    arg2167 := flag.Arg(1)
    mbTrans2168 := thrift.NewTMemoryBufferLen(len(arg2167))
    defer mbTrans2168.Close()
    _, err2169 := mbTrans2168.WriteString(arg2167)
    if err2169 != nil {
      Usage()
      return
    }
    factory2170 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2171 := factory2170.GetProtocol(mbTrans2168)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2172 := argvalue0.Read(jsProt2171)
    if err2172 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err2173 := (strconv.Atoi(flag.Arg(2)))
    if err2173 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.SetValueUInt8(value0, value1))
    fmt.Print("\n")
    break
  case "SetValue_Float":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetValueFloat requires 2 args\n")
      flag.Usage()
    }
    arg2174 := flag.Arg(1)
    mbTrans2175 := thrift.NewTMemoryBufferLen(len(arg2174))
    defer mbTrans2175.Close()
    _, err2176 := mbTrans2175.WriteString(arg2174)
    if err2176 != nil {
      Usage()
      return
    }
    factory2177 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2178 := factory2177.GetProtocol(mbTrans2175)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2179 := argvalue0.Read(jsProt2178)
    if err2179 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1, err2180 := (strconv.Atof64(flag.Arg(2)))
    if err2180 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SetValueFloat(value0, value1))
    fmt.Print("\n")
    break
  case "SetValue_Int32":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetValueInt32 requires 2 args\n")
      flag.Usage()
    }
    arg2181 := flag.Arg(1)
    mbTrans2182 := thrift.NewTMemoryBufferLen(len(arg2181))
    defer mbTrans2182.Close()
    _, err2183 := mbTrans2182.WriteString(arg2181)
    if err2183 != nil {
      Usage()
      return
    }
    factory2184 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2185 := factory2184.GetProtocol(mbTrans2182)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2186 := argvalue0.Read(jsProt2185)
    if err2186 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err2187 := (strconv.Atoi(flag.Arg(2)))
    if err2187 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    fmt.Print(client.SetValueInt32(value0, value1))
    fmt.Print("\n")
    break
  case "SetValue_Int16":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetValueInt16 requires 2 args\n")
      flag.Usage()
    }
    arg2188 := flag.Arg(1)
    mbTrans2189 := thrift.NewTMemoryBufferLen(len(arg2188))
    defer mbTrans2189.Close()
    _, err2190 := mbTrans2189.WriteString(arg2188)
    if err2190 != nil {
      Usage()
      return
    }
    factory2191 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2192 := factory2191.GetProtocol(mbTrans2189)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2193 := argvalue0.Read(jsProt2192)
    if err2193 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err2194 := (strconv.Atoi(flag.Arg(2)))
    if err2194 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.SetValueInt16(value0, value1))
    fmt.Print("\n")
    break
  case "SetValue_String":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetValueString requires 2 args\n")
      flag.Usage()
    }
    arg2195 := flag.Arg(1)
    mbTrans2196 := thrift.NewTMemoryBufferLen(len(arg2195))
    defer mbTrans2196.Close()
    _, err2197 := mbTrans2196.WriteString(arg2195)
    if err2197 != nil {
      Usage()
      return
    }
    factory2198 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2199 := factory2198.GetProtocol(mbTrans2196)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2200 := argvalue0.Read(jsProt2199)
    if err2200 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.SetValueString(value0, value1))
    fmt.Print("\n")
    break
  case "SetValueListSelection":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetValueListSelection requires 2 args\n")
      flag.Usage()
    }
    arg2202 := flag.Arg(1)
    mbTrans2203 := thrift.NewTMemoryBufferLen(len(arg2202))
    defer mbTrans2203.Close()
    _, err2204 := mbTrans2203.WriteString(arg2202)
    if err2204 != nil {
      Usage()
      return
    }
    factory2205 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2206 := factory2205.GetProtocol(mbTrans2203)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2207 := argvalue0.Read(jsProt2206)
    if err2207 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.SetValueListSelection(value0, value1))
    fmt.Print("\n")
    break
  case "RefreshValue":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "RefreshValue requires 1 args\n")
      flag.Usage()
    }
    arg2209 := flag.Arg(1)
    mbTrans2210 := thrift.NewTMemoryBufferLen(len(arg2209))
    defer mbTrans2210.Close()
    _, err2211 := mbTrans2210.WriteString(arg2209)
    if err2211 != nil {
      Usage()
      return
    }
    factory2212 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2213 := factory2212.GetProtocol(mbTrans2210)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2214 := argvalue0.Read(jsProt2213)
    if err2214 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RefreshValue(value0))
    fmt.Print("\n")
    break
  case "PressButton":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "PressButton requires 1 args\n")
      flag.Usage()
    }
    arg2215 := flag.Arg(1)
    mbTrans2216 := thrift.NewTMemoryBufferLen(len(arg2215))
    defer mbTrans2216.Close()
    _, err2217 := mbTrans2216.WriteString(arg2215)
    if err2217 != nil {
      Usage()
      return
    }
    factory2218 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2219 := factory2218.GetProtocol(mbTrans2216)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2220 := argvalue0.Read(jsProt2219)
    if err2220 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.PressButton(value0))
    fmt.Print("\n")
    break
  case "ReleaseButton":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "ReleaseButton requires 1 args\n")
      flag.Usage()
    }
    arg2221 := flag.Arg(1)
    mbTrans2222 := thrift.NewTMemoryBufferLen(len(arg2221))
    defer mbTrans2222.Close()
    _, err2223 := mbTrans2222.WriteString(arg2221)
    if err2223 != nil {
      Usage()
      return
    }
    factory2224 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2225 := factory2224.GetProtocol(mbTrans2222)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2226 := argvalue0.Read(jsProt2225)
    if err2226 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ReleaseButton(value0))
    fmt.Print("\n")
    break
  case "GetNumSwitchPoints":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetNumSwitchPoints requires 1 args\n")
      flag.Usage()
    }
    arg2227 := flag.Arg(1)
    mbTrans2228 := thrift.NewTMemoryBufferLen(len(arg2227))
    defer mbTrans2228.Close()
    _, err2229 := mbTrans2228.WriteString(arg2227)
    if err2229 != nil {
      Usage()
      return
    }
    factory2230 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2231 := factory2230.GetProtocol(mbTrans2228)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2232 := argvalue0.Read(jsProt2231)
    if err2232 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetNumSwitchPoints(value0))
    fmt.Print("\n")
    break
  case "SetSwitchPoint":
    if flag.NArg() - 1 != 4 {
      fmt.Fprint(os.Stderr, "SetSwitchPoint requires 4 args\n")
      flag.Usage()
    }
    arg2233 := flag.Arg(1)
    mbTrans2234 := thrift.NewTMemoryBufferLen(len(arg2233))
    defer mbTrans2234.Close()
    _, err2235 := mbTrans2234.WriteString(arg2233)
    if err2235 != nil {
      Usage()
      return
    }
    factory2236 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2237 := factory2236.GetProtocol(mbTrans2234)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2238 := argvalue0.Read(jsProt2237)
    if err2238 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err2239 := (strconv.Atoi(flag.Arg(2)))
    if err2239 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    tmp2, err2240 := (strconv.Atoi(flag.Arg(3)))
    if err2240 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    tmp3, err2241 := (strconv.Atoi(flag.Arg(4)))
    if err2241 != nil {
      Usage()
      return
    }
    argvalue3 := byte(tmp3)
    value3 := argvalue3
    fmt.Print(client.SetSwitchPoint(value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "RemoveSwitchPoint":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "RemoveSwitchPoint requires 3 args\n")
      flag.Usage()
    }
    arg2242 := flag.Arg(1)
    mbTrans2243 := thrift.NewTMemoryBufferLen(len(arg2242))
    defer mbTrans2243.Close()
    _, err2244 := mbTrans2243.WriteString(arg2242)
    if err2244 != nil {
      Usage()
      return
    }
    factory2245 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2246 := factory2245.GetProtocol(mbTrans2243)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2247 := argvalue0.Read(jsProt2246)
    if err2247 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err2248 := (strconv.Atoi(flag.Arg(2)))
    if err2248 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    tmp2, err2249 := (strconv.Atoi(flag.Arg(3)))
    if err2249 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    fmt.Print(client.RemoveSwitchPoint(value0, value1, value2))
    fmt.Print("\n")
    break
  case "ClearSwitchPoints":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "ClearSwitchPoints requires 1 args\n")
      flag.Usage()
    }
    arg2250 := flag.Arg(1)
    mbTrans2251 := thrift.NewTMemoryBufferLen(len(arg2250))
    defer mbTrans2251.Close()
    _, err2252 := mbTrans2251.WriteString(arg2250)
    if err2252 != nil {
      Usage()
      return
    }
    factory2253 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2254 := factory2253.GetProtocol(mbTrans2251)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2255 := argvalue0.Read(jsProt2254)
    if err2255 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ClearSwitchPoints(value0))
    fmt.Print("\n")
    break
  case "GetSwitchPoint":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetSwitchPoint requires 2 args\n")
      flag.Usage()
    }
    arg2256 := flag.Arg(1)
    mbTrans2257 := thrift.NewTMemoryBufferLen(len(arg2256))
    defer mbTrans2257.Close()
    _, err2258 := mbTrans2257.WriteString(arg2256)
    if err2258 != nil {
      Usage()
      return
    }
    factory2259 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2260 := factory2259.GetProtocol(mbTrans2257)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2261 := argvalue0.Read(jsProt2260)
    if err2261 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err2262 := (strconv.Atoi(flag.Arg(2)))
    if err2262 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetSwitchPoint(value0, value1))
    fmt.Print("\n")
    break
  case "SwitchAllOn":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "SwitchAllOn requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2263 := (strconv.Atoi(flag.Arg(1)))
    if err2263 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.SwitchAllOn(value0))
    fmt.Print("\n")
    break
  case "SwitchAllOff":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "SwitchAllOff requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2264 := (strconv.Atoi(flag.Arg(1)))
    if err2264 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.SwitchAllOff(value0))
    fmt.Print("\n")
    break
  case "SetConfigParam":
    if flag.NArg() - 1 != 5 {
      fmt.Fprint(os.Stderr, "SetConfigParam requires 5 args\n")
      flag.Usage()
    }
    tmp0, err2265 := (strconv.Atoi(flag.Arg(1)))
    if err2265 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2266 := (strconv.Atoi(flag.Arg(2)))
    if err2266 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    tmp2, err2267 := (strconv.Atoi(flag.Arg(3)))
    if err2267 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    tmp3, err2268 := (strconv.Atoi(flag.Arg(4)))
    if err2268 != nil {
      Usage()
      return
    }
    argvalue3 := int32(tmp3)
    value3 := argvalue3
    tmp4, err2269 := (strconv.Atoi(flag.Arg(5)))
    if err2269 != nil {
      Usage()
      return
    }
    argvalue4 := byte(tmp4)
    value4 := argvalue4
    fmt.Print(client.SetConfigParam(value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "RequestConfigParam":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "RequestConfigParam requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2270 := (strconv.Atoi(flag.Arg(1)))
    if err2270 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2271 := (strconv.Atoi(flag.Arg(2)))
    if err2271 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    tmp2, err2272 := (strconv.Atoi(flag.Arg(3)))
    if err2272 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    fmt.Print(client.RequestConfigParam(value0, value1, value2))
    fmt.Print("\n")
    break
  case "RequestAllConfigParams":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "RequestAllConfigParams requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2273 := (strconv.Atoi(flag.Arg(1)))
    if err2273 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2274 := (strconv.Atoi(flag.Arg(2)))
    if err2274 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.RequestAllConfigParams(value0, value1))
    fmt.Print("\n")
    break
  case "GetNumGroups":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNumGroups requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2275 := (strconv.Atoi(flag.Arg(1)))
    if err2275 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2276 := (strconv.Atoi(flag.Arg(2)))
    if err2276 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNumGroups(value0, value1))
    fmt.Print("\n")
    break
  case "GetAssociations":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "GetAssociations requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2277 := (strconv.Atoi(flag.Arg(1)))
    if err2277 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2278 := (strconv.Atoi(flag.Arg(2)))
    if err2278 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    tmp2, err2279 := (strconv.Atoi(flag.Arg(3)))
    if err2279 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    fmt.Print(client.GetAssociations(value0, value1, value2))
    fmt.Print("\n")
    break
  case "GetMaxAssociations":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "GetMaxAssociations requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2280 := (strconv.Atoi(flag.Arg(1)))
    if err2280 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2281 := (strconv.Atoi(flag.Arg(2)))
    if err2281 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    tmp2, err2282 := (strconv.Atoi(flag.Arg(3)))
    if err2282 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    fmt.Print(client.GetMaxAssociations(value0, value1, value2))
    fmt.Print("\n")
    break
  case "GetGroupLabel":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "GetGroupLabel requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2283 := (strconv.Atoi(flag.Arg(1)))
    if err2283 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2284 := (strconv.Atoi(flag.Arg(2)))
    if err2284 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    tmp2, err2285 := (strconv.Atoi(flag.Arg(3)))
    if err2285 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    fmt.Print(client.GetGroupLabel(value0, value1, value2))
    fmt.Print("\n")
    break
  case "AddAssociation":
    if flag.NArg() - 1 != 4 {
      fmt.Fprint(os.Stderr, "AddAssociation requires 4 args\n")
      flag.Usage()
    }
    tmp0, err2286 := (strconv.Atoi(flag.Arg(1)))
    if err2286 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2287 := (strconv.Atoi(flag.Arg(2)))
    if err2287 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    tmp2, err2288 := (strconv.Atoi(flag.Arg(3)))
    if err2288 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    tmp3, err2289 := (strconv.Atoi(flag.Arg(4)))
    if err2289 != nil {
      Usage()
      return
    }
    argvalue3 := byte(tmp3)
    value3 := argvalue3
    fmt.Print(client.AddAssociation(value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "RemoveAssociation":
    if flag.NArg() - 1 != 4 {
      fmt.Fprint(os.Stderr, "RemoveAssociation requires 4 args\n")
      flag.Usage()
    }
    tmp0, err2290 := (strconv.Atoi(flag.Arg(1)))
    if err2290 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2291 := (strconv.Atoi(flag.Arg(2)))
    if err2291 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    tmp2, err2292 := (strconv.Atoi(flag.Arg(3)))
    if err2292 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    tmp3, err2293 := (strconv.Atoi(flag.Arg(4)))
    if err2293 != nil {
      Usage()
      return
    }
    argvalue3 := byte(tmp3)
    value3 := argvalue3
    fmt.Print(client.RemoveAssociation(value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "ResetController":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "ResetController requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2294 := (strconv.Atoi(flag.Arg(1)))
    if err2294 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.ResetController(value0))
    fmt.Print("\n")
    break
  case "SoftReset":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "SoftReset requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2295 := (strconv.Atoi(flag.Arg(1)))
    if err2295 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.SoftReset(value0))
    fmt.Print("\n")
    break
  case "BeginControllerCommand":
    if flag.NArg() - 1 != 5 {
      fmt.Fprint(os.Stderr, "BeginControllerCommand requires 5 args\n")
      flag.Usage()
    }
    tmp0, err2296 := (strconv.Atoi(flag.Arg(1)))
    if err2296 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := OpenZWave.DriverControllerCommand(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3) == "true"
    value2 := argvalue2
    tmp3, err2298 := (strconv.Atoi(flag.Arg(4)))
    if err2298 != nil {
      Usage()
      return
    }
    argvalue3 := byte(tmp3)
    value3 := argvalue3
    tmp4, err2299 := (strconv.Atoi(flag.Arg(5)))
    if err2299 != nil {
      Usage()
      return
    }
    argvalue4 := byte(tmp4)
    value4 := argvalue4
    fmt.Print(client.BeginControllerCommand(value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "CancelControllerCommand":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "CancelControllerCommand requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2300 := (strconv.Atoi(flag.Arg(1)))
    if err2300 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.CancelControllerCommand(value0))
    fmt.Print("\n")
    break
  case "GetNumScenes":
    if flag.NArg() - 1 != 0 {
      fmt.Fprint(os.Stderr, "GetNumScenes requires 0 args\n")
      flag.Usage()
    }
    fmt.Print(client.GetNumScenes())
    fmt.Print("\n")
    break
  case "GetAllScenes":
    if flag.NArg() - 1 != 0 {
      fmt.Fprint(os.Stderr, "GetAllScenes requires 0 args\n")
      flag.Usage()
    }
    fmt.Print(client.GetAllScenes())
    fmt.Print("\n")
    break
  case "CreateScene":
    if flag.NArg() - 1 != 0 {
      fmt.Fprint(os.Stderr, "CreateScene requires 0 args\n")
      flag.Usage()
    }
    fmt.Print(client.CreateScene())
    fmt.Print("\n")
    break
  case "RemoveScene":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "RemoveScene requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2301 := (strconv.Atoi(flag.Arg(1)))
    if err2301 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    fmt.Print(client.RemoveScene(value0))
    fmt.Print("\n")
    break
  case "AddSceneValue_Bool":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "AddSceneValueBool requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2302 := (strconv.Atoi(flag.Arg(1)))
    if err2302 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2303 := flag.Arg(2)
    mbTrans2304 := thrift.NewTMemoryBufferLen(len(arg2303))
    defer mbTrans2304.Close()
    _, err2305 := mbTrans2304.WriteString(arg2303)
    if err2305 != nil {
      Usage()
      return
    }
    factory2306 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2307 := factory2306.GetProtocol(mbTrans2304)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2308 := argvalue1.Read(jsProt2307)
    if err2308 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := flag.Arg(3) == "true"
    value2 := argvalue2
    fmt.Print(client.AddSceneValueBool(value0, value1, value2))
    fmt.Print("\n")
    break
  case "AddSceneValue_Uint8":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "AddSceneValueUint8 requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2310 := (strconv.Atoi(flag.Arg(1)))
    if err2310 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2311 := flag.Arg(2)
    mbTrans2312 := thrift.NewTMemoryBufferLen(len(arg2311))
    defer mbTrans2312.Close()
    _, err2313 := mbTrans2312.WriteString(arg2311)
    if err2313 != nil {
      Usage()
      return
    }
    factory2314 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2315 := factory2314.GetProtocol(mbTrans2312)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2316 := argvalue1.Read(jsProt2315)
    if err2316 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    tmp2, err2317 := (strconv.Atoi(flag.Arg(3)))
    if err2317 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    fmt.Print(client.AddSceneValueUint8(value0, value1, value2))
    fmt.Print("\n")
    break
  case "AddSceneValue_Float":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "AddSceneValueFloat requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2318 := (strconv.Atoi(flag.Arg(1)))
    if err2318 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2319 := flag.Arg(2)
    mbTrans2320 := thrift.NewTMemoryBufferLen(len(arg2319))
    defer mbTrans2320.Close()
    _, err2321 := mbTrans2320.WriteString(arg2319)
    if err2321 != nil {
      Usage()
      return
    }
    factory2322 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2323 := factory2322.GetProtocol(mbTrans2320)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2324 := argvalue1.Read(jsProt2323)
    if err2324 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2, err2325 := (strconv.Atof64(flag.Arg(3)))
    if err2325 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.AddSceneValueFloat(value0, value1, value2))
    fmt.Print("\n")
    break
  case "AddSceneValue_Int32":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "AddSceneValueInt32 requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2326 := (strconv.Atoi(flag.Arg(1)))
    if err2326 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2327 := flag.Arg(2)
    mbTrans2328 := thrift.NewTMemoryBufferLen(len(arg2327))
    defer mbTrans2328.Close()
    _, err2329 := mbTrans2328.WriteString(arg2327)
    if err2329 != nil {
      Usage()
      return
    }
    factory2330 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2331 := factory2330.GetProtocol(mbTrans2328)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2332 := argvalue1.Read(jsProt2331)
    if err2332 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    tmp2, err2333 := (strconv.Atoi(flag.Arg(3)))
    if err2333 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    fmt.Print(client.AddSceneValueInt32(value0, value1, value2))
    fmt.Print("\n")
    break
  case "AddSceneValue_Int16":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "AddSceneValueInt16 requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2334 := (strconv.Atoi(flag.Arg(1)))
    if err2334 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2335 := flag.Arg(2)
    mbTrans2336 := thrift.NewTMemoryBufferLen(len(arg2335))
    defer mbTrans2336.Close()
    _, err2337 := mbTrans2336.WriteString(arg2335)
    if err2337 != nil {
      Usage()
      return
    }
    factory2338 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2339 := factory2338.GetProtocol(mbTrans2336)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2340 := argvalue1.Read(jsProt2339)
    if err2340 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    tmp2, err2341 := (strconv.Atoi(flag.Arg(3)))
    if err2341 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    fmt.Print(client.AddSceneValueInt16(value0, value1, value2))
    fmt.Print("\n")
    break
  case "AddSceneValue_String":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "AddSceneValueString requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2342 := (strconv.Atoi(flag.Arg(1)))
    if err2342 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2343 := flag.Arg(2)
    mbTrans2344 := thrift.NewTMemoryBufferLen(len(arg2343))
    defer mbTrans2344.Close()
    _, err2345 := mbTrans2344.WriteString(arg2343)
    if err2345 != nil {
      Usage()
      return
    }
    factory2346 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2347 := factory2346.GetProtocol(mbTrans2344)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2348 := argvalue1.Read(jsProt2347)
    if err2348 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.AddSceneValueString(value0, value1, value2))
    fmt.Print("\n")
    break
  case "AddSceneValueListSelection_String":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "AddSceneValueListSelectionString requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2350 := (strconv.Atoi(flag.Arg(1)))
    if err2350 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2351 := flag.Arg(2)
    mbTrans2352 := thrift.NewTMemoryBufferLen(len(arg2351))
    defer mbTrans2352.Close()
    _, err2353 := mbTrans2352.WriteString(arg2351)
    if err2353 != nil {
      Usage()
      return
    }
    factory2354 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2355 := factory2354.GetProtocol(mbTrans2352)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2356 := argvalue1.Read(jsProt2355)
    if err2356 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.AddSceneValueListSelectionString(value0, value1, value2))
    fmt.Print("\n")
    break
  case "AddSceneValueListSelection_Int32":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "AddSceneValueListSelectionInt32 requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2358 := (strconv.Atoi(flag.Arg(1)))
    if err2358 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2359 := flag.Arg(2)
    mbTrans2360 := thrift.NewTMemoryBufferLen(len(arg2359))
    defer mbTrans2360.Close()
    _, err2361 := mbTrans2360.WriteString(arg2359)
    if err2361 != nil {
      Usage()
      return
    }
    factory2362 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2363 := factory2362.GetProtocol(mbTrans2360)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2364 := argvalue1.Read(jsProt2363)
    if err2364 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    tmp2, err2365 := (strconv.Atoi(flag.Arg(3)))
    if err2365 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    fmt.Print(client.AddSceneValueListSelectionInt32(value0, value1, value2))
    fmt.Print("\n")
    break
  case "RemoveSceneValue":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "RemoveSceneValue requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2366 := (strconv.Atoi(flag.Arg(1)))
    if err2366 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2367 := flag.Arg(2)
    mbTrans2368 := thrift.NewTMemoryBufferLen(len(arg2367))
    defer mbTrans2368.Close()
    _, err2369 := mbTrans2368.WriteString(arg2367)
    if err2369 != nil {
      Usage()
      return
    }
    factory2370 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2371 := factory2370.GetProtocol(mbTrans2368)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2372 := argvalue1.Read(jsProt2371)
    if err2372 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.RemoveSceneValue(value0, value1))
    fmt.Print("\n")
    break
  case "SceneGetValues":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "SceneGetValues requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2373 := (strconv.Atoi(flag.Arg(1)))
    if err2373 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    fmt.Print(client.SceneGetValues(value0))
    fmt.Print("\n")
    break
  case "SceneGetValueAsBool":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SceneGetValueAsBool requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2374 := (strconv.Atoi(flag.Arg(1)))
    if err2374 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2375 := flag.Arg(2)
    mbTrans2376 := thrift.NewTMemoryBufferLen(len(arg2375))
    defer mbTrans2376.Close()
    _, err2377 := mbTrans2376.WriteString(arg2375)
    if err2377 != nil {
      Usage()
      return
    }
    factory2378 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2379 := factory2378.GetProtocol(mbTrans2376)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2380 := argvalue1.Read(jsProt2379)
    if err2380 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SceneGetValueAsBool(value0, value1))
    fmt.Print("\n")
    break
  case "SceneGetValueAsByte":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SceneGetValueAsByte requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2381 := (strconv.Atoi(flag.Arg(1)))
    if err2381 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2382 := flag.Arg(2)
    mbTrans2383 := thrift.NewTMemoryBufferLen(len(arg2382))
    defer mbTrans2383.Close()
    _, err2384 := mbTrans2383.WriteString(arg2382)
    if err2384 != nil {
      Usage()
      return
    }
    factory2385 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2386 := factory2385.GetProtocol(mbTrans2383)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2387 := argvalue1.Read(jsProt2386)
    if err2387 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SceneGetValueAsByte(value0, value1))
    fmt.Print("\n")
    break
  case "SceneGetValueAsFloat":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SceneGetValueAsFloat requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2388 := (strconv.Atoi(flag.Arg(1)))
    if err2388 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2389 := flag.Arg(2)
    mbTrans2390 := thrift.NewTMemoryBufferLen(len(arg2389))
    defer mbTrans2390.Close()
    _, err2391 := mbTrans2390.WriteString(arg2389)
    if err2391 != nil {
      Usage()
      return
    }
    factory2392 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2393 := factory2392.GetProtocol(mbTrans2390)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2394 := argvalue1.Read(jsProt2393)
    if err2394 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SceneGetValueAsFloat(value0, value1))
    fmt.Print("\n")
    break
  case "SceneGetValueAsInt":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SceneGetValueAsInt requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2395 := (strconv.Atoi(flag.Arg(1)))
    if err2395 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2396 := flag.Arg(2)
    mbTrans2397 := thrift.NewTMemoryBufferLen(len(arg2396))
    defer mbTrans2397.Close()
    _, err2398 := mbTrans2397.WriteString(arg2396)
    if err2398 != nil {
      Usage()
      return
    }
    factory2399 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2400 := factory2399.GetProtocol(mbTrans2397)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2401 := argvalue1.Read(jsProt2400)
    if err2401 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SceneGetValueAsInt(value0, value1))
    fmt.Print("\n")
    break
  case "SceneGetValueAsShort":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SceneGetValueAsShort requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2402 := (strconv.Atoi(flag.Arg(1)))
    if err2402 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2403 := flag.Arg(2)
    mbTrans2404 := thrift.NewTMemoryBufferLen(len(arg2403))
    defer mbTrans2404.Close()
    _, err2405 := mbTrans2404.WriteString(arg2403)
    if err2405 != nil {
      Usage()
      return
    }
    factory2406 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2407 := factory2406.GetProtocol(mbTrans2404)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2408 := argvalue1.Read(jsProt2407)
    if err2408 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SceneGetValueAsShort(value0, value1))
    fmt.Print("\n")
    break
  case "SceneGetValueAsString":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SceneGetValueAsString requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2409 := (strconv.Atoi(flag.Arg(1)))
    if err2409 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2410 := flag.Arg(2)
    mbTrans2411 := thrift.NewTMemoryBufferLen(len(arg2410))
    defer mbTrans2411.Close()
    _, err2412 := mbTrans2411.WriteString(arg2410)
    if err2412 != nil {
      Usage()
      return
    }
    factory2413 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2414 := factory2413.GetProtocol(mbTrans2411)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2415 := argvalue1.Read(jsProt2414)
    if err2415 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SceneGetValueAsString(value0, value1))
    fmt.Print("\n")
    break
  case "SceneGetValueListSelection_String":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SceneGetValueListSelectionString requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2416 := (strconv.Atoi(flag.Arg(1)))
    if err2416 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2417 := flag.Arg(2)
    mbTrans2418 := thrift.NewTMemoryBufferLen(len(arg2417))
    defer mbTrans2418.Close()
    _, err2419 := mbTrans2418.WriteString(arg2417)
    if err2419 != nil {
      Usage()
      return
    }
    factory2420 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2421 := factory2420.GetProtocol(mbTrans2418)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2422 := argvalue1.Read(jsProt2421)
    if err2422 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SceneGetValueListSelectionString(value0, value1))
    fmt.Print("\n")
    break
  case "SceneGetValueListSelection_Int32":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SceneGetValueListSelectionInt32 requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2423 := (strconv.Atoi(flag.Arg(1)))
    if err2423 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2424 := flag.Arg(2)
    mbTrans2425 := thrift.NewTMemoryBufferLen(len(arg2424))
    defer mbTrans2425.Close()
    _, err2426 := mbTrans2425.WriteString(arg2424)
    if err2426 != nil {
      Usage()
      return
    }
    factory2427 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2428 := factory2427.GetProtocol(mbTrans2425)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2429 := argvalue1.Read(jsProt2428)
    if err2429 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SceneGetValueListSelectionInt32(value0, value1))
    fmt.Print("\n")
    break
  case "SetSceneValue_Bool":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetSceneValueBool requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2430 := (strconv.Atoi(flag.Arg(1)))
    if err2430 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2431 := flag.Arg(2)
    mbTrans2432 := thrift.NewTMemoryBufferLen(len(arg2431))
    defer mbTrans2432.Close()
    _, err2433 := mbTrans2432.WriteString(arg2431)
    if err2433 != nil {
      Usage()
      return
    }
    factory2434 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2435 := factory2434.GetProtocol(mbTrans2432)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2436 := argvalue1.Read(jsProt2435)
    if err2436 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := flag.Arg(3) == "true"
    value2 := argvalue2
    fmt.Print(client.SetSceneValueBool(value0, value1, value2))
    fmt.Print("\n")
    break
  case "SetSceneValue_Uint8":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetSceneValueUint8 requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2438 := (strconv.Atoi(flag.Arg(1)))
    if err2438 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2439 := flag.Arg(2)
    mbTrans2440 := thrift.NewTMemoryBufferLen(len(arg2439))
    defer mbTrans2440.Close()
    _, err2441 := mbTrans2440.WriteString(arg2439)
    if err2441 != nil {
      Usage()
      return
    }
    factory2442 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2443 := factory2442.GetProtocol(mbTrans2440)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2444 := argvalue1.Read(jsProt2443)
    if err2444 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    tmp2, err2445 := (strconv.Atoi(flag.Arg(3)))
    if err2445 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    fmt.Print(client.SetSceneValueUint8(value0, value1, value2))
    fmt.Print("\n")
    break
  case "SetSceneValue_Float":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetSceneValueFloat requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2446 := (strconv.Atoi(flag.Arg(1)))
    if err2446 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2447 := flag.Arg(2)
    mbTrans2448 := thrift.NewTMemoryBufferLen(len(arg2447))
    defer mbTrans2448.Close()
    _, err2449 := mbTrans2448.WriteString(arg2447)
    if err2449 != nil {
      Usage()
      return
    }
    factory2450 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2451 := factory2450.GetProtocol(mbTrans2448)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2452 := argvalue1.Read(jsProt2451)
    if err2452 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2, err2453 := (strconv.Atof64(flag.Arg(3)))
    if err2453 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.SetSceneValueFloat(value0, value1, value2))
    fmt.Print("\n")
    break
  case "SetSceneValue_Int32":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetSceneValueInt32 requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2454 := (strconv.Atoi(flag.Arg(1)))
    if err2454 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2455 := flag.Arg(2)
    mbTrans2456 := thrift.NewTMemoryBufferLen(len(arg2455))
    defer mbTrans2456.Close()
    _, err2457 := mbTrans2456.WriteString(arg2455)
    if err2457 != nil {
      Usage()
      return
    }
    factory2458 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2459 := factory2458.GetProtocol(mbTrans2456)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2460 := argvalue1.Read(jsProt2459)
    if err2460 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    tmp2, err2461 := (strconv.Atoi(flag.Arg(3)))
    if err2461 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    fmt.Print(client.SetSceneValueInt32(value0, value1, value2))
    fmt.Print("\n")
    break
  case "SetSceneValue_Int16":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetSceneValueInt16 requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2462 := (strconv.Atoi(flag.Arg(1)))
    if err2462 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2463 := flag.Arg(2)
    mbTrans2464 := thrift.NewTMemoryBufferLen(len(arg2463))
    defer mbTrans2464.Close()
    _, err2465 := mbTrans2464.WriteString(arg2463)
    if err2465 != nil {
      Usage()
      return
    }
    factory2466 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2467 := factory2466.GetProtocol(mbTrans2464)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2468 := argvalue1.Read(jsProt2467)
    if err2468 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    tmp2, err2469 := (strconv.Atoi(flag.Arg(3)))
    if err2469 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    fmt.Print(client.SetSceneValueInt16(value0, value1, value2))
    fmt.Print("\n")
    break
  case "SetSceneValue_String":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetSceneValueString requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2470 := (strconv.Atoi(flag.Arg(1)))
    if err2470 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2471 := flag.Arg(2)
    mbTrans2472 := thrift.NewTMemoryBufferLen(len(arg2471))
    defer mbTrans2472.Close()
    _, err2473 := mbTrans2472.WriteString(arg2471)
    if err2473 != nil {
      Usage()
      return
    }
    factory2474 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2475 := factory2474.GetProtocol(mbTrans2472)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2476 := argvalue1.Read(jsProt2475)
    if err2476 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.SetSceneValueString(value0, value1, value2))
    fmt.Print("\n")
    break
  case "SetSceneValueListSelection_String":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetSceneValueListSelectionString requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2478 := (strconv.Atoi(flag.Arg(1)))
    if err2478 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2479 := flag.Arg(2)
    mbTrans2480 := thrift.NewTMemoryBufferLen(len(arg2479))
    defer mbTrans2480.Close()
    _, err2481 := mbTrans2480.WriteString(arg2479)
    if err2481 != nil {
      Usage()
      return
    }
    factory2482 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2483 := factory2482.GetProtocol(mbTrans2480)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2484 := argvalue1.Read(jsProt2483)
    if err2484 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.SetSceneValueListSelectionString(value0, value1, value2))
    fmt.Print("\n")
    break
  case "SetSceneValueListSelection_Int32":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetSceneValueListSelectionInt32 requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2486 := (strconv.Atoi(flag.Arg(1)))
    if err2486 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2487 := flag.Arg(2)
    mbTrans2488 := thrift.NewTMemoryBufferLen(len(arg2487))
    defer mbTrans2488.Close()
    _, err2489 := mbTrans2488.WriteString(arg2487)
    if err2489 != nil {
      Usage()
      return
    }
    factory2490 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2491 := factory2490.GetProtocol(mbTrans2488)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2492 := argvalue1.Read(jsProt2491)
    if err2492 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    tmp2, err2493 := (strconv.Atoi(flag.Arg(3)))
    if err2493 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    fmt.Print(client.SetSceneValueListSelectionInt32(value0, value1, value2))
    fmt.Print("\n")
    break
  case "GetSceneLabel":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetSceneLabel requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2494 := (strconv.Atoi(flag.Arg(1)))
    if err2494 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetSceneLabel(value0))
    fmt.Print("\n")
    break
  case "SetSceneLabel":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetSceneLabel requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2495 := (strconv.Atoi(flag.Arg(1)))
    if err2495 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.SetSceneLabel(value0, value1))
    fmt.Print("\n")
    break
  case "SceneExists":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "SceneExists requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2497 := (strconv.Atoi(flag.Arg(1)))
    if err2497 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    fmt.Print(client.SceneExists(value0))
    fmt.Print("\n")
    break
  case "ActivateScene":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "ActivateScene requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2498 := (strconv.Atoi(flag.Arg(1)))
    if err2498 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    fmt.Print(client.ActivateScene(value0))
    fmt.Print("\n")
    break
  case "GetDriverStatistics":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetDriverStatistics requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2499 := (strconv.Atoi(flag.Arg(1)))
    if err2499 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetDriverStatistics(value0))
    fmt.Print("\n")
    break
  case "SendAllValues":
    if flag.NArg() - 1 != 0 {
      fmt.Fprint(os.Stderr, "SendAllValues requires 0 args\n")
      flag.Usage()
    }
    fmt.Print(client.SendAllValues())
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprint(os.Stderr, "Invalid function ", cmd, "\n")
  }
}
