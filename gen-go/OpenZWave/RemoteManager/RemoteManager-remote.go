/* Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package main

import (
        "flag"
        "fmt"
        "http"
        "net"
        "os"
        "strconv"
        "thrift"
        "thriftlib/OpenZWave"
)

func Usage() {
  fmt.Fprint(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:\n")
  flag.PrintDefaults()
  fmt.Fprint(os.Stderr, "Functions:\n")
  fmt.Fprint(os.Stderr, "  WriteConfig(_homeId int32) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetControllerNodeId(_homeId int32) (retval2027 byte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetSUCNodeId(_homeId int32) (retval2028 byte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsPrimaryController(_homeId int32) (retval2029 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsStaticUpdateController(_homeId int32) (retval2030 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsBridgeController(_homeId int32) (retval2031 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetLibraryVersion(_homeId int32) (retval2032 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetLibraryTypeName(_homeId int32) (retval2033 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetSendQueueCount(_homeId int32) (retval2034 int32, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  LogDriverStatistics(_homeId int32) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetControllerInterfaceType(_homeId int32) (retval2036 int32, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetControllerPath(_homeId int32) (retval2037 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetPollInterval() (retval2038 int32, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetPollInterval(_milliseconds int32, _bIntervalBetweenPolls bool) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  EnablePoll(_valueId *RemoteValueID, _intensity byte) (retval2040 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  DisablePoll(_valueId *RemoteValueID) (retval2041 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  isPolled(_valueId *RemoteValueID) (retval2042 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetPollIntensity(_valueId *RemoteValueID, _intensity byte) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  RefreshNodeInfo(_homeId int32, _nodeId byte) (retval2044 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  RequestNodeState(_homeId int32, _nodeId byte) (retval2045 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  RequestNodeDynamic(_homeId int32, _nodeId byte) (retval2046 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsNodeListeningDevice(_homeId int32, _nodeId byte) (retval2047 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsNodeFrequentListeningDevice(_homeId int32, _nodeId byte) (retval2048 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsNodeBeamingDevice(_homeId int32, _nodeId byte) (retval2049 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsNodeRoutingDevice(_homeId int32, _nodeId byte) (retval2050 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsNodeSecurityDevice(_homeId int32, _nodeId byte) (retval2051 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeMaxBaudRate(_homeId int32, _nodeId byte) (retval2052 int32, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeVersion(_homeId int32, _nodeId byte) (retval2053 byte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeSecurity(_homeId int32, _nodeId byte) (retval2054 byte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeBasic(_homeId int32, _nodeId byte) (retval2055 byte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeGeneric(_homeId int32, _nodeId byte) (retval2056 byte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeSpecific(_homeId int32, _nodeId byte) (retval2057 byte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeType(_homeId int32, _nodeId byte) (retval2058 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeNeighbors(_homeId int32, _nodeId byte) (retval2059 *UInt32ListByte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeManufacturerName(_homeId int32, _nodeId byte) (retval2060 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeProductName(_homeId int32, _nodeId byte) (retval2061 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeName(_homeId int32, _nodeId byte) (retval2062 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeLocation(_homeId int32, _nodeId byte) (retval2063 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeManufacturerId(_homeId int32, _nodeId byte) (retval2064 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeProductType(_homeId int32, _nodeId byte) (retval2065 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeProductId(_homeId int32, _nodeId byte) (retval2066 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetNodeManufacturerName(_homeId int32, _nodeId byte, _manufacturerName string) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetNodeProductName(_homeId int32, _nodeId byte, _productName string) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetNodeName(_homeId int32, _nodeId byte, _nodeName string) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetNodeLocation(_homeId int32, _nodeId byte, _location string) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetNodeOn(_homeId int32, _nodeId byte) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetNodeOff(_homeId int32, _nodeId byte) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetNodeLevel(_homeId int32, _nodeId byte, _level byte) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsNodeInfoReceived(_homeId int32, _nodeId byte) (retval2074 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeClassInformation(_homeId int32, _nodeId byte, _commandClassId byte) (retval2075 *BoolGetNodeClassInformation, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsNodeAwake(_homeId int32, _nodeId byte) (retval2076 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsNodeFailed(_homeId int32, _nodeId byte) (retval2077 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeQueryStage(_homeId int32, _nodeId byte) (retval2078 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueLabel(_id *RemoteValueID) (retval2079 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetValueLabel(_id *RemoteValueID, _value string) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueUnits(_id *RemoteValueID) (retval2081 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetValueUnits(_id *RemoteValueID, _value string) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueHelp(_id *RemoteValueID) (retval2083 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetValueHelp(_id *RemoteValueID, _value string) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueMin(_id *RemoteValueID) (retval2085 int32, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueMax(_id *RemoteValueID) (retval2086 int32, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsValueReadOnly(_id *RemoteValueID) (retval2087 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsValueWriteOnly(_id *RemoteValueID) (retval2088 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsValueSet(_id *RemoteValueID) (retval2089 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsValuePolled(_id *RemoteValueID) (retval2090 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueAsBool(_id *RemoteValueID) (retval2091 *BoolBool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueAsByte(_id *RemoteValueID) (retval2092 *BoolUInt8, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueAsFloat(_id *RemoteValueID) (retval2093 *BoolFloat, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueAsInt(_id *RemoteValueID) (retval2094 *BoolInt, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueAsShort(_id *RemoteValueID) (retval2095 *BoolInt16, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueAsString(_id *RemoteValueID) (retval2096 *BoolString, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueListSelection_String(_id *RemoteValueID) (retval2097 *BoolString, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueListSelection_Int32(_id *RemoteValueID) (retval2098 *BoolInt, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueListItems(_id *RemoteValueID) (retval2099 *BoolListString, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueFloatPrecision(_id *RemoteValueID) (retval2100 *BoolUInt8, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetValue_Bool(_id *RemoteValueID, _value bool) (retval2101 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetValue_UInt8(_id *RemoteValueID, _value byte) (retval2102 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetValue_UInt8_UInt8(_id *RemoteValueID, _value thrift.TList, _length byte) (retval2103 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetValue_Float(_id *RemoteValueID, _value float64) (retval2104 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetValue_int32(_id *RemoteValueID, _value int32) (retval2105 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetValue_int16(_id *RemoteValueID, _value int16) (retval2106 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetValue_String(_id *RemoteValueID, _value string) (retval2107 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetValueListSelection(_id *RemoteValueID, _selectedItem string) (retval2108 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  RefreshValue(_id *RemoteValueID) (retval2109 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetChangeVerified(_id *RemoteValueID, _verify bool) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  PressButton(_id *RemoteValueID) (retval2111 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  ReleaseButton(_id *RemoteValueID) (retval2112 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNumSwitchPoints(_id *RemoteValueID) (retval2113 byte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetSwitchPoint(_id *RemoteValueID, _hours byte, _minutes byte, _setback byte) (retval2114 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  RemoveSwitchPoint(_id *RemoteValueID, _hours byte, _minutes byte) (retval2115 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  ClearSwitchPoints(_id *RemoteValueID) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetSwitchPoint(_id *RemoteValueID, _idx byte) (retval2117 *GetSwitchPointReturnStruct, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SwitchAllOn(_homeId int32) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SwitchAllOff(_homeId int32) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetConfigParam(_homeId int32, _nodeId byte, _param byte, _value int32, _size byte) (retval2120 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  RequestConfigParam(_homeId int32, _nodeId byte, _param byte) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  RequestAllConfigParams(_homeId int32, _nodeId byte) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNumGroups(_homeId int32, _nodeId byte) (retval2123 byte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetAssociations(_homeId int32, _nodeId byte, _groupIdx byte) (retval2124 *GetAssociationsReturnStruct, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetMaxAssociations(_homeId int32, _nodeId byte, _groupIdx byte) (retval2125 byte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetGroupLabel(_homeId int32, _nodeId byte, _groupIdx byte) (retval2126 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  AddAssociation(_homeId int32, _nodeId byte, _groupIdx byte, _targetNodeId byte) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  RemoveAssociation(_homeId int32, _nodeId byte, _groupIdx byte, _targetNodeId byte) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  ResetController(_homeId int32) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SoftReset(_homeId int32) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  BeginControllerCommand(_homeId int32, _command DriverControllerCommand, _highPower bool, _nodeId byte, _arg byte) (retval2131 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  CancelControllerCommand(_homeId int32) (retval2132 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  TestNetworkNode(_homeId int32, _nodeId byte, _count int32) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  TestNetwork(_homeId int32, _count int32) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  HealNetworkNode(_homeId int32, _nodeId byte, _doRR bool) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  HealNetwork(_homeId int32, _doRR bool) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNumScenes() (retval2137 byte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetAllScenes() (retval2138 *GetAllScenesReturnStruct, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  RemoveAllScenes(_homeId int32) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  CreateScene() (retval2140 byte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  RemoveScene(_sceneId byte) (retval2141 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  AddSceneValue_Bool(_sceneId byte, _valueId *RemoteValueID, _value bool) (retval2142 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  AddSceneValue_Uint8(_sceneId byte, _valueId *RemoteValueID, _value byte) (retval2143 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  AddSceneValue_Float(_sceneId byte, _valueId *RemoteValueID, _value float64) (retval2144 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  AddSceneValue_Int32(_sceneId byte, _valueId *RemoteValueID, _value int32) (retval2145 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  AddSceneValue_Int16(_sceneId byte, _valueId *RemoteValueID, _value int16) (retval2146 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  AddSceneValue_String(_sceneId byte, _valueId *RemoteValueID, _value string) (retval2147 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  AddSceneValueListSelection_String(_sceneId byte, _valueId *RemoteValueID, _value string) (retval2148 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  AddSceneValueListSelection_Int32(_sceneId byte, _valueId *RemoteValueID, _value int32) (retval2149 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  RemoveSceneValue(_sceneId byte, _valueId *RemoteValueID) (retval2150 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SceneGetValues(_sceneId byte) (retval2151 *SceneGetValuesReturnStruct, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SceneGetValueAsBool(_sceneId byte, _valueId *RemoteValueID) (retval2152 *BoolBool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SceneGetValueAsByte(_sceneId byte, _valueId *RemoteValueID) (retval2153 *BoolUInt8, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SceneGetValueAsFloat(_sceneId byte, _valueId *RemoteValueID) (retval2154 *BoolFloat, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SceneGetValueAsInt(_sceneId byte, _valueId *RemoteValueID) (retval2155 *BoolInt, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SceneGetValueAsShort(_sceneId byte, _valueId *RemoteValueID) (retval2156 *BoolInt16, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SceneGetValueAsString(_sceneId byte, _valueId *RemoteValueID) (retval2157 *BoolString, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SceneGetValueListSelection_String(_sceneId byte, _valueId *RemoteValueID) (retval2158 *BoolString, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SceneGetValueListSelection_Int32(_sceneId byte, _valueId *RemoteValueID) (retval2159 *BoolInt, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetSceneValue_Bool(_sceneId byte, _valueId *RemoteValueID, _value bool) (retval2160 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetSceneValue_Uint8(_sceneId byte, _valueId *RemoteValueID, _value byte) (retval2161 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetSceneValue_Float(_sceneId byte, _valueId *RemoteValueID, _value float64) (retval2162 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetSceneValue_Int32(_sceneId byte, _valueId *RemoteValueID, _value int32) (retval2163 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetSceneValue_Int16(_sceneId byte, _valueId *RemoteValueID, _value int16) (retval2164 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetSceneValue_String(_sceneId byte, _valueId *RemoteValueID, _value string) (retval2165 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetSceneValueListSelection_String(_sceneId byte, _valueId *RemoteValueID, _value string) (retval2166 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetSceneValueListSelection_Int32(_sceneId byte, _valueId *RemoteValueID, _value int32) (retval2167 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetSceneLabel(_sceneId byte) (retval2168 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetSceneLabel(_sceneId byte, _value string) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SceneExists(_sceneId byte) (retval2170 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  ActivateScene(_sceneId byte) (retval2171 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetDriverStatistics(_homeId int32) (retval2172 *GetDriverStatisticsReturnStruct, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeStatistics(_homeId int32, _nodeId byte) (retval2173 *GetNodeStatisticsReturnStruct, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SendAllValues() (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  ping() (err os.Error)\n")
  fmt.Fprint(os.Stderr, "\n")
  os.Exit(0)
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  var help bool
  var url http.URL
  var trans thrift.TTransport
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.BoolVar(&help, "help", false, "See usage string")
  flag.Parse()
  if help || flag.NArg() == 0 {
    flag.Usage()
  }
  
  if len(urlString) > 0 {
    url, err := http.ParseURL(urlString)
    if err != nil {
      fmt.Fprint(os.Stderr, "Error parsing URL: ", err.String(), "\n")
      flag.Usage()
    }
    host = url.Host
    useHttp = len(url.Scheme) <= 0 || url.Scheme == "http"
  } else if useHttp {
    _, err := http.ParseURL(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprint(os.Stderr, "Error parsing URL: ", err.String(), "\n")
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err os.Error
  if useHttp {
    trans, err = thrift.NewTHttpClient(url.Raw)
  } else {
    addr, err := net.ResolveTCPAddr("tcp", fmt.Sprint(host, ":", port))
    if err != nil {
      fmt.Fprint(os.Stderr, "Error resolving address", err.String())
      os.Exit(1)
    }
    trans, err = thrift.NewTNonblockingSocketAddr(addr)
    if framed {
      trans = thrift.NewTFramedTransport(trans)
    }
  }
  if err != nil {
    fmt.Fprint(os.Stderr, "Error creating transport", err.String())
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactory()
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
    break
  default:
    fmt.Fprint(os.Stderr, "Invalid protocol specified: ", protocol, "\n")
    Usage()
    os.Exit(1)
  }
  client := OpenZWave.NewRemoteManagerClientFactory(trans, protocolFactory)
  if err = trans.Open(); err != nil {
    fmt.Fprint(os.Stderr, "Error opening socket to ", host, ":", port, " ", err.String())
    os.Exit(1)
  }
  
  switch cmd {
  case "WriteConfig":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "WriteConfig requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2176 := (strconv.Atoi(flag.Arg(1)))
    if err2176 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.WriteConfig(value0))
    fmt.Print("\n")
    break
  case "GetControllerNodeId":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetControllerNodeId requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2177 := (strconv.Atoi(flag.Arg(1)))
    if err2177 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetControllerNodeId(value0))
    fmt.Print("\n")
    break
  case "GetSUCNodeId":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetSUCNodeId requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2178 := (strconv.Atoi(flag.Arg(1)))
    if err2178 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetSUCNodeId(value0))
    fmt.Print("\n")
    break
  case "IsPrimaryController":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "IsPrimaryController requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2179 := (strconv.Atoi(flag.Arg(1)))
    if err2179 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.IsPrimaryController(value0))
    fmt.Print("\n")
    break
  case "IsStaticUpdateController":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "IsStaticUpdateController requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2180 := (strconv.Atoi(flag.Arg(1)))
    if err2180 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.IsStaticUpdateController(value0))
    fmt.Print("\n")
    break
  case "IsBridgeController":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "IsBridgeController requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2181 := (strconv.Atoi(flag.Arg(1)))
    if err2181 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.IsBridgeController(value0))
    fmt.Print("\n")
    break
  case "GetLibraryVersion":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetLibraryVersion requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2182 := (strconv.Atoi(flag.Arg(1)))
    if err2182 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetLibraryVersion(value0))
    fmt.Print("\n")
    break
  case "GetLibraryTypeName":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetLibraryTypeName requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2183 := (strconv.Atoi(flag.Arg(1)))
    if err2183 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetLibraryTypeName(value0))
    fmt.Print("\n")
    break
  case "GetSendQueueCount":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetSendQueueCount requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2184 := (strconv.Atoi(flag.Arg(1)))
    if err2184 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetSendQueueCount(value0))
    fmt.Print("\n")
    break
  case "LogDriverStatistics":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "LogDriverStatistics requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2185 := (strconv.Atoi(flag.Arg(1)))
    if err2185 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.LogDriverStatistics(value0))
    fmt.Print("\n")
    break
  case "GetControllerInterfaceType":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetControllerInterfaceType requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2186 := (strconv.Atoi(flag.Arg(1)))
    if err2186 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetControllerInterfaceType(value0))
    fmt.Print("\n")
    break
  case "GetControllerPath":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetControllerPath requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2187 := (strconv.Atoi(flag.Arg(1)))
    if err2187 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetControllerPath(value0))
    fmt.Print("\n")
    break
  case "GetPollInterval":
    if flag.NArg() - 1 != 0 {
      fmt.Fprint(os.Stderr, "GetPollInterval requires 0 args\n")
      flag.Usage()
    }
    fmt.Print(client.GetPollInterval())
    fmt.Print("\n")
    break
  case "SetPollInterval":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetPollInterval requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2188 := (strconv.Atoi(flag.Arg(1)))
    if err2188 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2) == "true"
    value1 := argvalue1
    fmt.Print(client.SetPollInterval(value0, value1))
    fmt.Print("\n")
    break
  case "EnablePoll":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "EnablePoll requires 2 args\n")
      flag.Usage()
    }
    arg2190 := flag.Arg(1)
    mbTrans2191 := thrift.NewTMemoryBufferLen(len(arg2190))
    defer mbTrans2191.Close()
    _, err2192 := mbTrans2191.WriteString(arg2190)
    if err2192 != nil {
      Usage()
      return
    }
    factory2193 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2194 := factory2193.GetProtocol(mbTrans2191)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2195 := argvalue0.Read(jsProt2194)
    if err2195 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err2196 := (strconv.Atoi(flag.Arg(2)))
    if err2196 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.EnablePoll(value0, value1))
    fmt.Print("\n")
    break
  case "DisablePoll":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "DisablePoll requires 1 args\n")
      flag.Usage()
    }
    arg2197 := flag.Arg(1)
    mbTrans2198 := thrift.NewTMemoryBufferLen(len(arg2197))
    defer mbTrans2198.Close()
    _, err2199 := mbTrans2198.WriteString(arg2197)
    if err2199 != nil {
      Usage()
      return
    }
    factory2200 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2201 := factory2200.GetProtocol(mbTrans2198)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2202 := argvalue0.Read(jsProt2201)
    if err2202 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DisablePoll(value0))
    fmt.Print("\n")
    break
  case "isPolled":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "IsPolled requires 1 args\n")
      flag.Usage()
    }
    arg2203 := flag.Arg(1)
    mbTrans2204 := thrift.NewTMemoryBufferLen(len(arg2203))
    defer mbTrans2204.Close()
    _, err2205 := mbTrans2204.WriteString(arg2203)
    if err2205 != nil {
      Usage()
      return
    }
    factory2206 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2207 := factory2206.GetProtocol(mbTrans2204)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2208 := argvalue0.Read(jsProt2207)
    if err2208 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.IsPolled(value0))
    fmt.Print("\n")
    break
  case "SetPollIntensity":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetPollIntensity requires 2 args\n")
      flag.Usage()
    }
    arg2209 := flag.Arg(1)
    mbTrans2210 := thrift.NewTMemoryBufferLen(len(arg2209))
    defer mbTrans2210.Close()
    _, err2211 := mbTrans2210.WriteString(arg2209)
    if err2211 != nil {
      Usage()
      return
    }
    factory2212 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2213 := factory2212.GetProtocol(mbTrans2210)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2214 := argvalue0.Read(jsProt2213)
    if err2214 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err2215 := (strconv.Atoi(flag.Arg(2)))
    if err2215 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.SetPollIntensity(value0, value1))
    fmt.Print("\n")
    break
  case "RefreshNodeInfo":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "RefreshNodeInfo requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2216 := (strconv.Atoi(flag.Arg(1)))
    if err2216 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2217 := (strconv.Atoi(flag.Arg(2)))
    if err2217 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.RefreshNodeInfo(value0, value1))
    fmt.Print("\n")
    break
  case "RequestNodeState":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "RequestNodeState requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2218 := (strconv.Atoi(flag.Arg(1)))
    if err2218 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2219 := (strconv.Atoi(flag.Arg(2)))
    if err2219 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.RequestNodeState(value0, value1))
    fmt.Print("\n")
    break
  case "RequestNodeDynamic":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "RequestNodeDynamic requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2220 := (strconv.Atoi(flag.Arg(1)))
    if err2220 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2221 := (strconv.Atoi(flag.Arg(2)))
    if err2221 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.RequestNodeDynamic(value0, value1))
    fmt.Print("\n")
    break
  case "IsNodeListeningDevice":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "IsNodeListeningDevice requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2222 := (strconv.Atoi(flag.Arg(1)))
    if err2222 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2223 := (strconv.Atoi(flag.Arg(2)))
    if err2223 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.IsNodeListeningDevice(value0, value1))
    fmt.Print("\n")
    break
  case "IsNodeFrequentListeningDevice":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "IsNodeFrequentListeningDevice requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2224 := (strconv.Atoi(flag.Arg(1)))
    if err2224 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2225 := (strconv.Atoi(flag.Arg(2)))
    if err2225 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.IsNodeFrequentListeningDevice(value0, value1))
    fmt.Print("\n")
    break
  case "IsNodeBeamingDevice":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "IsNodeBeamingDevice requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2226 := (strconv.Atoi(flag.Arg(1)))
    if err2226 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2227 := (strconv.Atoi(flag.Arg(2)))
    if err2227 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.IsNodeBeamingDevice(value0, value1))
    fmt.Print("\n")
    break
  case "IsNodeRoutingDevice":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "IsNodeRoutingDevice requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2228 := (strconv.Atoi(flag.Arg(1)))
    if err2228 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2229 := (strconv.Atoi(flag.Arg(2)))
    if err2229 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.IsNodeRoutingDevice(value0, value1))
    fmt.Print("\n")
    break
  case "IsNodeSecurityDevice":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "IsNodeSecurityDevice requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2230 := (strconv.Atoi(flag.Arg(1)))
    if err2230 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2231 := (strconv.Atoi(flag.Arg(2)))
    if err2231 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.IsNodeSecurityDevice(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeMaxBaudRate":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeMaxBaudRate requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2232 := (strconv.Atoi(flag.Arg(1)))
    if err2232 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2233 := (strconv.Atoi(flag.Arg(2)))
    if err2233 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeMaxBaudRate(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeVersion":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeVersion requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2234 := (strconv.Atoi(flag.Arg(1)))
    if err2234 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2235 := (strconv.Atoi(flag.Arg(2)))
    if err2235 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeVersion(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeSecurity":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeSecurity requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2236 := (strconv.Atoi(flag.Arg(1)))
    if err2236 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2237 := (strconv.Atoi(flag.Arg(2)))
    if err2237 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeSecurity(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeBasic":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeBasic requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2238 := (strconv.Atoi(flag.Arg(1)))
    if err2238 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2239 := (strconv.Atoi(flag.Arg(2)))
    if err2239 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeBasic(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeGeneric":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeGeneric requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2240 := (strconv.Atoi(flag.Arg(1)))
    if err2240 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2241 := (strconv.Atoi(flag.Arg(2)))
    if err2241 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeGeneric(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeSpecific":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeSpecific requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2242 := (strconv.Atoi(flag.Arg(1)))
    if err2242 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2243 := (strconv.Atoi(flag.Arg(2)))
    if err2243 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeSpecific(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeType":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeType requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2244 := (strconv.Atoi(flag.Arg(1)))
    if err2244 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2245 := (strconv.Atoi(flag.Arg(2)))
    if err2245 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeType(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeNeighbors":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeNeighbors requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2246 := (strconv.Atoi(flag.Arg(1)))
    if err2246 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2247 := (strconv.Atoi(flag.Arg(2)))
    if err2247 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeNeighbors(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeManufacturerName":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeManufacturerName requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2248 := (strconv.Atoi(flag.Arg(1)))
    if err2248 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2249 := (strconv.Atoi(flag.Arg(2)))
    if err2249 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeManufacturerName(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeProductName":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeProductName requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2250 := (strconv.Atoi(flag.Arg(1)))
    if err2250 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2251 := (strconv.Atoi(flag.Arg(2)))
    if err2251 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeProductName(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeName":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeName requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2252 := (strconv.Atoi(flag.Arg(1)))
    if err2252 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2253 := (strconv.Atoi(flag.Arg(2)))
    if err2253 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeName(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeLocation":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeLocation requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2254 := (strconv.Atoi(flag.Arg(1)))
    if err2254 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2255 := (strconv.Atoi(flag.Arg(2)))
    if err2255 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeLocation(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeManufacturerId":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeManufacturerId requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2256 := (strconv.Atoi(flag.Arg(1)))
    if err2256 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2257 := (strconv.Atoi(flag.Arg(2)))
    if err2257 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeManufacturerId(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeProductType":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeProductType requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2258 := (strconv.Atoi(flag.Arg(1)))
    if err2258 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2259 := (strconv.Atoi(flag.Arg(2)))
    if err2259 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeProductType(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeProductId":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeProductId requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2260 := (strconv.Atoi(flag.Arg(1)))
    if err2260 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2261 := (strconv.Atoi(flag.Arg(2)))
    if err2261 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeProductId(value0, value1))
    fmt.Print("\n")
    break
  case "SetNodeManufacturerName":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetNodeManufacturerName requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2262 := (strconv.Atoi(flag.Arg(1)))
    if err2262 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2263 := (strconv.Atoi(flag.Arg(2)))
    if err2263 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.SetNodeManufacturerName(value0, value1, value2))
    fmt.Print("\n")
    break
  case "SetNodeProductName":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetNodeProductName requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2265 := (strconv.Atoi(flag.Arg(1)))
    if err2265 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2266 := (strconv.Atoi(flag.Arg(2)))
    if err2266 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.SetNodeProductName(value0, value1, value2))
    fmt.Print("\n")
    break
  case "SetNodeName":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetNodeName requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2268 := (strconv.Atoi(flag.Arg(1)))
    if err2268 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2269 := (strconv.Atoi(flag.Arg(2)))
    if err2269 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.SetNodeName(value0, value1, value2))
    fmt.Print("\n")
    break
  case "SetNodeLocation":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetNodeLocation requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2271 := (strconv.Atoi(flag.Arg(1)))
    if err2271 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2272 := (strconv.Atoi(flag.Arg(2)))
    if err2272 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.SetNodeLocation(value0, value1, value2))
    fmt.Print("\n")
    break
  case "SetNodeOn":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetNodeOn requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2274 := (strconv.Atoi(flag.Arg(1)))
    if err2274 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2275 := (strconv.Atoi(flag.Arg(2)))
    if err2275 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.SetNodeOn(value0, value1))
    fmt.Print("\n")
    break
  case "SetNodeOff":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetNodeOff requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2276 := (strconv.Atoi(flag.Arg(1)))
    if err2276 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2277 := (strconv.Atoi(flag.Arg(2)))
    if err2277 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.SetNodeOff(value0, value1))
    fmt.Print("\n")
    break
  case "SetNodeLevel":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetNodeLevel requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2278 := (strconv.Atoi(flag.Arg(1)))
    if err2278 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2279 := (strconv.Atoi(flag.Arg(2)))
    if err2279 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    tmp2, err2280 := (strconv.Atoi(flag.Arg(3)))
    if err2280 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    fmt.Print(client.SetNodeLevel(value0, value1, value2))
    fmt.Print("\n")
    break
  case "IsNodeInfoReceived":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "IsNodeInfoReceived requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2281 := (strconv.Atoi(flag.Arg(1)))
    if err2281 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2282 := (strconv.Atoi(flag.Arg(2)))
    if err2282 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.IsNodeInfoReceived(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeClassInformation":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "GetNodeClassInformation requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2283 := (strconv.Atoi(flag.Arg(1)))
    if err2283 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2284 := (strconv.Atoi(flag.Arg(2)))
    if err2284 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    tmp2, err2285 := (strconv.Atoi(flag.Arg(3)))
    if err2285 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    fmt.Print(client.GetNodeClassInformation(value0, value1, value2))
    fmt.Print("\n")
    break
  case "IsNodeAwake":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "IsNodeAwake requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2286 := (strconv.Atoi(flag.Arg(1)))
    if err2286 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2287 := (strconv.Atoi(flag.Arg(2)))
    if err2287 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.IsNodeAwake(value0, value1))
    fmt.Print("\n")
    break
  case "IsNodeFailed":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "IsNodeFailed requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2288 := (strconv.Atoi(flag.Arg(1)))
    if err2288 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2289 := (strconv.Atoi(flag.Arg(2)))
    if err2289 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.IsNodeFailed(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeQueryStage":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeQueryStage requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2290 := (strconv.Atoi(flag.Arg(1)))
    if err2290 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2291 := (strconv.Atoi(flag.Arg(2)))
    if err2291 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeQueryStage(value0, value1))
    fmt.Print("\n")
    break
  case "GetValueLabel":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueLabel requires 1 args\n")
      flag.Usage()
    }
    arg2292 := flag.Arg(1)
    mbTrans2293 := thrift.NewTMemoryBufferLen(len(arg2292))
    defer mbTrans2293.Close()
    _, err2294 := mbTrans2293.WriteString(arg2292)
    if err2294 != nil {
      Usage()
      return
    }
    factory2295 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2296 := factory2295.GetProtocol(mbTrans2293)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2297 := argvalue0.Read(jsProt2296)
    if err2297 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueLabel(value0))
    fmt.Print("\n")
    break
  case "SetValueLabel":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetValueLabel requires 2 args\n")
      flag.Usage()
    }
    arg2298 := flag.Arg(1)
    mbTrans2299 := thrift.NewTMemoryBufferLen(len(arg2298))
    defer mbTrans2299.Close()
    _, err2300 := mbTrans2299.WriteString(arg2298)
    if err2300 != nil {
      Usage()
      return
    }
    factory2301 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2302 := factory2301.GetProtocol(mbTrans2299)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2303 := argvalue0.Read(jsProt2302)
    if err2303 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.SetValueLabel(value0, value1))
    fmt.Print("\n")
    break
  case "GetValueUnits":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueUnits requires 1 args\n")
      flag.Usage()
    }
    arg2305 := flag.Arg(1)
    mbTrans2306 := thrift.NewTMemoryBufferLen(len(arg2305))
    defer mbTrans2306.Close()
    _, err2307 := mbTrans2306.WriteString(arg2305)
    if err2307 != nil {
      Usage()
      return
    }
    factory2308 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2309 := factory2308.GetProtocol(mbTrans2306)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2310 := argvalue0.Read(jsProt2309)
    if err2310 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueUnits(value0))
    fmt.Print("\n")
    break
  case "SetValueUnits":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetValueUnits requires 2 args\n")
      flag.Usage()
    }
    arg2311 := flag.Arg(1)
    mbTrans2312 := thrift.NewTMemoryBufferLen(len(arg2311))
    defer mbTrans2312.Close()
    _, err2313 := mbTrans2312.WriteString(arg2311)
    if err2313 != nil {
      Usage()
      return
    }
    factory2314 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2315 := factory2314.GetProtocol(mbTrans2312)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2316 := argvalue0.Read(jsProt2315)
    if err2316 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.SetValueUnits(value0, value1))
    fmt.Print("\n")
    break
  case "GetValueHelp":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueHelp requires 1 args\n")
      flag.Usage()
    }
    arg2318 := flag.Arg(1)
    mbTrans2319 := thrift.NewTMemoryBufferLen(len(arg2318))
    defer mbTrans2319.Close()
    _, err2320 := mbTrans2319.WriteString(arg2318)
    if err2320 != nil {
      Usage()
      return
    }
    factory2321 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2322 := factory2321.GetProtocol(mbTrans2319)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2323 := argvalue0.Read(jsProt2322)
    if err2323 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueHelp(value0))
    fmt.Print("\n")
    break
  case "SetValueHelp":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetValueHelp requires 2 args\n")
      flag.Usage()
    }
    arg2324 := flag.Arg(1)
    mbTrans2325 := thrift.NewTMemoryBufferLen(len(arg2324))
    defer mbTrans2325.Close()
    _, err2326 := mbTrans2325.WriteString(arg2324)
    if err2326 != nil {
      Usage()
      return
    }
    factory2327 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2328 := factory2327.GetProtocol(mbTrans2325)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2329 := argvalue0.Read(jsProt2328)
    if err2329 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.SetValueHelp(value0, value1))
    fmt.Print("\n")
    break
  case "GetValueMin":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueMin requires 1 args\n")
      flag.Usage()
    }
    arg2331 := flag.Arg(1)
    mbTrans2332 := thrift.NewTMemoryBufferLen(len(arg2331))
    defer mbTrans2332.Close()
    _, err2333 := mbTrans2332.WriteString(arg2331)
    if err2333 != nil {
      Usage()
      return
    }
    factory2334 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2335 := factory2334.GetProtocol(mbTrans2332)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2336 := argvalue0.Read(jsProt2335)
    if err2336 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueMin(value0))
    fmt.Print("\n")
    break
  case "GetValueMax":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueMax requires 1 args\n")
      flag.Usage()
    }
    arg2337 := flag.Arg(1)
    mbTrans2338 := thrift.NewTMemoryBufferLen(len(arg2337))
    defer mbTrans2338.Close()
    _, err2339 := mbTrans2338.WriteString(arg2337)
    if err2339 != nil {
      Usage()
      return
    }
    factory2340 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2341 := factory2340.GetProtocol(mbTrans2338)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2342 := argvalue0.Read(jsProt2341)
    if err2342 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueMax(value0))
    fmt.Print("\n")
    break
  case "IsValueReadOnly":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "IsValueReadOnly requires 1 args\n")
      flag.Usage()
    }
    arg2343 := flag.Arg(1)
    mbTrans2344 := thrift.NewTMemoryBufferLen(len(arg2343))
    defer mbTrans2344.Close()
    _, err2345 := mbTrans2344.WriteString(arg2343)
    if err2345 != nil {
      Usage()
      return
    }
    factory2346 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2347 := factory2346.GetProtocol(mbTrans2344)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2348 := argvalue0.Read(jsProt2347)
    if err2348 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.IsValueReadOnly(value0))
    fmt.Print("\n")
    break
  case "IsValueWriteOnly":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "IsValueWriteOnly requires 1 args\n")
      flag.Usage()
    }
    arg2349 := flag.Arg(1)
    mbTrans2350 := thrift.NewTMemoryBufferLen(len(arg2349))
    defer mbTrans2350.Close()
    _, err2351 := mbTrans2350.WriteString(arg2349)
    if err2351 != nil {
      Usage()
      return
    }
    factory2352 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2353 := factory2352.GetProtocol(mbTrans2350)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2354 := argvalue0.Read(jsProt2353)
    if err2354 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.IsValueWriteOnly(value0))
    fmt.Print("\n")
    break
  case "IsValueSet":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "IsValueSet requires 1 args\n")
      flag.Usage()
    }
    arg2355 := flag.Arg(1)
    mbTrans2356 := thrift.NewTMemoryBufferLen(len(arg2355))
    defer mbTrans2356.Close()
    _, err2357 := mbTrans2356.WriteString(arg2355)
    if err2357 != nil {
      Usage()
      return
    }
    factory2358 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2359 := factory2358.GetProtocol(mbTrans2356)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2360 := argvalue0.Read(jsProt2359)
    if err2360 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.IsValueSet(value0))
    fmt.Print("\n")
    break
  case "IsValuePolled":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "IsValuePolled requires 1 args\n")
      flag.Usage()
    }
    arg2361 := flag.Arg(1)
    mbTrans2362 := thrift.NewTMemoryBufferLen(len(arg2361))
    defer mbTrans2362.Close()
    _, err2363 := mbTrans2362.WriteString(arg2361)
    if err2363 != nil {
      Usage()
      return
    }
    factory2364 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2365 := factory2364.GetProtocol(mbTrans2362)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2366 := argvalue0.Read(jsProt2365)
    if err2366 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.IsValuePolled(value0))
    fmt.Print("\n")
    break
  case "GetValueAsBool":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueAsBool requires 1 args\n")
      flag.Usage()
    }
    arg2367 := flag.Arg(1)
    mbTrans2368 := thrift.NewTMemoryBufferLen(len(arg2367))
    defer mbTrans2368.Close()
    _, err2369 := mbTrans2368.WriteString(arg2367)
    if err2369 != nil {
      Usage()
      return
    }
    factory2370 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2371 := factory2370.GetProtocol(mbTrans2368)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2372 := argvalue0.Read(jsProt2371)
    if err2372 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueAsBool(value0))
    fmt.Print("\n")
    break
  case "GetValueAsByte":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueAsByte requires 1 args\n")
      flag.Usage()
    }
    arg2373 := flag.Arg(1)
    mbTrans2374 := thrift.NewTMemoryBufferLen(len(arg2373))
    defer mbTrans2374.Close()
    _, err2375 := mbTrans2374.WriteString(arg2373)
    if err2375 != nil {
      Usage()
      return
    }
    factory2376 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2377 := factory2376.GetProtocol(mbTrans2374)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2378 := argvalue0.Read(jsProt2377)
    if err2378 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueAsByte(value0))
    fmt.Print("\n")
    break
  case "GetValueAsFloat":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueAsFloat requires 1 args\n")
      flag.Usage()
    }
    arg2379 := flag.Arg(1)
    mbTrans2380 := thrift.NewTMemoryBufferLen(len(arg2379))
    defer mbTrans2380.Close()
    _, err2381 := mbTrans2380.WriteString(arg2379)
    if err2381 != nil {
      Usage()
      return
    }
    factory2382 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2383 := factory2382.GetProtocol(mbTrans2380)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2384 := argvalue0.Read(jsProt2383)
    if err2384 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueAsFloat(value0))
    fmt.Print("\n")
    break
  case "GetValueAsInt":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueAsInt requires 1 args\n")
      flag.Usage()
    }
    arg2385 := flag.Arg(1)
    mbTrans2386 := thrift.NewTMemoryBufferLen(len(arg2385))
    defer mbTrans2386.Close()
    _, err2387 := mbTrans2386.WriteString(arg2385)
    if err2387 != nil {
      Usage()
      return
    }
    factory2388 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2389 := factory2388.GetProtocol(mbTrans2386)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2390 := argvalue0.Read(jsProt2389)
    if err2390 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueAsInt(value0))
    fmt.Print("\n")
    break
  case "GetValueAsShort":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueAsShort requires 1 args\n")
      flag.Usage()
    }
    arg2391 := flag.Arg(1)
    mbTrans2392 := thrift.NewTMemoryBufferLen(len(arg2391))
    defer mbTrans2392.Close()
    _, err2393 := mbTrans2392.WriteString(arg2391)
    if err2393 != nil {
      Usage()
      return
    }
    factory2394 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2395 := factory2394.GetProtocol(mbTrans2392)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2396 := argvalue0.Read(jsProt2395)
    if err2396 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueAsShort(value0))
    fmt.Print("\n")
    break
  case "GetValueAsString":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueAsString requires 1 args\n")
      flag.Usage()
    }
    arg2397 := flag.Arg(1)
    mbTrans2398 := thrift.NewTMemoryBufferLen(len(arg2397))
    defer mbTrans2398.Close()
    _, err2399 := mbTrans2398.WriteString(arg2397)
    if err2399 != nil {
      Usage()
      return
    }
    factory2400 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2401 := factory2400.GetProtocol(mbTrans2398)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2402 := argvalue0.Read(jsProt2401)
    if err2402 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueAsString(value0))
    fmt.Print("\n")
    break
  case "GetValueListSelection_String":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueListSelectionString requires 1 args\n")
      flag.Usage()
    }
    arg2403 := flag.Arg(1)
    mbTrans2404 := thrift.NewTMemoryBufferLen(len(arg2403))
    defer mbTrans2404.Close()
    _, err2405 := mbTrans2404.WriteString(arg2403)
    if err2405 != nil {
      Usage()
      return
    }
    factory2406 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2407 := factory2406.GetProtocol(mbTrans2404)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2408 := argvalue0.Read(jsProt2407)
    if err2408 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueListSelectionString(value0))
    fmt.Print("\n")
    break
  case "GetValueListSelection_Int32":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueListSelectionInt32 requires 1 args\n")
      flag.Usage()
    }
    arg2409 := flag.Arg(1)
    mbTrans2410 := thrift.NewTMemoryBufferLen(len(arg2409))
    defer mbTrans2410.Close()
    _, err2411 := mbTrans2410.WriteString(arg2409)
    if err2411 != nil {
      Usage()
      return
    }
    factory2412 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2413 := factory2412.GetProtocol(mbTrans2410)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2414 := argvalue0.Read(jsProt2413)
    if err2414 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueListSelectionInt32(value0))
    fmt.Print("\n")
    break
  case "GetValueListItems":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueListItems requires 1 args\n")
      flag.Usage()
    }
    arg2415 := flag.Arg(1)
    mbTrans2416 := thrift.NewTMemoryBufferLen(len(arg2415))
    defer mbTrans2416.Close()
    _, err2417 := mbTrans2416.WriteString(arg2415)
    if err2417 != nil {
      Usage()
      return
    }
    factory2418 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2419 := factory2418.GetProtocol(mbTrans2416)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2420 := argvalue0.Read(jsProt2419)
    if err2420 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueListItems(value0))
    fmt.Print("\n")
    break
  case "GetValueFloatPrecision":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueFloatPrecision requires 1 args\n")
      flag.Usage()
    }
    arg2421 := flag.Arg(1)
    mbTrans2422 := thrift.NewTMemoryBufferLen(len(arg2421))
    defer mbTrans2422.Close()
    _, err2423 := mbTrans2422.WriteString(arg2421)
    if err2423 != nil {
      Usage()
      return
    }
    factory2424 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2425 := factory2424.GetProtocol(mbTrans2422)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2426 := argvalue0.Read(jsProt2425)
    if err2426 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueFloatPrecision(value0))
    fmt.Print("\n")
    break
  case "SetValue_Bool":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetValueBool requires 2 args\n")
      flag.Usage()
    }
    arg2427 := flag.Arg(1)
    mbTrans2428 := thrift.NewTMemoryBufferLen(len(arg2427))
    defer mbTrans2428.Close()
    _, err2429 := mbTrans2428.WriteString(arg2427)
    if err2429 != nil {
      Usage()
      return
    }
    factory2430 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2431 := factory2430.GetProtocol(mbTrans2428)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2432 := argvalue0.Read(jsProt2431)
    if err2432 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2) == "true"
    value1 := argvalue1
    fmt.Print(client.SetValueBool(value0, value1))
    fmt.Print("\n")
    break
  case "SetValue_UInt8":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetValueUInt8 requires 2 args\n")
      flag.Usage()
    }
    arg2434 := flag.Arg(1)
    mbTrans2435 := thrift.NewTMemoryBufferLen(len(arg2434))
    defer mbTrans2435.Close()
    _, err2436 := mbTrans2435.WriteString(arg2434)
    if err2436 != nil {
      Usage()
      return
    }
    factory2437 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2438 := factory2437.GetProtocol(mbTrans2435)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2439 := argvalue0.Read(jsProt2438)
    if err2439 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err2440 := (strconv.Atoi(flag.Arg(2)))
    if err2440 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.SetValueUInt8(value0, value1))
    fmt.Print("\n")
    break
  case "SetValue_UInt8_UInt8":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetValueUInt8UInt8 requires 3 args\n")
      flag.Usage()
    }
    arg2441 := flag.Arg(1)
    mbTrans2442 := thrift.NewTMemoryBufferLen(len(arg2441))
    defer mbTrans2442.Close()
    _, err2443 := mbTrans2442.WriteString(arg2441)
    if err2443 != nil {
      Usage()
      return
    }
    factory2444 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2445 := factory2444.GetProtocol(mbTrans2442)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2446 := argvalue0.Read(jsProt2445)
    if err2446 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg2447 := flag.Arg(2)
    mbTrans2448 := thrift.NewTMemoryBufferLen(len(arg2447))
    defer mbTrans2448.Close()
    _, err2449 := mbTrans2448.WriteString(arg2447)
    if err2449 != nil { 
      Usage()
      return
    }
    factory2450 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2451 := factory2450.GetProtocol(mbTrans2448)
    containerStruct1 := OpenZWave.NewSetValueUInt8UInt8Args()
    err2452 := containerStruct1.ReadField2(jsProt2451)
    if err2452 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1._value
    value1 := argvalue1
    tmp2, err2453 := (strconv.Atoi(flag.Arg(3)))
    if err2453 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    fmt.Print(client.SetValueUInt8UInt8(value0, value1, value2))
    fmt.Print("\n")
    break
  case "SetValue_Float":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetValueFloat requires 2 args\n")
      flag.Usage()
    }
    arg2454 := flag.Arg(1)
    mbTrans2455 := thrift.NewTMemoryBufferLen(len(arg2454))
    defer mbTrans2455.Close()
    _, err2456 := mbTrans2455.WriteString(arg2454)
    if err2456 != nil {
      Usage()
      return
    }
    factory2457 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2458 := factory2457.GetProtocol(mbTrans2455)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2459 := argvalue0.Read(jsProt2458)
    if err2459 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1, err2460 := (strconv.Atof64(flag.Arg(2)))
    if err2460 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SetValueFloat(value0, value1))
    fmt.Print("\n")
    break
  case "SetValue_int32":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetValueInt32 requires 2 args\n")
      flag.Usage()
    }
    arg2461 := flag.Arg(1)
    mbTrans2462 := thrift.NewTMemoryBufferLen(len(arg2461))
    defer mbTrans2462.Close()
    _, err2463 := mbTrans2462.WriteString(arg2461)
    if err2463 != nil {
      Usage()
      return
    }
    factory2464 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2465 := factory2464.GetProtocol(mbTrans2462)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2466 := argvalue0.Read(jsProt2465)
    if err2466 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err2467 := (strconv.Atoi(flag.Arg(2)))
    if err2467 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    fmt.Print(client.SetValueInt32(value0, value1))
    fmt.Print("\n")
    break
  case "SetValue_int16":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetValueInt16 requires 2 args\n")
      flag.Usage()
    }
    arg2468 := flag.Arg(1)
    mbTrans2469 := thrift.NewTMemoryBufferLen(len(arg2468))
    defer mbTrans2469.Close()
    _, err2470 := mbTrans2469.WriteString(arg2468)
    if err2470 != nil {
      Usage()
      return
    }
    factory2471 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2472 := factory2471.GetProtocol(mbTrans2469)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2473 := argvalue0.Read(jsProt2472)
    if err2473 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err2474 := (strconv.Atoi(flag.Arg(2)))
    if err2474 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.SetValueInt16(value0, value1))
    fmt.Print("\n")
    break
  case "SetValue_String":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetValueString requires 2 args\n")
      flag.Usage()
    }
    arg2475 := flag.Arg(1)
    mbTrans2476 := thrift.NewTMemoryBufferLen(len(arg2475))
    defer mbTrans2476.Close()
    _, err2477 := mbTrans2476.WriteString(arg2475)
    if err2477 != nil {
      Usage()
      return
    }
    factory2478 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2479 := factory2478.GetProtocol(mbTrans2476)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2480 := argvalue0.Read(jsProt2479)
    if err2480 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.SetValueString(value0, value1))
    fmt.Print("\n")
    break
  case "SetValueListSelection":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetValueListSelection requires 2 args\n")
      flag.Usage()
    }
    arg2482 := flag.Arg(1)
    mbTrans2483 := thrift.NewTMemoryBufferLen(len(arg2482))
    defer mbTrans2483.Close()
    _, err2484 := mbTrans2483.WriteString(arg2482)
    if err2484 != nil {
      Usage()
      return
    }
    factory2485 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2486 := factory2485.GetProtocol(mbTrans2483)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2487 := argvalue0.Read(jsProt2486)
    if err2487 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.SetValueListSelection(value0, value1))
    fmt.Print("\n")
    break
  case "RefreshValue":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "RefreshValue requires 1 args\n")
      flag.Usage()
    }
    arg2489 := flag.Arg(1)
    mbTrans2490 := thrift.NewTMemoryBufferLen(len(arg2489))
    defer mbTrans2490.Close()
    _, err2491 := mbTrans2490.WriteString(arg2489)
    if err2491 != nil {
      Usage()
      return
    }
    factory2492 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2493 := factory2492.GetProtocol(mbTrans2490)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2494 := argvalue0.Read(jsProt2493)
    if err2494 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RefreshValue(value0))
    fmt.Print("\n")
    break
  case "SetChangeVerified":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetChangeVerified requires 2 args\n")
      flag.Usage()
    }
    arg2495 := flag.Arg(1)
    mbTrans2496 := thrift.NewTMemoryBufferLen(len(arg2495))
    defer mbTrans2496.Close()
    _, err2497 := mbTrans2496.WriteString(arg2495)
    if err2497 != nil {
      Usage()
      return
    }
    factory2498 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2499 := factory2498.GetProtocol(mbTrans2496)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2500 := argvalue0.Read(jsProt2499)
    if err2500 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2) == "true"
    value1 := argvalue1
    fmt.Print(client.SetChangeVerified(value0, value1))
    fmt.Print("\n")
    break
  case "PressButton":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "PressButton requires 1 args\n")
      flag.Usage()
    }
    arg2502 := flag.Arg(1)
    mbTrans2503 := thrift.NewTMemoryBufferLen(len(arg2502))
    defer mbTrans2503.Close()
    _, err2504 := mbTrans2503.WriteString(arg2502)
    if err2504 != nil {
      Usage()
      return
    }
    factory2505 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2506 := factory2505.GetProtocol(mbTrans2503)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2507 := argvalue0.Read(jsProt2506)
    if err2507 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.PressButton(value0))
    fmt.Print("\n")
    break
  case "ReleaseButton":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "ReleaseButton requires 1 args\n")
      flag.Usage()
    }
    arg2508 := flag.Arg(1)
    mbTrans2509 := thrift.NewTMemoryBufferLen(len(arg2508))
    defer mbTrans2509.Close()
    _, err2510 := mbTrans2509.WriteString(arg2508)
    if err2510 != nil {
      Usage()
      return
    }
    factory2511 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2512 := factory2511.GetProtocol(mbTrans2509)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2513 := argvalue0.Read(jsProt2512)
    if err2513 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ReleaseButton(value0))
    fmt.Print("\n")
    break
  case "GetNumSwitchPoints":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetNumSwitchPoints requires 1 args\n")
      flag.Usage()
    }
    arg2514 := flag.Arg(1)
    mbTrans2515 := thrift.NewTMemoryBufferLen(len(arg2514))
    defer mbTrans2515.Close()
    _, err2516 := mbTrans2515.WriteString(arg2514)
    if err2516 != nil {
      Usage()
      return
    }
    factory2517 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2518 := factory2517.GetProtocol(mbTrans2515)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2519 := argvalue0.Read(jsProt2518)
    if err2519 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetNumSwitchPoints(value0))
    fmt.Print("\n")
    break
  case "SetSwitchPoint":
    if flag.NArg() - 1 != 4 {
      fmt.Fprint(os.Stderr, "SetSwitchPoint requires 4 args\n")
      flag.Usage()
    }
    arg2520 := flag.Arg(1)
    mbTrans2521 := thrift.NewTMemoryBufferLen(len(arg2520))
    defer mbTrans2521.Close()
    _, err2522 := mbTrans2521.WriteString(arg2520)
    if err2522 != nil {
      Usage()
      return
    }
    factory2523 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2524 := factory2523.GetProtocol(mbTrans2521)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2525 := argvalue0.Read(jsProt2524)
    if err2525 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err2526 := (strconv.Atoi(flag.Arg(2)))
    if err2526 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    tmp2, err2527 := (strconv.Atoi(flag.Arg(3)))
    if err2527 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    tmp3, err2528 := (strconv.Atoi(flag.Arg(4)))
    if err2528 != nil {
      Usage()
      return
    }
    argvalue3 := byte(tmp3)
    value3 := argvalue3
    fmt.Print(client.SetSwitchPoint(value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "RemoveSwitchPoint":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "RemoveSwitchPoint requires 3 args\n")
      flag.Usage()
    }
    arg2529 := flag.Arg(1)
    mbTrans2530 := thrift.NewTMemoryBufferLen(len(arg2529))
    defer mbTrans2530.Close()
    _, err2531 := mbTrans2530.WriteString(arg2529)
    if err2531 != nil {
      Usage()
      return
    }
    factory2532 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2533 := factory2532.GetProtocol(mbTrans2530)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2534 := argvalue0.Read(jsProt2533)
    if err2534 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err2535 := (strconv.Atoi(flag.Arg(2)))
    if err2535 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    tmp2, err2536 := (strconv.Atoi(flag.Arg(3)))
    if err2536 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    fmt.Print(client.RemoveSwitchPoint(value0, value1, value2))
    fmt.Print("\n")
    break
  case "ClearSwitchPoints":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "ClearSwitchPoints requires 1 args\n")
      flag.Usage()
    }
    arg2537 := flag.Arg(1)
    mbTrans2538 := thrift.NewTMemoryBufferLen(len(arg2537))
    defer mbTrans2538.Close()
    _, err2539 := mbTrans2538.WriteString(arg2537)
    if err2539 != nil {
      Usage()
      return
    }
    factory2540 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2541 := factory2540.GetProtocol(mbTrans2538)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2542 := argvalue0.Read(jsProt2541)
    if err2542 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ClearSwitchPoints(value0))
    fmt.Print("\n")
    break
  case "GetSwitchPoint":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetSwitchPoint requires 2 args\n")
      flag.Usage()
    }
    arg2543 := flag.Arg(1)
    mbTrans2544 := thrift.NewTMemoryBufferLen(len(arg2543))
    defer mbTrans2544.Close()
    _, err2545 := mbTrans2544.WriteString(arg2543)
    if err2545 != nil {
      Usage()
      return
    }
    factory2546 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2547 := factory2546.GetProtocol(mbTrans2544)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2548 := argvalue0.Read(jsProt2547)
    if err2548 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err2549 := (strconv.Atoi(flag.Arg(2)))
    if err2549 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetSwitchPoint(value0, value1))
    fmt.Print("\n")
    break
  case "SwitchAllOn":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "SwitchAllOn requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2550 := (strconv.Atoi(flag.Arg(1)))
    if err2550 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.SwitchAllOn(value0))
    fmt.Print("\n")
    break
  case "SwitchAllOff":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "SwitchAllOff requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2551 := (strconv.Atoi(flag.Arg(1)))
    if err2551 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.SwitchAllOff(value0))
    fmt.Print("\n")
    break
  case "SetConfigParam":
    if flag.NArg() - 1 != 5 {
      fmt.Fprint(os.Stderr, "SetConfigParam requires 5 args\n")
      flag.Usage()
    }
    tmp0, err2552 := (strconv.Atoi(flag.Arg(1)))
    if err2552 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2553 := (strconv.Atoi(flag.Arg(2)))
    if err2553 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    tmp2, err2554 := (strconv.Atoi(flag.Arg(3)))
    if err2554 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    tmp3, err2555 := (strconv.Atoi(flag.Arg(4)))
    if err2555 != nil {
      Usage()
      return
    }
    argvalue3 := int32(tmp3)
    value3 := argvalue3
    tmp4, err2556 := (strconv.Atoi(flag.Arg(5)))
    if err2556 != nil {
      Usage()
      return
    }
    argvalue4 := byte(tmp4)
    value4 := argvalue4
    fmt.Print(client.SetConfigParam(value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "RequestConfigParam":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "RequestConfigParam requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2557 := (strconv.Atoi(flag.Arg(1)))
    if err2557 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2558 := (strconv.Atoi(flag.Arg(2)))
    if err2558 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    tmp2, err2559 := (strconv.Atoi(flag.Arg(3)))
    if err2559 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    fmt.Print(client.RequestConfigParam(value0, value1, value2))
    fmt.Print("\n")
    break
  case "RequestAllConfigParams":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "RequestAllConfigParams requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2560 := (strconv.Atoi(flag.Arg(1)))
    if err2560 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2561 := (strconv.Atoi(flag.Arg(2)))
    if err2561 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.RequestAllConfigParams(value0, value1))
    fmt.Print("\n")
    break
  case "GetNumGroups":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNumGroups requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2562 := (strconv.Atoi(flag.Arg(1)))
    if err2562 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2563 := (strconv.Atoi(flag.Arg(2)))
    if err2563 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNumGroups(value0, value1))
    fmt.Print("\n")
    break
  case "GetAssociations":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "GetAssociations requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2564 := (strconv.Atoi(flag.Arg(1)))
    if err2564 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2565 := (strconv.Atoi(flag.Arg(2)))
    if err2565 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    tmp2, err2566 := (strconv.Atoi(flag.Arg(3)))
    if err2566 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    fmt.Print(client.GetAssociations(value0, value1, value2))
    fmt.Print("\n")
    break
  case "GetMaxAssociations":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "GetMaxAssociations requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2567 := (strconv.Atoi(flag.Arg(1)))
    if err2567 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2568 := (strconv.Atoi(flag.Arg(2)))
    if err2568 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    tmp2, err2569 := (strconv.Atoi(flag.Arg(3)))
    if err2569 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    fmt.Print(client.GetMaxAssociations(value0, value1, value2))
    fmt.Print("\n")
    break
  case "GetGroupLabel":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "GetGroupLabel requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2570 := (strconv.Atoi(flag.Arg(1)))
    if err2570 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2571 := (strconv.Atoi(flag.Arg(2)))
    if err2571 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    tmp2, err2572 := (strconv.Atoi(flag.Arg(3)))
    if err2572 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    fmt.Print(client.GetGroupLabel(value0, value1, value2))
    fmt.Print("\n")
    break
  case "AddAssociation":
    if flag.NArg() - 1 != 4 {
      fmt.Fprint(os.Stderr, "AddAssociation requires 4 args\n")
      flag.Usage()
    }
    tmp0, err2573 := (strconv.Atoi(flag.Arg(1)))
    if err2573 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2574 := (strconv.Atoi(flag.Arg(2)))
    if err2574 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    tmp2, err2575 := (strconv.Atoi(flag.Arg(3)))
    if err2575 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    tmp3, err2576 := (strconv.Atoi(flag.Arg(4)))
    if err2576 != nil {
      Usage()
      return
    }
    argvalue3 := byte(tmp3)
    value3 := argvalue3
    fmt.Print(client.AddAssociation(value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "RemoveAssociation":
    if flag.NArg() - 1 != 4 {
      fmt.Fprint(os.Stderr, "RemoveAssociation requires 4 args\n")
      flag.Usage()
    }
    tmp0, err2577 := (strconv.Atoi(flag.Arg(1)))
    if err2577 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2578 := (strconv.Atoi(flag.Arg(2)))
    if err2578 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    tmp2, err2579 := (strconv.Atoi(flag.Arg(3)))
    if err2579 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    tmp3, err2580 := (strconv.Atoi(flag.Arg(4)))
    if err2580 != nil {
      Usage()
      return
    }
    argvalue3 := byte(tmp3)
    value3 := argvalue3
    fmt.Print(client.RemoveAssociation(value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "ResetController":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "ResetController requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2581 := (strconv.Atoi(flag.Arg(1)))
    if err2581 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.ResetController(value0))
    fmt.Print("\n")
    break
  case "SoftReset":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "SoftReset requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2582 := (strconv.Atoi(flag.Arg(1)))
    if err2582 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.SoftReset(value0))
    fmt.Print("\n")
    break
  case "BeginControllerCommand":
    if flag.NArg() - 1 != 5 {
      fmt.Fprint(os.Stderr, "BeginControllerCommand requires 5 args\n")
      flag.Usage()
    }
    tmp0, err2583 := (strconv.Atoi(flag.Arg(1)))
    if err2583 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := OpenZWave.DriverControllerCommand(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3) == "true"
    value2 := argvalue2
    tmp3, err2585 := (strconv.Atoi(flag.Arg(4)))
    if err2585 != nil {
      Usage()
      return
    }
    argvalue3 := byte(tmp3)
    value3 := argvalue3
    tmp4, err2586 := (strconv.Atoi(flag.Arg(5)))
    if err2586 != nil {
      Usage()
      return
    }
    argvalue4 := byte(tmp4)
    value4 := argvalue4
    fmt.Print(client.BeginControllerCommand(value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "CancelControllerCommand":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "CancelControllerCommand requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2587 := (strconv.Atoi(flag.Arg(1)))
    if err2587 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.CancelControllerCommand(value0))
    fmt.Print("\n")
    break
  case "TestNetworkNode":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "TestNetworkNode requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2588 := (strconv.Atoi(flag.Arg(1)))
    if err2588 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2589 := (strconv.Atoi(flag.Arg(2)))
    if err2589 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    tmp2, err2590 := (strconv.Atoi(flag.Arg(3)))
    if err2590 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    fmt.Print(client.TestNetworkNode(value0, value1, value2))
    fmt.Print("\n")
    break
  case "TestNetwork":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "TestNetwork requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2591 := (strconv.Atoi(flag.Arg(1)))
    if err2591 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2592 := (strconv.Atoi(flag.Arg(2)))
    if err2592 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    fmt.Print(client.TestNetwork(value0, value1))
    fmt.Print("\n")
    break
  case "HealNetworkNode":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "HealNetworkNode requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2593 := (strconv.Atoi(flag.Arg(1)))
    if err2593 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2594 := (strconv.Atoi(flag.Arg(2)))
    if err2594 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3) == "true"
    value2 := argvalue2
    fmt.Print(client.HealNetworkNode(value0, value1, value2))
    fmt.Print("\n")
    break
  case "HealNetwork":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "HealNetwork requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2596 := (strconv.Atoi(flag.Arg(1)))
    if err2596 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2) == "true"
    value1 := argvalue1
    fmt.Print(client.HealNetwork(value0, value1))
    fmt.Print("\n")
    break
  case "GetNumScenes":
    if flag.NArg() - 1 != 0 {
      fmt.Fprint(os.Stderr, "GetNumScenes requires 0 args\n")
      flag.Usage()
    }
    fmt.Print(client.GetNumScenes())
    fmt.Print("\n")
    break
  case "GetAllScenes":
    if flag.NArg() - 1 != 0 {
      fmt.Fprint(os.Stderr, "GetAllScenes requires 0 args\n")
      flag.Usage()
    }
    fmt.Print(client.GetAllScenes())
    fmt.Print("\n")
    break
  case "RemoveAllScenes":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "RemoveAllScenes requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2598 := (strconv.Atoi(flag.Arg(1)))
    if err2598 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.RemoveAllScenes(value0))
    fmt.Print("\n")
    break
  case "CreateScene":
    if flag.NArg() - 1 != 0 {
      fmt.Fprint(os.Stderr, "CreateScene requires 0 args\n")
      flag.Usage()
    }
    fmt.Print(client.CreateScene())
    fmt.Print("\n")
    break
  case "RemoveScene":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "RemoveScene requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2599 := (strconv.Atoi(flag.Arg(1)))
    if err2599 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    fmt.Print(client.RemoveScene(value0))
    fmt.Print("\n")
    break
  case "AddSceneValue_Bool":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "AddSceneValueBool requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2600 := (strconv.Atoi(flag.Arg(1)))
    if err2600 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2601 := flag.Arg(2)
    mbTrans2602 := thrift.NewTMemoryBufferLen(len(arg2601))
    defer mbTrans2602.Close()
    _, err2603 := mbTrans2602.WriteString(arg2601)
    if err2603 != nil {
      Usage()
      return
    }
    factory2604 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2605 := factory2604.GetProtocol(mbTrans2602)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2606 := argvalue1.Read(jsProt2605)
    if err2606 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := flag.Arg(3) == "true"
    value2 := argvalue2
    fmt.Print(client.AddSceneValueBool(value0, value1, value2))
    fmt.Print("\n")
    break
  case "AddSceneValue_Uint8":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "AddSceneValueUint8 requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2608 := (strconv.Atoi(flag.Arg(1)))
    if err2608 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2609 := flag.Arg(2)
    mbTrans2610 := thrift.NewTMemoryBufferLen(len(arg2609))
    defer mbTrans2610.Close()
    _, err2611 := mbTrans2610.WriteString(arg2609)
    if err2611 != nil {
      Usage()
      return
    }
    factory2612 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2613 := factory2612.GetProtocol(mbTrans2610)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2614 := argvalue1.Read(jsProt2613)
    if err2614 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    tmp2, err2615 := (strconv.Atoi(flag.Arg(3)))
    if err2615 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    fmt.Print(client.AddSceneValueUint8(value0, value1, value2))
    fmt.Print("\n")
    break
  case "AddSceneValue_Float":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "AddSceneValueFloat requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2616 := (strconv.Atoi(flag.Arg(1)))
    if err2616 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2617 := flag.Arg(2)
    mbTrans2618 := thrift.NewTMemoryBufferLen(len(arg2617))
    defer mbTrans2618.Close()
    _, err2619 := mbTrans2618.WriteString(arg2617)
    if err2619 != nil {
      Usage()
      return
    }
    factory2620 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2621 := factory2620.GetProtocol(mbTrans2618)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2622 := argvalue1.Read(jsProt2621)
    if err2622 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2, err2623 := (strconv.Atof64(flag.Arg(3)))
    if err2623 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.AddSceneValueFloat(value0, value1, value2))
    fmt.Print("\n")
    break
  case "AddSceneValue_Int32":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "AddSceneValueInt32 requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2624 := (strconv.Atoi(flag.Arg(1)))
    if err2624 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2625 := flag.Arg(2)
    mbTrans2626 := thrift.NewTMemoryBufferLen(len(arg2625))
    defer mbTrans2626.Close()
    _, err2627 := mbTrans2626.WriteString(arg2625)
    if err2627 != nil {
      Usage()
      return
    }
    factory2628 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2629 := factory2628.GetProtocol(mbTrans2626)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2630 := argvalue1.Read(jsProt2629)
    if err2630 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    tmp2, err2631 := (strconv.Atoi(flag.Arg(3)))
    if err2631 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    fmt.Print(client.AddSceneValueInt32(value0, value1, value2))
    fmt.Print("\n")
    break
  case "AddSceneValue_Int16":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "AddSceneValueInt16 requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2632 := (strconv.Atoi(flag.Arg(1)))
    if err2632 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2633 := flag.Arg(2)
    mbTrans2634 := thrift.NewTMemoryBufferLen(len(arg2633))
    defer mbTrans2634.Close()
    _, err2635 := mbTrans2634.WriteString(arg2633)
    if err2635 != nil {
      Usage()
      return
    }
    factory2636 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2637 := factory2636.GetProtocol(mbTrans2634)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2638 := argvalue1.Read(jsProt2637)
    if err2638 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    tmp2, err2639 := (strconv.Atoi(flag.Arg(3)))
    if err2639 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    fmt.Print(client.AddSceneValueInt16(value0, value1, value2))
    fmt.Print("\n")
    break
  case "AddSceneValue_String":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "AddSceneValueString requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2640 := (strconv.Atoi(flag.Arg(1)))
    if err2640 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2641 := flag.Arg(2)
    mbTrans2642 := thrift.NewTMemoryBufferLen(len(arg2641))
    defer mbTrans2642.Close()
    _, err2643 := mbTrans2642.WriteString(arg2641)
    if err2643 != nil {
      Usage()
      return
    }
    factory2644 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2645 := factory2644.GetProtocol(mbTrans2642)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2646 := argvalue1.Read(jsProt2645)
    if err2646 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.AddSceneValueString(value0, value1, value2))
    fmt.Print("\n")
    break
  case "AddSceneValueListSelection_String":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "AddSceneValueListSelectionString requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2648 := (strconv.Atoi(flag.Arg(1)))
    if err2648 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2649 := flag.Arg(2)
    mbTrans2650 := thrift.NewTMemoryBufferLen(len(arg2649))
    defer mbTrans2650.Close()
    _, err2651 := mbTrans2650.WriteString(arg2649)
    if err2651 != nil {
      Usage()
      return
    }
    factory2652 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2653 := factory2652.GetProtocol(mbTrans2650)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2654 := argvalue1.Read(jsProt2653)
    if err2654 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.AddSceneValueListSelectionString(value0, value1, value2))
    fmt.Print("\n")
    break
  case "AddSceneValueListSelection_Int32":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "AddSceneValueListSelectionInt32 requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2656 := (strconv.Atoi(flag.Arg(1)))
    if err2656 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2657 := flag.Arg(2)
    mbTrans2658 := thrift.NewTMemoryBufferLen(len(arg2657))
    defer mbTrans2658.Close()
    _, err2659 := mbTrans2658.WriteString(arg2657)
    if err2659 != nil {
      Usage()
      return
    }
    factory2660 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2661 := factory2660.GetProtocol(mbTrans2658)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2662 := argvalue1.Read(jsProt2661)
    if err2662 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    tmp2, err2663 := (strconv.Atoi(flag.Arg(3)))
    if err2663 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    fmt.Print(client.AddSceneValueListSelectionInt32(value0, value1, value2))
    fmt.Print("\n")
    break
  case "RemoveSceneValue":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "RemoveSceneValue requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2664 := (strconv.Atoi(flag.Arg(1)))
    if err2664 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2665 := flag.Arg(2)
    mbTrans2666 := thrift.NewTMemoryBufferLen(len(arg2665))
    defer mbTrans2666.Close()
    _, err2667 := mbTrans2666.WriteString(arg2665)
    if err2667 != nil {
      Usage()
      return
    }
    factory2668 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2669 := factory2668.GetProtocol(mbTrans2666)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2670 := argvalue1.Read(jsProt2669)
    if err2670 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.RemoveSceneValue(value0, value1))
    fmt.Print("\n")
    break
  case "SceneGetValues":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "SceneGetValues requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2671 := (strconv.Atoi(flag.Arg(1)))
    if err2671 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    fmt.Print(client.SceneGetValues(value0))
    fmt.Print("\n")
    break
  case "SceneGetValueAsBool":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SceneGetValueAsBool requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2672 := (strconv.Atoi(flag.Arg(1)))
    if err2672 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2673 := flag.Arg(2)
    mbTrans2674 := thrift.NewTMemoryBufferLen(len(arg2673))
    defer mbTrans2674.Close()
    _, err2675 := mbTrans2674.WriteString(arg2673)
    if err2675 != nil {
      Usage()
      return
    }
    factory2676 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2677 := factory2676.GetProtocol(mbTrans2674)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2678 := argvalue1.Read(jsProt2677)
    if err2678 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SceneGetValueAsBool(value0, value1))
    fmt.Print("\n")
    break
  case "SceneGetValueAsByte":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SceneGetValueAsByte requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2679 := (strconv.Atoi(flag.Arg(1)))
    if err2679 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2680 := flag.Arg(2)
    mbTrans2681 := thrift.NewTMemoryBufferLen(len(arg2680))
    defer mbTrans2681.Close()
    _, err2682 := mbTrans2681.WriteString(arg2680)
    if err2682 != nil {
      Usage()
      return
    }
    factory2683 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2684 := factory2683.GetProtocol(mbTrans2681)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2685 := argvalue1.Read(jsProt2684)
    if err2685 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SceneGetValueAsByte(value0, value1))
    fmt.Print("\n")
    break
  case "SceneGetValueAsFloat":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SceneGetValueAsFloat requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2686 := (strconv.Atoi(flag.Arg(1)))
    if err2686 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2687 := flag.Arg(2)
    mbTrans2688 := thrift.NewTMemoryBufferLen(len(arg2687))
    defer mbTrans2688.Close()
    _, err2689 := mbTrans2688.WriteString(arg2687)
    if err2689 != nil {
      Usage()
      return
    }
    factory2690 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2691 := factory2690.GetProtocol(mbTrans2688)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2692 := argvalue1.Read(jsProt2691)
    if err2692 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SceneGetValueAsFloat(value0, value1))
    fmt.Print("\n")
    break
  case "SceneGetValueAsInt":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SceneGetValueAsInt requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2693 := (strconv.Atoi(flag.Arg(1)))
    if err2693 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2694 := flag.Arg(2)
    mbTrans2695 := thrift.NewTMemoryBufferLen(len(arg2694))
    defer mbTrans2695.Close()
    _, err2696 := mbTrans2695.WriteString(arg2694)
    if err2696 != nil {
      Usage()
      return
    }
    factory2697 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2698 := factory2697.GetProtocol(mbTrans2695)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2699 := argvalue1.Read(jsProt2698)
    if err2699 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SceneGetValueAsInt(value0, value1))
    fmt.Print("\n")
    break
  case "SceneGetValueAsShort":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SceneGetValueAsShort requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2700 := (strconv.Atoi(flag.Arg(1)))
    if err2700 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2701 := flag.Arg(2)
    mbTrans2702 := thrift.NewTMemoryBufferLen(len(arg2701))
    defer mbTrans2702.Close()
    _, err2703 := mbTrans2702.WriteString(arg2701)
    if err2703 != nil {
      Usage()
      return
    }
    factory2704 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2705 := factory2704.GetProtocol(mbTrans2702)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2706 := argvalue1.Read(jsProt2705)
    if err2706 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SceneGetValueAsShort(value0, value1))
    fmt.Print("\n")
    break
  case "SceneGetValueAsString":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SceneGetValueAsString requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2707 := (strconv.Atoi(flag.Arg(1)))
    if err2707 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2708 := flag.Arg(2)
    mbTrans2709 := thrift.NewTMemoryBufferLen(len(arg2708))
    defer mbTrans2709.Close()
    _, err2710 := mbTrans2709.WriteString(arg2708)
    if err2710 != nil {
      Usage()
      return
    }
    factory2711 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2712 := factory2711.GetProtocol(mbTrans2709)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2713 := argvalue1.Read(jsProt2712)
    if err2713 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SceneGetValueAsString(value0, value1))
    fmt.Print("\n")
    break
  case "SceneGetValueListSelection_String":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SceneGetValueListSelectionString requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2714 := (strconv.Atoi(flag.Arg(1)))
    if err2714 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2715 := flag.Arg(2)
    mbTrans2716 := thrift.NewTMemoryBufferLen(len(arg2715))
    defer mbTrans2716.Close()
    _, err2717 := mbTrans2716.WriteString(arg2715)
    if err2717 != nil {
      Usage()
      return
    }
    factory2718 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2719 := factory2718.GetProtocol(mbTrans2716)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2720 := argvalue1.Read(jsProt2719)
    if err2720 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SceneGetValueListSelectionString(value0, value1))
    fmt.Print("\n")
    break
  case "SceneGetValueListSelection_Int32":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SceneGetValueListSelectionInt32 requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2721 := (strconv.Atoi(flag.Arg(1)))
    if err2721 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2722 := flag.Arg(2)
    mbTrans2723 := thrift.NewTMemoryBufferLen(len(arg2722))
    defer mbTrans2723.Close()
    _, err2724 := mbTrans2723.WriteString(arg2722)
    if err2724 != nil {
      Usage()
      return
    }
    factory2725 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2726 := factory2725.GetProtocol(mbTrans2723)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2727 := argvalue1.Read(jsProt2726)
    if err2727 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SceneGetValueListSelectionInt32(value0, value1))
    fmt.Print("\n")
    break
  case "SetSceneValue_Bool":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetSceneValueBool requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2728 := (strconv.Atoi(flag.Arg(1)))
    if err2728 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2729 := flag.Arg(2)
    mbTrans2730 := thrift.NewTMemoryBufferLen(len(arg2729))
    defer mbTrans2730.Close()
    _, err2731 := mbTrans2730.WriteString(arg2729)
    if err2731 != nil {
      Usage()
      return
    }
    factory2732 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2733 := factory2732.GetProtocol(mbTrans2730)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2734 := argvalue1.Read(jsProt2733)
    if err2734 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := flag.Arg(3) == "true"
    value2 := argvalue2
    fmt.Print(client.SetSceneValueBool(value0, value1, value2))
    fmt.Print("\n")
    break
  case "SetSceneValue_Uint8":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetSceneValueUint8 requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2736 := (strconv.Atoi(flag.Arg(1)))
    if err2736 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2737 := flag.Arg(2)
    mbTrans2738 := thrift.NewTMemoryBufferLen(len(arg2737))
    defer mbTrans2738.Close()
    _, err2739 := mbTrans2738.WriteString(arg2737)
    if err2739 != nil {
      Usage()
      return
    }
    factory2740 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2741 := factory2740.GetProtocol(mbTrans2738)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2742 := argvalue1.Read(jsProt2741)
    if err2742 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    tmp2, err2743 := (strconv.Atoi(flag.Arg(3)))
    if err2743 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    fmt.Print(client.SetSceneValueUint8(value0, value1, value2))
    fmt.Print("\n")
    break
  case "SetSceneValue_Float":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetSceneValueFloat requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2744 := (strconv.Atoi(flag.Arg(1)))
    if err2744 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2745 := flag.Arg(2)
    mbTrans2746 := thrift.NewTMemoryBufferLen(len(arg2745))
    defer mbTrans2746.Close()
    _, err2747 := mbTrans2746.WriteString(arg2745)
    if err2747 != nil {
      Usage()
      return
    }
    factory2748 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2749 := factory2748.GetProtocol(mbTrans2746)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2750 := argvalue1.Read(jsProt2749)
    if err2750 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2, err2751 := (strconv.Atof64(flag.Arg(3)))
    if err2751 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.SetSceneValueFloat(value0, value1, value2))
    fmt.Print("\n")
    break
  case "SetSceneValue_Int32":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetSceneValueInt32 requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2752 := (strconv.Atoi(flag.Arg(1)))
    if err2752 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2753 := flag.Arg(2)
    mbTrans2754 := thrift.NewTMemoryBufferLen(len(arg2753))
    defer mbTrans2754.Close()
    _, err2755 := mbTrans2754.WriteString(arg2753)
    if err2755 != nil {
      Usage()
      return
    }
    factory2756 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2757 := factory2756.GetProtocol(mbTrans2754)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2758 := argvalue1.Read(jsProt2757)
    if err2758 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    tmp2, err2759 := (strconv.Atoi(flag.Arg(3)))
    if err2759 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    fmt.Print(client.SetSceneValueInt32(value0, value1, value2))
    fmt.Print("\n")
    break
  case "SetSceneValue_Int16":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetSceneValueInt16 requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2760 := (strconv.Atoi(flag.Arg(1)))
    if err2760 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2761 := flag.Arg(2)
    mbTrans2762 := thrift.NewTMemoryBufferLen(len(arg2761))
    defer mbTrans2762.Close()
    _, err2763 := mbTrans2762.WriteString(arg2761)
    if err2763 != nil {
      Usage()
      return
    }
    factory2764 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2765 := factory2764.GetProtocol(mbTrans2762)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2766 := argvalue1.Read(jsProt2765)
    if err2766 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    tmp2, err2767 := (strconv.Atoi(flag.Arg(3)))
    if err2767 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    fmt.Print(client.SetSceneValueInt16(value0, value1, value2))
    fmt.Print("\n")
    break
  case "SetSceneValue_String":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetSceneValueString requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2768 := (strconv.Atoi(flag.Arg(1)))
    if err2768 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2769 := flag.Arg(2)
    mbTrans2770 := thrift.NewTMemoryBufferLen(len(arg2769))
    defer mbTrans2770.Close()
    _, err2771 := mbTrans2770.WriteString(arg2769)
    if err2771 != nil {
      Usage()
      return
    }
    factory2772 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2773 := factory2772.GetProtocol(mbTrans2770)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2774 := argvalue1.Read(jsProt2773)
    if err2774 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.SetSceneValueString(value0, value1, value2))
    fmt.Print("\n")
    break
  case "SetSceneValueListSelection_String":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetSceneValueListSelectionString requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2776 := (strconv.Atoi(flag.Arg(1)))
    if err2776 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2777 := flag.Arg(2)
    mbTrans2778 := thrift.NewTMemoryBufferLen(len(arg2777))
    defer mbTrans2778.Close()
    _, err2779 := mbTrans2778.WriteString(arg2777)
    if err2779 != nil {
      Usage()
      return
    }
    factory2780 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2781 := factory2780.GetProtocol(mbTrans2778)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2782 := argvalue1.Read(jsProt2781)
    if err2782 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.SetSceneValueListSelectionString(value0, value1, value2))
    fmt.Print("\n")
    break
  case "SetSceneValueListSelection_Int32":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetSceneValueListSelectionInt32 requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2784 := (strconv.Atoi(flag.Arg(1)))
    if err2784 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2785 := flag.Arg(2)
    mbTrans2786 := thrift.NewTMemoryBufferLen(len(arg2785))
    defer mbTrans2786.Close()
    _, err2787 := mbTrans2786.WriteString(arg2785)
    if err2787 != nil {
      Usage()
      return
    }
    factory2788 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2789 := factory2788.GetProtocol(mbTrans2786)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2790 := argvalue1.Read(jsProt2789)
    if err2790 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    tmp2, err2791 := (strconv.Atoi(flag.Arg(3)))
    if err2791 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    fmt.Print(client.SetSceneValueListSelectionInt32(value0, value1, value2))
    fmt.Print("\n")
    break
  case "GetSceneLabel":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetSceneLabel requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2792 := (strconv.Atoi(flag.Arg(1)))
    if err2792 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetSceneLabel(value0))
    fmt.Print("\n")
    break
  case "SetSceneLabel":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetSceneLabel requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2793 := (strconv.Atoi(flag.Arg(1)))
    if err2793 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.SetSceneLabel(value0, value1))
    fmt.Print("\n")
    break
  case "SceneExists":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "SceneExists requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2795 := (strconv.Atoi(flag.Arg(1)))
    if err2795 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    fmt.Print(client.SceneExists(value0))
    fmt.Print("\n")
    break
  case "ActivateScene":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "ActivateScene requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2796 := (strconv.Atoi(flag.Arg(1)))
    if err2796 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    fmt.Print(client.ActivateScene(value0))
    fmt.Print("\n")
    break
  case "GetDriverStatistics":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetDriverStatistics requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2797 := (strconv.Atoi(flag.Arg(1)))
    if err2797 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetDriverStatistics(value0))
    fmt.Print("\n")
    break
  case "GetNodeStatistics":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeStatistics requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2798 := (strconv.Atoi(flag.Arg(1)))
    if err2798 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2799 := (strconv.Atoi(flag.Arg(2)))
    if err2799 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeStatistics(value0, value1))
    fmt.Print("\n")
    break
  case "SendAllValues":
    if flag.NArg() - 1 != 0 {
      fmt.Fprint(os.Stderr, "SendAllValues requires 0 args\n")
      flag.Usage()
    }
    fmt.Print(client.SendAllValues())
    fmt.Print("\n")
    break
  case "ping":
    if flag.NArg() - 1 != 0 {
      fmt.Fprint(os.Stderr, "Ping requires 0 args\n")
      flag.Usage()
    }
    fmt.Print(client.Ping())
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprint(os.Stderr, "Invalid function ", cmd, "\n")
  }
}
