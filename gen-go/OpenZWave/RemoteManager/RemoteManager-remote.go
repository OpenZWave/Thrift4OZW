/* Autogenerated by Thrift Compiler (0.9.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package main

import (
        "flag"
        "fmt"
        "http"
        "net"
        "os"
        "strconv"
        "thrift"
        "thriftlib/OpenZWave"
)

func Usage() {
  fmt.Fprint(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:\n")
  flag.PrintDefaults()
  fmt.Fprint(os.Stderr, "Functions:\n")
  fmt.Fprint(os.Stderr, "  WriteConfig(_homeId int32) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetControllerNodeId(_homeId int32) (retval1795 byte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsPrimaryController(_homeId int32) (retval1796 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsStaticUpdateController(_homeId int32) (retval1797 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsBridgeController(_homeId int32) (retval1798 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetLibraryVersion(_homeId int32) (retval1799 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetLibraryTypeName(_homeId int32) (retval1800 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetSendQueueCount(_homeId int32) (retval1801 int32, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  LogDriverStatistics(_homeId int32) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetPollInterval() (retval1803 int32, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetPollInterval(_milliseconds int32, _bIntervalBetweenPolls bool) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  EnablePoll(_valueId *RemoteValueID, _intensity byte) (retval1805 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  DisablePoll(_valueId *RemoteValueID) (retval1806 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  isPolled(_valueId *RemoteValueID) (retval1807 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetPollIntensity(_valueId *RemoteValueID, _intensity byte) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  RefreshNodeInfo(_homeId int32, _nodeId byte) (retval1809 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  RequestNodeState(_homeId int32, _nodeId byte) (retval1810 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  RequestNodeDynamic(_homeId int32, _nodeId byte) (retval1811 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsNodeListeningDevice(_homeId int32, _nodeId byte) (retval1812 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsNodeFrequentListeningDevice(_homeId int32, _nodeId byte) (retval1813 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsNodeBeamingDevice(_homeId int32, _nodeId byte) (retval1814 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsNodeRoutingDevice(_homeId int32, _nodeId byte) (retval1815 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsNodeSecurityDevice(_homeId int32, _nodeId byte) (retval1816 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeMaxBaudRate(_homeId int32, _nodeId byte) (retval1817 int32, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeVersion(_homeId int32, _nodeId byte) (retval1818 byte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeSecurity(_homeId int32, _nodeId byte) (retval1819 byte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeBasic(_homeId int32, _nodeId byte) (retval1820 byte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeGeneric(_homeId int32, _nodeId byte) (retval1821 byte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeSpecific(_homeId int32, _nodeId byte) (retval1822 byte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeType(_homeId int32, _nodeId byte) (retval1823 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeNeighbors(_homeId int32, _nodeId byte) (retval1824 *UInt32ListByte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeManufacturerName(_homeId int32, _nodeId byte) (retval1825 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeProductName(_homeId int32, _nodeId byte) (retval1826 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeName(_homeId int32, _nodeId byte) (retval1827 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeLocation(_homeId int32, _nodeId byte) (retval1828 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeManufacturerId(_homeId int32, _nodeId byte) (retval1829 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeProductType(_homeId int32, _nodeId byte) (retval1830 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeProductId(_homeId int32, _nodeId byte) (retval1831 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetNodeManufacturerName(_homeId int32, _nodeId byte, _manufacturerName string) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetNodeProductName(_homeId int32, _nodeId byte, _productName string) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetNodeName(_homeId int32, _nodeId byte, _nodeName string) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetNodeLocation(_homeId int32, _nodeId byte, _location string) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetNodeOn(_homeId int32, _nodeId byte) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetNodeOff(_homeId int32, _nodeId byte) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetNodeLevel(_homeId int32, _nodeId byte, _level byte) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsNodeInfoReceived(_homeId int32, _nodeId byte) (retval1839 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeClassInformation(_homeId int32, _nodeId byte, _commandClassId byte) (retval1840 *BoolGetNodeClassInformation, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueLabel(_id *RemoteValueID) (retval1841 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetValueLabel(_id *RemoteValueID, _value string) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueUnits(_id *RemoteValueID) (retval1843 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetValueUnits(_id *RemoteValueID, _value string) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueHelp(_id *RemoteValueID) (retval1845 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetValueHelp(_id *RemoteValueID, _value string) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueMin(_id *RemoteValueID) (retval1847 int32, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueMax(_id *RemoteValueID) (retval1848 int32, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsValueReadOnly(_id *RemoteValueID) (retval1849 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsValueWriteOnly(_id *RemoteValueID) (retval1850 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsValueSet(_id *RemoteValueID) (retval1851 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsValuePolled(_id *RemoteValueID) (retval1852 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueAsBool(_id *RemoteValueID) (retval1853 *BoolBool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueAsByte(_id *RemoteValueID) (retval1854 *BoolUInt8, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueAsFloat(_id *RemoteValueID) (retval1855 *BoolFloat, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueAsInt(_id *RemoteValueID) (retval1856 *BoolInt, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueAsShort(_id *RemoteValueID) (retval1857 *BoolInt16, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueAsString(_id *RemoteValueID) (retval1858 *BoolString, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueListSelection_String(_id *RemoteValueID) (retval1859 *BoolString, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueListSelection_Int32(_id *RemoteValueID) (retval1860 *BoolInt, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueListItems(_id *RemoteValueID) (retval1861 *BoolListString, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueFloatPrecision(_id *RemoteValueID) (retval1862 *BoolUInt8, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetValue_Bool(_id *RemoteValueID, _value bool) (retval1863 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetValue_UInt8(_id *RemoteValueID, _value byte) (retval1864 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetValue_Float(_id *RemoteValueID, _value float64) (retval1865 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetValue_Int32(_id *RemoteValueID, _value int32) (retval1866 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetValue_Int16(_id *RemoteValueID, _value int16) (retval1867 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetValue_String(_id *RemoteValueID, _value string) (retval1868 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetValueListSelection(_id *RemoteValueID, _selectedItem string) (retval1869 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  RefreshValue(_id *RemoteValueID) (retval1870 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetChangeVerified(_id *RemoteValueID, _verify bool) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  PressButton(_id *RemoteValueID) (retval1872 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  ReleaseButton(_id *RemoteValueID) (retval1873 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNumSwitchPoints(_id *RemoteValueID) (retval1874 byte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetSwitchPoint(_id *RemoteValueID, _hours byte, _minutes byte, _setback byte) (retval1875 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  RemoveSwitchPoint(_id *RemoteValueID, _hours byte, _minutes byte) (retval1876 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  ClearSwitchPoints(_id *RemoteValueID) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetSwitchPoint(_id *RemoteValueID, _idx byte) (retval1878 *GetSwitchPointReturnStruct, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SwitchAllOn(_homeId int32) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SwitchAllOff(_homeId int32) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetConfigParam(_homeId int32, _nodeId byte, _param byte, _value int32, _size byte) (retval1881 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  RequestConfigParam(_homeId int32, _nodeId byte, _param byte) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  RequestAllConfigParams(_homeId int32, _nodeId byte) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNumGroups(_homeId int32, _nodeId byte) (retval1884 byte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetAssociations(_homeId int32, _nodeId byte, _groupIdx byte) (retval1885 *GetAssociationsReturnStruct, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetMaxAssociations(_homeId int32, _nodeId byte, _groupIdx byte) (retval1886 byte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetGroupLabel(_homeId int32, _nodeId byte, _groupIdx byte) (retval1887 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  AddAssociation(_homeId int32, _nodeId byte, _groupIdx byte, _targetNodeId byte) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  RemoveAssociation(_homeId int32, _nodeId byte, _groupIdx byte, _targetNodeId byte) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  ResetController(_homeId int32) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SoftReset(_homeId int32) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  BeginControllerCommand(_homeId int32, _command DriverControllerCommand, _highPower bool, _nodeId byte, _arg byte) (retval1892 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  CancelControllerCommand(_homeId int32) (retval1893 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNumScenes() (retval1894 byte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetAllScenes() (retval1895 *GetAllScenesReturnStruct, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  CreateScene() (retval1896 byte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  RemoveScene(_sceneId byte) (retval1897 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  AddSceneValue_Bool(_sceneId byte, _valueId *RemoteValueID, _value bool) (retval1898 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  AddSceneValue_Uint8(_sceneId byte, _valueId *RemoteValueID, _value byte) (retval1899 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  AddSceneValue_Float(_sceneId byte, _valueId *RemoteValueID, _value float64) (retval1900 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  AddSceneValue_Int32(_sceneId byte, _valueId *RemoteValueID, _value int32) (retval1901 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  AddSceneValue_Int16(_sceneId byte, _valueId *RemoteValueID, _value int16) (retval1902 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  AddSceneValue_String(_sceneId byte, _valueId *RemoteValueID, _value string) (retval1903 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  AddSceneValueListSelection_String(_sceneId byte, _valueId *RemoteValueID, _value string) (retval1904 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  AddSceneValueListSelection_Int32(_sceneId byte, _valueId *RemoteValueID, _value int32) (retval1905 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  RemoveSceneValue(_sceneId byte, _valueId *RemoteValueID) (retval1906 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SceneGetValues(_sceneId byte) (retval1907 *SceneGetValuesReturnStruct, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SceneGetValueAsBool(_sceneId byte, _valueId *RemoteValueID) (retval1908 *BoolBool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SceneGetValueAsByte(_sceneId byte, _valueId *RemoteValueID) (retval1909 *BoolUInt8, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SceneGetValueAsFloat(_sceneId byte, _valueId *RemoteValueID) (retval1910 *BoolFloat, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SceneGetValueAsInt(_sceneId byte, _valueId *RemoteValueID) (retval1911 *BoolInt, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SceneGetValueAsShort(_sceneId byte, _valueId *RemoteValueID) (retval1912 *BoolInt16, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SceneGetValueAsString(_sceneId byte, _valueId *RemoteValueID) (retval1913 *BoolString, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SceneGetValueListSelection_String(_sceneId byte, _valueId *RemoteValueID) (retval1914 *BoolString, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SceneGetValueListSelection_Int32(_sceneId byte, _valueId *RemoteValueID) (retval1915 *BoolInt, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetSceneValue_Bool(_sceneId byte, _valueId *RemoteValueID, _value bool) (retval1916 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetSceneValue_Uint8(_sceneId byte, _valueId *RemoteValueID, _value byte) (retval1917 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetSceneValue_Float(_sceneId byte, _valueId *RemoteValueID, _value float64) (retval1918 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetSceneValue_Int32(_sceneId byte, _valueId *RemoteValueID, _value int32) (retval1919 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetSceneValue_Int16(_sceneId byte, _valueId *RemoteValueID, _value int16) (retval1920 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetSceneValue_String(_sceneId byte, _valueId *RemoteValueID, _value string) (retval1921 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetSceneValueListSelection_String(_sceneId byte, _valueId *RemoteValueID, _value string) (retval1922 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetSceneValueListSelection_Int32(_sceneId byte, _valueId *RemoteValueID, _value int32) (retval1923 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetSceneLabel(_sceneId byte) (retval1924 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetSceneLabel(_sceneId byte, _value string) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SceneExists(_sceneId byte) (retval1926 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  ActivateScene(_sceneId byte) (retval1927 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetDriverStatistics(_homeId int32) (retval1928 *GetDriverStatisticsReturnStruct, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SendAllValues() (err os.Error)\n")
  fmt.Fprint(os.Stderr, "\n")
  os.Exit(0)
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  var help bool
  var url http.URL
  var trans thrift.TTransport
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.BoolVar(&help, "help", false, "See usage string")
  flag.Parse()
  if help || flag.NArg() == 0 {
    flag.Usage()
  }
  
  if len(urlString) > 0 {
    url, err := http.ParseURL(urlString)
    if err != nil {
      fmt.Fprint(os.Stderr, "Error parsing URL: ", err.String(), "\n")
      flag.Usage()
    }
    host = url.Host
    useHttp = len(url.Scheme) <= 0 || url.Scheme == "http"
  } else if useHttp {
    _, err := http.ParseURL(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprint(os.Stderr, "Error parsing URL: ", err.String(), "\n")
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err os.Error
  if useHttp {
    trans, err = thrift.NewTHttpClient(url.Raw)
  } else {
    addr, err := net.ResolveTCPAddr("tcp", fmt.Sprint(host, ":", port))
    if err != nil {
      fmt.Fprint(os.Stderr, "Error resolving address", err.String())
      os.Exit(1)
    }
    trans, err = thrift.NewTNonblockingSocketAddr(addr)
    if framed {
      trans = thrift.NewTFramedTransport(trans)
    }
  }
  if err != nil {
    fmt.Fprint(os.Stderr, "Error creating transport", err.String())
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactory()
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
    break
  default:
    fmt.Fprint(os.Stderr, "Invalid protocol specified: ", protocol, "\n")
    Usage()
    os.Exit(1)
  }
  client := OpenZWave.NewRemoteManagerClientFactory(trans, protocolFactory)
  if err = trans.Open(); err != nil {
    fmt.Fprint(os.Stderr, "Error opening socket to ", host, ":", port, " ", err.String())
    os.Exit(1)
  }
  
  switch cmd {
  case "WriteConfig":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "WriteConfig requires 1 args\n")
      flag.Usage()
    }
    tmp0, err1930 := (strconv.Atoi(flag.Arg(1)))
    if err1930 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.WriteConfig(value0))
    fmt.Print("\n")
    break
  case "GetControllerNodeId":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetControllerNodeId requires 1 args\n")
      flag.Usage()
    }
    tmp0, err1931 := (strconv.Atoi(flag.Arg(1)))
    if err1931 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetControllerNodeId(value0))
    fmt.Print("\n")
    break
  case "IsPrimaryController":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "IsPrimaryController requires 1 args\n")
      flag.Usage()
    }
    tmp0, err1932 := (strconv.Atoi(flag.Arg(1)))
    if err1932 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.IsPrimaryController(value0))
    fmt.Print("\n")
    break
  case "IsStaticUpdateController":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "IsStaticUpdateController requires 1 args\n")
      flag.Usage()
    }
    tmp0, err1933 := (strconv.Atoi(flag.Arg(1)))
    if err1933 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.IsStaticUpdateController(value0))
    fmt.Print("\n")
    break
  case "IsBridgeController":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "IsBridgeController requires 1 args\n")
      flag.Usage()
    }
    tmp0, err1934 := (strconv.Atoi(flag.Arg(1)))
    if err1934 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.IsBridgeController(value0))
    fmt.Print("\n")
    break
  case "GetLibraryVersion":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetLibraryVersion requires 1 args\n")
      flag.Usage()
    }
    tmp0, err1935 := (strconv.Atoi(flag.Arg(1)))
    if err1935 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetLibraryVersion(value0))
    fmt.Print("\n")
    break
  case "GetLibraryTypeName":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetLibraryTypeName requires 1 args\n")
      flag.Usage()
    }
    tmp0, err1936 := (strconv.Atoi(flag.Arg(1)))
    if err1936 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetLibraryTypeName(value0))
    fmt.Print("\n")
    break
  case "GetSendQueueCount":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetSendQueueCount requires 1 args\n")
      flag.Usage()
    }
    tmp0, err1937 := (strconv.Atoi(flag.Arg(1)))
    if err1937 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetSendQueueCount(value0))
    fmt.Print("\n")
    break
  case "LogDriverStatistics":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "LogDriverStatistics requires 1 args\n")
      flag.Usage()
    }
    tmp0, err1938 := (strconv.Atoi(flag.Arg(1)))
    if err1938 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.LogDriverStatistics(value0))
    fmt.Print("\n")
    break
  case "GetPollInterval":
    if flag.NArg() - 1 != 0 {
      fmt.Fprint(os.Stderr, "GetPollInterval requires 0 args\n")
      flag.Usage()
    }
    fmt.Print(client.GetPollInterval())
    fmt.Print("\n")
    break
  case "SetPollInterval":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetPollInterval requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1939 := (strconv.Atoi(flag.Arg(1)))
    if err1939 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2) == "true"
    value1 := argvalue1
    fmt.Print(client.SetPollInterval(value0, value1))
    fmt.Print("\n")
    break
  case "EnablePoll":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "EnablePoll requires 2 args\n")
      flag.Usage()
    }
    arg1941 := flag.Arg(1)
    mbTrans1942 := thrift.NewTMemoryBufferLen(len(arg1941))
    defer mbTrans1942.Close()
    _, err1943 := mbTrans1942.WriteString(arg1941)
    if err1943 != nil {
      Usage()
      return
    }
    factory1944 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1945 := factory1944.GetProtocol(mbTrans1942)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err1946 := argvalue0.Read(jsProt1945)
    if err1946 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err1947 := (strconv.Atoi(flag.Arg(2)))
    if err1947 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.EnablePoll(value0, value1))
    fmt.Print("\n")
    break
  case "DisablePoll":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "DisablePoll requires 1 args\n")
      flag.Usage()
    }
    arg1948 := flag.Arg(1)
    mbTrans1949 := thrift.NewTMemoryBufferLen(len(arg1948))
    defer mbTrans1949.Close()
    _, err1950 := mbTrans1949.WriteString(arg1948)
    if err1950 != nil {
      Usage()
      return
    }
    factory1951 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1952 := factory1951.GetProtocol(mbTrans1949)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err1953 := argvalue0.Read(jsProt1952)
    if err1953 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DisablePoll(value0))
    fmt.Print("\n")
    break
  case "isPolled":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "IsPolled requires 1 args\n")
      flag.Usage()
    }
    arg1954 := flag.Arg(1)
    mbTrans1955 := thrift.NewTMemoryBufferLen(len(arg1954))
    defer mbTrans1955.Close()
    _, err1956 := mbTrans1955.WriteString(arg1954)
    if err1956 != nil {
      Usage()
      return
    }
    factory1957 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1958 := factory1957.GetProtocol(mbTrans1955)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err1959 := argvalue0.Read(jsProt1958)
    if err1959 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.IsPolled(value0))
    fmt.Print("\n")
    break
  case "SetPollIntensity":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetPollIntensity requires 2 args\n")
      flag.Usage()
    }
    arg1960 := flag.Arg(1)
    mbTrans1961 := thrift.NewTMemoryBufferLen(len(arg1960))
    defer mbTrans1961.Close()
    _, err1962 := mbTrans1961.WriteString(arg1960)
    if err1962 != nil {
      Usage()
      return
    }
    factory1963 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1964 := factory1963.GetProtocol(mbTrans1961)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err1965 := argvalue0.Read(jsProt1964)
    if err1965 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err1966 := (strconv.Atoi(flag.Arg(2)))
    if err1966 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.SetPollIntensity(value0, value1))
    fmt.Print("\n")
    break
  case "RefreshNodeInfo":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "RefreshNodeInfo requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1967 := (strconv.Atoi(flag.Arg(1)))
    if err1967 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1968 := (strconv.Atoi(flag.Arg(2)))
    if err1968 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.RefreshNodeInfo(value0, value1))
    fmt.Print("\n")
    break
  case "RequestNodeState":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "RequestNodeState requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1969 := (strconv.Atoi(flag.Arg(1)))
    if err1969 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1970 := (strconv.Atoi(flag.Arg(2)))
    if err1970 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.RequestNodeState(value0, value1))
    fmt.Print("\n")
    break
  case "RequestNodeDynamic":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "RequestNodeDynamic requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1971 := (strconv.Atoi(flag.Arg(1)))
    if err1971 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1972 := (strconv.Atoi(flag.Arg(2)))
    if err1972 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.RequestNodeDynamic(value0, value1))
    fmt.Print("\n")
    break
  case "IsNodeListeningDevice":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "IsNodeListeningDevice requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1973 := (strconv.Atoi(flag.Arg(1)))
    if err1973 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1974 := (strconv.Atoi(flag.Arg(2)))
    if err1974 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.IsNodeListeningDevice(value0, value1))
    fmt.Print("\n")
    break
  case "IsNodeFrequentListeningDevice":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "IsNodeFrequentListeningDevice requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1975 := (strconv.Atoi(flag.Arg(1)))
    if err1975 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1976 := (strconv.Atoi(flag.Arg(2)))
    if err1976 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.IsNodeFrequentListeningDevice(value0, value1))
    fmt.Print("\n")
    break
  case "IsNodeBeamingDevice":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "IsNodeBeamingDevice requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1977 := (strconv.Atoi(flag.Arg(1)))
    if err1977 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1978 := (strconv.Atoi(flag.Arg(2)))
    if err1978 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.IsNodeBeamingDevice(value0, value1))
    fmt.Print("\n")
    break
  case "IsNodeRoutingDevice":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "IsNodeRoutingDevice requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1979 := (strconv.Atoi(flag.Arg(1)))
    if err1979 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1980 := (strconv.Atoi(flag.Arg(2)))
    if err1980 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.IsNodeRoutingDevice(value0, value1))
    fmt.Print("\n")
    break
  case "IsNodeSecurityDevice":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "IsNodeSecurityDevice requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1981 := (strconv.Atoi(flag.Arg(1)))
    if err1981 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1982 := (strconv.Atoi(flag.Arg(2)))
    if err1982 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.IsNodeSecurityDevice(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeMaxBaudRate":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeMaxBaudRate requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1983 := (strconv.Atoi(flag.Arg(1)))
    if err1983 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1984 := (strconv.Atoi(flag.Arg(2)))
    if err1984 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeMaxBaudRate(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeVersion":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeVersion requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1985 := (strconv.Atoi(flag.Arg(1)))
    if err1985 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1986 := (strconv.Atoi(flag.Arg(2)))
    if err1986 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeVersion(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeSecurity":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeSecurity requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1987 := (strconv.Atoi(flag.Arg(1)))
    if err1987 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1988 := (strconv.Atoi(flag.Arg(2)))
    if err1988 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeSecurity(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeBasic":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeBasic requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1989 := (strconv.Atoi(flag.Arg(1)))
    if err1989 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1990 := (strconv.Atoi(flag.Arg(2)))
    if err1990 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeBasic(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeGeneric":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeGeneric requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1991 := (strconv.Atoi(flag.Arg(1)))
    if err1991 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1992 := (strconv.Atoi(flag.Arg(2)))
    if err1992 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeGeneric(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeSpecific":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeSpecific requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1993 := (strconv.Atoi(flag.Arg(1)))
    if err1993 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1994 := (strconv.Atoi(flag.Arg(2)))
    if err1994 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeSpecific(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeType":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeType requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1995 := (strconv.Atoi(flag.Arg(1)))
    if err1995 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1996 := (strconv.Atoi(flag.Arg(2)))
    if err1996 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeType(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeNeighbors":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeNeighbors requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1997 := (strconv.Atoi(flag.Arg(1)))
    if err1997 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1998 := (strconv.Atoi(flag.Arg(2)))
    if err1998 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeNeighbors(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeManufacturerName":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeManufacturerName requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1999 := (strconv.Atoi(flag.Arg(1)))
    if err1999 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2000 := (strconv.Atoi(flag.Arg(2)))
    if err2000 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeManufacturerName(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeProductName":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeProductName requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2001 := (strconv.Atoi(flag.Arg(1)))
    if err2001 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2002 := (strconv.Atoi(flag.Arg(2)))
    if err2002 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeProductName(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeName":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeName requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2003 := (strconv.Atoi(flag.Arg(1)))
    if err2003 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2004 := (strconv.Atoi(flag.Arg(2)))
    if err2004 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeName(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeLocation":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeLocation requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2005 := (strconv.Atoi(flag.Arg(1)))
    if err2005 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2006 := (strconv.Atoi(flag.Arg(2)))
    if err2006 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeLocation(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeManufacturerId":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeManufacturerId requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2007 := (strconv.Atoi(flag.Arg(1)))
    if err2007 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2008 := (strconv.Atoi(flag.Arg(2)))
    if err2008 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeManufacturerId(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeProductType":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeProductType requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2009 := (strconv.Atoi(flag.Arg(1)))
    if err2009 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2010 := (strconv.Atoi(flag.Arg(2)))
    if err2010 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeProductType(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeProductId":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeProductId requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2011 := (strconv.Atoi(flag.Arg(1)))
    if err2011 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2012 := (strconv.Atoi(flag.Arg(2)))
    if err2012 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeProductId(value0, value1))
    fmt.Print("\n")
    break
  case "SetNodeManufacturerName":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetNodeManufacturerName requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2013 := (strconv.Atoi(flag.Arg(1)))
    if err2013 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2014 := (strconv.Atoi(flag.Arg(2)))
    if err2014 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.SetNodeManufacturerName(value0, value1, value2))
    fmt.Print("\n")
    break
  case "SetNodeProductName":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetNodeProductName requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2016 := (strconv.Atoi(flag.Arg(1)))
    if err2016 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2017 := (strconv.Atoi(flag.Arg(2)))
    if err2017 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.SetNodeProductName(value0, value1, value2))
    fmt.Print("\n")
    break
  case "SetNodeName":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetNodeName requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2019 := (strconv.Atoi(flag.Arg(1)))
    if err2019 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2020 := (strconv.Atoi(flag.Arg(2)))
    if err2020 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.SetNodeName(value0, value1, value2))
    fmt.Print("\n")
    break
  case "SetNodeLocation":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetNodeLocation requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2022 := (strconv.Atoi(flag.Arg(1)))
    if err2022 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2023 := (strconv.Atoi(flag.Arg(2)))
    if err2023 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.SetNodeLocation(value0, value1, value2))
    fmt.Print("\n")
    break
  case "SetNodeOn":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetNodeOn requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2025 := (strconv.Atoi(flag.Arg(1)))
    if err2025 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2026 := (strconv.Atoi(flag.Arg(2)))
    if err2026 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.SetNodeOn(value0, value1))
    fmt.Print("\n")
    break
  case "SetNodeOff":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetNodeOff requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2027 := (strconv.Atoi(flag.Arg(1)))
    if err2027 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2028 := (strconv.Atoi(flag.Arg(2)))
    if err2028 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.SetNodeOff(value0, value1))
    fmt.Print("\n")
    break
  case "SetNodeLevel":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetNodeLevel requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2029 := (strconv.Atoi(flag.Arg(1)))
    if err2029 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2030 := (strconv.Atoi(flag.Arg(2)))
    if err2030 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    tmp2, err2031 := (strconv.Atoi(flag.Arg(3)))
    if err2031 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    fmt.Print(client.SetNodeLevel(value0, value1, value2))
    fmt.Print("\n")
    break
  case "IsNodeInfoReceived":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "IsNodeInfoReceived requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2032 := (strconv.Atoi(flag.Arg(1)))
    if err2032 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2033 := (strconv.Atoi(flag.Arg(2)))
    if err2033 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.IsNodeInfoReceived(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeClassInformation":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "GetNodeClassInformation requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2034 := (strconv.Atoi(flag.Arg(1)))
    if err2034 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2035 := (strconv.Atoi(flag.Arg(2)))
    if err2035 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    tmp2, err2036 := (strconv.Atoi(flag.Arg(3)))
    if err2036 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    fmt.Print(client.GetNodeClassInformation(value0, value1, value2))
    fmt.Print("\n")
    break
  case "GetValueLabel":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueLabel requires 1 args\n")
      flag.Usage()
    }
    arg2037 := flag.Arg(1)
    mbTrans2038 := thrift.NewTMemoryBufferLen(len(arg2037))
    defer mbTrans2038.Close()
    _, err2039 := mbTrans2038.WriteString(arg2037)
    if err2039 != nil {
      Usage()
      return
    }
    factory2040 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2041 := factory2040.GetProtocol(mbTrans2038)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2042 := argvalue0.Read(jsProt2041)
    if err2042 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueLabel(value0))
    fmt.Print("\n")
    break
  case "SetValueLabel":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetValueLabel requires 2 args\n")
      flag.Usage()
    }
    arg2043 := flag.Arg(1)
    mbTrans2044 := thrift.NewTMemoryBufferLen(len(arg2043))
    defer mbTrans2044.Close()
    _, err2045 := mbTrans2044.WriteString(arg2043)
    if err2045 != nil {
      Usage()
      return
    }
    factory2046 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2047 := factory2046.GetProtocol(mbTrans2044)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2048 := argvalue0.Read(jsProt2047)
    if err2048 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.SetValueLabel(value0, value1))
    fmt.Print("\n")
    break
  case "GetValueUnits":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueUnits requires 1 args\n")
      flag.Usage()
    }
    arg2050 := flag.Arg(1)
    mbTrans2051 := thrift.NewTMemoryBufferLen(len(arg2050))
    defer mbTrans2051.Close()
    _, err2052 := mbTrans2051.WriteString(arg2050)
    if err2052 != nil {
      Usage()
      return
    }
    factory2053 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2054 := factory2053.GetProtocol(mbTrans2051)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2055 := argvalue0.Read(jsProt2054)
    if err2055 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueUnits(value0))
    fmt.Print("\n")
    break
  case "SetValueUnits":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetValueUnits requires 2 args\n")
      flag.Usage()
    }
    arg2056 := flag.Arg(1)
    mbTrans2057 := thrift.NewTMemoryBufferLen(len(arg2056))
    defer mbTrans2057.Close()
    _, err2058 := mbTrans2057.WriteString(arg2056)
    if err2058 != nil {
      Usage()
      return
    }
    factory2059 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2060 := factory2059.GetProtocol(mbTrans2057)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2061 := argvalue0.Read(jsProt2060)
    if err2061 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.SetValueUnits(value0, value1))
    fmt.Print("\n")
    break
  case "GetValueHelp":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueHelp requires 1 args\n")
      flag.Usage()
    }
    arg2063 := flag.Arg(1)
    mbTrans2064 := thrift.NewTMemoryBufferLen(len(arg2063))
    defer mbTrans2064.Close()
    _, err2065 := mbTrans2064.WriteString(arg2063)
    if err2065 != nil {
      Usage()
      return
    }
    factory2066 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2067 := factory2066.GetProtocol(mbTrans2064)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2068 := argvalue0.Read(jsProt2067)
    if err2068 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueHelp(value0))
    fmt.Print("\n")
    break
  case "SetValueHelp":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetValueHelp requires 2 args\n")
      flag.Usage()
    }
    arg2069 := flag.Arg(1)
    mbTrans2070 := thrift.NewTMemoryBufferLen(len(arg2069))
    defer mbTrans2070.Close()
    _, err2071 := mbTrans2070.WriteString(arg2069)
    if err2071 != nil {
      Usage()
      return
    }
    factory2072 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2073 := factory2072.GetProtocol(mbTrans2070)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2074 := argvalue0.Read(jsProt2073)
    if err2074 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.SetValueHelp(value0, value1))
    fmt.Print("\n")
    break
  case "GetValueMin":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueMin requires 1 args\n")
      flag.Usage()
    }
    arg2076 := flag.Arg(1)
    mbTrans2077 := thrift.NewTMemoryBufferLen(len(arg2076))
    defer mbTrans2077.Close()
    _, err2078 := mbTrans2077.WriteString(arg2076)
    if err2078 != nil {
      Usage()
      return
    }
    factory2079 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2080 := factory2079.GetProtocol(mbTrans2077)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2081 := argvalue0.Read(jsProt2080)
    if err2081 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueMin(value0))
    fmt.Print("\n")
    break
  case "GetValueMax":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueMax requires 1 args\n")
      flag.Usage()
    }
    arg2082 := flag.Arg(1)
    mbTrans2083 := thrift.NewTMemoryBufferLen(len(arg2082))
    defer mbTrans2083.Close()
    _, err2084 := mbTrans2083.WriteString(arg2082)
    if err2084 != nil {
      Usage()
      return
    }
    factory2085 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2086 := factory2085.GetProtocol(mbTrans2083)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2087 := argvalue0.Read(jsProt2086)
    if err2087 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueMax(value0))
    fmt.Print("\n")
    break
  case "IsValueReadOnly":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "IsValueReadOnly requires 1 args\n")
      flag.Usage()
    }
    arg2088 := flag.Arg(1)
    mbTrans2089 := thrift.NewTMemoryBufferLen(len(arg2088))
    defer mbTrans2089.Close()
    _, err2090 := mbTrans2089.WriteString(arg2088)
    if err2090 != nil {
      Usage()
      return
    }
    factory2091 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2092 := factory2091.GetProtocol(mbTrans2089)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2093 := argvalue0.Read(jsProt2092)
    if err2093 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.IsValueReadOnly(value0))
    fmt.Print("\n")
    break
  case "IsValueWriteOnly":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "IsValueWriteOnly requires 1 args\n")
      flag.Usage()
    }
    arg2094 := flag.Arg(1)
    mbTrans2095 := thrift.NewTMemoryBufferLen(len(arg2094))
    defer mbTrans2095.Close()
    _, err2096 := mbTrans2095.WriteString(arg2094)
    if err2096 != nil {
      Usage()
      return
    }
    factory2097 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2098 := factory2097.GetProtocol(mbTrans2095)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2099 := argvalue0.Read(jsProt2098)
    if err2099 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.IsValueWriteOnly(value0))
    fmt.Print("\n")
    break
  case "IsValueSet":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "IsValueSet requires 1 args\n")
      flag.Usage()
    }
    arg2100 := flag.Arg(1)
    mbTrans2101 := thrift.NewTMemoryBufferLen(len(arg2100))
    defer mbTrans2101.Close()
    _, err2102 := mbTrans2101.WriteString(arg2100)
    if err2102 != nil {
      Usage()
      return
    }
    factory2103 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2104 := factory2103.GetProtocol(mbTrans2101)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2105 := argvalue0.Read(jsProt2104)
    if err2105 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.IsValueSet(value0))
    fmt.Print("\n")
    break
  case "IsValuePolled":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "IsValuePolled requires 1 args\n")
      flag.Usage()
    }
    arg2106 := flag.Arg(1)
    mbTrans2107 := thrift.NewTMemoryBufferLen(len(arg2106))
    defer mbTrans2107.Close()
    _, err2108 := mbTrans2107.WriteString(arg2106)
    if err2108 != nil {
      Usage()
      return
    }
    factory2109 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2110 := factory2109.GetProtocol(mbTrans2107)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2111 := argvalue0.Read(jsProt2110)
    if err2111 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.IsValuePolled(value0))
    fmt.Print("\n")
    break
  case "GetValueAsBool":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueAsBool requires 1 args\n")
      flag.Usage()
    }
    arg2112 := flag.Arg(1)
    mbTrans2113 := thrift.NewTMemoryBufferLen(len(arg2112))
    defer mbTrans2113.Close()
    _, err2114 := mbTrans2113.WriteString(arg2112)
    if err2114 != nil {
      Usage()
      return
    }
    factory2115 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2116 := factory2115.GetProtocol(mbTrans2113)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2117 := argvalue0.Read(jsProt2116)
    if err2117 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueAsBool(value0))
    fmt.Print("\n")
    break
  case "GetValueAsByte":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueAsByte requires 1 args\n")
      flag.Usage()
    }
    arg2118 := flag.Arg(1)
    mbTrans2119 := thrift.NewTMemoryBufferLen(len(arg2118))
    defer mbTrans2119.Close()
    _, err2120 := mbTrans2119.WriteString(arg2118)
    if err2120 != nil {
      Usage()
      return
    }
    factory2121 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2122 := factory2121.GetProtocol(mbTrans2119)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2123 := argvalue0.Read(jsProt2122)
    if err2123 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueAsByte(value0))
    fmt.Print("\n")
    break
  case "GetValueAsFloat":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueAsFloat requires 1 args\n")
      flag.Usage()
    }
    arg2124 := flag.Arg(1)
    mbTrans2125 := thrift.NewTMemoryBufferLen(len(arg2124))
    defer mbTrans2125.Close()
    _, err2126 := mbTrans2125.WriteString(arg2124)
    if err2126 != nil {
      Usage()
      return
    }
    factory2127 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2128 := factory2127.GetProtocol(mbTrans2125)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2129 := argvalue0.Read(jsProt2128)
    if err2129 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueAsFloat(value0))
    fmt.Print("\n")
    break
  case "GetValueAsInt":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueAsInt requires 1 args\n")
      flag.Usage()
    }
    arg2130 := flag.Arg(1)
    mbTrans2131 := thrift.NewTMemoryBufferLen(len(arg2130))
    defer mbTrans2131.Close()
    _, err2132 := mbTrans2131.WriteString(arg2130)
    if err2132 != nil {
      Usage()
      return
    }
    factory2133 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2134 := factory2133.GetProtocol(mbTrans2131)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2135 := argvalue0.Read(jsProt2134)
    if err2135 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueAsInt(value0))
    fmt.Print("\n")
    break
  case "GetValueAsShort":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueAsShort requires 1 args\n")
      flag.Usage()
    }
    arg2136 := flag.Arg(1)
    mbTrans2137 := thrift.NewTMemoryBufferLen(len(arg2136))
    defer mbTrans2137.Close()
    _, err2138 := mbTrans2137.WriteString(arg2136)
    if err2138 != nil {
      Usage()
      return
    }
    factory2139 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2140 := factory2139.GetProtocol(mbTrans2137)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2141 := argvalue0.Read(jsProt2140)
    if err2141 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueAsShort(value0))
    fmt.Print("\n")
    break
  case "GetValueAsString":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueAsString requires 1 args\n")
      flag.Usage()
    }
    arg2142 := flag.Arg(1)
    mbTrans2143 := thrift.NewTMemoryBufferLen(len(arg2142))
    defer mbTrans2143.Close()
    _, err2144 := mbTrans2143.WriteString(arg2142)
    if err2144 != nil {
      Usage()
      return
    }
    factory2145 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2146 := factory2145.GetProtocol(mbTrans2143)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2147 := argvalue0.Read(jsProt2146)
    if err2147 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueAsString(value0))
    fmt.Print("\n")
    break
  case "GetValueListSelection_String":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueListSelectionString requires 1 args\n")
      flag.Usage()
    }
    arg2148 := flag.Arg(1)
    mbTrans2149 := thrift.NewTMemoryBufferLen(len(arg2148))
    defer mbTrans2149.Close()
    _, err2150 := mbTrans2149.WriteString(arg2148)
    if err2150 != nil {
      Usage()
      return
    }
    factory2151 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2152 := factory2151.GetProtocol(mbTrans2149)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2153 := argvalue0.Read(jsProt2152)
    if err2153 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueListSelectionString(value0))
    fmt.Print("\n")
    break
  case "GetValueListSelection_Int32":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueListSelectionInt32 requires 1 args\n")
      flag.Usage()
    }
    arg2154 := flag.Arg(1)
    mbTrans2155 := thrift.NewTMemoryBufferLen(len(arg2154))
    defer mbTrans2155.Close()
    _, err2156 := mbTrans2155.WriteString(arg2154)
    if err2156 != nil {
      Usage()
      return
    }
    factory2157 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2158 := factory2157.GetProtocol(mbTrans2155)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2159 := argvalue0.Read(jsProt2158)
    if err2159 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueListSelectionInt32(value0))
    fmt.Print("\n")
    break
  case "GetValueListItems":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueListItems requires 1 args\n")
      flag.Usage()
    }
    arg2160 := flag.Arg(1)
    mbTrans2161 := thrift.NewTMemoryBufferLen(len(arg2160))
    defer mbTrans2161.Close()
    _, err2162 := mbTrans2161.WriteString(arg2160)
    if err2162 != nil {
      Usage()
      return
    }
    factory2163 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2164 := factory2163.GetProtocol(mbTrans2161)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2165 := argvalue0.Read(jsProt2164)
    if err2165 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueListItems(value0))
    fmt.Print("\n")
    break
  case "GetValueFloatPrecision":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueFloatPrecision requires 1 args\n")
      flag.Usage()
    }
    arg2166 := flag.Arg(1)
    mbTrans2167 := thrift.NewTMemoryBufferLen(len(arg2166))
    defer mbTrans2167.Close()
    _, err2168 := mbTrans2167.WriteString(arg2166)
    if err2168 != nil {
      Usage()
      return
    }
    factory2169 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2170 := factory2169.GetProtocol(mbTrans2167)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2171 := argvalue0.Read(jsProt2170)
    if err2171 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueFloatPrecision(value0))
    fmt.Print("\n")
    break
  case "SetValue_Bool":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetValueBool requires 2 args\n")
      flag.Usage()
    }
    arg2172 := flag.Arg(1)
    mbTrans2173 := thrift.NewTMemoryBufferLen(len(arg2172))
    defer mbTrans2173.Close()
    _, err2174 := mbTrans2173.WriteString(arg2172)
    if err2174 != nil {
      Usage()
      return
    }
    factory2175 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2176 := factory2175.GetProtocol(mbTrans2173)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2177 := argvalue0.Read(jsProt2176)
    if err2177 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2) == "true"
    value1 := argvalue1
    fmt.Print(client.SetValueBool(value0, value1))
    fmt.Print("\n")
    break
  case "SetValue_UInt8":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetValueUInt8 requires 2 args\n")
      flag.Usage()
    }
    arg2179 := flag.Arg(1)
    mbTrans2180 := thrift.NewTMemoryBufferLen(len(arg2179))
    defer mbTrans2180.Close()
    _, err2181 := mbTrans2180.WriteString(arg2179)
    if err2181 != nil {
      Usage()
      return
    }
    factory2182 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2183 := factory2182.GetProtocol(mbTrans2180)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2184 := argvalue0.Read(jsProt2183)
    if err2184 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err2185 := (strconv.Atoi(flag.Arg(2)))
    if err2185 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.SetValueUInt8(value0, value1))
    fmt.Print("\n")
    break
  case "SetValue_Float":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetValueFloat requires 2 args\n")
      flag.Usage()
    }
    arg2186 := flag.Arg(1)
    mbTrans2187 := thrift.NewTMemoryBufferLen(len(arg2186))
    defer mbTrans2187.Close()
    _, err2188 := mbTrans2187.WriteString(arg2186)
    if err2188 != nil {
      Usage()
      return
    }
    factory2189 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2190 := factory2189.GetProtocol(mbTrans2187)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2191 := argvalue0.Read(jsProt2190)
    if err2191 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1, err2192 := (strconv.Atof64(flag.Arg(2)))
    if err2192 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SetValueFloat(value0, value1))
    fmt.Print("\n")
    break
  case "SetValue_Int32":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetValueInt32 requires 2 args\n")
      flag.Usage()
    }
    arg2193 := flag.Arg(1)
    mbTrans2194 := thrift.NewTMemoryBufferLen(len(arg2193))
    defer mbTrans2194.Close()
    _, err2195 := mbTrans2194.WriteString(arg2193)
    if err2195 != nil {
      Usage()
      return
    }
    factory2196 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2197 := factory2196.GetProtocol(mbTrans2194)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2198 := argvalue0.Read(jsProt2197)
    if err2198 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err2199 := (strconv.Atoi(flag.Arg(2)))
    if err2199 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    fmt.Print(client.SetValueInt32(value0, value1))
    fmt.Print("\n")
    break
  case "SetValue_Int16":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetValueInt16 requires 2 args\n")
      flag.Usage()
    }
    arg2200 := flag.Arg(1)
    mbTrans2201 := thrift.NewTMemoryBufferLen(len(arg2200))
    defer mbTrans2201.Close()
    _, err2202 := mbTrans2201.WriteString(arg2200)
    if err2202 != nil {
      Usage()
      return
    }
    factory2203 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2204 := factory2203.GetProtocol(mbTrans2201)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2205 := argvalue0.Read(jsProt2204)
    if err2205 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err2206 := (strconv.Atoi(flag.Arg(2)))
    if err2206 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.SetValueInt16(value0, value1))
    fmt.Print("\n")
    break
  case "SetValue_String":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetValueString requires 2 args\n")
      flag.Usage()
    }
    arg2207 := flag.Arg(1)
    mbTrans2208 := thrift.NewTMemoryBufferLen(len(arg2207))
    defer mbTrans2208.Close()
    _, err2209 := mbTrans2208.WriteString(arg2207)
    if err2209 != nil {
      Usage()
      return
    }
    factory2210 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2211 := factory2210.GetProtocol(mbTrans2208)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2212 := argvalue0.Read(jsProt2211)
    if err2212 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.SetValueString(value0, value1))
    fmt.Print("\n")
    break
  case "SetValueListSelection":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetValueListSelection requires 2 args\n")
      flag.Usage()
    }
    arg2214 := flag.Arg(1)
    mbTrans2215 := thrift.NewTMemoryBufferLen(len(arg2214))
    defer mbTrans2215.Close()
    _, err2216 := mbTrans2215.WriteString(arg2214)
    if err2216 != nil {
      Usage()
      return
    }
    factory2217 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2218 := factory2217.GetProtocol(mbTrans2215)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2219 := argvalue0.Read(jsProt2218)
    if err2219 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.SetValueListSelection(value0, value1))
    fmt.Print("\n")
    break
  case "RefreshValue":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "RefreshValue requires 1 args\n")
      flag.Usage()
    }
    arg2221 := flag.Arg(1)
    mbTrans2222 := thrift.NewTMemoryBufferLen(len(arg2221))
    defer mbTrans2222.Close()
    _, err2223 := mbTrans2222.WriteString(arg2221)
    if err2223 != nil {
      Usage()
      return
    }
    factory2224 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2225 := factory2224.GetProtocol(mbTrans2222)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2226 := argvalue0.Read(jsProt2225)
    if err2226 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RefreshValue(value0))
    fmt.Print("\n")
    break
  case "SetChangeVerified":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetChangeVerified requires 2 args\n")
      flag.Usage()
    }
    arg2227 := flag.Arg(1)
    mbTrans2228 := thrift.NewTMemoryBufferLen(len(arg2227))
    defer mbTrans2228.Close()
    _, err2229 := mbTrans2228.WriteString(arg2227)
    if err2229 != nil {
      Usage()
      return
    }
    factory2230 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2231 := factory2230.GetProtocol(mbTrans2228)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2232 := argvalue0.Read(jsProt2231)
    if err2232 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2) == "true"
    value1 := argvalue1
    fmt.Print(client.SetChangeVerified(value0, value1))
    fmt.Print("\n")
    break
  case "PressButton":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "PressButton requires 1 args\n")
      flag.Usage()
    }
    arg2234 := flag.Arg(1)
    mbTrans2235 := thrift.NewTMemoryBufferLen(len(arg2234))
    defer mbTrans2235.Close()
    _, err2236 := mbTrans2235.WriteString(arg2234)
    if err2236 != nil {
      Usage()
      return
    }
    factory2237 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2238 := factory2237.GetProtocol(mbTrans2235)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2239 := argvalue0.Read(jsProt2238)
    if err2239 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.PressButton(value0))
    fmt.Print("\n")
    break
  case "ReleaseButton":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "ReleaseButton requires 1 args\n")
      flag.Usage()
    }
    arg2240 := flag.Arg(1)
    mbTrans2241 := thrift.NewTMemoryBufferLen(len(arg2240))
    defer mbTrans2241.Close()
    _, err2242 := mbTrans2241.WriteString(arg2240)
    if err2242 != nil {
      Usage()
      return
    }
    factory2243 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2244 := factory2243.GetProtocol(mbTrans2241)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2245 := argvalue0.Read(jsProt2244)
    if err2245 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ReleaseButton(value0))
    fmt.Print("\n")
    break
  case "GetNumSwitchPoints":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetNumSwitchPoints requires 1 args\n")
      flag.Usage()
    }
    arg2246 := flag.Arg(1)
    mbTrans2247 := thrift.NewTMemoryBufferLen(len(arg2246))
    defer mbTrans2247.Close()
    _, err2248 := mbTrans2247.WriteString(arg2246)
    if err2248 != nil {
      Usage()
      return
    }
    factory2249 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2250 := factory2249.GetProtocol(mbTrans2247)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2251 := argvalue0.Read(jsProt2250)
    if err2251 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetNumSwitchPoints(value0))
    fmt.Print("\n")
    break
  case "SetSwitchPoint":
    if flag.NArg() - 1 != 4 {
      fmt.Fprint(os.Stderr, "SetSwitchPoint requires 4 args\n")
      flag.Usage()
    }
    arg2252 := flag.Arg(1)
    mbTrans2253 := thrift.NewTMemoryBufferLen(len(arg2252))
    defer mbTrans2253.Close()
    _, err2254 := mbTrans2253.WriteString(arg2252)
    if err2254 != nil {
      Usage()
      return
    }
    factory2255 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2256 := factory2255.GetProtocol(mbTrans2253)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2257 := argvalue0.Read(jsProt2256)
    if err2257 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err2258 := (strconv.Atoi(flag.Arg(2)))
    if err2258 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    tmp2, err2259 := (strconv.Atoi(flag.Arg(3)))
    if err2259 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    tmp3, err2260 := (strconv.Atoi(flag.Arg(4)))
    if err2260 != nil {
      Usage()
      return
    }
    argvalue3 := byte(tmp3)
    value3 := argvalue3
    fmt.Print(client.SetSwitchPoint(value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "RemoveSwitchPoint":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "RemoveSwitchPoint requires 3 args\n")
      flag.Usage()
    }
    arg2261 := flag.Arg(1)
    mbTrans2262 := thrift.NewTMemoryBufferLen(len(arg2261))
    defer mbTrans2262.Close()
    _, err2263 := mbTrans2262.WriteString(arg2261)
    if err2263 != nil {
      Usage()
      return
    }
    factory2264 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2265 := factory2264.GetProtocol(mbTrans2262)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2266 := argvalue0.Read(jsProt2265)
    if err2266 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err2267 := (strconv.Atoi(flag.Arg(2)))
    if err2267 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    tmp2, err2268 := (strconv.Atoi(flag.Arg(3)))
    if err2268 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    fmt.Print(client.RemoveSwitchPoint(value0, value1, value2))
    fmt.Print("\n")
    break
  case "ClearSwitchPoints":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "ClearSwitchPoints requires 1 args\n")
      flag.Usage()
    }
    arg2269 := flag.Arg(1)
    mbTrans2270 := thrift.NewTMemoryBufferLen(len(arg2269))
    defer mbTrans2270.Close()
    _, err2271 := mbTrans2270.WriteString(arg2269)
    if err2271 != nil {
      Usage()
      return
    }
    factory2272 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2273 := factory2272.GetProtocol(mbTrans2270)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2274 := argvalue0.Read(jsProt2273)
    if err2274 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ClearSwitchPoints(value0))
    fmt.Print("\n")
    break
  case "GetSwitchPoint":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetSwitchPoint requires 2 args\n")
      flag.Usage()
    }
    arg2275 := flag.Arg(1)
    mbTrans2276 := thrift.NewTMemoryBufferLen(len(arg2275))
    defer mbTrans2276.Close()
    _, err2277 := mbTrans2276.WriteString(arg2275)
    if err2277 != nil {
      Usage()
      return
    }
    factory2278 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2279 := factory2278.GetProtocol(mbTrans2276)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2280 := argvalue0.Read(jsProt2279)
    if err2280 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err2281 := (strconv.Atoi(flag.Arg(2)))
    if err2281 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetSwitchPoint(value0, value1))
    fmt.Print("\n")
    break
  case "SwitchAllOn":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "SwitchAllOn requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2282 := (strconv.Atoi(flag.Arg(1)))
    if err2282 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.SwitchAllOn(value0))
    fmt.Print("\n")
    break
  case "SwitchAllOff":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "SwitchAllOff requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2283 := (strconv.Atoi(flag.Arg(1)))
    if err2283 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.SwitchAllOff(value0))
    fmt.Print("\n")
    break
  case "SetConfigParam":
    if flag.NArg() - 1 != 5 {
      fmt.Fprint(os.Stderr, "SetConfigParam requires 5 args\n")
      flag.Usage()
    }
    tmp0, err2284 := (strconv.Atoi(flag.Arg(1)))
    if err2284 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2285 := (strconv.Atoi(flag.Arg(2)))
    if err2285 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    tmp2, err2286 := (strconv.Atoi(flag.Arg(3)))
    if err2286 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    tmp3, err2287 := (strconv.Atoi(flag.Arg(4)))
    if err2287 != nil {
      Usage()
      return
    }
    argvalue3 := int32(tmp3)
    value3 := argvalue3
    tmp4, err2288 := (strconv.Atoi(flag.Arg(5)))
    if err2288 != nil {
      Usage()
      return
    }
    argvalue4 := byte(tmp4)
    value4 := argvalue4
    fmt.Print(client.SetConfigParam(value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "RequestConfigParam":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "RequestConfigParam requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2289 := (strconv.Atoi(flag.Arg(1)))
    if err2289 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2290 := (strconv.Atoi(flag.Arg(2)))
    if err2290 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    tmp2, err2291 := (strconv.Atoi(flag.Arg(3)))
    if err2291 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    fmt.Print(client.RequestConfigParam(value0, value1, value2))
    fmt.Print("\n")
    break
  case "RequestAllConfigParams":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "RequestAllConfigParams requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2292 := (strconv.Atoi(flag.Arg(1)))
    if err2292 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2293 := (strconv.Atoi(flag.Arg(2)))
    if err2293 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.RequestAllConfigParams(value0, value1))
    fmt.Print("\n")
    break
  case "GetNumGroups":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNumGroups requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2294 := (strconv.Atoi(flag.Arg(1)))
    if err2294 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2295 := (strconv.Atoi(flag.Arg(2)))
    if err2295 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNumGroups(value0, value1))
    fmt.Print("\n")
    break
  case "GetAssociations":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "GetAssociations requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2296 := (strconv.Atoi(flag.Arg(1)))
    if err2296 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2297 := (strconv.Atoi(flag.Arg(2)))
    if err2297 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    tmp2, err2298 := (strconv.Atoi(flag.Arg(3)))
    if err2298 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    fmt.Print(client.GetAssociations(value0, value1, value2))
    fmt.Print("\n")
    break
  case "GetMaxAssociations":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "GetMaxAssociations requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2299 := (strconv.Atoi(flag.Arg(1)))
    if err2299 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2300 := (strconv.Atoi(flag.Arg(2)))
    if err2300 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    tmp2, err2301 := (strconv.Atoi(flag.Arg(3)))
    if err2301 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    fmt.Print(client.GetMaxAssociations(value0, value1, value2))
    fmt.Print("\n")
    break
  case "GetGroupLabel":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "GetGroupLabel requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2302 := (strconv.Atoi(flag.Arg(1)))
    if err2302 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2303 := (strconv.Atoi(flag.Arg(2)))
    if err2303 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    tmp2, err2304 := (strconv.Atoi(flag.Arg(3)))
    if err2304 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    fmt.Print(client.GetGroupLabel(value0, value1, value2))
    fmt.Print("\n")
    break
  case "AddAssociation":
    if flag.NArg() - 1 != 4 {
      fmt.Fprint(os.Stderr, "AddAssociation requires 4 args\n")
      flag.Usage()
    }
    tmp0, err2305 := (strconv.Atoi(flag.Arg(1)))
    if err2305 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2306 := (strconv.Atoi(flag.Arg(2)))
    if err2306 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    tmp2, err2307 := (strconv.Atoi(flag.Arg(3)))
    if err2307 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    tmp3, err2308 := (strconv.Atoi(flag.Arg(4)))
    if err2308 != nil {
      Usage()
      return
    }
    argvalue3 := byte(tmp3)
    value3 := argvalue3
    fmt.Print(client.AddAssociation(value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "RemoveAssociation":
    if flag.NArg() - 1 != 4 {
      fmt.Fprint(os.Stderr, "RemoveAssociation requires 4 args\n")
      flag.Usage()
    }
    tmp0, err2309 := (strconv.Atoi(flag.Arg(1)))
    if err2309 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2310 := (strconv.Atoi(flag.Arg(2)))
    if err2310 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    tmp2, err2311 := (strconv.Atoi(flag.Arg(3)))
    if err2311 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    tmp3, err2312 := (strconv.Atoi(flag.Arg(4)))
    if err2312 != nil {
      Usage()
      return
    }
    argvalue3 := byte(tmp3)
    value3 := argvalue3
    fmt.Print(client.RemoveAssociation(value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "ResetController":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "ResetController requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2313 := (strconv.Atoi(flag.Arg(1)))
    if err2313 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.ResetController(value0))
    fmt.Print("\n")
    break
  case "SoftReset":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "SoftReset requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2314 := (strconv.Atoi(flag.Arg(1)))
    if err2314 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.SoftReset(value0))
    fmt.Print("\n")
    break
  case "BeginControllerCommand":
    if flag.NArg() - 1 != 5 {
      fmt.Fprint(os.Stderr, "BeginControllerCommand requires 5 args\n")
      flag.Usage()
    }
    tmp0, err2315 := (strconv.Atoi(flag.Arg(1)))
    if err2315 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := OpenZWave.DriverControllerCommand(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3) == "true"
    value2 := argvalue2
    tmp3, err2317 := (strconv.Atoi(flag.Arg(4)))
    if err2317 != nil {
      Usage()
      return
    }
    argvalue3 := byte(tmp3)
    value3 := argvalue3
    tmp4, err2318 := (strconv.Atoi(flag.Arg(5)))
    if err2318 != nil {
      Usage()
      return
    }
    argvalue4 := byte(tmp4)
    value4 := argvalue4
    fmt.Print(client.BeginControllerCommand(value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "CancelControllerCommand":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "CancelControllerCommand requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2319 := (strconv.Atoi(flag.Arg(1)))
    if err2319 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.CancelControllerCommand(value0))
    fmt.Print("\n")
    break
  case "GetNumScenes":
    if flag.NArg() - 1 != 0 {
      fmt.Fprint(os.Stderr, "GetNumScenes requires 0 args\n")
      flag.Usage()
    }
    fmt.Print(client.GetNumScenes())
    fmt.Print("\n")
    break
  case "GetAllScenes":
    if flag.NArg() - 1 != 0 {
      fmt.Fprint(os.Stderr, "GetAllScenes requires 0 args\n")
      flag.Usage()
    }
    fmt.Print(client.GetAllScenes())
    fmt.Print("\n")
    break
  case "CreateScene":
    if flag.NArg() - 1 != 0 {
      fmt.Fprint(os.Stderr, "CreateScene requires 0 args\n")
      flag.Usage()
    }
    fmt.Print(client.CreateScene())
    fmt.Print("\n")
    break
  case "RemoveScene":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "RemoveScene requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2320 := (strconv.Atoi(flag.Arg(1)))
    if err2320 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    fmt.Print(client.RemoveScene(value0))
    fmt.Print("\n")
    break
  case "AddSceneValue_Bool":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "AddSceneValueBool requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2321 := (strconv.Atoi(flag.Arg(1)))
    if err2321 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2322 := flag.Arg(2)
    mbTrans2323 := thrift.NewTMemoryBufferLen(len(arg2322))
    defer mbTrans2323.Close()
    _, err2324 := mbTrans2323.WriteString(arg2322)
    if err2324 != nil {
      Usage()
      return
    }
    factory2325 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2326 := factory2325.GetProtocol(mbTrans2323)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2327 := argvalue1.Read(jsProt2326)
    if err2327 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := flag.Arg(3) == "true"
    value2 := argvalue2
    fmt.Print(client.AddSceneValueBool(value0, value1, value2))
    fmt.Print("\n")
    break
  case "AddSceneValue_Uint8":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "AddSceneValueUint8 requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2329 := (strconv.Atoi(flag.Arg(1)))
    if err2329 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2330 := flag.Arg(2)
    mbTrans2331 := thrift.NewTMemoryBufferLen(len(arg2330))
    defer mbTrans2331.Close()
    _, err2332 := mbTrans2331.WriteString(arg2330)
    if err2332 != nil {
      Usage()
      return
    }
    factory2333 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2334 := factory2333.GetProtocol(mbTrans2331)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2335 := argvalue1.Read(jsProt2334)
    if err2335 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    tmp2, err2336 := (strconv.Atoi(flag.Arg(3)))
    if err2336 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    fmt.Print(client.AddSceneValueUint8(value0, value1, value2))
    fmt.Print("\n")
    break
  case "AddSceneValue_Float":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "AddSceneValueFloat requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2337 := (strconv.Atoi(flag.Arg(1)))
    if err2337 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2338 := flag.Arg(2)
    mbTrans2339 := thrift.NewTMemoryBufferLen(len(arg2338))
    defer mbTrans2339.Close()
    _, err2340 := mbTrans2339.WriteString(arg2338)
    if err2340 != nil {
      Usage()
      return
    }
    factory2341 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2342 := factory2341.GetProtocol(mbTrans2339)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2343 := argvalue1.Read(jsProt2342)
    if err2343 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2, err2344 := (strconv.Atof64(flag.Arg(3)))
    if err2344 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.AddSceneValueFloat(value0, value1, value2))
    fmt.Print("\n")
    break
  case "AddSceneValue_Int32":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "AddSceneValueInt32 requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2345 := (strconv.Atoi(flag.Arg(1)))
    if err2345 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2346 := flag.Arg(2)
    mbTrans2347 := thrift.NewTMemoryBufferLen(len(arg2346))
    defer mbTrans2347.Close()
    _, err2348 := mbTrans2347.WriteString(arg2346)
    if err2348 != nil {
      Usage()
      return
    }
    factory2349 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2350 := factory2349.GetProtocol(mbTrans2347)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2351 := argvalue1.Read(jsProt2350)
    if err2351 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    tmp2, err2352 := (strconv.Atoi(flag.Arg(3)))
    if err2352 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    fmt.Print(client.AddSceneValueInt32(value0, value1, value2))
    fmt.Print("\n")
    break
  case "AddSceneValue_Int16":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "AddSceneValueInt16 requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2353 := (strconv.Atoi(flag.Arg(1)))
    if err2353 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2354 := flag.Arg(2)
    mbTrans2355 := thrift.NewTMemoryBufferLen(len(arg2354))
    defer mbTrans2355.Close()
    _, err2356 := mbTrans2355.WriteString(arg2354)
    if err2356 != nil {
      Usage()
      return
    }
    factory2357 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2358 := factory2357.GetProtocol(mbTrans2355)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2359 := argvalue1.Read(jsProt2358)
    if err2359 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    tmp2, err2360 := (strconv.Atoi(flag.Arg(3)))
    if err2360 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    fmt.Print(client.AddSceneValueInt16(value0, value1, value2))
    fmt.Print("\n")
    break
  case "AddSceneValue_String":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "AddSceneValueString requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2361 := (strconv.Atoi(flag.Arg(1)))
    if err2361 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2362 := flag.Arg(2)
    mbTrans2363 := thrift.NewTMemoryBufferLen(len(arg2362))
    defer mbTrans2363.Close()
    _, err2364 := mbTrans2363.WriteString(arg2362)
    if err2364 != nil {
      Usage()
      return
    }
    factory2365 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2366 := factory2365.GetProtocol(mbTrans2363)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2367 := argvalue1.Read(jsProt2366)
    if err2367 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.AddSceneValueString(value0, value1, value2))
    fmt.Print("\n")
    break
  case "AddSceneValueListSelection_String":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "AddSceneValueListSelectionString requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2369 := (strconv.Atoi(flag.Arg(1)))
    if err2369 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2370 := flag.Arg(2)
    mbTrans2371 := thrift.NewTMemoryBufferLen(len(arg2370))
    defer mbTrans2371.Close()
    _, err2372 := mbTrans2371.WriteString(arg2370)
    if err2372 != nil {
      Usage()
      return
    }
    factory2373 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2374 := factory2373.GetProtocol(mbTrans2371)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2375 := argvalue1.Read(jsProt2374)
    if err2375 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.AddSceneValueListSelectionString(value0, value1, value2))
    fmt.Print("\n")
    break
  case "AddSceneValueListSelection_Int32":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "AddSceneValueListSelectionInt32 requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2377 := (strconv.Atoi(flag.Arg(1)))
    if err2377 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2378 := flag.Arg(2)
    mbTrans2379 := thrift.NewTMemoryBufferLen(len(arg2378))
    defer mbTrans2379.Close()
    _, err2380 := mbTrans2379.WriteString(arg2378)
    if err2380 != nil {
      Usage()
      return
    }
    factory2381 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2382 := factory2381.GetProtocol(mbTrans2379)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2383 := argvalue1.Read(jsProt2382)
    if err2383 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    tmp2, err2384 := (strconv.Atoi(flag.Arg(3)))
    if err2384 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    fmt.Print(client.AddSceneValueListSelectionInt32(value0, value1, value2))
    fmt.Print("\n")
    break
  case "RemoveSceneValue":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "RemoveSceneValue requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2385 := (strconv.Atoi(flag.Arg(1)))
    if err2385 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2386 := flag.Arg(2)
    mbTrans2387 := thrift.NewTMemoryBufferLen(len(arg2386))
    defer mbTrans2387.Close()
    _, err2388 := mbTrans2387.WriteString(arg2386)
    if err2388 != nil {
      Usage()
      return
    }
    factory2389 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2390 := factory2389.GetProtocol(mbTrans2387)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2391 := argvalue1.Read(jsProt2390)
    if err2391 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.RemoveSceneValue(value0, value1))
    fmt.Print("\n")
    break
  case "SceneGetValues":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "SceneGetValues requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2392 := (strconv.Atoi(flag.Arg(1)))
    if err2392 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    fmt.Print(client.SceneGetValues(value0))
    fmt.Print("\n")
    break
  case "SceneGetValueAsBool":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SceneGetValueAsBool requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2393 := (strconv.Atoi(flag.Arg(1)))
    if err2393 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2394 := flag.Arg(2)
    mbTrans2395 := thrift.NewTMemoryBufferLen(len(arg2394))
    defer mbTrans2395.Close()
    _, err2396 := mbTrans2395.WriteString(arg2394)
    if err2396 != nil {
      Usage()
      return
    }
    factory2397 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2398 := factory2397.GetProtocol(mbTrans2395)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2399 := argvalue1.Read(jsProt2398)
    if err2399 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SceneGetValueAsBool(value0, value1))
    fmt.Print("\n")
    break
  case "SceneGetValueAsByte":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SceneGetValueAsByte requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2400 := (strconv.Atoi(flag.Arg(1)))
    if err2400 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2401 := flag.Arg(2)
    mbTrans2402 := thrift.NewTMemoryBufferLen(len(arg2401))
    defer mbTrans2402.Close()
    _, err2403 := mbTrans2402.WriteString(arg2401)
    if err2403 != nil {
      Usage()
      return
    }
    factory2404 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2405 := factory2404.GetProtocol(mbTrans2402)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2406 := argvalue1.Read(jsProt2405)
    if err2406 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SceneGetValueAsByte(value0, value1))
    fmt.Print("\n")
    break
  case "SceneGetValueAsFloat":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SceneGetValueAsFloat requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2407 := (strconv.Atoi(flag.Arg(1)))
    if err2407 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2408 := flag.Arg(2)
    mbTrans2409 := thrift.NewTMemoryBufferLen(len(arg2408))
    defer mbTrans2409.Close()
    _, err2410 := mbTrans2409.WriteString(arg2408)
    if err2410 != nil {
      Usage()
      return
    }
    factory2411 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2412 := factory2411.GetProtocol(mbTrans2409)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2413 := argvalue1.Read(jsProt2412)
    if err2413 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SceneGetValueAsFloat(value0, value1))
    fmt.Print("\n")
    break
  case "SceneGetValueAsInt":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SceneGetValueAsInt requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2414 := (strconv.Atoi(flag.Arg(1)))
    if err2414 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2415 := flag.Arg(2)
    mbTrans2416 := thrift.NewTMemoryBufferLen(len(arg2415))
    defer mbTrans2416.Close()
    _, err2417 := mbTrans2416.WriteString(arg2415)
    if err2417 != nil {
      Usage()
      return
    }
    factory2418 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2419 := factory2418.GetProtocol(mbTrans2416)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2420 := argvalue1.Read(jsProt2419)
    if err2420 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SceneGetValueAsInt(value0, value1))
    fmt.Print("\n")
    break
  case "SceneGetValueAsShort":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SceneGetValueAsShort requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2421 := (strconv.Atoi(flag.Arg(1)))
    if err2421 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2422 := flag.Arg(2)
    mbTrans2423 := thrift.NewTMemoryBufferLen(len(arg2422))
    defer mbTrans2423.Close()
    _, err2424 := mbTrans2423.WriteString(arg2422)
    if err2424 != nil {
      Usage()
      return
    }
    factory2425 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2426 := factory2425.GetProtocol(mbTrans2423)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2427 := argvalue1.Read(jsProt2426)
    if err2427 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SceneGetValueAsShort(value0, value1))
    fmt.Print("\n")
    break
  case "SceneGetValueAsString":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SceneGetValueAsString requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2428 := (strconv.Atoi(flag.Arg(1)))
    if err2428 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2429 := flag.Arg(2)
    mbTrans2430 := thrift.NewTMemoryBufferLen(len(arg2429))
    defer mbTrans2430.Close()
    _, err2431 := mbTrans2430.WriteString(arg2429)
    if err2431 != nil {
      Usage()
      return
    }
    factory2432 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2433 := factory2432.GetProtocol(mbTrans2430)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2434 := argvalue1.Read(jsProt2433)
    if err2434 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SceneGetValueAsString(value0, value1))
    fmt.Print("\n")
    break
  case "SceneGetValueListSelection_String":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SceneGetValueListSelectionString requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2435 := (strconv.Atoi(flag.Arg(1)))
    if err2435 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2436 := flag.Arg(2)
    mbTrans2437 := thrift.NewTMemoryBufferLen(len(arg2436))
    defer mbTrans2437.Close()
    _, err2438 := mbTrans2437.WriteString(arg2436)
    if err2438 != nil {
      Usage()
      return
    }
    factory2439 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2440 := factory2439.GetProtocol(mbTrans2437)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2441 := argvalue1.Read(jsProt2440)
    if err2441 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SceneGetValueListSelectionString(value0, value1))
    fmt.Print("\n")
    break
  case "SceneGetValueListSelection_Int32":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SceneGetValueListSelectionInt32 requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2442 := (strconv.Atoi(flag.Arg(1)))
    if err2442 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2443 := flag.Arg(2)
    mbTrans2444 := thrift.NewTMemoryBufferLen(len(arg2443))
    defer mbTrans2444.Close()
    _, err2445 := mbTrans2444.WriteString(arg2443)
    if err2445 != nil {
      Usage()
      return
    }
    factory2446 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2447 := factory2446.GetProtocol(mbTrans2444)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2448 := argvalue1.Read(jsProt2447)
    if err2448 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SceneGetValueListSelectionInt32(value0, value1))
    fmt.Print("\n")
    break
  case "SetSceneValue_Bool":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetSceneValueBool requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2449 := (strconv.Atoi(flag.Arg(1)))
    if err2449 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2450 := flag.Arg(2)
    mbTrans2451 := thrift.NewTMemoryBufferLen(len(arg2450))
    defer mbTrans2451.Close()
    _, err2452 := mbTrans2451.WriteString(arg2450)
    if err2452 != nil {
      Usage()
      return
    }
    factory2453 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2454 := factory2453.GetProtocol(mbTrans2451)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2455 := argvalue1.Read(jsProt2454)
    if err2455 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := flag.Arg(3) == "true"
    value2 := argvalue2
    fmt.Print(client.SetSceneValueBool(value0, value1, value2))
    fmt.Print("\n")
    break
  case "SetSceneValue_Uint8":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetSceneValueUint8 requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2457 := (strconv.Atoi(flag.Arg(1)))
    if err2457 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2458 := flag.Arg(2)
    mbTrans2459 := thrift.NewTMemoryBufferLen(len(arg2458))
    defer mbTrans2459.Close()
    _, err2460 := mbTrans2459.WriteString(arg2458)
    if err2460 != nil {
      Usage()
      return
    }
    factory2461 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2462 := factory2461.GetProtocol(mbTrans2459)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2463 := argvalue1.Read(jsProt2462)
    if err2463 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    tmp2, err2464 := (strconv.Atoi(flag.Arg(3)))
    if err2464 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    fmt.Print(client.SetSceneValueUint8(value0, value1, value2))
    fmt.Print("\n")
    break
  case "SetSceneValue_Float":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetSceneValueFloat requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2465 := (strconv.Atoi(flag.Arg(1)))
    if err2465 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2466 := flag.Arg(2)
    mbTrans2467 := thrift.NewTMemoryBufferLen(len(arg2466))
    defer mbTrans2467.Close()
    _, err2468 := mbTrans2467.WriteString(arg2466)
    if err2468 != nil {
      Usage()
      return
    }
    factory2469 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2470 := factory2469.GetProtocol(mbTrans2467)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2471 := argvalue1.Read(jsProt2470)
    if err2471 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2, err2472 := (strconv.Atof64(flag.Arg(3)))
    if err2472 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.SetSceneValueFloat(value0, value1, value2))
    fmt.Print("\n")
    break
  case "SetSceneValue_Int32":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetSceneValueInt32 requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2473 := (strconv.Atoi(flag.Arg(1)))
    if err2473 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2474 := flag.Arg(2)
    mbTrans2475 := thrift.NewTMemoryBufferLen(len(arg2474))
    defer mbTrans2475.Close()
    _, err2476 := mbTrans2475.WriteString(arg2474)
    if err2476 != nil {
      Usage()
      return
    }
    factory2477 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2478 := factory2477.GetProtocol(mbTrans2475)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2479 := argvalue1.Read(jsProt2478)
    if err2479 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    tmp2, err2480 := (strconv.Atoi(flag.Arg(3)))
    if err2480 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    fmt.Print(client.SetSceneValueInt32(value0, value1, value2))
    fmt.Print("\n")
    break
  case "SetSceneValue_Int16":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetSceneValueInt16 requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2481 := (strconv.Atoi(flag.Arg(1)))
    if err2481 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2482 := flag.Arg(2)
    mbTrans2483 := thrift.NewTMemoryBufferLen(len(arg2482))
    defer mbTrans2483.Close()
    _, err2484 := mbTrans2483.WriteString(arg2482)
    if err2484 != nil {
      Usage()
      return
    }
    factory2485 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2486 := factory2485.GetProtocol(mbTrans2483)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2487 := argvalue1.Read(jsProt2486)
    if err2487 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    tmp2, err2488 := (strconv.Atoi(flag.Arg(3)))
    if err2488 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    fmt.Print(client.SetSceneValueInt16(value0, value1, value2))
    fmt.Print("\n")
    break
  case "SetSceneValue_String":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetSceneValueString requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2489 := (strconv.Atoi(flag.Arg(1)))
    if err2489 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2490 := flag.Arg(2)
    mbTrans2491 := thrift.NewTMemoryBufferLen(len(arg2490))
    defer mbTrans2491.Close()
    _, err2492 := mbTrans2491.WriteString(arg2490)
    if err2492 != nil {
      Usage()
      return
    }
    factory2493 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2494 := factory2493.GetProtocol(mbTrans2491)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2495 := argvalue1.Read(jsProt2494)
    if err2495 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.SetSceneValueString(value0, value1, value2))
    fmt.Print("\n")
    break
  case "SetSceneValueListSelection_String":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetSceneValueListSelectionString requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2497 := (strconv.Atoi(flag.Arg(1)))
    if err2497 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2498 := flag.Arg(2)
    mbTrans2499 := thrift.NewTMemoryBufferLen(len(arg2498))
    defer mbTrans2499.Close()
    _, err2500 := mbTrans2499.WriteString(arg2498)
    if err2500 != nil {
      Usage()
      return
    }
    factory2501 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2502 := factory2501.GetProtocol(mbTrans2499)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2503 := argvalue1.Read(jsProt2502)
    if err2503 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.SetSceneValueListSelectionString(value0, value1, value2))
    fmt.Print("\n")
    break
  case "SetSceneValueListSelection_Int32":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetSceneValueListSelectionInt32 requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2505 := (strconv.Atoi(flag.Arg(1)))
    if err2505 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2506 := flag.Arg(2)
    mbTrans2507 := thrift.NewTMemoryBufferLen(len(arg2506))
    defer mbTrans2507.Close()
    _, err2508 := mbTrans2507.WriteString(arg2506)
    if err2508 != nil {
      Usage()
      return
    }
    factory2509 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2510 := factory2509.GetProtocol(mbTrans2507)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2511 := argvalue1.Read(jsProt2510)
    if err2511 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    tmp2, err2512 := (strconv.Atoi(flag.Arg(3)))
    if err2512 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    fmt.Print(client.SetSceneValueListSelectionInt32(value0, value1, value2))
    fmt.Print("\n")
    break
  case "GetSceneLabel":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetSceneLabel requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2513 := (strconv.Atoi(flag.Arg(1)))
    if err2513 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetSceneLabel(value0))
    fmt.Print("\n")
    break
  case "SetSceneLabel":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetSceneLabel requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2514 := (strconv.Atoi(flag.Arg(1)))
    if err2514 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.SetSceneLabel(value0, value1))
    fmt.Print("\n")
    break
  case "SceneExists":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "SceneExists requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2516 := (strconv.Atoi(flag.Arg(1)))
    if err2516 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    fmt.Print(client.SceneExists(value0))
    fmt.Print("\n")
    break
  case "ActivateScene":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "ActivateScene requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2517 := (strconv.Atoi(flag.Arg(1)))
    if err2517 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    fmt.Print(client.ActivateScene(value0))
    fmt.Print("\n")
    break
  case "GetDriverStatistics":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetDriverStatistics requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2518 := (strconv.Atoi(flag.Arg(1)))
    if err2518 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetDriverStatistics(value0))
    fmt.Print("\n")
    break
  case "SendAllValues":
    if flag.NArg() - 1 != 0 {
      fmt.Fprint(os.Stderr, "SendAllValues requires 0 args\n")
      flag.Usage()
    }
    fmt.Print(client.SendAllValues())
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprint(os.Stderr, "Invalid function ", cmd, "\n")
  }
}
