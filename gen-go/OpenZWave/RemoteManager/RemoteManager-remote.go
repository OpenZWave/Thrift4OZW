/* Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package main

import (
        "flag"
        "fmt"
        "http"
        "net"
        "os"
        "strconv"
        "thrift"
        "thriftlib/OpenZWave"
)

func Usage() {
  fmt.Fprint(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:\n")
  flag.PrintDefaults()
  fmt.Fprint(os.Stderr, "Functions:\n")
  fmt.Fprint(os.Stderr, "  WriteConfig(_homeId int32) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetControllerNodeId(_homeId int32) (retval1659 byte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsPrimaryController(_homeId int32) (retval1660 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsStaticUpdateController(_homeId int32) (retval1661 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsBridgeController(_homeId int32) (retval1662 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetLibraryVersion(_homeId int32) (retval1663 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetLibraryTypeName(_homeId int32) (retval1664 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetSendQueueCount(_homeId int32) (retval1665 int32, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetPollInterval() (retval1666 int32, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetPollInterval(_seconds int32) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  EnablePoll(_valueId *RemoteValueID) (retval1668 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  DisablePoll(_valueId *RemoteValueID) (retval1669 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  isPolled(_valueId *RemoteValueID) (retval1670 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  RefreshNodeInfo(_homeId int32, _nodeId byte) (retval1671 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  RequestNodeState(_homeId int32, _nodeId byte) (retval1672 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  RequestNodeDynamic(_homeId int32, _nodeId byte) (retval1673 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsNodeListeningDevice(_homeId int32, _nodeId byte) (retval1674 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsNodeRoutingDevice(_homeId int32, _nodeId byte) (retval1675 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeMaxBaudRate(_homeId int32, _nodeId byte) (retval1676 int32, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeVersion(_homeId int32, _nodeId byte) (retval1677 byte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeSecurity(_homeId int32, _nodeId byte) (retval1678 byte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeBasic(_homeId int32, _nodeId byte) (retval1679 byte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeGeneric(_homeId int32, _nodeId byte) (retval1680 byte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeSpecific(_homeId int32, _nodeId byte) (retval1681 byte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeType(_homeId int32, _nodeId byte) (retval1682 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeNeighbors(_homeId int32, _nodeId byte) (retval1683 *UInt32ListByte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeManufacturerName(_homeId int32, _nodeId byte) (retval1684 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeProductName(_homeId int32, _nodeId byte) (retval1685 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeName(_homeId int32, _nodeId byte) (retval1686 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeLocation(_homeId int32, _nodeId byte) (retval1687 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeManufacturerId(_homeId int32, _nodeId byte) (retval1688 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeProductType(_homeId int32, _nodeId byte) (retval1689 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeProductId(_homeId int32, _nodeId byte) (retval1690 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetNodeManufacturerName(_homeId int32, _nodeId byte, _manufacturerName string) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetNodeProductName(_homeId int32, _nodeId byte, _productName string) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetNodeName(_homeId int32, _nodeId byte, _nodeName string) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetNodeLocation(_homeId int32, _nodeId byte, _location string) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetNodeOn(_homeId int32, _nodeId byte) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetNodeOff(_homeId int32, _nodeId byte) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetNodeLevel(_homeId int32, _nodeId byte, _level byte) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsNodeInfoReceived(_homeId int32, _nodeId byte) (retval1698 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeClassInformation(_homeId int32, _nodeId byte, _commandClassId byte) (retval1699 *BoolGetNodeClassInformation, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueLabel(_id *RemoteValueID) (retval1700 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetValueLabel(_id *RemoteValueID, _value string) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueUnits(_id *RemoteValueID) (retval1702 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetValueUnits(_id *RemoteValueID, _value string) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueHelp(_id *RemoteValueID) (retval1704 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetValueHelp(_id *RemoteValueID, _value string) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueMin(_id *RemoteValueID) (retval1706 int32, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueMax(_id *RemoteValueID) (retval1707 int32, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsValueReadOnly(_id *RemoteValueID) (retval1708 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsValueWriteOnly(_id *RemoteValueID) (retval1709 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsValueSet(_id *RemoteValueID) (retval1710 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueAsBool(_id *RemoteValueID) (retval1711 *BoolBool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueAsByte(_id *RemoteValueID) (retval1712 *BoolUInt8, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueAsFloat(_id *RemoteValueID) (retval1713 *BoolFloat, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueAsInt(_id *RemoteValueID) (retval1714 *BoolInt, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueAsShort(_id *RemoteValueID) (retval1715 *BoolInt16, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueAsString(_id *RemoteValueID) (retval1716 *BoolString, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueListSelection_String(_id *RemoteValueID) (retval1717 *BoolString, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueListSelection_Int32(_id *RemoteValueID) (retval1718 *BoolInt, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueListItems(_id *RemoteValueID) (retval1719 *BoolListString, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueFloatPrecision(_id *RemoteValueID) (retval1720 *BoolUInt8, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetValue_Bool(_id *RemoteValueID, _value bool) (retval1721 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetValue_UInt8(_id *RemoteValueID, _value byte) (retval1722 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetValue_Float(_id *RemoteValueID, _value float64) (retval1723 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetValue_Int32(_id *RemoteValueID, _value int32) (retval1724 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetValue_Int16(_id *RemoteValueID, _value int16) (retval1725 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetValue_String(_id *RemoteValueID, _value string) (retval1726 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetValueListSelection(_id *RemoteValueID, _selectedItem string) (retval1727 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  PressButton(_id *RemoteValueID) (retval1728 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  ReleaseButton(_id *RemoteValueID) (retval1729 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNumSwitchPoints(_id *RemoteValueID) (retval1730 byte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetSwitchPoint(_id *RemoteValueID, _hours byte, _minutes byte, _setback byte) (retval1731 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  RemoveSwitchPoint(_id *RemoteValueID, _hours byte, _minutes byte) (retval1732 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  ClearSwitchPoints(_id *RemoteValueID) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetSwitchPoint(_id *RemoteValueID, _idx byte) (retval1734 *GetSwitchPointReturnStruct, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SwitchAllOn(_homeId int32) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SwitchAllOff(_homeId int32) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetConfigParam(_homeId int32, _nodeId byte, _param byte, _value int32, _size byte) (retval1737 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  RequestConfigParam(_homeId int32, _nodeId byte, _param byte) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  RequestAllConfigParams(_homeId int32, _nodeId byte) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNumGroups(_homeId int32, _nodeId byte) (retval1740 byte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetAssociations(_homeId int32, _nodeId byte, _groupIdx byte) (retval1741 *GetAssociationsReturnStruct, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetMaxAssociations(_homeId int32, _nodeId byte, _groupIdx byte) (retval1742 byte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetGroupLabel(_homeId int32, _nodeId byte, _groupIdx byte) (retval1743 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  AddAssociation(_homeId int32, _nodeId byte, _groupIdx byte, _targetNodeId byte) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  RemoveAssociation(_homeId int32, _nodeId byte, _groupIdx byte, _targetNodeId byte) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  ResetController(_homeId int32) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SoftReset(_homeId int32) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  BeginControllerCommand(_homeId int32, _command DriverControllerCommand, _highPower bool, _nodeId byte) (retval1748 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  CancelControllerCommand(_homeId int32) (retval1749 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNumScenes() (retval1750 byte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetAllScenes() (retval1751 *GetAllScenesReturnStruct, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  CreateScene() (retval1752 byte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  RemoveScene(_sceneId byte) (retval1753 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  AddSceneValue_Bool(_sceneId byte, _valueId *RemoteValueID, _value bool) (retval1754 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  AddSceneValue_Uint8(_sceneId byte, _valueId *RemoteValueID, _value byte) (retval1755 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  AddSceneValue_Float(_sceneId byte, _valueId *RemoteValueID, _value float64) (retval1756 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  AddSceneValue_Int32(_sceneId byte, _valueId *RemoteValueID, _value int32) (retval1757 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  AddSceneValue_Int16(_sceneId byte, _valueId *RemoteValueID, _value int16) (retval1758 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  AddSceneValue_String(_sceneId byte, _valueId *RemoteValueID, _value string) (retval1759 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  AddSceneValueListSelection_String(_sceneId byte, _valueId *RemoteValueID, _value string) (retval1760 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  AddSceneValueListSelection_Int32(_sceneId byte, _valueId *RemoteValueID, _value int32) (retval1761 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  RemoveSceneValue(_sceneId byte, _valueId *RemoteValueID) (retval1762 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SceneGetValues(_sceneId byte) (retval1763 *SceneGetValuesReturnStruct, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SceneGetValueAsBool(_sceneId byte, _valueId *RemoteValueID) (retval1764 *BoolBool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SceneGetValueAsByte(_sceneId byte, _valueId *RemoteValueID) (retval1765 *BoolUInt8, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SceneGetValueAsFloat(_sceneId byte, _valueId *RemoteValueID) (retval1766 *BoolFloat, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SceneGetValueAsInt(_sceneId byte, _valueId *RemoteValueID) (retval1767 *BoolInt, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SceneGetValueAsShort(_sceneId byte, _valueId *RemoteValueID) (retval1768 *BoolInt16, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SceneGetValueAsString(_sceneId byte, _valueId *RemoteValueID) (retval1769 *BoolString, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SceneGetValueListSelection_String(_sceneId byte, _valueId *RemoteValueID) (retval1770 *BoolString, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SceneGetValueListSelection_Int32(_sceneId byte, _valueId *RemoteValueID) (retval1771 *BoolInt, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetSceneValue_Bool(_sceneId byte, _valueId *RemoteValueID, _value bool) (retval1772 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetSceneValue_Uint8(_sceneId byte, _valueId *RemoteValueID, _value byte) (retval1773 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetSceneValue_Float(_sceneId byte, _valueId *RemoteValueID, _value float64) (retval1774 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetSceneValue_Int32(_sceneId byte, _valueId *RemoteValueID, _value int32) (retval1775 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetSceneValue_Int16(_sceneId byte, _valueId *RemoteValueID, _value int16) (retval1776 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetSceneValue_String(_sceneId byte, _valueId *RemoteValueID, _value string) (retval1777 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetSceneValueListSelection_String(_sceneId byte, _valueId *RemoteValueID, _value string) (retval1778 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetSceneValueListSelection_Int32(_sceneId byte, _valueId *RemoteValueID, _value int32) (retval1779 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetSceneLabel(_sceneId byte) (retval1780 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetSceneLabel(_sceneId byte, _value string) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SceneExists(_sceneId byte) (retval1782 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  ActivateScene(_sceneId byte) (retval1783 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SendAllValues() (err os.Error)\n")
  fmt.Fprint(os.Stderr, "\n")
  os.Exit(0)
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  var help bool
  var url http.URL
  var trans thrift.TTransport
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.BoolVar(&help, "help", false, "See usage string")
  flag.Parse()
  if help || flag.NArg() == 0 {
    flag.Usage()
  }
  
  if len(urlString) > 0 {
    url, err := http.ParseURL(urlString)
    if err != nil {
      fmt.Fprint(os.Stderr, "Error parsing URL: ", err.String(), "\n")
      flag.Usage()
    }
    host = url.Host
    useHttp = len(url.Scheme) <= 0 || url.Scheme == "http"
  } else if useHttp {
    _, err := http.ParseURL(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprint(os.Stderr, "Error parsing URL: ", err.String(), "\n")
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err os.Error
  if useHttp {
    trans, err = thrift.NewTHttpClient(url.Raw)
  } else {
    addr, err := net.ResolveTCPAddr("tcp", fmt.Sprint(host, ":", port))
    if err != nil {
      fmt.Fprint(os.Stderr, "Error resolving address", err.String())
      os.Exit(1)
    }
    trans, err = thrift.NewTNonblockingSocketAddr(addr)
    if framed {
      trans = thrift.NewTFramedTransport(trans)
    }
  }
  if err != nil {
    fmt.Fprint(os.Stderr, "Error creating transport", err.String())
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactory()
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
    break
  default:
    fmt.Fprint(os.Stderr, "Invalid protocol specified: ", protocol, "\n")
    Usage()
    os.Exit(1)
  }
  client := OpenZWave.NewRemoteManagerClientFactory(trans, protocolFactory)
  if err = trans.Open(); err != nil {
    fmt.Fprint(os.Stderr, "Error opening socket to ", host, ":", port, " ", err.String())
    os.Exit(1)
  }
  
  switch cmd {
  case "WriteConfig":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "WriteConfig requires 1 args\n")
      flag.Usage()
    }
    tmp0, err1785 := (strconv.Atoi(flag.Arg(1)))
    if err1785 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.WriteConfig(value0))
    fmt.Print("\n")
    break
  case "GetControllerNodeId":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetControllerNodeId requires 1 args\n")
      flag.Usage()
    }
    tmp0, err1786 := (strconv.Atoi(flag.Arg(1)))
    if err1786 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetControllerNodeId(value0))
    fmt.Print("\n")
    break
  case "IsPrimaryController":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "IsPrimaryController requires 1 args\n")
      flag.Usage()
    }
    tmp0, err1787 := (strconv.Atoi(flag.Arg(1)))
    if err1787 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.IsPrimaryController(value0))
    fmt.Print("\n")
    break
  case "IsStaticUpdateController":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "IsStaticUpdateController requires 1 args\n")
      flag.Usage()
    }
    tmp0, err1788 := (strconv.Atoi(flag.Arg(1)))
    if err1788 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.IsStaticUpdateController(value0))
    fmt.Print("\n")
    break
  case "IsBridgeController":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "IsBridgeController requires 1 args\n")
      flag.Usage()
    }
    tmp0, err1789 := (strconv.Atoi(flag.Arg(1)))
    if err1789 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.IsBridgeController(value0))
    fmt.Print("\n")
    break
  case "GetLibraryVersion":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetLibraryVersion requires 1 args\n")
      flag.Usage()
    }
    tmp0, err1790 := (strconv.Atoi(flag.Arg(1)))
    if err1790 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetLibraryVersion(value0))
    fmt.Print("\n")
    break
  case "GetLibraryTypeName":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetLibraryTypeName requires 1 args\n")
      flag.Usage()
    }
    tmp0, err1791 := (strconv.Atoi(flag.Arg(1)))
    if err1791 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetLibraryTypeName(value0))
    fmt.Print("\n")
    break
  case "GetSendQueueCount":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetSendQueueCount requires 1 args\n")
      flag.Usage()
    }
    tmp0, err1792 := (strconv.Atoi(flag.Arg(1)))
    if err1792 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetSendQueueCount(value0))
    fmt.Print("\n")
    break
  case "GetPollInterval":
    if flag.NArg() - 1 != 0 {
      fmt.Fprint(os.Stderr, "GetPollInterval requires 0 args\n")
      flag.Usage()
    }
    fmt.Print(client.GetPollInterval())
    fmt.Print("\n")
    break
  case "SetPollInterval":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "SetPollInterval requires 1 args\n")
      flag.Usage()
    }
    tmp0, err1793 := (strconv.Atoi(flag.Arg(1)))
    if err1793 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.SetPollInterval(value0))
    fmt.Print("\n")
    break
  case "EnablePoll":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "EnablePoll requires 1 args\n")
      flag.Usage()
    }
    arg1794 := flag.Arg(1)
    mbTrans1795 := thrift.NewTMemoryBufferLen(len(arg1794))
    defer mbTrans1795.Close()
    _, err1796 := mbTrans1795.WriteString(arg1794)
    if err1796 != nil {
      Usage()
      return
    }
    factory1797 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1798 := factory1797.GetProtocol(mbTrans1795)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err1799 := argvalue0.Read(jsProt1798)
    if err1799 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.EnablePoll(value0))
    fmt.Print("\n")
    break
  case "DisablePoll":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "DisablePoll requires 1 args\n")
      flag.Usage()
    }
    arg1800 := flag.Arg(1)
    mbTrans1801 := thrift.NewTMemoryBufferLen(len(arg1800))
    defer mbTrans1801.Close()
    _, err1802 := mbTrans1801.WriteString(arg1800)
    if err1802 != nil {
      Usage()
      return
    }
    factory1803 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1804 := factory1803.GetProtocol(mbTrans1801)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err1805 := argvalue0.Read(jsProt1804)
    if err1805 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DisablePoll(value0))
    fmt.Print("\n")
    break
  case "isPolled":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "IsPolled requires 1 args\n")
      flag.Usage()
    }
    arg1806 := flag.Arg(1)
    mbTrans1807 := thrift.NewTMemoryBufferLen(len(arg1806))
    defer mbTrans1807.Close()
    _, err1808 := mbTrans1807.WriteString(arg1806)
    if err1808 != nil {
      Usage()
      return
    }
    factory1809 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1810 := factory1809.GetProtocol(mbTrans1807)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err1811 := argvalue0.Read(jsProt1810)
    if err1811 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.IsPolled(value0))
    fmt.Print("\n")
    break
  case "RefreshNodeInfo":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "RefreshNodeInfo requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1812 := (strconv.Atoi(flag.Arg(1)))
    if err1812 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1813 := (strconv.Atoi(flag.Arg(2)))
    if err1813 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.RefreshNodeInfo(value0, value1))
    fmt.Print("\n")
    break
  case "RequestNodeState":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "RequestNodeState requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1814 := (strconv.Atoi(flag.Arg(1)))
    if err1814 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1815 := (strconv.Atoi(flag.Arg(2)))
    if err1815 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.RequestNodeState(value0, value1))
    fmt.Print("\n")
    break
  case "RequestNodeDynamic":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "RequestNodeDynamic requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1816 := (strconv.Atoi(flag.Arg(1)))
    if err1816 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1817 := (strconv.Atoi(flag.Arg(2)))
    if err1817 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.RequestNodeDynamic(value0, value1))
    fmt.Print("\n")
    break
  case "IsNodeListeningDevice":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "IsNodeListeningDevice requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1818 := (strconv.Atoi(flag.Arg(1)))
    if err1818 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1819 := (strconv.Atoi(flag.Arg(2)))
    if err1819 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.IsNodeListeningDevice(value0, value1))
    fmt.Print("\n")
    break
  case "IsNodeRoutingDevice":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "IsNodeRoutingDevice requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1820 := (strconv.Atoi(flag.Arg(1)))
    if err1820 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1821 := (strconv.Atoi(flag.Arg(2)))
    if err1821 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.IsNodeRoutingDevice(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeMaxBaudRate":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeMaxBaudRate requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1822 := (strconv.Atoi(flag.Arg(1)))
    if err1822 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1823 := (strconv.Atoi(flag.Arg(2)))
    if err1823 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeMaxBaudRate(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeVersion":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeVersion requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1824 := (strconv.Atoi(flag.Arg(1)))
    if err1824 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1825 := (strconv.Atoi(flag.Arg(2)))
    if err1825 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeVersion(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeSecurity":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeSecurity requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1826 := (strconv.Atoi(flag.Arg(1)))
    if err1826 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1827 := (strconv.Atoi(flag.Arg(2)))
    if err1827 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeSecurity(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeBasic":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeBasic requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1828 := (strconv.Atoi(flag.Arg(1)))
    if err1828 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1829 := (strconv.Atoi(flag.Arg(2)))
    if err1829 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeBasic(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeGeneric":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeGeneric requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1830 := (strconv.Atoi(flag.Arg(1)))
    if err1830 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1831 := (strconv.Atoi(flag.Arg(2)))
    if err1831 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeGeneric(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeSpecific":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeSpecific requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1832 := (strconv.Atoi(flag.Arg(1)))
    if err1832 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1833 := (strconv.Atoi(flag.Arg(2)))
    if err1833 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeSpecific(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeType":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeType requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1834 := (strconv.Atoi(flag.Arg(1)))
    if err1834 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1835 := (strconv.Atoi(flag.Arg(2)))
    if err1835 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeType(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeNeighbors":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeNeighbors requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1836 := (strconv.Atoi(flag.Arg(1)))
    if err1836 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1837 := (strconv.Atoi(flag.Arg(2)))
    if err1837 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeNeighbors(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeManufacturerName":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeManufacturerName requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1838 := (strconv.Atoi(flag.Arg(1)))
    if err1838 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1839 := (strconv.Atoi(flag.Arg(2)))
    if err1839 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeManufacturerName(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeProductName":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeProductName requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1840 := (strconv.Atoi(flag.Arg(1)))
    if err1840 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1841 := (strconv.Atoi(flag.Arg(2)))
    if err1841 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeProductName(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeName":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeName requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1842 := (strconv.Atoi(flag.Arg(1)))
    if err1842 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1843 := (strconv.Atoi(flag.Arg(2)))
    if err1843 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeName(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeLocation":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeLocation requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1844 := (strconv.Atoi(flag.Arg(1)))
    if err1844 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1845 := (strconv.Atoi(flag.Arg(2)))
    if err1845 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeLocation(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeManufacturerId":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeManufacturerId requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1846 := (strconv.Atoi(flag.Arg(1)))
    if err1846 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1847 := (strconv.Atoi(flag.Arg(2)))
    if err1847 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeManufacturerId(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeProductType":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeProductType requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1848 := (strconv.Atoi(flag.Arg(1)))
    if err1848 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1849 := (strconv.Atoi(flag.Arg(2)))
    if err1849 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeProductType(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeProductId":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeProductId requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1850 := (strconv.Atoi(flag.Arg(1)))
    if err1850 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1851 := (strconv.Atoi(flag.Arg(2)))
    if err1851 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeProductId(value0, value1))
    fmt.Print("\n")
    break
  case "SetNodeManufacturerName":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetNodeManufacturerName requires 3 args\n")
      flag.Usage()
    }
    tmp0, err1852 := (strconv.Atoi(flag.Arg(1)))
    if err1852 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1853 := (strconv.Atoi(flag.Arg(2)))
    if err1853 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.SetNodeManufacturerName(value0, value1, value2))
    fmt.Print("\n")
    break
  case "SetNodeProductName":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetNodeProductName requires 3 args\n")
      flag.Usage()
    }
    tmp0, err1855 := (strconv.Atoi(flag.Arg(1)))
    if err1855 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1856 := (strconv.Atoi(flag.Arg(2)))
    if err1856 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.SetNodeProductName(value0, value1, value2))
    fmt.Print("\n")
    break
  case "SetNodeName":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetNodeName requires 3 args\n")
      flag.Usage()
    }
    tmp0, err1858 := (strconv.Atoi(flag.Arg(1)))
    if err1858 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1859 := (strconv.Atoi(flag.Arg(2)))
    if err1859 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.SetNodeName(value0, value1, value2))
    fmt.Print("\n")
    break
  case "SetNodeLocation":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetNodeLocation requires 3 args\n")
      flag.Usage()
    }
    tmp0, err1861 := (strconv.Atoi(flag.Arg(1)))
    if err1861 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1862 := (strconv.Atoi(flag.Arg(2)))
    if err1862 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.SetNodeLocation(value0, value1, value2))
    fmt.Print("\n")
    break
  case "SetNodeOn":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetNodeOn requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1864 := (strconv.Atoi(flag.Arg(1)))
    if err1864 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1865 := (strconv.Atoi(flag.Arg(2)))
    if err1865 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.SetNodeOn(value0, value1))
    fmt.Print("\n")
    break
  case "SetNodeOff":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetNodeOff requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1866 := (strconv.Atoi(flag.Arg(1)))
    if err1866 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1867 := (strconv.Atoi(flag.Arg(2)))
    if err1867 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.SetNodeOff(value0, value1))
    fmt.Print("\n")
    break
  case "SetNodeLevel":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetNodeLevel requires 3 args\n")
      flag.Usage()
    }
    tmp0, err1868 := (strconv.Atoi(flag.Arg(1)))
    if err1868 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1869 := (strconv.Atoi(flag.Arg(2)))
    if err1869 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    tmp2, err1870 := (strconv.Atoi(flag.Arg(3)))
    if err1870 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    fmt.Print(client.SetNodeLevel(value0, value1, value2))
    fmt.Print("\n")
    break
  case "IsNodeInfoReceived":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "IsNodeInfoReceived requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1871 := (strconv.Atoi(flag.Arg(1)))
    if err1871 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1872 := (strconv.Atoi(flag.Arg(2)))
    if err1872 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.IsNodeInfoReceived(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeClassInformation":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "GetNodeClassInformation requires 3 args\n")
      flag.Usage()
    }
    tmp0, err1873 := (strconv.Atoi(flag.Arg(1)))
    if err1873 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1874 := (strconv.Atoi(flag.Arg(2)))
    if err1874 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    tmp2, err1875 := (strconv.Atoi(flag.Arg(3)))
    if err1875 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    fmt.Print(client.GetNodeClassInformation(value0, value1, value2))
    fmt.Print("\n")
    break
  case "GetValueLabel":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueLabel requires 1 args\n")
      flag.Usage()
    }
    arg1876 := flag.Arg(1)
    mbTrans1877 := thrift.NewTMemoryBufferLen(len(arg1876))
    defer mbTrans1877.Close()
    _, err1878 := mbTrans1877.WriteString(arg1876)
    if err1878 != nil {
      Usage()
      return
    }
    factory1879 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1880 := factory1879.GetProtocol(mbTrans1877)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err1881 := argvalue0.Read(jsProt1880)
    if err1881 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueLabel(value0))
    fmt.Print("\n")
    break
  case "SetValueLabel":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetValueLabel requires 2 args\n")
      flag.Usage()
    }
    arg1882 := flag.Arg(1)
    mbTrans1883 := thrift.NewTMemoryBufferLen(len(arg1882))
    defer mbTrans1883.Close()
    _, err1884 := mbTrans1883.WriteString(arg1882)
    if err1884 != nil {
      Usage()
      return
    }
    factory1885 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1886 := factory1885.GetProtocol(mbTrans1883)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err1887 := argvalue0.Read(jsProt1886)
    if err1887 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.SetValueLabel(value0, value1))
    fmt.Print("\n")
    break
  case "GetValueUnits":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueUnits requires 1 args\n")
      flag.Usage()
    }
    arg1889 := flag.Arg(1)
    mbTrans1890 := thrift.NewTMemoryBufferLen(len(arg1889))
    defer mbTrans1890.Close()
    _, err1891 := mbTrans1890.WriteString(arg1889)
    if err1891 != nil {
      Usage()
      return
    }
    factory1892 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1893 := factory1892.GetProtocol(mbTrans1890)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err1894 := argvalue0.Read(jsProt1893)
    if err1894 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueUnits(value0))
    fmt.Print("\n")
    break
  case "SetValueUnits":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetValueUnits requires 2 args\n")
      flag.Usage()
    }
    arg1895 := flag.Arg(1)
    mbTrans1896 := thrift.NewTMemoryBufferLen(len(arg1895))
    defer mbTrans1896.Close()
    _, err1897 := mbTrans1896.WriteString(arg1895)
    if err1897 != nil {
      Usage()
      return
    }
    factory1898 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1899 := factory1898.GetProtocol(mbTrans1896)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err1900 := argvalue0.Read(jsProt1899)
    if err1900 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.SetValueUnits(value0, value1))
    fmt.Print("\n")
    break
  case "GetValueHelp":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueHelp requires 1 args\n")
      flag.Usage()
    }
    arg1902 := flag.Arg(1)
    mbTrans1903 := thrift.NewTMemoryBufferLen(len(arg1902))
    defer mbTrans1903.Close()
    _, err1904 := mbTrans1903.WriteString(arg1902)
    if err1904 != nil {
      Usage()
      return
    }
    factory1905 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1906 := factory1905.GetProtocol(mbTrans1903)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err1907 := argvalue0.Read(jsProt1906)
    if err1907 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueHelp(value0))
    fmt.Print("\n")
    break
  case "SetValueHelp":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetValueHelp requires 2 args\n")
      flag.Usage()
    }
    arg1908 := flag.Arg(1)
    mbTrans1909 := thrift.NewTMemoryBufferLen(len(arg1908))
    defer mbTrans1909.Close()
    _, err1910 := mbTrans1909.WriteString(arg1908)
    if err1910 != nil {
      Usage()
      return
    }
    factory1911 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1912 := factory1911.GetProtocol(mbTrans1909)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err1913 := argvalue0.Read(jsProt1912)
    if err1913 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.SetValueHelp(value0, value1))
    fmt.Print("\n")
    break
  case "GetValueMin":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueMin requires 1 args\n")
      flag.Usage()
    }
    arg1915 := flag.Arg(1)
    mbTrans1916 := thrift.NewTMemoryBufferLen(len(arg1915))
    defer mbTrans1916.Close()
    _, err1917 := mbTrans1916.WriteString(arg1915)
    if err1917 != nil {
      Usage()
      return
    }
    factory1918 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1919 := factory1918.GetProtocol(mbTrans1916)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err1920 := argvalue0.Read(jsProt1919)
    if err1920 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueMin(value0))
    fmt.Print("\n")
    break
  case "GetValueMax":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueMax requires 1 args\n")
      flag.Usage()
    }
    arg1921 := flag.Arg(1)
    mbTrans1922 := thrift.NewTMemoryBufferLen(len(arg1921))
    defer mbTrans1922.Close()
    _, err1923 := mbTrans1922.WriteString(arg1921)
    if err1923 != nil {
      Usage()
      return
    }
    factory1924 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1925 := factory1924.GetProtocol(mbTrans1922)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err1926 := argvalue0.Read(jsProt1925)
    if err1926 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueMax(value0))
    fmt.Print("\n")
    break
  case "IsValueReadOnly":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "IsValueReadOnly requires 1 args\n")
      flag.Usage()
    }
    arg1927 := flag.Arg(1)
    mbTrans1928 := thrift.NewTMemoryBufferLen(len(arg1927))
    defer mbTrans1928.Close()
    _, err1929 := mbTrans1928.WriteString(arg1927)
    if err1929 != nil {
      Usage()
      return
    }
    factory1930 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1931 := factory1930.GetProtocol(mbTrans1928)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err1932 := argvalue0.Read(jsProt1931)
    if err1932 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.IsValueReadOnly(value0))
    fmt.Print("\n")
    break
  case "IsValueWriteOnly":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "IsValueWriteOnly requires 1 args\n")
      flag.Usage()
    }
    arg1933 := flag.Arg(1)
    mbTrans1934 := thrift.NewTMemoryBufferLen(len(arg1933))
    defer mbTrans1934.Close()
    _, err1935 := mbTrans1934.WriteString(arg1933)
    if err1935 != nil {
      Usage()
      return
    }
    factory1936 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1937 := factory1936.GetProtocol(mbTrans1934)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err1938 := argvalue0.Read(jsProt1937)
    if err1938 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.IsValueWriteOnly(value0))
    fmt.Print("\n")
    break
  case "IsValueSet":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "IsValueSet requires 1 args\n")
      flag.Usage()
    }
    arg1939 := flag.Arg(1)
    mbTrans1940 := thrift.NewTMemoryBufferLen(len(arg1939))
    defer mbTrans1940.Close()
    _, err1941 := mbTrans1940.WriteString(arg1939)
    if err1941 != nil {
      Usage()
      return
    }
    factory1942 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1943 := factory1942.GetProtocol(mbTrans1940)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err1944 := argvalue0.Read(jsProt1943)
    if err1944 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.IsValueSet(value0))
    fmt.Print("\n")
    break
  case "GetValueAsBool":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueAsBool requires 1 args\n")
      flag.Usage()
    }
    arg1945 := flag.Arg(1)
    mbTrans1946 := thrift.NewTMemoryBufferLen(len(arg1945))
    defer mbTrans1946.Close()
    _, err1947 := mbTrans1946.WriteString(arg1945)
    if err1947 != nil {
      Usage()
      return
    }
    factory1948 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1949 := factory1948.GetProtocol(mbTrans1946)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err1950 := argvalue0.Read(jsProt1949)
    if err1950 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueAsBool(value0))
    fmt.Print("\n")
    break
  case "GetValueAsByte":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueAsByte requires 1 args\n")
      flag.Usage()
    }
    arg1951 := flag.Arg(1)
    mbTrans1952 := thrift.NewTMemoryBufferLen(len(arg1951))
    defer mbTrans1952.Close()
    _, err1953 := mbTrans1952.WriteString(arg1951)
    if err1953 != nil {
      Usage()
      return
    }
    factory1954 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1955 := factory1954.GetProtocol(mbTrans1952)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err1956 := argvalue0.Read(jsProt1955)
    if err1956 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueAsByte(value0))
    fmt.Print("\n")
    break
  case "GetValueAsFloat":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueAsFloat requires 1 args\n")
      flag.Usage()
    }
    arg1957 := flag.Arg(1)
    mbTrans1958 := thrift.NewTMemoryBufferLen(len(arg1957))
    defer mbTrans1958.Close()
    _, err1959 := mbTrans1958.WriteString(arg1957)
    if err1959 != nil {
      Usage()
      return
    }
    factory1960 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1961 := factory1960.GetProtocol(mbTrans1958)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err1962 := argvalue0.Read(jsProt1961)
    if err1962 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueAsFloat(value0))
    fmt.Print("\n")
    break
  case "GetValueAsInt":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueAsInt requires 1 args\n")
      flag.Usage()
    }
    arg1963 := flag.Arg(1)
    mbTrans1964 := thrift.NewTMemoryBufferLen(len(arg1963))
    defer mbTrans1964.Close()
    _, err1965 := mbTrans1964.WriteString(arg1963)
    if err1965 != nil {
      Usage()
      return
    }
    factory1966 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1967 := factory1966.GetProtocol(mbTrans1964)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err1968 := argvalue0.Read(jsProt1967)
    if err1968 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueAsInt(value0))
    fmt.Print("\n")
    break
  case "GetValueAsShort":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueAsShort requires 1 args\n")
      flag.Usage()
    }
    arg1969 := flag.Arg(1)
    mbTrans1970 := thrift.NewTMemoryBufferLen(len(arg1969))
    defer mbTrans1970.Close()
    _, err1971 := mbTrans1970.WriteString(arg1969)
    if err1971 != nil {
      Usage()
      return
    }
    factory1972 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1973 := factory1972.GetProtocol(mbTrans1970)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err1974 := argvalue0.Read(jsProt1973)
    if err1974 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueAsShort(value0))
    fmt.Print("\n")
    break
  case "GetValueAsString":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueAsString requires 1 args\n")
      flag.Usage()
    }
    arg1975 := flag.Arg(1)
    mbTrans1976 := thrift.NewTMemoryBufferLen(len(arg1975))
    defer mbTrans1976.Close()
    _, err1977 := mbTrans1976.WriteString(arg1975)
    if err1977 != nil {
      Usage()
      return
    }
    factory1978 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1979 := factory1978.GetProtocol(mbTrans1976)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err1980 := argvalue0.Read(jsProt1979)
    if err1980 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueAsString(value0))
    fmt.Print("\n")
    break
  case "GetValueListSelection_String":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueListSelectionString requires 1 args\n")
      flag.Usage()
    }
    arg1981 := flag.Arg(1)
    mbTrans1982 := thrift.NewTMemoryBufferLen(len(arg1981))
    defer mbTrans1982.Close()
    _, err1983 := mbTrans1982.WriteString(arg1981)
    if err1983 != nil {
      Usage()
      return
    }
    factory1984 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1985 := factory1984.GetProtocol(mbTrans1982)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err1986 := argvalue0.Read(jsProt1985)
    if err1986 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueListSelectionString(value0))
    fmt.Print("\n")
    break
  case "GetValueListSelection_Int32":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueListSelectionInt32 requires 1 args\n")
      flag.Usage()
    }
    arg1987 := flag.Arg(1)
    mbTrans1988 := thrift.NewTMemoryBufferLen(len(arg1987))
    defer mbTrans1988.Close()
    _, err1989 := mbTrans1988.WriteString(arg1987)
    if err1989 != nil {
      Usage()
      return
    }
    factory1990 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1991 := factory1990.GetProtocol(mbTrans1988)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err1992 := argvalue0.Read(jsProt1991)
    if err1992 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueListSelectionInt32(value0))
    fmt.Print("\n")
    break
  case "GetValueListItems":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueListItems requires 1 args\n")
      flag.Usage()
    }
    arg1993 := flag.Arg(1)
    mbTrans1994 := thrift.NewTMemoryBufferLen(len(arg1993))
    defer mbTrans1994.Close()
    _, err1995 := mbTrans1994.WriteString(arg1993)
    if err1995 != nil {
      Usage()
      return
    }
    factory1996 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1997 := factory1996.GetProtocol(mbTrans1994)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err1998 := argvalue0.Read(jsProt1997)
    if err1998 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueListItems(value0))
    fmt.Print("\n")
    break
  case "GetValueFloatPrecision":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueFloatPrecision requires 1 args\n")
      flag.Usage()
    }
    arg1999 := flag.Arg(1)
    mbTrans2000 := thrift.NewTMemoryBufferLen(len(arg1999))
    defer mbTrans2000.Close()
    _, err2001 := mbTrans2000.WriteString(arg1999)
    if err2001 != nil {
      Usage()
      return
    }
    factory2002 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2003 := factory2002.GetProtocol(mbTrans2000)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2004 := argvalue0.Read(jsProt2003)
    if err2004 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueFloatPrecision(value0))
    fmt.Print("\n")
    break
  case "SetValue_Bool":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetValueBool requires 2 args\n")
      flag.Usage()
    }
    arg2005 := flag.Arg(1)
    mbTrans2006 := thrift.NewTMemoryBufferLen(len(arg2005))
    defer mbTrans2006.Close()
    _, err2007 := mbTrans2006.WriteString(arg2005)
    if err2007 != nil {
      Usage()
      return
    }
    factory2008 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2009 := factory2008.GetProtocol(mbTrans2006)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2010 := argvalue0.Read(jsProt2009)
    if err2010 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2) == "true"
    value1 := argvalue1
    fmt.Print(client.SetValueBool(value0, value1))
    fmt.Print("\n")
    break
  case "SetValue_UInt8":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetValueUInt8 requires 2 args\n")
      flag.Usage()
    }
    arg2012 := flag.Arg(1)
    mbTrans2013 := thrift.NewTMemoryBufferLen(len(arg2012))
    defer mbTrans2013.Close()
    _, err2014 := mbTrans2013.WriteString(arg2012)
    if err2014 != nil {
      Usage()
      return
    }
    factory2015 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2016 := factory2015.GetProtocol(mbTrans2013)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2017 := argvalue0.Read(jsProt2016)
    if err2017 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err2018 := (strconv.Atoi(flag.Arg(2)))
    if err2018 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.SetValueUInt8(value0, value1))
    fmt.Print("\n")
    break
  case "SetValue_Float":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetValueFloat requires 2 args\n")
      flag.Usage()
    }
    arg2019 := flag.Arg(1)
    mbTrans2020 := thrift.NewTMemoryBufferLen(len(arg2019))
    defer mbTrans2020.Close()
    _, err2021 := mbTrans2020.WriteString(arg2019)
    if err2021 != nil {
      Usage()
      return
    }
    factory2022 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2023 := factory2022.GetProtocol(mbTrans2020)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2024 := argvalue0.Read(jsProt2023)
    if err2024 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1, err2025 := (strconv.Atof64(flag.Arg(2)))
    if err2025 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SetValueFloat(value0, value1))
    fmt.Print("\n")
    break
  case "SetValue_Int32":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetValueInt32 requires 2 args\n")
      flag.Usage()
    }
    arg2026 := flag.Arg(1)
    mbTrans2027 := thrift.NewTMemoryBufferLen(len(arg2026))
    defer mbTrans2027.Close()
    _, err2028 := mbTrans2027.WriteString(arg2026)
    if err2028 != nil {
      Usage()
      return
    }
    factory2029 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2030 := factory2029.GetProtocol(mbTrans2027)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2031 := argvalue0.Read(jsProt2030)
    if err2031 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err2032 := (strconv.Atoi(flag.Arg(2)))
    if err2032 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    fmt.Print(client.SetValueInt32(value0, value1))
    fmt.Print("\n")
    break
  case "SetValue_Int16":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetValueInt16 requires 2 args\n")
      flag.Usage()
    }
    arg2033 := flag.Arg(1)
    mbTrans2034 := thrift.NewTMemoryBufferLen(len(arg2033))
    defer mbTrans2034.Close()
    _, err2035 := mbTrans2034.WriteString(arg2033)
    if err2035 != nil {
      Usage()
      return
    }
    factory2036 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2037 := factory2036.GetProtocol(mbTrans2034)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2038 := argvalue0.Read(jsProt2037)
    if err2038 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err2039 := (strconv.Atoi(flag.Arg(2)))
    if err2039 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.SetValueInt16(value0, value1))
    fmt.Print("\n")
    break
  case "SetValue_String":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetValueString requires 2 args\n")
      flag.Usage()
    }
    arg2040 := flag.Arg(1)
    mbTrans2041 := thrift.NewTMemoryBufferLen(len(arg2040))
    defer mbTrans2041.Close()
    _, err2042 := mbTrans2041.WriteString(arg2040)
    if err2042 != nil {
      Usage()
      return
    }
    factory2043 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2044 := factory2043.GetProtocol(mbTrans2041)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2045 := argvalue0.Read(jsProt2044)
    if err2045 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.SetValueString(value0, value1))
    fmt.Print("\n")
    break
  case "SetValueListSelection":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetValueListSelection requires 2 args\n")
      flag.Usage()
    }
    arg2047 := flag.Arg(1)
    mbTrans2048 := thrift.NewTMemoryBufferLen(len(arg2047))
    defer mbTrans2048.Close()
    _, err2049 := mbTrans2048.WriteString(arg2047)
    if err2049 != nil {
      Usage()
      return
    }
    factory2050 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2051 := factory2050.GetProtocol(mbTrans2048)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2052 := argvalue0.Read(jsProt2051)
    if err2052 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.SetValueListSelection(value0, value1))
    fmt.Print("\n")
    break
  case "PressButton":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "PressButton requires 1 args\n")
      flag.Usage()
    }
    arg2054 := flag.Arg(1)
    mbTrans2055 := thrift.NewTMemoryBufferLen(len(arg2054))
    defer mbTrans2055.Close()
    _, err2056 := mbTrans2055.WriteString(arg2054)
    if err2056 != nil {
      Usage()
      return
    }
    factory2057 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2058 := factory2057.GetProtocol(mbTrans2055)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2059 := argvalue0.Read(jsProt2058)
    if err2059 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.PressButton(value0))
    fmt.Print("\n")
    break
  case "ReleaseButton":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "ReleaseButton requires 1 args\n")
      flag.Usage()
    }
    arg2060 := flag.Arg(1)
    mbTrans2061 := thrift.NewTMemoryBufferLen(len(arg2060))
    defer mbTrans2061.Close()
    _, err2062 := mbTrans2061.WriteString(arg2060)
    if err2062 != nil {
      Usage()
      return
    }
    factory2063 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2064 := factory2063.GetProtocol(mbTrans2061)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2065 := argvalue0.Read(jsProt2064)
    if err2065 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ReleaseButton(value0))
    fmt.Print("\n")
    break
  case "GetNumSwitchPoints":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetNumSwitchPoints requires 1 args\n")
      flag.Usage()
    }
    arg2066 := flag.Arg(1)
    mbTrans2067 := thrift.NewTMemoryBufferLen(len(arg2066))
    defer mbTrans2067.Close()
    _, err2068 := mbTrans2067.WriteString(arg2066)
    if err2068 != nil {
      Usage()
      return
    }
    factory2069 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2070 := factory2069.GetProtocol(mbTrans2067)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2071 := argvalue0.Read(jsProt2070)
    if err2071 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetNumSwitchPoints(value0))
    fmt.Print("\n")
    break
  case "SetSwitchPoint":
    if flag.NArg() - 1 != 4 {
      fmt.Fprint(os.Stderr, "SetSwitchPoint requires 4 args\n")
      flag.Usage()
    }
    arg2072 := flag.Arg(1)
    mbTrans2073 := thrift.NewTMemoryBufferLen(len(arg2072))
    defer mbTrans2073.Close()
    _, err2074 := mbTrans2073.WriteString(arg2072)
    if err2074 != nil {
      Usage()
      return
    }
    factory2075 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2076 := factory2075.GetProtocol(mbTrans2073)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2077 := argvalue0.Read(jsProt2076)
    if err2077 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err2078 := (strconv.Atoi(flag.Arg(2)))
    if err2078 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    tmp2, err2079 := (strconv.Atoi(flag.Arg(3)))
    if err2079 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    tmp3, err2080 := (strconv.Atoi(flag.Arg(4)))
    if err2080 != nil {
      Usage()
      return
    }
    argvalue3 := byte(tmp3)
    value3 := argvalue3
    fmt.Print(client.SetSwitchPoint(value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "RemoveSwitchPoint":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "RemoveSwitchPoint requires 3 args\n")
      flag.Usage()
    }
    arg2081 := flag.Arg(1)
    mbTrans2082 := thrift.NewTMemoryBufferLen(len(arg2081))
    defer mbTrans2082.Close()
    _, err2083 := mbTrans2082.WriteString(arg2081)
    if err2083 != nil {
      Usage()
      return
    }
    factory2084 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2085 := factory2084.GetProtocol(mbTrans2082)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2086 := argvalue0.Read(jsProt2085)
    if err2086 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err2087 := (strconv.Atoi(flag.Arg(2)))
    if err2087 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    tmp2, err2088 := (strconv.Atoi(flag.Arg(3)))
    if err2088 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    fmt.Print(client.RemoveSwitchPoint(value0, value1, value2))
    fmt.Print("\n")
    break
  case "ClearSwitchPoints":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "ClearSwitchPoints requires 1 args\n")
      flag.Usage()
    }
    arg2089 := flag.Arg(1)
    mbTrans2090 := thrift.NewTMemoryBufferLen(len(arg2089))
    defer mbTrans2090.Close()
    _, err2091 := mbTrans2090.WriteString(arg2089)
    if err2091 != nil {
      Usage()
      return
    }
    factory2092 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2093 := factory2092.GetProtocol(mbTrans2090)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2094 := argvalue0.Read(jsProt2093)
    if err2094 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ClearSwitchPoints(value0))
    fmt.Print("\n")
    break
  case "GetSwitchPoint":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetSwitchPoint requires 2 args\n")
      flag.Usage()
    }
    arg2095 := flag.Arg(1)
    mbTrans2096 := thrift.NewTMemoryBufferLen(len(arg2095))
    defer mbTrans2096.Close()
    _, err2097 := mbTrans2096.WriteString(arg2095)
    if err2097 != nil {
      Usage()
      return
    }
    factory2098 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2099 := factory2098.GetProtocol(mbTrans2096)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2100 := argvalue0.Read(jsProt2099)
    if err2100 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err2101 := (strconv.Atoi(flag.Arg(2)))
    if err2101 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetSwitchPoint(value0, value1))
    fmt.Print("\n")
    break
  case "SwitchAllOn":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "SwitchAllOn requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2102 := (strconv.Atoi(flag.Arg(1)))
    if err2102 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.SwitchAllOn(value0))
    fmt.Print("\n")
    break
  case "SwitchAllOff":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "SwitchAllOff requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2103 := (strconv.Atoi(flag.Arg(1)))
    if err2103 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.SwitchAllOff(value0))
    fmt.Print("\n")
    break
  case "SetConfigParam":
    if flag.NArg() - 1 != 5 {
      fmt.Fprint(os.Stderr, "SetConfigParam requires 5 args\n")
      flag.Usage()
    }
    tmp0, err2104 := (strconv.Atoi(flag.Arg(1)))
    if err2104 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2105 := (strconv.Atoi(flag.Arg(2)))
    if err2105 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    tmp2, err2106 := (strconv.Atoi(flag.Arg(3)))
    if err2106 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    tmp3, err2107 := (strconv.Atoi(flag.Arg(4)))
    if err2107 != nil {
      Usage()
      return
    }
    argvalue3 := int32(tmp3)
    value3 := argvalue3
    tmp4, err2108 := (strconv.Atoi(flag.Arg(5)))
    if err2108 != nil {
      Usage()
      return
    }
    argvalue4 := byte(tmp4)
    value4 := argvalue4
    fmt.Print(client.SetConfigParam(value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "RequestConfigParam":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "RequestConfigParam requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2109 := (strconv.Atoi(flag.Arg(1)))
    if err2109 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2110 := (strconv.Atoi(flag.Arg(2)))
    if err2110 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    tmp2, err2111 := (strconv.Atoi(flag.Arg(3)))
    if err2111 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    fmt.Print(client.RequestConfigParam(value0, value1, value2))
    fmt.Print("\n")
    break
  case "RequestAllConfigParams":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "RequestAllConfigParams requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2112 := (strconv.Atoi(flag.Arg(1)))
    if err2112 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2113 := (strconv.Atoi(flag.Arg(2)))
    if err2113 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.RequestAllConfigParams(value0, value1))
    fmt.Print("\n")
    break
  case "GetNumGroups":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNumGroups requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2114 := (strconv.Atoi(flag.Arg(1)))
    if err2114 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2115 := (strconv.Atoi(flag.Arg(2)))
    if err2115 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNumGroups(value0, value1))
    fmt.Print("\n")
    break
  case "GetAssociations":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "GetAssociations requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2116 := (strconv.Atoi(flag.Arg(1)))
    if err2116 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2117 := (strconv.Atoi(flag.Arg(2)))
    if err2117 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    tmp2, err2118 := (strconv.Atoi(flag.Arg(3)))
    if err2118 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    fmt.Print(client.GetAssociations(value0, value1, value2))
    fmt.Print("\n")
    break
  case "GetMaxAssociations":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "GetMaxAssociations requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2119 := (strconv.Atoi(flag.Arg(1)))
    if err2119 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2120 := (strconv.Atoi(flag.Arg(2)))
    if err2120 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    tmp2, err2121 := (strconv.Atoi(flag.Arg(3)))
    if err2121 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    fmt.Print(client.GetMaxAssociations(value0, value1, value2))
    fmt.Print("\n")
    break
  case "GetGroupLabel":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "GetGroupLabel requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2122 := (strconv.Atoi(flag.Arg(1)))
    if err2122 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2123 := (strconv.Atoi(flag.Arg(2)))
    if err2123 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    tmp2, err2124 := (strconv.Atoi(flag.Arg(3)))
    if err2124 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    fmt.Print(client.GetGroupLabel(value0, value1, value2))
    fmt.Print("\n")
    break
  case "AddAssociation":
    if flag.NArg() - 1 != 4 {
      fmt.Fprint(os.Stderr, "AddAssociation requires 4 args\n")
      flag.Usage()
    }
    tmp0, err2125 := (strconv.Atoi(flag.Arg(1)))
    if err2125 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2126 := (strconv.Atoi(flag.Arg(2)))
    if err2126 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    tmp2, err2127 := (strconv.Atoi(flag.Arg(3)))
    if err2127 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    tmp3, err2128 := (strconv.Atoi(flag.Arg(4)))
    if err2128 != nil {
      Usage()
      return
    }
    argvalue3 := byte(tmp3)
    value3 := argvalue3
    fmt.Print(client.AddAssociation(value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "RemoveAssociation":
    if flag.NArg() - 1 != 4 {
      fmt.Fprint(os.Stderr, "RemoveAssociation requires 4 args\n")
      flag.Usage()
    }
    tmp0, err2129 := (strconv.Atoi(flag.Arg(1)))
    if err2129 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2130 := (strconv.Atoi(flag.Arg(2)))
    if err2130 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    tmp2, err2131 := (strconv.Atoi(flag.Arg(3)))
    if err2131 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    tmp3, err2132 := (strconv.Atoi(flag.Arg(4)))
    if err2132 != nil {
      Usage()
      return
    }
    argvalue3 := byte(tmp3)
    value3 := argvalue3
    fmt.Print(client.RemoveAssociation(value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "ResetController":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "ResetController requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2133 := (strconv.Atoi(flag.Arg(1)))
    if err2133 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.ResetController(value0))
    fmt.Print("\n")
    break
  case "SoftReset":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "SoftReset requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2134 := (strconv.Atoi(flag.Arg(1)))
    if err2134 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.SoftReset(value0))
    fmt.Print("\n")
    break
  case "BeginControllerCommand":
    if flag.NArg() - 1 != 4 {
      fmt.Fprint(os.Stderr, "BeginControllerCommand requires 4 args\n")
      flag.Usage()
    }
    tmp0, err2135 := (strconv.Atoi(flag.Arg(1)))
    if err2135 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := OpenZWave.DriverControllerCommand(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3) == "true"
    value2 := argvalue2
    tmp3, err2137 := (strconv.Atoi(flag.Arg(4)))
    if err2137 != nil {
      Usage()
      return
    }
    argvalue3 := byte(tmp3)
    value3 := argvalue3
    fmt.Print(client.BeginControllerCommand(value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "CancelControllerCommand":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "CancelControllerCommand requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2138 := (strconv.Atoi(flag.Arg(1)))
    if err2138 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.CancelControllerCommand(value0))
    fmt.Print("\n")
    break
  case "GetNumScenes":
    if flag.NArg() - 1 != 0 {
      fmt.Fprint(os.Stderr, "GetNumScenes requires 0 args\n")
      flag.Usage()
    }
    fmt.Print(client.GetNumScenes())
    fmt.Print("\n")
    break
  case "GetAllScenes":
    if flag.NArg() - 1 != 0 {
      fmt.Fprint(os.Stderr, "GetAllScenes requires 0 args\n")
      flag.Usage()
    }
    fmt.Print(client.GetAllScenes())
    fmt.Print("\n")
    break
  case "CreateScene":
    if flag.NArg() - 1 != 0 {
      fmt.Fprint(os.Stderr, "CreateScene requires 0 args\n")
      flag.Usage()
    }
    fmt.Print(client.CreateScene())
    fmt.Print("\n")
    break
  case "RemoveScene":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "RemoveScene requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2139 := (strconv.Atoi(flag.Arg(1)))
    if err2139 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    fmt.Print(client.RemoveScene(value0))
    fmt.Print("\n")
    break
  case "AddSceneValue_Bool":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "AddSceneValueBool requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2140 := (strconv.Atoi(flag.Arg(1)))
    if err2140 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2141 := flag.Arg(2)
    mbTrans2142 := thrift.NewTMemoryBufferLen(len(arg2141))
    defer mbTrans2142.Close()
    _, err2143 := mbTrans2142.WriteString(arg2141)
    if err2143 != nil {
      Usage()
      return
    }
    factory2144 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2145 := factory2144.GetProtocol(mbTrans2142)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2146 := argvalue1.Read(jsProt2145)
    if err2146 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := flag.Arg(3) == "true"
    value2 := argvalue2
    fmt.Print(client.AddSceneValueBool(value0, value1, value2))
    fmt.Print("\n")
    break
  case "AddSceneValue_Uint8":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "AddSceneValueUint8 requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2148 := (strconv.Atoi(flag.Arg(1)))
    if err2148 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2149 := flag.Arg(2)
    mbTrans2150 := thrift.NewTMemoryBufferLen(len(arg2149))
    defer mbTrans2150.Close()
    _, err2151 := mbTrans2150.WriteString(arg2149)
    if err2151 != nil {
      Usage()
      return
    }
    factory2152 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2153 := factory2152.GetProtocol(mbTrans2150)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2154 := argvalue1.Read(jsProt2153)
    if err2154 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    tmp2, err2155 := (strconv.Atoi(flag.Arg(3)))
    if err2155 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    fmt.Print(client.AddSceneValueUint8(value0, value1, value2))
    fmt.Print("\n")
    break
  case "AddSceneValue_Float":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "AddSceneValueFloat requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2156 := (strconv.Atoi(flag.Arg(1)))
    if err2156 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2157 := flag.Arg(2)
    mbTrans2158 := thrift.NewTMemoryBufferLen(len(arg2157))
    defer mbTrans2158.Close()
    _, err2159 := mbTrans2158.WriteString(arg2157)
    if err2159 != nil {
      Usage()
      return
    }
    factory2160 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2161 := factory2160.GetProtocol(mbTrans2158)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2162 := argvalue1.Read(jsProt2161)
    if err2162 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2, err2163 := (strconv.Atof64(flag.Arg(3)))
    if err2163 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.AddSceneValueFloat(value0, value1, value2))
    fmt.Print("\n")
    break
  case "AddSceneValue_Int32":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "AddSceneValueInt32 requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2164 := (strconv.Atoi(flag.Arg(1)))
    if err2164 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2165 := flag.Arg(2)
    mbTrans2166 := thrift.NewTMemoryBufferLen(len(arg2165))
    defer mbTrans2166.Close()
    _, err2167 := mbTrans2166.WriteString(arg2165)
    if err2167 != nil {
      Usage()
      return
    }
    factory2168 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2169 := factory2168.GetProtocol(mbTrans2166)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2170 := argvalue1.Read(jsProt2169)
    if err2170 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    tmp2, err2171 := (strconv.Atoi(flag.Arg(3)))
    if err2171 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    fmt.Print(client.AddSceneValueInt32(value0, value1, value2))
    fmt.Print("\n")
    break
  case "AddSceneValue_Int16":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "AddSceneValueInt16 requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2172 := (strconv.Atoi(flag.Arg(1)))
    if err2172 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2173 := flag.Arg(2)
    mbTrans2174 := thrift.NewTMemoryBufferLen(len(arg2173))
    defer mbTrans2174.Close()
    _, err2175 := mbTrans2174.WriteString(arg2173)
    if err2175 != nil {
      Usage()
      return
    }
    factory2176 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2177 := factory2176.GetProtocol(mbTrans2174)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2178 := argvalue1.Read(jsProt2177)
    if err2178 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    tmp2, err2179 := (strconv.Atoi(flag.Arg(3)))
    if err2179 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    fmt.Print(client.AddSceneValueInt16(value0, value1, value2))
    fmt.Print("\n")
    break
  case "AddSceneValue_String":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "AddSceneValueString requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2180 := (strconv.Atoi(flag.Arg(1)))
    if err2180 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2181 := flag.Arg(2)
    mbTrans2182 := thrift.NewTMemoryBufferLen(len(arg2181))
    defer mbTrans2182.Close()
    _, err2183 := mbTrans2182.WriteString(arg2181)
    if err2183 != nil {
      Usage()
      return
    }
    factory2184 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2185 := factory2184.GetProtocol(mbTrans2182)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2186 := argvalue1.Read(jsProt2185)
    if err2186 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.AddSceneValueString(value0, value1, value2))
    fmt.Print("\n")
    break
  case "AddSceneValueListSelection_String":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "AddSceneValueListSelectionString requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2188 := (strconv.Atoi(flag.Arg(1)))
    if err2188 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2189 := flag.Arg(2)
    mbTrans2190 := thrift.NewTMemoryBufferLen(len(arg2189))
    defer mbTrans2190.Close()
    _, err2191 := mbTrans2190.WriteString(arg2189)
    if err2191 != nil {
      Usage()
      return
    }
    factory2192 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2193 := factory2192.GetProtocol(mbTrans2190)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2194 := argvalue1.Read(jsProt2193)
    if err2194 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.AddSceneValueListSelectionString(value0, value1, value2))
    fmt.Print("\n")
    break
  case "AddSceneValueListSelection_Int32":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "AddSceneValueListSelectionInt32 requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2196 := (strconv.Atoi(flag.Arg(1)))
    if err2196 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2197 := flag.Arg(2)
    mbTrans2198 := thrift.NewTMemoryBufferLen(len(arg2197))
    defer mbTrans2198.Close()
    _, err2199 := mbTrans2198.WriteString(arg2197)
    if err2199 != nil {
      Usage()
      return
    }
    factory2200 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2201 := factory2200.GetProtocol(mbTrans2198)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2202 := argvalue1.Read(jsProt2201)
    if err2202 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    tmp2, err2203 := (strconv.Atoi(flag.Arg(3)))
    if err2203 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    fmt.Print(client.AddSceneValueListSelectionInt32(value0, value1, value2))
    fmt.Print("\n")
    break
  case "RemoveSceneValue":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "RemoveSceneValue requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2204 := (strconv.Atoi(flag.Arg(1)))
    if err2204 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2205 := flag.Arg(2)
    mbTrans2206 := thrift.NewTMemoryBufferLen(len(arg2205))
    defer mbTrans2206.Close()
    _, err2207 := mbTrans2206.WriteString(arg2205)
    if err2207 != nil {
      Usage()
      return
    }
    factory2208 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2209 := factory2208.GetProtocol(mbTrans2206)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2210 := argvalue1.Read(jsProt2209)
    if err2210 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.RemoveSceneValue(value0, value1))
    fmt.Print("\n")
    break
  case "SceneGetValues":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "SceneGetValues requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2211 := (strconv.Atoi(flag.Arg(1)))
    if err2211 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    fmt.Print(client.SceneGetValues(value0))
    fmt.Print("\n")
    break
  case "SceneGetValueAsBool":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SceneGetValueAsBool requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2212 := (strconv.Atoi(flag.Arg(1)))
    if err2212 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2213 := flag.Arg(2)
    mbTrans2214 := thrift.NewTMemoryBufferLen(len(arg2213))
    defer mbTrans2214.Close()
    _, err2215 := mbTrans2214.WriteString(arg2213)
    if err2215 != nil {
      Usage()
      return
    }
    factory2216 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2217 := factory2216.GetProtocol(mbTrans2214)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2218 := argvalue1.Read(jsProt2217)
    if err2218 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SceneGetValueAsBool(value0, value1))
    fmt.Print("\n")
    break
  case "SceneGetValueAsByte":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SceneGetValueAsByte requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2219 := (strconv.Atoi(flag.Arg(1)))
    if err2219 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2220 := flag.Arg(2)
    mbTrans2221 := thrift.NewTMemoryBufferLen(len(arg2220))
    defer mbTrans2221.Close()
    _, err2222 := mbTrans2221.WriteString(arg2220)
    if err2222 != nil {
      Usage()
      return
    }
    factory2223 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2224 := factory2223.GetProtocol(mbTrans2221)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2225 := argvalue1.Read(jsProt2224)
    if err2225 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SceneGetValueAsByte(value0, value1))
    fmt.Print("\n")
    break
  case "SceneGetValueAsFloat":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SceneGetValueAsFloat requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2226 := (strconv.Atoi(flag.Arg(1)))
    if err2226 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2227 := flag.Arg(2)
    mbTrans2228 := thrift.NewTMemoryBufferLen(len(arg2227))
    defer mbTrans2228.Close()
    _, err2229 := mbTrans2228.WriteString(arg2227)
    if err2229 != nil {
      Usage()
      return
    }
    factory2230 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2231 := factory2230.GetProtocol(mbTrans2228)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2232 := argvalue1.Read(jsProt2231)
    if err2232 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SceneGetValueAsFloat(value0, value1))
    fmt.Print("\n")
    break
  case "SceneGetValueAsInt":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SceneGetValueAsInt requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2233 := (strconv.Atoi(flag.Arg(1)))
    if err2233 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2234 := flag.Arg(2)
    mbTrans2235 := thrift.NewTMemoryBufferLen(len(arg2234))
    defer mbTrans2235.Close()
    _, err2236 := mbTrans2235.WriteString(arg2234)
    if err2236 != nil {
      Usage()
      return
    }
    factory2237 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2238 := factory2237.GetProtocol(mbTrans2235)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2239 := argvalue1.Read(jsProt2238)
    if err2239 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SceneGetValueAsInt(value0, value1))
    fmt.Print("\n")
    break
  case "SceneGetValueAsShort":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SceneGetValueAsShort requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2240 := (strconv.Atoi(flag.Arg(1)))
    if err2240 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2241 := flag.Arg(2)
    mbTrans2242 := thrift.NewTMemoryBufferLen(len(arg2241))
    defer mbTrans2242.Close()
    _, err2243 := mbTrans2242.WriteString(arg2241)
    if err2243 != nil {
      Usage()
      return
    }
    factory2244 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2245 := factory2244.GetProtocol(mbTrans2242)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2246 := argvalue1.Read(jsProt2245)
    if err2246 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SceneGetValueAsShort(value0, value1))
    fmt.Print("\n")
    break
  case "SceneGetValueAsString":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SceneGetValueAsString requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2247 := (strconv.Atoi(flag.Arg(1)))
    if err2247 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2248 := flag.Arg(2)
    mbTrans2249 := thrift.NewTMemoryBufferLen(len(arg2248))
    defer mbTrans2249.Close()
    _, err2250 := mbTrans2249.WriteString(arg2248)
    if err2250 != nil {
      Usage()
      return
    }
    factory2251 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2252 := factory2251.GetProtocol(mbTrans2249)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2253 := argvalue1.Read(jsProt2252)
    if err2253 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SceneGetValueAsString(value0, value1))
    fmt.Print("\n")
    break
  case "SceneGetValueListSelection_String":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SceneGetValueListSelectionString requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2254 := (strconv.Atoi(flag.Arg(1)))
    if err2254 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2255 := flag.Arg(2)
    mbTrans2256 := thrift.NewTMemoryBufferLen(len(arg2255))
    defer mbTrans2256.Close()
    _, err2257 := mbTrans2256.WriteString(arg2255)
    if err2257 != nil {
      Usage()
      return
    }
    factory2258 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2259 := factory2258.GetProtocol(mbTrans2256)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2260 := argvalue1.Read(jsProt2259)
    if err2260 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SceneGetValueListSelectionString(value0, value1))
    fmt.Print("\n")
    break
  case "SceneGetValueListSelection_Int32":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SceneGetValueListSelectionInt32 requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2261 := (strconv.Atoi(flag.Arg(1)))
    if err2261 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2262 := flag.Arg(2)
    mbTrans2263 := thrift.NewTMemoryBufferLen(len(arg2262))
    defer mbTrans2263.Close()
    _, err2264 := mbTrans2263.WriteString(arg2262)
    if err2264 != nil {
      Usage()
      return
    }
    factory2265 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2266 := factory2265.GetProtocol(mbTrans2263)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2267 := argvalue1.Read(jsProt2266)
    if err2267 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SceneGetValueListSelectionInt32(value0, value1))
    fmt.Print("\n")
    break
  case "SetSceneValue_Bool":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetSceneValueBool requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2268 := (strconv.Atoi(flag.Arg(1)))
    if err2268 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2269 := flag.Arg(2)
    mbTrans2270 := thrift.NewTMemoryBufferLen(len(arg2269))
    defer mbTrans2270.Close()
    _, err2271 := mbTrans2270.WriteString(arg2269)
    if err2271 != nil {
      Usage()
      return
    }
    factory2272 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2273 := factory2272.GetProtocol(mbTrans2270)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2274 := argvalue1.Read(jsProt2273)
    if err2274 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := flag.Arg(3) == "true"
    value2 := argvalue2
    fmt.Print(client.SetSceneValueBool(value0, value1, value2))
    fmt.Print("\n")
    break
  case "SetSceneValue_Uint8":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetSceneValueUint8 requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2276 := (strconv.Atoi(flag.Arg(1)))
    if err2276 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2277 := flag.Arg(2)
    mbTrans2278 := thrift.NewTMemoryBufferLen(len(arg2277))
    defer mbTrans2278.Close()
    _, err2279 := mbTrans2278.WriteString(arg2277)
    if err2279 != nil {
      Usage()
      return
    }
    factory2280 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2281 := factory2280.GetProtocol(mbTrans2278)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2282 := argvalue1.Read(jsProt2281)
    if err2282 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    tmp2, err2283 := (strconv.Atoi(flag.Arg(3)))
    if err2283 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    fmt.Print(client.SetSceneValueUint8(value0, value1, value2))
    fmt.Print("\n")
    break
  case "SetSceneValue_Float":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetSceneValueFloat requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2284 := (strconv.Atoi(flag.Arg(1)))
    if err2284 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2285 := flag.Arg(2)
    mbTrans2286 := thrift.NewTMemoryBufferLen(len(arg2285))
    defer mbTrans2286.Close()
    _, err2287 := mbTrans2286.WriteString(arg2285)
    if err2287 != nil {
      Usage()
      return
    }
    factory2288 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2289 := factory2288.GetProtocol(mbTrans2286)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2290 := argvalue1.Read(jsProt2289)
    if err2290 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2, err2291 := (strconv.Atof64(flag.Arg(3)))
    if err2291 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.SetSceneValueFloat(value0, value1, value2))
    fmt.Print("\n")
    break
  case "SetSceneValue_Int32":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetSceneValueInt32 requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2292 := (strconv.Atoi(flag.Arg(1)))
    if err2292 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2293 := flag.Arg(2)
    mbTrans2294 := thrift.NewTMemoryBufferLen(len(arg2293))
    defer mbTrans2294.Close()
    _, err2295 := mbTrans2294.WriteString(arg2293)
    if err2295 != nil {
      Usage()
      return
    }
    factory2296 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2297 := factory2296.GetProtocol(mbTrans2294)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2298 := argvalue1.Read(jsProt2297)
    if err2298 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    tmp2, err2299 := (strconv.Atoi(flag.Arg(3)))
    if err2299 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    fmt.Print(client.SetSceneValueInt32(value0, value1, value2))
    fmt.Print("\n")
    break
  case "SetSceneValue_Int16":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetSceneValueInt16 requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2300 := (strconv.Atoi(flag.Arg(1)))
    if err2300 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2301 := flag.Arg(2)
    mbTrans2302 := thrift.NewTMemoryBufferLen(len(arg2301))
    defer mbTrans2302.Close()
    _, err2303 := mbTrans2302.WriteString(arg2301)
    if err2303 != nil {
      Usage()
      return
    }
    factory2304 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2305 := factory2304.GetProtocol(mbTrans2302)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2306 := argvalue1.Read(jsProt2305)
    if err2306 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    tmp2, err2307 := (strconv.Atoi(flag.Arg(3)))
    if err2307 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    fmt.Print(client.SetSceneValueInt16(value0, value1, value2))
    fmt.Print("\n")
    break
  case "SetSceneValue_String":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetSceneValueString requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2308 := (strconv.Atoi(flag.Arg(1)))
    if err2308 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2309 := flag.Arg(2)
    mbTrans2310 := thrift.NewTMemoryBufferLen(len(arg2309))
    defer mbTrans2310.Close()
    _, err2311 := mbTrans2310.WriteString(arg2309)
    if err2311 != nil {
      Usage()
      return
    }
    factory2312 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2313 := factory2312.GetProtocol(mbTrans2310)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2314 := argvalue1.Read(jsProt2313)
    if err2314 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.SetSceneValueString(value0, value1, value2))
    fmt.Print("\n")
    break
  case "SetSceneValueListSelection_String":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetSceneValueListSelectionString requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2316 := (strconv.Atoi(flag.Arg(1)))
    if err2316 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2317 := flag.Arg(2)
    mbTrans2318 := thrift.NewTMemoryBufferLen(len(arg2317))
    defer mbTrans2318.Close()
    _, err2319 := mbTrans2318.WriteString(arg2317)
    if err2319 != nil {
      Usage()
      return
    }
    factory2320 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2321 := factory2320.GetProtocol(mbTrans2318)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2322 := argvalue1.Read(jsProt2321)
    if err2322 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.SetSceneValueListSelectionString(value0, value1, value2))
    fmt.Print("\n")
    break
  case "SetSceneValueListSelection_Int32":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetSceneValueListSelectionInt32 requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2324 := (strconv.Atoi(flag.Arg(1)))
    if err2324 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2325 := flag.Arg(2)
    mbTrans2326 := thrift.NewTMemoryBufferLen(len(arg2325))
    defer mbTrans2326.Close()
    _, err2327 := mbTrans2326.WriteString(arg2325)
    if err2327 != nil {
      Usage()
      return
    }
    factory2328 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2329 := factory2328.GetProtocol(mbTrans2326)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2330 := argvalue1.Read(jsProt2329)
    if err2330 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    tmp2, err2331 := (strconv.Atoi(flag.Arg(3)))
    if err2331 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    fmt.Print(client.SetSceneValueListSelectionInt32(value0, value1, value2))
    fmt.Print("\n")
    break
  case "GetSceneLabel":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetSceneLabel requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2332 := (strconv.Atoi(flag.Arg(1)))
    if err2332 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetSceneLabel(value0))
    fmt.Print("\n")
    break
  case "SetSceneLabel":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetSceneLabel requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2333 := (strconv.Atoi(flag.Arg(1)))
    if err2333 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.SetSceneLabel(value0, value1))
    fmt.Print("\n")
    break
  case "SceneExists":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "SceneExists requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2335 := (strconv.Atoi(flag.Arg(1)))
    if err2335 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    fmt.Print(client.SceneExists(value0))
    fmt.Print("\n")
    break
  case "ActivateScene":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "ActivateScene requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2336 := (strconv.Atoi(flag.Arg(1)))
    if err2336 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    fmt.Print(client.ActivateScene(value0))
    fmt.Print("\n")
    break
  case "SendAllValues":
    if flag.NArg() - 1 != 0 {
      fmt.Fprint(os.Stderr, "SendAllValues requires 0 args\n")
      flag.Usage()
    }
    fmt.Print(client.SendAllValues())
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprint(os.Stderr, "Invalid function ", cmd, "\n")
  }
}
