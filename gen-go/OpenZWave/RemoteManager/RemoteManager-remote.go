/* Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package main

import (
        "flag"
        "fmt"
        "http"
        "net"
        "os"
        "strconv"
        "thrift"
        "thriftlib/OpenZWave"
)

func Usage() {
  fmt.Fprint(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:\n")
  flag.PrintDefaults()
  fmt.Fprint(os.Stderr, "Functions:\n")
  fmt.Fprint(os.Stderr, "  WriteConfig(_homeId int32) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetControllerNodeId(_homeId int32) (retval1633 byte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsPrimaryController(_homeId int32) (retval1634 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsStaticUpdateController(_homeId int32) (retval1635 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsBridgeController(_homeId int32) (retval1636 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetLibraryVersion(_homeId int32) (retval1637 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetLibraryTypeName(_homeId int32) (retval1638 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetSendQueueCount(_homeId int32) (retval1639 int32, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetPollInterval() (retval1640 int32, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetPollInterval(_seconds int32) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  EnablePoll(_valueId *RemoteValueID) (retval1642 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  DisablePoll(_valueId *RemoteValueID) (retval1643 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  isPolled(_valueId *RemoteValueID) (retval1644 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  RefreshNodeInfo(_homeId int32, _nodeId byte) (retval1645 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  RequestNodeState(_homeId int32, _nodeId byte) (retval1646 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  RequestNodeDynamic(_homeId int32, _nodeId byte) (retval1647 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsNodeListeningDevice(_homeId int32, _nodeId byte) (retval1648 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsNodeRoutingDevice(_homeId int32, _nodeId byte) (retval1649 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeMaxBaudRate(_homeId int32, _nodeId byte) (retval1650 int32, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeVersion(_homeId int32, _nodeId byte) (retval1651 byte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeSecurity(_homeId int32, _nodeId byte) (retval1652 byte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeBasic(_homeId int32, _nodeId byte) (retval1653 byte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeGeneric(_homeId int32, _nodeId byte) (retval1654 byte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeSpecific(_homeId int32, _nodeId byte) (retval1655 byte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeType(_homeId int32, _nodeId byte) (retval1656 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeNeighbors(_homeId int32, _nodeId byte) (retval1657 *UInt32ListByte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeManufacturerName(_homeId int32, _nodeId byte) (retval1658 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeProductName(_homeId int32, _nodeId byte) (retval1659 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeName(_homeId int32, _nodeId byte) (retval1660 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeLocation(_homeId int32, _nodeId byte) (retval1661 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeManufacturerId(_homeId int32, _nodeId byte) (retval1662 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeProductType(_homeId int32, _nodeId byte) (retval1663 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeProductId(_homeId int32, _nodeId byte) (retval1664 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetNodeManufacturerName(_homeId int32, _nodeId byte, _manufacturerName string) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetNodeProductName(_homeId int32, _nodeId byte, _productName string) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetNodeName(_homeId int32, _nodeId byte, _nodeName string) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetNodeLocation(_homeId int32, _nodeId byte, _location string) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetNodeOn(_homeId int32, _nodeId byte) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetNodeOff(_homeId int32, _nodeId byte) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetNodeLevel(_homeId int32, _nodeId byte, _level byte) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsNodeInfoReceived(_homeId int32, _nodeId byte) (retval1672 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeClassInformation(_homeId int32, _nodeId byte, _commandClassId byte) (retval1673 *BoolGetNodeClassInformation, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueLabel(_id *RemoteValueID) (retval1674 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetValueLabel(_id *RemoteValueID, _value string) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueUnits(_id *RemoteValueID) (retval1676 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetValueUnits(_id *RemoteValueID, _value string) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueHelp(_id *RemoteValueID) (retval1678 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetValueHelp(_id *RemoteValueID, _value string) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueMin(_id *RemoteValueID) (retval1680 int32, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueMax(_id *RemoteValueID) (retval1681 int32, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsValueReadOnly(_id *RemoteValueID) (retval1682 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsValueWriteOnly(_id *RemoteValueID) (retval1683 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsValueSet(_id *RemoteValueID) (retval1684 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueAsBool(_id *RemoteValueID) (retval1685 *BoolBool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueAsByte(_id *RemoteValueID) (retval1686 *BoolUInt8, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueAsFloat(_id *RemoteValueID) (retval1687 *BoolFloat, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueAsInt(_id *RemoteValueID) (retval1688 *BoolInt, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueAsShort(_id *RemoteValueID) (retval1689 *BoolInt16, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueAsString(_id *RemoteValueID) (retval1690 *BoolString, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueListSelection_String(_id *RemoteValueID) (retval1691 *BoolString, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueListSelection_Int32(_id *RemoteValueID) (retval1692 *BoolInt, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueListItems(_id *RemoteValueID) (retval1693 *BoolListString, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueFloatPrecision(_id *RemoteValueID) (retval1694 *BoolUInt8, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetValue_Bool(_id *RemoteValueID, _value bool) (retval1695 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetValue_UInt8(_id *RemoteValueID, _value byte) (retval1696 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetValue_Float(_id *RemoteValueID, _value float64) (retval1697 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetValue_Int32(_id *RemoteValueID, _value int32) (retval1698 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetValue_Int16(_id *RemoteValueID, _value int16) (retval1699 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetValue_String(_id *RemoteValueID, _value string) (retval1700 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetValueListSelection(_id *RemoteValueID, _selectedItem string) (retval1701 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  PressButton(_id *RemoteValueID) (retval1702 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  ReleaseButton(_id *RemoteValueID) (retval1703 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNumSwitchPoints(_id *RemoteValueID) (retval1704 byte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetSwitchPoint(_id *RemoteValueID, _hours byte, _minutes byte, _setback byte) (retval1705 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  RemoveSwitchPoint(_id *RemoteValueID, _hours byte, _minutes byte) (retval1706 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  ClearSwitchPoints(_id *RemoteValueID) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetSwitchPoint(_id *RemoteValueID, _idx byte) (retval1708 *GetSwitchPointReturnStruct, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SwitchAllOn(_homeId int32) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SwitchAllOff(_homeId int32) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetConfigParam(_homeId int32, _nodeId byte, _param byte, _value int32, _size byte) (retval1711 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  RequestConfigParam(_homeId int32, _nodeId byte, _param byte) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  RequestAllConfigParams(_homeId int32, _nodeId byte) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNumGroups(_homeId int32, _nodeId byte) (retval1714 byte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetAssociations(_homeId int32, _nodeId byte, _groupIdx byte) (retval1715 *GetAssociationsReturnStruct, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetMaxAssociations(_homeId int32, _nodeId byte, _groupIdx byte) (retval1716 byte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetGroupLabel(_homeId int32, _nodeId byte, _groupIdx byte) (retval1717 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  AddAssociation(_homeId int32, _nodeId byte, _groupIdx byte, _targetNodeId byte) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  RemoveAssociation(_homeId int32, _nodeId byte, _groupIdx byte, _targetNodeId byte) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  ResetController(_homeId int32) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SoftReset(_homeId int32) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNumScenes() (retval1722 byte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetAllScenes() (retval1723 *GetAllScenesReturnStruct, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  CreateScene() (retval1724 byte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  RemoveScene(_sceneId byte) (retval1725 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  AddSceneValue_Bool(_sceneId byte, _valueId *RemoteValueID, _value bool) (retval1726 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  AddSceneValue_Uint8(_sceneId byte, _valueId *RemoteValueID, _value byte) (retval1727 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  AddSceneValue_Float(_sceneId byte, _valueId *RemoteValueID, _value float64) (retval1728 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  AddSceneValue_Int32(_sceneId byte, _valueId *RemoteValueID, _value int32) (retval1729 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  AddSceneValue_Int16(_sceneId byte, _valueId *RemoteValueID, _value int16) (retval1730 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  AddSceneValue_String(_sceneId byte, _valueId *RemoteValueID, _value string) (retval1731 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  AddSceneValueListSelection_String(_sceneId byte, _valueId *RemoteValueID, _value string) (retval1732 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  AddSceneValueListSelection_Int32(_sceneId byte, _valueId *RemoteValueID, _value int32) (retval1733 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  RemoveSceneValue(_sceneId byte, _valueId *RemoteValueID) (retval1734 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SceneGetValues(_sceneId byte) (retval1735 *SceneGetValuesReturnStruct, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SceneGetValueAsBool(_sceneId byte, _valueId *RemoteValueID) (retval1736 *BoolBool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SceneGetValueAsByte(_sceneId byte, _valueId *RemoteValueID) (retval1737 *BoolUInt8, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SceneGetValueAsFloat(_sceneId byte, _valueId *RemoteValueID) (retval1738 *BoolFloat, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SceneGetValueAsInt(_sceneId byte, _valueId *RemoteValueID) (retval1739 *BoolInt, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SceneGetValueAsShort(_sceneId byte, _valueId *RemoteValueID) (retval1740 *BoolInt16, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SceneGetValueAsString(_sceneId byte, _valueId *RemoteValueID) (retval1741 *BoolString, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SceneGetValueListSelection_String(_sceneId byte, _valueId *RemoteValueID) (retval1742 *BoolString, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SceneGetValueListSelection_Int32(_sceneId byte, _valueId *RemoteValueID) (retval1743 *BoolInt, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetSceneValue_Bool(_sceneId byte, _valueId *RemoteValueID, _value bool) (retval1744 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetSceneValue_Uint8(_sceneId byte, _valueId *RemoteValueID, _value byte) (retval1745 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetSceneValue_Float(_sceneId byte, _valueId *RemoteValueID, _value float64) (retval1746 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetSceneValue_Int32(_sceneId byte, _valueId *RemoteValueID, _value int32) (retval1747 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetSceneValue_Int16(_sceneId byte, _valueId *RemoteValueID, _value int16) (retval1748 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetSceneValue_String(_sceneId byte, _valueId *RemoteValueID, _value string) (retval1749 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetSceneValueListSelection_String(_sceneId byte, _valueId *RemoteValueID, _value string) (retval1750 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetSceneValueListSelection_Int32(_sceneId byte, _valueId *RemoteValueID, _value int32) (retval1751 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetSceneLabel(_sceneId byte) (retval1752 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetSceneLabel(_sceneId byte, _value string) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SceneExists(_sceneId byte) (retval1754 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  ActivateScene(_sceneId byte) (retval1755 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SendAllValues() (err os.Error)\n")
  fmt.Fprint(os.Stderr, "\n")
  os.Exit(0)
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  var help bool
  var url http.URL
  var trans thrift.TTransport
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.BoolVar(&help, "help", false, "See usage string")
  flag.Parse()
  if help || flag.NArg() == 0 {
    flag.Usage()
  }
  
  if len(urlString) > 0 {
    url, err := http.ParseURL(urlString)
    if err != nil {
      fmt.Fprint(os.Stderr, "Error parsing URL: ", err.String(), "\n")
      flag.Usage()
    }
    host = url.Host
    useHttp = len(url.Scheme) <= 0 || url.Scheme == "http"
  } else if useHttp {
    _, err := http.ParseURL(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprint(os.Stderr, "Error parsing URL: ", err.String(), "\n")
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err os.Error
  if useHttp {
    trans, err = thrift.NewTHttpClient(url.Raw)
  } else {
    addr, err := net.ResolveTCPAddr("tcp", fmt.Sprint(host, ":", port))
    if err != nil {
      fmt.Fprint(os.Stderr, "Error resolving address", err.String())
      os.Exit(1)
    }
    trans, err = thrift.NewTNonblockingSocketAddr(addr)
    if framed {
      trans = thrift.NewTFramedTransport(trans)
    }
  }
  if err != nil {
    fmt.Fprint(os.Stderr, "Error creating transport", err.String())
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactory()
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
    break
  default:
    fmt.Fprint(os.Stderr, "Invalid protocol specified: ", protocol, "\n")
    Usage()
    os.Exit(1)
  }
  client := OpenZWave.NewRemoteManagerClientFactory(trans, protocolFactory)
  if err = trans.Open(); err != nil {
    fmt.Fprint(os.Stderr, "Error opening socket to ", host, ":", port, " ", err.String())
    os.Exit(1)
  }
  
  switch cmd {
  case "WriteConfig":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "WriteConfig requires 1 args\n")
      flag.Usage()
    }
    tmp0, err1757 := (strconv.Atoi(flag.Arg(1)))
    if err1757 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.WriteConfig(value0))
    fmt.Print("\n")
    break
  case "GetControllerNodeId":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetControllerNodeId requires 1 args\n")
      flag.Usage()
    }
    tmp0, err1758 := (strconv.Atoi(flag.Arg(1)))
    if err1758 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetControllerNodeId(value0))
    fmt.Print("\n")
    break
  case "IsPrimaryController":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "IsPrimaryController requires 1 args\n")
      flag.Usage()
    }
    tmp0, err1759 := (strconv.Atoi(flag.Arg(1)))
    if err1759 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.IsPrimaryController(value0))
    fmt.Print("\n")
    break
  case "IsStaticUpdateController":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "IsStaticUpdateController requires 1 args\n")
      flag.Usage()
    }
    tmp0, err1760 := (strconv.Atoi(flag.Arg(1)))
    if err1760 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.IsStaticUpdateController(value0))
    fmt.Print("\n")
    break
  case "IsBridgeController":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "IsBridgeController requires 1 args\n")
      flag.Usage()
    }
    tmp0, err1761 := (strconv.Atoi(flag.Arg(1)))
    if err1761 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.IsBridgeController(value0))
    fmt.Print("\n")
    break
  case "GetLibraryVersion":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetLibraryVersion requires 1 args\n")
      flag.Usage()
    }
    tmp0, err1762 := (strconv.Atoi(flag.Arg(1)))
    if err1762 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetLibraryVersion(value0))
    fmt.Print("\n")
    break
  case "GetLibraryTypeName":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetLibraryTypeName requires 1 args\n")
      flag.Usage()
    }
    tmp0, err1763 := (strconv.Atoi(flag.Arg(1)))
    if err1763 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetLibraryTypeName(value0))
    fmt.Print("\n")
    break
  case "GetSendQueueCount":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetSendQueueCount requires 1 args\n")
      flag.Usage()
    }
    tmp0, err1764 := (strconv.Atoi(flag.Arg(1)))
    if err1764 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetSendQueueCount(value0))
    fmt.Print("\n")
    break
  case "GetPollInterval":
    if flag.NArg() - 1 != 0 {
      fmt.Fprint(os.Stderr, "GetPollInterval requires 0 args\n")
      flag.Usage()
    }
    fmt.Print(client.GetPollInterval())
    fmt.Print("\n")
    break
  case "SetPollInterval":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "SetPollInterval requires 1 args\n")
      flag.Usage()
    }
    tmp0, err1765 := (strconv.Atoi(flag.Arg(1)))
    if err1765 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.SetPollInterval(value0))
    fmt.Print("\n")
    break
  case "EnablePoll":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "EnablePoll requires 1 args\n")
      flag.Usage()
    }
    arg1766 := flag.Arg(1)
    mbTrans1767 := thrift.NewTMemoryBufferLen(len(arg1766))
    defer mbTrans1767.Close()
    _, err1768 := mbTrans1767.WriteString(arg1766)
    if err1768 != nil {
      Usage()
      return
    }
    factory1769 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1770 := factory1769.GetProtocol(mbTrans1767)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err1771 := argvalue0.Read(jsProt1770)
    if err1771 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.EnablePoll(value0))
    fmt.Print("\n")
    break
  case "DisablePoll":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "DisablePoll requires 1 args\n")
      flag.Usage()
    }
    arg1772 := flag.Arg(1)
    mbTrans1773 := thrift.NewTMemoryBufferLen(len(arg1772))
    defer mbTrans1773.Close()
    _, err1774 := mbTrans1773.WriteString(arg1772)
    if err1774 != nil {
      Usage()
      return
    }
    factory1775 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1776 := factory1775.GetProtocol(mbTrans1773)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err1777 := argvalue0.Read(jsProt1776)
    if err1777 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DisablePoll(value0))
    fmt.Print("\n")
    break
  case "isPolled":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "IsPolled requires 1 args\n")
      flag.Usage()
    }
    arg1778 := flag.Arg(1)
    mbTrans1779 := thrift.NewTMemoryBufferLen(len(arg1778))
    defer mbTrans1779.Close()
    _, err1780 := mbTrans1779.WriteString(arg1778)
    if err1780 != nil {
      Usage()
      return
    }
    factory1781 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1782 := factory1781.GetProtocol(mbTrans1779)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err1783 := argvalue0.Read(jsProt1782)
    if err1783 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.IsPolled(value0))
    fmt.Print("\n")
    break
  case "RefreshNodeInfo":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "RefreshNodeInfo requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1784 := (strconv.Atoi(flag.Arg(1)))
    if err1784 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1785 := (strconv.Atoi(flag.Arg(2)))
    if err1785 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.RefreshNodeInfo(value0, value1))
    fmt.Print("\n")
    break
  case "RequestNodeState":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "RequestNodeState requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1786 := (strconv.Atoi(flag.Arg(1)))
    if err1786 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1787 := (strconv.Atoi(flag.Arg(2)))
    if err1787 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.RequestNodeState(value0, value1))
    fmt.Print("\n")
    break
  case "RequestNodeDynamic":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "RequestNodeDynamic requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1788 := (strconv.Atoi(flag.Arg(1)))
    if err1788 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1789 := (strconv.Atoi(flag.Arg(2)))
    if err1789 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.RequestNodeDynamic(value0, value1))
    fmt.Print("\n")
    break
  case "IsNodeListeningDevice":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "IsNodeListeningDevice requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1790 := (strconv.Atoi(flag.Arg(1)))
    if err1790 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1791 := (strconv.Atoi(flag.Arg(2)))
    if err1791 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.IsNodeListeningDevice(value0, value1))
    fmt.Print("\n")
    break
  case "IsNodeRoutingDevice":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "IsNodeRoutingDevice requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1792 := (strconv.Atoi(flag.Arg(1)))
    if err1792 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1793 := (strconv.Atoi(flag.Arg(2)))
    if err1793 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.IsNodeRoutingDevice(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeMaxBaudRate":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeMaxBaudRate requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1794 := (strconv.Atoi(flag.Arg(1)))
    if err1794 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1795 := (strconv.Atoi(flag.Arg(2)))
    if err1795 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeMaxBaudRate(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeVersion":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeVersion requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1796 := (strconv.Atoi(flag.Arg(1)))
    if err1796 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1797 := (strconv.Atoi(flag.Arg(2)))
    if err1797 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeVersion(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeSecurity":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeSecurity requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1798 := (strconv.Atoi(flag.Arg(1)))
    if err1798 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1799 := (strconv.Atoi(flag.Arg(2)))
    if err1799 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeSecurity(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeBasic":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeBasic requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1800 := (strconv.Atoi(flag.Arg(1)))
    if err1800 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1801 := (strconv.Atoi(flag.Arg(2)))
    if err1801 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeBasic(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeGeneric":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeGeneric requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1802 := (strconv.Atoi(flag.Arg(1)))
    if err1802 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1803 := (strconv.Atoi(flag.Arg(2)))
    if err1803 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeGeneric(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeSpecific":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeSpecific requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1804 := (strconv.Atoi(flag.Arg(1)))
    if err1804 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1805 := (strconv.Atoi(flag.Arg(2)))
    if err1805 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeSpecific(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeType":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeType requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1806 := (strconv.Atoi(flag.Arg(1)))
    if err1806 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1807 := (strconv.Atoi(flag.Arg(2)))
    if err1807 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeType(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeNeighbors":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeNeighbors requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1808 := (strconv.Atoi(flag.Arg(1)))
    if err1808 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1809 := (strconv.Atoi(flag.Arg(2)))
    if err1809 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeNeighbors(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeManufacturerName":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeManufacturerName requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1810 := (strconv.Atoi(flag.Arg(1)))
    if err1810 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1811 := (strconv.Atoi(flag.Arg(2)))
    if err1811 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeManufacturerName(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeProductName":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeProductName requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1812 := (strconv.Atoi(flag.Arg(1)))
    if err1812 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1813 := (strconv.Atoi(flag.Arg(2)))
    if err1813 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeProductName(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeName":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeName requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1814 := (strconv.Atoi(flag.Arg(1)))
    if err1814 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1815 := (strconv.Atoi(flag.Arg(2)))
    if err1815 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeName(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeLocation":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeLocation requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1816 := (strconv.Atoi(flag.Arg(1)))
    if err1816 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1817 := (strconv.Atoi(flag.Arg(2)))
    if err1817 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeLocation(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeManufacturerId":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeManufacturerId requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1818 := (strconv.Atoi(flag.Arg(1)))
    if err1818 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1819 := (strconv.Atoi(flag.Arg(2)))
    if err1819 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeManufacturerId(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeProductType":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeProductType requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1820 := (strconv.Atoi(flag.Arg(1)))
    if err1820 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1821 := (strconv.Atoi(flag.Arg(2)))
    if err1821 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeProductType(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeProductId":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeProductId requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1822 := (strconv.Atoi(flag.Arg(1)))
    if err1822 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1823 := (strconv.Atoi(flag.Arg(2)))
    if err1823 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeProductId(value0, value1))
    fmt.Print("\n")
    break
  case "SetNodeManufacturerName":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetNodeManufacturerName requires 3 args\n")
      flag.Usage()
    }
    tmp0, err1824 := (strconv.Atoi(flag.Arg(1)))
    if err1824 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1825 := (strconv.Atoi(flag.Arg(2)))
    if err1825 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.SetNodeManufacturerName(value0, value1, value2))
    fmt.Print("\n")
    break
  case "SetNodeProductName":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetNodeProductName requires 3 args\n")
      flag.Usage()
    }
    tmp0, err1827 := (strconv.Atoi(flag.Arg(1)))
    if err1827 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1828 := (strconv.Atoi(flag.Arg(2)))
    if err1828 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.SetNodeProductName(value0, value1, value2))
    fmt.Print("\n")
    break
  case "SetNodeName":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetNodeName requires 3 args\n")
      flag.Usage()
    }
    tmp0, err1830 := (strconv.Atoi(flag.Arg(1)))
    if err1830 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1831 := (strconv.Atoi(flag.Arg(2)))
    if err1831 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.SetNodeName(value0, value1, value2))
    fmt.Print("\n")
    break
  case "SetNodeLocation":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetNodeLocation requires 3 args\n")
      flag.Usage()
    }
    tmp0, err1833 := (strconv.Atoi(flag.Arg(1)))
    if err1833 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1834 := (strconv.Atoi(flag.Arg(2)))
    if err1834 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.SetNodeLocation(value0, value1, value2))
    fmt.Print("\n")
    break
  case "SetNodeOn":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetNodeOn requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1836 := (strconv.Atoi(flag.Arg(1)))
    if err1836 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1837 := (strconv.Atoi(flag.Arg(2)))
    if err1837 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.SetNodeOn(value0, value1))
    fmt.Print("\n")
    break
  case "SetNodeOff":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetNodeOff requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1838 := (strconv.Atoi(flag.Arg(1)))
    if err1838 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1839 := (strconv.Atoi(flag.Arg(2)))
    if err1839 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.SetNodeOff(value0, value1))
    fmt.Print("\n")
    break
  case "SetNodeLevel":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetNodeLevel requires 3 args\n")
      flag.Usage()
    }
    tmp0, err1840 := (strconv.Atoi(flag.Arg(1)))
    if err1840 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1841 := (strconv.Atoi(flag.Arg(2)))
    if err1841 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    tmp2, err1842 := (strconv.Atoi(flag.Arg(3)))
    if err1842 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    fmt.Print(client.SetNodeLevel(value0, value1, value2))
    fmt.Print("\n")
    break
  case "IsNodeInfoReceived":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "IsNodeInfoReceived requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1843 := (strconv.Atoi(flag.Arg(1)))
    if err1843 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1844 := (strconv.Atoi(flag.Arg(2)))
    if err1844 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.IsNodeInfoReceived(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeClassInformation":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "GetNodeClassInformation requires 3 args\n")
      flag.Usage()
    }
    tmp0, err1845 := (strconv.Atoi(flag.Arg(1)))
    if err1845 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1846 := (strconv.Atoi(flag.Arg(2)))
    if err1846 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    tmp2, err1847 := (strconv.Atoi(flag.Arg(3)))
    if err1847 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    fmt.Print(client.GetNodeClassInformation(value0, value1, value2))
    fmt.Print("\n")
    break
  case "GetValueLabel":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueLabel requires 1 args\n")
      flag.Usage()
    }
    arg1848 := flag.Arg(1)
    mbTrans1849 := thrift.NewTMemoryBufferLen(len(arg1848))
    defer mbTrans1849.Close()
    _, err1850 := mbTrans1849.WriteString(arg1848)
    if err1850 != nil {
      Usage()
      return
    }
    factory1851 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1852 := factory1851.GetProtocol(mbTrans1849)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err1853 := argvalue0.Read(jsProt1852)
    if err1853 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueLabel(value0))
    fmt.Print("\n")
    break
  case "SetValueLabel":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetValueLabel requires 2 args\n")
      flag.Usage()
    }
    arg1854 := flag.Arg(1)
    mbTrans1855 := thrift.NewTMemoryBufferLen(len(arg1854))
    defer mbTrans1855.Close()
    _, err1856 := mbTrans1855.WriteString(arg1854)
    if err1856 != nil {
      Usage()
      return
    }
    factory1857 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1858 := factory1857.GetProtocol(mbTrans1855)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err1859 := argvalue0.Read(jsProt1858)
    if err1859 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.SetValueLabel(value0, value1))
    fmt.Print("\n")
    break
  case "GetValueUnits":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueUnits requires 1 args\n")
      flag.Usage()
    }
    arg1861 := flag.Arg(1)
    mbTrans1862 := thrift.NewTMemoryBufferLen(len(arg1861))
    defer mbTrans1862.Close()
    _, err1863 := mbTrans1862.WriteString(arg1861)
    if err1863 != nil {
      Usage()
      return
    }
    factory1864 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1865 := factory1864.GetProtocol(mbTrans1862)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err1866 := argvalue0.Read(jsProt1865)
    if err1866 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueUnits(value0))
    fmt.Print("\n")
    break
  case "SetValueUnits":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetValueUnits requires 2 args\n")
      flag.Usage()
    }
    arg1867 := flag.Arg(1)
    mbTrans1868 := thrift.NewTMemoryBufferLen(len(arg1867))
    defer mbTrans1868.Close()
    _, err1869 := mbTrans1868.WriteString(arg1867)
    if err1869 != nil {
      Usage()
      return
    }
    factory1870 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1871 := factory1870.GetProtocol(mbTrans1868)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err1872 := argvalue0.Read(jsProt1871)
    if err1872 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.SetValueUnits(value0, value1))
    fmt.Print("\n")
    break
  case "GetValueHelp":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueHelp requires 1 args\n")
      flag.Usage()
    }
    arg1874 := flag.Arg(1)
    mbTrans1875 := thrift.NewTMemoryBufferLen(len(arg1874))
    defer mbTrans1875.Close()
    _, err1876 := mbTrans1875.WriteString(arg1874)
    if err1876 != nil {
      Usage()
      return
    }
    factory1877 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1878 := factory1877.GetProtocol(mbTrans1875)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err1879 := argvalue0.Read(jsProt1878)
    if err1879 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueHelp(value0))
    fmt.Print("\n")
    break
  case "SetValueHelp":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetValueHelp requires 2 args\n")
      flag.Usage()
    }
    arg1880 := flag.Arg(1)
    mbTrans1881 := thrift.NewTMemoryBufferLen(len(arg1880))
    defer mbTrans1881.Close()
    _, err1882 := mbTrans1881.WriteString(arg1880)
    if err1882 != nil {
      Usage()
      return
    }
    factory1883 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1884 := factory1883.GetProtocol(mbTrans1881)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err1885 := argvalue0.Read(jsProt1884)
    if err1885 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.SetValueHelp(value0, value1))
    fmt.Print("\n")
    break
  case "GetValueMin":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueMin requires 1 args\n")
      flag.Usage()
    }
    arg1887 := flag.Arg(1)
    mbTrans1888 := thrift.NewTMemoryBufferLen(len(arg1887))
    defer mbTrans1888.Close()
    _, err1889 := mbTrans1888.WriteString(arg1887)
    if err1889 != nil {
      Usage()
      return
    }
    factory1890 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1891 := factory1890.GetProtocol(mbTrans1888)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err1892 := argvalue0.Read(jsProt1891)
    if err1892 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueMin(value0))
    fmt.Print("\n")
    break
  case "GetValueMax":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueMax requires 1 args\n")
      flag.Usage()
    }
    arg1893 := flag.Arg(1)
    mbTrans1894 := thrift.NewTMemoryBufferLen(len(arg1893))
    defer mbTrans1894.Close()
    _, err1895 := mbTrans1894.WriteString(arg1893)
    if err1895 != nil {
      Usage()
      return
    }
    factory1896 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1897 := factory1896.GetProtocol(mbTrans1894)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err1898 := argvalue0.Read(jsProt1897)
    if err1898 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueMax(value0))
    fmt.Print("\n")
    break
  case "IsValueReadOnly":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "IsValueReadOnly requires 1 args\n")
      flag.Usage()
    }
    arg1899 := flag.Arg(1)
    mbTrans1900 := thrift.NewTMemoryBufferLen(len(arg1899))
    defer mbTrans1900.Close()
    _, err1901 := mbTrans1900.WriteString(arg1899)
    if err1901 != nil {
      Usage()
      return
    }
    factory1902 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1903 := factory1902.GetProtocol(mbTrans1900)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err1904 := argvalue0.Read(jsProt1903)
    if err1904 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.IsValueReadOnly(value0))
    fmt.Print("\n")
    break
  case "IsValueWriteOnly":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "IsValueWriteOnly requires 1 args\n")
      flag.Usage()
    }
    arg1905 := flag.Arg(1)
    mbTrans1906 := thrift.NewTMemoryBufferLen(len(arg1905))
    defer mbTrans1906.Close()
    _, err1907 := mbTrans1906.WriteString(arg1905)
    if err1907 != nil {
      Usage()
      return
    }
    factory1908 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1909 := factory1908.GetProtocol(mbTrans1906)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err1910 := argvalue0.Read(jsProt1909)
    if err1910 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.IsValueWriteOnly(value0))
    fmt.Print("\n")
    break
  case "IsValueSet":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "IsValueSet requires 1 args\n")
      flag.Usage()
    }
    arg1911 := flag.Arg(1)
    mbTrans1912 := thrift.NewTMemoryBufferLen(len(arg1911))
    defer mbTrans1912.Close()
    _, err1913 := mbTrans1912.WriteString(arg1911)
    if err1913 != nil {
      Usage()
      return
    }
    factory1914 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1915 := factory1914.GetProtocol(mbTrans1912)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err1916 := argvalue0.Read(jsProt1915)
    if err1916 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.IsValueSet(value0))
    fmt.Print("\n")
    break
  case "GetValueAsBool":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueAsBool requires 1 args\n")
      flag.Usage()
    }
    arg1917 := flag.Arg(1)
    mbTrans1918 := thrift.NewTMemoryBufferLen(len(arg1917))
    defer mbTrans1918.Close()
    _, err1919 := mbTrans1918.WriteString(arg1917)
    if err1919 != nil {
      Usage()
      return
    }
    factory1920 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1921 := factory1920.GetProtocol(mbTrans1918)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err1922 := argvalue0.Read(jsProt1921)
    if err1922 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueAsBool(value0))
    fmt.Print("\n")
    break
  case "GetValueAsByte":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueAsByte requires 1 args\n")
      flag.Usage()
    }
    arg1923 := flag.Arg(1)
    mbTrans1924 := thrift.NewTMemoryBufferLen(len(arg1923))
    defer mbTrans1924.Close()
    _, err1925 := mbTrans1924.WriteString(arg1923)
    if err1925 != nil {
      Usage()
      return
    }
    factory1926 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1927 := factory1926.GetProtocol(mbTrans1924)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err1928 := argvalue0.Read(jsProt1927)
    if err1928 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueAsByte(value0))
    fmt.Print("\n")
    break
  case "GetValueAsFloat":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueAsFloat requires 1 args\n")
      flag.Usage()
    }
    arg1929 := flag.Arg(1)
    mbTrans1930 := thrift.NewTMemoryBufferLen(len(arg1929))
    defer mbTrans1930.Close()
    _, err1931 := mbTrans1930.WriteString(arg1929)
    if err1931 != nil {
      Usage()
      return
    }
    factory1932 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1933 := factory1932.GetProtocol(mbTrans1930)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err1934 := argvalue0.Read(jsProt1933)
    if err1934 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueAsFloat(value0))
    fmt.Print("\n")
    break
  case "GetValueAsInt":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueAsInt requires 1 args\n")
      flag.Usage()
    }
    arg1935 := flag.Arg(1)
    mbTrans1936 := thrift.NewTMemoryBufferLen(len(arg1935))
    defer mbTrans1936.Close()
    _, err1937 := mbTrans1936.WriteString(arg1935)
    if err1937 != nil {
      Usage()
      return
    }
    factory1938 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1939 := factory1938.GetProtocol(mbTrans1936)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err1940 := argvalue0.Read(jsProt1939)
    if err1940 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueAsInt(value0))
    fmt.Print("\n")
    break
  case "GetValueAsShort":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueAsShort requires 1 args\n")
      flag.Usage()
    }
    arg1941 := flag.Arg(1)
    mbTrans1942 := thrift.NewTMemoryBufferLen(len(arg1941))
    defer mbTrans1942.Close()
    _, err1943 := mbTrans1942.WriteString(arg1941)
    if err1943 != nil {
      Usage()
      return
    }
    factory1944 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1945 := factory1944.GetProtocol(mbTrans1942)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err1946 := argvalue0.Read(jsProt1945)
    if err1946 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueAsShort(value0))
    fmt.Print("\n")
    break
  case "GetValueAsString":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueAsString requires 1 args\n")
      flag.Usage()
    }
    arg1947 := flag.Arg(1)
    mbTrans1948 := thrift.NewTMemoryBufferLen(len(arg1947))
    defer mbTrans1948.Close()
    _, err1949 := mbTrans1948.WriteString(arg1947)
    if err1949 != nil {
      Usage()
      return
    }
    factory1950 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1951 := factory1950.GetProtocol(mbTrans1948)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err1952 := argvalue0.Read(jsProt1951)
    if err1952 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueAsString(value0))
    fmt.Print("\n")
    break
  case "GetValueListSelection_String":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueListSelectionString requires 1 args\n")
      flag.Usage()
    }
    arg1953 := flag.Arg(1)
    mbTrans1954 := thrift.NewTMemoryBufferLen(len(arg1953))
    defer mbTrans1954.Close()
    _, err1955 := mbTrans1954.WriteString(arg1953)
    if err1955 != nil {
      Usage()
      return
    }
    factory1956 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1957 := factory1956.GetProtocol(mbTrans1954)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err1958 := argvalue0.Read(jsProt1957)
    if err1958 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueListSelectionString(value0))
    fmt.Print("\n")
    break
  case "GetValueListSelection_Int32":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueListSelectionInt32 requires 1 args\n")
      flag.Usage()
    }
    arg1959 := flag.Arg(1)
    mbTrans1960 := thrift.NewTMemoryBufferLen(len(arg1959))
    defer mbTrans1960.Close()
    _, err1961 := mbTrans1960.WriteString(arg1959)
    if err1961 != nil {
      Usage()
      return
    }
    factory1962 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1963 := factory1962.GetProtocol(mbTrans1960)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err1964 := argvalue0.Read(jsProt1963)
    if err1964 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueListSelectionInt32(value0))
    fmt.Print("\n")
    break
  case "GetValueListItems":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueListItems requires 1 args\n")
      flag.Usage()
    }
    arg1965 := flag.Arg(1)
    mbTrans1966 := thrift.NewTMemoryBufferLen(len(arg1965))
    defer mbTrans1966.Close()
    _, err1967 := mbTrans1966.WriteString(arg1965)
    if err1967 != nil {
      Usage()
      return
    }
    factory1968 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1969 := factory1968.GetProtocol(mbTrans1966)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err1970 := argvalue0.Read(jsProt1969)
    if err1970 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueListItems(value0))
    fmt.Print("\n")
    break
  case "GetValueFloatPrecision":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueFloatPrecision requires 1 args\n")
      flag.Usage()
    }
    arg1971 := flag.Arg(1)
    mbTrans1972 := thrift.NewTMemoryBufferLen(len(arg1971))
    defer mbTrans1972.Close()
    _, err1973 := mbTrans1972.WriteString(arg1971)
    if err1973 != nil {
      Usage()
      return
    }
    factory1974 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1975 := factory1974.GetProtocol(mbTrans1972)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err1976 := argvalue0.Read(jsProt1975)
    if err1976 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueFloatPrecision(value0))
    fmt.Print("\n")
    break
  case "SetValue_Bool":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetValueBool requires 2 args\n")
      flag.Usage()
    }
    arg1977 := flag.Arg(1)
    mbTrans1978 := thrift.NewTMemoryBufferLen(len(arg1977))
    defer mbTrans1978.Close()
    _, err1979 := mbTrans1978.WriteString(arg1977)
    if err1979 != nil {
      Usage()
      return
    }
    factory1980 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1981 := factory1980.GetProtocol(mbTrans1978)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err1982 := argvalue0.Read(jsProt1981)
    if err1982 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2) == "true"
    value1 := argvalue1
    fmt.Print(client.SetValueBool(value0, value1))
    fmt.Print("\n")
    break
  case "SetValue_UInt8":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetValueUInt8 requires 2 args\n")
      flag.Usage()
    }
    arg1984 := flag.Arg(1)
    mbTrans1985 := thrift.NewTMemoryBufferLen(len(arg1984))
    defer mbTrans1985.Close()
    _, err1986 := mbTrans1985.WriteString(arg1984)
    if err1986 != nil {
      Usage()
      return
    }
    factory1987 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1988 := factory1987.GetProtocol(mbTrans1985)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err1989 := argvalue0.Read(jsProt1988)
    if err1989 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err1990 := (strconv.Atoi(flag.Arg(2)))
    if err1990 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.SetValueUInt8(value0, value1))
    fmt.Print("\n")
    break
  case "SetValue_Float":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetValueFloat requires 2 args\n")
      flag.Usage()
    }
    arg1991 := flag.Arg(1)
    mbTrans1992 := thrift.NewTMemoryBufferLen(len(arg1991))
    defer mbTrans1992.Close()
    _, err1993 := mbTrans1992.WriteString(arg1991)
    if err1993 != nil {
      Usage()
      return
    }
    factory1994 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1995 := factory1994.GetProtocol(mbTrans1992)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err1996 := argvalue0.Read(jsProt1995)
    if err1996 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1, err1997 := (strconv.Atof64(flag.Arg(2)))
    if err1997 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SetValueFloat(value0, value1))
    fmt.Print("\n")
    break
  case "SetValue_Int32":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetValueInt32 requires 2 args\n")
      flag.Usage()
    }
    arg1998 := flag.Arg(1)
    mbTrans1999 := thrift.NewTMemoryBufferLen(len(arg1998))
    defer mbTrans1999.Close()
    _, err2000 := mbTrans1999.WriteString(arg1998)
    if err2000 != nil {
      Usage()
      return
    }
    factory2001 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2002 := factory2001.GetProtocol(mbTrans1999)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2003 := argvalue0.Read(jsProt2002)
    if err2003 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err2004 := (strconv.Atoi(flag.Arg(2)))
    if err2004 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    fmt.Print(client.SetValueInt32(value0, value1))
    fmt.Print("\n")
    break
  case "SetValue_Int16":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetValueInt16 requires 2 args\n")
      flag.Usage()
    }
    arg2005 := flag.Arg(1)
    mbTrans2006 := thrift.NewTMemoryBufferLen(len(arg2005))
    defer mbTrans2006.Close()
    _, err2007 := mbTrans2006.WriteString(arg2005)
    if err2007 != nil {
      Usage()
      return
    }
    factory2008 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2009 := factory2008.GetProtocol(mbTrans2006)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2010 := argvalue0.Read(jsProt2009)
    if err2010 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err2011 := (strconv.Atoi(flag.Arg(2)))
    if err2011 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.SetValueInt16(value0, value1))
    fmt.Print("\n")
    break
  case "SetValue_String":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetValueString requires 2 args\n")
      flag.Usage()
    }
    arg2012 := flag.Arg(1)
    mbTrans2013 := thrift.NewTMemoryBufferLen(len(arg2012))
    defer mbTrans2013.Close()
    _, err2014 := mbTrans2013.WriteString(arg2012)
    if err2014 != nil {
      Usage()
      return
    }
    factory2015 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2016 := factory2015.GetProtocol(mbTrans2013)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2017 := argvalue0.Read(jsProt2016)
    if err2017 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.SetValueString(value0, value1))
    fmt.Print("\n")
    break
  case "SetValueListSelection":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetValueListSelection requires 2 args\n")
      flag.Usage()
    }
    arg2019 := flag.Arg(1)
    mbTrans2020 := thrift.NewTMemoryBufferLen(len(arg2019))
    defer mbTrans2020.Close()
    _, err2021 := mbTrans2020.WriteString(arg2019)
    if err2021 != nil {
      Usage()
      return
    }
    factory2022 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2023 := factory2022.GetProtocol(mbTrans2020)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2024 := argvalue0.Read(jsProt2023)
    if err2024 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.SetValueListSelection(value0, value1))
    fmt.Print("\n")
    break
  case "PressButton":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "PressButton requires 1 args\n")
      flag.Usage()
    }
    arg2026 := flag.Arg(1)
    mbTrans2027 := thrift.NewTMemoryBufferLen(len(arg2026))
    defer mbTrans2027.Close()
    _, err2028 := mbTrans2027.WriteString(arg2026)
    if err2028 != nil {
      Usage()
      return
    }
    factory2029 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2030 := factory2029.GetProtocol(mbTrans2027)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2031 := argvalue0.Read(jsProt2030)
    if err2031 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.PressButton(value0))
    fmt.Print("\n")
    break
  case "ReleaseButton":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "ReleaseButton requires 1 args\n")
      flag.Usage()
    }
    arg2032 := flag.Arg(1)
    mbTrans2033 := thrift.NewTMemoryBufferLen(len(arg2032))
    defer mbTrans2033.Close()
    _, err2034 := mbTrans2033.WriteString(arg2032)
    if err2034 != nil {
      Usage()
      return
    }
    factory2035 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2036 := factory2035.GetProtocol(mbTrans2033)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2037 := argvalue0.Read(jsProt2036)
    if err2037 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ReleaseButton(value0))
    fmt.Print("\n")
    break
  case "GetNumSwitchPoints":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetNumSwitchPoints requires 1 args\n")
      flag.Usage()
    }
    arg2038 := flag.Arg(1)
    mbTrans2039 := thrift.NewTMemoryBufferLen(len(arg2038))
    defer mbTrans2039.Close()
    _, err2040 := mbTrans2039.WriteString(arg2038)
    if err2040 != nil {
      Usage()
      return
    }
    factory2041 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2042 := factory2041.GetProtocol(mbTrans2039)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2043 := argvalue0.Read(jsProt2042)
    if err2043 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetNumSwitchPoints(value0))
    fmt.Print("\n")
    break
  case "SetSwitchPoint":
    if flag.NArg() - 1 != 4 {
      fmt.Fprint(os.Stderr, "SetSwitchPoint requires 4 args\n")
      flag.Usage()
    }
    arg2044 := flag.Arg(1)
    mbTrans2045 := thrift.NewTMemoryBufferLen(len(arg2044))
    defer mbTrans2045.Close()
    _, err2046 := mbTrans2045.WriteString(arg2044)
    if err2046 != nil {
      Usage()
      return
    }
    factory2047 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2048 := factory2047.GetProtocol(mbTrans2045)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2049 := argvalue0.Read(jsProt2048)
    if err2049 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err2050 := (strconv.Atoi(flag.Arg(2)))
    if err2050 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    tmp2, err2051 := (strconv.Atoi(flag.Arg(3)))
    if err2051 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    tmp3, err2052 := (strconv.Atoi(flag.Arg(4)))
    if err2052 != nil {
      Usage()
      return
    }
    argvalue3 := byte(tmp3)
    value3 := argvalue3
    fmt.Print(client.SetSwitchPoint(value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "RemoveSwitchPoint":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "RemoveSwitchPoint requires 3 args\n")
      flag.Usage()
    }
    arg2053 := flag.Arg(1)
    mbTrans2054 := thrift.NewTMemoryBufferLen(len(arg2053))
    defer mbTrans2054.Close()
    _, err2055 := mbTrans2054.WriteString(arg2053)
    if err2055 != nil {
      Usage()
      return
    }
    factory2056 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2057 := factory2056.GetProtocol(mbTrans2054)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2058 := argvalue0.Read(jsProt2057)
    if err2058 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err2059 := (strconv.Atoi(flag.Arg(2)))
    if err2059 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    tmp2, err2060 := (strconv.Atoi(flag.Arg(3)))
    if err2060 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    fmt.Print(client.RemoveSwitchPoint(value0, value1, value2))
    fmt.Print("\n")
    break
  case "ClearSwitchPoints":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "ClearSwitchPoints requires 1 args\n")
      flag.Usage()
    }
    arg2061 := flag.Arg(1)
    mbTrans2062 := thrift.NewTMemoryBufferLen(len(arg2061))
    defer mbTrans2062.Close()
    _, err2063 := mbTrans2062.WriteString(arg2061)
    if err2063 != nil {
      Usage()
      return
    }
    factory2064 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2065 := factory2064.GetProtocol(mbTrans2062)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2066 := argvalue0.Read(jsProt2065)
    if err2066 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ClearSwitchPoints(value0))
    fmt.Print("\n")
    break
  case "GetSwitchPoint":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetSwitchPoint requires 2 args\n")
      flag.Usage()
    }
    arg2067 := flag.Arg(1)
    mbTrans2068 := thrift.NewTMemoryBufferLen(len(arg2067))
    defer mbTrans2068.Close()
    _, err2069 := mbTrans2068.WriteString(arg2067)
    if err2069 != nil {
      Usage()
      return
    }
    factory2070 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2071 := factory2070.GetProtocol(mbTrans2068)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2072 := argvalue0.Read(jsProt2071)
    if err2072 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err2073 := (strconv.Atoi(flag.Arg(2)))
    if err2073 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetSwitchPoint(value0, value1))
    fmt.Print("\n")
    break
  case "SwitchAllOn":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "SwitchAllOn requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2074 := (strconv.Atoi(flag.Arg(1)))
    if err2074 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.SwitchAllOn(value0))
    fmt.Print("\n")
    break
  case "SwitchAllOff":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "SwitchAllOff requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2075 := (strconv.Atoi(flag.Arg(1)))
    if err2075 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.SwitchAllOff(value0))
    fmt.Print("\n")
    break
  case "SetConfigParam":
    if flag.NArg() - 1 != 5 {
      fmt.Fprint(os.Stderr, "SetConfigParam requires 5 args\n")
      flag.Usage()
    }
    tmp0, err2076 := (strconv.Atoi(flag.Arg(1)))
    if err2076 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2077 := (strconv.Atoi(flag.Arg(2)))
    if err2077 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    tmp2, err2078 := (strconv.Atoi(flag.Arg(3)))
    if err2078 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    tmp3, err2079 := (strconv.Atoi(flag.Arg(4)))
    if err2079 != nil {
      Usage()
      return
    }
    argvalue3 := int32(tmp3)
    value3 := argvalue3
    tmp4, err2080 := (strconv.Atoi(flag.Arg(5)))
    if err2080 != nil {
      Usage()
      return
    }
    argvalue4 := byte(tmp4)
    value4 := argvalue4
    fmt.Print(client.SetConfigParam(value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "RequestConfigParam":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "RequestConfigParam requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2081 := (strconv.Atoi(flag.Arg(1)))
    if err2081 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2082 := (strconv.Atoi(flag.Arg(2)))
    if err2082 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    tmp2, err2083 := (strconv.Atoi(flag.Arg(3)))
    if err2083 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    fmt.Print(client.RequestConfigParam(value0, value1, value2))
    fmt.Print("\n")
    break
  case "RequestAllConfigParams":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "RequestAllConfigParams requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2084 := (strconv.Atoi(flag.Arg(1)))
    if err2084 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2085 := (strconv.Atoi(flag.Arg(2)))
    if err2085 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.RequestAllConfigParams(value0, value1))
    fmt.Print("\n")
    break
  case "GetNumGroups":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNumGroups requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2086 := (strconv.Atoi(flag.Arg(1)))
    if err2086 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2087 := (strconv.Atoi(flag.Arg(2)))
    if err2087 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNumGroups(value0, value1))
    fmt.Print("\n")
    break
  case "GetAssociations":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "GetAssociations requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2088 := (strconv.Atoi(flag.Arg(1)))
    if err2088 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2089 := (strconv.Atoi(flag.Arg(2)))
    if err2089 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    tmp2, err2090 := (strconv.Atoi(flag.Arg(3)))
    if err2090 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    fmt.Print(client.GetAssociations(value0, value1, value2))
    fmt.Print("\n")
    break
  case "GetMaxAssociations":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "GetMaxAssociations requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2091 := (strconv.Atoi(flag.Arg(1)))
    if err2091 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2092 := (strconv.Atoi(flag.Arg(2)))
    if err2092 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    tmp2, err2093 := (strconv.Atoi(flag.Arg(3)))
    if err2093 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    fmt.Print(client.GetMaxAssociations(value0, value1, value2))
    fmt.Print("\n")
    break
  case "GetGroupLabel":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "GetGroupLabel requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2094 := (strconv.Atoi(flag.Arg(1)))
    if err2094 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2095 := (strconv.Atoi(flag.Arg(2)))
    if err2095 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    tmp2, err2096 := (strconv.Atoi(flag.Arg(3)))
    if err2096 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    fmt.Print(client.GetGroupLabel(value0, value1, value2))
    fmt.Print("\n")
    break
  case "AddAssociation":
    if flag.NArg() - 1 != 4 {
      fmt.Fprint(os.Stderr, "AddAssociation requires 4 args\n")
      flag.Usage()
    }
    tmp0, err2097 := (strconv.Atoi(flag.Arg(1)))
    if err2097 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2098 := (strconv.Atoi(flag.Arg(2)))
    if err2098 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    tmp2, err2099 := (strconv.Atoi(flag.Arg(3)))
    if err2099 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    tmp3, err2100 := (strconv.Atoi(flag.Arg(4)))
    if err2100 != nil {
      Usage()
      return
    }
    argvalue3 := byte(tmp3)
    value3 := argvalue3
    fmt.Print(client.AddAssociation(value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "RemoveAssociation":
    if flag.NArg() - 1 != 4 {
      fmt.Fprint(os.Stderr, "RemoveAssociation requires 4 args\n")
      flag.Usage()
    }
    tmp0, err2101 := (strconv.Atoi(flag.Arg(1)))
    if err2101 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2102 := (strconv.Atoi(flag.Arg(2)))
    if err2102 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    tmp2, err2103 := (strconv.Atoi(flag.Arg(3)))
    if err2103 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    tmp3, err2104 := (strconv.Atoi(flag.Arg(4)))
    if err2104 != nil {
      Usage()
      return
    }
    argvalue3 := byte(tmp3)
    value3 := argvalue3
    fmt.Print(client.RemoveAssociation(value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "ResetController":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "ResetController requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2105 := (strconv.Atoi(flag.Arg(1)))
    if err2105 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.ResetController(value0))
    fmt.Print("\n")
    break
  case "SoftReset":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "SoftReset requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2106 := (strconv.Atoi(flag.Arg(1)))
    if err2106 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.SoftReset(value0))
    fmt.Print("\n")
    break
  case "GetNumScenes":
    if flag.NArg() - 1 != 0 {
      fmt.Fprint(os.Stderr, "GetNumScenes requires 0 args\n")
      flag.Usage()
    }
    fmt.Print(client.GetNumScenes())
    fmt.Print("\n")
    break
  case "GetAllScenes":
    if flag.NArg() - 1 != 0 {
      fmt.Fprint(os.Stderr, "GetAllScenes requires 0 args\n")
      flag.Usage()
    }
    fmt.Print(client.GetAllScenes())
    fmt.Print("\n")
    break
  case "CreateScene":
    if flag.NArg() - 1 != 0 {
      fmt.Fprint(os.Stderr, "CreateScene requires 0 args\n")
      flag.Usage()
    }
    fmt.Print(client.CreateScene())
    fmt.Print("\n")
    break
  case "RemoveScene":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "RemoveScene requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2107 := (strconv.Atoi(flag.Arg(1)))
    if err2107 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    fmt.Print(client.RemoveScene(value0))
    fmt.Print("\n")
    break
  case "AddSceneValue_Bool":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "AddSceneValueBool requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2108 := (strconv.Atoi(flag.Arg(1)))
    if err2108 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2109 := flag.Arg(2)
    mbTrans2110 := thrift.NewTMemoryBufferLen(len(arg2109))
    defer mbTrans2110.Close()
    _, err2111 := mbTrans2110.WriteString(arg2109)
    if err2111 != nil {
      Usage()
      return
    }
    factory2112 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2113 := factory2112.GetProtocol(mbTrans2110)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2114 := argvalue1.Read(jsProt2113)
    if err2114 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := flag.Arg(3) == "true"
    value2 := argvalue2
    fmt.Print(client.AddSceneValueBool(value0, value1, value2))
    fmt.Print("\n")
    break
  case "AddSceneValue_Uint8":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "AddSceneValueUint8 requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2116 := (strconv.Atoi(flag.Arg(1)))
    if err2116 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2117 := flag.Arg(2)
    mbTrans2118 := thrift.NewTMemoryBufferLen(len(arg2117))
    defer mbTrans2118.Close()
    _, err2119 := mbTrans2118.WriteString(arg2117)
    if err2119 != nil {
      Usage()
      return
    }
    factory2120 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2121 := factory2120.GetProtocol(mbTrans2118)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2122 := argvalue1.Read(jsProt2121)
    if err2122 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    tmp2, err2123 := (strconv.Atoi(flag.Arg(3)))
    if err2123 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    fmt.Print(client.AddSceneValueUint8(value0, value1, value2))
    fmt.Print("\n")
    break
  case "AddSceneValue_Float":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "AddSceneValueFloat requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2124 := (strconv.Atoi(flag.Arg(1)))
    if err2124 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2125 := flag.Arg(2)
    mbTrans2126 := thrift.NewTMemoryBufferLen(len(arg2125))
    defer mbTrans2126.Close()
    _, err2127 := mbTrans2126.WriteString(arg2125)
    if err2127 != nil {
      Usage()
      return
    }
    factory2128 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2129 := factory2128.GetProtocol(mbTrans2126)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2130 := argvalue1.Read(jsProt2129)
    if err2130 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2, err2131 := (strconv.Atof64(flag.Arg(3)))
    if err2131 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.AddSceneValueFloat(value0, value1, value2))
    fmt.Print("\n")
    break
  case "AddSceneValue_Int32":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "AddSceneValueInt32 requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2132 := (strconv.Atoi(flag.Arg(1)))
    if err2132 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2133 := flag.Arg(2)
    mbTrans2134 := thrift.NewTMemoryBufferLen(len(arg2133))
    defer mbTrans2134.Close()
    _, err2135 := mbTrans2134.WriteString(arg2133)
    if err2135 != nil {
      Usage()
      return
    }
    factory2136 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2137 := factory2136.GetProtocol(mbTrans2134)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2138 := argvalue1.Read(jsProt2137)
    if err2138 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    tmp2, err2139 := (strconv.Atoi(flag.Arg(3)))
    if err2139 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    fmt.Print(client.AddSceneValueInt32(value0, value1, value2))
    fmt.Print("\n")
    break
  case "AddSceneValue_Int16":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "AddSceneValueInt16 requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2140 := (strconv.Atoi(flag.Arg(1)))
    if err2140 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2141 := flag.Arg(2)
    mbTrans2142 := thrift.NewTMemoryBufferLen(len(arg2141))
    defer mbTrans2142.Close()
    _, err2143 := mbTrans2142.WriteString(arg2141)
    if err2143 != nil {
      Usage()
      return
    }
    factory2144 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2145 := factory2144.GetProtocol(mbTrans2142)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2146 := argvalue1.Read(jsProt2145)
    if err2146 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    tmp2, err2147 := (strconv.Atoi(flag.Arg(3)))
    if err2147 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    fmt.Print(client.AddSceneValueInt16(value0, value1, value2))
    fmt.Print("\n")
    break
  case "AddSceneValue_String":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "AddSceneValueString requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2148 := (strconv.Atoi(flag.Arg(1)))
    if err2148 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2149 := flag.Arg(2)
    mbTrans2150 := thrift.NewTMemoryBufferLen(len(arg2149))
    defer mbTrans2150.Close()
    _, err2151 := mbTrans2150.WriteString(arg2149)
    if err2151 != nil {
      Usage()
      return
    }
    factory2152 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2153 := factory2152.GetProtocol(mbTrans2150)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2154 := argvalue1.Read(jsProt2153)
    if err2154 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.AddSceneValueString(value0, value1, value2))
    fmt.Print("\n")
    break
  case "AddSceneValueListSelection_String":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "AddSceneValueListSelectionString requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2156 := (strconv.Atoi(flag.Arg(1)))
    if err2156 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2157 := flag.Arg(2)
    mbTrans2158 := thrift.NewTMemoryBufferLen(len(arg2157))
    defer mbTrans2158.Close()
    _, err2159 := mbTrans2158.WriteString(arg2157)
    if err2159 != nil {
      Usage()
      return
    }
    factory2160 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2161 := factory2160.GetProtocol(mbTrans2158)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2162 := argvalue1.Read(jsProt2161)
    if err2162 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.AddSceneValueListSelectionString(value0, value1, value2))
    fmt.Print("\n")
    break
  case "AddSceneValueListSelection_Int32":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "AddSceneValueListSelectionInt32 requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2164 := (strconv.Atoi(flag.Arg(1)))
    if err2164 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2165 := flag.Arg(2)
    mbTrans2166 := thrift.NewTMemoryBufferLen(len(arg2165))
    defer mbTrans2166.Close()
    _, err2167 := mbTrans2166.WriteString(arg2165)
    if err2167 != nil {
      Usage()
      return
    }
    factory2168 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2169 := factory2168.GetProtocol(mbTrans2166)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2170 := argvalue1.Read(jsProt2169)
    if err2170 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    tmp2, err2171 := (strconv.Atoi(flag.Arg(3)))
    if err2171 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    fmt.Print(client.AddSceneValueListSelectionInt32(value0, value1, value2))
    fmt.Print("\n")
    break
  case "RemoveSceneValue":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "RemoveSceneValue requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2172 := (strconv.Atoi(flag.Arg(1)))
    if err2172 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2173 := flag.Arg(2)
    mbTrans2174 := thrift.NewTMemoryBufferLen(len(arg2173))
    defer mbTrans2174.Close()
    _, err2175 := mbTrans2174.WriteString(arg2173)
    if err2175 != nil {
      Usage()
      return
    }
    factory2176 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2177 := factory2176.GetProtocol(mbTrans2174)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2178 := argvalue1.Read(jsProt2177)
    if err2178 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.RemoveSceneValue(value0, value1))
    fmt.Print("\n")
    break
  case "SceneGetValues":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "SceneGetValues requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2179 := (strconv.Atoi(flag.Arg(1)))
    if err2179 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    fmt.Print(client.SceneGetValues(value0))
    fmt.Print("\n")
    break
  case "SceneGetValueAsBool":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SceneGetValueAsBool requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2180 := (strconv.Atoi(flag.Arg(1)))
    if err2180 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2181 := flag.Arg(2)
    mbTrans2182 := thrift.NewTMemoryBufferLen(len(arg2181))
    defer mbTrans2182.Close()
    _, err2183 := mbTrans2182.WriteString(arg2181)
    if err2183 != nil {
      Usage()
      return
    }
    factory2184 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2185 := factory2184.GetProtocol(mbTrans2182)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2186 := argvalue1.Read(jsProt2185)
    if err2186 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SceneGetValueAsBool(value0, value1))
    fmt.Print("\n")
    break
  case "SceneGetValueAsByte":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SceneGetValueAsByte requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2187 := (strconv.Atoi(flag.Arg(1)))
    if err2187 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2188 := flag.Arg(2)
    mbTrans2189 := thrift.NewTMemoryBufferLen(len(arg2188))
    defer mbTrans2189.Close()
    _, err2190 := mbTrans2189.WriteString(arg2188)
    if err2190 != nil {
      Usage()
      return
    }
    factory2191 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2192 := factory2191.GetProtocol(mbTrans2189)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2193 := argvalue1.Read(jsProt2192)
    if err2193 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SceneGetValueAsByte(value0, value1))
    fmt.Print("\n")
    break
  case "SceneGetValueAsFloat":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SceneGetValueAsFloat requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2194 := (strconv.Atoi(flag.Arg(1)))
    if err2194 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2195 := flag.Arg(2)
    mbTrans2196 := thrift.NewTMemoryBufferLen(len(arg2195))
    defer mbTrans2196.Close()
    _, err2197 := mbTrans2196.WriteString(arg2195)
    if err2197 != nil {
      Usage()
      return
    }
    factory2198 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2199 := factory2198.GetProtocol(mbTrans2196)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2200 := argvalue1.Read(jsProt2199)
    if err2200 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SceneGetValueAsFloat(value0, value1))
    fmt.Print("\n")
    break
  case "SceneGetValueAsInt":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SceneGetValueAsInt requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2201 := (strconv.Atoi(flag.Arg(1)))
    if err2201 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2202 := flag.Arg(2)
    mbTrans2203 := thrift.NewTMemoryBufferLen(len(arg2202))
    defer mbTrans2203.Close()
    _, err2204 := mbTrans2203.WriteString(arg2202)
    if err2204 != nil {
      Usage()
      return
    }
    factory2205 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2206 := factory2205.GetProtocol(mbTrans2203)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2207 := argvalue1.Read(jsProt2206)
    if err2207 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SceneGetValueAsInt(value0, value1))
    fmt.Print("\n")
    break
  case "SceneGetValueAsShort":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SceneGetValueAsShort requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2208 := (strconv.Atoi(flag.Arg(1)))
    if err2208 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2209 := flag.Arg(2)
    mbTrans2210 := thrift.NewTMemoryBufferLen(len(arg2209))
    defer mbTrans2210.Close()
    _, err2211 := mbTrans2210.WriteString(arg2209)
    if err2211 != nil {
      Usage()
      return
    }
    factory2212 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2213 := factory2212.GetProtocol(mbTrans2210)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2214 := argvalue1.Read(jsProt2213)
    if err2214 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SceneGetValueAsShort(value0, value1))
    fmt.Print("\n")
    break
  case "SceneGetValueAsString":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SceneGetValueAsString requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2215 := (strconv.Atoi(flag.Arg(1)))
    if err2215 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2216 := flag.Arg(2)
    mbTrans2217 := thrift.NewTMemoryBufferLen(len(arg2216))
    defer mbTrans2217.Close()
    _, err2218 := mbTrans2217.WriteString(arg2216)
    if err2218 != nil {
      Usage()
      return
    }
    factory2219 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2220 := factory2219.GetProtocol(mbTrans2217)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2221 := argvalue1.Read(jsProt2220)
    if err2221 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SceneGetValueAsString(value0, value1))
    fmt.Print("\n")
    break
  case "SceneGetValueListSelection_String":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SceneGetValueListSelectionString requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2222 := (strconv.Atoi(flag.Arg(1)))
    if err2222 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2223 := flag.Arg(2)
    mbTrans2224 := thrift.NewTMemoryBufferLen(len(arg2223))
    defer mbTrans2224.Close()
    _, err2225 := mbTrans2224.WriteString(arg2223)
    if err2225 != nil {
      Usage()
      return
    }
    factory2226 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2227 := factory2226.GetProtocol(mbTrans2224)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2228 := argvalue1.Read(jsProt2227)
    if err2228 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SceneGetValueListSelectionString(value0, value1))
    fmt.Print("\n")
    break
  case "SceneGetValueListSelection_Int32":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SceneGetValueListSelectionInt32 requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2229 := (strconv.Atoi(flag.Arg(1)))
    if err2229 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2230 := flag.Arg(2)
    mbTrans2231 := thrift.NewTMemoryBufferLen(len(arg2230))
    defer mbTrans2231.Close()
    _, err2232 := mbTrans2231.WriteString(arg2230)
    if err2232 != nil {
      Usage()
      return
    }
    factory2233 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2234 := factory2233.GetProtocol(mbTrans2231)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2235 := argvalue1.Read(jsProt2234)
    if err2235 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SceneGetValueListSelectionInt32(value0, value1))
    fmt.Print("\n")
    break
  case "SetSceneValue_Bool":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetSceneValueBool requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2236 := (strconv.Atoi(flag.Arg(1)))
    if err2236 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2237 := flag.Arg(2)
    mbTrans2238 := thrift.NewTMemoryBufferLen(len(arg2237))
    defer mbTrans2238.Close()
    _, err2239 := mbTrans2238.WriteString(arg2237)
    if err2239 != nil {
      Usage()
      return
    }
    factory2240 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2241 := factory2240.GetProtocol(mbTrans2238)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2242 := argvalue1.Read(jsProt2241)
    if err2242 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := flag.Arg(3) == "true"
    value2 := argvalue2
    fmt.Print(client.SetSceneValueBool(value0, value1, value2))
    fmt.Print("\n")
    break
  case "SetSceneValue_Uint8":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetSceneValueUint8 requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2244 := (strconv.Atoi(flag.Arg(1)))
    if err2244 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2245 := flag.Arg(2)
    mbTrans2246 := thrift.NewTMemoryBufferLen(len(arg2245))
    defer mbTrans2246.Close()
    _, err2247 := mbTrans2246.WriteString(arg2245)
    if err2247 != nil {
      Usage()
      return
    }
    factory2248 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2249 := factory2248.GetProtocol(mbTrans2246)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2250 := argvalue1.Read(jsProt2249)
    if err2250 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    tmp2, err2251 := (strconv.Atoi(flag.Arg(3)))
    if err2251 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    fmt.Print(client.SetSceneValueUint8(value0, value1, value2))
    fmt.Print("\n")
    break
  case "SetSceneValue_Float":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetSceneValueFloat requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2252 := (strconv.Atoi(flag.Arg(1)))
    if err2252 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2253 := flag.Arg(2)
    mbTrans2254 := thrift.NewTMemoryBufferLen(len(arg2253))
    defer mbTrans2254.Close()
    _, err2255 := mbTrans2254.WriteString(arg2253)
    if err2255 != nil {
      Usage()
      return
    }
    factory2256 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2257 := factory2256.GetProtocol(mbTrans2254)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2258 := argvalue1.Read(jsProt2257)
    if err2258 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2, err2259 := (strconv.Atof64(flag.Arg(3)))
    if err2259 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.SetSceneValueFloat(value0, value1, value2))
    fmt.Print("\n")
    break
  case "SetSceneValue_Int32":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetSceneValueInt32 requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2260 := (strconv.Atoi(flag.Arg(1)))
    if err2260 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2261 := flag.Arg(2)
    mbTrans2262 := thrift.NewTMemoryBufferLen(len(arg2261))
    defer mbTrans2262.Close()
    _, err2263 := mbTrans2262.WriteString(arg2261)
    if err2263 != nil {
      Usage()
      return
    }
    factory2264 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2265 := factory2264.GetProtocol(mbTrans2262)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2266 := argvalue1.Read(jsProt2265)
    if err2266 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    tmp2, err2267 := (strconv.Atoi(flag.Arg(3)))
    if err2267 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    fmt.Print(client.SetSceneValueInt32(value0, value1, value2))
    fmt.Print("\n")
    break
  case "SetSceneValue_Int16":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetSceneValueInt16 requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2268 := (strconv.Atoi(flag.Arg(1)))
    if err2268 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2269 := flag.Arg(2)
    mbTrans2270 := thrift.NewTMemoryBufferLen(len(arg2269))
    defer mbTrans2270.Close()
    _, err2271 := mbTrans2270.WriteString(arg2269)
    if err2271 != nil {
      Usage()
      return
    }
    factory2272 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2273 := factory2272.GetProtocol(mbTrans2270)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2274 := argvalue1.Read(jsProt2273)
    if err2274 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    tmp2, err2275 := (strconv.Atoi(flag.Arg(3)))
    if err2275 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    fmt.Print(client.SetSceneValueInt16(value0, value1, value2))
    fmt.Print("\n")
    break
  case "SetSceneValue_String":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetSceneValueString requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2276 := (strconv.Atoi(flag.Arg(1)))
    if err2276 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2277 := flag.Arg(2)
    mbTrans2278 := thrift.NewTMemoryBufferLen(len(arg2277))
    defer mbTrans2278.Close()
    _, err2279 := mbTrans2278.WriteString(arg2277)
    if err2279 != nil {
      Usage()
      return
    }
    factory2280 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2281 := factory2280.GetProtocol(mbTrans2278)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2282 := argvalue1.Read(jsProt2281)
    if err2282 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.SetSceneValueString(value0, value1, value2))
    fmt.Print("\n")
    break
  case "SetSceneValueListSelection_String":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetSceneValueListSelectionString requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2284 := (strconv.Atoi(flag.Arg(1)))
    if err2284 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2285 := flag.Arg(2)
    mbTrans2286 := thrift.NewTMemoryBufferLen(len(arg2285))
    defer mbTrans2286.Close()
    _, err2287 := mbTrans2286.WriteString(arg2285)
    if err2287 != nil {
      Usage()
      return
    }
    factory2288 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2289 := factory2288.GetProtocol(mbTrans2286)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2290 := argvalue1.Read(jsProt2289)
    if err2290 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.SetSceneValueListSelectionString(value0, value1, value2))
    fmt.Print("\n")
    break
  case "SetSceneValueListSelection_Int32":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetSceneValueListSelectionInt32 requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2292 := (strconv.Atoi(flag.Arg(1)))
    if err2292 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2293 := flag.Arg(2)
    mbTrans2294 := thrift.NewTMemoryBufferLen(len(arg2293))
    defer mbTrans2294.Close()
    _, err2295 := mbTrans2294.WriteString(arg2293)
    if err2295 != nil {
      Usage()
      return
    }
    factory2296 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2297 := factory2296.GetProtocol(mbTrans2294)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2298 := argvalue1.Read(jsProt2297)
    if err2298 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    tmp2, err2299 := (strconv.Atoi(flag.Arg(3)))
    if err2299 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    fmt.Print(client.SetSceneValueListSelectionInt32(value0, value1, value2))
    fmt.Print("\n")
    break
  case "GetSceneLabel":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetSceneLabel requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2300 := (strconv.Atoi(flag.Arg(1)))
    if err2300 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetSceneLabel(value0))
    fmt.Print("\n")
    break
  case "SetSceneLabel":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetSceneLabel requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2301 := (strconv.Atoi(flag.Arg(1)))
    if err2301 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.SetSceneLabel(value0, value1))
    fmt.Print("\n")
    break
  case "SceneExists":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "SceneExists requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2303 := (strconv.Atoi(flag.Arg(1)))
    if err2303 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    fmt.Print(client.SceneExists(value0))
    fmt.Print("\n")
    break
  case "ActivateScene":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "ActivateScene requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2304 := (strconv.Atoi(flag.Arg(1)))
    if err2304 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    fmt.Print(client.ActivateScene(value0))
    fmt.Print("\n")
    break
  case "SendAllValues":
    if flag.NArg() - 1 != 0 {
      fmt.Fprint(os.Stderr, "SendAllValues requires 0 args\n")
      flag.Usage()
    }
    fmt.Print(client.SendAllValues())
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprint(os.Stderr, "Invalid function ", cmd, "\n")
  }
}
