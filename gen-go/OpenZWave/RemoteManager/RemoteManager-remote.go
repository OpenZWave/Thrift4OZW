/* Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package main

import (
        "flag"
        "fmt"
        "http"
        "net"
        "os"
        "strconv"
        "thrift"
        "thriftlib/OpenZWave"
)

func Usage() {
  fmt.Fprint(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:\n")
  flag.PrintDefaults()
  fmt.Fprint(os.Stderr, "Functions:\n")
  fmt.Fprint(os.Stderr, "  WriteConfig(_homeId int32) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetControllerNodeId(_homeId int32) (retval2017 byte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetSUCNodeId(_homeId int32) (retval2018 byte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsPrimaryController(_homeId int32) (retval2019 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsStaticUpdateController(_homeId int32) (retval2020 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsBridgeController(_homeId int32) (retval2021 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetLibraryVersion(_homeId int32) (retval2022 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetLibraryTypeName(_homeId int32) (retval2023 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetSendQueueCount(_homeId int32) (retval2024 int32, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  LogDriverStatistics(_homeId int32) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetControllerInterfaceType(_homeId int32) (retval2026 int32, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetControllerPath(_homeId int32) (retval2027 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetPollInterval() (retval2028 int32, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetPollInterval(_milliseconds int32, _bIntervalBetweenPolls bool) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  EnablePoll(_valueId *RemoteValueID, _intensity byte) (retval2030 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  DisablePoll(_valueId *RemoteValueID) (retval2031 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  isPolled(_valueId *RemoteValueID) (retval2032 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetPollIntensity(_valueId *RemoteValueID, _intensity byte) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  RefreshNodeInfo(_homeId int32, _nodeId byte) (retval2034 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  RequestNodeState(_homeId int32, _nodeId byte) (retval2035 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  RequestNodeDynamic(_homeId int32, _nodeId byte) (retval2036 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsNodeListeningDevice(_homeId int32, _nodeId byte) (retval2037 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsNodeFrequentListeningDevice(_homeId int32, _nodeId byte) (retval2038 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsNodeBeamingDevice(_homeId int32, _nodeId byte) (retval2039 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsNodeRoutingDevice(_homeId int32, _nodeId byte) (retval2040 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsNodeSecurityDevice(_homeId int32, _nodeId byte) (retval2041 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeMaxBaudRate(_homeId int32, _nodeId byte) (retval2042 int32, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeVersion(_homeId int32, _nodeId byte) (retval2043 byte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeSecurity(_homeId int32, _nodeId byte) (retval2044 byte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeBasic(_homeId int32, _nodeId byte) (retval2045 byte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeGeneric(_homeId int32, _nodeId byte) (retval2046 byte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeSpecific(_homeId int32, _nodeId byte) (retval2047 byte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeType(_homeId int32, _nodeId byte) (retval2048 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeNeighbors(_homeId int32, _nodeId byte) (retval2049 *UInt32ListByte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeManufacturerName(_homeId int32, _nodeId byte) (retval2050 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeProductName(_homeId int32, _nodeId byte) (retval2051 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeName(_homeId int32, _nodeId byte) (retval2052 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeLocation(_homeId int32, _nodeId byte) (retval2053 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeManufacturerId(_homeId int32, _nodeId byte) (retval2054 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeProductType(_homeId int32, _nodeId byte) (retval2055 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeProductId(_homeId int32, _nodeId byte) (retval2056 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetNodeManufacturerName(_homeId int32, _nodeId byte, _manufacturerName string) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetNodeProductName(_homeId int32, _nodeId byte, _productName string) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetNodeName(_homeId int32, _nodeId byte, _nodeName string) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetNodeLocation(_homeId int32, _nodeId byte, _location string) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetNodeOn(_homeId int32, _nodeId byte) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetNodeOff(_homeId int32, _nodeId byte) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetNodeLevel(_homeId int32, _nodeId byte, _level byte) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsNodeInfoReceived(_homeId int32, _nodeId byte) (retval2064 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeClassInformation(_homeId int32, _nodeId byte, _commandClassId byte) (retval2065 *BoolGetNodeClassInformation, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsNodeAwake(_homeId int32, _nodeId byte) (retval2066 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsNodeFailed(_homeId int32, _nodeId byte) (retval2067 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeQueryStage(_homeId int32, _nodeId byte) (retval2068 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueLabel(_id *RemoteValueID) (retval2069 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetValueLabel(_id *RemoteValueID, _value string) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueUnits(_id *RemoteValueID) (retval2071 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetValueUnits(_id *RemoteValueID, _value string) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueHelp(_id *RemoteValueID) (retval2073 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetValueHelp(_id *RemoteValueID, _value string) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueMin(_id *RemoteValueID) (retval2075 int32, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueMax(_id *RemoteValueID) (retval2076 int32, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsValueReadOnly(_id *RemoteValueID) (retval2077 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsValueWriteOnly(_id *RemoteValueID) (retval2078 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsValueSet(_id *RemoteValueID) (retval2079 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsValuePolled(_id *RemoteValueID) (retval2080 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueAsBool(_id *RemoteValueID) (retval2081 *BoolBool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueAsByte(_id *RemoteValueID) (retval2082 *BoolUInt8, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueAsFloat(_id *RemoteValueID) (retval2083 *BoolFloat, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueAsInt(_id *RemoteValueID) (retval2084 *BoolInt, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueAsShort(_id *RemoteValueID) (retval2085 *BoolInt16, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueAsString(_id *RemoteValueID) (retval2086 *BoolString, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueListSelection_string(_id *RemoteValueID) (retval2087 *BoolString, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueListSelection_int32(_id *RemoteValueID) (retval2088 *BoolInt, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueListItems(_id *RemoteValueID) (retval2089 *BoolListString, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueFloatPrecision(_id *RemoteValueID) (retval2090 *BoolUInt8, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetValue_bool(_id *RemoteValueID, _value bool) (retval2091 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetValue_uint8(_id *RemoteValueID, _value byte) (retval2092 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetValue_uint8_uint8(_id *RemoteValueID, _value byte, _length byte) (retval2093 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetValue_float(_id *RemoteValueID, _value float64) (retval2094 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetValue_int32(_id *RemoteValueID, _value int32) (retval2095 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetValue_int16(_id *RemoteValueID, _value int16) (retval2096 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetValue_string(_id *RemoteValueID, _value string) (retval2097 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetValueListSelection(_id *RemoteValueID, _selectedItem string) (retval2098 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  RefreshValue(_id *RemoteValueID) (retval2099 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetChangeVerified(_id *RemoteValueID, _verify bool) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  PressButton(_id *RemoteValueID) (retval2101 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  ReleaseButton(_id *RemoteValueID) (retval2102 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNumSwitchPoints(_id *RemoteValueID) (retval2103 byte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetSwitchPoint(_id *RemoteValueID, _hours byte, _minutes byte, _setback byte) (retval2104 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  RemoveSwitchPoint(_id *RemoteValueID, _hours byte, _minutes byte) (retval2105 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  ClearSwitchPoints(_id *RemoteValueID) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetSwitchPoint(_id *RemoteValueID, _idx byte) (retval2107 *GetSwitchPointReturnStruct, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SwitchAllOn(_homeId int32) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SwitchAllOff(_homeId int32) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetConfigParam(_homeId int32, _nodeId byte, _param byte, _value int32, _size byte) (retval2110 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  RequestConfigParam(_homeId int32, _nodeId byte, _param byte) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  RequestAllConfigParams(_homeId int32, _nodeId byte) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNumGroups(_homeId int32, _nodeId byte) (retval2113 byte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetAssociations(_homeId int32, _nodeId byte, _groupIdx byte) (retval2114 *GetAssociationsReturnStruct, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetMaxAssociations(_homeId int32, _nodeId byte, _groupIdx byte) (retval2115 byte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetGroupLabel(_homeId int32, _nodeId byte, _groupIdx byte) (retval2116 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  AddAssociation(_homeId int32, _nodeId byte, _groupIdx byte, _targetNodeId byte) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  RemoveAssociation(_homeId int32, _nodeId byte, _groupIdx byte, _targetNodeId byte) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  ResetController(_homeId int32) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SoftReset(_homeId int32) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  BeginControllerCommand(_homeId int32, _command DriverControllerCommand, _highPower bool, _nodeId byte, _arg byte) (retval2121 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  CancelControllerCommand(_homeId int32) (retval2122 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  TestNetworkNode(_homeId int32, _nodeId byte, _count int32) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  TestNetwork(_homeId int32, _count int32) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  HealNetworkNode(_homeId int32, _nodeId byte, _doRR bool) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  HealNetwork(_homeId int32, _doRR bool) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNumScenes() (retval2127 byte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetAllScenes() (retval2128 *GetAllScenesReturnStruct, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  RemoveAllScenes(_homeId int32) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  CreateScene() (retval2130 byte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  RemoveScene(_sceneId byte) (retval2131 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  AddSceneValue_Bool(_sceneId byte, _valueId *RemoteValueID, _value bool) (retval2132 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  AddSceneValue_Uint8(_sceneId byte, _valueId *RemoteValueID, _value byte) (retval2133 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  AddSceneValue_Float(_sceneId byte, _valueId *RemoteValueID, _value float64) (retval2134 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  AddSceneValue_Int32(_sceneId byte, _valueId *RemoteValueID, _value int32) (retval2135 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  AddSceneValue_Int16(_sceneId byte, _valueId *RemoteValueID, _value int16) (retval2136 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  AddSceneValue_String(_sceneId byte, _valueId *RemoteValueID, _value string) (retval2137 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  AddSceneValueListSelection_String(_sceneId byte, _valueId *RemoteValueID, _value string) (retval2138 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  AddSceneValueListSelection_Int32(_sceneId byte, _valueId *RemoteValueID, _value int32) (retval2139 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  RemoveSceneValue(_sceneId byte, _valueId *RemoteValueID) (retval2140 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SceneGetValues(_sceneId byte) (retval2141 *SceneGetValuesReturnStruct, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SceneGetValueAsBool(_sceneId byte, _valueId *RemoteValueID) (retval2142 *BoolBool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SceneGetValueAsByte(_sceneId byte, _valueId *RemoteValueID) (retval2143 *BoolUInt8, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SceneGetValueAsFloat(_sceneId byte, _valueId *RemoteValueID) (retval2144 *BoolFloat, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SceneGetValueAsInt(_sceneId byte, _valueId *RemoteValueID) (retval2145 *BoolInt, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SceneGetValueAsShort(_sceneId byte, _valueId *RemoteValueID) (retval2146 *BoolInt16, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SceneGetValueAsString(_sceneId byte, _valueId *RemoteValueID) (retval2147 *BoolString, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SceneGetValueListSelection_string(_sceneId byte, _valueId *RemoteValueID) (retval2148 *BoolString, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SceneGetValueListSelection_Int32(_sceneId byte, _valueId *RemoteValueID) (retval2149 *BoolInt, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetSceneValue_Bool(_sceneId byte, _valueId *RemoteValueID, _value bool) (retval2150 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetSceneValue_Uint8(_sceneId byte, _valueId *RemoteValueID, _value byte) (retval2151 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetSceneValue_Float(_sceneId byte, _valueId *RemoteValueID, _value float64) (retval2152 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetSceneValue_Int32(_sceneId byte, _valueId *RemoteValueID, _value int32) (retval2153 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetSceneValue_Int16(_sceneId byte, _valueId *RemoteValueID, _value int16) (retval2154 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetSceneValue_string(_sceneId byte, _valueId *RemoteValueID, _value string) (retval2155 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetSceneValueListSelection_string(_sceneId byte, _valueId *RemoteValueID, _value string) (retval2156 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetSceneValueListSelection_Int32(_sceneId byte, _valueId *RemoteValueID, _value int32) (retval2157 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetSceneLabel(_sceneId byte) (retval2158 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetSceneLabel(_sceneId byte, _value string) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SceneExists(_sceneId byte) (retval2160 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  ActivateScene(_sceneId byte) (retval2161 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetDriverStatistics(_homeId int32) (retval2162 *GetDriverStatisticsReturnStruct, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeStatistics(_homeId int32, _nodeId byte) (retval2163 *GetNodeStatisticsReturnStruct, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SendAllValues() (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  ping() (err os.Error)\n")
  fmt.Fprint(os.Stderr, "\n")
  os.Exit(0)
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  var help bool
  var url http.URL
  var trans thrift.TTransport
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.BoolVar(&help, "help", false, "See usage string")
  flag.Parse()
  if help || flag.NArg() == 0 {
    flag.Usage()
  }
  
  if len(urlString) > 0 {
    url, err := http.ParseURL(urlString)
    if err != nil {
      fmt.Fprint(os.Stderr, "Error parsing URL: ", err.String(), "\n")
      flag.Usage()
    }
    host = url.Host
    useHttp = len(url.Scheme) <= 0 || url.Scheme == "http"
  } else if useHttp {
    _, err := http.ParseURL(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprint(os.Stderr, "Error parsing URL: ", err.String(), "\n")
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err os.Error
  if useHttp {
    trans, err = thrift.NewTHttpClient(url.Raw)
  } else {
    addr, err := net.ResolveTCPAddr("tcp", fmt.Sprint(host, ":", port))
    if err != nil {
      fmt.Fprint(os.Stderr, "Error resolving address", err.String())
      os.Exit(1)
    }
    trans, err = thrift.NewTNonblockingSocketAddr(addr)
    if framed {
      trans = thrift.NewTFramedTransport(trans)
    }
  }
  if err != nil {
    fmt.Fprint(os.Stderr, "Error creating transport", err.String())
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactory()
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
    break
  default:
    fmt.Fprint(os.Stderr, "Invalid protocol specified: ", protocol, "\n")
    Usage()
    os.Exit(1)
  }
  client := OpenZWave.NewRemoteManagerClientFactory(trans, protocolFactory)
  if err = trans.Open(); err != nil {
    fmt.Fprint(os.Stderr, "Error opening socket to ", host, ":", port, " ", err.String())
    os.Exit(1)
  }
  
  switch cmd {
  case "WriteConfig":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "WriteConfig requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2166 := (strconv.Atoi(flag.Arg(1)))
    if err2166 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.WriteConfig(value0))
    fmt.Print("\n")
    break
  case "GetControllerNodeId":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetControllerNodeId requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2167 := (strconv.Atoi(flag.Arg(1)))
    if err2167 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetControllerNodeId(value0))
    fmt.Print("\n")
    break
  case "GetSUCNodeId":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetSUCNodeId requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2168 := (strconv.Atoi(flag.Arg(1)))
    if err2168 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetSUCNodeId(value0))
    fmt.Print("\n")
    break
  case "IsPrimaryController":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "IsPrimaryController requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2169 := (strconv.Atoi(flag.Arg(1)))
    if err2169 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.IsPrimaryController(value0))
    fmt.Print("\n")
    break
  case "IsStaticUpdateController":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "IsStaticUpdateController requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2170 := (strconv.Atoi(flag.Arg(1)))
    if err2170 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.IsStaticUpdateController(value0))
    fmt.Print("\n")
    break
  case "IsBridgeController":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "IsBridgeController requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2171 := (strconv.Atoi(flag.Arg(1)))
    if err2171 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.IsBridgeController(value0))
    fmt.Print("\n")
    break
  case "GetLibraryVersion":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetLibraryVersion requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2172 := (strconv.Atoi(flag.Arg(1)))
    if err2172 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetLibraryVersion(value0))
    fmt.Print("\n")
    break
  case "GetLibraryTypeName":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetLibraryTypeName requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2173 := (strconv.Atoi(flag.Arg(1)))
    if err2173 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetLibraryTypeName(value0))
    fmt.Print("\n")
    break
  case "GetSendQueueCount":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetSendQueueCount requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2174 := (strconv.Atoi(flag.Arg(1)))
    if err2174 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetSendQueueCount(value0))
    fmt.Print("\n")
    break
  case "LogDriverStatistics":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "LogDriverStatistics requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2175 := (strconv.Atoi(flag.Arg(1)))
    if err2175 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.LogDriverStatistics(value0))
    fmt.Print("\n")
    break
  case "GetControllerInterfaceType":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetControllerInterfaceType requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2176 := (strconv.Atoi(flag.Arg(1)))
    if err2176 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetControllerInterfaceType(value0))
    fmt.Print("\n")
    break
  case "GetControllerPath":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetControllerPath requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2177 := (strconv.Atoi(flag.Arg(1)))
    if err2177 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetControllerPath(value0))
    fmt.Print("\n")
    break
  case "GetPollInterval":
    if flag.NArg() - 1 != 0 {
      fmt.Fprint(os.Stderr, "GetPollInterval requires 0 args\n")
      flag.Usage()
    }
    fmt.Print(client.GetPollInterval())
    fmt.Print("\n")
    break
  case "SetPollInterval":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetPollInterval requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2178 := (strconv.Atoi(flag.Arg(1)))
    if err2178 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2) == "true"
    value1 := argvalue1
    fmt.Print(client.SetPollInterval(value0, value1))
    fmt.Print("\n")
    break
  case "EnablePoll":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "EnablePoll requires 2 args\n")
      flag.Usage()
    }
    arg2180 := flag.Arg(1)
    mbTrans2181 := thrift.NewTMemoryBufferLen(len(arg2180))
    defer mbTrans2181.Close()
    _, err2182 := mbTrans2181.WriteString(arg2180)
    if err2182 != nil {
      Usage()
      return
    }
    factory2183 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2184 := factory2183.GetProtocol(mbTrans2181)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2185 := argvalue0.Read(jsProt2184)
    if err2185 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err2186 := (strconv.Atoi(flag.Arg(2)))
    if err2186 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.EnablePoll(value0, value1))
    fmt.Print("\n")
    break
  case "DisablePoll":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "DisablePoll requires 1 args\n")
      flag.Usage()
    }
    arg2187 := flag.Arg(1)
    mbTrans2188 := thrift.NewTMemoryBufferLen(len(arg2187))
    defer mbTrans2188.Close()
    _, err2189 := mbTrans2188.WriteString(arg2187)
    if err2189 != nil {
      Usage()
      return
    }
    factory2190 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2191 := factory2190.GetProtocol(mbTrans2188)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2192 := argvalue0.Read(jsProt2191)
    if err2192 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DisablePoll(value0))
    fmt.Print("\n")
    break
  case "isPolled":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "IsPolled requires 1 args\n")
      flag.Usage()
    }
    arg2193 := flag.Arg(1)
    mbTrans2194 := thrift.NewTMemoryBufferLen(len(arg2193))
    defer mbTrans2194.Close()
    _, err2195 := mbTrans2194.WriteString(arg2193)
    if err2195 != nil {
      Usage()
      return
    }
    factory2196 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2197 := factory2196.GetProtocol(mbTrans2194)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2198 := argvalue0.Read(jsProt2197)
    if err2198 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.IsPolled(value0))
    fmt.Print("\n")
    break
  case "SetPollIntensity":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetPollIntensity requires 2 args\n")
      flag.Usage()
    }
    arg2199 := flag.Arg(1)
    mbTrans2200 := thrift.NewTMemoryBufferLen(len(arg2199))
    defer mbTrans2200.Close()
    _, err2201 := mbTrans2200.WriteString(arg2199)
    if err2201 != nil {
      Usage()
      return
    }
    factory2202 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2203 := factory2202.GetProtocol(mbTrans2200)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2204 := argvalue0.Read(jsProt2203)
    if err2204 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err2205 := (strconv.Atoi(flag.Arg(2)))
    if err2205 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.SetPollIntensity(value0, value1))
    fmt.Print("\n")
    break
  case "RefreshNodeInfo":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "RefreshNodeInfo requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2206 := (strconv.Atoi(flag.Arg(1)))
    if err2206 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2207 := (strconv.Atoi(flag.Arg(2)))
    if err2207 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.RefreshNodeInfo(value0, value1))
    fmt.Print("\n")
    break
  case "RequestNodeState":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "RequestNodeState requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2208 := (strconv.Atoi(flag.Arg(1)))
    if err2208 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2209 := (strconv.Atoi(flag.Arg(2)))
    if err2209 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.RequestNodeState(value0, value1))
    fmt.Print("\n")
    break
  case "RequestNodeDynamic":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "RequestNodeDynamic requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2210 := (strconv.Atoi(flag.Arg(1)))
    if err2210 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2211 := (strconv.Atoi(flag.Arg(2)))
    if err2211 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.RequestNodeDynamic(value0, value1))
    fmt.Print("\n")
    break
  case "IsNodeListeningDevice":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "IsNodeListeningDevice requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2212 := (strconv.Atoi(flag.Arg(1)))
    if err2212 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2213 := (strconv.Atoi(flag.Arg(2)))
    if err2213 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.IsNodeListeningDevice(value0, value1))
    fmt.Print("\n")
    break
  case "IsNodeFrequentListeningDevice":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "IsNodeFrequentListeningDevice requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2214 := (strconv.Atoi(flag.Arg(1)))
    if err2214 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2215 := (strconv.Atoi(flag.Arg(2)))
    if err2215 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.IsNodeFrequentListeningDevice(value0, value1))
    fmt.Print("\n")
    break
  case "IsNodeBeamingDevice":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "IsNodeBeamingDevice requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2216 := (strconv.Atoi(flag.Arg(1)))
    if err2216 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2217 := (strconv.Atoi(flag.Arg(2)))
    if err2217 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.IsNodeBeamingDevice(value0, value1))
    fmt.Print("\n")
    break
  case "IsNodeRoutingDevice":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "IsNodeRoutingDevice requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2218 := (strconv.Atoi(flag.Arg(1)))
    if err2218 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2219 := (strconv.Atoi(flag.Arg(2)))
    if err2219 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.IsNodeRoutingDevice(value0, value1))
    fmt.Print("\n")
    break
  case "IsNodeSecurityDevice":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "IsNodeSecurityDevice requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2220 := (strconv.Atoi(flag.Arg(1)))
    if err2220 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2221 := (strconv.Atoi(flag.Arg(2)))
    if err2221 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.IsNodeSecurityDevice(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeMaxBaudRate":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeMaxBaudRate requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2222 := (strconv.Atoi(flag.Arg(1)))
    if err2222 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2223 := (strconv.Atoi(flag.Arg(2)))
    if err2223 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeMaxBaudRate(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeVersion":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeVersion requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2224 := (strconv.Atoi(flag.Arg(1)))
    if err2224 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2225 := (strconv.Atoi(flag.Arg(2)))
    if err2225 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeVersion(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeSecurity":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeSecurity requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2226 := (strconv.Atoi(flag.Arg(1)))
    if err2226 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2227 := (strconv.Atoi(flag.Arg(2)))
    if err2227 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeSecurity(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeBasic":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeBasic requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2228 := (strconv.Atoi(flag.Arg(1)))
    if err2228 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2229 := (strconv.Atoi(flag.Arg(2)))
    if err2229 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeBasic(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeGeneric":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeGeneric requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2230 := (strconv.Atoi(flag.Arg(1)))
    if err2230 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2231 := (strconv.Atoi(flag.Arg(2)))
    if err2231 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeGeneric(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeSpecific":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeSpecific requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2232 := (strconv.Atoi(flag.Arg(1)))
    if err2232 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2233 := (strconv.Atoi(flag.Arg(2)))
    if err2233 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeSpecific(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeType":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeType requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2234 := (strconv.Atoi(flag.Arg(1)))
    if err2234 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2235 := (strconv.Atoi(flag.Arg(2)))
    if err2235 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeType(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeNeighbors":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeNeighbors requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2236 := (strconv.Atoi(flag.Arg(1)))
    if err2236 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2237 := (strconv.Atoi(flag.Arg(2)))
    if err2237 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeNeighbors(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeManufacturerName":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeManufacturerName requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2238 := (strconv.Atoi(flag.Arg(1)))
    if err2238 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2239 := (strconv.Atoi(flag.Arg(2)))
    if err2239 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeManufacturerName(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeProductName":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeProductName requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2240 := (strconv.Atoi(flag.Arg(1)))
    if err2240 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2241 := (strconv.Atoi(flag.Arg(2)))
    if err2241 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeProductName(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeName":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeName requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2242 := (strconv.Atoi(flag.Arg(1)))
    if err2242 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2243 := (strconv.Atoi(flag.Arg(2)))
    if err2243 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeName(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeLocation":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeLocation requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2244 := (strconv.Atoi(flag.Arg(1)))
    if err2244 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2245 := (strconv.Atoi(flag.Arg(2)))
    if err2245 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeLocation(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeManufacturerId":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeManufacturerId requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2246 := (strconv.Atoi(flag.Arg(1)))
    if err2246 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2247 := (strconv.Atoi(flag.Arg(2)))
    if err2247 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeManufacturerId(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeProductType":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeProductType requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2248 := (strconv.Atoi(flag.Arg(1)))
    if err2248 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2249 := (strconv.Atoi(flag.Arg(2)))
    if err2249 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeProductType(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeProductId":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeProductId requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2250 := (strconv.Atoi(flag.Arg(1)))
    if err2250 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2251 := (strconv.Atoi(flag.Arg(2)))
    if err2251 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeProductId(value0, value1))
    fmt.Print("\n")
    break
  case "SetNodeManufacturerName":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetNodeManufacturerName requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2252 := (strconv.Atoi(flag.Arg(1)))
    if err2252 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2253 := (strconv.Atoi(flag.Arg(2)))
    if err2253 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.SetNodeManufacturerName(value0, value1, value2))
    fmt.Print("\n")
    break
  case "SetNodeProductName":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetNodeProductName requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2255 := (strconv.Atoi(flag.Arg(1)))
    if err2255 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2256 := (strconv.Atoi(flag.Arg(2)))
    if err2256 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.SetNodeProductName(value0, value1, value2))
    fmt.Print("\n")
    break
  case "SetNodeName":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetNodeName requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2258 := (strconv.Atoi(flag.Arg(1)))
    if err2258 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2259 := (strconv.Atoi(flag.Arg(2)))
    if err2259 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.SetNodeName(value0, value1, value2))
    fmt.Print("\n")
    break
  case "SetNodeLocation":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetNodeLocation requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2261 := (strconv.Atoi(flag.Arg(1)))
    if err2261 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2262 := (strconv.Atoi(flag.Arg(2)))
    if err2262 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.SetNodeLocation(value0, value1, value2))
    fmt.Print("\n")
    break
  case "SetNodeOn":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetNodeOn requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2264 := (strconv.Atoi(flag.Arg(1)))
    if err2264 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2265 := (strconv.Atoi(flag.Arg(2)))
    if err2265 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.SetNodeOn(value0, value1))
    fmt.Print("\n")
    break
  case "SetNodeOff":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetNodeOff requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2266 := (strconv.Atoi(flag.Arg(1)))
    if err2266 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2267 := (strconv.Atoi(flag.Arg(2)))
    if err2267 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.SetNodeOff(value0, value1))
    fmt.Print("\n")
    break
  case "SetNodeLevel":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetNodeLevel requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2268 := (strconv.Atoi(flag.Arg(1)))
    if err2268 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2269 := (strconv.Atoi(flag.Arg(2)))
    if err2269 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    tmp2, err2270 := (strconv.Atoi(flag.Arg(3)))
    if err2270 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    fmt.Print(client.SetNodeLevel(value0, value1, value2))
    fmt.Print("\n")
    break
  case "IsNodeInfoReceived":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "IsNodeInfoReceived requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2271 := (strconv.Atoi(flag.Arg(1)))
    if err2271 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2272 := (strconv.Atoi(flag.Arg(2)))
    if err2272 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.IsNodeInfoReceived(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeClassInformation":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "GetNodeClassInformation requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2273 := (strconv.Atoi(flag.Arg(1)))
    if err2273 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2274 := (strconv.Atoi(flag.Arg(2)))
    if err2274 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    tmp2, err2275 := (strconv.Atoi(flag.Arg(3)))
    if err2275 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    fmt.Print(client.GetNodeClassInformation(value0, value1, value2))
    fmt.Print("\n")
    break
  case "IsNodeAwake":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "IsNodeAwake requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2276 := (strconv.Atoi(flag.Arg(1)))
    if err2276 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2277 := (strconv.Atoi(flag.Arg(2)))
    if err2277 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.IsNodeAwake(value0, value1))
    fmt.Print("\n")
    break
  case "IsNodeFailed":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "IsNodeFailed requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2278 := (strconv.Atoi(flag.Arg(1)))
    if err2278 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2279 := (strconv.Atoi(flag.Arg(2)))
    if err2279 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.IsNodeFailed(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeQueryStage":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeQueryStage requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2280 := (strconv.Atoi(flag.Arg(1)))
    if err2280 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2281 := (strconv.Atoi(flag.Arg(2)))
    if err2281 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeQueryStage(value0, value1))
    fmt.Print("\n")
    break
  case "GetValueLabel":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueLabel requires 1 args\n")
      flag.Usage()
    }
    arg2282 := flag.Arg(1)
    mbTrans2283 := thrift.NewTMemoryBufferLen(len(arg2282))
    defer mbTrans2283.Close()
    _, err2284 := mbTrans2283.WriteString(arg2282)
    if err2284 != nil {
      Usage()
      return
    }
    factory2285 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2286 := factory2285.GetProtocol(mbTrans2283)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2287 := argvalue0.Read(jsProt2286)
    if err2287 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueLabel(value0))
    fmt.Print("\n")
    break
  case "SetValueLabel":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetValueLabel requires 2 args\n")
      flag.Usage()
    }
    arg2288 := flag.Arg(1)
    mbTrans2289 := thrift.NewTMemoryBufferLen(len(arg2288))
    defer mbTrans2289.Close()
    _, err2290 := mbTrans2289.WriteString(arg2288)
    if err2290 != nil {
      Usage()
      return
    }
    factory2291 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2292 := factory2291.GetProtocol(mbTrans2289)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2293 := argvalue0.Read(jsProt2292)
    if err2293 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.SetValueLabel(value0, value1))
    fmt.Print("\n")
    break
  case "GetValueUnits":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueUnits requires 1 args\n")
      flag.Usage()
    }
    arg2295 := flag.Arg(1)
    mbTrans2296 := thrift.NewTMemoryBufferLen(len(arg2295))
    defer mbTrans2296.Close()
    _, err2297 := mbTrans2296.WriteString(arg2295)
    if err2297 != nil {
      Usage()
      return
    }
    factory2298 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2299 := factory2298.GetProtocol(mbTrans2296)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2300 := argvalue0.Read(jsProt2299)
    if err2300 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueUnits(value0))
    fmt.Print("\n")
    break
  case "SetValueUnits":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetValueUnits requires 2 args\n")
      flag.Usage()
    }
    arg2301 := flag.Arg(1)
    mbTrans2302 := thrift.NewTMemoryBufferLen(len(arg2301))
    defer mbTrans2302.Close()
    _, err2303 := mbTrans2302.WriteString(arg2301)
    if err2303 != nil {
      Usage()
      return
    }
    factory2304 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2305 := factory2304.GetProtocol(mbTrans2302)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2306 := argvalue0.Read(jsProt2305)
    if err2306 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.SetValueUnits(value0, value1))
    fmt.Print("\n")
    break
  case "GetValueHelp":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueHelp requires 1 args\n")
      flag.Usage()
    }
    arg2308 := flag.Arg(1)
    mbTrans2309 := thrift.NewTMemoryBufferLen(len(arg2308))
    defer mbTrans2309.Close()
    _, err2310 := mbTrans2309.WriteString(arg2308)
    if err2310 != nil {
      Usage()
      return
    }
    factory2311 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2312 := factory2311.GetProtocol(mbTrans2309)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2313 := argvalue0.Read(jsProt2312)
    if err2313 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueHelp(value0))
    fmt.Print("\n")
    break
  case "SetValueHelp":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetValueHelp requires 2 args\n")
      flag.Usage()
    }
    arg2314 := flag.Arg(1)
    mbTrans2315 := thrift.NewTMemoryBufferLen(len(arg2314))
    defer mbTrans2315.Close()
    _, err2316 := mbTrans2315.WriteString(arg2314)
    if err2316 != nil {
      Usage()
      return
    }
    factory2317 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2318 := factory2317.GetProtocol(mbTrans2315)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2319 := argvalue0.Read(jsProt2318)
    if err2319 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.SetValueHelp(value0, value1))
    fmt.Print("\n")
    break
  case "GetValueMin":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueMin requires 1 args\n")
      flag.Usage()
    }
    arg2321 := flag.Arg(1)
    mbTrans2322 := thrift.NewTMemoryBufferLen(len(arg2321))
    defer mbTrans2322.Close()
    _, err2323 := mbTrans2322.WriteString(arg2321)
    if err2323 != nil {
      Usage()
      return
    }
    factory2324 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2325 := factory2324.GetProtocol(mbTrans2322)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2326 := argvalue0.Read(jsProt2325)
    if err2326 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueMin(value0))
    fmt.Print("\n")
    break
  case "GetValueMax":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueMax requires 1 args\n")
      flag.Usage()
    }
    arg2327 := flag.Arg(1)
    mbTrans2328 := thrift.NewTMemoryBufferLen(len(arg2327))
    defer mbTrans2328.Close()
    _, err2329 := mbTrans2328.WriteString(arg2327)
    if err2329 != nil {
      Usage()
      return
    }
    factory2330 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2331 := factory2330.GetProtocol(mbTrans2328)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2332 := argvalue0.Read(jsProt2331)
    if err2332 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueMax(value0))
    fmt.Print("\n")
    break
  case "IsValueReadOnly":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "IsValueReadOnly requires 1 args\n")
      flag.Usage()
    }
    arg2333 := flag.Arg(1)
    mbTrans2334 := thrift.NewTMemoryBufferLen(len(arg2333))
    defer mbTrans2334.Close()
    _, err2335 := mbTrans2334.WriteString(arg2333)
    if err2335 != nil {
      Usage()
      return
    }
    factory2336 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2337 := factory2336.GetProtocol(mbTrans2334)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2338 := argvalue0.Read(jsProt2337)
    if err2338 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.IsValueReadOnly(value0))
    fmt.Print("\n")
    break
  case "IsValueWriteOnly":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "IsValueWriteOnly requires 1 args\n")
      flag.Usage()
    }
    arg2339 := flag.Arg(1)
    mbTrans2340 := thrift.NewTMemoryBufferLen(len(arg2339))
    defer mbTrans2340.Close()
    _, err2341 := mbTrans2340.WriteString(arg2339)
    if err2341 != nil {
      Usage()
      return
    }
    factory2342 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2343 := factory2342.GetProtocol(mbTrans2340)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2344 := argvalue0.Read(jsProt2343)
    if err2344 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.IsValueWriteOnly(value0))
    fmt.Print("\n")
    break
  case "IsValueSet":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "IsValueSet requires 1 args\n")
      flag.Usage()
    }
    arg2345 := flag.Arg(1)
    mbTrans2346 := thrift.NewTMemoryBufferLen(len(arg2345))
    defer mbTrans2346.Close()
    _, err2347 := mbTrans2346.WriteString(arg2345)
    if err2347 != nil {
      Usage()
      return
    }
    factory2348 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2349 := factory2348.GetProtocol(mbTrans2346)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2350 := argvalue0.Read(jsProt2349)
    if err2350 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.IsValueSet(value0))
    fmt.Print("\n")
    break
  case "IsValuePolled":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "IsValuePolled requires 1 args\n")
      flag.Usage()
    }
    arg2351 := flag.Arg(1)
    mbTrans2352 := thrift.NewTMemoryBufferLen(len(arg2351))
    defer mbTrans2352.Close()
    _, err2353 := mbTrans2352.WriteString(arg2351)
    if err2353 != nil {
      Usage()
      return
    }
    factory2354 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2355 := factory2354.GetProtocol(mbTrans2352)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2356 := argvalue0.Read(jsProt2355)
    if err2356 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.IsValuePolled(value0))
    fmt.Print("\n")
    break
  case "GetValueAsBool":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueAsBool requires 1 args\n")
      flag.Usage()
    }
    arg2357 := flag.Arg(1)
    mbTrans2358 := thrift.NewTMemoryBufferLen(len(arg2357))
    defer mbTrans2358.Close()
    _, err2359 := mbTrans2358.WriteString(arg2357)
    if err2359 != nil {
      Usage()
      return
    }
    factory2360 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2361 := factory2360.GetProtocol(mbTrans2358)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2362 := argvalue0.Read(jsProt2361)
    if err2362 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueAsBool(value0))
    fmt.Print("\n")
    break
  case "GetValueAsByte":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueAsByte requires 1 args\n")
      flag.Usage()
    }
    arg2363 := flag.Arg(1)
    mbTrans2364 := thrift.NewTMemoryBufferLen(len(arg2363))
    defer mbTrans2364.Close()
    _, err2365 := mbTrans2364.WriteString(arg2363)
    if err2365 != nil {
      Usage()
      return
    }
    factory2366 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2367 := factory2366.GetProtocol(mbTrans2364)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2368 := argvalue0.Read(jsProt2367)
    if err2368 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueAsByte(value0))
    fmt.Print("\n")
    break
  case "GetValueAsFloat":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueAsFloat requires 1 args\n")
      flag.Usage()
    }
    arg2369 := flag.Arg(1)
    mbTrans2370 := thrift.NewTMemoryBufferLen(len(arg2369))
    defer mbTrans2370.Close()
    _, err2371 := mbTrans2370.WriteString(arg2369)
    if err2371 != nil {
      Usage()
      return
    }
    factory2372 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2373 := factory2372.GetProtocol(mbTrans2370)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2374 := argvalue0.Read(jsProt2373)
    if err2374 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueAsFloat(value0))
    fmt.Print("\n")
    break
  case "GetValueAsInt":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueAsInt requires 1 args\n")
      flag.Usage()
    }
    arg2375 := flag.Arg(1)
    mbTrans2376 := thrift.NewTMemoryBufferLen(len(arg2375))
    defer mbTrans2376.Close()
    _, err2377 := mbTrans2376.WriteString(arg2375)
    if err2377 != nil {
      Usage()
      return
    }
    factory2378 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2379 := factory2378.GetProtocol(mbTrans2376)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2380 := argvalue0.Read(jsProt2379)
    if err2380 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueAsInt(value0))
    fmt.Print("\n")
    break
  case "GetValueAsShort":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueAsShort requires 1 args\n")
      flag.Usage()
    }
    arg2381 := flag.Arg(1)
    mbTrans2382 := thrift.NewTMemoryBufferLen(len(arg2381))
    defer mbTrans2382.Close()
    _, err2383 := mbTrans2382.WriteString(arg2381)
    if err2383 != nil {
      Usage()
      return
    }
    factory2384 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2385 := factory2384.GetProtocol(mbTrans2382)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2386 := argvalue0.Read(jsProt2385)
    if err2386 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueAsShort(value0))
    fmt.Print("\n")
    break
  case "GetValueAsString":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueAsString requires 1 args\n")
      flag.Usage()
    }
    arg2387 := flag.Arg(1)
    mbTrans2388 := thrift.NewTMemoryBufferLen(len(arg2387))
    defer mbTrans2388.Close()
    _, err2389 := mbTrans2388.WriteString(arg2387)
    if err2389 != nil {
      Usage()
      return
    }
    factory2390 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2391 := factory2390.GetProtocol(mbTrans2388)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2392 := argvalue0.Read(jsProt2391)
    if err2392 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueAsString(value0))
    fmt.Print("\n")
    break
  case "GetValueListSelection_string":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueListSelectionString requires 1 args\n")
      flag.Usage()
    }
    arg2393 := flag.Arg(1)
    mbTrans2394 := thrift.NewTMemoryBufferLen(len(arg2393))
    defer mbTrans2394.Close()
    _, err2395 := mbTrans2394.WriteString(arg2393)
    if err2395 != nil {
      Usage()
      return
    }
    factory2396 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2397 := factory2396.GetProtocol(mbTrans2394)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2398 := argvalue0.Read(jsProt2397)
    if err2398 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueListSelectionString(value0))
    fmt.Print("\n")
    break
  case "GetValueListSelection_int32":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueListSelectionInt32 requires 1 args\n")
      flag.Usage()
    }
    arg2399 := flag.Arg(1)
    mbTrans2400 := thrift.NewTMemoryBufferLen(len(arg2399))
    defer mbTrans2400.Close()
    _, err2401 := mbTrans2400.WriteString(arg2399)
    if err2401 != nil {
      Usage()
      return
    }
    factory2402 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2403 := factory2402.GetProtocol(mbTrans2400)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2404 := argvalue0.Read(jsProt2403)
    if err2404 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueListSelectionInt32(value0))
    fmt.Print("\n")
    break
  case "GetValueListItems":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueListItems requires 1 args\n")
      flag.Usage()
    }
    arg2405 := flag.Arg(1)
    mbTrans2406 := thrift.NewTMemoryBufferLen(len(arg2405))
    defer mbTrans2406.Close()
    _, err2407 := mbTrans2406.WriteString(arg2405)
    if err2407 != nil {
      Usage()
      return
    }
    factory2408 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2409 := factory2408.GetProtocol(mbTrans2406)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2410 := argvalue0.Read(jsProt2409)
    if err2410 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueListItems(value0))
    fmt.Print("\n")
    break
  case "GetValueFloatPrecision":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueFloatPrecision requires 1 args\n")
      flag.Usage()
    }
    arg2411 := flag.Arg(1)
    mbTrans2412 := thrift.NewTMemoryBufferLen(len(arg2411))
    defer mbTrans2412.Close()
    _, err2413 := mbTrans2412.WriteString(arg2411)
    if err2413 != nil {
      Usage()
      return
    }
    factory2414 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2415 := factory2414.GetProtocol(mbTrans2412)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2416 := argvalue0.Read(jsProt2415)
    if err2416 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueFloatPrecision(value0))
    fmt.Print("\n")
    break
  case "SetValue_bool":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetValueBool requires 2 args\n")
      flag.Usage()
    }
    arg2417 := flag.Arg(1)
    mbTrans2418 := thrift.NewTMemoryBufferLen(len(arg2417))
    defer mbTrans2418.Close()
    _, err2419 := mbTrans2418.WriteString(arg2417)
    if err2419 != nil {
      Usage()
      return
    }
    factory2420 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2421 := factory2420.GetProtocol(mbTrans2418)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2422 := argvalue0.Read(jsProt2421)
    if err2422 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2) == "true"
    value1 := argvalue1
    fmt.Print(client.SetValueBool(value0, value1))
    fmt.Print("\n")
    break
  case "SetValue_uint8":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetValueUint8 requires 2 args\n")
      flag.Usage()
    }
    arg2424 := flag.Arg(1)
    mbTrans2425 := thrift.NewTMemoryBufferLen(len(arg2424))
    defer mbTrans2425.Close()
    _, err2426 := mbTrans2425.WriteString(arg2424)
    if err2426 != nil {
      Usage()
      return
    }
    factory2427 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2428 := factory2427.GetProtocol(mbTrans2425)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2429 := argvalue0.Read(jsProt2428)
    if err2429 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err2430 := (strconv.Atoi(flag.Arg(2)))
    if err2430 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.SetValueUint8(value0, value1))
    fmt.Print("\n")
    break
  case "SetValue_uint8_uint8":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetValueUint8Uint8 requires 3 args\n")
      flag.Usage()
    }
    arg2431 := flag.Arg(1)
    mbTrans2432 := thrift.NewTMemoryBufferLen(len(arg2431))
    defer mbTrans2432.Close()
    _, err2433 := mbTrans2432.WriteString(arg2431)
    if err2433 != nil {
      Usage()
      return
    }
    factory2434 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2435 := factory2434.GetProtocol(mbTrans2432)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2436 := argvalue0.Read(jsProt2435)
    if err2436 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err2437 := (strconv.Atoi(flag.Arg(2)))
    if err2437 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    tmp2, err2438 := (strconv.Atoi(flag.Arg(3)))
    if err2438 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    fmt.Print(client.SetValueUint8Uint8(value0, value1, value2))
    fmt.Print("\n")
    break
  case "SetValue_float":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetValueFloat requires 2 args\n")
      flag.Usage()
    }
    arg2439 := flag.Arg(1)
    mbTrans2440 := thrift.NewTMemoryBufferLen(len(arg2439))
    defer mbTrans2440.Close()
    _, err2441 := mbTrans2440.WriteString(arg2439)
    if err2441 != nil {
      Usage()
      return
    }
    factory2442 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2443 := factory2442.GetProtocol(mbTrans2440)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2444 := argvalue0.Read(jsProt2443)
    if err2444 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1, err2445 := (strconv.Atof64(flag.Arg(2)))
    if err2445 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SetValueFloat(value0, value1))
    fmt.Print("\n")
    break
  case "SetValue_int32":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetValueInt32 requires 2 args\n")
      flag.Usage()
    }
    arg2446 := flag.Arg(1)
    mbTrans2447 := thrift.NewTMemoryBufferLen(len(arg2446))
    defer mbTrans2447.Close()
    _, err2448 := mbTrans2447.WriteString(arg2446)
    if err2448 != nil {
      Usage()
      return
    }
    factory2449 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2450 := factory2449.GetProtocol(mbTrans2447)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2451 := argvalue0.Read(jsProt2450)
    if err2451 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err2452 := (strconv.Atoi(flag.Arg(2)))
    if err2452 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    fmt.Print(client.SetValueInt32(value0, value1))
    fmt.Print("\n")
    break
  case "SetValue_int16":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetValueInt16 requires 2 args\n")
      flag.Usage()
    }
    arg2453 := flag.Arg(1)
    mbTrans2454 := thrift.NewTMemoryBufferLen(len(arg2453))
    defer mbTrans2454.Close()
    _, err2455 := mbTrans2454.WriteString(arg2453)
    if err2455 != nil {
      Usage()
      return
    }
    factory2456 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2457 := factory2456.GetProtocol(mbTrans2454)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2458 := argvalue0.Read(jsProt2457)
    if err2458 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err2459 := (strconv.Atoi(flag.Arg(2)))
    if err2459 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.SetValueInt16(value0, value1))
    fmt.Print("\n")
    break
  case "SetValue_string":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetValueString requires 2 args\n")
      flag.Usage()
    }
    arg2460 := flag.Arg(1)
    mbTrans2461 := thrift.NewTMemoryBufferLen(len(arg2460))
    defer mbTrans2461.Close()
    _, err2462 := mbTrans2461.WriteString(arg2460)
    if err2462 != nil {
      Usage()
      return
    }
    factory2463 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2464 := factory2463.GetProtocol(mbTrans2461)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2465 := argvalue0.Read(jsProt2464)
    if err2465 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.SetValueString(value0, value1))
    fmt.Print("\n")
    break
  case "SetValueListSelection":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetValueListSelection requires 2 args\n")
      flag.Usage()
    }
    arg2467 := flag.Arg(1)
    mbTrans2468 := thrift.NewTMemoryBufferLen(len(arg2467))
    defer mbTrans2468.Close()
    _, err2469 := mbTrans2468.WriteString(arg2467)
    if err2469 != nil {
      Usage()
      return
    }
    factory2470 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2471 := factory2470.GetProtocol(mbTrans2468)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2472 := argvalue0.Read(jsProt2471)
    if err2472 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.SetValueListSelection(value0, value1))
    fmt.Print("\n")
    break
  case "RefreshValue":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "RefreshValue requires 1 args\n")
      flag.Usage()
    }
    arg2474 := flag.Arg(1)
    mbTrans2475 := thrift.NewTMemoryBufferLen(len(arg2474))
    defer mbTrans2475.Close()
    _, err2476 := mbTrans2475.WriteString(arg2474)
    if err2476 != nil {
      Usage()
      return
    }
    factory2477 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2478 := factory2477.GetProtocol(mbTrans2475)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2479 := argvalue0.Read(jsProt2478)
    if err2479 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RefreshValue(value0))
    fmt.Print("\n")
    break
  case "SetChangeVerified":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetChangeVerified requires 2 args\n")
      flag.Usage()
    }
    arg2480 := flag.Arg(1)
    mbTrans2481 := thrift.NewTMemoryBufferLen(len(arg2480))
    defer mbTrans2481.Close()
    _, err2482 := mbTrans2481.WriteString(arg2480)
    if err2482 != nil {
      Usage()
      return
    }
    factory2483 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2484 := factory2483.GetProtocol(mbTrans2481)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2485 := argvalue0.Read(jsProt2484)
    if err2485 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2) == "true"
    value1 := argvalue1
    fmt.Print(client.SetChangeVerified(value0, value1))
    fmt.Print("\n")
    break
  case "PressButton":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "PressButton requires 1 args\n")
      flag.Usage()
    }
    arg2487 := flag.Arg(1)
    mbTrans2488 := thrift.NewTMemoryBufferLen(len(arg2487))
    defer mbTrans2488.Close()
    _, err2489 := mbTrans2488.WriteString(arg2487)
    if err2489 != nil {
      Usage()
      return
    }
    factory2490 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2491 := factory2490.GetProtocol(mbTrans2488)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2492 := argvalue0.Read(jsProt2491)
    if err2492 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.PressButton(value0))
    fmt.Print("\n")
    break
  case "ReleaseButton":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "ReleaseButton requires 1 args\n")
      flag.Usage()
    }
    arg2493 := flag.Arg(1)
    mbTrans2494 := thrift.NewTMemoryBufferLen(len(arg2493))
    defer mbTrans2494.Close()
    _, err2495 := mbTrans2494.WriteString(arg2493)
    if err2495 != nil {
      Usage()
      return
    }
    factory2496 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2497 := factory2496.GetProtocol(mbTrans2494)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2498 := argvalue0.Read(jsProt2497)
    if err2498 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ReleaseButton(value0))
    fmt.Print("\n")
    break
  case "GetNumSwitchPoints":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetNumSwitchPoints requires 1 args\n")
      flag.Usage()
    }
    arg2499 := flag.Arg(1)
    mbTrans2500 := thrift.NewTMemoryBufferLen(len(arg2499))
    defer mbTrans2500.Close()
    _, err2501 := mbTrans2500.WriteString(arg2499)
    if err2501 != nil {
      Usage()
      return
    }
    factory2502 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2503 := factory2502.GetProtocol(mbTrans2500)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2504 := argvalue0.Read(jsProt2503)
    if err2504 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetNumSwitchPoints(value0))
    fmt.Print("\n")
    break
  case "SetSwitchPoint":
    if flag.NArg() - 1 != 4 {
      fmt.Fprint(os.Stderr, "SetSwitchPoint requires 4 args\n")
      flag.Usage()
    }
    arg2505 := flag.Arg(1)
    mbTrans2506 := thrift.NewTMemoryBufferLen(len(arg2505))
    defer mbTrans2506.Close()
    _, err2507 := mbTrans2506.WriteString(arg2505)
    if err2507 != nil {
      Usage()
      return
    }
    factory2508 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2509 := factory2508.GetProtocol(mbTrans2506)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2510 := argvalue0.Read(jsProt2509)
    if err2510 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err2511 := (strconv.Atoi(flag.Arg(2)))
    if err2511 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    tmp2, err2512 := (strconv.Atoi(flag.Arg(3)))
    if err2512 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    tmp3, err2513 := (strconv.Atoi(flag.Arg(4)))
    if err2513 != nil {
      Usage()
      return
    }
    argvalue3 := byte(tmp3)
    value3 := argvalue3
    fmt.Print(client.SetSwitchPoint(value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "RemoveSwitchPoint":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "RemoveSwitchPoint requires 3 args\n")
      flag.Usage()
    }
    arg2514 := flag.Arg(1)
    mbTrans2515 := thrift.NewTMemoryBufferLen(len(arg2514))
    defer mbTrans2515.Close()
    _, err2516 := mbTrans2515.WriteString(arg2514)
    if err2516 != nil {
      Usage()
      return
    }
    factory2517 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2518 := factory2517.GetProtocol(mbTrans2515)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2519 := argvalue0.Read(jsProt2518)
    if err2519 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err2520 := (strconv.Atoi(flag.Arg(2)))
    if err2520 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    tmp2, err2521 := (strconv.Atoi(flag.Arg(3)))
    if err2521 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    fmt.Print(client.RemoveSwitchPoint(value0, value1, value2))
    fmt.Print("\n")
    break
  case "ClearSwitchPoints":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "ClearSwitchPoints requires 1 args\n")
      flag.Usage()
    }
    arg2522 := flag.Arg(1)
    mbTrans2523 := thrift.NewTMemoryBufferLen(len(arg2522))
    defer mbTrans2523.Close()
    _, err2524 := mbTrans2523.WriteString(arg2522)
    if err2524 != nil {
      Usage()
      return
    }
    factory2525 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2526 := factory2525.GetProtocol(mbTrans2523)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2527 := argvalue0.Read(jsProt2526)
    if err2527 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ClearSwitchPoints(value0))
    fmt.Print("\n")
    break
  case "GetSwitchPoint":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetSwitchPoint requires 2 args\n")
      flag.Usage()
    }
    arg2528 := flag.Arg(1)
    mbTrans2529 := thrift.NewTMemoryBufferLen(len(arg2528))
    defer mbTrans2529.Close()
    _, err2530 := mbTrans2529.WriteString(arg2528)
    if err2530 != nil {
      Usage()
      return
    }
    factory2531 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2532 := factory2531.GetProtocol(mbTrans2529)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2533 := argvalue0.Read(jsProt2532)
    if err2533 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err2534 := (strconv.Atoi(flag.Arg(2)))
    if err2534 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetSwitchPoint(value0, value1))
    fmt.Print("\n")
    break
  case "SwitchAllOn":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "SwitchAllOn requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2535 := (strconv.Atoi(flag.Arg(1)))
    if err2535 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.SwitchAllOn(value0))
    fmt.Print("\n")
    break
  case "SwitchAllOff":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "SwitchAllOff requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2536 := (strconv.Atoi(flag.Arg(1)))
    if err2536 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.SwitchAllOff(value0))
    fmt.Print("\n")
    break
  case "SetConfigParam":
    if flag.NArg() - 1 != 5 {
      fmt.Fprint(os.Stderr, "SetConfigParam requires 5 args\n")
      flag.Usage()
    }
    tmp0, err2537 := (strconv.Atoi(flag.Arg(1)))
    if err2537 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2538 := (strconv.Atoi(flag.Arg(2)))
    if err2538 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    tmp2, err2539 := (strconv.Atoi(flag.Arg(3)))
    if err2539 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    tmp3, err2540 := (strconv.Atoi(flag.Arg(4)))
    if err2540 != nil {
      Usage()
      return
    }
    argvalue3 := int32(tmp3)
    value3 := argvalue3
    tmp4, err2541 := (strconv.Atoi(flag.Arg(5)))
    if err2541 != nil {
      Usage()
      return
    }
    argvalue4 := byte(tmp4)
    value4 := argvalue4
    fmt.Print(client.SetConfigParam(value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "RequestConfigParam":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "RequestConfigParam requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2542 := (strconv.Atoi(flag.Arg(1)))
    if err2542 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2543 := (strconv.Atoi(flag.Arg(2)))
    if err2543 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    tmp2, err2544 := (strconv.Atoi(flag.Arg(3)))
    if err2544 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    fmt.Print(client.RequestConfigParam(value0, value1, value2))
    fmt.Print("\n")
    break
  case "RequestAllConfigParams":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "RequestAllConfigParams requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2545 := (strconv.Atoi(flag.Arg(1)))
    if err2545 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2546 := (strconv.Atoi(flag.Arg(2)))
    if err2546 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.RequestAllConfigParams(value0, value1))
    fmt.Print("\n")
    break
  case "GetNumGroups":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNumGroups requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2547 := (strconv.Atoi(flag.Arg(1)))
    if err2547 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2548 := (strconv.Atoi(flag.Arg(2)))
    if err2548 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNumGroups(value0, value1))
    fmt.Print("\n")
    break
  case "GetAssociations":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "GetAssociations requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2549 := (strconv.Atoi(flag.Arg(1)))
    if err2549 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2550 := (strconv.Atoi(flag.Arg(2)))
    if err2550 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    tmp2, err2551 := (strconv.Atoi(flag.Arg(3)))
    if err2551 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    fmt.Print(client.GetAssociations(value0, value1, value2))
    fmt.Print("\n")
    break
  case "GetMaxAssociations":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "GetMaxAssociations requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2552 := (strconv.Atoi(flag.Arg(1)))
    if err2552 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2553 := (strconv.Atoi(flag.Arg(2)))
    if err2553 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    tmp2, err2554 := (strconv.Atoi(flag.Arg(3)))
    if err2554 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    fmt.Print(client.GetMaxAssociations(value0, value1, value2))
    fmt.Print("\n")
    break
  case "GetGroupLabel":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "GetGroupLabel requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2555 := (strconv.Atoi(flag.Arg(1)))
    if err2555 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2556 := (strconv.Atoi(flag.Arg(2)))
    if err2556 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    tmp2, err2557 := (strconv.Atoi(flag.Arg(3)))
    if err2557 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    fmt.Print(client.GetGroupLabel(value0, value1, value2))
    fmt.Print("\n")
    break
  case "AddAssociation":
    if flag.NArg() - 1 != 4 {
      fmt.Fprint(os.Stderr, "AddAssociation requires 4 args\n")
      flag.Usage()
    }
    tmp0, err2558 := (strconv.Atoi(flag.Arg(1)))
    if err2558 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2559 := (strconv.Atoi(flag.Arg(2)))
    if err2559 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    tmp2, err2560 := (strconv.Atoi(flag.Arg(3)))
    if err2560 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    tmp3, err2561 := (strconv.Atoi(flag.Arg(4)))
    if err2561 != nil {
      Usage()
      return
    }
    argvalue3 := byte(tmp3)
    value3 := argvalue3
    fmt.Print(client.AddAssociation(value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "RemoveAssociation":
    if flag.NArg() - 1 != 4 {
      fmt.Fprint(os.Stderr, "RemoveAssociation requires 4 args\n")
      flag.Usage()
    }
    tmp0, err2562 := (strconv.Atoi(flag.Arg(1)))
    if err2562 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2563 := (strconv.Atoi(flag.Arg(2)))
    if err2563 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    tmp2, err2564 := (strconv.Atoi(flag.Arg(3)))
    if err2564 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    tmp3, err2565 := (strconv.Atoi(flag.Arg(4)))
    if err2565 != nil {
      Usage()
      return
    }
    argvalue3 := byte(tmp3)
    value3 := argvalue3
    fmt.Print(client.RemoveAssociation(value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "ResetController":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "ResetController requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2566 := (strconv.Atoi(flag.Arg(1)))
    if err2566 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.ResetController(value0))
    fmt.Print("\n")
    break
  case "SoftReset":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "SoftReset requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2567 := (strconv.Atoi(flag.Arg(1)))
    if err2567 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.SoftReset(value0))
    fmt.Print("\n")
    break
  case "BeginControllerCommand":
    if flag.NArg() - 1 != 5 {
      fmt.Fprint(os.Stderr, "BeginControllerCommand requires 5 args\n")
      flag.Usage()
    }
    tmp0, err2568 := (strconv.Atoi(flag.Arg(1)))
    if err2568 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := OpenZWave.DriverControllerCommand(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3) == "true"
    value2 := argvalue2
    tmp3, err2570 := (strconv.Atoi(flag.Arg(4)))
    if err2570 != nil {
      Usage()
      return
    }
    argvalue3 := byte(tmp3)
    value3 := argvalue3
    tmp4, err2571 := (strconv.Atoi(flag.Arg(5)))
    if err2571 != nil {
      Usage()
      return
    }
    argvalue4 := byte(tmp4)
    value4 := argvalue4
    fmt.Print(client.BeginControllerCommand(value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "CancelControllerCommand":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "CancelControllerCommand requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2572 := (strconv.Atoi(flag.Arg(1)))
    if err2572 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.CancelControllerCommand(value0))
    fmt.Print("\n")
    break
  case "TestNetworkNode":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "TestNetworkNode requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2573 := (strconv.Atoi(flag.Arg(1)))
    if err2573 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2574 := (strconv.Atoi(flag.Arg(2)))
    if err2574 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    tmp2, err2575 := (strconv.Atoi(flag.Arg(3)))
    if err2575 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    fmt.Print(client.TestNetworkNode(value0, value1, value2))
    fmt.Print("\n")
    break
  case "TestNetwork":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "TestNetwork requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2576 := (strconv.Atoi(flag.Arg(1)))
    if err2576 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2577 := (strconv.Atoi(flag.Arg(2)))
    if err2577 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    fmt.Print(client.TestNetwork(value0, value1))
    fmt.Print("\n")
    break
  case "HealNetworkNode":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "HealNetworkNode requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2578 := (strconv.Atoi(flag.Arg(1)))
    if err2578 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2579 := (strconv.Atoi(flag.Arg(2)))
    if err2579 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3) == "true"
    value2 := argvalue2
    fmt.Print(client.HealNetworkNode(value0, value1, value2))
    fmt.Print("\n")
    break
  case "HealNetwork":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "HealNetwork requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2581 := (strconv.Atoi(flag.Arg(1)))
    if err2581 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2) == "true"
    value1 := argvalue1
    fmt.Print(client.HealNetwork(value0, value1))
    fmt.Print("\n")
    break
  case "GetNumScenes":
    if flag.NArg() - 1 != 0 {
      fmt.Fprint(os.Stderr, "GetNumScenes requires 0 args\n")
      flag.Usage()
    }
    fmt.Print(client.GetNumScenes())
    fmt.Print("\n")
    break
  case "GetAllScenes":
    if flag.NArg() - 1 != 0 {
      fmt.Fprint(os.Stderr, "GetAllScenes requires 0 args\n")
      flag.Usage()
    }
    fmt.Print(client.GetAllScenes())
    fmt.Print("\n")
    break
  case "RemoveAllScenes":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "RemoveAllScenes requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2583 := (strconv.Atoi(flag.Arg(1)))
    if err2583 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.RemoveAllScenes(value0))
    fmt.Print("\n")
    break
  case "CreateScene":
    if flag.NArg() - 1 != 0 {
      fmt.Fprint(os.Stderr, "CreateScene requires 0 args\n")
      flag.Usage()
    }
    fmt.Print(client.CreateScene())
    fmt.Print("\n")
    break
  case "RemoveScene":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "RemoveScene requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2584 := (strconv.Atoi(flag.Arg(1)))
    if err2584 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    fmt.Print(client.RemoveScene(value0))
    fmt.Print("\n")
    break
  case "AddSceneValue_Bool":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "AddSceneValueBool requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2585 := (strconv.Atoi(flag.Arg(1)))
    if err2585 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2586 := flag.Arg(2)
    mbTrans2587 := thrift.NewTMemoryBufferLen(len(arg2586))
    defer mbTrans2587.Close()
    _, err2588 := mbTrans2587.WriteString(arg2586)
    if err2588 != nil {
      Usage()
      return
    }
    factory2589 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2590 := factory2589.GetProtocol(mbTrans2587)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2591 := argvalue1.Read(jsProt2590)
    if err2591 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := flag.Arg(3) == "true"
    value2 := argvalue2
    fmt.Print(client.AddSceneValueBool(value0, value1, value2))
    fmt.Print("\n")
    break
  case "AddSceneValue_Uint8":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "AddSceneValueUint8 requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2593 := (strconv.Atoi(flag.Arg(1)))
    if err2593 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2594 := flag.Arg(2)
    mbTrans2595 := thrift.NewTMemoryBufferLen(len(arg2594))
    defer mbTrans2595.Close()
    _, err2596 := mbTrans2595.WriteString(arg2594)
    if err2596 != nil {
      Usage()
      return
    }
    factory2597 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2598 := factory2597.GetProtocol(mbTrans2595)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2599 := argvalue1.Read(jsProt2598)
    if err2599 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    tmp2, err2600 := (strconv.Atoi(flag.Arg(3)))
    if err2600 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    fmt.Print(client.AddSceneValueUint8(value0, value1, value2))
    fmt.Print("\n")
    break
  case "AddSceneValue_Float":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "AddSceneValueFloat requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2601 := (strconv.Atoi(flag.Arg(1)))
    if err2601 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2602 := flag.Arg(2)
    mbTrans2603 := thrift.NewTMemoryBufferLen(len(arg2602))
    defer mbTrans2603.Close()
    _, err2604 := mbTrans2603.WriteString(arg2602)
    if err2604 != nil {
      Usage()
      return
    }
    factory2605 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2606 := factory2605.GetProtocol(mbTrans2603)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2607 := argvalue1.Read(jsProt2606)
    if err2607 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2, err2608 := (strconv.Atof64(flag.Arg(3)))
    if err2608 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.AddSceneValueFloat(value0, value1, value2))
    fmt.Print("\n")
    break
  case "AddSceneValue_Int32":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "AddSceneValueInt32 requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2609 := (strconv.Atoi(flag.Arg(1)))
    if err2609 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2610 := flag.Arg(2)
    mbTrans2611 := thrift.NewTMemoryBufferLen(len(arg2610))
    defer mbTrans2611.Close()
    _, err2612 := mbTrans2611.WriteString(arg2610)
    if err2612 != nil {
      Usage()
      return
    }
    factory2613 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2614 := factory2613.GetProtocol(mbTrans2611)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2615 := argvalue1.Read(jsProt2614)
    if err2615 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    tmp2, err2616 := (strconv.Atoi(flag.Arg(3)))
    if err2616 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    fmt.Print(client.AddSceneValueInt32(value0, value1, value2))
    fmt.Print("\n")
    break
  case "AddSceneValue_Int16":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "AddSceneValueInt16 requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2617 := (strconv.Atoi(flag.Arg(1)))
    if err2617 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2618 := flag.Arg(2)
    mbTrans2619 := thrift.NewTMemoryBufferLen(len(arg2618))
    defer mbTrans2619.Close()
    _, err2620 := mbTrans2619.WriteString(arg2618)
    if err2620 != nil {
      Usage()
      return
    }
    factory2621 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2622 := factory2621.GetProtocol(mbTrans2619)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2623 := argvalue1.Read(jsProt2622)
    if err2623 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    tmp2, err2624 := (strconv.Atoi(flag.Arg(3)))
    if err2624 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    fmt.Print(client.AddSceneValueInt16(value0, value1, value2))
    fmt.Print("\n")
    break
  case "AddSceneValue_String":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "AddSceneValueString requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2625 := (strconv.Atoi(flag.Arg(1)))
    if err2625 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2626 := flag.Arg(2)
    mbTrans2627 := thrift.NewTMemoryBufferLen(len(arg2626))
    defer mbTrans2627.Close()
    _, err2628 := mbTrans2627.WriteString(arg2626)
    if err2628 != nil {
      Usage()
      return
    }
    factory2629 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2630 := factory2629.GetProtocol(mbTrans2627)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2631 := argvalue1.Read(jsProt2630)
    if err2631 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.AddSceneValueString(value0, value1, value2))
    fmt.Print("\n")
    break
  case "AddSceneValueListSelection_String":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "AddSceneValueListSelectionString requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2633 := (strconv.Atoi(flag.Arg(1)))
    if err2633 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2634 := flag.Arg(2)
    mbTrans2635 := thrift.NewTMemoryBufferLen(len(arg2634))
    defer mbTrans2635.Close()
    _, err2636 := mbTrans2635.WriteString(arg2634)
    if err2636 != nil {
      Usage()
      return
    }
    factory2637 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2638 := factory2637.GetProtocol(mbTrans2635)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2639 := argvalue1.Read(jsProt2638)
    if err2639 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.AddSceneValueListSelectionString(value0, value1, value2))
    fmt.Print("\n")
    break
  case "AddSceneValueListSelection_Int32":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "AddSceneValueListSelectionInt32 requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2641 := (strconv.Atoi(flag.Arg(1)))
    if err2641 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2642 := flag.Arg(2)
    mbTrans2643 := thrift.NewTMemoryBufferLen(len(arg2642))
    defer mbTrans2643.Close()
    _, err2644 := mbTrans2643.WriteString(arg2642)
    if err2644 != nil {
      Usage()
      return
    }
    factory2645 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2646 := factory2645.GetProtocol(mbTrans2643)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2647 := argvalue1.Read(jsProt2646)
    if err2647 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    tmp2, err2648 := (strconv.Atoi(flag.Arg(3)))
    if err2648 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    fmt.Print(client.AddSceneValueListSelectionInt32(value0, value1, value2))
    fmt.Print("\n")
    break
  case "RemoveSceneValue":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "RemoveSceneValue requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2649 := (strconv.Atoi(flag.Arg(1)))
    if err2649 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2650 := flag.Arg(2)
    mbTrans2651 := thrift.NewTMemoryBufferLen(len(arg2650))
    defer mbTrans2651.Close()
    _, err2652 := mbTrans2651.WriteString(arg2650)
    if err2652 != nil {
      Usage()
      return
    }
    factory2653 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2654 := factory2653.GetProtocol(mbTrans2651)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2655 := argvalue1.Read(jsProt2654)
    if err2655 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.RemoveSceneValue(value0, value1))
    fmt.Print("\n")
    break
  case "SceneGetValues":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "SceneGetValues requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2656 := (strconv.Atoi(flag.Arg(1)))
    if err2656 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    fmt.Print(client.SceneGetValues(value0))
    fmt.Print("\n")
    break
  case "SceneGetValueAsBool":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SceneGetValueAsBool requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2657 := (strconv.Atoi(flag.Arg(1)))
    if err2657 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2658 := flag.Arg(2)
    mbTrans2659 := thrift.NewTMemoryBufferLen(len(arg2658))
    defer mbTrans2659.Close()
    _, err2660 := mbTrans2659.WriteString(arg2658)
    if err2660 != nil {
      Usage()
      return
    }
    factory2661 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2662 := factory2661.GetProtocol(mbTrans2659)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2663 := argvalue1.Read(jsProt2662)
    if err2663 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SceneGetValueAsBool(value0, value1))
    fmt.Print("\n")
    break
  case "SceneGetValueAsByte":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SceneGetValueAsByte requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2664 := (strconv.Atoi(flag.Arg(1)))
    if err2664 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2665 := flag.Arg(2)
    mbTrans2666 := thrift.NewTMemoryBufferLen(len(arg2665))
    defer mbTrans2666.Close()
    _, err2667 := mbTrans2666.WriteString(arg2665)
    if err2667 != nil {
      Usage()
      return
    }
    factory2668 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2669 := factory2668.GetProtocol(mbTrans2666)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2670 := argvalue1.Read(jsProt2669)
    if err2670 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SceneGetValueAsByte(value0, value1))
    fmt.Print("\n")
    break
  case "SceneGetValueAsFloat":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SceneGetValueAsFloat requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2671 := (strconv.Atoi(flag.Arg(1)))
    if err2671 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2672 := flag.Arg(2)
    mbTrans2673 := thrift.NewTMemoryBufferLen(len(arg2672))
    defer mbTrans2673.Close()
    _, err2674 := mbTrans2673.WriteString(arg2672)
    if err2674 != nil {
      Usage()
      return
    }
    factory2675 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2676 := factory2675.GetProtocol(mbTrans2673)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2677 := argvalue1.Read(jsProt2676)
    if err2677 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SceneGetValueAsFloat(value0, value1))
    fmt.Print("\n")
    break
  case "SceneGetValueAsInt":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SceneGetValueAsInt requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2678 := (strconv.Atoi(flag.Arg(1)))
    if err2678 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2679 := flag.Arg(2)
    mbTrans2680 := thrift.NewTMemoryBufferLen(len(arg2679))
    defer mbTrans2680.Close()
    _, err2681 := mbTrans2680.WriteString(arg2679)
    if err2681 != nil {
      Usage()
      return
    }
    factory2682 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2683 := factory2682.GetProtocol(mbTrans2680)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2684 := argvalue1.Read(jsProt2683)
    if err2684 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SceneGetValueAsInt(value0, value1))
    fmt.Print("\n")
    break
  case "SceneGetValueAsShort":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SceneGetValueAsShort requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2685 := (strconv.Atoi(flag.Arg(1)))
    if err2685 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2686 := flag.Arg(2)
    mbTrans2687 := thrift.NewTMemoryBufferLen(len(arg2686))
    defer mbTrans2687.Close()
    _, err2688 := mbTrans2687.WriteString(arg2686)
    if err2688 != nil {
      Usage()
      return
    }
    factory2689 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2690 := factory2689.GetProtocol(mbTrans2687)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2691 := argvalue1.Read(jsProt2690)
    if err2691 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SceneGetValueAsShort(value0, value1))
    fmt.Print("\n")
    break
  case "SceneGetValueAsString":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SceneGetValueAsString requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2692 := (strconv.Atoi(flag.Arg(1)))
    if err2692 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2693 := flag.Arg(2)
    mbTrans2694 := thrift.NewTMemoryBufferLen(len(arg2693))
    defer mbTrans2694.Close()
    _, err2695 := mbTrans2694.WriteString(arg2693)
    if err2695 != nil {
      Usage()
      return
    }
    factory2696 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2697 := factory2696.GetProtocol(mbTrans2694)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2698 := argvalue1.Read(jsProt2697)
    if err2698 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SceneGetValueAsString(value0, value1))
    fmt.Print("\n")
    break
  case "SceneGetValueListSelection_string":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SceneGetValueListSelectionString requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2699 := (strconv.Atoi(flag.Arg(1)))
    if err2699 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2700 := flag.Arg(2)
    mbTrans2701 := thrift.NewTMemoryBufferLen(len(arg2700))
    defer mbTrans2701.Close()
    _, err2702 := mbTrans2701.WriteString(arg2700)
    if err2702 != nil {
      Usage()
      return
    }
    factory2703 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2704 := factory2703.GetProtocol(mbTrans2701)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2705 := argvalue1.Read(jsProt2704)
    if err2705 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SceneGetValueListSelectionString(value0, value1))
    fmt.Print("\n")
    break
  case "SceneGetValueListSelection_Int32":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SceneGetValueListSelectionInt32 requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2706 := (strconv.Atoi(flag.Arg(1)))
    if err2706 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2707 := flag.Arg(2)
    mbTrans2708 := thrift.NewTMemoryBufferLen(len(arg2707))
    defer mbTrans2708.Close()
    _, err2709 := mbTrans2708.WriteString(arg2707)
    if err2709 != nil {
      Usage()
      return
    }
    factory2710 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2711 := factory2710.GetProtocol(mbTrans2708)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2712 := argvalue1.Read(jsProt2711)
    if err2712 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SceneGetValueListSelectionInt32(value0, value1))
    fmt.Print("\n")
    break
  case "SetSceneValue_Bool":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetSceneValueBool requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2713 := (strconv.Atoi(flag.Arg(1)))
    if err2713 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2714 := flag.Arg(2)
    mbTrans2715 := thrift.NewTMemoryBufferLen(len(arg2714))
    defer mbTrans2715.Close()
    _, err2716 := mbTrans2715.WriteString(arg2714)
    if err2716 != nil {
      Usage()
      return
    }
    factory2717 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2718 := factory2717.GetProtocol(mbTrans2715)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2719 := argvalue1.Read(jsProt2718)
    if err2719 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := flag.Arg(3) == "true"
    value2 := argvalue2
    fmt.Print(client.SetSceneValueBool(value0, value1, value2))
    fmt.Print("\n")
    break
  case "SetSceneValue_Uint8":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetSceneValueUint8 requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2721 := (strconv.Atoi(flag.Arg(1)))
    if err2721 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2722 := flag.Arg(2)
    mbTrans2723 := thrift.NewTMemoryBufferLen(len(arg2722))
    defer mbTrans2723.Close()
    _, err2724 := mbTrans2723.WriteString(arg2722)
    if err2724 != nil {
      Usage()
      return
    }
    factory2725 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2726 := factory2725.GetProtocol(mbTrans2723)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2727 := argvalue1.Read(jsProt2726)
    if err2727 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    tmp2, err2728 := (strconv.Atoi(flag.Arg(3)))
    if err2728 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    fmt.Print(client.SetSceneValueUint8(value0, value1, value2))
    fmt.Print("\n")
    break
  case "SetSceneValue_Float":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetSceneValueFloat requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2729 := (strconv.Atoi(flag.Arg(1)))
    if err2729 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2730 := flag.Arg(2)
    mbTrans2731 := thrift.NewTMemoryBufferLen(len(arg2730))
    defer mbTrans2731.Close()
    _, err2732 := mbTrans2731.WriteString(arg2730)
    if err2732 != nil {
      Usage()
      return
    }
    factory2733 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2734 := factory2733.GetProtocol(mbTrans2731)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2735 := argvalue1.Read(jsProt2734)
    if err2735 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2, err2736 := (strconv.Atof64(flag.Arg(3)))
    if err2736 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.SetSceneValueFloat(value0, value1, value2))
    fmt.Print("\n")
    break
  case "SetSceneValue_Int32":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetSceneValueInt32 requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2737 := (strconv.Atoi(flag.Arg(1)))
    if err2737 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2738 := flag.Arg(2)
    mbTrans2739 := thrift.NewTMemoryBufferLen(len(arg2738))
    defer mbTrans2739.Close()
    _, err2740 := mbTrans2739.WriteString(arg2738)
    if err2740 != nil {
      Usage()
      return
    }
    factory2741 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2742 := factory2741.GetProtocol(mbTrans2739)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2743 := argvalue1.Read(jsProt2742)
    if err2743 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    tmp2, err2744 := (strconv.Atoi(flag.Arg(3)))
    if err2744 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    fmt.Print(client.SetSceneValueInt32(value0, value1, value2))
    fmt.Print("\n")
    break
  case "SetSceneValue_Int16":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetSceneValueInt16 requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2745 := (strconv.Atoi(flag.Arg(1)))
    if err2745 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2746 := flag.Arg(2)
    mbTrans2747 := thrift.NewTMemoryBufferLen(len(arg2746))
    defer mbTrans2747.Close()
    _, err2748 := mbTrans2747.WriteString(arg2746)
    if err2748 != nil {
      Usage()
      return
    }
    factory2749 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2750 := factory2749.GetProtocol(mbTrans2747)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2751 := argvalue1.Read(jsProt2750)
    if err2751 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    tmp2, err2752 := (strconv.Atoi(flag.Arg(3)))
    if err2752 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    fmt.Print(client.SetSceneValueInt16(value0, value1, value2))
    fmt.Print("\n")
    break
  case "SetSceneValue_string":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetSceneValueString requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2753 := (strconv.Atoi(flag.Arg(1)))
    if err2753 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2754 := flag.Arg(2)
    mbTrans2755 := thrift.NewTMemoryBufferLen(len(arg2754))
    defer mbTrans2755.Close()
    _, err2756 := mbTrans2755.WriteString(arg2754)
    if err2756 != nil {
      Usage()
      return
    }
    factory2757 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2758 := factory2757.GetProtocol(mbTrans2755)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2759 := argvalue1.Read(jsProt2758)
    if err2759 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.SetSceneValueString(value0, value1, value2))
    fmt.Print("\n")
    break
  case "SetSceneValueListSelection_string":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetSceneValueListSelectionString requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2761 := (strconv.Atoi(flag.Arg(1)))
    if err2761 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2762 := flag.Arg(2)
    mbTrans2763 := thrift.NewTMemoryBufferLen(len(arg2762))
    defer mbTrans2763.Close()
    _, err2764 := mbTrans2763.WriteString(arg2762)
    if err2764 != nil {
      Usage()
      return
    }
    factory2765 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2766 := factory2765.GetProtocol(mbTrans2763)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2767 := argvalue1.Read(jsProt2766)
    if err2767 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.SetSceneValueListSelectionString(value0, value1, value2))
    fmt.Print("\n")
    break
  case "SetSceneValueListSelection_Int32":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetSceneValueListSelectionInt32 requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2769 := (strconv.Atoi(flag.Arg(1)))
    if err2769 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2770 := flag.Arg(2)
    mbTrans2771 := thrift.NewTMemoryBufferLen(len(arg2770))
    defer mbTrans2771.Close()
    _, err2772 := mbTrans2771.WriteString(arg2770)
    if err2772 != nil {
      Usage()
      return
    }
    factory2773 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2774 := factory2773.GetProtocol(mbTrans2771)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2775 := argvalue1.Read(jsProt2774)
    if err2775 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    tmp2, err2776 := (strconv.Atoi(flag.Arg(3)))
    if err2776 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    fmt.Print(client.SetSceneValueListSelectionInt32(value0, value1, value2))
    fmt.Print("\n")
    break
  case "GetSceneLabel":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetSceneLabel requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2777 := (strconv.Atoi(flag.Arg(1)))
    if err2777 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetSceneLabel(value0))
    fmt.Print("\n")
    break
  case "SetSceneLabel":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetSceneLabel requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2778 := (strconv.Atoi(flag.Arg(1)))
    if err2778 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.SetSceneLabel(value0, value1))
    fmt.Print("\n")
    break
  case "SceneExists":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "SceneExists requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2780 := (strconv.Atoi(flag.Arg(1)))
    if err2780 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    fmt.Print(client.SceneExists(value0))
    fmt.Print("\n")
    break
  case "ActivateScene":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "ActivateScene requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2781 := (strconv.Atoi(flag.Arg(1)))
    if err2781 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    fmt.Print(client.ActivateScene(value0))
    fmt.Print("\n")
    break
  case "GetDriverStatistics":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetDriverStatistics requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2782 := (strconv.Atoi(flag.Arg(1)))
    if err2782 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetDriverStatistics(value0))
    fmt.Print("\n")
    break
  case "GetNodeStatistics":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeStatistics requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2783 := (strconv.Atoi(flag.Arg(1)))
    if err2783 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2784 := (strconv.Atoi(flag.Arg(2)))
    if err2784 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeStatistics(value0, value1))
    fmt.Print("\n")
    break
  case "SendAllValues":
    if flag.NArg() - 1 != 0 {
      fmt.Fprint(os.Stderr, "SendAllValues requires 0 args\n")
      flag.Usage()
    }
    fmt.Print(client.SendAllValues())
    fmt.Print("\n")
    break
  case "ping":
    if flag.NArg() - 1 != 0 {
      fmt.Fprint(os.Stderr, "Ping requires 0 args\n")
      flag.Usage()
    }
    fmt.Print(client.Ping())
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprint(os.Stderr, "Invalid function ", cmd, "\n")
  }
}
