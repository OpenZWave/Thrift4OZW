/* Autogenerated by Thrift Compiler (0.9.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package main

import (
        "flag"
        "fmt"
        "http"
        "net"
        "os"
        "strconv"
        "thrift"
        "thriftlib/OpenZWave"
)

func Usage() {
  fmt.Fprint(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:\n")
  flag.PrintDefaults()
  fmt.Fprint(os.Stderr, "Functions:\n")
  fmt.Fprint(os.Stderr, "  WriteConfig(_homeId int32) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetControllerNodeId(_homeId int32) (retval1924 byte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsPrimaryController(_homeId int32) (retval1925 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsStaticUpdateController(_homeId int32) (retval1926 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsBridgeController(_homeId int32) (retval1927 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetLibraryVersion(_homeId int32) (retval1928 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetLibraryTypeName(_homeId int32) (retval1929 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetSendQueueCount(_homeId int32) (retval1930 int32, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  LogDriverStatistics(_homeId int32) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetPollInterval() (retval1932 int32, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetPollInterval(_milliseconds int32, _bIntervalBetweenPolls bool) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  EnablePoll(_valueId *RemoteValueID, _intensity byte) (retval1934 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  DisablePoll(_valueId *RemoteValueID) (retval1935 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  isPolled(_valueId *RemoteValueID) (retval1936 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetPollIntensity(_valueId *RemoteValueID, _intensity byte) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  RefreshNodeInfo(_homeId int32, _nodeId byte) (retval1938 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  RequestNodeState(_homeId int32, _nodeId byte) (retval1939 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  RequestNodeDynamic(_homeId int32, _nodeId byte) (retval1940 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsNodeListeningDevice(_homeId int32, _nodeId byte) (retval1941 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsNodeFrequentListeningDevice(_homeId int32, _nodeId byte) (retval1942 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsNodeBeamingDevice(_homeId int32, _nodeId byte) (retval1943 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsNodeRoutingDevice(_homeId int32, _nodeId byte) (retval1944 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsNodeSecurityDevice(_homeId int32, _nodeId byte) (retval1945 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeMaxBaudRate(_homeId int32, _nodeId byte) (retval1946 int32, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeVersion(_homeId int32, _nodeId byte) (retval1947 byte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeSecurity(_homeId int32, _nodeId byte) (retval1948 byte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeBasic(_homeId int32, _nodeId byte) (retval1949 byte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeGeneric(_homeId int32, _nodeId byte) (retval1950 byte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeSpecific(_homeId int32, _nodeId byte) (retval1951 byte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeType(_homeId int32, _nodeId byte) (retval1952 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeNeighbors(_homeId int32, _nodeId byte) (retval1953 *UInt32ListByte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeManufacturerName(_homeId int32, _nodeId byte) (retval1954 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeProductName(_homeId int32, _nodeId byte) (retval1955 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeName(_homeId int32, _nodeId byte) (retval1956 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeLocation(_homeId int32, _nodeId byte) (retval1957 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeManufacturerId(_homeId int32, _nodeId byte) (retval1958 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeProductType(_homeId int32, _nodeId byte) (retval1959 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeProductId(_homeId int32, _nodeId byte) (retval1960 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetNodeManufacturerName(_homeId int32, _nodeId byte, _manufacturerName string) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetNodeProductName(_homeId int32, _nodeId byte, _productName string) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetNodeName(_homeId int32, _nodeId byte, _nodeName string) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetNodeLocation(_homeId int32, _nodeId byte, _location string) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetNodeOn(_homeId int32, _nodeId byte) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetNodeOff(_homeId int32, _nodeId byte) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetNodeLevel(_homeId int32, _nodeId byte, _level byte) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsNodeInfoReceived(_homeId int32, _nodeId byte) (retval1968 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeClassInformation(_homeId int32, _nodeId byte, _commandClassId byte) (retval1969 *BoolGetNodeClassInformation, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsNodeAwake(_homeId int32, _nodeId byte) (retval1970 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsNodeFailed(_homeId int32, _nodeId byte) (retval1971 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueLabel(_id *RemoteValueID) (retval1972 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetValueLabel(_id *RemoteValueID, _value string) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueUnits(_id *RemoteValueID) (retval1974 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetValueUnits(_id *RemoteValueID, _value string) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueHelp(_id *RemoteValueID) (retval1976 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetValueHelp(_id *RemoteValueID, _value string) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueMin(_id *RemoteValueID) (retval1978 int32, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueMax(_id *RemoteValueID) (retval1979 int32, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsValueReadOnly(_id *RemoteValueID) (retval1980 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsValueWriteOnly(_id *RemoteValueID) (retval1981 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsValueSet(_id *RemoteValueID) (retval1982 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsValuePolled(_id *RemoteValueID) (retval1983 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueAsBool(_id *RemoteValueID) (retval1984 *BoolBool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueAsByte(_id *RemoteValueID) (retval1985 *BoolUInt8, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueAsFloat(_id *RemoteValueID) (retval1986 *BoolFloat, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueAsInt(_id *RemoteValueID) (retval1987 *BoolInt, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueAsShort(_id *RemoteValueID) (retval1988 *BoolInt16, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueAsString(_id *RemoteValueID) (retval1989 *BoolString, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueListSelection_String(_id *RemoteValueID) (retval1990 *BoolString, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueListSelection_Int32(_id *RemoteValueID) (retval1991 *BoolInt, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueListItems(_id *RemoteValueID) (retval1992 *BoolListString, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueFloatPrecision(_id *RemoteValueID) (retval1993 *BoolUInt8, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetValue_Bool(_id *RemoteValueID, _value bool) (retval1994 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetValue_UInt8(_id *RemoteValueID, _value byte) (retval1995 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetValue_Float(_id *RemoteValueID, _value float64) (retval1996 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetValue_Int32(_id *RemoteValueID, _value int32) (retval1997 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetValue_Int16(_id *RemoteValueID, _value int16) (retval1998 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetValue_String(_id *RemoteValueID, _value string) (retval1999 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetValueListSelection(_id *RemoteValueID, _selectedItem string) (retval2000 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  RefreshValue(_id *RemoteValueID) (retval2001 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetChangeVerified(_id *RemoteValueID, _verify bool) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  PressButton(_id *RemoteValueID) (retval2003 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  ReleaseButton(_id *RemoteValueID) (retval2004 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNumSwitchPoints(_id *RemoteValueID) (retval2005 byte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetSwitchPoint(_id *RemoteValueID, _hours byte, _minutes byte, _setback byte) (retval2006 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  RemoveSwitchPoint(_id *RemoteValueID, _hours byte, _minutes byte) (retval2007 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  ClearSwitchPoints(_id *RemoteValueID) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetSwitchPoint(_id *RemoteValueID, _idx byte) (retval2009 *GetSwitchPointReturnStruct, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SwitchAllOn(_homeId int32) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SwitchAllOff(_homeId int32) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetConfigParam(_homeId int32, _nodeId byte, _param byte, _value int32, _size byte) (retval2012 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  RequestConfigParam(_homeId int32, _nodeId byte, _param byte) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  RequestAllConfigParams(_homeId int32, _nodeId byte) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNumGroups(_homeId int32, _nodeId byte) (retval2015 byte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetAssociations(_homeId int32, _nodeId byte, _groupIdx byte) (retval2016 *GetAssociationsReturnStruct, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetMaxAssociations(_homeId int32, _nodeId byte, _groupIdx byte) (retval2017 byte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetGroupLabel(_homeId int32, _nodeId byte, _groupIdx byte) (retval2018 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  AddAssociation(_homeId int32, _nodeId byte, _groupIdx byte, _targetNodeId byte) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  RemoveAssociation(_homeId int32, _nodeId byte, _groupIdx byte, _targetNodeId byte) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  ResetController(_homeId int32) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SoftReset(_homeId int32) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  BeginControllerCommand(_homeId int32, _command DriverControllerCommand, _highPower bool, _nodeId byte, _arg byte) (retval2023 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  CancelControllerCommand(_homeId int32) (retval2024 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  TestNetworkNode(_homeId int32, _nodeId byte, _count int32) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  TestNetwork(_homeId int32, _count int32) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNumScenes() (retval2027 byte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetAllScenes() (retval2028 *GetAllScenesReturnStruct, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  RemoveAllScenes(_homeId int32) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  CreateScene() (retval2030 byte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  RemoveScene(_sceneId byte) (retval2031 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  AddSceneValue_Bool(_sceneId byte, _valueId *RemoteValueID, _value bool) (retval2032 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  AddSceneValue_Uint8(_sceneId byte, _valueId *RemoteValueID, _value byte) (retval2033 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  AddSceneValue_Float(_sceneId byte, _valueId *RemoteValueID, _value float64) (retval2034 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  AddSceneValue_Int32(_sceneId byte, _valueId *RemoteValueID, _value int32) (retval2035 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  AddSceneValue_Int16(_sceneId byte, _valueId *RemoteValueID, _value int16) (retval2036 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  AddSceneValue_String(_sceneId byte, _valueId *RemoteValueID, _value string) (retval2037 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  AddSceneValueListSelection_String(_sceneId byte, _valueId *RemoteValueID, _value string) (retval2038 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  AddSceneValueListSelection_Int32(_sceneId byte, _valueId *RemoteValueID, _value int32) (retval2039 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  RemoveSceneValue(_sceneId byte, _valueId *RemoteValueID) (retval2040 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SceneGetValues(_sceneId byte) (retval2041 *SceneGetValuesReturnStruct, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SceneGetValueAsBool(_sceneId byte, _valueId *RemoteValueID) (retval2042 *BoolBool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SceneGetValueAsByte(_sceneId byte, _valueId *RemoteValueID) (retval2043 *BoolUInt8, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SceneGetValueAsFloat(_sceneId byte, _valueId *RemoteValueID) (retval2044 *BoolFloat, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SceneGetValueAsInt(_sceneId byte, _valueId *RemoteValueID) (retval2045 *BoolInt, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SceneGetValueAsShort(_sceneId byte, _valueId *RemoteValueID) (retval2046 *BoolInt16, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SceneGetValueAsString(_sceneId byte, _valueId *RemoteValueID) (retval2047 *BoolString, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SceneGetValueListSelection_String(_sceneId byte, _valueId *RemoteValueID) (retval2048 *BoolString, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SceneGetValueListSelection_Int32(_sceneId byte, _valueId *RemoteValueID) (retval2049 *BoolInt, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetSceneValue_Bool(_sceneId byte, _valueId *RemoteValueID, _value bool) (retval2050 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetSceneValue_Uint8(_sceneId byte, _valueId *RemoteValueID, _value byte) (retval2051 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetSceneValue_Float(_sceneId byte, _valueId *RemoteValueID, _value float64) (retval2052 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetSceneValue_Int32(_sceneId byte, _valueId *RemoteValueID, _value int32) (retval2053 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetSceneValue_Int16(_sceneId byte, _valueId *RemoteValueID, _value int16) (retval2054 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetSceneValue_String(_sceneId byte, _valueId *RemoteValueID, _value string) (retval2055 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetSceneValueListSelection_String(_sceneId byte, _valueId *RemoteValueID, _value string) (retval2056 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetSceneValueListSelection_Int32(_sceneId byte, _valueId *RemoteValueID, _value int32) (retval2057 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetSceneLabel(_sceneId byte) (retval2058 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetSceneLabel(_sceneId byte, _value string) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SceneExists(_sceneId byte) (retval2060 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  ActivateScene(_sceneId byte) (retval2061 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetDriverStatistics(_homeId int32) (retval2062 *GetDriverStatisticsReturnStruct, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeStatistics(_homeId int32, _nodeId byte) (retval2063 *GetNodeStatisticsReturnStruct, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SendAllValues() (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  ping() (err os.Error)\n")
  fmt.Fprint(os.Stderr, "\n")
  os.Exit(0)
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  var help bool
  var url http.URL
  var trans thrift.TTransport
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.BoolVar(&help, "help", false, "See usage string")
  flag.Parse()
  if help || flag.NArg() == 0 {
    flag.Usage()
  }
  
  if len(urlString) > 0 {
    url, err := http.ParseURL(urlString)
    if err != nil {
      fmt.Fprint(os.Stderr, "Error parsing URL: ", err.String(), "\n")
      flag.Usage()
    }
    host = url.Host
    useHttp = len(url.Scheme) <= 0 || url.Scheme == "http"
  } else if useHttp {
    _, err := http.ParseURL(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprint(os.Stderr, "Error parsing URL: ", err.String(), "\n")
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err os.Error
  if useHttp {
    trans, err = thrift.NewTHttpClient(url.Raw)
  } else {
    addr, err := net.ResolveTCPAddr("tcp", fmt.Sprint(host, ":", port))
    if err != nil {
      fmt.Fprint(os.Stderr, "Error resolving address", err.String())
      os.Exit(1)
    }
    trans, err = thrift.NewTNonblockingSocketAddr(addr)
    if framed {
      trans = thrift.NewTFramedTransport(trans)
    }
  }
  if err != nil {
    fmt.Fprint(os.Stderr, "Error creating transport", err.String())
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactory()
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
    break
  default:
    fmt.Fprint(os.Stderr, "Invalid protocol specified: ", protocol, "\n")
    Usage()
    os.Exit(1)
  }
  client := OpenZWave.NewRemoteManagerClientFactory(trans, protocolFactory)
  if err = trans.Open(); err != nil {
    fmt.Fprint(os.Stderr, "Error opening socket to ", host, ":", port, " ", err.String())
    os.Exit(1)
  }
  
  switch cmd {
  case "WriteConfig":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "WriteConfig requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2066 := (strconv.Atoi(flag.Arg(1)))
    if err2066 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.WriteConfig(value0))
    fmt.Print("\n")
    break
  case "GetControllerNodeId":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetControllerNodeId requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2067 := (strconv.Atoi(flag.Arg(1)))
    if err2067 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetControllerNodeId(value0))
    fmt.Print("\n")
    break
  case "IsPrimaryController":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "IsPrimaryController requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2068 := (strconv.Atoi(flag.Arg(1)))
    if err2068 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.IsPrimaryController(value0))
    fmt.Print("\n")
    break
  case "IsStaticUpdateController":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "IsStaticUpdateController requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2069 := (strconv.Atoi(flag.Arg(1)))
    if err2069 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.IsStaticUpdateController(value0))
    fmt.Print("\n")
    break
  case "IsBridgeController":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "IsBridgeController requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2070 := (strconv.Atoi(flag.Arg(1)))
    if err2070 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.IsBridgeController(value0))
    fmt.Print("\n")
    break
  case "GetLibraryVersion":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetLibraryVersion requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2071 := (strconv.Atoi(flag.Arg(1)))
    if err2071 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetLibraryVersion(value0))
    fmt.Print("\n")
    break
  case "GetLibraryTypeName":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetLibraryTypeName requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2072 := (strconv.Atoi(flag.Arg(1)))
    if err2072 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetLibraryTypeName(value0))
    fmt.Print("\n")
    break
  case "GetSendQueueCount":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetSendQueueCount requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2073 := (strconv.Atoi(flag.Arg(1)))
    if err2073 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetSendQueueCount(value0))
    fmt.Print("\n")
    break
  case "LogDriverStatistics":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "LogDriverStatistics requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2074 := (strconv.Atoi(flag.Arg(1)))
    if err2074 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.LogDriverStatistics(value0))
    fmt.Print("\n")
    break
  case "GetPollInterval":
    if flag.NArg() - 1 != 0 {
      fmt.Fprint(os.Stderr, "GetPollInterval requires 0 args\n")
      flag.Usage()
    }
    fmt.Print(client.GetPollInterval())
    fmt.Print("\n")
    break
  case "SetPollInterval":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetPollInterval requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2075 := (strconv.Atoi(flag.Arg(1)))
    if err2075 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2) == "true"
    value1 := argvalue1
    fmt.Print(client.SetPollInterval(value0, value1))
    fmt.Print("\n")
    break
  case "EnablePoll":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "EnablePoll requires 2 args\n")
      flag.Usage()
    }
    arg2077 := flag.Arg(1)
    mbTrans2078 := thrift.NewTMemoryBufferLen(len(arg2077))
    defer mbTrans2078.Close()
    _, err2079 := mbTrans2078.WriteString(arg2077)
    if err2079 != nil {
      Usage()
      return
    }
    factory2080 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2081 := factory2080.GetProtocol(mbTrans2078)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2082 := argvalue0.Read(jsProt2081)
    if err2082 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err2083 := (strconv.Atoi(flag.Arg(2)))
    if err2083 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.EnablePoll(value0, value1))
    fmt.Print("\n")
    break
  case "DisablePoll":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "DisablePoll requires 1 args\n")
      flag.Usage()
    }
    arg2084 := flag.Arg(1)
    mbTrans2085 := thrift.NewTMemoryBufferLen(len(arg2084))
    defer mbTrans2085.Close()
    _, err2086 := mbTrans2085.WriteString(arg2084)
    if err2086 != nil {
      Usage()
      return
    }
    factory2087 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2088 := factory2087.GetProtocol(mbTrans2085)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2089 := argvalue0.Read(jsProt2088)
    if err2089 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DisablePoll(value0))
    fmt.Print("\n")
    break
  case "isPolled":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "IsPolled requires 1 args\n")
      flag.Usage()
    }
    arg2090 := flag.Arg(1)
    mbTrans2091 := thrift.NewTMemoryBufferLen(len(arg2090))
    defer mbTrans2091.Close()
    _, err2092 := mbTrans2091.WriteString(arg2090)
    if err2092 != nil {
      Usage()
      return
    }
    factory2093 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2094 := factory2093.GetProtocol(mbTrans2091)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2095 := argvalue0.Read(jsProt2094)
    if err2095 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.IsPolled(value0))
    fmt.Print("\n")
    break
  case "SetPollIntensity":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetPollIntensity requires 2 args\n")
      flag.Usage()
    }
    arg2096 := flag.Arg(1)
    mbTrans2097 := thrift.NewTMemoryBufferLen(len(arg2096))
    defer mbTrans2097.Close()
    _, err2098 := mbTrans2097.WriteString(arg2096)
    if err2098 != nil {
      Usage()
      return
    }
    factory2099 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2100 := factory2099.GetProtocol(mbTrans2097)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2101 := argvalue0.Read(jsProt2100)
    if err2101 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err2102 := (strconv.Atoi(flag.Arg(2)))
    if err2102 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.SetPollIntensity(value0, value1))
    fmt.Print("\n")
    break
  case "RefreshNodeInfo":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "RefreshNodeInfo requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2103 := (strconv.Atoi(flag.Arg(1)))
    if err2103 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2104 := (strconv.Atoi(flag.Arg(2)))
    if err2104 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.RefreshNodeInfo(value0, value1))
    fmt.Print("\n")
    break
  case "RequestNodeState":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "RequestNodeState requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2105 := (strconv.Atoi(flag.Arg(1)))
    if err2105 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2106 := (strconv.Atoi(flag.Arg(2)))
    if err2106 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.RequestNodeState(value0, value1))
    fmt.Print("\n")
    break
  case "RequestNodeDynamic":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "RequestNodeDynamic requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2107 := (strconv.Atoi(flag.Arg(1)))
    if err2107 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2108 := (strconv.Atoi(flag.Arg(2)))
    if err2108 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.RequestNodeDynamic(value0, value1))
    fmt.Print("\n")
    break
  case "IsNodeListeningDevice":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "IsNodeListeningDevice requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2109 := (strconv.Atoi(flag.Arg(1)))
    if err2109 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2110 := (strconv.Atoi(flag.Arg(2)))
    if err2110 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.IsNodeListeningDevice(value0, value1))
    fmt.Print("\n")
    break
  case "IsNodeFrequentListeningDevice":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "IsNodeFrequentListeningDevice requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2111 := (strconv.Atoi(flag.Arg(1)))
    if err2111 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2112 := (strconv.Atoi(flag.Arg(2)))
    if err2112 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.IsNodeFrequentListeningDevice(value0, value1))
    fmt.Print("\n")
    break
  case "IsNodeBeamingDevice":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "IsNodeBeamingDevice requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2113 := (strconv.Atoi(flag.Arg(1)))
    if err2113 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2114 := (strconv.Atoi(flag.Arg(2)))
    if err2114 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.IsNodeBeamingDevice(value0, value1))
    fmt.Print("\n")
    break
  case "IsNodeRoutingDevice":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "IsNodeRoutingDevice requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2115 := (strconv.Atoi(flag.Arg(1)))
    if err2115 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2116 := (strconv.Atoi(flag.Arg(2)))
    if err2116 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.IsNodeRoutingDevice(value0, value1))
    fmt.Print("\n")
    break
  case "IsNodeSecurityDevice":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "IsNodeSecurityDevice requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2117 := (strconv.Atoi(flag.Arg(1)))
    if err2117 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2118 := (strconv.Atoi(flag.Arg(2)))
    if err2118 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.IsNodeSecurityDevice(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeMaxBaudRate":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeMaxBaudRate requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2119 := (strconv.Atoi(flag.Arg(1)))
    if err2119 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2120 := (strconv.Atoi(flag.Arg(2)))
    if err2120 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeMaxBaudRate(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeVersion":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeVersion requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2121 := (strconv.Atoi(flag.Arg(1)))
    if err2121 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2122 := (strconv.Atoi(flag.Arg(2)))
    if err2122 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeVersion(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeSecurity":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeSecurity requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2123 := (strconv.Atoi(flag.Arg(1)))
    if err2123 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2124 := (strconv.Atoi(flag.Arg(2)))
    if err2124 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeSecurity(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeBasic":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeBasic requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2125 := (strconv.Atoi(flag.Arg(1)))
    if err2125 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2126 := (strconv.Atoi(flag.Arg(2)))
    if err2126 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeBasic(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeGeneric":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeGeneric requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2127 := (strconv.Atoi(flag.Arg(1)))
    if err2127 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2128 := (strconv.Atoi(flag.Arg(2)))
    if err2128 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeGeneric(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeSpecific":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeSpecific requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2129 := (strconv.Atoi(flag.Arg(1)))
    if err2129 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2130 := (strconv.Atoi(flag.Arg(2)))
    if err2130 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeSpecific(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeType":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeType requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2131 := (strconv.Atoi(flag.Arg(1)))
    if err2131 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2132 := (strconv.Atoi(flag.Arg(2)))
    if err2132 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeType(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeNeighbors":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeNeighbors requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2133 := (strconv.Atoi(flag.Arg(1)))
    if err2133 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2134 := (strconv.Atoi(flag.Arg(2)))
    if err2134 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeNeighbors(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeManufacturerName":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeManufacturerName requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2135 := (strconv.Atoi(flag.Arg(1)))
    if err2135 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2136 := (strconv.Atoi(flag.Arg(2)))
    if err2136 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeManufacturerName(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeProductName":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeProductName requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2137 := (strconv.Atoi(flag.Arg(1)))
    if err2137 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2138 := (strconv.Atoi(flag.Arg(2)))
    if err2138 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeProductName(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeName":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeName requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2139 := (strconv.Atoi(flag.Arg(1)))
    if err2139 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2140 := (strconv.Atoi(flag.Arg(2)))
    if err2140 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeName(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeLocation":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeLocation requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2141 := (strconv.Atoi(flag.Arg(1)))
    if err2141 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2142 := (strconv.Atoi(flag.Arg(2)))
    if err2142 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeLocation(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeManufacturerId":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeManufacturerId requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2143 := (strconv.Atoi(flag.Arg(1)))
    if err2143 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2144 := (strconv.Atoi(flag.Arg(2)))
    if err2144 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeManufacturerId(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeProductType":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeProductType requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2145 := (strconv.Atoi(flag.Arg(1)))
    if err2145 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2146 := (strconv.Atoi(flag.Arg(2)))
    if err2146 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeProductType(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeProductId":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeProductId requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2147 := (strconv.Atoi(flag.Arg(1)))
    if err2147 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2148 := (strconv.Atoi(flag.Arg(2)))
    if err2148 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeProductId(value0, value1))
    fmt.Print("\n")
    break
  case "SetNodeManufacturerName":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetNodeManufacturerName requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2149 := (strconv.Atoi(flag.Arg(1)))
    if err2149 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2150 := (strconv.Atoi(flag.Arg(2)))
    if err2150 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.SetNodeManufacturerName(value0, value1, value2))
    fmt.Print("\n")
    break
  case "SetNodeProductName":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetNodeProductName requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2152 := (strconv.Atoi(flag.Arg(1)))
    if err2152 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2153 := (strconv.Atoi(flag.Arg(2)))
    if err2153 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.SetNodeProductName(value0, value1, value2))
    fmt.Print("\n")
    break
  case "SetNodeName":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetNodeName requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2155 := (strconv.Atoi(flag.Arg(1)))
    if err2155 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2156 := (strconv.Atoi(flag.Arg(2)))
    if err2156 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.SetNodeName(value0, value1, value2))
    fmt.Print("\n")
    break
  case "SetNodeLocation":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetNodeLocation requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2158 := (strconv.Atoi(flag.Arg(1)))
    if err2158 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2159 := (strconv.Atoi(flag.Arg(2)))
    if err2159 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.SetNodeLocation(value0, value1, value2))
    fmt.Print("\n")
    break
  case "SetNodeOn":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetNodeOn requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2161 := (strconv.Atoi(flag.Arg(1)))
    if err2161 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2162 := (strconv.Atoi(flag.Arg(2)))
    if err2162 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.SetNodeOn(value0, value1))
    fmt.Print("\n")
    break
  case "SetNodeOff":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetNodeOff requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2163 := (strconv.Atoi(flag.Arg(1)))
    if err2163 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2164 := (strconv.Atoi(flag.Arg(2)))
    if err2164 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.SetNodeOff(value0, value1))
    fmt.Print("\n")
    break
  case "SetNodeLevel":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetNodeLevel requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2165 := (strconv.Atoi(flag.Arg(1)))
    if err2165 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2166 := (strconv.Atoi(flag.Arg(2)))
    if err2166 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    tmp2, err2167 := (strconv.Atoi(flag.Arg(3)))
    if err2167 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    fmt.Print(client.SetNodeLevel(value0, value1, value2))
    fmt.Print("\n")
    break
  case "IsNodeInfoReceived":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "IsNodeInfoReceived requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2168 := (strconv.Atoi(flag.Arg(1)))
    if err2168 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2169 := (strconv.Atoi(flag.Arg(2)))
    if err2169 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.IsNodeInfoReceived(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeClassInformation":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "GetNodeClassInformation requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2170 := (strconv.Atoi(flag.Arg(1)))
    if err2170 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2171 := (strconv.Atoi(flag.Arg(2)))
    if err2171 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    tmp2, err2172 := (strconv.Atoi(flag.Arg(3)))
    if err2172 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    fmt.Print(client.GetNodeClassInformation(value0, value1, value2))
    fmt.Print("\n")
    break
  case "IsNodeAwake":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "IsNodeAwake requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2173 := (strconv.Atoi(flag.Arg(1)))
    if err2173 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2174 := (strconv.Atoi(flag.Arg(2)))
    if err2174 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.IsNodeAwake(value0, value1))
    fmt.Print("\n")
    break
  case "IsNodeFailed":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "IsNodeFailed requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2175 := (strconv.Atoi(flag.Arg(1)))
    if err2175 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2176 := (strconv.Atoi(flag.Arg(2)))
    if err2176 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.IsNodeFailed(value0, value1))
    fmt.Print("\n")
    break
  case "GetValueLabel":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueLabel requires 1 args\n")
      flag.Usage()
    }
    arg2177 := flag.Arg(1)
    mbTrans2178 := thrift.NewTMemoryBufferLen(len(arg2177))
    defer mbTrans2178.Close()
    _, err2179 := mbTrans2178.WriteString(arg2177)
    if err2179 != nil {
      Usage()
      return
    }
    factory2180 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2181 := factory2180.GetProtocol(mbTrans2178)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2182 := argvalue0.Read(jsProt2181)
    if err2182 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueLabel(value0))
    fmt.Print("\n")
    break
  case "SetValueLabel":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetValueLabel requires 2 args\n")
      flag.Usage()
    }
    arg2183 := flag.Arg(1)
    mbTrans2184 := thrift.NewTMemoryBufferLen(len(arg2183))
    defer mbTrans2184.Close()
    _, err2185 := mbTrans2184.WriteString(arg2183)
    if err2185 != nil {
      Usage()
      return
    }
    factory2186 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2187 := factory2186.GetProtocol(mbTrans2184)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2188 := argvalue0.Read(jsProt2187)
    if err2188 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.SetValueLabel(value0, value1))
    fmt.Print("\n")
    break
  case "GetValueUnits":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueUnits requires 1 args\n")
      flag.Usage()
    }
    arg2190 := flag.Arg(1)
    mbTrans2191 := thrift.NewTMemoryBufferLen(len(arg2190))
    defer mbTrans2191.Close()
    _, err2192 := mbTrans2191.WriteString(arg2190)
    if err2192 != nil {
      Usage()
      return
    }
    factory2193 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2194 := factory2193.GetProtocol(mbTrans2191)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2195 := argvalue0.Read(jsProt2194)
    if err2195 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueUnits(value0))
    fmt.Print("\n")
    break
  case "SetValueUnits":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetValueUnits requires 2 args\n")
      flag.Usage()
    }
    arg2196 := flag.Arg(1)
    mbTrans2197 := thrift.NewTMemoryBufferLen(len(arg2196))
    defer mbTrans2197.Close()
    _, err2198 := mbTrans2197.WriteString(arg2196)
    if err2198 != nil {
      Usage()
      return
    }
    factory2199 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2200 := factory2199.GetProtocol(mbTrans2197)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2201 := argvalue0.Read(jsProt2200)
    if err2201 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.SetValueUnits(value0, value1))
    fmt.Print("\n")
    break
  case "GetValueHelp":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueHelp requires 1 args\n")
      flag.Usage()
    }
    arg2203 := flag.Arg(1)
    mbTrans2204 := thrift.NewTMemoryBufferLen(len(arg2203))
    defer mbTrans2204.Close()
    _, err2205 := mbTrans2204.WriteString(arg2203)
    if err2205 != nil {
      Usage()
      return
    }
    factory2206 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2207 := factory2206.GetProtocol(mbTrans2204)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2208 := argvalue0.Read(jsProt2207)
    if err2208 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueHelp(value0))
    fmt.Print("\n")
    break
  case "SetValueHelp":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetValueHelp requires 2 args\n")
      flag.Usage()
    }
    arg2209 := flag.Arg(1)
    mbTrans2210 := thrift.NewTMemoryBufferLen(len(arg2209))
    defer mbTrans2210.Close()
    _, err2211 := mbTrans2210.WriteString(arg2209)
    if err2211 != nil {
      Usage()
      return
    }
    factory2212 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2213 := factory2212.GetProtocol(mbTrans2210)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2214 := argvalue0.Read(jsProt2213)
    if err2214 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.SetValueHelp(value0, value1))
    fmt.Print("\n")
    break
  case "GetValueMin":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueMin requires 1 args\n")
      flag.Usage()
    }
    arg2216 := flag.Arg(1)
    mbTrans2217 := thrift.NewTMemoryBufferLen(len(arg2216))
    defer mbTrans2217.Close()
    _, err2218 := mbTrans2217.WriteString(arg2216)
    if err2218 != nil {
      Usage()
      return
    }
    factory2219 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2220 := factory2219.GetProtocol(mbTrans2217)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2221 := argvalue0.Read(jsProt2220)
    if err2221 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueMin(value0))
    fmt.Print("\n")
    break
  case "GetValueMax":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueMax requires 1 args\n")
      flag.Usage()
    }
    arg2222 := flag.Arg(1)
    mbTrans2223 := thrift.NewTMemoryBufferLen(len(arg2222))
    defer mbTrans2223.Close()
    _, err2224 := mbTrans2223.WriteString(arg2222)
    if err2224 != nil {
      Usage()
      return
    }
    factory2225 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2226 := factory2225.GetProtocol(mbTrans2223)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2227 := argvalue0.Read(jsProt2226)
    if err2227 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueMax(value0))
    fmt.Print("\n")
    break
  case "IsValueReadOnly":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "IsValueReadOnly requires 1 args\n")
      flag.Usage()
    }
    arg2228 := flag.Arg(1)
    mbTrans2229 := thrift.NewTMemoryBufferLen(len(arg2228))
    defer mbTrans2229.Close()
    _, err2230 := mbTrans2229.WriteString(arg2228)
    if err2230 != nil {
      Usage()
      return
    }
    factory2231 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2232 := factory2231.GetProtocol(mbTrans2229)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2233 := argvalue0.Read(jsProt2232)
    if err2233 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.IsValueReadOnly(value0))
    fmt.Print("\n")
    break
  case "IsValueWriteOnly":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "IsValueWriteOnly requires 1 args\n")
      flag.Usage()
    }
    arg2234 := flag.Arg(1)
    mbTrans2235 := thrift.NewTMemoryBufferLen(len(arg2234))
    defer mbTrans2235.Close()
    _, err2236 := mbTrans2235.WriteString(arg2234)
    if err2236 != nil {
      Usage()
      return
    }
    factory2237 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2238 := factory2237.GetProtocol(mbTrans2235)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2239 := argvalue0.Read(jsProt2238)
    if err2239 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.IsValueWriteOnly(value0))
    fmt.Print("\n")
    break
  case "IsValueSet":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "IsValueSet requires 1 args\n")
      flag.Usage()
    }
    arg2240 := flag.Arg(1)
    mbTrans2241 := thrift.NewTMemoryBufferLen(len(arg2240))
    defer mbTrans2241.Close()
    _, err2242 := mbTrans2241.WriteString(arg2240)
    if err2242 != nil {
      Usage()
      return
    }
    factory2243 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2244 := factory2243.GetProtocol(mbTrans2241)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2245 := argvalue0.Read(jsProt2244)
    if err2245 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.IsValueSet(value0))
    fmt.Print("\n")
    break
  case "IsValuePolled":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "IsValuePolled requires 1 args\n")
      flag.Usage()
    }
    arg2246 := flag.Arg(1)
    mbTrans2247 := thrift.NewTMemoryBufferLen(len(arg2246))
    defer mbTrans2247.Close()
    _, err2248 := mbTrans2247.WriteString(arg2246)
    if err2248 != nil {
      Usage()
      return
    }
    factory2249 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2250 := factory2249.GetProtocol(mbTrans2247)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2251 := argvalue0.Read(jsProt2250)
    if err2251 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.IsValuePolled(value0))
    fmt.Print("\n")
    break
  case "GetValueAsBool":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueAsBool requires 1 args\n")
      flag.Usage()
    }
    arg2252 := flag.Arg(1)
    mbTrans2253 := thrift.NewTMemoryBufferLen(len(arg2252))
    defer mbTrans2253.Close()
    _, err2254 := mbTrans2253.WriteString(arg2252)
    if err2254 != nil {
      Usage()
      return
    }
    factory2255 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2256 := factory2255.GetProtocol(mbTrans2253)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2257 := argvalue0.Read(jsProt2256)
    if err2257 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueAsBool(value0))
    fmt.Print("\n")
    break
  case "GetValueAsByte":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueAsByte requires 1 args\n")
      flag.Usage()
    }
    arg2258 := flag.Arg(1)
    mbTrans2259 := thrift.NewTMemoryBufferLen(len(arg2258))
    defer mbTrans2259.Close()
    _, err2260 := mbTrans2259.WriteString(arg2258)
    if err2260 != nil {
      Usage()
      return
    }
    factory2261 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2262 := factory2261.GetProtocol(mbTrans2259)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2263 := argvalue0.Read(jsProt2262)
    if err2263 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueAsByte(value0))
    fmt.Print("\n")
    break
  case "GetValueAsFloat":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueAsFloat requires 1 args\n")
      flag.Usage()
    }
    arg2264 := flag.Arg(1)
    mbTrans2265 := thrift.NewTMemoryBufferLen(len(arg2264))
    defer mbTrans2265.Close()
    _, err2266 := mbTrans2265.WriteString(arg2264)
    if err2266 != nil {
      Usage()
      return
    }
    factory2267 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2268 := factory2267.GetProtocol(mbTrans2265)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2269 := argvalue0.Read(jsProt2268)
    if err2269 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueAsFloat(value0))
    fmt.Print("\n")
    break
  case "GetValueAsInt":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueAsInt requires 1 args\n")
      flag.Usage()
    }
    arg2270 := flag.Arg(1)
    mbTrans2271 := thrift.NewTMemoryBufferLen(len(arg2270))
    defer mbTrans2271.Close()
    _, err2272 := mbTrans2271.WriteString(arg2270)
    if err2272 != nil {
      Usage()
      return
    }
    factory2273 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2274 := factory2273.GetProtocol(mbTrans2271)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2275 := argvalue0.Read(jsProt2274)
    if err2275 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueAsInt(value0))
    fmt.Print("\n")
    break
  case "GetValueAsShort":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueAsShort requires 1 args\n")
      flag.Usage()
    }
    arg2276 := flag.Arg(1)
    mbTrans2277 := thrift.NewTMemoryBufferLen(len(arg2276))
    defer mbTrans2277.Close()
    _, err2278 := mbTrans2277.WriteString(arg2276)
    if err2278 != nil {
      Usage()
      return
    }
    factory2279 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2280 := factory2279.GetProtocol(mbTrans2277)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2281 := argvalue0.Read(jsProt2280)
    if err2281 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueAsShort(value0))
    fmt.Print("\n")
    break
  case "GetValueAsString":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueAsString requires 1 args\n")
      flag.Usage()
    }
    arg2282 := flag.Arg(1)
    mbTrans2283 := thrift.NewTMemoryBufferLen(len(arg2282))
    defer mbTrans2283.Close()
    _, err2284 := mbTrans2283.WriteString(arg2282)
    if err2284 != nil {
      Usage()
      return
    }
    factory2285 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2286 := factory2285.GetProtocol(mbTrans2283)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2287 := argvalue0.Read(jsProt2286)
    if err2287 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueAsString(value0))
    fmt.Print("\n")
    break
  case "GetValueListSelection_String":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueListSelectionString requires 1 args\n")
      flag.Usage()
    }
    arg2288 := flag.Arg(1)
    mbTrans2289 := thrift.NewTMemoryBufferLen(len(arg2288))
    defer mbTrans2289.Close()
    _, err2290 := mbTrans2289.WriteString(arg2288)
    if err2290 != nil {
      Usage()
      return
    }
    factory2291 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2292 := factory2291.GetProtocol(mbTrans2289)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2293 := argvalue0.Read(jsProt2292)
    if err2293 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueListSelectionString(value0))
    fmt.Print("\n")
    break
  case "GetValueListSelection_Int32":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueListSelectionInt32 requires 1 args\n")
      flag.Usage()
    }
    arg2294 := flag.Arg(1)
    mbTrans2295 := thrift.NewTMemoryBufferLen(len(arg2294))
    defer mbTrans2295.Close()
    _, err2296 := mbTrans2295.WriteString(arg2294)
    if err2296 != nil {
      Usage()
      return
    }
    factory2297 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2298 := factory2297.GetProtocol(mbTrans2295)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2299 := argvalue0.Read(jsProt2298)
    if err2299 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueListSelectionInt32(value0))
    fmt.Print("\n")
    break
  case "GetValueListItems":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueListItems requires 1 args\n")
      flag.Usage()
    }
    arg2300 := flag.Arg(1)
    mbTrans2301 := thrift.NewTMemoryBufferLen(len(arg2300))
    defer mbTrans2301.Close()
    _, err2302 := mbTrans2301.WriteString(arg2300)
    if err2302 != nil {
      Usage()
      return
    }
    factory2303 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2304 := factory2303.GetProtocol(mbTrans2301)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2305 := argvalue0.Read(jsProt2304)
    if err2305 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueListItems(value0))
    fmt.Print("\n")
    break
  case "GetValueFloatPrecision":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueFloatPrecision requires 1 args\n")
      flag.Usage()
    }
    arg2306 := flag.Arg(1)
    mbTrans2307 := thrift.NewTMemoryBufferLen(len(arg2306))
    defer mbTrans2307.Close()
    _, err2308 := mbTrans2307.WriteString(arg2306)
    if err2308 != nil {
      Usage()
      return
    }
    factory2309 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2310 := factory2309.GetProtocol(mbTrans2307)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2311 := argvalue0.Read(jsProt2310)
    if err2311 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueFloatPrecision(value0))
    fmt.Print("\n")
    break
  case "SetValue_Bool":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetValueBool requires 2 args\n")
      flag.Usage()
    }
    arg2312 := flag.Arg(1)
    mbTrans2313 := thrift.NewTMemoryBufferLen(len(arg2312))
    defer mbTrans2313.Close()
    _, err2314 := mbTrans2313.WriteString(arg2312)
    if err2314 != nil {
      Usage()
      return
    }
    factory2315 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2316 := factory2315.GetProtocol(mbTrans2313)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2317 := argvalue0.Read(jsProt2316)
    if err2317 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2) == "true"
    value1 := argvalue1
    fmt.Print(client.SetValueBool(value0, value1))
    fmt.Print("\n")
    break
  case "SetValue_UInt8":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetValueUInt8 requires 2 args\n")
      flag.Usage()
    }
    arg2319 := flag.Arg(1)
    mbTrans2320 := thrift.NewTMemoryBufferLen(len(arg2319))
    defer mbTrans2320.Close()
    _, err2321 := mbTrans2320.WriteString(arg2319)
    if err2321 != nil {
      Usage()
      return
    }
    factory2322 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2323 := factory2322.GetProtocol(mbTrans2320)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2324 := argvalue0.Read(jsProt2323)
    if err2324 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err2325 := (strconv.Atoi(flag.Arg(2)))
    if err2325 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.SetValueUInt8(value0, value1))
    fmt.Print("\n")
    break
  case "SetValue_Float":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetValueFloat requires 2 args\n")
      flag.Usage()
    }
    arg2326 := flag.Arg(1)
    mbTrans2327 := thrift.NewTMemoryBufferLen(len(arg2326))
    defer mbTrans2327.Close()
    _, err2328 := mbTrans2327.WriteString(arg2326)
    if err2328 != nil {
      Usage()
      return
    }
    factory2329 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2330 := factory2329.GetProtocol(mbTrans2327)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2331 := argvalue0.Read(jsProt2330)
    if err2331 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1, err2332 := (strconv.Atof64(flag.Arg(2)))
    if err2332 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SetValueFloat(value0, value1))
    fmt.Print("\n")
    break
  case "SetValue_Int32":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetValueInt32 requires 2 args\n")
      flag.Usage()
    }
    arg2333 := flag.Arg(1)
    mbTrans2334 := thrift.NewTMemoryBufferLen(len(arg2333))
    defer mbTrans2334.Close()
    _, err2335 := mbTrans2334.WriteString(arg2333)
    if err2335 != nil {
      Usage()
      return
    }
    factory2336 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2337 := factory2336.GetProtocol(mbTrans2334)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2338 := argvalue0.Read(jsProt2337)
    if err2338 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err2339 := (strconv.Atoi(flag.Arg(2)))
    if err2339 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    fmt.Print(client.SetValueInt32(value0, value1))
    fmt.Print("\n")
    break
  case "SetValue_Int16":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetValueInt16 requires 2 args\n")
      flag.Usage()
    }
    arg2340 := flag.Arg(1)
    mbTrans2341 := thrift.NewTMemoryBufferLen(len(arg2340))
    defer mbTrans2341.Close()
    _, err2342 := mbTrans2341.WriteString(arg2340)
    if err2342 != nil {
      Usage()
      return
    }
    factory2343 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2344 := factory2343.GetProtocol(mbTrans2341)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2345 := argvalue0.Read(jsProt2344)
    if err2345 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err2346 := (strconv.Atoi(flag.Arg(2)))
    if err2346 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.SetValueInt16(value0, value1))
    fmt.Print("\n")
    break
  case "SetValue_String":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetValueString requires 2 args\n")
      flag.Usage()
    }
    arg2347 := flag.Arg(1)
    mbTrans2348 := thrift.NewTMemoryBufferLen(len(arg2347))
    defer mbTrans2348.Close()
    _, err2349 := mbTrans2348.WriteString(arg2347)
    if err2349 != nil {
      Usage()
      return
    }
    factory2350 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2351 := factory2350.GetProtocol(mbTrans2348)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2352 := argvalue0.Read(jsProt2351)
    if err2352 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.SetValueString(value0, value1))
    fmt.Print("\n")
    break
  case "SetValueListSelection":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetValueListSelection requires 2 args\n")
      flag.Usage()
    }
    arg2354 := flag.Arg(1)
    mbTrans2355 := thrift.NewTMemoryBufferLen(len(arg2354))
    defer mbTrans2355.Close()
    _, err2356 := mbTrans2355.WriteString(arg2354)
    if err2356 != nil {
      Usage()
      return
    }
    factory2357 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2358 := factory2357.GetProtocol(mbTrans2355)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2359 := argvalue0.Read(jsProt2358)
    if err2359 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.SetValueListSelection(value0, value1))
    fmt.Print("\n")
    break
  case "RefreshValue":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "RefreshValue requires 1 args\n")
      flag.Usage()
    }
    arg2361 := flag.Arg(1)
    mbTrans2362 := thrift.NewTMemoryBufferLen(len(arg2361))
    defer mbTrans2362.Close()
    _, err2363 := mbTrans2362.WriteString(arg2361)
    if err2363 != nil {
      Usage()
      return
    }
    factory2364 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2365 := factory2364.GetProtocol(mbTrans2362)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2366 := argvalue0.Read(jsProt2365)
    if err2366 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RefreshValue(value0))
    fmt.Print("\n")
    break
  case "SetChangeVerified":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetChangeVerified requires 2 args\n")
      flag.Usage()
    }
    arg2367 := flag.Arg(1)
    mbTrans2368 := thrift.NewTMemoryBufferLen(len(arg2367))
    defer mbTrans2368.Close()
    _, err2369 := mbTrans2368.WriteString(arg2367)
    if err2369 != nil {
      Usage()
      return
    }
    factory2370 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2371 := factory2370.GetProtocol(mbTrans2368)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2372 := argvalue0.Read(jsProt2371)
    if err2372 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2) == "true"
    value1 := argvalue1
    fmt.Print(client.SetChangeVerified(value0, value1))
    fmt.Print("\n")
    break
  case "PressButton":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "PressButton requires 1 args\n")
      flag.Usage()
    }
    arg2374 := flag.Arg(1)
    mbTrans2375 := thrift.NewTMemoryBufferLen(len(arg2374))
    defer mbTrans2375.Close()
    _, err2376 := mbTrans2375.WriteString(arg2374)
    if err2376 != nil {
      Usage()
      return
    }
    factory2377 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2378 := factory2377.GetProtocol(mbTrans2375)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2379 := argvalue0.Read(jsProt2378)
    if err2379 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.PressButton(value0))
    fmt.Print("\n")
    break
  case "ReleaseButton":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "ReleaseButton requires 1 args\n")
      flag.Usage()
    }
    arg2380 := flag.Arg(1)
    mbTrans2381 := thrift.NewTMemoryBufferLen(len(arg2380))
    defer mbTrans2381.Close()
    _, err2382 := mbTrans2381.WriteString(arg2380)
    if err2382 != nil {
      Usage()
      return
    }
    factory2383 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2384 := factory2383.GetProtocol(mbTrans2381)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2385 := argvalue0.Read(jsProt2384)
    if err2385 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ReleaseButton(value0))
    fmt.Print("\n")
    break
  case "GetNumSwitchPoints":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetNumSwitchPoints requires 1 args\n")
      flag.Usage()
    }
    arg2386 := flag.Arg(1)
    mbTrans2387 := thrift.NewTMemoryBufferLen(len(arg2386))
    defer mbTrans2387.Close()
    _, err2388 := mbTrans2387.WriteString(arg2386)
    if err2388 != nil {
      Usage()
      return
    }
    factory2389 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2390 := factory2389.GetProtocol(mbTrans2387)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2391 := argvalue0.Read(jsProt2390)
    if err2391 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetNumSwitchPoints(value0))
    fmt.Print("\n")
    break
  case "SetSwitchPoint":
    if flag.NArg() - 1 != 4 {
      fmt.Fprint(os.Stderr, "SetSwitchPoint requires 4 args\n")
      flag.Usage()
    }
    arg2392 := flag.Arg(1)
    mbTrans2393 := thrift.NewTMemoryBufferLen(len(arg2392))
    defer mbTrans2393.Close()
    _, err2394 := mbTrans2393.WriteString(arg2392)
    if err2394 != nil {
      Usage()
      return
    }
    factory2395 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2396 := factory2395.GetProtocol(mbTrans2393)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2397 := argvalue0.Read(jsProt2396)
    if err2397 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err2398 := (strconv.Atoi(flag.Arg(2)))
    if err2398 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    tmp2, err2399 := (strconv.Atoi(flag.Arg(3)))
    if err2399 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    tmp3, err2400 := (strconv.Atoi(flag.Arg(4)))
    if err2400 != nil {
      Usage()
      return
    }
    argvalue3 := byte(tmp3)
    value3 := argvalue3
    fmt.Print(client.SetSwitchPoint(value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "RemoveSwitchPoint":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "RemoveSwitchPoint requires 3 args\n")
      flag.Usage()
    }
    arg2401 := flag.Arg(1)
    mbTrans2402 := thrift.NewTMemoryBufferLen(len(arg2401))
    defer mbTrans2402.Close()
    _, err2403 := mbTrans2402.WriteString(arg2401)
    if err2403 != nil {
      Usage()
      return
    }
    factory2404 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2405 := factory2404.GetProtocol(mbTrans2402)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2406 := argvalue0.Read(jsProt2405)
    if err2406 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err2407 := (strconv.Atoi(flag.Arg(2)))
    if err2407 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    tmp2, err2408 := (strconv.Atoi(flag.Arg(3)))
    if err2408 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    fmt.Print(client.RemoveSwitchPoint(value0, value1, value2))
    fmt.Print("\n")
    break
  case "ClearSwitchPoints":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "ClearSwitchPoints requires 1 args\n")
      flag.Usage()
    }
    arg2409 := flag.Arg(1)
    mbTrans2410 := thrift.NewTMemoryBufferLen(len(arg2409))
    defer mbTrans2410.Close()
    _, err2411 := mbTrans2410.WriteString(arg2409)
    if err2411 != nil {
      Usage()
      return
    }
    factory2412 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2413 := factory2412.GetProtocol(mbTrans2410)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2414 := argvalue0.Read(jsProt2413)
    if err2414 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ClearSwitchPoints(value0))
    fmt.Print("\n")
    break
  case "GetSwitchPoint":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetSwitchPoint requires 2 args\n")
      flag.Usage()
    }
    arg2415 := flag.Arg(1)
    mbTrans2416 := thrift.NewTMemoryBufferLen(len(arg2415))
    defer mbTrans2416.Close()
    _, err2417 := mbTrans2416.WriteString(arg2415)
    if err2417 != nil {
      Usage()
      return
    }
    factory2418 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2419 := factory2418.GetProtocol(mbTrans2416)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2420 := argvalue0.Read(jsProt2419)
    if err2420 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err2421 := (strconv.Atoi(flag.Arg(2)))
    if err2421 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetSwitchPoint(value0, value1))
    fmt.Print("\n")
    break
  case "SwitchAllOn":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "SwitchAllOn requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2422 := (strconv.Atoi(flag.Arg(1)))
    if err2422 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.SwitchAllOn(value0))
    fmt.Print("\n")
    break
  case "SwitchAllOff":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "SwitchAllOff requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2423 := (strconv.Atoi(flag.Arg(1)))
    if err2423 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.SwitchAllOff(value0))
    fmt.Print("\n")
    break
  case "SetConfigParam":
    if flag.NArg() - 1 != 5 {
      fmt.Fprint(os.Stderr, "SetConfigParam requires 5 args\n")
      flag.Usage()
    }
    tmp0, err2424 := (strconv.Atoi(flag.Arg(1)))
    if err2424 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2425 := (strconv.Atoi(flag.Arg(2)))
    if err2425 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    tmp2, err2426 := (strconv.Atoi(flag.Arg(3)))
    if err2426 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    tmp3, err2427 := (strconv.Atoi(flag.Arg(4)))
    if err2427 != nil {
      Usage()
      return
    }
    argvalue3 := int32(tmp3)
    value3 := argvalue3
    tmp4, err2428 := (strconv.Atoi(flag.Arg(5)))
    if err2428 != nil {
      Usage()
      return
    }
    argvalue4 := byte(tmp4)
    value4 := argvalue4
    fmt.Print(client.SetConfigParam(value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "RequestConfigParam":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "RequestConfigParam requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2429 := (strconv.Atoi(flag.Arg(1)))
    if err2429 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2430 := (strconv.Atoi(flag.Arg(2)))
    if err2430 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    tmp2, err2431 := (strconv.Atoi(flag.Arg(3)))
    if err2431 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    fmt.Print(client.RequestConfigParam(value0, value1, value2))
    fmt.Print("\n")
    break
  case "RequestAllConfigParams":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "RequestAllConfigParams requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2432 := (strconv.Atoi(flag.Arg(1)))
    if err2432 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2433 := (strconv.Atoi(flag.Arg(2)))
    if err2433 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.RequestAllConfigParams(value0, value1))
    fmt.Print("\n")
    break
  case "GetNumGroups":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNumGroups requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2434 := (strconv.Atoi(flag.Arg(1)))
    if err2434 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2435 := (strconv.Atoi(flag.Arg(2)))
    if err2435 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNumGroups(value0, value1))
    fmt.Print("\n")
    break
  case "GetAssociations":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "GetAssociations requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2436 := (strconv.Atoi(flag.Arg(1)))
    if err2436 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2437 := (strconv.Atoi(flag.Arg(2)))
    if err2437 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    tmp2, err2438 := (strconv.Atoi(flag.Arg(3)))
    if err2438 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    fmt.Print(client.GetAssociations(value0, value1, value2))
    fmt.Print("\n")
    break
  case "GetMaxAssociations":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "GetMaxAssociations requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2439 := (strconv.Atoi(flag.Arg(1)))
    if err2439 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2440 := (strconv.Atoi(flag.Arg(2)))
    if err2440 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    tmp2, err2441 := (strconv.Atoi(flag.Arg(3)))
    if err2441 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    fmt.Print(client.GetMaxAssociations(value0, value1, value2))
    fmt.Print("\n")
    break
  case "GetGroupLabel":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "GetGroupLabel requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2442 := (strconv.Atoi(flag.Arg(1)))
    if err2442 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2443 := (strconv.Atoi(flag.Arg(2)))
    if err2443 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    tmp2, err2444 := (strconv.Atoi(flag.Arg(3)))
    if err2444 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    fmt.Print(client.GetGroupLabel(value0, value1, value2))
    fmt.Print("\n")
    break
  case "AddAssociation":
    if flag.NArg() - 1 != 4 {
      fmt.Fprint(os.Stderr, "AddAssociation requires 4 args\n")
      flag.Usage()
    }
    tmp0, err2445 := (strconv.Atoi(flag.Arg(1)))
    if err2445 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2446 := (strconv.Atoi(flag.Arg(2)))
    if err2446 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    tmp2, err2447 := (strconv.Atoi(flag.Arg(3)))
    if err2447 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    tmp3, err2448 := (strconv.Atoi(flag.Arg(4)))
    if err2448 != nil {
      Usage()
      return
    }
    argvalue3 := byte(tmp3)
    value3 := argvalue3
    fmt.Print(client.AddAssociation(value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "RemoveAssociation":
    if flag.NArg() - 1 != 4 {
      fmt.Fprint(os.Stderr, "RemoveAssociation requires 4 args\n")
      flag.Usage()
    }
    tmp0, err2449 := (strconv.Atoi(flag.Arg(1)))
    if err2449 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2450 := (strconv.Atoi(flag.Arg(2)))
    if err2450 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    tmp2, err2451 := (strconv.Atoi(flag.Arg(3)))
    if err2451 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    tmp3, err2452 := (strconv.Atoi(flag.Arg(4)))
    if err2452 != nil {
      Usage()
      return
    }
    argvalue3 := byte(tmp3)
    value3 := argvalue3
    fmt.Print(client.RemoveAssociation(value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "ResetController":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "ResetController requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2453 := (strconv.Atoi(flag.Arg(1)))
    if err2453 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.ResetController(value0))
    fmt.Print("\n")
    break
  case "SoftReset":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "SoftReset requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2454 := (strconv.Atoi(flag.Arg(1)))
    if err2454 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.SoftReset(value0))
    fmt.Print("\n")
    break
  case "BeginControllerCommand":
    if flag.NArg() - 1 != 5 {
      fmt.Fprint(os.Stderr, "BeginControllerCommand requires 5 args\n")
      flag.Usage()
    }
    tmp0, err2455 := (strconv.Atoi(flag.Arg(1)))
    if err2455 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := OpenZWave.DriverControllerCommand(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3) == "true"
    value2 := argvalue2
    tmp3, err2457 := (strconv.Atoi(flag.Arg(4)))
    if err2457 != nil {
      Usage()
      return
    }
    argvalue3 := byte(tmp3)
    value3 := argvalue3
    tmp4, err2458 := (strconv.Atoi(flag.Arg(5)))
    if err2458 != nil {
      Usage()
      return
    }
    argvalue4 := byte(tmp4)
    value4 := argvalue4
    fmt.Print(client.BeginControllerCommand(value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "CancelControllerCommand":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "CancelControllerCommand requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2459 := (strconv.Atoi(flag.Arg(1)))
    if err2459 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.CancelControllerCommand(value0))
    fmt.Print("\n")
    break
  case "TestNetworkNode":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "TestNetworkNode requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2460 := (strconv.Atoi(flag.Arg(1)))
    if err2460 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2461 := (strconv.Atoi(flag.Arg(2)))
    if err2461 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    tmp2, err2462 := (strconv.Atoi(flag.Arg(3)))
    if err2462 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    fmt.Print(client.TestNetworkNode(value0, value1, value2))
    fmt.Print("\n")
    break
  case "TestNetwork":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "TestNetwork requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2463 := (strconv.Atoi(flag.Arg(1)))
    if err2463 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2464 := (strconv.Atoi(flag.Arg(2)))
    if err2464 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    fmt.Print(client.TestNetwork(value0, value1))
    fmt.Print("\n")
    break
  case "GetNumScenes":
    if flag.NArg() - 1 != 0 {
      fmt.Fprint(os.Stderr, "GetNumScenes requires 0 args\n")
      flag.Usage()
    }
    fmt.Print(client.GetNumScenes())
    fmt.Print("\n")
    break
  case "GetAllScenes":
    if flag.NArg() - 1 != 0 {
      fmt.Fprint(os.Stderr, "GetAllScenes requires 0 args\n")
      flag.Usage()
    }
    fmt.Print(client.GetAllScenes())
    fmt.Print("\n")
    break
  case "RemoveAllScenes":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "RemoveAllScenes requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2465 := (strconv.Atoi(flag.Arg(1)))
    if err2465 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.RemoveAllScenes(value0))
    fmt.Print("\n")
    break
  case "CreateScene":
    if flag.NArg() - 1 != 0 {
      fmt.Fprint(os.Stderr, "CreateScene requires 0 args\n")
      flag.Usage()
    }
    fmt.Print(client.CreateScene())
    fmt.Print("\n")
    break
  case "RemoveScene":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "RemoveScene requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2466 := (strconv.Atoi(flag.Arg(1)))
    if err2466 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    fmt.Print(client.RemoveScene(value0))
    fmt.Print("\n")
    break
  case "AddSceneValue_Bool":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "AddSceneValueBool requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2467 := (strconv.Atoi(flag.Arg(1)))
    if err2467 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2468 := flag.Arg(2)
    mbTrans2469 := thrift.NewTMemoryBufferLen(len(arg2468))
    defer mbTrans2469.Close()
    _, err2470 := mbTrans2469.WriteString(arg2468)
    if err2470 != nil {
      Usage()
      return
    }
    factory2471 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2472 := factory2471.GetProtocol(mbTrans2469)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2473 := argvalue1.Read(jsProt2472)
    if err2473 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := flag.Arg(3) == "true"
    value2 := argvalue2
    fmt.Print(client.AddSceneValueBool(value0, value1, value2))
    fmt.Print("\n")
    break
  case "AddSceneValue_Uint8":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "AddSceneValueUint8 requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2475 := (strconv.Atoi(flag.Arg(1)))
    if err2475 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2476 := flag.Arg(2)
    mbTrans2477 := thrift.NewTMemoryBufferLen(len(arg2476))
    defer mbTrans2477.Close()
    _, err2478 := mbTrans2477.WriteString(arg2476)
    if err2478 != nil {
      Usage()
      return
    }
    factory2479 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2480 := factory2479.GetProtocol(mbTrans2477)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2481 := argvalue1.Read(jsProt2480)
    if err2481 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    tmp2, err2482 := (strconv.Atoi(flag.Arg(3)))
    if err2482 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    fmt.Print(client.AddSceneValueUint8(value0, value1, value2))
    fmt.Print("\n")
    break
  case "AddSceneValue_Float":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "AddSceneValueFloat requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2483 := (strconv.Atoi(flag.Arg(1)))
    if err2483 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2484 := flag.Arg(2)
    mbTrans2485 := thrift.NewTMemoryBufferLen(len(arg2484))
    defer mbTrans2485.Close()
    _, err2486 := mbTrans2485.WriteString(arg2484)
    if err2486 != nil {
      Usage()
      return
    }
    factory2487 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2488 := factory2487.GetProtocol(mbTrans2485)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2489 := argvalue1.Read(jsProt2488)
    if err2489 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2, err2490 := (strconv.Atof64(flag.Arg(3)))
    if err2490 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.AddSceneValueFloat(value0, value1, value2))
    fmt.Print("\n")
    break
  case "AddSceneValue_Int32":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "AddSceneValueInt32 requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2491 := (strconv.Atoi(flag.Arg(1)))
    if err2491 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2492 := flag.Arg(2)
    mbTrans2493 := thrift.NewTMemoryBufferLen(len(arg2492))
    defer mbTrans2493.Close()
    _, err2494 := mbTrans2493.WriteString(arg2492)
    if err2494 != nil {
      Usage()
      return
    }
    factory2495 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2496 := factory2495.GetProtocol(mbTrans2493)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2497 := argvalue1.Read(jsProt2496)
    if err2497 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    tmp2, err2498 := (strconv.Atoi(flag.Arg(3)))
    if err2498 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    fmt.Print(client.AddSceneValueInt32(value0, value1, value2))
    fmt.Print("\n")
    break
  case "AddSceneValue_Int16":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "AddSceneValueInt16 requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2499 := (strconv.Atoi(flag.Arg(1)))
    if err2499 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2500 := flag.Arg(2)
    mbTrans2501 := thrift.NewTMemoryBufferLen(len(arg2500))
    defer mbTrans2501.Close()
    _, err2502 := mbTrans2501.WriteString(arg2500)
    if err2502 != nil {
      Usage()
      return
    }
    factory2503 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2504 := factory2503.GetProtocol(mbTrans2501)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2505 := argvalue1.Read(jsProt2504)
    if err2505 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    tmp2, err2506 := (strconv.Atoi(flag.Arg(3)))
    if err2506 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    fmt.Print(client.AddSceneValueInt16(value0, value1, value2))
    fmt.Print("\n")
    break
  case "AddSceneValue_String":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "AddSceneValueString requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2507 := (strconv.Atoi(flag.Arg(1)))
    if err2507 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2508 := flag.Arg(2)
    mbTrans2509 := thrift.NewTMemoryBufferLen(len(arg2508))
    defer mbTrans2509.Close()
    _, err2510 := mbTrans2509.WriteString(arg2508)
    if err2510 != nil {
      Usage()
      return
    }
    factory2511 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2512 := factory2511.GetProtocol(mbTrans2509)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2513 := argvalue1.Read(jsProt2512)
    if err2513 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.AddSceneValueString(value0, value1, value2))
    fmt.Print("\n")
    break
  case "AddSceneValueListSelection_String":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "AddSceneValueListSelectionString requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2515 := (strconv.Atoi(flag.Arg(1)))
    if err2515 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2516 := flag.Arg(2)
    mbTrans2517 := thrift.NewTMemoryBufferLen(len(arg2516))
    defer mbTrans2517.Close()
    _, err2518 := mbTrans2517.WriteString(arg2516)
    if err2518 != nil {
      Usage()
      return
    }
    factory2519 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2520 := factory2519.GetProtocol(mbTrans2517)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2521 := argvalue1.Read(jsProt2520)
    if err2521 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.AddSceneValueListSelectionString(value0, value1, value2))
    fmt.Print("\n")
    break
  case "AddSceneValueListSelection_Int32":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "AddSceneValueListSelectionInt32 requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2523 := (strconv.Atoi(flag.Arg(1)))
    if err2523 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2524 := flag.Arg(2)
    mbTrans2525 := thrift.NewTMemoryBufferLen(len(arg2524))
    defer mbTrans2525.Close()
    _, err2526 := mbTrans2525.WriteString(arg2524)
    if err2526 != nil {
      Usage()
      return
    }
    factory2527 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2528 := factory2527.GetProtocol(mbTrans2525)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2529 := argvalue1.Read(jsProt2528)
    if err2529 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    tmp2, err2530 := (strconv.Atoi(flag.Arg(3)))
    if err2530 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    fmt.Print(client.AddSceneValueListSelectionInt32(value0, value1, value2))
    fmt.Print("\n")
    break
  case "RemoveSceneValue":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "RemoveSceneValue requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2531 := (strconv.Atoi(flag.Arg(1)))
    if err2531 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2532 := flag.Arg(2)
    mbTrans2533 := thrift.NewTMemoryBufferLen(len(arg2532))
    defer mbTrans2533.Close()
    _, err2534 := mbTrans2533.WriteString(arg2532)
    if err2534 != nil {
      Usage()
      return
    }
    factory2535 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2536 := factory2535.GetProtocol(mbTrans2533)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2537 := argvalue1.Read(jsProt2536)
    if err2537 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.RemoveSceneValue(value0, value1))
    fmt.Print("\n")
    break
  case "SceneGetValues":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "SceneGetValues requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2538 := (strconv.Atoi(flag.Arg(1)))
    if err2538 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    fmt.Print(client.SceneGetValues(value0))
    fmt.Print("\n")
    break
  case "SceneGetValueAsBool":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SceneGetValueAsBool requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2539 := (strconv.Atoi(flag.Arg(1)))
    if err2539 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2540 := flag.Arg(2)
    mbTrans2541 := thrift.NewTMemoryBufferLen(len(arg2540))
    defer mbTrans2541.Close()
    _, err2542 := mbTrans2541.WriteString(arg2540)
    if err2542 != nil {
      Usage()
      return
    }
    factory2543 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2544 := factory2543.GetProtocol(mbTrans2541)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2545 := argvalue1.Read(jsProt2544)
    if err2545 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SceneGetValueAsBool(value0, value1))
    fmt.Print("\n")
    break
  case "SceneGetValueAsByte":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SceneGetValueAsByte requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2546 := (strconv.Atoi(flag.Arg(1)))
    if err2546 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2547 := flag.Arg(2)
    mbTrans2548 := thrift.NewTMemoryBufferLen(len(arg2547))
    defer mbTrans2548.Close()
    _, err2549 := mbTrans2548.WriteString(arg2547)
    if err2549 != nil {
      Usage()
      return
    }
    factory2550 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2551 := factory2550.GetProtocol(mbTrans2548)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2552 := argvalue1.Read(jsProt2551)
    if err2552 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SceneGetValueAsByte(value0, value1))
    fmt.Print("\n")
    break
  case "SceneGetValueAsFloat":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SceneGetValueAsFloat requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2553 := (strconv.Atoi(flag.Arg(1)))
    if err2553 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2554 := flag.Arg(2)
    mbTrans2555 := thrift.NewTMemoryBufferLen(len(arg2554))
    defer mbTrans2555.Close()
    _, err2556 := mbTrans2555.WriteString(arg2554)
    if err2556 != nil {
      Usage()
      return
    }
    factory2557 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2558 := factory2557.GetProtocol(mbTrans2555)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2559 := argvalue1.Read(jsProt2558)
    if err2559 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SceneGetValueAsFloat(value0, value1))
    fmt.Print("\n")
    break
  case "SceneGetValueAsInt":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SceneGetValueAsInt requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2560 := (strconv.Atoi(flag.Arg(1)))
    if err2560 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2561 := flag.Arg(2)
    mbTrans2562 := thrift.NewTMemoryBufferLen(len(arg2561))
    defer mbTrans2562.Close()
    _, err2563 := mbTrans2562.WriteString(arg2561)
    if err2563 != nil {
      Usage()
      return
    }
    factory2564 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2565 := factory2564.GetProtocol(mbTrans2562)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2566 := argvalue1.Read(jsProt2565)
    if err2566 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SceneGetValueAsInt(value0, value1))
    fmt.Print("\n")
    break
  case "SceneGetValueAsShort":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SceneGetValueAsShort requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2567 := (strconv.Atoi(flag.Arg(1)))
    if err2567 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2568 := flag.Arg(2)
    mbTrans2569 := thrift.NewTMemoryBufferLen(len(arg2568))
    defer mbTrans2569.Close()
    _, err2570 := mbTrans2569.WriteString(arg2568)
    if err2570 != nil {
      Usage()
      return
    }
    factory2571 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2572 := factory2571.GetProtocol(mbTrans2569)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2573 := argvalue1.Read(jsProt2572)
    if err2573 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SceneGetValueAsShort(value0, value1))
    fmt.Print("\n")
    break
  case "SceneGetValueAsString":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SceneGetValueAsString requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2574 := (strconv.Atoi(flag.Arg(1)))
    if err2574 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2575 := flag.Arg(2)
    mbTrans2576 := thrift.NewTMemoryBufferLen(len(arg2575))
    defer mbTrans2576.Close()
    _, err2577 := mbTrans2576.WriteString(arg2575)
    if err2577 != nil {
      Usage()
      return
    }
    factory2578 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2579 := factory2578.GetProtocol(mbTrans2576)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2580 := argvalue1.Read(jsProt2579)
    if err2580 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SceneGetValueAsString(value0, value1))
    fmt.Print("\n")
    break
  case "SceneGetValueListSelection_String":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SceneGetValueListSelectionString requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2581 := (strconv.Atoi(flag.Arg(1)))
    if err2581 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2582 := flag.Arg(2)
    mbTrans2583 := thrift.NewTMemoryBufferLen(len(arg2582))
    defer mbTrans2583.Close()
    _, err2584 := mbTrans2583.WriteString(arg2582)
    if err2584 != nil {
      Usage()
      return
    }
    factory2585 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2586 := factory2585.GetProtocol(mbTrans2583)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2587 := argvalue1.Read(jsProt2586)
    if err2587 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SceneGetValueListSelectionString(value0, value1))
    fmt.Print("\n")
    break
  case "SceneGetValueListSelection_Int32":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SceneGetValueListSelectionInt32 requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2588 := (strconv.Atoi(flag.Arg(1)))
    if err2588 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2589 := flag.Arg(2)
    mbTrans2590 := thrift.NewTMemoryBufferLen(len(arg2589))
    defer mbTrans2590.Close()
    _, err2591 := mbTrans2590.WriteString(arg2589)
    if err2591 != nil {
      Usage()
      return
    }
    factory2592 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2593 := factory2592.GetProtocol(mbTrans2590)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2594 := argvalue1.Read(jsProt2593)
    if err2594 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SceneGetValueListSelectionInt32(value0, value1))
    fmt.Print("\n")
    break
  case "SetSceneValue_Bool":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetSceneValueBool requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2595 := (strconv.Atoi(flag.Arg(1)))
    if err2595 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2596 := flag.Arg(2)
    mbTrans2597 := thrift.NewTMemoryBufferLen(len(arg2596))
    defer mbTrans2597.Close()
    _, err2598 := mbTrans2597.WriteString(arg2596)
    if err2598 != nil {
      Usage()
      return
    }
    factory2599 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2600 := factory2599.GetProtocol(mbTrans2597)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2601 := argvalue1.Read(jsProt2600)
    if err2601 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := flag.Arg(3) == "true"
    value2 := argvalue2
    fmt.Print(client.SetSceneValueBool(value0, value1, value2))
    fmt.Print("\n")
    break
  case "SetSceneValue_Uint8":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetSceneValueUint8 requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2603 := (strconv.Atoi(flag.Arg(1)))
    if err2603 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2604 := flag.Arg(2)
    mbTrans2605 := thrift.NewTMemoryBufferLen(len(arg2604))
    defer mbTrans2605.Close()
    _, err2606 := mbTrans2605.WriteString(arg2604)
    if err2606 != nil {
      Usage()
      return
    }
    factory2607 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2608 := factory2607.GetProtocol(mbTrans2605)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2609 := argvalue1.Read(jsProt2608)
    if err2609 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    tmp2, err2610 := (strconv.Atoi(flag.Arg(3)))
    if err2610 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    fmt.Print(client.SetSceneValueUint8(value0, value1, value2))
    fmt.Print("\n")
    break
  case "SetSceneValue_Float":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetSceneValueFloat requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2611 := (strconv.Atoi(flag.Arg(1)))
    if err2611 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2612 := flag.Arg(2)
    mbTrans2613 := thrift.NewTMemoryBufferLen(len(arg2612))
    defer mbTrans2613.Close()
    _, err2614 := mbTrans2613.WriteString(arg2612)
    if err2614 != nil {
      Usage()
      return
    }
    factory2615 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2616 := factory2615.GetProtocol(mbTrans2613)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2617 := argvalue1.Read(jsProt2616)
    if err2617 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2, err2618 := (strconv.Atof64(flag.Arg(3)))
    if err2618 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.SetSceneValueFloat(value0, value1, value2))
    fmt.Print("\n")
    break
  case "SetSceneValue_Int32":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetSceneValueInt32 requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2619 := (strconv.Atoi(flag.Arg(1)))
    if err2619 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2620 := flag.Arg(2)
    mbTrans2621 := thrift.NewTMemoryBufferLen(len(arg2620))
    defer mbTrans2621.Close()
    _, err2622 := mbTrans2621.WriteString(arg2620)
    if err2622 != nil {
      Usage()
      return
    }
    factory2623 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2624 := factory2623.GetProtocol(mbTrans2621)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2625 := argvalue1.Read(jsProt2624)
    if err2625 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    tmp2, err2626 := (strconv.Atoi(flag.Arg(3)))
    if err2626 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    fmt.Print(client.SetSceneValueInt32(value0, value1, value2))
    fmt.Print("\n")
    break
  case "SetSceneValue_Int16":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetSceneValueInt16 requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2627 := (strconv.Atoi(flag.Arg(1)))
    if err2627 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2628 := flag.Arg(2)
    mbTrans2629 := thrift.NewTMemoryBufferLen(len(arg2628))
    defer mbTrans2629.Close()
    _, err2630 := mbTrans2629.WriteString(arg2628)
    if err2630 != nil {
      Usage()
      return
    }
    factory2631 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2632 := factory2631.GetProtocol(mbTrans2629)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2633 := argvalue1.Read(jsProt2632)
    if err2633 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    tmp2, err2634 := (strconv.Atoi(flag.Arg(3)))
    if err2634 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    fmt.Print(client.SetSceneValueInt16(value0, value1, value2))
    fmt.Print("\n")
    break
  case "SetSceneValue_String":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetSceneValueString requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2635 := (strconv.Atoi(flag.Arg(1)))
    if err2635 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2636 := flag.Arg(2)
    mbTrans2637 := thrift.NewTMemoryBufferLen(len(arg2636))
    defer mbTrans2637.Close()
    _, err2638 := mbTrans2637.WriteString(arg2636)
    if err2638 != nil {
      Usage()
      return
    }
    factory2639 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2640 := factory2639.GetProtocol(mbTrans2637)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2641 := argvalue1.Read(jsProt2640)
    if err2641 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.SetSceneValueString(value0, value1, value2))
    fmt.Print("\n")
    break
  case "SetSceneValueListSelection_String":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetSceneValueListSelectionString requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2643 := (strconv.Atoi(flag.Arg(1)))
    if err2643 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2644 := flag.Arg(2)
    mbTrans2645 := thrift.NewTMemoryBufferLen(len(arg2644))
    defer mbTrans2645.Close()
    _, err2646 := mbTrans2645.WriteString(arg2644)
    if err2646 != nil {
      Usage()
      return
    }
    factory2647 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2648 := factory2647.GetProtocol(mbTrans2645)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2649 := argvalue1.Read(jsProt2648)
    if err2649 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.SetSceneValueListSelectionString(value0, value1, value2))
    fmt.Print("\n")
    break
  case "SetSceneValueListSelection_Int32":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetSceneValueListSelectionInt32 requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2651 := (strconv.Atoi(flag.Arg(1)))
    if err2651 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2652 := flag.Arg(2)
    mbTrans2653 := thrift.NewTMemoryBufferLen(len(arg2652))
    defer mbTrans2653.Close()
    _, err2654 := mbTrans2653.WriteString(arg2652)
    if err2654 != nil {
      Usage()
      return
    }
    factory2655 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2656 := factory2655.GetProtocol(mbTrans2653)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2657 := argvalue1.Read(jsProt2656)
    if err2657 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    tmp2, err2658 := (strconv.Atoi(flag.Arg(3)))
    if err2658 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    fmt.Print(client.SetSceneValueListSelectionInt32(value0, value1, value2))
    fmt.Print("\n")
    break
  case "GetSceneLabel":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetSceneLabel requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2659 := (strconv.Atoi(flag.Arg(1)))
    if err2659 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetSceneLabel(value0))
    fmt.Print("\n")
    break
  case "SetSceneLabel":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetSceneLabel requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2660 := (strconv.Atoi(flag.Arg(1)))
    if err2660 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.SetSceneLabel(value0, value1))
    fmt.Print("\n")
    break
  case "SceneExists":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "SceneExists requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2662 := (strconv.Atoi(flag.Arg(1)))
    if err2662 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    fmt.Print(client.SceneExists(value0))
    fmt.Print("\n")
    break
  case "ActivateScene":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "ActivateScene requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2663 := (strconv.Atoi(flag.Arg(1)))
    if err2663 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    fmt.Print(client.ActivateScene(value0))
    fmt.Print("\n")
    break
  case "GetDriverStatistics":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetDriverStatistics requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2664 := (strconv.Atoi(flag.Arg(1)))
    if err2664 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetDriverStatistics(value0))
    fmt.Print("\n")
    break
  case "GetNodeStatistics":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeStatistics requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2665 := (strconv.Atoi(flag.Arg(1)))
    if err2665 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2666 := (strconv.Atoi(flag.Arg(2)))
    if err2666 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeStatistics(value0, value1))
    fmt.Print("\n")
    break
  case "SendAllValues":
    if flag.NArg() - 1 != 0 {
      fmt.Fprint(os.Stderr, "SendAllValues requires 0 args\n")
      flag.Usage()
    }
    fmt.Print(client.SendAllValues())
    fmt.Print("\n")
    break
  case "ping":
    if flag.NArg() - 1 != 0 {
      fmt.Fprint(os.Stderr, "Ping requires 0 args\n")
      flag.Usage()
    }
    fmt.Print(client.Ping())
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprint(os.Stderr, "Invalid function ", cmd, "\n")
  }
}
