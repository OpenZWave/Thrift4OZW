/* Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package main

import (
        "flag"
        "fmt"
        "http"
        "net"
        "os"
        "strconv"
        "thrift"
        "thriftlib/OpenZWave"
)

func Usage() {
  fmt.Fprint(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:\n")
  flag.PrintDefaults()
  fmt.Fprint(os.Stderr, "Functions:\n")
  fmt.Fprint(os.Stderr, "  WriteConfig(_homeId int32) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetControllerNodeId(_homeId int32) (retval1627 byte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsPrimaryController(_homeId int32) (retval1628 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsStaticUpdateController(_homeId int32) (retval1629 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsBridgeController(_homeId int32) (retval1630 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetLibraryVersion(_homeId int32) (retval1631 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetLibraryTypeName(_homeId int32) (retval1632 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetSendQueueCount(_homeId int32) (retval1633 int32, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetPollInterval() (retval1634 int32, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetPollInterval(_seconds int32) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  EnablePoll(_valueId *RemoteValueID) (retval1636 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  DisablePoll(_valueId *RemoteValueID) (retval1637 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  isPolled(_valueId *RemoteValueID) (retval1638 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  RefreshNodeInfo(_homeId int32, _nodeId byte) (retval1639 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  RequestNodeState(_homeId int32, _nodeId byte) (retval1640 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  RequestNodeDynamic(_homeId int32, _nodeId byte) (retval1641 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsNodeListeningDevice(_homeId int32, _nodeId byte) (retval1642 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsNodeRoutingDevice(_homeId int32, _nodeId byte) (retval1643 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeMaxBaudRate(_homeId int32, _nodeId byte) (retval1644 int32, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeVersion(_homeId int32, _nodeId byte) (retval1645 byte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeSecurity(_homeId int32, _nodeId byte) (retval1646 byte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeBasic(_homeId int32, _nodeId byte) (retval1647 byte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeGeneric(_homeId int32, _nodeId byte) (retval1648 byte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeSpecific(_homeId int32, _nodeId byte) (retval1649 byte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeType(_homeId int32, _nodeId byte) (retval1650 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeNeighbors(_homeId int32, _nodeId byte) (retval1651 *UInt32ListByte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeManufacturerName(_homeId int32, _nodeId byte) (retval1652 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeProductName(_homeId int32, _nodeId byte) (retval1653 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeName(_homeId int32, _nodeId byte) (retval1654 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeLocation(_homeId int32, _nodeId byte) (retval1655 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeManufacturerId(_homeId int32, _nodeId byte) (retval1656 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeProductType(_homeId int32, _nodeId byte) (retval1657 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeProductId(_homeId int32, _nodeId byte) (retval1658 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetNodeManufacturerName(_homeId int32, _nodeId byte, _manufacturerName string) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetNodeProductName(_homeId int32, _nodeId byte, _productName string) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetNodeName(_homeId int32, _nodeId byte, _nodeName string) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetNodeLocation(_homeId int32, _nodeId byte, _location string) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetNodeOn(_homeId int32, _nodeId byte) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetNodeOff(_homeId int32, _nodeId byte) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetNodeLevel(_homeId int32, _nodeId byte, _level byte) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsNodeInfoReceived(_homeId int32, _nodeId byte) (retval1666 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNodeClassInformation(_homeId int32, _nodeId byte, _commandClassId byte) (retval1667 *BoolGetNodeClassInformation, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueLabel(_id *RemoteValueID) (retval1668 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetValueLabel(_id *RemoteValueID, _value string) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueUnits(_id *RemoteValueID) (retval1670 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetValueUnits(_id *RemoteValueID, _value string) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueHelp(_id *RemoteValueID) (retval1672 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetValueHelp(_id *RemoteValueID, _value string) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueMin(_id *RemoteValueID) (retval1674 int32, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueMax(_id *RemoteValueID) (retval1675 int32, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsValueReadOnly(_id *RemoteValueID) (retval1676 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsValueWriteOnly(_id *RemoteValueID) (retval1677 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  IsValueSet(_id *RemoteValueID) (retval1678 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueAsBool(_id *RemoteValueID) (retval1679 *BoolBool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueAsByte(_id *RemoteValueID) (retval1680 *BoolUInt8, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueAsFloat(_id *RemoteValueID) (retval1681 *BoolFloat, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueAsInt(_id *RemoteValueID) (retval1682 *BoolInt, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueAsShort(_id *RemoteValueID) (retval1683 *BoolInt16, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueAsString(_id *RemoteValueID) (retval1684 *BoolString, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueListSelection_String(_id *RemoteValueID) (retval1685 *BoolString, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueListSelection_Int32(_id *RemoteValueID) (retval1686 *BoolInt, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueListItems(_id *RemoteValueID) (retval1687 *BoolListString, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetValueFloatPrecision(_id *RemoteValueID) (retval1688 *BoolUInt8, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetValue_Bool(_id *RemoteValueID, _value bool) (retval1689 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetValue_UInt8(_id *RemoteValueID, _value byte) (retval1690 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetValue_Float(_id *RemoteValueID, _value float64) (retval1691 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetValue_Int32(_id *RemoteValueID, _value int32) (retval1692 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetValue_Int16(_id *RemoteValueID, _value int16) (retval1693 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetValue_String(_id *RemoteValueID, _value string) (retval1694 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetValueListSelection(_id *RemoteValueID, _selectedItem string) (retval1695 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  PressButton(_id *RemoteValueID) (retval1696 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  ReleaseButton(_id *RemoteValueID) (retval1697 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNumSwitchPoints(_id *RemoteValueID) (retval1698 byte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetSwitchPoint(_id *RemoteValueID, _hours byte, _minutes byte, _setback byte) (retval1699 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  RemoveSwitchPoint(_id *RemoteValueID, _hours byte, _minutes byte) (retval1700 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  ClearSwitchPoints(_id *RemoteValueID) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetSwitchPoint(_id *RemoteValueID, _idx byte) (retval1702 *GetSwitchPointReturnStruct, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SwitchAllOn(_homeId int32) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SwitchAllOff(_homeId int32) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetConfigParam(_homeId int32, _nodeId byte, _param byte, _value int32, _size byte) (retval1705 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  RequestConfigParam(_homeId int32, _nodeId byte, _param byte) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  RequestAllConfigParams(_homeId int32, _nodeId byte) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNumGroups(_homeId int32, _nodeId byte) (retval1708 byte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetAssociations(_homeId int32, _nodeId byte, _groupIdx byte) (retval1709 *GetAssociationsReturnStruct, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetMaxAssociations(_homeId int32, _nodeId byte, _groupIdx byte) (retval1710 byte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetGroupLabel(_homeId int32, _nodeId byte, _groupIdx byte) (retval1711 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  AddAssociation(_homeId int32, _nodeId byte, _groupIdx byte, _targetNodeId byte) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  RemoveAssociation(_homeId int32, _nodeId byte, _groupIdx byte, _targetNodeId byte) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  ResetController(_homeId int32) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SoftReset(_homeId int32) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetNumScenes() (retval1716 byte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetAllScenes() (retval1717 *GetAllScenesReturnStruct, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  CreateScene() (retval1718 byte, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  RemoveScene(_sceneId byte) (retval1719 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  AddSceneValue_Bool(_sceneId byte, _valueId *RemoteValueID, _value bool) (retval1720 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  AddSceneValue_Uint8(_sceneId byte, _valueId *RemoteValueID, _value byte) (retval1721 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  AddSceneValue_Float(_sceneId byte, _valueId *RemoteValueID, _value float64) (retval1722 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  AddSceneValue_Int32(_sceneId byte, _valueId *RemoteValueID, _value int32) (retval1723 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  AddSceneValue_Int16(_sceneId byte, _valueId *RemoteValueID, _value int16) (retval1724 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  AddSceneValue_String(_sceneId byte, _valueId *RemoteValueID, _value string) (retval1725 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  AddSceneValueListSelection_String(_sceneId byte, _valueId *RemoteValueID, _value string) (retval1726 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  AddSceneValueListSelection_Int32(_sceneId byte, _valueId *RemoteValueID, _value int32) (retval1727 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  RemoveSceneValue(_sceneId byte, _valueId *RemoteValueID) (retval1728 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SceneGetValues(_sceneId byte) (retval1729 *SceneGetValuesReturnStruct, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SceneGetValueAsBool(_sceneId byte, _valueId *RemoteValueID) (retval1730 *BoolBool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SceneGetValueAsByte(_sceneId byte, _valueId *RemoteValueID) (retval1731 *BoolUInt8, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SceneGetValueAsFloat(_sceneId byte, _valueId *RemoteValueID) (retval1732 *BoolFloat, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SceneGetValueAsInt(_sceneId byte, _valueId *RemoteValueID) (retval1733 *BoolInt, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SceneGetValueAsShort(_sceneId byte, _valueId *RemoteValueID) (retval1734 *BoolInt16, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SceneGetValueAsString(_sceneId byte, _valueId *RemoteValueID) (retval1735 *BoolString, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SceneGetValueListSelection_String(_sceneId byte, _valueId *RemoteValueID) (retval1736 *BoolString, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SceneGetValueListSelection_Int32(_sceneId byte, _valueId *RemoteValueID) (retval1737 *BoolInt, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetSceneValue_Bool(_sceneId byte, _valueId *RemoteValueID, _value bool) (retval1738 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetSceneValue_Uint8(_sceneId byte, _valueId *RemoteValueID, _value byte) (retval1739 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetSceneValue_Float(_sceneId byte, _valueId *RemoteValueID, _value float64) (retval1740 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetSceneValue_Int32(_sceneId byte, _valueId *RemoteValueID, _value int32) (retval1741 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetSceneValue_Int16(_sceneId byte, _valueId *RemoteValueID, _value int16) (retval1742 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetSceneValue_String(_sceneId byte, _valueId *RemoteValueID, _value string) (retval1743 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetSceneValueListSelection_String(_sceneId byte, _valueId *RemoteValueID, _value string) (retval1744 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetSceneValueListSelection_Int32(_sceneId byte, _valueId *RemoteValueID, _value int32) (retval1745 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  GetSceneLabel(_sceneId byte) (retval1746 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SetSceneLabel(_sceneId byte, _value string) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  SceneExists(_sceneId byte) (retval1748 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  ActivateScene(_sceneId byte) (retval1749 bool, err os.Error)\n")
  fmt.Fprint(os.Stderr, "\n")
  os.Exit(0)
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  var help bool
  var url http.URL
  var trans thrift.TTransport
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.BoolVar(&help, "help", false, "See usage string")
  flag.Parse()
  if help || flag.NArg() == 0 {
    flag.Usage()
  }
  
  if len(urlString) > 0 {
    url, err := http.ParseURL(urlString)
    if err != nil {
      fmt.Fprint(os.Stderr, "Error parsing URL: ", err.String(), "\n")
      flag.Usage()
    }
    host = url.Host
    useHttp = len(url.Scheme) <= 0 || url.Scheme == "http"
  } else if useHttp {
    _, err := http.ParseURL(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprint(os.Stderr, "Error parsing URL: ", err.String(), "\n")
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err os.Error
  if useHttp {
    trans, err = thrift.NewTHttpClient(url.Raw)
  } else {
    addr, err := net.ResolveTCPAddr("tcp", fmt.Sprint(host, ":", port))
    if err != nil {
      fmt.Fprint(os.Stderr, "Error resolving address", err.String())
      os.Exit(1)
    }
    trans, err = thrift.NewTNonblockingSocketAddr(addr)
    if framed {
      trans = thrift.NewTFramedTransport(trans)
    }
  }
  if err != nil {
    fmt.Fprint(os.Stderr, "Error creating transport", err.String())
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactory()
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
    break
  default:
    fmt.Fprint(os.Stderr, "Invalid protocol specified: ", protocol, "\n")
    Usage()
    os.Exit(1)
  }
  client := OpenZWave.NewRemoteManagerClientFactory(trans, protocolFactory)
  if err = trans.Open(); err != nil {
    fmt.Fprint(os.Stderr, "Error opening socket to ", host, ":", port, " ", err.String())
    os.Exit(1)
  }
  
  switch cmd {
  case "WriteConfig":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "WriteConfig requires 1 args\n")
      flag.Usage()
    }
    tmp0, err1750 := (strconv.Atoi(flag.Arg(1)))
    if err1750 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.WriteConfig(value0))
    fmt.Print("\n")
    break
  case "GetControllerNodeId":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetControllerNodeId requires 1 args\n")
      flag.Usage()
    }
    tmp0, err1751 := (strconv.Atoi(flag.Arg(1)))
    if err1751 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetControllerNodeId(value0))
    fmt.Print("\n")
    break
  case "IsPrimaryController":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "IsPrimaryController requires 1 args\n")
      flag.Usage()
    }
    tmp0, err1752 := (strconv.Atoi(flag.Arg(1)))
    if err1752 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.IsPrimaryController(value0))
    fmt.Print("\n")
    break
  case "IsStaticUpdateController":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "IsStaticUpdateController requires 1 args\n")
      flag.Usage()
    }
    tmp0, err1753 := (strconv.Atoi(flag.Arg(1)))
    if err1753 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.IsStaticUpdateController(value0))
    fmt.Print("\n")
    break
  case "IsBridgeController":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "IsBridgeController requires 1 args\n")
      flag.Usage()
    }
    tmp0, err1754 := (strconv.Atoi(flag.Arg(1)))
    if err1754 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.IsBridgeController(value0))
    fmt.Print("\n")
    break
  case "GetLibraryVersion":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetLibraryVersion requires 1 args\n")
      flag.Usage()
    }
    tmp0, err1755 := (strconv.Atoi(flag.Arg(1)))
    if err1755 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetLibraryVersion(value0))
    fmt.Print("\n")
    break
  case "GetLibraryTypeName":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetLibraryTypeName requires 1 args\n")
      flag.Usage()
    }
    tmp0, err1756 := (strconv.Atoi(flag.Arg(1)))
    if err1756 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetLibraryTypeName(value0))
    fmt.Print("\n")
    break
  case "GetSendQueueCount":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetSendQueueCount requires 1 args\n")
      flag.Usage()
    }
    tmp0, err1757 := (strconv.Atoi(flag.Arg(1)))
    if err1757 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetSendQueueCount(value0))
    fmt.Print("\n")
    break
  case "GetPollInterval":
    if flag.NArg() - 1 != 0 {
      fmt.Fprint(os.Stderr, "GetPollInterval requires 0 args\n")
      flag.Usage()
    }
    fmt.Print(client.GetPollInterval())
    fmt.Print("\n")
    break
  case "SetPollInterval":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "SetPollInterval requires 1 args\n")
      flag.Usage()
    }
    tmp0, err1758 := (strconv.Atoi(flag.Arg(1)))
    if err1758 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.SetPollInterval(value0))
    fmt.Print("\n")
    break
  case "EnablePoll":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "EnablePoll requires 1 args\n")
      flag.Usage()
    }
    arg1759 := flag.Arg(1)
    mbTrans1760 := thrift.NewTMemoryBufferLen(len(arg1759))
    defer mbTrans1760.Close()
    _, err1761 := mbTrans1760.WriteString(arg1759)
    if err1761 != nil {
      Usage()
      return
    }
    factory1762 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1763 := factory1762.GetProtocol(mbTrans1760)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err1764 := argvalue0.Read(jsProt1763)
    if err1764 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.EnablePoll(value0))
    fmt.Print("\n")
    break
  case "DisablePoll":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "DisablePoll requires 1 args\n")
      flag.Usage()
    }
    arg1765 := flag.Arg(1)
    mbTrans1766 := thrift.NewTMemoryBufferLen(len(arg1765))
    defer mbTrans1766.Close()
    _, err1767 := mbTrans1766.WriteString(arg1765)
    if err1767 != nil {
      Usage()
      return
    }
    factory1768 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1769 := factory1768.GetProtocol(mbTrans1766)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err1770 := argvalue0.Read(jsProt1769)
    if err1770 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DisablePoll(value0))
    fmt.Print("\n")
    break
  case "isPolled":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "IsPolled requires 1 args\n")
      flag.Usage()
    }
    arg1771 := flag.Arg(1)
    mbTrans1772 := thrift.NewTMemoryBufferLen(len(arg1771))
    defer mbTrans1772.Close()
    _, err1773 := mbTrans1772.WriteString(arg1771)
    if err1773 != nil {
      Usage()
      return
    }
    factory1774 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1775 := factory1774.GetProtocol(mbTrans1772)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err1776 := argvalue0.Read(jsProt1775)
    if err1776 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.IsPolled(value0))
    fmt.Print("\n")
    break
  case "RefreshNodeInfo":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "RefreshNodeInfo requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1777 := (strconv.Atoi(flag.Arg(1)))
    if err1777 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1778 := (strconv.Atoi(flag.Arg(2)))
    if err1778 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.RefreshNodeInfo(value0, value1))
    fmt.Print("\n")
    break
  case "RequestNodeState":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "RequestNodeState requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1779 := (strconv.Atoi(flag.Arg(1)))
    if err1779 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1780 := (strconv.Atoi(flag.Arg(2)))
    if err1780 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.RequestNodeState(value0, value1))
    fmt.Print("\n")
    break
  case "RequestNodeDynamic":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "RequestNodeDynamic requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1781 := (strconv.Atoi(flag.Arg(1)))
    if err1781 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1782 := (strconv.Atoi(flag.Arg(2)))
    if err1782 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.RequestNodeDynamic(value0, value1))
    fmt.Print("\n")
    break
  case "IsNodeListeningDevice":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "IsNodeListeningDevice requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1783 := (strconv.Atoi(flag.Arg(1)))
    if err1783 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1784 := (strconv.Atoi(flag.Arg(2)))
    if err1784 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.IsNodeListeningDevice(value0, value1))
    fmt.Print("\n")
    break
  case "IsNodeRoutingDevice":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "IsNodeRoutingDevice requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1785 := (strconv.Atoi(flag.Arg(1)))
    if err1785 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1786 := (strconv.Atoi(flag.Arg(2)))
    if err1786 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.IsNodeRoutingDevice(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeMaxBaudRate":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeMaxBaudRate requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1787 := (strconv.Atoi(flag.Arg(1)))
    if err1787 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1788 := (strconv.Atoi(flag.Arg(2)))
    if err1788 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeMaxBaudRate(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeVersion":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeVersion requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1789 := (strconv.Atoi(flag.Arg(1)))
    if err1789 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1790 := (strconv.Atoi(flag.Arg(2)))
    if err1790 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeVersion(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeSecurity":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeSecurity requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1791 := (strconv.Atoi(flag.Arg(1)))
    if err1791 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1792 := (strconv.Atoi(flag.Arg(2)))
    if err1792 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeSecurity(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeBasic":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeBasic requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1793 := (strconv.Atoi(flag.Arg(1)))
    if err1793 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1794 := (strconv.Atoi(flag.Arg(2)))
    if err1794 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeBasic(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeGeneric":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeGeneric requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1795 := (strconv.Atoi(flag.Arg(1)))
    if err1795 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1796 := (strconv.Atoi(flag.Arg(2)))
    if err1796 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeGeneric(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeSpecific":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeSpecific requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1797 := (strconv.Atoi(flag.Arg(1)))
    if err1797 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1798 := (strconv.Atoi(flag.Arg(2)))
    if err1798 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeSpecific(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeType":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeType requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1799 := (strconv.Atoi(flag.Arg(1)))
    if err1799 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1800 := (strconv.Atoi(flag.Arg(2)))
    if err1800 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeType(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeNeighbors":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeNeighbors requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1801 := (strconv.Atoi(flag.Arg(1)))
    if err1801 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1802 := (strconv.Atoi(flag.Arg(2)))
    if err1802 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeNeighbors(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeManufacturerName":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeManufacturerName requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1803 := (strconv.Atoi(flag.Arg(1)))
    if err1803 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1804 := (strconv.Atoi(flag.Arg(2)))
    if err1804 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeManufacturerName(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeProductName":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeProductName requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1805 := (strconv.Atoi(flag.Arg(1)))
    if err1805 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1806 := (strconv.Atoi(flag.Arg(2)))
    if err1806 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeProductName(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeName":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeName requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1807 := (strconv.Atoi(flag.Arg(1)))
    if err1807 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1808 := (strconv.Atoi(flag.Arg(2)))
    if err1808 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeName(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeLocation":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeLocation requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1809 := (strconv.Atoi(flag.Arg(1)))
    if err1809 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1810 := (strconv.Atoi(flag.Arg(2)))
    if err1810 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeLocation(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeManufacturerId":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeManufacturerId requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1811 := (strconv.Atoi(flag.Arg(1)))
    if err1811 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1812 := (strconv.Atoi(flag.Arg(2)))
    if err1812 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeManufacturerId(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeProductType":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeProductType requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1813 := (strconv.Atoi(flag.Arg(1)))
    if err1813 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1814 := (strconv.Atoi(flag.Arg(2)))
    if err1814 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeProductType(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeProductId":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNodeProductId requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1815 := (strconv.Atoi(flag.Arg(1)))
    if err1815 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1816 := (strconv.Atoi(flag.Arg(2)))
    if err1816 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNodeProductId(value0, value1))
    fmt.Print("\n")
    break
  case "SetNodeManufacturerName":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetNodeManufacturerName requires 3 args\n")
      flag.Usage()
    }
    tmp0, err1817 := (strconv.Atoi(flag.Arg(1)))
    if err1817 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1818 := (strconv.Atoi(flag.Arg(2)))
    if err1818 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.SetNodeManufacturerName(value0, value1, value2))
    fmt.Print("\n")
    break
  case "SetNodeProductName":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetNodeProductName requires 3 args\n")
      flag.Usage()
    }
    tmp0, err1820 := (strconv.Atoi(flag.Arg(1)))
    if err1820 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1821 := (strconv.Atoi(flag.Arg(2)))
    if err1821 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.SetNodeProductName(value0, value1, value2))
    fmt.Print("\n")
    break
  case "SetNodeName":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetNodeName requires 3 args\n")
      flag.Usage()
    }
    tmp0, err1823 := (strconv.Atoi(flag.Arg(1)))
    if err1823 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1824 := (strconv.Atoi(flag.Arg(2)))
    if err1824 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.SetNodeName(value0, value1, value2))
    fmt.Print("\n")
    break
  case "SetNodeLocation":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetNodeLocation requires 3 args\n")
      flag.Usage()
    }
    tmp0, err1826 := (strconv.Atoi(flag.Arg(1)))
    if err1826 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1827 := (strconv.Atoi(flag.Arg(2)))
    if err1827 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.SetNodeLocation(value0, value1, value2))
    fmt.Print("\n")
    break
  case "SetNodeOn":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetNodeOn requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1829 := (strconv.Atoi(flag.Arg(1)))
    if err1829 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1830 := (strconv.Atoi(flag.Arg(2)))
    if err1830 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.SetNodeOn(value0, value1))
    fmt.Print("\n")
    break
  case "SetNodeOff":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetNodeOff requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1831 := (strconv.Atoi(flag.Arg(1)))
    if err1831 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1832 := (strconv.Atoi(flag.Arg(2)))
    if err1832 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.SetNodeOff(value0, value1))
    fmt.Print("\n")
    break
  case "SetNodeLevel":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetNodeLevel requires 3 args\n")
      flag.Usage()
    }
    tmp0, err1833 := (strconv.Atoi(flag.Arg(1)))
    if err1833 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1834 := (strconv.Atoi(flag.Arg(2)))
    if err1834 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    tmp2, err1835 := (strconv.Atoi(flag.Arg(3)))
    if err1835 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    fmt.Print(client.SetNodeLevel(value0, value1, value2))
    fmt.Print("\n")
    break
  case "IsNodeInfoReceived":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "IsNodeInfoReceived requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1836 := (strconv.Atoi(flag.Arg(1)))
    if err1836 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1837 := (strconv.Atoi(flag.Arg(2)))
    if err1837 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.IsNodeInfoReceived(value0, value1))
    fmt.Print("\n")
    break
  case "GetNodeClassInformation":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "GetNodeClassInformation requires 3 args\n")
      flag.Usage()
    }
    tmp0, err1838 := (strconv.Atoi(flag.Arg(1)))
    if err1838 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1839 := (strconv.Atoi(flag.Arg(2)))
    if err1839 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    tmp2, err1840 := (strconv.Atoi(flag.Arg(3)))
    if err1840 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    fmt.Print(client.GetNodeClassInformation(value0, value1, value2))
    fmt.Print("\n")
    break
  case "GetValueLabel":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueLabel requires 1 args\n")
      flag.Usage()
    }
    arg1841 := flag.Arg(1)
    mbTrans1842 := thrift.NewTMemoryBufferLen(len(arg1841))
    defer mbTrans1842.Close()
    _, err1843 := mbTrans1842.WriteString(arg1841)
    if err1843 != nil {
      Usage()
      return
    }
    factory1844 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1845 := factory1844.GetProtocol(mbTrans1842)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err1846 := argvalue0.Read(jsProt1845)
    if err1846 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueLabel(value0))
    fmt.Print("\n")
    break
  case "SetValueLabel":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetValueLabel requires 2 args\n")
      flag.Usage()
    }
    arg1847 := flag.Arg(1)
    mbTrans1848 := thrift.NewTMemoryBufferLen(len(arg1847))
    defer mbTrans1848.Close()
    _, err1849 := mbTrans1848.WriteString(arg1847)
    if err1849 != nil {
      Usage()
      return
    }
    factory1850 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1851 := factory1850.GetProtocol(mbTrans1848)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err1852 := argvalue0.Read(jsProt1851)
    if err1852 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.SetValueLabel(value0, value1))
    fmt.Print("\n")
    break
  case "GetValueUnits":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueUnits requires 1 args\n")
      flag.Usage()
    }
    arg1854 := flag.Arg(1)
    mbTrans1855 := thrift.NewTMemoryBufferLen(len(arg1854))
    defer mbTrans1855.Close()
    _, err1856 := mbTrans1855.WriteString(arg1854)
    if err1856 != nil {
      Usage()
      return
    }
    factory1857 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1858 := factory1857.GetProtocol(mbTrans1855)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err1859 := argvalue0.Read(jsProt1858)
    if err1859 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueUnits(value0))
    fmt.Print("\n")
    break
  case "SetValueUnits":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetValueUnits requires 2 args\n")
      flag.Usage()
    }
    arg1860 := flag.Arg(1)
    mbTrans1861 := thrift.NewTMemoryBufferLen(len(arg1860))
    defer mbTrans1861.Close()
    _, err1862 := mbTrans1861.WriteString(arg1860)
    if err1862 != nil {
      Usage()
      return
    }
    factory1863 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1864 := factory1863.GetProtocol(mbTrans1861)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err1865 := argvalue0.Read(jsProt1864)
    if err1865 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.SetValueUnits(value0, value1))
    fmt.Print("\n")
    break
  case "GetValueHelp":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueHelp requires 1 args\n")
      flag.Usage()
    }
    arg1867 := flag.Arg(1)
    mbTrans1868 := thrift.NewTMemoryBufferLen(len(arg1867))
    defer mbTrans1868.Close()
    _, err1869 := mbTrans1868.WriteString(arg1867)
    if err1869 != nil {
      Usage()
      return
    }
    factory1870 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1871 := factory1870.GetProtocol(mbTrans1868)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err1872 := argvalue0.Read(jsProt1871)
    if err1872 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueHelp(value0))
    fmt.Print("\n")
    break
  case "SetValueHelp":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetValueHelp requires 2 args\n")
      flag.Usage()
    }
    arg1873 := flag.Arg(1)
    mbTrans1874 := thrift.NewTMemoryBufferLen(len(arg1873))
    defer mbTrans1874.Close()
    _, err1875 := mbTrans1874.WriteString(arg1873)
    if err1875 != nil {
      Usage()
      return
    }
    factory1876 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1877 := factory1876.GetProtocol(mbTrans1874)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err1878 := argvalue0.Read(jsProt1877)
    if err1878 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.SetValueHelp(value0, value1))
    fmt.Print("\n")
    break
  case "GetValueMin":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueMin requires 1 args\n")
      flag.Usage()
    }
    arg1880 := flag.Arg(1)
    mbTrans1881 := thrift.NewTMemoryBufferLen(len(arg1880))
    defer mbTrans1881.Close()
    _, err1882 := mbTrans1881.WriteString(arg1880)
    if err1882 != nil {
      Usage()
      return
    }
    factory1883 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1884 := factory1883.GetProtocol(mbTrans1881)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err1885 := argvalue0.Read(jsProt1884)
    if err1885 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueMin(value0))
    fmt.Print("\n")
    break
  case "GetValueMax":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueMax requires 1 args\n")
      flag.Usage()
    }
    arg1886 := flag.Arg(1)
    mbTrans1887 := thrift.NewTMemoryBufferLen(len(arg1886))
    defer mbTrans1887.Close()
    _, err1888 := mbTrans1887.WriteString(arg1886)
    if err1888 != nil {
      Usage()
      return
    }
    factory1889 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1890 := factory1889.GetProtocol(mbTrans1887)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err1891 := argvalue0.Read(jsProt1890)
    if err1891 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueMax(value0))
    fmt.Print("\n")
    break
  case "IsValueReadOnly":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "IsValueReadOnly requires 1 args\n")
      flag.Usage()
    }
    arg1892 := flag.Arg(1)
    mbTrans1893 := thrift.NewTMemoryBufferLen(len(arg1892))
    defer mbTrans1893.Close()
    _, err1894 := mbTrans1893.WriteString(arg1892)
    if err1894 != nil {
      Usage()
      return
    }
    factory1895 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1896 := factory1895.GetProtocol(mbTrans1893)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err1897 := argvalue0.Read(jsProt1896)
    if err1897 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.IsValueReadOnly(value0))
    fmt.Print("\n")
    break
  case "IsValueWriteOnly":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "IsValueWriteOnly requires 1 args\n")
      flag.Usage()
    }
    arg1898 := flag.Arg(1)
    mbTrans1899 := thrift.NewTMemoryBufferLen(len(arg1898))
    defer mbTrans1899.Close()
    _, err1900 := mbTrans1899.WriteString(arg1898)
    if err1900 != nil {
      Usage()
      return
    }
    factory1901 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1902 := factory1901.GetProtocol(mbTrans1899)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err1903 := argvalue0.Read(jsProt1902)
    if err1903 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.IsValueWriteOnly(value0))
    fmt.Print("\n")
    break
  case "IsValueSet":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "IsValueSet requires 1 args\n")
      flag.Usage()
    }
    arg1904 := flag.Arg(1)
    mbTrans1905 := thrift.NewTMemoryBufferLen(len(arg1904))
    defer mbTrans1905.Close()
    _, err1906 := mbTrans1905.WriteString(arg1904)
    if err1906 != nil {
      Usage()
      return
    }
    factory1907 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1908 := factory1907.GetProtocol(mbTrans1905)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err1909 := argvalue0.Read(jsProt1908)
    if err1909 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.IsValueSet(value0))
    fmt.Print("\n")
    break
  case "GetValueAsBool":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueAsBool requires 1 args\n")
      flag.Usage()
    }
    arg1910 := flag.Arg(1)
    mbTrans1911 := thrift.NewTMemoryBufferLen(len(arg1910))
    defer mbTrans1911.Close()
    _, err1912 := mbTrans1911.WriteString(arg1910)
    if err1912 != nil {
      Usage()
      return
    }
    factory1913 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1914 := factory1913.GetProtocol(mbTrans1911)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err1915 := argvalue0.Read(jsProt1914)
    if err1915 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueAsBool(value0))
    fmt.Print("\n")
    break
  case "GetValueAsByte":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueAsByte requires 1 args\n")
      flag.Usage()
    }
    arg1916 := flag.Arg(1)
    mbTrans1917 := thrift.NewTMemoryBufferLen(len(arg1916))
    defer mbTrans1917.Close()
    _, err1918 := mbTrans1917.WriteString(arg1916)
    if err1918 != nil {
      Usage()
      return
    }
    factory1919 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1920 := factory1919.GetProtocol(mbTrans1917)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err1921 := argvalue0.Read(jsProt1920)
    if err1921 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueAsByte(value0))
    fmt.Print("\n")
    break
  case "GetValueAsFloat":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueAsFloat requires 1 args\n")
      flag.Usage()
    }
    arg1922 := flag.Arg(1)
    mbTrans1923 := thrift.NewTMemoryBufferLen(len(arg1922))
    defer mbTrans1923.Close()
    _, err1924 := mbTrans1923.WriteString(arg1922)
    if err1924 != nil {
      Usage()
      return
    }
    factory1925 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1926 := factory1925.GetProtocol(mbTrans1923)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err1927 := argvalue0.Read(jsProt1926)
    if err1927 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueAsFloat(value0))
    fmt.Print("\n")
    break
  case "GetValueAsInt":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueAsInt requires 1 args\n")
      flag.Usage()
    }
    arg1928 := flag.Arg(1)
    mbTrans1929 := thrift.NewTMemoryBufferLen(len(arg1928))
    defer mbTrans1929.Close()
    _, err1930 := mbTrans1929.WriteString(arg1928)
    if err1930 != nil {
      Usage()
      return
    }
    factory1931 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1932 := factory1931.GetProtocol(mbTrans1929)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err1933 := argvalue0.Read(jsProt1932)
    if err1933 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueAsInt(value0))
    fmt.Print("\n")
    break
  case "GetValueAsShort":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueAsShort requires 1 args\n")
      flag.Usage()
    }
    arg1934 := flag.Arg(1)
    mbTrans1935 := thrift.NewTMemoryBufferLen(len(arg1934))
    defer mbTrans1935.Close()
    _, err1936 := mbTrans1935.WriteString(arg1934)
    if err1936 != nil {
      Usage()
      return
    }
    factory1937 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1938 := factory1937.GetProtocol(mbTrans1935)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err1939 := argvalue0.Read(jsProt1938)
    if err1939 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueAsShort(value0))
    fmt.Print("\n")
    break
  case "GetValueAsString":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueAsString requires 1 args\n")
      flag.Usage()
    }
    arg1940 := flag.Arg(1)
    mbTrans1941 := thrift.NewTMemoryBufferLen(len(arg1940))
    defer mbTrans1941.Close()
    _, err1942 := mbTrans1941.WriteString(arg1940)
    if err1942 != nil {
      Usage()
      return
    }
    factory1943 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1944 := factory1943.GetProtocol(mbTrans1941)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err1945 := argvalue0.Read(jsProt1944)
    if err1945 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueAsString(value0))
    fmt.Print("\n")
    break
  case "GetValueListSelection_String":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueListSelectionString requires 1 args\n")
      flag.Usage()
    }
    arg1946 := flag.Arg(1)
    mbTrans1947 := thrift.NewTMemoryBufferLen(len(arg1946))
    defer mbTrans1947.Close()
    _, err1948 := mbTrans1947.WriteString(arg1946)
    if err1948 != nil {
      Usage()
      return
    }
    factory1949 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1950 := factory1949.GetProtocol(mbTrans1947)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err1951 := argvalue0.Read(jsProt1950)
    if err1951 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueListSelectionString(value0))
    fmt.Print("\n")
    break
  case "GetValueListSelection_Int32":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueListSelectionInt32 requires 1 args\n")
      flag.Usage()
    }
    arg1952 := flag.Arg(1)
    mbTrans1953 := thrift.NewTMemoryBufferLen(len(arg1952))
    defer mbTrans1953.Close()
    _, err1954 := mbTrans1953.WriteString(arg1952)
    if err1954 != nil {
      Usage()
      return
    }
    factory1955 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1956 := factory1955.GetProtocol(mbTrans1953)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err1957 := argvalue0.Read(jsProt1956)
    if err1957 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueListSelectionInt32(value0))
    fmt.Print("\n")
    break
  case "GetValueListItems":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueListItems requires 1 args\n")
      flag.Usage()
    }
    arg1958 := flag.Arg(1)
    mbTrans1959 := thrift.NewTMemoryBufferLen(len(arg1958))
    defer mbTrans1959.Close()
    _, err1960 := mbTrans1959.WriteString(arg1958)
    if err1960 != nil {
      Usage()
      return
    }
    factory1961 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1962 := factory1961.GetProtocol(mbTrans1959)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err1963 := argvalue0.Read(jsProt1962)
    if err1963 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueListItems(value0))
    fmt.Print("\n")
    break
  case "GetValueFloatPrecision":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetValueFloatPrecision requires 1 args\n")
      flag.Usage()
    }
    arg1964 := flag.Arg(1)
    mbTrans1965 := thrift.NewTMemoryBufferLen(len(arg1964))
    defer mbTrans1965.Close()
    _, err1966 := mbTrans1965.WriteString(arg1964)
    if err1966 != nil {
      Usage()
      return
    }
    factory1967 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1968 := factory1967.GetProtocol(mbTrans1965)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err1969 := argvalue0.Read(jsProt1968)
    if err1969 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValueFloatPrecision(value0))
    fmt.Print("\n")
    break
  case "SetValue_Bool":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetValueBool requires 2 args\n")
      flag.Usage()
    }
    arg1970 := flag.Arg(1)
    mbTrans1971 := thrift.NewTMemoryBufferLen(len(arg1970))
    defer mbTrans1971.Close()
    _, err1972 := mbTrans1971.WriteString(arg1970)
    if err1972 != nil {
      Usage()
      return
    }
    factory1973 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1974 := factory1973.GetProtocol(mbTrans1971)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err1975 := argvalue0.Read(jsProt1974)
    if err1975 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2) == "true"
    value1 := argvalue1
    fmt.Print(client.SetValueBool(value0, value1))
    fmt.Print("\n")
    break
  case "SetValue_UInt8":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetValueUInt8 requires 2 args\n")
      flag.Usage()
    }
    arg1977 := flag.Arg(1)
    mbTrans1978 := thrift.NewTMemoryBufferLen(len(arg1977))
    defer mbTrans1978.Close()
    _, err1979 := mbTrans1978.WriteString(arg1977)
    if err1979 != nil {
      Usage()
      return
    }
    factory1980 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1981 := factory1980.GetProtocol(mbTrans1978)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err1982 := argvalue0.Read(jsProt1981)
    if err1982 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err1983 := (strconv.Atoi(flag.Arg(2)))
    if err1983 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.SetValueUInt8(value0, value1))
    fmt.Print("\n")
    break
  case "SetValue_Float":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetValueFloat requires 2 args\n")
      flag.Usage()
    }
    arg1984 := flag.Arg(1)
    mbTrans1985 := thrift.NewTMemoryBufferLen(len(arg1984))
    defer mbTrans1985.Close()
    _, err1986 := mbTrans1985.WriteString(arg1984)
    if err1986 != nil {
      Usage()
      return
    }
    factory1987 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1988 := factory1987.GetProtocol(mbTrans1985)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err1989 := argvalue0.Read(jsProt1988)
    if err1989 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1, err1990 := (strconv.Atof64(flag.Arg(2)))
    if err1990 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SetValueFloat(value0, value1))
    fmt.Print("\n")
    break
  case "SetValue_Int32":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetValueInt32 requires 2 args\n")
      flag.Usage()
    }
    arg1991 := flag.Arg(1)
    mbTrans1992 := thrift.NewTMemoryBufferLen(len(arg1991))
    defer mbTrans1992.Close()
    _, err1993 := mbTrans1992.WriteString(arg1991)
    if err1993 != nil {
      Usage()
      return
    }
    factory1994 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1995 := factory1994.GetProtocol(mbTrans1992)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err1996 := argvalue0.Read(jsProt1995)
    if err1996 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err1997 := (strconv.Atoi(flag.Arg(2)))
    if err1997 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    fmt.Print(client.SetValueInt32(value0, value1))
    fmt.Print("\n")
    break
  case "SetValue_Int16":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetValueInt16 requires 2 args\n")
      flag.Usage()
    }
    arg1998 := flag.Arg(1)
    mbTrans1999 := thrift.NewTMemoryBufferLen(len(arg1998))
    defer mbTrans1999.Close()
    _, err2000 := mbTrans1999.WriteString(arg1998)
    if err2000 != nil {
      Usage()
      return
    }
    factory2001 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2002 := factory2001.GetProtocol(mbTrans1999)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2003 := argvalue0.Read(jsProt2002)
    if err2003 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err2004 := (strconv.Atoi(flag.Arg(2)))
    if err2004 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.SetValueInt16(value0, value1))
    fmt.Print("\n")
    break
  case "SetValue_String":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetValueString requires 2 args\n")
      flag.Usage()
    }
    arg2005 := flag.Arg(1)
    mbTrans2006 := thrift.NewTMemoryBufferLen(len(arg2005))
    defer mbTrans2006.Close()
    _, err2007 := mbTrans2006.WriteString(arg2005)
    if err2007 != nil {
      Usage()
      return
    }
    factory2008 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2009 := factory2008.GetProtocol(mbTrans2006)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2010 := argvalue0.Read(jsProt2009)
    if err2010 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.SetValueString(value0, value1))
    fmt.Print("\n")
    break
  case "SetValueListSelection":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetValueListSelection requires 2 args\n")
      flag.Usage()
    }
    arg2012 := flag.Arg(1)
    mbTrans2013 := thrift.NewTMemoryBufferLen(len(arg2012))
    defer mbTrans2013.Close()
    _, err2014 := mbTrans2013.WriteString(arg2012)
    if err2014 != nil {
      Usage()
      return
    }
    factory2015 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2016 := factory2015.GetProtocol(mbTrans2013)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2017 := argvalue0.Read(jsProt2016)
    if err2017 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.SetValueListSelection(value0, value1))
    fmt.Print("\n")
    break
  case "PressButton":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "PressButton requires 1 args\n")
      flag.Usage()
    }
    arg2019 := flag.Arg(1)
    mbTrans2020 := thrift.NewTMemoryBufferLen(len(arg2019))
    defer mbTrans2020.Close()
    _, err2021 := mbTrans2020.WriteString(arg2019)
    if err2021 != nil {
      Usage()
      return
    }
    factory2022 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2023 := factory2022.GetProtocol(mbTrans2020)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2024 := argvalue0.Read(jsProt2023)
    if err2024 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.PressButton(value0))
    fmt.Print("\n")
    break
  case "ReleaseButton":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "ReleaseButton requires 1 args\n")
      flag.Usage()
    }
    arg2025 := flag.Arg(1)
    mbTrans2026 := thrift.NewTMemoryBufferLen(len(arg2025))
    defer mbTrans2026.Close()
    _, err2027 := mbTrans2026.WriteString(arg2025)
    if err2027 != nil {
      Usage()
      return
    }
    factory2028 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2029 := factory2028.GetProtocol(mbTrans2026)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2030 := argvalue0.Read(jsProt2029)
    if err2030 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ReleaseButton(value0))
    fmt.Print("\n")
    break
  case "GetNumSwitchPoints":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetNumSwitchPoints requires 1 args\n")
      flag.Usage()
    }
    arg2031 := flag.Arg(1)
    mbTrans2032 := thrift.NewTMemoryBufferLen(len(arg2031))
    defer mbTrans2032.Close()
    _, err2033 := mbTrans2032.WriteString(arg2031)
    if err2033 != nil {
      Usage()
      return
    }
    factory2034 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2035 := factory2034.GetProtocol(mbTrans2032)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2036 := argvalue0.Read(jsProt2035)
    if err2036 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetNumSwitchPoints(value0))
    fmt.Print("\n")
    break
  case "SetSwitchPoint":
    if flag.NArg() - 1 != 4 {
      fmt.Fprint(os.Stderr, "SetSwitchPoint requires 4 args\n")
      flag.Usage()
    }
    arg2037 := flag.Arg(1)
    mbTrans2038 := thrift.NewTMemoryBufferLen(len(arg2037))
    defer mbTrans2038.Close()
    _, err2039 := mbTrans2038.WriteString(arg2037)
    if err2039 != nil {
      Usage()
      return
    }
    factory2040 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2041 := factory2040.GetProtocol(mbTrans2038)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2042 := argvalue0.Read(jsProt2041)
    if err2042 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err2043 := (strconv.Atoi(flag.Arg(2)))
    if err2043 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    tmp2, err2044 := (strconv.Atoi(flag.Arg(3)))
    if err2044 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    tmp3, err2045 := (strconv.Atoi(flag.Arg(4)))
    if err2045 != nil {
      Usage()
      return
    }
    argvalue3 := byte(tmp3)
    value3 := argvalue3
    fmt.Print(client.SetSwitchPoint(value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "RemoveSwitchPoint":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "RemoveSwitchPoint requires 3 args\n")
      flag.Usage()
    }
    arg2046 := flag.Arg(1)
    mbTrans2047 := thrift.NewTMemoryBufferLen(len(arg2046))
    defer mbTrans2047.Close()
    _, err2048 := mbTrans2047.WriteString(arg2046)
    if err2048 != nil {
      Usage()
      return
    }
    factory2049 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2050 := factory2049.GetProtocol(mbTrans2047)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2051 := argvalue0.Read(jsProt2050)
    if err2051 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err2052 := (strconv.Atoi(flag.Arg(2)))
    if err2052 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    tmp2, err2053 := (strconv.Atoi(flag.Arg(3)))
    if err2053 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    fmt.Print(client.RemoveSwitchPoint(value0, value1, value2))
    fmt.Print("\n")
    break
  case "ClearSwitchPoints":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "ClearSwitchPoints requires 1 args\n")
      flag.Usage()
    }
    arg2054 := flag.Arg(1)
    mbTrans2055 := thrift.NewTMemoryBufferLen(len(arg2054))
    defer mbTrans2055.Close()
    _, err2056 := mbTrans2055.WriteString(arg2054)
    if err2056 != nil {
      Usage()
      return
    }
    factory2057 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2058 := factory2057.GetProtocol(mbTrans2055)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2059 := argvalue0.Read(jsProt2058)
    if err2059 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ClearSwitchPoints(value0))
    fmt.Print("\n")
    break
  case "GetSwitchPoint":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetSwitchPoint requires 2 args\n")
      flag.Usage()
    }
    arg2060 := flag.Arg(1)
    mbTrans2061 := thrift.NewTMemoryBufferLen(len(arg2060))
    defer mbTrans2061.Close()
    _, err2062 := mbTrans2061.WriteString(arg2060)
    if err2062 != nil {
      Usage()
      return
    }
    factory2063 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2064 := factory2063.GetProtocol(mbTrans2061)
    argvalue0 := OpenZWave.NewRemoteValueID()
    err2065 := argvalue0.Read(jsProt2064)
    if err2065 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err2066 := (strconv.Atoi(flag.Arg(2)))
    if err2066 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetSwitchPoint(value0, value1))
    fmt.Print("\n")
    break
  case "SwitchAllOn":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "SwitchAllOn requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2067 := (strconv.Atoi(flag.Arg(1)))
    if err2067 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.SwitchAllOn(value0))
    fmt.Print("\n")
    break
  case "SwitchAllOff":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "SwitchAllOff requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2068 := (strconv.Atoi(flag.Arg(1)))
    if err2068 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.SwitchAllOff(value0))
    fmt.Print("\n")
    break
  case "SetConfigParam":
    if flag.NArg() - 1 != 5 {
      fmt.Fprint(os.Stderr, "SetConfigParam requires 5 args\n")
      flag.Usage()
    }
    tmp0, err2069 := (strconv.Atoi(flag.Arg(1)))
    if err2069 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2070 := (strconv.Atoi(flag.Arg(2)))
    if err2070 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    tmp2, err2071 := (strconv.Atoi(flag.Arg(3)))
    if err2071 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    tmp3, err2072 := (strconv.Atoi(flag.Arg(4)))
    if err2072 != nil {
      Usage()
      return
    }
    argvalue3 := int32(tmp3)
    value3 := argvalue3
    tmp4, err2073 := (strconv.Atoi(flag.Arg(5)))
    if err2073 != nil {
      Usage()
      return
    }
    argvalue4 := byte(tmp4)
    value4 := argvalue4
    fmt.Print(client.SetConfigParam(value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "RequestConfigParam":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "RequestConfigParam requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2074 := (strconv.Atoi(flag.Arg(1)))
    if err2074 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2075 := (strconv.Atoi(flag.Arg(2)))
    if err2075 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    tmp2, err2076 := (strconv.Atoi(flag.Arg(3)))
    if err2076 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    fmt.Print(client.RequestConfigParam(value0, value1, value2))
    fmt.Print("\n")
    break
  case "RequestAllConfigParams":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "RequestAllConfigParams requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2077 := (strconv.Atoi(flag.Arg(1)))
    if err2077 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2078 := (strconv.Atoi(flag.Arg(2)))
    if err2078 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.RequestAllConfigParams(value0, value1))
    fmt.Print("\n")
    break
  case "GetNumGroups":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetNumGroups requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2079 := (strconv.Atoi(flag.Arg(1)))
    if err2079 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2080 := (strconv.Atoi(flag.Arg(2)))
    if err2080 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetNumGroups(value0, value1))
    fmt.Print("\n")
    break
  case "GetAssociations":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "GetAssociations requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2081 := (strconv.Atoi(flag.Arg(1)))
    if err2081 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2082 := (strconv.Atoi(flag.Arg(2)))
    if err2082 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    tmp2, err2083 := (strconv.Atoi(flag.Arg(3)))
    if err2083 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    fmt.Print(client.GetAssociations(value0, value1, value2))
    fmt.Print("\n")
    break
  case "GetMaxAssociations":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "GetMaxAssociations requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2084 := (strconv.Atoi(flag.Arg(1)))
    if err2084 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2085 := (strconv.Atoi(flag.Arg(2)))
    if err2085 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    tmp2, err2086 := (strconv.Atoi(flag.Arg(3)))
    if err2086 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    fmt.Print(client.GetMaxAssociations(value0, value1, value2))
    fmt.Print("\n")
    break
  case "GetGroupLabel":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "GetGroupLabel requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2087 := (strconv.Atoi(flag.Arg(1)))
    if err2087 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2088 := (strconv.Atoi(flag.Arg(2)))
    if err2088 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    tmp2, err2089 := (strconv.Atoi(flag.Arg(3)))
    if err2089 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    fmt.Print(client.GetGroupLabel(value0, value1, value2))
    fmt.Print("\n")
    break
  case "AddAssociation":
    if flag.NArg() - 1 != 4 {
      fmt.Fprint(os.Stderr, "AddAssociation requires 4 args\n")
      flag.Usage()
    }
    tmp0, err2090 := (strconv.Atoi(flag.Arg(1)))
    if err2090 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2091 := (strconv.Atoi(flag.Arg(2)))
    if err2091 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    tmp2, err2092 := (strconv.Atoi(flag.Arg(3)))
    if err2092 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    tmp3, err2093 := (strconv.Atoi(flag.Arg(4)))
    if err2093 != nil {
      Usage()
      return
    }
    argvalue3 := byte(tmp3)
    value3 := argvalue3
    fmt.Print(client.AddAssociation(value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "RemoveAssociation":
    if flag.NArg() - 1 != 4 {
      fmt.Fprint(os.Stderr, "RemoveAssociation requires 4 args\n")
      flag.Usage()
    }
    tmp0, err2094 := (strconv.Atoi(flag.Arg(1)))
    if err2094 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2095 := (strconv.Atoi(flag.Arg(2)))
    if err2095 != nil {
      Usage()
      return
    }
    argvalue1 := byte(tmp1)
    value1 := argvalue1
    tmp2, err2096 := (strconv.Atoi(flag.Arg(3)))
    if err2096 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    tmp3, err2097 := (strconv.Atoi(flag.Arg(4)))
    if err2097 != nil {
      Usage()
      return
    }
    argvalue3 := byte(tmp3)
    value3 := argvalue3
    fmt.Print(client.RemoveAssociation(value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "ResetController":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "ResetController requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2098 := (strconv.Atoi(flag.Arg(1)))
    if err2098 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.ResetController(value0))
    fmt.Print("\n")
    break
  case "SoftReset":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "SoftReset requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2099 := (strconv.Atoi(flag.Arg(1)))
    if err2099 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.SoftReset(value0))
    fmt.Print("\n")
    break
  case "GetNumScenes":
    if flag.NArg() - 1 != 0 {
      fmt.Fprint(os.Stderr, "GetNumScenes requires 0 args\n")
      flag.Usage()
    }
    fmt.Print(client.GetNumScenes())
    fmt.Print("\n")
    break
  case "GetAllScenes":
    if flag.NArg() - 1 != 0 {
      fmt.Fprint(os.Stderr, "GetAllScenes requires 0 args\n")
      flag.Usage()
    }
    fmt.Print(client.GetAllScenes())
    fmt.Print("\n")
    break
  case "CreateScene":
    if flag.NArg() - 1 != 0 {
      fmt.Fprint(os.Stderr, "CreateScene requires 0 args\n")
      flag.Usage()
    }
    fmt.Print(client.CreateScene())
    fmt.Print("\n")
    break
  case "RemoveScene":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "RemoveScene requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2100 := (strconv.Atoi(flag.Arg(1)))
    if err2100 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    fmt.Print(client.RemoveScene(value0))
    fmt.Print("\n")
    break
  case "AddSceneValue_Bool":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "AddSceneValueBool requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2101 := (strconv.Atoi(flag.Arg(1)))
    if err2101 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2102 := flag.Arg(2)
    mbTrans2103 := thrift.NewTMemoryBufferLen(len(arg2102))
    defer mbTrans2103.Close()
    _, err2104 := mbTrans2103.WriteString(arg2102)
    if err2104 != nil {
      Usage()
      return
    }
    factory2105 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2106 := factory2105.GetProtocol(mbTrans2103)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2107 := argvalue1.Read(jsProt2106)
    if err2107 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := flag.Arg(3) == "true"
    value2 := argvalue2
    fmt.Print(client.AddSceneValueBool(value0, value1, value2))
    fmt.Print("\n")
    break
  case "AddSceneValue_Uint8":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "AddSceneValueUint8 requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2109 := (strconv.Atoi(flag.Arg(1)))
    if err2109 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2110 := flag.Arg(2)
    mbTrans2111 := thrift.NewTMemoryBufferLen(len(arg2110))
    defer mbTrans2111.Close()
    _, err2112 := mbTrans2111.WriteString(arg2110)
    if err2112 != nil {
      Usage()
      return
    }
    factory2113 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2114 := factory2113.GetProtocol(mbTrans2111)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2115 := argvalue1.Read(jsProt2114)
    if err2115 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    tmp2, err2116 := (strconv.Atoi(flag.Arg(3)))
    if err2116 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    fmt.Print(client.AddSceneValueUint8(value0, value1, value2))
    fmt.Print("\n")
    break
  case "AddSceneValue_Float":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "AddSceneValueFloat requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2117 := (strconv.Atoi(flag.Arg(1)))
    if err2117 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2118 := flag.Arg(2)
    mbTrans2119 := thrift.NewTMemoryBufferLen(len(arg2118))
    defer mbTrans2119.Close()
    _, err2120 := mbTrans2119.WriteString(arg2118)
    if err2120 != nil {
      Usage()
      return
    }
    factory2121 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2122 := factory2121.GetProtocol(mbTrans2119)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2123 := argvalue1.Read(jsProt2122)
    if err2123 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2, err2124 := (strconv.Atof64(flag.Arg(3)))
    if err2124 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.AddSceneValueFloat(value0, value1, value2))
    fmt.Print("\n")
    break
  case "AddSceneValue_Int32":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "AddSceneValueInt32 requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2125 := (strconv.Atoi(flag.Arg(1)))
    if err2125 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2126 := flag.Arg(2)
    mbTrans2127 := thrift.NewTMemoryBufferLen(len(arg2126))
    defer mbTrans2127.Close()
    _, err2128 := mbTrans2127.WriteString(arg2126)
    if err2128 != nil {
      Usage()
      return
    }
    factory2129 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2130 := factory2129.GetProtocol(mbTrans2127)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2131 := argvalue1.Read(jsProt2130)
    if err2131 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    tmp2, err2132 := (strconv.Atoi(flag.Arg(3)))
    if err2132 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    fmt.Print(client.AddSceneValueInt32(value0, value1, value2))
    fmt.Print("\n")
    break
  case "AddSceneValue_Int16":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "AddSceneValueInt16 requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2133 := (strconv.Atoi(flag.Arg(1)))
    if err2133 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2134 := flag.Arg(2)
    mbTrans2135 := thrift.NewTMemoryBufferLen(len(arg2134))
    defer mbTrans2135.Close()
    _, err2136 := mbTrans2135.WriteString(arg2134)
    if err2136 != nil {
      Usage()
      return
    }
    factory2137 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2138 := factory2137.GetProtocol(mbTrans2135)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2139 := argvalue1.Read(jsProt2138)
    if err2139 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    tmp2, err2140 := (strconv.Atoi(flag.Arg(3)))
    if err2140 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    fmt.Print(client.AddSceneValueInt16(value0, value1, value2))
    fmt.Print("\n")
    break
  case "AddSceneValue_String":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "AddSceneValueString requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2141 := (strconv.Atoi(flag.Arg(1)))
    if err2141 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2142 := flag.Arg(2)
    mbTrans2143 := thrift.NewTMemoryBufferLen(len(arg2142))
    defer mbTrans2143.Close()
    _, err2144 := mbTrans2143.WriteString(arg2142)
    if err2144 != nil {
      Usage()
      return
    }
    factory2145 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2146 := factory2145.GetProtocol(mbTrans2143)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2147 := argvalue1.Read(jsProt2146)
    if err2147 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.AddSceneValueString(value0, value1, value2))
    fmt.Print("\n")
    break
  case "AddSceneValueListSelection_String":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "AddSceneValueListSelectionString requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2149 := (strconv.Atoi(flag.Arg(1)))
    if err2149 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2150 := flag.Arg(2)
    mbTrans2151 := thrift.NewTMemoryBufferLen(len(arg2150))
    defer mbTrans2151.Close()
    _, err2152 := mbTrans2151.WriteString(arg2150)
    if err2152 != nil {
      Usage()
      return
    }
    factory2153 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2154 := factory2153.GetProtocol(mbTrans2151)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2155 := argvalue1.Read(jsProt2154)
    if err2155 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.AddSceneValueListSelectionString(value0, value1, value2))
    fmt.Print("\n")
    break
  case "AddSceneValueListSelection_Int32":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "AddSceneValueListSelectionInt32 requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2157 := (strconv.Atoi(flag.Arg(1)))
    if err2157 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2158 := flag.Arg(2)
    mbTrans2159 := thrift.NewTMemoryBufferLen(len(arg2158))
    defer mbTrans2159.Close()
    _, err2160 := mbTrans2159.WriteString(arg2158)
    if err2160 != nil {
      Usage()
      return
    }
    factory2161 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2162 := factory2161.GetProtocol(mbTrans2159)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2163 := argvalue1.Read(jsProt2162)
    if err2163 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    tmp2, err2164 := (strconv.Atoi(flag.Arg(3)))
    if err2164 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    fmt.Print(client.AddSceneValueListSelectionInt32(value0, value1, value2))
    fmt.Print("\n")
    break
  case "RemoveSceneValue":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "RemoveSceneValue requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2165 := (strconv.Atoi(flag.Arg(1)))
    if err2165 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2166 := flag.Arg(2)
    mbTrans2167 := thrift.NewTMemoryBufferLen(len(arg2166))
    defer mbTrans2167.Close()
    _, err2168 := mbTrans2167.WriteString(arg2166)
    if err2168 != nil {
      Usage()
      return
    }
    factory2169 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2170 := factory2169.GetProtocol(mbTrans2167)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2171 := argvalue1.Read(jsProt2170)
    if err2171 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.RemoveSceneValue(value0, value1))
    fmt.Print("\n")
    break
  case "SceneGetValues":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "SceneGetValues requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2172 := (strconv.Atoi(flag.Arg(1)))
    if err2172 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    fmt.Print(client.SceneGetValues(value0))
    fmt.Print("\n")
    break
  case "SceneGetValueAsBool":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SceneGetValueAsBool requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2173 := (strconv.Atoi(flag.Arg(1)))
    if err2173 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2174 := flag.Arg(2)
    mbTrans2175 := thrift.NewTMemoryBufferLen(len(arg2174))
    defer mbTrans2175.Close()
    _, err2176 := mbTrans2175.WriteString(arg2174)
    if err2176 != nil {
      Usage()
      return
    }
    factory2177 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2178 := factory2177.GetProtocol(mbTrans2175)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2179 := argvalue1.Read(jsProt2178)
    if err2179 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SceneGetValueAsBool(value0, value1))
    fmt.Print("\n")
    break
  case "SceneGetValueAsByte":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SceneGetValueAsByte requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2180 := (strconv.Atoi(flag.Arg(1)))
    if err2180 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2181 := flag.Arg(2)
    mbTrans2182 := thrift.NewTMemoryBufferLen(len(arg2181))
    defer mbTrans2182.Close()
    _, err2183 := mbTrans2182.WriteString(arg2181)
    if err2183 != nil {
      Usage()
      return
    }
    factory2184 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2185 := factory2184.GetProtocol(mbTrans2182)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2186 := argvalue1.Read(jsProt2185)
    if err2186 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SceneGetValueAsByte(value0, value1))
    fmt.Print("\n")
    break
  case "SceneGetValueAsFloat":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SceneGetValueAsFloat requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2187 := (strconv.Atoi(flag.Arg(1)))
    if err2187 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2188 := flag.Arg(2)
    mbTrans2189 := thrift.NewTMemoryBufferLen(len(arg2188))
    defer mbTrans2189.Close()
    _, err2190 := mbTrans2189.WriteString(arg2188)
    if err2190 != nil {
      Usage()
      return
    }
    factory2191 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2192 := factory2191.GetProtocol(mbTrans2189)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2193 := argvalue1.Read(jsProt2192)
    if err2193 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SceneGetValueAsFloat(value0, value1))
    fmt.Print("\n")
    break
  case "SceneGetValueAsInt":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SceneGetValueAsInt requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2194 := (strconv.Atoi(flag.Arg(1)))
    if err2194 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2195 := flag.Arg(2)
    mbTrans2196 := thrift.NewTMemoryBufferLen(len(arg2195))
    defer mbTrans2196.Close()
    _, err2197 := mbTrans2196.WriteString(arg2195)
    if err2197 != nil {
      Usage()
      return
    }
    factory2198 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2199 := factory2198.GetProtocol(mbTrans2196)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2200 := argvalue1.Read(jsProt2199)
    if err2200 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SceneGetValueAsInt(value0, value1))
    fmt.Print("\n")
    break
  case "SceneGetValueAsShort":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SceneGetValueAsShort requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2201 := (strconv.Atoi(flag.Arg(1)))
    if err2201 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2202 := flag.Arg(2)
    mbTrans2203 := thrift.NewTMemoryBufferLen(len(arg2202))
    defer mbTrans2203.Close()
    _, err2204 := mbTrans2203.WriteString(arg2202)
    if err2204 != nil {
      Usage()
      return
    }
    factory2205 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2206 := factory2205.GetProtocol(mbTrans2203)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2207 := argvalue1.Read(jsProt2206)
    if err2207 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SceneGetValueAsShort(value0, value1))
    fmt.Print("\n")
    break
  case "SceneGetValueAsString":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SceneGetValueAsString requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2208 := (strconv.Atoi(flag.Arg(1)))
    if err2208 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2209 := flag.Arg(2)
    mbTrans2210 := thrift.NewTMemoryBufferLen(len(arg2209))
    defer mbTrans2210.Close()
    _, err2211 := mbTrans2210.WriteString(arg2209)
    if err2211 != nil {
      Usage()
      return
    }
    factory2212 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2213 := factory2212.GetProtocol(mbTrans2210)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2214 := argvalue1.Read(jsProt2213)
    if err2214 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SceneGetValueAsString(value0, value1))
    fmt.Print("\n")
    break
  case "SceneGetValueListSelection_String":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SceneGetValueListSelectionString requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2215 := (strconv.Atoi(flag.Arg(1)))
    if err2215 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2216 := flag.Arg(2)
    mbTrans2217 := thrift.NewTMemoryBufferLen(len(arg2216))
    defer mbTrans2217.Close()
    _, err2218 := mbTrans2217.WriteString(arg2216)
    if err2218 != nil {
      Usage()
      return
    }
    factory2219 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2220 := factory2219.GetProtocol(mbTrans2217)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2221 := argvalue1.Read(jsProt2220)
    if err2221 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SceneGetValueListSelectionString(value0, value1))
    fmt.Print("\n")
    break
  case "SceneGetValueListSelection_Int32":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SceneGetValueListSelectionInt32 requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2222 := (strconv.Atoi(flag.Arg(1)))
    if err2222 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2223 := flag.Arg(2)
    mbTrans2224 := thrift.NewTMemoryBufferLen(len(arg2223))
    defer mbTrans2224.Close()
    _, err2225 := mbTrans2224.WriteString(arg2223)
    if err2225 != nil {
      Usage()
      return
    }
    factory2226 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2227 := factory2226.GetProtocol(mbTrans2224)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2228 := argvalue1.Read(jsProt2227)
    if err2228 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SceneGetValueListSelectionInt32(value0, value1))
    fmt.Print("\n")
    break
  case "SetSceneValue_Bool":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetSceneValueBool requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2229 := (strconv.Atoi(flag.Arg(1)))
    if err2229 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2230 := flag.Arg(2)
    mbTrans2231 := thrift.NewTMemoryBufferLen(len(arg2230))
    defer mbTrans2231.Close()
    _, err2232 := mbTrans2231.WriteString(arg2230)
    if err2232 != nil {
      Usage()
      return
    }
    factory2233 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2234 := factory2233.GetProtocol(mbTrans2231)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2235 := argvalue1.Read(jsProt2234)
    if err2235 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := flag.Arg(3) == "true"
    value2 := argvalue2
    fmt.Print(client.SetSceneValueBool(value0, value1, value2))
    fmt.Print("\n")
    break
  case "SetSceneValue_Uint8":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetSceneValueUint8 requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2237 := (strconv.Atoi(flag.Arg(1)))
    if err2237 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2238 := flag.Arg(2)
    mbTrans2239 := thrift.NewTMemoryBufferLen(len(arg2238))
    defer mbTrans2239.Close()
    _, err2240 := mbTrans2239.WriteString(arg2238)
    if err2240 != nil {
      Usage()
      return
    }
    factory2241 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2242 := factory2241.GetProtocol(mbTrans2239)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2243 := argvalue1.Read(jsProt2242)
    if err2243 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    tmp2, err2244 := (strconv.Atoi(flag.Arg(3)))
    if err2244 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    fmt.Print(client.SetSceneValueUint8(value0, value1, value2))
    fmt.Print("\n")
    break
  case "SetSceneValue_Float":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetSceneValueFloat requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2245 := (strconv.Atoi(flag.Arg(1)))
    if err2245 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2246 := flag.Arg(2)
    mbTrans2247 := thrift.NewTMemoryBufferLen(len(arg2246))
    defer mbTrans2247.Close()
    _, err2248 := mbTrans2247.WriteString(arg2246)
    if err2248 != nil {
      Usage()
      return
    }
    factory2249 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2250 := factory2249.GetProtocol(mbTrans2247)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2251 := argvalue1.Read(jsProt2250)
    if err2251 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2, err2252 := (strconv.Atof64(flag.Arg(3)))
    if err2252 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.SetSceneValueFloat(value0, value1, value2))
    fmt.Print("\n")
    break
  case "SetSceneValue_Int32":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetSceneValueInt32 requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2253 := (strconv.Atoi(flag.Arg(1)))
    if err2253 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2254 := flag.Arg(2)
    mbTrans2255 := thrift.NewTMemoryBufferLen(len(arg2254))
    defer mbTrans2255.Close()
    _, err2256 := mbTrans2255.WriteString(arg2254)
    if err2256 != nil {
      Usage()
      return
    }
    factory2257 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2258 := factory2257.GetProtocol(mbTrans2255)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2259 := argvalue1.Read(jsProt2258)
    if err2259 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    tmp2, err2260 := (strconv.Atoi(flag.Arg(3)))
    if err2260 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    fmt.Print(client.SetSceneValueInt32(value0, value1, value2))
    fmt.Print("\n")
    break
  case "SetSceneValue_Int16":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetSceneValueInt16 requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2261 := (strconv.Atoi(flag.Arg(1)))
    if err2261 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2262 := flag.Arg(2)
    mbTrans2263 := thrift.NewTMemoryBufferLen(len(arg2262))
    defer mbTrans2263.Close()
    _, err2264 := mbTrans2263.WriteString(arg2262)
    if err2264 != nil {
      Usage()
      return
    }
    factory2265 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2266 := factory2265.GetProtocol(mbTrans2263)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2267 := argvalue1.Read(jsProt2266)
    if err2267 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    tmp2, err2268 := (strconv.Atoi(flag.Arg(3)))
    if err2268 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    fmt.Print(client.SetSceneValueInt16(value0, value1, value2))
    fmt.Print("\n")
    break
  case "SetSceneValue_String":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetSceneValueString requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2269 := (strconv.Atoi(flag.Arg(1)))
    if err2269 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2270 := flag.Arg(2)
    mbTrans2271 := thrift.NewTMemoryBufferLen(len(arg2270))
    defer mbTrans2271.Close()
    _, err2272 := mbTrans2271.WriteString(arg2270)
    if err2272 != nil {
      Usage()
      return
    }
    factory2273 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2274 := factory2273.GetProtocol(mbTrans2271)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2275 := argvalue1.Read(jsProt2274)
    if err2275 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.SetSceneValueString(value0, value1, value2))
    fmt.Print("\n")
    break
  case "SetSceneValueListSelection_String":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetSceneValueListSelectionString requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2277 := (strconv.Atoi(flag.Arg(1)))
    if err2277 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2278 := flag.Arg(2)
    mbTrans2279 := thrift.NewTMemoryBufferLen(len(arg2278))
    defer mbTrans2279.Close()
    _, err2280 := mbTrans2279.WriteString(arg2278)
    if err2280 != nil {
      Usage()
      return
    }
    factory2281 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2282 := factory2281.GetProtocol(mbTrans2279)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2283 := argvalue1.Read(jsProt2282)
    if err2283 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.SetSceneValueListSelectionString(value0, value1, value2))
    fmt.Print("\n")
    break
  case "SetSceneValueListSelection_Int32":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SetSceneValueListSelectionInt32 requires 3 args\n")
      flag.Usage()
    }
    tmp0, err2285 := (strconv.Atoi(flag.Arg(1)))
    if err2285 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    arg2286 := flag.Arg(2)
    mbTrans2287 := thrift.NewTMemoryBufferLen(len(arg2286))
    defer mbTrans2287.Close()
    _, err2288 := mbTrans2287.WriteString(arg2286)
    if err2288 != nil {
      Usage()
      return
    }
    factory2289 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2290 := factory2289.GetProtocol(mbTrans2287)
    argvalue1 := OpenZWave.NewRemoteValueID()
    err2291 := argvalue1.Read(jsProt2290)
    if err2291 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    tmp2, err2292 := (strconv.Atoi(flag.Arg(3)))
    if err2292 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    fmt.Print(client.SetSceneValueListSelectionInt32(value0, value1, value2))
    fmt.Print("\n")
    break
  case "GetSceneLabel":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetSceneLabel requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2293 := (strconv.Atoi(flag.Arg(1)))
    if err2293 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetSceneLabel(value0))
    fmt.Print("\n")
    break
  case "SetSceneLabel":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "SetSceneLabel requires 2 args\n")
      flag.Usage()
    }
    tmp0, err2294 := (strconv.Atoi(flag.Arg(1)))
    if err2294 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.SetSceneLabel(value0, value1))
    fmt.Print("\n")
    break
  case "SceneExists":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "SceneExists requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2296 := (strconv.Atoi(flag.Arg(1)))
    if err2296 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    fmt.Print(client.SceneExists(value0))
    fmt.Print("\n")
    break
  case "ActivateScene":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "ActivateScene requires 1 args\n")
      flag.Usage()
    }
    tmp0, err2297 := (strconv.Atoi(flag.Arg(1)))
    if err2297 != nil {
      Usage()
      return
    }
    argvalue0 := byte(tmp0)
    value0 := argvalue0
    fmt.Print(client.ActivateScene(value0))
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprint(os.Stderr, "Invalid function ", cmd, "\n")
  }
}
