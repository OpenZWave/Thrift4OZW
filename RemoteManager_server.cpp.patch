*** gen-cpp/RemoteManager_server.cpp.orig	2013-03-31 10:13:47.323382427 +0300
--- gen-cpp/RemoteManager_server.cpp.patched	2013-03-31 10:29:40.404108479 +0300
***************
*** 1,11 ****
  // Automatically generated OpenZWave::Manager_server wrapper
! // (c) 2011 Elias Karakoulakis <elias.karakoulakis@gmail.com>
  
  #include "RemoteManager.h"
! #include <thrift/protocol/TBinaryProtocol.h>
! #include <thrift/server/TSimpleServer.h>
! #include <thrift/transport/TServerSocket.h>
! #include <thrift/transport/TBufferTransports.h>
  
  using namespace ::apache::thrift;
  using namespace ::apache::thrift::protocol;
--- 1,11 ----
  // Automatically generated OpenZWave::Manager_server wrapper
! // (c) 2011-2012 Elias Karakoulakis <elias.karakoulakis@gmail.com>
  
  #include "RemoteManager.h"
! #include <protocol/TBinaryProtocol.h>
! #include <server/TSimpleServer.h>
! #include <transport/TServerSocket.h>
! #include <transport/TBufferTransports.h>
  
  using namespace ::apache::thrift;
  using namespace ::apache::thrift::protocol;
***************
*** 17,23 ****
  using namespace  ::OpenZWave;
  
  void BeginControllerCommand_callback(OpenZWave::Driver::ControllerState  arg1, OpenZWave::Driver::ControllerError  arg2, void*  arg3) {
! 	// FIXME: fill in the blanks (sorry!)
  }
  
  class RemoteManagerHandler : virtual public RemoteManagerIf {
--- 17,33 ----
  using namespace  ::OpenZWave;
  
  void BeginControllerCommand_callback(OpenZWave::Driver::ControllerState  arg1, OpenZWave::Driver::ControllerError  arg2, void*  arg3) {
!     g_criticalSection.lock();
!     //
!     STOMP::hdrmap headers;
!     headers["ControllerState"] = to_string<uint16_t>(arg1, std::hex);
!     if (arg2 != OpenZWave::Driver::ControllerError_None ) {
!         headers["ControllerError"] = to_string<uint16_t>(arg2, std::hex);
!     }
!     string empty = ""  ;
!     stomp_client->send(*notifications_topic, headers, empty);
!     //
!     g_criticalSection.unlock();
  }
  
  class RemoteManagerHandler : virtual public RemoteManagerIf {
***************
*** 283,292 ****
    }
  
    void GetNodeNeighbors(UInt32_ListByte& _return, const int32_t _homeId, const int8_t _nodeId) {
  	Manager* mgr = Manager::Get();
  	g_criticalSection.lock();
! 	_return.retval =  mgr->GetNodeNeighbors((::uint32 const) _homeId, (::uint8 const) _nodeId, (::uint8**) &_return._nodeNeighbors);
  	g_criticalSection.unlock();
    }
  
    void GetNodeManufacturerName(std::string& _return, const int32_t _homeId, const int8_t _nodeId) {
--- 293,307 ----
    }
  
    void GetNodeNeighbors(UInt32_ListByte& _return, const int32_t _homeId, const int8_t _nodeId) {
+     uint8* arr;
  	Manager* mgr = Manager::Get();
  	g_criticalSection.lock();
! 	_return.retval =  mgr->GetNodeNeighbors((::uint32 const) _homeId, (::uint8 const) _nodeId, (::uint8**) &arr);
  	g_criticalSection.unlock();
+     if (_return.retval > 0) {
+         for (int i=0; i<_return.retval; i++) _return._nodeNeighbors.push_back(arr[i]);
+         delete arr;
+     } 
    }
  
    void GetNodeManufacturerName(std::string& _return, const int32_t _homeId, const int8_t _nodeId) {
***************
*** 571,581 ****
  	g_criticalSection.unlock();
    }
  
!   void GetValueListItems(Bool_ListString& _return, const RemoteValueID& _id) {
  	Manager* mgr = Manager::Get();
  	g_criticalSection.lock();
! 	_return.retval =  mgr->GetValueListItems(_id.toValueID(), (std::vector<std::string, std::allocator<std::string> >*) &_return.o_value);
  	g_criticalSection.unlock();
    }
  
    void GetValueFloatPrecision(Bool_UInt8& _return, const RemoteValueID& _id) {
--- 586,600 ----
  	g_criticalSection.unlock();
    }
  
!   void GetValueListItems(Bool_ListString& _return, const RemoteValueID& _id) {      
!     std::vector<std::string> o_values;
  	Manager* mgr = Manager::Get();
  	g_criticalSection.lock();
! 	_return.retval =  mgr->GetValueListItems(_id.toValueID(), &o_values);
  	g_criticalSection.unlock();
+     if (_return.retval > 0) {
+         for (int i=0; i< _return.retval; i++) _return.o_value.push_back(std::string(o_values[i]));
+     }
    }
  
    void GetValueFloatPrecision(Bool_UInt8& _return, const RemoteValueID& _id) {
***************
*** 604,610 ****
    bool SetValue_UInt8_UInt8(const RemoteValueID& _id, const std::vector<int8_t> & _value, const int8_t _length) {
  	Manager* mgr = Manager::Get();
  	g_criticalSection.lock();
! 	bool function_result =  mgr->SetValue(_id.toValueID(), (::uint8 const*) &_value, (::uint8 const) _length);
  	g_criticalSection.unlock();
  	return(function_result);
    }
--- 623,629 ----
    bool SetValue_UInt8_UInt8(const RemoteValueID& _id, const std::vector<int8_t> & _value, const int8_t _length) {
  	Manager* mgr = Manager::Get();
  	g_criticalSection.lock();
! 	bool function_result =  mgr->SetValue(_id.toValueID(), (const uint8*) _value.data(), _value.size());
  	g_criticalSection.unlock();
  	return(function_result);
    }
***************
*** 658,667 ****
    }
  
    void SetChangeVerified(const RemoteValueID& _id, const bool _verify) {
! 	Manager* mgr = Manager::Get();
! 	g_criticalSection.lock();
! 	 mgr->SetChangeVerified(_id.toValueID(), (bool) _verify);
! 	g_criticalSection.unlock();
    }
  
    bool PressButton(const RemoteValueID& _id) {
--- 677,686 ----
    }
  
    void SetChangeVerified(const RemoteValueID& _id, const bool _verify) {
!     Manager* mgr = Manager::Get();
!     g_criticalSection.lock();
!      mgr->SetChangeVerified(_id.toValueID(), (bool) _verify);
!     g_criticalSection.unlock();
    }
  
    bool PressButton(const RemoteValueID& _id) {
***************
*** 763,772 ****
    }
  
    void GetAssociations(GetAssociationsReturnStruct& _return, const int32_t _homeId, const int8_t _nodeId, const int8_t _groupIdx) {
  	Manager* mgr = Manager::Get();
  	g_criticalSection.lock();
! 	_return.retval =  mgr->GetAssociations((::uint32 const) _homeId, (::uint8 const) _nodeId, (::uint8 const) _groupIdx, (::uint8**) &_return.o_associations);
  	g_criticalSection.unlock();
    }
  
    int8_t GetMaxAssociations(const int32_t _homeId, const int8_t _nodeId, const int8_t _groupIdx) {
--- 782,796 ----
    }
  
    void GetAssociations(GetAssociationsReturnStruct& _return, const int32_t _homeId, const int8_t _nodeId, const int8_t _groupIdx) {
+ 	uint8* o_associations;
  	Manager* mgr = Manager::Get();
  	g_criticalSection.lock();
! 	_return.retval =  mgr->GetAssociations((::uint32 const) _homeId, (::uint8 const) _nodeId, (::uint8 const) _groupIdx, (::uint8**) &o_associations);
  	g_criticalSection.unlock();
+     if (_return.retval > 0) {
+         for (int i=0; i<_return.retval; i++) _return.o_associations.push_back(o_associations[i]);
+         delete o_associations;
+     }
    }
  
    int8_t GetMaxAssociations(const int32_t _homeId, const int8_t _nodeId, const int8_t _groupIdx) {
***************
*** 865,874 ****
    }
  
    void GetAllScenes(GetAllScenesReturnStruct& _return) {
  	Manager* mgr = Manager::Get();
  	g_criticalSection.lock();
! 	_return.retval =  mgr->GetAllScenes((::uint8**) &_return._sceneIds);
  	g_criticalSection.unlock();
    }
  
    void RemoveAllScenes(const int32_t _homeId) {
--- 889,903 ----
    }
  
    void GetAllScenes(GetAllScenesReturnStruct& _return) {
+     uint8* _sceneIds;
  	Manager* mgr = Manager::Get();
  	g_criticalSection.lock();
! 	_return.retval =  mgr->GetAllScenes((::uint8**) &_sceneIds);
  	g_criticalSection.unlock();
+     if (_return.retval>0) {
+         for (int i=0; i<_return.retval; i++) _return._sceneIds.push_back(_sceneIds[i]);
+         delete(_sceneIds);
+     }  
    }
  
    void RemoveAllScenes(const int32_t _homeId) {
***************
*** 967,976 ****
    }
  
    void SceneGetValues(SceneGetValuesReturnStruct& _return, const int8_t _sceneId) {
  	Manager* mgr = Manager::Get();
  	g_criticalSection.lock();
! 	_return.retval =  mgr->SceneGetValues((::uint8 const) _sceneId, _return.o_value.toValueID());
  	g_criticalSection.unlock();
    }
  
    void SceneGetValueAsBool(Bool_Bool& _return, const int8_t _sceneId, const RemoteValueID& _valueId) {
--- 996,1007 ----
    }
  
    void SceneGetValues(SceneGetValuesReturnStruct& _return, const int8_t _sceneId) {
+     std::vector<OpenZWave::ValueID>  o_values;
  	Manager* mgr = Manager::Get();
  	g_criticalSection.lock();
! 	_return.retval =  mgr->SceneGetValues((::uint8 const) _sceneId, &o_values);
  	g_criticalSection.unlock();
+     for (int i=0; i< _return.retval; i++) _return.o_value.push_back(RemoteValueID(o_values[i]));
    }
  
    void SceneGetValueAsBool(Bool_Bool& _return, const int8_t _sceneId, const RemoteValueID& _valueId) {
***************
*** 1138,1150 ****
    }
  
    void SendAllValues() {
!     // Your implementation goes here
!     printf("SendAllValues\n");
    }
  
    void ping() {
!     // Your implementation goes here
!     printf("ping\n");
    }
  
  };
--- 1169,1181 ----
    }
  
    void SendAllValues() {
!     g_criticalSection.lock();
!     send_all_values();
!     g_criticalSection.unlock();
    }
  
    void ping() {
!     // Dummy method to keep Thrift connection alive over NAT routers
    }
  
  };
***************
*** 1162,1165 ****
  //   return 0;
  // }
  // 
! // 
\ No newline at end of file
--- 1193,1196 ----
  //   return 0;
  // }
  // 
! // 
