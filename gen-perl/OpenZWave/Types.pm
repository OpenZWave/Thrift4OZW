#
# Autogenerated by Thrift Compiler (1.0.0-dev)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
require 5.6.0;
use strict;
use warnings;
use Thrift;

package OpenZWave::RemoteValueGenre;
use constant ValueGenre_Basic => 0;
use constant ValueGenre_User => 1;
use constant ValueGenre_Config => 2;
use constant ValueGenre_System => 3;
use constant ValueGenre_Count => 4;
package OpenZWave::RemoteValueType;
use constant ValueType_Bool => 0;
use constant ValueType_Byte => 1;
use constant ValueType_Decimal => 2;
use constant ValueType_Int => 3;
use constant ValueType_List => 4;
use constant ValueType_Schedule => 5;
use constant ValueType_Short => 6;
use constant ValueType_String => 7;
use constant ValueType_Button => 8;
use constant ValueType_Raw => 9;
package OpenZWave::DriverControllerCommand;
use constant ControllerCommand_None => 0;
use constant ControllerCommand_AddDevice => 1;
use constant ControllerCommand_CreateNewPrimary => 2;
use constant ControllerCommand_ReceiveConfiguration => 3;
use constant ControllerCommand_RemoveDevice => 4;
use constant ControllerCommand_RemoveFailedNode => 5;
use constant ControllerCommand_HasNodeFailed => 6;
use constant ControllerCommand_ReplaceFailedNode => 7;
use constant ControllerCommand_TransferPrimaryRole => 8;
use constant ControllerCommand_RequestNetworkUpdate => 9;
use constant ControllerCommand_RequestNodeNeighborUpdate => 10;
use constant ControllerCommand_AssignReturnRoute => 11;
use constant ControllerCommand_DeleteAllReturnRoutes => 12;
use constant ControllerCommand_SendNodeInformation => 13;
use constant ControllerCommand_ReplicationSend => 14;
use constant ControllerCommand_CreateButton => 15;
use constant ControllerCommand_DeleteButton => 16;
package OpenZWave::DriverControllerState;
use constant ControllerState_Normal => 0;
use constant ControllerState_Starting => 1;
use constant ControllerState_Cancel => 2;
use constant ControllerState_Error => 3;
use constant ControllerState_Waiting => 4;
use constant ControllerState_Sleeping => 5;
use constant ControllerState_InProgress => 6;
use constant ControllerState_Completed => 7;
use constant ControllerState_Failed => 8;
use constant ControllerState_NodeOK => 9;
use constant ControllerState_NodeFailed => 10;
package OpenZWave::DriverControllerError;
use constant ControllerError_None => 0;
use constant ControllerError_ButtonNotFound => 1;
use constant ControllerError_NodeNotFound => 2;
use constant ControllerError_NotBridge => 3;
use constant ControllerError_NotSUC => 4;
use constant ControllerError_NotSecondary => 5;
use constant ControllerError_NotPrimary => 6;
use constant ControllerError_IsPrimary => 7;
use constant ControllerError_NotFound => 8;
use constant ControllerError_Busy => 9;
use constant ControllerError_Failed => 10;
use constant ControllerError_Disabled => 11;
use constant ControllerError_Overflow => 12;
package OpenZWave::DriverControllerInterface;
use constant ControllerInterface_Unknown => 0;
use constant ControllerInterface_Serial => 1;
use constant ControllerInterface_Hid => 2;
package OpenZWave::RemoteValueID;
use base qw(Class::Accessor);
OpenZWave::RemoteValueID->mk_accessors( qw( _homeId _nodeId _genre _commandClassId _instance _valueIndex _type ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{_homeId} = undef;
  $self->{_nodeId} = undef;
  $self->{_genre} = undef;
  $self->{_commandClassId} = undef;
  $self->{_instance} = undef;
  $self->{_valueIndex} = undef;
  $self->{_type} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{_homeId}) {
      $self->{_homeId} = $vals->{_homeId};
    }
    if (defined $vals->{_nodeId}) {
      $self->{_nodeId} = $vals->{_nodeId};
    }
    if (defined $vals->{_genre}) {
      $self->{_genre} = $vals->{_genre};
    }
    if (defined $vals->{_commandClassId}) {
      $self->{_commandClassId} = $vals->{_commandClassId};
    }
    if (defined $vals->{_instance}) {
      $self->{_instance} = $vals->{_instance};
    }
    if (defined $vals->{_valueIndex}) {
      $self->{_valueIndex} = $vals->{_valueIndex};
    }
    if (defined $vals->{_type}) {
      $self->{_type} = $vals->{_type};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'RemoteValueID';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::I32) {
        $xfer += $input->readI32(\$self->{_homeId});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::BYTE) {
        $xfer += $input->readByte(\$self->{_nodeId});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::I32) {
        $xfer += $input->readI32(\$self->{_genre});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == TType::BYTE) {
        $xfer += $input->readByte(\$self->{_commandClassId});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == TType::BYTE) {
        $xfer += $input->readByte(\$self->{_instance});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == TType::BYTE) {
        $xfer += $input->readByte(\$self->{_valueIndex});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^7$/ && do{      if ($ftype == TType::I32) {
        $xfer += $input->readI32(\$self->{_type});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('RemoteValueID');
  if (defined $self->{_homeId}) {
    $xfer += $output->writeFieldBegin('_homeId', TType::I32, 1);
    $xfer += $output->writeI32($self->{_homeId});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{_nodeId}) {
    $xfer += $output->writeFieldBegin('_nodeId', TType::BYTE, 2);
    $xfer += $output->writeByte($self->{_nodeId});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{_genre}) {
    $xfer += $output->writeFieldBegin('_genre', TType::I32, 3);
    $xfer += $output->writeI32($self->{_genre});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{_commandClassId}) {
    $xfer += $output->writeFieldBegin('_commandClassId', TType::BYTE, 4);
    $xfer += $output->writeByte($self->{_commandClassId});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{_instance}) {
    $xfer += $output->writeFieldBegin('_instance', TType::BYTE, 5);
    $xfer += $output->writeByte($self->{_instance});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{_valueIndex}) {
    $xfer += $output->writeFieldBegin('_valueIndex', TType::BYTE, 6);
    $xfer += $output->writeByte($self->{_valueIndex});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{_type}) {
    $xfer += $output->writeFieldBegin('_type', TType::I32, 7);
    $xfer += $output->writeI32($self->{_type});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package OpenZWave::DriverData;
use base qw(Class::Accessor);
OpenZWave::DriverData->mk_accessors( qw( s_SOFCnt s_ACKWaiting s_readAborts s_badChecksum s_readCnt s_writeCnt s_CANCnt s_NAKCnt s_ACKCnt s_OOFCnt s_dropped s_retries s_controllerReadCnt s_controllerWriteCnt ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{s_SOFCnt} = undef;
  $self->{s_ACKWaiting} = undef;
  $self->{s_readAborts} = undef;
  $self->{s_badChecksum} = undef;
  $self->{s_readCnt} = undef;
  $self->{s_writeCnt} = undef;
  $self->{s_CANCnt} = undef;
  $self->{s_NAKCnt} = undef;
  $self->{s_ACKCnt} = undef;
  $self->{s_OOFCnt} = undef;
  $self->{s_dropped} = undef;
  $self->{s_retries} = undef;
  $self->{s_controllerReadCnt} = undef;
  $self->{s_controllerWriteCnt} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{s_SOFCnt}) {
      $self->{s_SOFCnt} = $vals->{s_SOFCnt};
    }
    if (defined $vals->{s_ACKWaiting}) {
      $self->{s_ACKWaiting} = $vals->{s_ACKWaiting};
    }
    if (defined $vals->{s_readAborts}) {
      $self->{s_readAborts} = $vals->{s_readAborts};
    }
    if (defined $vals->{s_badChecksum}) {
      $self->{s_badChecksum} = $vals->{s_badChecksum};
    }
    if (defined $vals->{s_readCnt}) {
      $self->{s_readCnt} = $vals->{s_readCnt};
    }
    if (defined $vals->{s_writeCnt}) {
      $self->{s_writeCnt} = $vals->{s_writeCnt};
    }
    if (defined $vals->{s_CANCnt}) {
      $self->{s_CANCnt} = $vals->{s_CANCnt};
    }
    if (defined $vals->{s_NAKCnt}) {
      $self->{s_NAKCnt} = $vals->{s_NAKCnt};
    }
    if (defined $vals->{s_ACKCnt}) {
      $self->{s_ACKCnt} = $vals->{s_ACKCnt};
    }
    if (defined $vals->{s_OOFCnt}) {
      $self->{s_OOFCnt} = $vals->{s_OOFCnt};
    }
    if (defined $vals->{s_dropped}) {
      $self->{s_dropped} = $vals->{s_dropped};
    }
    if (defined $vals->{s_retries}) {
      $self->{s_retries} = $vals->{s_retries};
    }
    if (defined $vals->{s_controllerReadCnt}) {
      $self->{s_controllerReadCnt} = $vals->{s_controllerReadCnt};
    }
    if (defined $vals->{s_controllerWriteCnt}) {
      $self->{s_controllerWriteCnt} = $vals->{s_controllerWriteCnt};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'DriverData';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::I32) {
        $xfer += $input->readI32(\$self->{s_SOFCnt});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::I32) {
        $xfer += $input->readI32(\$self->{s_ACKWaiting});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::I32) {
        $xfer += $input->readI32(\$self->{s_readAborts});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == TType::I32) {
        $xfer += $input->readI32(\$self->{s_badChecksum});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == TType::I32) {
        $xfer += $input->readI32(\$self->{s_readCnt});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == TType::I32) {
        $xfer += $input->readI32(\$self->{s_writeCnt});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^7$/ && do{      if ($ftype == TType::I32) {
        $xfer += $input->readI32(\$self->{s_CANCnt});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^8$/ && do{      if ($ftype == TType::I32) {
        $xfer += $input->readI32(\$self->{s_NAKCnt});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^9$/ && do{      if ($ftype == TType::I32) {
        $xfer += $input->readI32(\$self->{s_ACKCnt});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^10$/ && do{      if ($ftype == TType::I32) {
        $xfer += $input->readI32(\$self->{s_OOFCnt});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^11$/ && do{      if ($ftype == TType::I32) {
        $xfer += $input->readI32(\$self->{s_dropped});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^12$/ && do{      if ($ftype == TType::I32) {
        $xfer += $input->readI32(\$self->{s_retries});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^13$/ && do{      if ($ftype == TType::I32) {
        $xfer += $input->readI32(\$self->{s_controllerReadCnt});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^14$/ && do{      if ($ftype == TType::I32) {
        $xfer += $input->readI32(\$self->{s_controllerWriteCnt});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('DriverData');
  if (defined $self->{s_SOFCnt}) {
    $xfer += $output->writeFieldBegin('s_SOFCnt', TType::I32, 1);
    $xfer += $output->writeI32($self->{s_SOFCnt});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{s_ACKWaiting}) {
    $xfer += $output->writeFieldBegin('s_ACKWaiting', TType::I32, 2);
    $xfer += $output->writeI32($self->{s_ACKWaiting});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{s_readAborts}) {
    $xfer += $output->writeFieldBegin('s_readAborts', TType::I32, 3);
    $xfer += $output->writeI32($self->{s_readAborts});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{s_badChecksum}) {
    $xfer += $output->writeFieldBegin('s_badChecksum', TType::I32, 4);
    $xfer += $output->writeI32($self->{s_badChecksum});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{s_readCnt}) {
    $xfer += $output->writeFieldBegin('s_readCnt', TType::I32, 5);
    $xfer += $output->writeI32($self->{s_readCnt});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{s_writeCnt}) {
    $xfer += $output->writeFieldBegin('s_writeCnt', TType::I32, 6);
    $xfer += $output->writeI32($self->{s_writeCnt});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{s_CANCnt}) {
    $xfer += $output->writeFieldBegin('s_CANCnt', TType::I32, 7);
    $xfer += $output->writeI32($self->{s_CANCnt});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{s_NAKCnt}) {
    $xfer += $output->writeFieldBegin('s_NAKCnt', TType::I32, 8);
    $xfer += $output->writeI32($self->{s_NAKCnt});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{s_ACKCnt}) {
    $xfer += $output->writeFieldBegin('s_ACKCnt', TType::I32, 9);
    $xfer += $output->writeI32($self->{s_ACKCnt});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{s_OOFCnt}) {
    $xfer += $output->writeFieldBegin('s_OOFCnt', TType::I32, 10);
    $xfer += $output->writeI32($self->{s_OOFCnt});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{s_dropped}) {
    $xfer += $output->writeFieldBegin('s_dropped', TType::I32, 11);
    $xfer += $output->writeI32($self->{s_dropped});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{s_retries}) {
    $xfer += $output->writeFieldBegin('s_retries', TType::I32, 12);
    $xfer += $output->writeI32($self->{s_retries});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{s_controllerReadCnt}) {
    $xfer += $output->writeFieldBegin('s_controllerReadCnt', TType::I32, 13);
    $xfer += $output->writeI32($self->{s_controllerReadCnt});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{s_controllerWriteCnt}) {
    $xfer += $output->writeFieldBegin('s_controllerWriteCnt', TType::I32, 14);
    $xfer += $output->writeI32($self->{s_controllerWriteCnt});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package OpenZWave::GetDriverStatisticsReturnStruct;
use base qw(Class::Accessor);
OpenZWave::GetDriverStatisticsReturnStruct->mk_accessors( qw( _data ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{_data} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{_data}) {
      $self->{_data} = $vals->{_data};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'GetDriverStatisticsReturnStruct';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{_data} = new OpenZWave::DriverData();
        $xfer += $self->{_data}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('GetDriverStatisticsReturnStruct');
  if (defined $self->{_data}) {
    $xfer += $output->writeFieldBegin('_data', TType::STRUCT, 1);
    $xfer += $self->{_data}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package OpenZWave::CommandClassData;
use base qw(Class::Accessor);
OpenZWave::CommandClassData->mk_accessors( qw( m_commandClassId m_sentCnt m_receivedCnt ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{m_commandClassId} = undef;
  $self->{m_sentCnt} = undef;
  $self->{m_receivedCnt} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{m_commandClassId}) {
      $self->{m_commandClassId} = $vals->{m_commandClassId};
    }
    if (defined $vals->{m_sentCnt}) {
      $self->{m_sentCnt} = $vals->{m_sentCnt};
    }
    if (defined $vals->{m_receivedCnt}) {
      $self->{m_receivedCnt} = $vals->{m_receivedCnt};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'CommandClassData';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::BYTE) {
        $xfer += $input->readByte(\$self->{m_commandClassId});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::I32) {
        $xfer += $input->readI32(\$self->{m_sentCnt});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::I32) {
        $xfer += $input->readI32(\$self->{m_receivedCnt});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('CommandClassData');
  if (defined $self->{m_commandClassId}) {
    $xfer += $output->writeFieldBegin('m_commandClassId', TType::BYTE, 1);
    $xfer += $output->writeByte($self->{m_commandClassId});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{m_sentCnt}) {
    $xfer += $output->writeFieldBegin('m_sentCnt', TType::I32, 2);
    $xfer += $output->writeI32($self->{m_sentCnt});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{m_receivedCnt}) {
    $xfer += $output->writeFieldBegin('m_receivedCnt', TType::I32, 3);
    $xfer += $output->writeI32($self->{m_receivedCnt});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package OpenZWave::NodeData;
use base qw(Class::Accessor);
OpenZWave::NodeData->mk_accessors( qw( m_sentCnt m_sentFailed m_retries m_receivedCnt m_receivedDups m_rtt m_sentTS m_receivedTS m_lastRTT m_averageRTT m_quality m_lastReceivedMessage m_ccData ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{m_sentCnt} = undef;
  $self->{m_sentFailed} = undef;
  $self->{m_retries} = undef;
  $self->{m_receivedCnt} = undef;
  $self->{m_receivedDups} = undef;
  $self->{m_rtt} = undef;
  $self->{m_sentTS} = undef;
  $self->{m_receivedTS} = undef;
  $self->{m_lastRTT} = undef;
  $self->{m_averageRTT} = undef;
  $self->{m_quality} = undef;
  $self->{m_lastReceivedMessage} = undef;
  $self->{m_ccData} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{m_sentCnt}) {
      $self->{m_sentCnt} = $vals->{m_sentCnt};
    }
    if (defined $vals->{m_sentFailed}) {
      $self->{m_sentFailed} = $vals->{m_sentFailed};
    }
    if (defined $vals->{m_retries}) {
      $self->{m_retries} = $vals->{m_retries};
    }
    if (defined $vals->{m_receivedCnt}) {
      $self->{m_receivedCnt} = $vals->{m_receivedCnt};
    }
    if (defined $vals->{m_receivedDups}) {
      $self->{m_receivedDups} = $vals->{m_receivedDups};
    }
    if (defined $vals->{m_rtt}) {
      $self->{m_rtt} = $vals->{m_rtt};
    }
    if (defined $vals->{m_sentTS}) {
      $self->{m_sentTS} = $vals->{m_sentTS};
    }
    if (defined $vals->{m_receivedTS}) {
      $self->{m_receivedTS} = $vals->{m_receivedTS};
    }
    if (defined $vals->{m_lastRTT}) {
      $self->{m_lastRTT} = $vals->{m_lastRTT};
    }
    if (defined $vals->{m_averageRTT}) {
      $self->{m_averageRTT} = $vals->{m_averageRTT};
    }
    if (defined $vals->{m_quality}) {
      $self->{m_quality} = $vals->{m_quality};
    }
    if (defined $vals->{m_lastReceivedMessage}) {
      $self->{m_lastReceivedMessage} = $vals->{m_lastReceivedMessage};
    }
    if (defined $vals->{m_ccData}) {
      $self->{m_ccData} = $vals->{m_ccData};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'NodeData';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::I32) {
        $xfer += $input->readI32(\$self->{m_sentCnt});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::I32) {
        $xfer += $input->readI32(\$self->{m_sentFailed});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::I32) {
        $xfer += $input->readI32(\$self->{m_retries});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == TType::I32) {
        $xfer += $input->readI32(\$self->{m_receivedCnt});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == TType::I32) {
        $xfer += $input->readI32(\$self->{m_receivedDups});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == TType::I32) {
        $xfer += $input->readI32(\$self->{m_rtt});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^7$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{m_sentTS});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^8$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{m_receivedTS});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^9$/ && do{      if ($ftype == TType::I32) {
        $xfer += $input->readI32(\$self->{m_lastRTT});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^10$/ && do{      if ($ftype == TType::I32) {
        $xfer += $input->readI32(\$self->{m_averageRTT});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^11$/ && do{      if ($ftype == TType::BYTE) {
        $xfer += $input->readByte(\$self->{m_quality});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^12$/ && do{      if ($ftype == TType::LIST) {
        {
          my $_size0 = 0;
          $self->{m_lastReceivedMessage} = [];
          my $_etype3 = 0;
          $xfer += $input->readListBegin(\$_etype3, \$_size0);
          for (my $_i4 = 0; $_i4 < $_size0; ++$_i4)
          {
            my $elem5 = undef;
            $xfer += $input->readByte(\$elem5);
            push(@{$self->{m_lastReceivedMessage}},$elem5);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^13$/ && do{      if ($ftype == TType::LIST) {
        {
          my $_size6 = 0;
          $self->{m_ccData} = [];
          my $_etype9 = 0;
          $xfer += $input->readListBegin(\$_etype9, \$_size6);
          for (my $_i10 = 0; $_i10 < $_size6; ++$_i10)
          {
            my $elem11 = undef;
            $elem11 = new OpenZWave::CommandClassData();
            $xfer += $elem11->read($input);
            push(@{$self->{m_ccData}},$elem11);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('NodeData');
  if (defined $self->{m_sentCnt}) {
    $xfer += $output->writeFieldBegin('m_sentCnt', TType::I32, 1);
    $xfer += $output->writeI32($self->{m_sentCnt});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{m_sentFailed}) {
    $xfer += $output->writeFieldBegin('m_sentFailed', TType::I32, 2);
    $xfer += $output->writeI32($self->{m_sentFailed});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{m_retries}) {
    $xfer += $output->writeFieldBegin('m_retries', TType::I32, 3);
    $xfer += $output->writeI32($self->{m_retries});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{m_receivedCnt}) {
    $xfer += $output->writeFieldBegin('m_receivedCnt', TType::I32, 4);
    $xfer += $output->writeI32($self->{m_receivedCnt});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{m_receivedDups}) {
    $xfer += $output->writeFieldBegin('m_receivedDups', TType::I32, 5);
    $xfer += $output->writeI32($self->{m_receivedDups});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{m_rtt}) {
    $xfer += $output->writeFieldBegin('m_rtt', TType::I32, 6);
    $xfer += $output->writeI32($self->{m_rtt});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{m_sentTS}) {
    $xfer += $output->writeFieldBegin('m_sentTS', TType::STRING, 7);
    $xfer += $output->writeString($self->{m_sentTS});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{m_receivedTS}) {
    $xfer += $output->writeFieldBegin('m_receivedTS', TType::STRING, 8);
    $xfer += $output->writeString($self->{m_receivedTS});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{m_lastRTT}) {
    $xfer += $output->writeFieldBegin('m_lastRTT', TType::I32, 9);
    $xfer += $output->writeI32($self->{m_lastRTT});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{m_averageRTT}) {
    $xfer += $output->writeFieldBegin('m_averageRTT', TType::I32, 10);
    $xfer += $output->writeI32($self->{m_averageRTT});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{m_quality}) {
    $xfer += $output->writeFieldBegin('m_quality', TType::BYTE, 11);
    $xfer += $output->writeByte($self->{m_quality});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{m_lastReceivedMessage}) {
    $xfer += $output->writeFieldBegin('m_lastReceivedMessage', TType::LIST, 12);
    {
      $xfer += $output->writeListBegin(TType::BYTE, scalar(@{$self->{m_lastReceivedMessage}}));
      {
        foreach my $iter12 (@{$self->{m_lastReceivedMessage}}) 
        {
          $xfer += $output->writeByte($iter12);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{m_ccData}) {
    $xfer += $output->writeFieldBegin('m_ccData', TType::LIST, 13);
    {
      $xfer += $output->writeListBegin(TType::STRUCT, scalar(@{$self->{m_ccData}}));
      {
        foreach my $iter13 (@{$self->{m_ccData}}) 
        {
          $xfer += ${iter13}->write($output);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package OpenZWave::GetNodeStatisticsReturnStruct;
use base qw(Class::Accessor);
OpenZWave::GetNodeStatisticsReturnStruct->mk_accessors( qw( _data ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{_data} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{_data}) {
      $self->{_data} = $vals->{_data};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'GetNodeStatisticsReturnStruct';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{_data} = new OpenZWave::NodeData();
        $xfer += $self->{_data}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('GetNodeStatisticsReturnStruct');
  if (defined $self->{_data}) {
    $xfer += $output->writeFieldBegin('_data', TType::STRUCT, 1);
    $xfer += $self->{_data}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package OpenZWave::GetSwitchPointReturnStruct;
use base qw(Class::Accessor);
OpenZWave::GetSwitchPointReturnStruct->mk_accessors( qw( retval o_hours o_minutes o_setback ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{retval} = undef;
  $self->{o_hours} = undef;
  $self->{o_minutes} = undef;
  $self->{o_setback} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{retval}) {
      $self->{retval} = $vals->{retval};
    }
    if (defined $vals->{o_hours}) {
      $self->{o_hours} = $vals->{o_hours};
    }
    if (defined $vals->{o_minutes}) {
      $self->{o_minutes} = $vals->{o_minutes};
    }
    if (defined $vals->{o_setback}) {
      $self->{o_setback} = $vals->{o_setback};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'GetSwitchPointReturnStruct';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::BOOL) {
        $xfer += $input->readBool(\$self->{retval});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::BYTE) {
        $xfer += $input->readByte(\$self->{o_hours});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::BYTE) {
        $xfer += $input->readByte(\$self->{o_minutes});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == TType::BYTE) {
        $xfer += $input->readByte(\$self->{o_setback});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('GetSwitchPointReturnStruct');
  if (defined $self->{retval}) {
    $xfer += $output->writeFieldBegin('retval', TType::BOOL, 1);
    $xfer += $output->writeBool($self->{retval});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{o_hours}) {
    $xfer += $output->writeFieldBegin('o_hours', TType::BYTE, 2);
    $xfer += $output->writeByte($self->{o_hours});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{o_minutes}) {
    $xfer += $output->writeFieldBegin('o_minutes', TType::BYTE, 3);
    $xfer += $output->writeByte($self->{o_minutes});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{o_setback}) {
    $xfer += $output->writeFieldBegin('o_setback', TType::BYTE, 4);
    $xfer += $output->writeByte($self->{o_setback});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package OpenZWave::Bool_Bool;
use base qw(Class::Accessor);
OpenZWave::Bool_Bool->mk_accessors( qw( retval o_value ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{retval} = undef;
  $self->{o_value} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{retval}) {
      $self->{retval} = $vals->{retval};
    }
    if (defined $vals->{o_value}) {
      $self->{o_value} = $vals->{o_value};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'Bool_Bool';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::BOOL) {
        $xfer += $input->readBool(\$self->{retval});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::BOOL) {
        $xfer += $input->readBool(\$self->{o_value});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('Bool_Bool');
  if (defined $self->{retval}) {
    $xfer += $output->writeFieldBegin('retval', TType::BOOL, 1);
    $xfer += $output->writeBool($self->{retval});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{o_value}) {
    $xfer += $output->writeFieldBegin('o_value', TType::BOOL, 2);
    $xfer += $output->writeBool($self->{o_value});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package OpenZWave::Bool_UInt8;
use base qw(Class::Accessor);
OpenZWave::Bool_UInt8->mk_accessors( qw( retval o_value ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{retval} = undef;
  $self->{o_value} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{retval}) {
      $self->{retval} = $vals->{retval};
    }
    if (defined $vals->{o_value}) {
      $self->{o_value} = $vals->{o_value};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'Bool_UInt8';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::BOOL) {
        $xfer += $input->readBool(\$self->{retval});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::BYTE) {
        $xfer += $input->readByte(\$self->{o_value});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('Bool_UInt8');
  if (defined $self->{retval}) {
    $xfer += $output->writeFieldBegin('retval', TType::BOOL, 1);
    $xfer += $output->writeBool($self->{retval});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{o_value}) {
    $xfer += $output->writeFieldBegin('o_value', TType::BYTE, 2);
    $xfer += $output->writeByte($self->{o_value});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package OpenZWave::Bool_Float;
use base qw(Class::Accessor);
OpenZWave::Bool_Float->mk_accessors( qw( retval o_value ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{retval} = undef;
  $self->{o_value} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{retval}) {
      $self->{retval} = $vals->{retval};
    }
    if (defined $vals->{o_value}) {
      $self->{o_value} = $vals->{o_value};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'Bool_Float';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::BOOL) {
        $xfer += $input->readBool(\$self->{retval});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::DOUBLE) {
        $xfer += $input->readDouble(\$self->{o_value});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('Bool_Float');
  if (defined $self->{retval}) {
    $xfer += $output->writeFieldBegin('retval', TType::BOOL, 1);
    $xfer += $output->writeBool($self->{retval});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{o_value}) {
    $xfer += $output->writeFieldBegin('o_value', TType::DOUBLE, 2);
    $xfer += $output->writeDouble($self->{o_value});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package OpenZWave::Bool_Int;
use base qw(Class::Accessor);
OpenZWave::Bool_Int->mk_accessors( qw( retval o_value ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{retval} = undef;
  $self->{o_value} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{retval}) {
      $self->{retval} = $vals->{retval};
    }
    if (defined $vals->{o_value}) {
      $self->{o_value} = $vals->{o_value};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'Bool_Int';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::BOOL) {
        $xfer += $input->readBool(\$self->{retval});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::I32) {
        $xfer += $input->readI32(\$self->{o_value});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('Bool_Int');
  if (defined $self->{retval}) {
    $xfer += $output->writeFieldBegin('retval', TType::BOOL, 1);
    $xfer += $output->writeBool($self->{retval});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{o_value}) {
    $xfer += $output->writeFieldBegin('o_value', TType::I32, 2);
    $xfer += $output->writeI32($self->{o_value});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package OpenZWave::Bool_Int16;
use base qw(Class::Accessor);
OpenZWave::Bool_Int16->mk_accessors( qw( retval o_value ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{retval} = undef;
  $self->{o_value} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{retval}) {
      $self->{retval} = $vals->{retval};
    }
    if (defined $vals->{o_value}) {
      $self->{o_value} = $vals->{o_value};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'Bool_Int16';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::BOOL) {
        $xfer += $input->readBool(\$self->{retval});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::I16) {
        $xfer += $input->readI16(\$self->{o_value});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('Bool_Int16');
  if (defined $self->{retval}) {
    $xfer += $output->writeFieldBegin('retval', TType::BOOL, 1);
    $xfer += $output->writeBool($self->{retval});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{o_value}) {
    $xfer += $output->writeFieldBegin('o_value', TType::I16, 2);
    $xfer += $output->writeI16($self->{o_value});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package OpenZWave::Bool_String;
use base qw(Class::Accessor);
OpenZWave::Bool_String->mk_accessors( qw( retval o_value ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{retval} = undef;
  $self->{o_value} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{retval}) {
      $self->{retval} = $vals->{retval};
    }
    if (defined $vals->{o_value}) {
      $self->{o_value} = $vals->{o_value};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'Bool_String';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::BOOL) {
        $xfer += $input->readBool(\$self->{retval});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{o_value});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('Bool_String');
  if (defined $self->{retval}) {
    $xfer += $output->writeFieldBegin('retval', TType::BOOL, 1);
    $xfer += $output->writeBool($self->{retval});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{o_value}) {
    $xfer += $output->writeFieldBegin('o_value', TType::STRING, 2);
    $xfer += $output->writeString($self->{o_value});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package OpenZWave::Bool_ListString;
use base qw(Class::Accessor);
OpenZWave::Bool_ListString->mk_accessors( qw( retval o_value ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{retval} = undef;
  $self->{o_value} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{retval}) {
      $self->{retval} = $vals->{retval};
    }
    if (defined $vals->{o_value}) {
      $self->{o_value} = $vals->{o_value};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'Bool_ListString';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::BOOL) {
        $xfer += $input->readBool(\$self->{retval});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::LIST) {
        {
          my $_size14 = 0;
          $self->{o_value} = [];
          my $_etype17 = 0;
          $xfer += $input->readListBegin(\$_etype17, \$_size14);
          for (my $_i18 = 0; $_i18 < $_size14; ++$_i18)
          {
            my $elem19 = undef;
            $xfer += $input->readString(\$elem19);
            push(@{$self->{o_value}},$elem19);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('Bool_ListString');
  if (defined $self->{retval}) {
    $xfer += $output->writeFieldBegin('retval', TType::BOOL, 1);
    $xfer += $output->writeBool($self->{retval});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{o_value}) {
    $xfer += $output->writeFieldBegin('o_value', TType::LIST, 2);
    {
      $xfer += $output->writeListBegin(TType::STRING, scalar(@{$self->{o_value}}));
      {
        foreach my $iter20 (@{$self->{o_value}}) 
        {
          $xfer += $output->writeString($iter20);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package OpenZWave::ListUInt8_Byte;
use base qw(Class::Accessor);
OpenZWave::ListUInt8_Byte->mk_accessors( qw( _value _length ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{_value} = undef;
  $self->{_length} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{_value}) {
      $self->{_value} = $vals->{_value};
    }
    if (defined $vals->{_length}) {
      $self->{_length} = $vals->{_length};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'ListUInt8_Byte';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::LIST) {
        {
          my $_size21 = 0;
          $self->{_value} = [];
          my $_etype24 = 0;
          $xfer += $input->readListBegin(\$_etype24, \$_size21);
          for (my $_i25 = 0; $_i25 < $_size21; ++$_i25)
          {
            my $elem26 = undef;
            $xfer += $input->readByte(\$elem26);
            push(@{$self->{_value}},$elem26);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::BYTE) {
        $xfer += $input->readByte(\$self->{_length});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('ListUInt8_Byte');
  if (defined $self->{_value}) {
    $xfer += $output->writeFieldBegin('_value', TType::LIST, 1);
    {
      $xfer += $output->writeListBegin(TType::BYTE, scalar(@{$self->{_value}}));
      {
        foreach my $iter27 (@{$self->{_value}}) 
        {
          $xfer += $output->writeByte($iter27);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{_length}) {
    $xfer += $output->writeFieldBegin('_length', TType::BYTE, 2);
    $xfer += $output->writeByte($self->{_length});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package OpenZWave::UInt32_ListByte;
use base qw(Class::Accessor);
OpenZWave::UInt32_ListByte->mk_accessors( qw( retval _nodeNeighbors ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{retval} = undef;
  $self->{_nodeNeighbors} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{retval}) {
      $self->{retval} = $vals->{retval};
    }
    if (defined $vals->{_nodeNeighbors}) {
      $self->{_nodeNeighbors} = $vals->{_nodeNeighbors};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'UInt32_ListByte';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::I32) {
        $xfer += $input->readI32(\$self->{retval});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::LIST) {
        {
          my $_size28 = 0;
          $self->{_nodeNeighbors} = [];
          my $_etype31 = 0;
          $xfer += $input->readListBegin(\$_etype31, \$_size28);
          for (my $_i32 = 0; $_i32 < $_size28; ++$_i32)
          {
            my $elem33 = undef;
            $xfer += $input->readByte(\$elem33);
            push(@{$self->{_nodeNeighbors}},$elem33);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('UInt32_ListByte');
  if (defined $self->{retval}) {
    $xfer += $output->writeFieldBegin('retval', TType::I32, 1);
    $xfer += $output->writeI32($self->{retval});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{_nodeNeighbors}) {
    $xfer += $output->writeFieldBegin('_nodeNeighbors', TType::LIST, 2);
    {
      $xfer += $output->writeListBegin(TType::BYTE, scalar(@{$self->{_nodeNeighbors}}));
      {
        foreach my $iter34 (@{$self->{_nodeNeighbors}}) 
        {
          $xfer += $output->writeByte($iter34);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package OpenZWave::Bool_GetNodeClassInformation;
use base qw(Class::Accessor);
OpenZWave::Bool_GetNodeClassInformation->mk_accessors( qw( retval _className _classVersion ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{retval} = undef;
  $self->{_className} = undef;
  $self->{_classVersion} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{retval}) {
      $self->{retval} = $vals->{retval};
    }
    if (defined $vals->{_className}) {
      $self->{_className} = $vals->{_className};
    }
    if (defined $vals->{_classVersion}) {
      $self->{_classVersion} = $vals->{_classVersion};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'Bool_GetNodeClassInformation';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::BOOL) {
        $xfer += $input->readBool(\$self->{retval});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{_className});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::BYTE) {
        $xfer += $input->readByte(\$self->{_classVersion});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('Bool_GetNodeClassInformation');
  if (defined $self->{retval}) {
    $xfer += $output->writeFieldBegin('retval', TType::BOOL, 1);
    $xfer += $output->writeBool($self->{retval});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{_className}) {
    $xfer += $output->writeFieldBegin('_className', TType::STRING, 2);
    $xfer += $output->writeString($self->{_className});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{_classVersion}) {
    $xfer += $output->writeFieldBegin('_classVersion', TType::BYTE, 3);
    $xfer += $output->writeByte($self->{_classVersion});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package OpenZWave::GetAssociationsReturnStruct;
use base qw(Class::Accessor);
OpenZWave::GetAssociationsReturnStruct->mk_accessors( qw( retval o_associations ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{retval} = undef;
  $self->{o_associations} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{retval}) {
      $self->{retval} = $vals->{retval};
    }
    if (defined $vals->{o_associations}) {
      $self->{o_associations} = $vals->{o_associations};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'GetAssociationsReturnStruct';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::I32) {
        $xfer += $input->readI32(\$self->{retval});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::LIST) {
        {
          my $_size35 = 0;
          $self->{o_associations} = [];
          my $_etype38 = 0;
          $xfer += $input->readListBegin(\$_etype38, \$_size35);
          for (my $_i39 = 0; $_i39 < $_size35; ++$_i39)
          {
            my $elem40 = undef;
            $xfer += $input->readByte(\$elem40);
            push(@{$self->{o_associations}},$elem40);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('GetAssociationsReturnStruct');
  if (defined $self->{retval}) {
    $xfer += $output->writeFieldBegin('retval', TType::I32, 1);
    $xfer += $output->writeI32($self->{retval});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{o_associations}) {
    $xfer += $output->writeFieldBegin('o_associations', TType::LIST, 2);
    {
      $xfer += $output->writeListBegin(TType::BYTE, scalar(@{$self->{o_associations}}));
      {
        foreach my $iter41 (@{$self->{o_associations}}) 
        {
          $xfer += $output->writeByte($iter41);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package OpenZWave::GetAllScenesReturnStruct;
use base qw(Class::Accessor);
OpenZWave::GetAllScenesReturnStruct->mk_accessors( qw( retval _sceneIds ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{retval} = undef;
  $self->{_sceneIds} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{retval}) {
      $self->{retval} = $vals->{retval};
    }
    if (defined $vals->{_sceneIds}) {
      $self->{_sceneIds} = $vals->{_sceneIds};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'GetAllScenesReturnStruct';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::BYTE) {
        $xfer += $input->readByte(\$self->{retval});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::LIST) {
        {
          my $_size42 = 0;
          $self->{_sceneIds} = [];
          my $_etype45 = 0;
          $xfer += $input->readListBegin(\$_etype45, \$_size42);
          for (my $_i46 = 0; $_i46 < $_size42; ++$_i46)
          {
            my $elem47 = undef;
            $xfer += $input->readByte(\$elem47);
            push(@{$self->{_sceneIds}},$elem47);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('GetAllScenesReturnStruct');
  if (defined $self->{retval}) {
    $xfer += $output->writeFieldBegin('retval', TType::BYTE, 1);
    $xfer += $output->writeByte($self->{retval});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{_sceneIds}) {
    $xfer += $output->writeFieldBegin('_sceneIds', TType::LIST, 2);
    {
      $xfer += $output->writeListBegin(TType::BYTE, scalar(@{$self->{_sceneIds}}));
      {
        foreach my $iter48 (@{$self->{_sceneIds}}) 
        {
          $xfer += $output->writeByte($iter48);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package OpenZWave::SceneGetValuesReturnStruct;
use base qw(Class::Accessor);
OpenZWave::SceneGetValuesReturnStruct->mk_accessors( qw( retval o_value ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{retval} = undef;
  $self->{o_value} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{retval}) {
      $self->{retval} = $vals->{retval};
    }
    if (defined $vals->{o_value}) {
      $self->{o_value} = $vals->{o_value};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'SceneGetValuesReturnStruct';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::I32) {
        $xfer += $input->readI32(\$self->{retval});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::LIST) {
        {
          my $_size49 = 0;
          $self->{o_value} = [];
          my $_etype52 = 0;
          $xfer += $input->readListBegin(\$_etype52, \$_size49);
          for (my $_i53 = 0; $_i53 < $_size49; ++$_i53)
          {
            my $elem54 = undef;
            $elem54 = new OpenZWave::RemoteValueID();
            $xfer += $elem54->read($input);
            push(@{$self->{o_value}},$elem54);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('SceneGetValuesReturnStruct');
  if (defined $self->{retval}) {
    $xfer += $output->writeFieldBegin('retval', TType::I32, 1);
    $xfer += $output->writeI32($self->{retval});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{o_value}) {
    $xfer += $output->writeFieldBegin('o_value', TType::LIST, 2);
    {
      $xfer += $output->writeListBegin(TType::STRUCT, scalar(@{$self->{o_value}}));
      {
        foreach my $iter55 (@{$self->{o_value}}) 
        {
          $xfer += ${iter55}->write($output);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

1;
