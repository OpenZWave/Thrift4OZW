/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package OpenZWave;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class NodeData implements org.apache.thrift.TBase<NodeData, NodeData._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("NodeData");

  private static final org.apache.thrift.protocol.TField M_SENT_CNT_FIELD_DESC = new org.apache.thrift.protocol.TField("m_sentCnt", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField M_SENT_FAILED_FIELD_DESC = new org.apache.thrift.protocol.TField("m_sentFailed", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField M_RETRIES_FIELD_DESC = new org.apache.thrift.protocol.TField("m_retries", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField M_RECEIVED_CNT_FIELD_DESC = new org.apache.thrift.protocol.TField("m_receivedCnt", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField M_RECEIVED_DUPS_FIELD_DESC = new org.apache.thrift.protocol.TField("m_receivedDups", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField M_RTT_FIELD_DESC = new org.apache.thrift.protocol.TField("m_rtt", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField M_SENT_TS_FIELD_DESC = new org.apache.thrift.protocol.TField("m_sentTS", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField M_RECEIVED_TS_FIELD_DESC = new org.apache.thrift.protocol.TField("m_receivedTS", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField M_LAST_RTT_FIELD_DESC = new org.apache.thrift.protocol.TField("m_lastRTT", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField M_AVERAGE_RTT_FIELD_DESC = new org.apache.thrift.protocol.TField("m_averageRTT", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField M_QUALITY_FIELD_DESC = new org.apache.thrift.protocol.TField("m_quality", org.apache.thrift.protocol.TType.BYTE, (short)11);
  private static final org.apache.thrift.protocol.TField M_LAST_RECEIVED_MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("m_lastReceivedMessage", org.apache.thrift.protocol.TType.LIST, (short)12);
  private static final org.apache.thrift.protocol.TField M_CC_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("m_ccData", org.apache.thrift.protocol.TType.LIST, (short)13);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new NodeDataStandardSchemeFactory());
    schemes.put(TupleScheme.class, new NodeDataTupleSchemeFactory());
  }

  public int m_sentCnt; // required
  public int m_sentFailed; // required
  public int m_retries; // required
  public int m_receivedCnt; // required
  public int m_receivedDups; // required
  public int m_rtt; // required
  public String m_sentTS; // required
  public String m_receivedTS; // required
  public int m_lastRTT; // required
  public int m_averageRTT; // required
  public byte m_quality; // required
  public List<Byte> m_lastReceivedMessage; // required
  public List<CommandClassData> m_ccData; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    M_SENT_CNT((short)1, "m_sentCnt"),
    M_SENT_FAILED((short)2, "m_sentFailed"),
    M_RETRIES((short)3, "m_retries"),
    M_RECEIVED_CNT((short)4, "m_receivedCnt"),
    M_RECEIVED_DUPS((short)5, "m_receivedDups"),
    M_RTT((short)6, "m_rtt"),
    M_SENT_TS((short)7, "m_sentTS"),
    M_RECEIVED_TS((short)8, "m_receivedTS"),
    M_LAST_RTT((short)9, "m_lastRTT"),
    M_AVERAGE_RTT((short)10, "m_averageRTT"),
    M_QUALITY((short)11, "m_quality"),
    M_LAST_RECEIVED_MESSAGE((short)12, "m_lastReceivedMessage"),
    M_CC_DATA((short)13, "m_ccData");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // M_SENT_CNT
          return M_SENT_CNT;
        case 2: // M_SENT_FAILED
          return M_SENT_FAILED;
        case 3: // M_RETRIES
          return M_RETRIES;
        case 4: // M_RECEIVED_CNT
          return M_RECEIVED_CNT;
        case 5: // M_RECEIVED_DUPS
          return M_RECEIVED_DUPS;
        case 6: // M_RTT
          return M_RTT;
        case 7: // M_SENT_TS
          return M_SENT_TS;
        case 8: // M_RECEIVED_TS
          return M_RECEIVED_TS;
        case 9: // M_LAST_RTT
          return M_LAST_RTT;
        case 10: // M_AVERAGE_RTT
          return M_AVERAGE_RTT;
        case 11: // M_QUALITY
          return M_QUALITY;
        case 12: // M_LAST_RECEIVED_MESSAGE
          return M_LAST_RECEIVED_MESSAGE;
        case 13: // M_CC_DATA
          return M_CC_DATA;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __M_SENTCNT_ISSET_ID = 0;
  private static final int __M_SENTFAILED_ISSET_ID = 1;
  private static final int __M_RETRIES_ISSET_ID = 2;
  private static final int __M_RECEIVEDCNT_ISSET_ID = 3;
  private static final int __M_RECEIVEDDUPS_ISSET_ID = 4;
  private static final int __M_RTT_ISSET_ID = 5;
  private static final int __M_LASTRTT_ISSET_ID = 6;
  private static final int __M_AVERAGERTT_ISSET_ID = 7;
  private static final int __M_QUALITY_ISSET_ID = 8;
  private BitSet __isset_bit_vector = new BitSet(9);
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.M_SENT_CNT, new org.apache.thrift.meta_data.FieldMetaData("m_sentCnt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.M_SENT_FAILED, new org.apache.thrift.meta_data.FieldMetaData("m_sentFailed", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.M_RETRIES, new org.apache.thrift.meta_data.FieldMetaData("m_retries", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.M_RECEIVED_CNT, new org.apache.thrift.meta_data.FieldMetaData("m_receivedCnt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.M_RECEIVED_DUPS, new org.apache.thrift.meta_data.FieldMetaData("m_receivedDups", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.M_RTT, new org.apache.thrift.meta_data.FieldMetaData("m_rtt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.M_SENT_TS, new org.apache.thrift.meta_data.FieldMetaData("m_sentTS", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.M_RECEIVED_TS, new org.apache.thrift.meta_data.FieldMetaData("m_receivedTS", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.M_LAST_RTT, new org.apache.thrift.meta_data.FieldMetaData("m_lastRTT", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.M_AVERAGE_RTT, new org.apache.thrift.meta_data.FieldMetaData("m_averageRTT", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.M_QUALITY, new org.apache.thrift.meta_data.FieldMetaData("m_quality", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.M_LAST_RECEIVED_MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("m_lastReceivedMessage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE))));
    tmpMap.put(_Fields.M_CC_DATA, new org.apache.thrift.meta_data.FieldMetaData("m_ccData", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CommandClassData.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(NodeData.class, metaDataMap);
  }

  public NodeData() {
  }

  public NodeData(
    int m_sentCnt,
    int m_sentFailed,
    int m_retries,
    int m_receivedCnt,
    int m_receivedDups,
    int m_rtt,
    String m_sentTS,
    String m_receivedTS,
    int m_lastRTT,
    int m_averageRTT,
    byte m_quality,
    List<Byte> m_lastReceivedMessage,
    List<CommandClassData> m_ccData)
  {
    this();
    this.m_sentCnt = m_sentCnt;
    setM_sentCntIsSet(true);
    this.m_sentFailed = m_sentFailed;
    setM_sentFailedIsSet(true);
    this.m_retries = m_retries;
    setM_retriesIsSet(true);
    this.m_receivedCnt = m_receivedCnt;
    setM_receivedCntIsSet(true);
    this.m_receivedDups = m_receivedDups;
    setM_receivedDupsIsSet(true);
    this.m_rtt = m_rtt;
    setM_rttIsSet(true);
    this.m_sentTS = m_sentTS;
    this.m_receivedTS = m_receivedTS;
    this.m_lastRTT = m_lastRTT;
    setM_lastRTTIsSet(true);
    this.m_averageRTT = m_averageRTT;
    setM_averageRTTIsSet(true);
    this.m_quality = m_quality;
    setM_qualityIsSet(true);
    this.m_lastReceivedMessage = m_lastReceivedMessage;
    this.m_ccData = m_ccData;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public NodeData(NodeData other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.m_sentCnt = other.m_sentCnt;
    this.m_sentFailed = other.m_sentFailed;
    this.m_retries = other.m_retries;
    this.m_receivedCnt = other.m_receivedCnt;
    this.m_receivedDups = other.m_receivedDups;
    this.m_rtt = other.m_rtt;
    if (other.isSetM_sentTS()) {
      this.m_sentTS = other.m_sentTS;
    }
    if (other.isSetM_receivedTS()) {
      this.m_receivedTS = other.m_receivedTS;
    }
    this.m_lastRTT = other.m_lastRTT;
    this.m_averageRTT = other.m_averageRTT;
    this.m_quality = other.m_quality;
    if (other.isSetM_lastReceivedMessage()) {
      List<Byte> __this__m_lastReceivedMessage = new ArrayList<Byte>();
      for (Byte other_element : other.m_lastReceivedMessage) {
        __this__m_lastReceivedMessage.add(other_element);
      }
      this.m_lastReceivedMessage = __this__m_lastReceivedMessage;
    }
    if (other.isSetM_ccData()) {
      List<CommandClassData> __this__m_ccData = new ArrayList<CommandClassData>();
      for (CommandClassData other_element : other.m_ccData) {
        __this__m_ccData.add(new CommandClassData(other_element));
      }
      this.m_ccData = __this__m_ccData;
    }
  }

  public NodeData deepCopy() {
    return new NodeData(this);
  }

  @Override
  public void clear() {
    setM_sentCntIsSet(false);
    this.m_sentCnt = 0;
    setM_sentFailedIsSet(false);
    this.m_sentFailed = 0;
    setM_retriesIsSet(false);
    this.m_retries = 0;
    setM_receivedCntIsSet(false);
    this.m_receivedCnt = 0;
    setM_receivedDupsIsSet(false);
    this.m_receivedDups = 0;
    setM_rttIsSet(false);
    this.m_rtt = 0;
    this.m_sentTS = null;
    this.m_receivedTS = null;
    setM_lastRTTIsSet(false);
    this.m_lastRTT = 0;
    setM_averageRTTIsSet(false);
    this.m_averageRTT = 0;
    setM_qualityIsSet(false);
    this.m_quality = 0;
    this.m_lastReceivedMessage = null;
    this.m_ccData = null;
  }

  public int getM_sentCnt() {
    return this.m_sentCnt;
  }

  public NodeData setM_sentCnt(int m_sentCnt) {
    this.m_sentCnt = m_sentCnt;
    setM_sentCntIsSet(true);
    return this;
  }

  public void unsetM_sentCnt() {
    __isset_bit_vector.clear(__M_SENTCNT_ISSET_ID);
  }

  /** Returns true if field m_sentCnt is set (has been assigned a value) and false otherwise */
  public boolean isSetM_sentCnt() {
    return __isset_bit_vector.get(__M_SENTCNT_ISSET_ID);
  }

  public void setM_sentCntIsSet(boolean value) {
    __isset_bit_vector.set(__M_SENTCNT_ISSET_ID, value);
  }

  public int getM_sentFailed() {
    return this.m_sentFailed;
  }

  public NodeData setM_sentFailed(int m_sentFailed) {
    this.m_sentFailed = m_sentFailed;
    setM_sentFailedIsSet(true);
    return this;
  }

  public void unsetM_sentFailed() {
    __isset_bit_vector.clear(__M_SENTFAILED_ISSET_ID);
  }

  /** Returns true if field m_sentFailed is set (has been assigned a value) and false otherwise */
  public boolean isSetM_sentFailed() {
    return __isset_bit_vector.get(__M_SENTFAILED_ISSET_ID);
  }

  public void setM_sentFailedIsSet(boolean value) {
    __isset_bit_vector.set(__M_SENTFAILED_ISSET_ID, value);
  }

  public int getM_retries() {
    return this.m_retries;
  }

  public NodeData setM_retries(int m_retries) {
    this.m_retries = m_retries;
    setM_retriesIsSet(true);
    return this;
  }

  public void unsetM_retries() {
    __isset_bit_vector.clear(__M_RETRIES_ISSET_ID);
  }

  /** Returns true if field m_retries is set (has been assigned a value) and false otherwise */
  public boolean isSetM_retries() {
    return __isset_bit_vector.get(__M_RETRIES_ISSET_ID);
  }

  public void setM_retriesIsSet(boolean value) {
    __isset_bit_vector.set(__M_RETRIES_ISSET_ID, value);
  }

  public int getM_receivedCnt() {
    return this.m_receivedCnt;
  }

  public NodeData setM_receivedCnt(int m_receivedCnt) {
    this.m_receivedCnt = m_receivedCnt;
    setM_receivedCntIsSet(true);
    return this;
  }

  public void unsetM_receivedCnt() {
    __isset_bit_vector.clear(__M_RECEIVEDCNT_ISSET_ID);
  }

  /** Returns true if field m_receivedCnt is set (has been assigned a value) and false otherwise */
  public boolean isSetM_receivedCnt() {
    return __isset_bit_vector.get(__M_RECEIVEDCNT_ISSET_ID);
  }

  public void setM_receivedCntIsSet(boolean value) {
    __isset_bit_vector.set(__M_RECEIVEDCNT_ISSET_ID, value);
  }

  public int getM_receivedDups() {
    return this.m_receivedDups;
  }

  public NodeData setM_receivedDups(int m_receivedDups) {
    this.m_receivedDups = m_receivedDups;
    setM_receivedDupsIsSet(true);
    return this;
  }

  public void unsetM_receivedDups() {
    __isset_bit_vector.clear(__M_RECEIVEDDUPS_ISSET_ID);
  }

  /** Returns true if field m_receivedDups is set (has been assigned a value) and false otherwise */
  public boolean isSetM_receivedDups() {
    return __isset_bit_vector.get(__M_RECEIVEDDUPS_ISSET_ID);
  }

  public void setM_receivedDupsIsSet(boolean value) {
    __isset_bit_vector.set(__M_RECEIVEDDUPS_ISSET_ID, value);
  }

  public int getM_rtt() {
    return this.m_rtt;
  }

  public NodeData setM_rtt(int m_rtt) {
    this.m_rtt = m_rtt;
    setM_rttIsSet(true);
    return this;
  }

  public void unsetM_rtt() {
    __isset_bit_vector.clear(__M_RTT_ISSET_ID);
  }

  /** Returns true if field m_rtt is set (has been assigned a value) and false otherwise */
  public boolean isSetM_rtt() {
    return __isset_bit_vector.get(__M_RTT_ISSET_ID);
  }

  public void setM_rttIsSet(boolean value) {
    __isset_bit_vector.set(__M_RTT_ISSET_ID, value);
  }

  public String getM_sentTS() {
    return this.m_sentTS;
  }

  public NodeData setM_sentTS(String m_sentTS) {
    this.m_sentTS = m_sentTS;
    return this;
  }

  public void unsetM_sentTS() {
    this.m_sentTS = null;
  }

  /** Returns true if field m_sentTS is set (has been assigned a value) and false otherwise */
  public boolean isSetM_sentTS() {
    return this.m_sentTS != null;
  }

  public void setM_sentTSIsSet(boolean value) {
    if (!value) {
      this.m_sentTS = null;
    }
  }

  public String getM_receivedTS() {
    return this.m_receivedTS;
  }

  public NodeData setM_receivedTS(String m_receivedTS) {
    this.m_receivedTS = m_receivedTS;
    return this;
  }

  public void unsetM_receivedTS() {
    this.m_receivedTS = null;
  }

  /** Returns true if field m_receivedTS is set (has been assigned a value) and false otherwise */
  public boolean isSetM_receivedTS() {
    return this.m_receivedTS != null;
  }

  public void setM_receivedTSIsSet(boolean value) {
    if (!value) {
      this.m_receivedTS = null;
    }
  }

  public int getM_lastRTT() {
    return this.m_lastRTT;
  }

  public NodeData setM_lastRTT(int m_lastRTT) {
    this.m_lastRTT = m_lastRTT;
    setM_lastRTTIsSet(true);
    return this;
  }

  public void unsetM_lastRTT() {
    __isset_bit_vector.clear(__M_LASTRTT_ISSET_ID);
  }

  /** Returns true if field m_lastRTT is set (has been assigned a value) and false otherwise */
  public boolean isSetM_lastRTT() {
    return __isset_bit_vector.get(__M_LASTRTT_ISSET_ID);
  }

  public void setM_lastRTTIsSet(boolean value) {
    __isset_bit_vector.set(__M_LASTRTT_ISSET_ID, value);
  }

  public int getM_averageRTT() {
    return this.m_averageRTT;
  }

  public NodeData setM_averageRTT(int m_averageRTT) {
    this.m_averageRTT = m_averageRTT;
    setM_averageRTTIsSet(true);
    return this;
  }

  public void unsetM_averageRTT() {
    __isset_bit_vector.clear(__M_AVERAGERTT_ISSET_ID);
  }

  /** Returns true if field m_averageRTT is set (has been assigned a value) and false otherwise */
  public boolean isSetM_averageRTT() {
    return __isset_bit_vector.get(__M_AVERAGERTT_ISSET_ID);
  }

  public void setM_averageRTTIsSet(boolean value) {
    __isset_bit_vector.set(__M_AVERAGERTT_ISSET_ID, value);
  }

  public byte getM_quality() {
    return this.m_quality;
  }

  public NodeData setM_quality(byte m_quality) {
    this.m_quality = m_quality;
    setM_qualityIsSet(true);
    return this;
  }

  public void unsetM_quality() {
    __isset_bit_vector.clear(__M_QUALITY_ISSET_ID);
  }

  /** Returns true if field m_quality is set (has been assigned a value) and false otherwise */
  public boolean isSetM_quality() {
    return __isset_bit_vector.get(__M_QUALITY_ISSET_ID);
  }

  public void setM_qualityIsSet(boolean value) {
    __isset_bit_vector.set(__M_QUALITY_ISSET_ID, value);
  }

  public int getM_lastReceivedMessageSize() {
    return (this.m_lastReceivedMessage == null) ? 0 : this.m_lastReceivedMessage.size();
  }

  public java.util.Iterator<Byte> getM_lastReceivedMessageIterator() {
    return (this.m_lastReceivedMessage == null) ? null : this.m_lastReceivedMessage.iterator();
  }

  public void addToM_lastReceivedMessage(byte elem) {
    if (this.m_lastReceivedMessage == null) {
      this.m_lastReceivedMessage = new ArrayList<Byte>();
    }
    this.m_lastReceivedMessage.add(elem);
  }

  public List<Byte> getM_lastReceivedMessage() {
    return this.m_lastReceivedMessage;
  }

  public NodeData setM_lastReceivedMessage(List<Byte> m_lastReceivedMessage) {
    this.m_lastReceivedMessage = m_lastReceivedMessage;
    return this;
  }

  public void unsetM_lastReceivedMessage() {
    this.m_lastReceivedMessage = null;
  }

  /** Returns true if field m_lastReceivedMessage is set (has been assigned a value) and false otherwise */
  public boolean isSetM_lastReceivedMessage() {
    return this.m_lastReceivedMessage != null;
  }

  public void setM_lastReceivedMessageIsSet(boolean value) {
    if (!value) {
      this.m_lastReceivedMessage = null;
    }
  }

  public int getM_ccDataSize() {
    return (this.m_ccData == null) ? 0 : this.m_ccData.size();
  }

  public java.util.Iterator<CommandClassData> getM_ccDataIterator() {
    return (this.m_ccData == null) ? null : this.m_ccData.iterator();
  }

  public void addToM_ccData(CommandClassData elem) {
    if (this.m_ccData == null) {
      this.m_ccData = new ArrayList<CommandClassData>();
    }
    this.m_ccData.add(elem);
  }

  public List<CommandClassData> getM_ccData() {
    return this.m_ccData;
  }

  public NodeData setM_ccData(List<CommandClassData> m_ccData) {
    this.m_ccData = m_ccData;
    return this;
  }

  public void unsetM_ccData() {
    this.m_ccData = null;
  }

  /** Returns true if field m_ccData is set (has been assigned a value) and false otherwise */
  public boolean isSetM_ccData() {
    return this.m_ccData != null;
  }

  public void setM_ccDataIsSet(boolean value) {
    if (!value) {
      this.m_ccData = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case M_SENT_CNT:
      if (value == null) {
        unsetM_sentCnt();
      } else {
        setM_sentCnt((Integer)value);
      }
      break;

    case M_SENT_FAILED:
      if (value == null) {
        unsetM_sentFailed();
      } else {
        setM_sentFailed((Integer)value);
      }
      break;

    case M_RETRIES:
      if (value == null) {
        unsetM_retries();
      } else {
        setM_retries((Integer)value);
      }
      break;

    case M_RECEIVED_CNT:
      if (value == null) {
        unsetM_receivedCnt();
      } else {
        setM_receivedCnt((Integer)value);
      }
      break;

    case M_RECEIVED_DUPS:
      if (value == null) {
        unsetM_receivedDups();
      } else {
        setM_receivedDups((Integer)value);
      }
      break;

    case M_RTT:
      if (value == null) {
        unsetM_rtt();
      } else {
        setM_rtt((Integer)value);
      }
      break;

    case M_SENT_TS:
      if (value == null) {
        unsetM_sentTS();
      } else {
        setM_sentTS((String)value);
      }
      break;

    case M_RECEIVED_TS:
      if (value == null) {
        unsetM_receivedTS();
      } else {
        setM_receivedTS((String)value);
      }
      break;

    case M_LAST_RTT:
      if (value == null) {
        unsetM_lastRTT();
      } else {
        setM_lastRTT((Integer)value);
      }
      break;

    case M_AVERAGE_RTT:
      if (value == null) {
        unsetM_averageRTT();
      } else {
        setM_averageRTT((Integer)value);
      }
      break;

    case M_QUALITY:
      if (value == null) {
        unsetM_quality();
      } else {
        setM_quality((Byte)value);
      }
      break;

    case M_LAST_RECEIVED_MESSAGE:
      if (value == null) {
        unsetM_lastReceivedMessage();
      } else {
        setM_lastReceivedMessage((List<Byte>)value);
      }
      break;

    case M_CC_DATA:
      if (value == null) {
        unsetM_ccData();
      } else {
        setM_ccData((List<CommandClassData>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case M_SENT_CNT:
      return Integer.valueOf(getM_sentCnt());

    case M_SENT_FAILED:
      return Integer.valueOf(getM_sentFailed());

    case M_RETRIES:
      return Integer.valueOf(getM_retries());

    case M_RECEIVED_CNT:
      return Integer.valueOf(getM_receivedCnt());

    case M_RECEIVED_DUPS:
      return Integer.valueOf(getM_receivedDups());

    case M_RTT:
      return Integer.valueOf(getM_rtt());

    case M_SENT_TS:
      return getM_sentTS();

    case M_RECEIVED_TS:
      return getM_receivedTS();

    case M_LAST_RTT:
      return Integer.valueOf(getM_lastRTT());

    case M_AVERAGE_RTT:
      return Integer.valueOf(getM_averageRTT());

    case M_QUALITY:
      return Byte.valueOf(getM_quality());

    case M_LAST_RECEIVED_MESSAGE:
      return getM_lastReceivedMessage();

    case M_CC_DATA:
      return getM_ccData();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case M_SENT_CNT:
      return isSetM_sentCnt();
    case M_SENT_FAILED:
      return isSetM_sentFailed();
    case M_RETRIES:
      return isSetM_retries();
    case M_RECEIVED_CNT:
      return isSetM_receivedCnt();
    case M_RECEIVED_DUPS:
      return isSetM_receivedDups();
    case M_RTT:
      return isSetM_rtt();
    case M_SENT_TS:
      return isSetM_sentTS();
    case M_RECEIVED_TS:
      return isSetM_receivedTS();
    case M_LAST_RTT:
      return isSetM_lastRTT();
    case M_AVERAGE_RTT:
      return isSetM_averageRTT();
    case M_QUALITY:
      return isSetM_quality();
    case M_LAST_RECEIVED_MESSAGE:
      return isSetM_lastReceivedMessage();
    case M_CC_DATA:
      return isSetM_ccData();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof NodeData)
      return this.equals((NodeData)that);
    return false;
  }

  public boolean equals(NodeData that) {
    if (that == null)
      return false;

    boolean this_present_m_sentCnt = true;
    boolean that_present_m_sentCnt = true;
    if (this_present_m_sentCnt || that_present_m_sentCnt) {
      if (!(this_present_m_sentCnt && that_present_m_sentCnt))
        return false;
      if (this.m_sentCnt != that.m_sentCnt)
        return false;
    }

    boolean this_present_m_sentFailed = true;
    boolean that_present_m_sentFailed = true;
    if (this_present_m_sentFailed || that_present_m_sentFailed) {
      if (!(this_present_m_sentFailed && that_present_m_sentFailed))
        return false;
      if (this.m_sentFailed != that.m_sentFailed)
        return false;
    }

    boolean this_present_m_retries = true;
    boolean that_present_m_retries = true;
    if (this_present_m_retries || that_present_m_retries) {
      if (!(this_present_m_retries && that_present_m_retries))
        return false;
      if (this.m_retries != that.m_retries)
        return false;
    }

    boolean this_present_m_receivedCnt = true;
    boolean that_present_m_receivedCnt = true;
    if (this_present_m_receivedCnt || that_present_m_receivedCnt) {
      if (!(this_present_m_receivedCnt && that_present_m_receivedCnt))
        return false;
      if (this.m_receivedCnt != that.m_receivedCnt)
        return false;
    }

    boolean this_present_m_receivedDups = true;
    boolean that_present_m_receivedDups = true;
    if (this_present_m_receivedDups || that_present_m_receivedDups) {
      if (!(this_present_m_receivedDups && that_present_m_receivedDups))
        return false;
      if (this.m_receivedDups != that.m_receivedDups)
        return false;
    }

    boolean this_present_m_rtt = true;
    boolean that_present_m_rtt = true;
    if (this_present_m_rtt || that_present_m_rtt) {
      if (!(this_present_m_rtt && that_present_m_rtt))
        return false;
      if (this.m_rtt != that.m_rtt)
        return false;
    }

    boolean this_present_m_sentTS = true && this.isSetM_sentTS();
    boolean that_present_m_sentTS = true && that.isSetM_sentTS();
    if (this_present_m_sentTS || that_present_m_sentTS) {
      if (!(this_present_m_sentTS && that_present_m_sentTS))
        return false;
      if (!this.m_sentTS.equals(that.m_sentTS))
        return false;
    }

    boolean this_present_m_receivedTS = true && this.isSetM_receivedTS();
    boolean that_present_m_receivedTS = true && that.isSetM_receivedTS();
    if (this_present_m_receivedTS || that_present_m_receivedTS) {
      if (!(this_present_m_receivedTS && that_present_m_receivedTS))
        return false;
      if (!this.m_receivedTS.equals(that.m_receivedTS))
        return false;
    }

    boolean this_present_m_lastRTT = true;
    boolean that_present_m_lastRTT = true;
    if (this_present_m_lastRTT || that_present_m_lastRTT) {
      if (!(this_present_m_lastRTT && that_present_m_lastRTT))
        return false;
      if (this.m_lastRTT != that.m_lastRTT)
        return false;
    }

    boolean this_present_m_averageRTT = true;
    boolean that_present_m_averageRTT = true;
    if (this_present_m_averageRTT || that_present_m_averageRTT) {
      if (!(this_present_m_averageRTT && that_present_m_averageRTT))
        return false;
      if (this.m_averageRTT != that.m_averageRTT)
        return false;
    }

    boolean this_present_m_quality = true;
    boolean that_present_m_quality = true;
    if (this_present_m_quality || that_present_m_quality) {
      if (!(this_present_m_quality && that_present_m_quality))
        return false;
      if (this.m_quality != that.m_quality)
        return false;
    }

    boolean this_present_m_lastReceivedMessage = true && this.isSetM_lastReceivedMessage();
    boolean that_present_m_lastReceivedMessage = true && that.isSetM_lastReceivedMessage();
    if (this_present_m_lastReceivedMessage || that_present_m_lastReceivedMessage) {
      if (!(this_present_m_lastReceivedMessage && that_present_m_lastReceivedMessage))
        return false;
      if (!this.m_lastReceivedMessage.equals(that.m_lastReceivedMessage))
        return false;
    }

    boolean this_present_m_ccData = true && this.isSetM_ccData();
    boolean that_present_m_ccData = true && that.isSetM_ccData();
    if (this_present_m_ccData || that_present_m_ccData) {
      if (!(this_present_m_ccData && that_present_m_ccData))
        return false;
      if (!this.m_ccData.equals(that.m_ccData))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(NodeData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    NodeData typedOther = (NodeData)other;

    lastComparison = Boolean.valueOf(isSetM_sentCnt()).compareTo(typedOther.isSetM_sentCnt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetM_sentCnt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.m_sentCnt, typedOther.m_sentCnt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetM_sentFailed()).compareTo(typedOther.isSetM_sentFailed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetM_sentFailed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.m_sentFailed, typedOther.m_sentFailed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetM_retries()).compareTo(typedOther.isSetM_retries());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetM_retries()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.m_retries, typedOther.m_retries);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetM_receivedCnt()).compareTo(typedOther.isSetM_receivedCnt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetM_receivedCnt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.m_receivedCnt, typedOther.m_receivedCnt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetM_receivedDups()).compareTo(typedOther.isSetM_receivedDups());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetM_receivedDups()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.m_receivedDups, typedOther.m_receivedDups);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetM_rtt()).compareTo(typedOther.isSetM_rtt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetM_rtt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.m_rtt, typedOther.m_rtt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetM_sentTS()).compareTo(typedOther.isSetM_sentTS());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetM_sentTS()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.m_sentTS, typedOther.m_sentTS);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetM_receivedTS()).compareTo(typedOther.isSetM_receivedTS());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetM_receivedTS()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.m_receivedTS, typedOther.m_receivedTS);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetM_lastRTT()).compareTo(typedOther.isSetM_lastRTT());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetM_lastRTT()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.m_lastRTT, typedOther.m_lastRTT);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetM_averageRTT()).compareTo(typedOther.isSetM_averageRTT());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetM_averageRTT()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.m_averageRTT, typedOther.m_averageRTT);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetM_quality()).compareTo(typedOther.isSetM_quality());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetM_quality()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.m_quality, typedOther.m_quality);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetM_lastReceivedMessage()).compareTo(typedOther.isSetM_lastReceivedMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetM_lastReceivedMessage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.m_lastReceivedMessage, typedOther.m_lastReceivedMessage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetM_ccData()).compareTo(typedOther.isSetM_ccData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetM_ccData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.m_ccData, typedOther.m_ccData);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("NodeData(");
    boolean first = true;

    sb.append("m_sentCnt:");
    sb.append(this.m_sentCnt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("m_sentFailed:");
    sb.append(this.m_sentFailed);
    first = false;
    if (!first) sb.append(", ");
    sb.append("m_retries:");
    sb.append(this.m_retries);
    first = false;
    if (!first) sb.append(", ");
    sb.append("m_receivedCnt:");
    sb.append(this.m_receivedCnt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("m_receivedDups:");
    sb.append(this.m_receivedDups);
    first = false;
    if (!first) sb.append(", ");
    sb.append("m_rtt:");
    sb.append(this.m_rtt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("m_sentTS:");
    if (this.m_sentTS == null) {
      sb.append("null");
    } else {
      sb.append(this.m_sentTS);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("m_receivedTS:");
    if (this.m_receivedTS == null) {
      sb.append("null");
    } else {
      sb.append(this.m_receivedTS);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("m_lastRTT:");
    sb.append(this.m_lastRTT);
    first = false;
    if (!first) sb.append(", ");
    sb.append("m_averageRTT:");
    sb.append(this.m_averageRTT);
    first = false;
    if (!first) sb.append(", ");
    sb.append("m_quality:");
    sb.append(this.m_quality);
    first = false;
    if (!first) sb.append(", ");
    sb.append("m_lastReceivedMessage:");
    if (this.m_lastReceivedMessage == null) {
      sb.append("null");
    } else {
      sb.append(this.m_lastReceivedMessage);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("m_ccData:");
    if (this.m_ccData == null) {
      sb.append("null");
    } else {
      sb.append(this.m_ccData);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class NodeDataStandardSchemeFactory implements SchemeFactory {
    public NodeDataStandardScheme getScheme() {
      return new NodeDataStandardScheme();
    }
  }

  private static class NodeDataStandardScheme extends StandardScheme<NodeData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, NodeData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // M_SENT_CNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.m_sentCnt = iprot.readI32();
              struct.setM_sentCntIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // M_SENT_FAILED
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.m_sentFailed = iprot.readI32();
              struct.setM_sentFailedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // M_RETRIES
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.m_retries = iprot.readI32();
              struct.setM_retriesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // M_RECEIVED_CNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.m_receivedCnt = iprot.readI32();
              struct.setM_receivedCntIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // M_RECEIVED_DUPS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.m_receivedDups = iprot.readI32();
              struct.setM_receivedDupsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // M_RTT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.m_rtt = iprot.readI32();
              struct.setM_rttIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // M_SENT_TS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.m_sentTS = iprot.readString();
              struct.setM_sentTSIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // M_RECEIVED_TS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.m_receivedTS = iprot.readString();
              struct.setM_receivedTSIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // M_LAST_RTT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.m_lastRTT = iprot.readI32();
              struct.setM_lastRTTIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // M_AVERAGE_RTT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.m_averageRTT = iprot.readI32();
              struct.setM_averageRTTIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // M_QUALITY
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.m_quality = iprot.readByte();
              struct.setM_qualityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // M_LAST_RECEIVED_MESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.m_lastReceivedMessage = new ArrayList<Byte>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  byte _elem2; // required
                  _elem2 = iprot.readByte();
                  struct.m_lastReceivedMessage.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setM_lastReceivedMessageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // M_CC_DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.m_ccData = new ArrayList<CommandClassData>(_list3.size);
                for (int _i4 = 0; _i4 < _list3.size; ++_i4)
                {
                  CommandClassData _elem5; // required
                  _elem5 = new CommandClassData();
                  _elem5.read(iprot);
                  struct.m_ccData.add(_elem5);
                }
                iprot.readListEnd();
              }
              struct.setM_ccDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, NodeData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(M_SENT_CNT_FIELD_DESC);
      oprot.writeI32(struct.m_sentCnt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(M_SENT_FAILED_FIELD_DESC);
      oprot.writeI32(struct.m_sentFailed);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(M_RETRIES_FIELD_DESC);
      oprot.writeI32(struct.m_retries);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(M_RECEIVED_CNT_FIELD_DESC);
      oprot.writeI32(struct.m_receivedCnt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(M_RECEIVED_DUPS_FIELD_DESC);
      oprot.writeI32(struct.m_receivedDups);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(M_RTT_FIELD_DESC);
      oprot.writeI32(struct.m_rtt);
      oprot.writeFieldEnd();
      if (struct.m_sentTS != null) {
        oprot.writeFieldBegin(M_SENT_TS_FIELD_DESC);
        oprot.writeString(struct.m_sentTS);
        oprot.writeFieldEnd();
      }
      if (struct.m_receivedTS != null) {
        oprot.writeFieldBegin(M_RECEIVED_TS_FIELD_DESC);
        oprot.writeString(struct.m_receivedTS);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(M_LAST_RTT_FIELD_DESC);
      oprot.writeI32(struct.m_lastRTT);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(M_AVERAGE_RTT_FIELD_DESC);
      oprot.writeI32(struct.m_averageRTT);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(M_QUALITY_FIELD_DESC);
      oprot.writeByte(struct.m_quality);
      oprot.writeFieldEnd();
      if (struct.m_lastReceivedMessage != null) {
        oprot.writeFieldBegin(M_LAST_RECEIVED_MESSAGE_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BYTE, struct.m_lastReceivedMessage.size()));
          for (byte _iter6 : struct.m_lastReceivedMessage)
          {
            oprot.writeByte(_iter6);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.m_ccData != null) {
        oprot.writeFieldBegin(M_CC_DATA_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.m_ccData.size()));
          for (CommandClassData _iter7 : struct.m_ccData)
          {
            _iter7.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class NodeDataTupleSchemeFactory implements SchemeFactory {
    public NodeDataTupleScheme getScheme() {
      return new NodeDataTupleScheme();
    }
  }

  private static class NodeDataTupleScheme extends TupleScheme<NodeData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, NodeData struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetM_sentCnt()) {
        optionals.set(0);
      }
      if (struct.isSetM_sentFailed()) {
        optionals.set(1);
      }
      if (struct.isSetM_retries()) {
        optionals.set(2);
      }
      if (struct.isSetM_receivedCnt()) {
        optionals.set(3);
      }
      if (struct.isSetM_receivedDups()) {
        optionals.set(4);
      }
      if (struct.isSetM_rtt()) {
        optionals.set(5);
      }
      if (struct.isSetM_sentTS()) {
        optionals.set(6);
      }
      if (struct.isSetM_receivedTS()) {
        optionals.set(7);
      }
      if (struct.isSetM_lastRTT()) {
        optionals.set(8);
      }
      if (struct.isSetM_averageRTT()) {
        optionals.set(9);
      }
      if (struct.isSetM_quality()) {
        optionals.set(10);
      }
      if (struct.isSetM_lastReceivedMessage()) {
        optionals.set(11);
      }
      if (struct.isSetM_ccData()) {
        optionals.set(12);
      }
      oprot.writeBitSet(optionals, 13);
      if (struct.isSetM_sentCnt()) {
        oprot.writeI32(struct.m_sentCnt);
      }
      if (struct.isSetM_sentFailed()) {
        oprot.writeI32(struct.m_sentFailed);
      }
      if (struct.isSetM_retries()) {
        oprot.writeI32(struct.m_retries);
      }
      if (struct.isSetM_receivedCnt()) {
        oprot.writeI32(struct.m_receivedCnt);
      }
      if (struct.isSetM_receivedDups()) {
        oprot.writeI32(struct.m_receivedDups);
      }
      if (struct.isSetM_rtt()) {
        oprot.writeI32(struct.m_rtt);
      }
      if (struct.isSetM_sentTS()) {
        oprot.writeString(struct.m_sentTS);
      }
      if (struct.isSetM_receivedTS()) {
        oprot.writeString(struct.m_receivedTS);
      }
      if (struct.isSetM_lastRTT()) {
        oprot.writeI32(struct.m_lastRTT);
      }
      if (struct.isSetM_averageRTT()) {
        oprot.writeI32(struct.m_averageRTT);
      }
      if (struct.isSetM_quality()) {
        oprot.writeByte(struct.m_quality);
      }
      if (struct.isSetM_lastReceivedMessage()) {
        {
          oprot.writeI32(struct.m_lastReceivedMessage.size());
          for (byte _iter8 : struct.m_lastReceivedMessage)
          {
            oprot.writeByte(_iter8);
          }
        }
      }
      if (struct.isSetM_ccData()) {
        {
          oprot.writeI32(struct.m_ccData.size());
          for (CommandClassData _iter9 : struct.m_ccData)
          {
            _iter9.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, NodeData struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(13);
      if (incoming.get(0)) {
        struct.m_sentCnt = iprot.readI32();
        struct.setM_sentCntIsSet(true);
      }
      if (incoming.get(1)) {
        struct.m_sentFailed = iprot.readI32();
        struct.setM_sentFailedIsSet(true);
      }
      if (incoming.get(2)) {
        struct.m_retries = iprot.readI32();
        struct.setM_retriesIsSet(true);
      }
      if (incoming.get(3)) {
        struct.m_receivedCnt = iprot.readI32();
        struct.setM_receivedCntIsSet(true);
      }
      if (incoming.get(4)) {
        struct.m_receivedDups = iprot.readI32();
        struct.setM_receivedDupsIsSet(true);
      }
      if (incoming.get(5)) {
        struct.m_rtt = iprot.readI32();
        struct.setM_rttIsSet(true);
      }
      if (incoming.get(6)) {
        struct.m_sentTS = iprot.readString();
        struct.setM_sentTSIsSet(true);
      }
      if (incoming.get(7)) {
        struct.m_receivedTS = iprot.readString();
        struct.setM_receivedTSIsSet(true);
      }
      if (incoming.get(8)) {
        struct.m_lastRTT = iprot.readI32();
        struct.setM_lastRTTIsSet(true);
      }
      if (incoming.get(9)) {
        struct.m_averageRTT = iprot.readI32();
        struct.setM_averageRTTIsSet(true);
      }
      if (incoming.get(10)) {
        struct.m_quality = iprot.readByte();
        struct.setM_qualityIsSet(true);
      }
      if (incoming.get(11)) {
        {
          org.apache.thrift.protocol.TList _list10 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BYTE, iprot.readI32());
          struct.m_lastReceivedMessage = new ArrayList<Byte>(_list10.size);
          for (int _i11 = 0; _i11 < _list10.size; ++_i11)
          {
            byte _elem12; // required
            _elem12 = iprot.readByte();
            struct.m_lastReceivedMessage.add(_elem12);
          }
        }
        struct.setM_lastReceivedMessageIsSet(true);
      }
      if (incoming.get(12)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.m_ccData = new ArrayList<CommandClassData>(_list13.size);
          for (int _i14 = 0; _i14 < _list13.size; ++_i14)
          {
            CommandClassData _elem15; // required
            _elem15 = new CommandClassData();
            _elem15.read(iprot);
            struct.m_ccData.add(_elem15);
          }
        }
        struct.setM_ccDataIsSet(true);
      }
    }
  }

}

