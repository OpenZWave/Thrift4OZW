/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package OpenZWave;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class DriverData implements org.apache.thrift.TBase<DriverData, DriverData._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DriverData");

  private static final org.apache.thrift.protocol.TField S__SOFCNT_FIELD_DESC = new org.apache.thrift.protocol.TField("s_SOFCnt", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField S__ACKWAITING_FIELD_DESC = new org.apache.thrift.protocol.TField("s_ACKWaiting", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField S_READ_ABORTS_FIELD_DESC = new org.apache.thrift.protocol.TField("s_readAborts", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField S_BAD_CHECKSUM_FIELD_DESC = new org.apache.thrift.protocol.TField("s_badChecksum", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField S_READ_CNT_FIELD_DESC = new org.apache.thrift.protocol.TField("s_readCnt", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField S_WRITE_CNT_FIELD_DESC = new org.apache.thrift.protocol.TField("s_writeCnt", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField S__CANCNT_FIELD_DESC = new org.apache.thrift.protocol.TField("s_CANCnt", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField S__NAKCNT_FIELD_DESC = new org.apache.thrift.protocol.TField("s_NAKCnt", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField S__ACKCNT_FIELD_DESC = new org.apache.thrift.protocol.TField("s_ACKCnt", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField S__OOFCNT_FIELD_DESC = new org.apache.thrift.protocol.TField("s_OOFCnt", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField S_DROPPED_FIELD_DESC = new org.apache.thrift.protocol.TField("s_dropped", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField S_RETRIES_FIELD_DESC = new org.apache.thrift.protocol.TField("s_retries", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField S_CONTROLLER_READ_CNT_FIELD_DESC = new org.apache.thrift.protocol.TField("s_controllerReadCnt", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField S_CONTROLLER_WRITE_CNT_FIELD_DESC = new org.apache.thrift.protocol.TField("s_controllerWriteCnt", org.apache.thrift.protocol.TType.I32, (short)14);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new DriverDataStandardSchemeFactory());
    schemes.put(TupleScheme.class, new DriverDataTupleSchemeFactory());
  }

  public int s_SOFCnt; // required
  public int s_ACKWaiting; // required
  public int s_readAborts; // required
  public int s_badChecksum; // required
  public int s_readCnt; // required
  public int s_writeCnt; // required
  public int s_CANCnt; // required
  public int s_NAKCnt; // required
  public int s_ACKCnt; // required
  public int s_OOFCnt; // required
  public int s_dropped; // required
  public int s_retries; // required
  public int s_controllerReadCnt; // required
  public int s_controllerWriteCnt; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    S__SOFCNT((short)1, "s_SOFCnt"),
    S__ACKWAITING((short)2, "s_ACKWaiting"),
    S_READ_ABORTS((short)3, "s_readAborts"),
    S_BAD_CHECKSUM((short)4, "s_badChecksum"),
    S_READ_CNT((short)5, "s_readCnt"),
    S_WRITE_CNT((short)6, "s_writeCnt"),
    S__CANCNT((short)7, "s_CANCnt"),
    S__NAKCNT((short)8, "s_NAKCnt"),
    S__ACKCNT((short)9, "s_ACKCnt"),
    S__OOFCNT((short)10, "s_OOFCnt"),
    S_DROPPED((short)11, "s_dropped"),
    S_RETRIES((short)12, "s_retries"),
    S_CONTROLLER_READ_CNT((short)13, "s_controllerReadCnt"),
    S_CONTROLLER_WRITE_CNT((short)14, "s_controllerWriteCnt");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // S__SOFCNT
          return S__SOFCNT;
        case 2: // S__ACKWAITING
          return S__ACKWAITING;
        case 3: // S_READ_ABORTS
          return S_READ_ABORTS;
        case 4: // S_BAD_CHECKSUM
          return S_BAD_CHECKSUM;
        case 5: // S_READ_CNT
          return S_READ_CNT;
        case 6: // S_WRITE_CNT
          return S_WRITE_CNT;
        case 7: // S__CANCNT
          return S__CANCNT;
        case 8: // S__NAKCNT
          return S__NAKCNT;
        case 9: // S__ACKCNT
          return S__ACKCNT;
        case 10: // S__OOFCNT
          return S__OOFCNT;
        case 11: // S_DROPPED
          return S_DROPPED;
        case 12: // S_RETRIES
          return S_RETRIES;
        case 13: // S_CONTROLLER_READ_CNT
          return S_CONTROLLER_READ_CNT;
        case 14: // S_CONTROLLER_WRITE_CNT
          return S_CONTROLLER_WRITE_CNT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __S_SOFCNT_ISSET_ID = 0;
  private static final int __S_ACKWAITING_ISSET_ID = 1;
  private static final int __S_READABORTS_ISSET_ID = 2;
  private static final int __S_BADCHECKSUM_ISSET_ID = 3;
  private static final int __S_READCNT_ISSET_ID = 4;
  private static final int __S_WRITECNT_ISSET_ID = 5;
  private static final int __S_CANCNT_ISSET_ID = 6;
  private static final int __S_NAKCNT_ISSET_ID = 7;
  private static final int __S_ACKCNT_ISSET_ID = 8;
  private static final int __S_OOFCNT_ISSET_ID = 9;
  private static final int __S_DROPPED_ISSET_ID = 10;
  private static final int __S_RETRIES_ISSET_ID = 11;
  private static final int __S_CONTROLLERREADCNT_ISSET_ID = 12;
  private static final int __S_CONTROLLERWRITECNT_ISSET_ID = 13;
  private BitSet __isset_bit_vector = new BitSet(14);
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.S__SOFCNT, new org.apache.thrift.meta_data.FieldMetaData("s_SOFCnt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.S__ACKWAITING, new org.apache.thrift.meta_data.FieldMetaData("s_ACKWaiting", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.S_READ_ABORTS, new org.apache.thrift.meta_data.FieldMetaData("s_readAborts", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.S_BAD_CHECKSUM, new org.apache.thrift.meta_data.FieldMetaData("s_badChecksum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.S_READ_CNT, new org.apache.thrift.meta_data.FieldMetaData("s_readCnt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.S_WRITE_CNT, new org.apache.thrift.meta_data.FieldMetaData("s_writeCnt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.S__CANCNT, new org.apache.thrift.meta_data.FieldMetaData("s_CANCnt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.S__NAKCNT, new org.apache.thrift.meta_data.FieldMetaData("s_NAKCnt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.S__ACKCNT, new org.apache.thrift.meta_data.FieldMetaData("s_ACKCnt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.S__OOFCNT, new org.apache.thrift.meta_data.FieldMetaData("s_OOFCnt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.S_DROPPED, new org.apache.thrift.meta_data.FieldMetaData("s_dropped", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.S_RETRIES, new org.apache.thrift.meta_data.FieldMetaData("s_retries", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.S_CONTROLLER_READ_CNT, new org.apache.thrift.meta_data.FieldMetaData("s_controllerReadCnt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.S_CONTROLLER_WRITE_CNT, new org.apache.thrift.meta_data.FieldMetaData("s_controllerWriteCnt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DriverData.class, metaDataMap);
  }

  public DriverData() {
  }

  public DriverData(
    int s_SOFCnt,
    int s_ACKWaiting,
    int s_readAborts,
    int s_badChecksum,
    int s_readCnt,
    int s_writeCnt,
    int s_CANCnt,
    int s_NAKCnt,
    int s_ACKCnt,
    int s_OOFCnt,
    int s_dropped,
    int s_retries,
    int s_controllerReadCnt,
    int s_controllerWriteCnt)
  {
    this();
    this.s_SOFCnt = s_SOFCnt;
    setS_SOFCntIsSet(true);
    this.s_ACKWaiting = s_ACKWaiting;
    setS_ACKWaitingIsSet(true);
    this.s_readAborts = s_readAborts;
    setS_readAbortsIsSet(true);
    this.s_badChecksum = s_badChecksum;
    setS_badChecksumIsSet(true);
    this.s_readCnt = s_readCnt;
    setS_readCntIsSet(true);
    this.s_writeCnt = s_writeCnt;
    setS_writeCntIsSet(true);
    this.s_CANCnt = s_CANCnt;
    setS_CANCntIsSet(true);
    this.s_NAKCnt = s_NAKCnt;
    setS_NAKCntIsSet(true);
    this.s_ACKCnt = s_ACKCnt;
    setS_ACKCntIsSet(true);
    this.s_OOFCnt = s_OOFCnt;
    setS_OOFCntIsSet(true);
    this.s_dropped = s_dropped;
    setS_droppedIsSet(true);
    this.s_retries = s_retries;
    setS_retriesIsSet(true);
    this.s_controllerReadCnt = s_controllerReadCnt;
    setS_controllerReadCntIsSet(true);
    this.s_controllerWriteCnt = s_controllerWriteCnt;
    setS_controllerWriteCntIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DriverData(DriverData other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.s_SOFCnt = other.s_SOFCnt;
    this.s_ACKWaiting = other.s_ACKWaiting;
    this.s_readAborts = other.s_readAborts;
    this.s_badChecksum = other.s_badChecksum;
    this.s_readCnt = other.s_readCnt;
    this.s_writeCnt = other.s_writeCnt;
    this.s_CANCnt = other.s_CANCnt;
    this.s_NAKCnt = other.s_NAKCnt;
    this.s_ACKCnt = other.s_ACKCnt;
    this.s_OOFCnt = other.s_OOFCnt;
    this.s_dropped = other.s_dropped;
    this.s_retries = other.s_retries;
    this.s_controllerReadCnt = other.s_controllerReadCnt;
    this.s_controllerWriteCnt = other.s_controllerWriteCnt;
  }

  public DriverData deepCopy() {
    return new DriverData(this);
  }

  @Override
  public void clear() {
    setS_SOFCntIsSet(false);
    this.s_SOFCnt = 0;
    setS_ACKWaitingIsSet(false);
    this.s_ACKWaiting = 0;
    setS_readAbortsIsSet(false);
    this.s_readAborts = 0;
    setS_badChecksumIsSet(false);
    this.s_badChecksum = 0;
    setS_readCntIsSet(false);
    this.s_readCnt = 0;
    setS_writeCntIsSet(false);
    this.s_writeCnt = 0;
    setS_CANCntIsSet(false);
    this.s_CANCnt = 0;
    setS_NAKCntIsSet(false);
    this.s_NAKCnt = 0;
    setS_ACKCntIsSet(false);
    this.s_ACKCnt = 0;
    setS_OOFCntIsSet(false);
    this.s_OOFCnt = 0;
    setS_droppedIsSet(false);
    this.s_dropped = 0;
    setS_retriesIsSet(false);
    this.s_retries = 0;
    setS_controllerReadCntIsSet(false);
    this.s_controllerReadCnt = 0;
    setS_controllerWriteCntIsSet(false);
    this.s_controllerWriteCnt = 0;
  }

  public int getS_SOFCnt() {
    return this.s_SOFCnt;
  }

  public DriverData setS_SOFCnt(int s_SOFCnt) {
    this.s_SOFCnt = s_SOFCnt;
    setS_SOFCntIsSet(true);
    return this;
  }

  public void unsetS_SOFCnt() {
    __isset_bit_vector.clear(__S_SOFCNT_ISSET_ID);
  }

  /** Returns true if field s_SOFCnt is set (has been assigned a value) and false otherwise */
  public boolean isSetS_SOFCnt() {
    return __isset_bit_vector.get(__S_SOFCNT_ISSET_ID);
  }

  public void setS_SOFCntIsSet(boolean value) {
    __isset_bit_vector.set(__S_SOFCNT_ISSET_ID, value);
  }

  public int getS_ACKWaiting() {
    return this.s_ACKWaiting;
  }

  public DriverData setS_ACKWaiting(int s_ACKWaiting) {
    this.s_ACKWaiting = s_ACKWaiting;
    setS_ACKWaitingIsSet(true);
    return this;
  }

  public void unsetS_ACKWaiting() {
    __isset_bit_vector.clear(__S_ACKWAITING_ISSET_ID);
  }

  /** Returns true if field s_ACKWaiting is set (has been assigned a value) and false otherwise */
  public boolean isSetS_ACKWaiting() {
    return __isset_bit_vector.get(__S_ACKWAITING_ISSET_ID);
  }

  public void setS_ACKWaitingIsSet(boolean value) {
    __isset_bit_vector.set(__S_ACKWAITING_ISSET_ID, value);
  }

  public int getS_readAborts() {
    return this.s_readAborts;
  }

  public DriverData setS_readAborts(int s_readAborts) {
    this.s_readAborts = s_readAborts;
    setS_readAbortsIsSet(true);
    return this;
  }

  public void unsetS_readAborts() {
    __isset_bit_vector.clear(__S_READABORTS_ISSET_ID);
  }

  /** Returns true if field s_readAborts is set (has been assigned a value) and false otherwise */
  public boolean isSetS_readAborts() {
    return __isset_bit_vector.get(__S_READABORTS_ISSET_ID);
  }

  public void setS_readAbortsIsSet(boolean value) {
    __isset_bit_vector.set(__S_READABORTS_ISSET_ID, value);
  }

  public int getS_badChecksum() {
    return this.s_badChecksum;
  }

  public DriverData setS_badChecksum(int s_badChecksum) {
    this.s_badChecksum = s_badChecksum;
    setS_badChecksumIsSet(true);
    return this;
  }

  public void unsetS_badChecksum() {
    __isset_bit_vector.clear(__S_BADCHECKSUM_ISSET_ID);
  }

  /** Returns true if field s_badChecksum is set (has been assigned a value) and false otherwise */
  public boolean isSetS_badChecksum() {
    return __isset_bit_vector.get(__S_BADCHECKSUM_ISSET_ID);
  }

  public void setS_badChecksumIsSet(boolean value) {
    __isset_bit_vector.set(__S_BADCHECKSUM_ISSET_ID, value);
  }

  public int getS_readCnt() {
    return this.s_readCnt;
  }

  public DriverData setS_readCnt(int s_readCnt) {
    this.s_readCnt = s_readCnt;
    setS_readCntIsSet(true);
    return this;
  }

  public void unsetS_readCnt() {
    __isset_bit_vector.clear(__S_READCNT_ISSET_ID);
  }

  /** Returns true if field s_readCnt is set (has been assigned a value) and false otherwise */
  public boolean isSetS_readCnt() {
    return __isset_bit_vector.get(__S_READCNT_ISSET_ID);
  }

  public void setS_readCntIsSet(boolean value) {
    __isset_bit_vector.set(__S_READCNT_ISSET_ID, value);
  }

  public int getS_writeCnt() {
    return this.s_writeCnt;
  }

  public DriverData setS_writeCnt(int s_writeCnt) {
    this.s_writeCnt = s_writeCnt;
    setS_writeCntIsSet(true);
    return this;
  }

  public void unsetS_writeCnt() {
    __isset_bit_vector.clear(__S_WRITECNT_ISSET_ID);
  }

  /** Returns true if field s_writeCnt is set (has been assigned a value) and false otherwise */
  public boolean isSetS_writeCnt() {
    return __isset_bit_vector.get(__S_WRITECNT_ISSET_ID);
  }

  public void setS_writeCntIsSet(boolean value) {
    __isset_bit_vector.set(__S_WRITECNT_ISSET_ID, value);
  }

  public int getS_CANCnt() {
    return this.s_CANCnt;
  }

  public DriverData setS_CANCnt(int s_CANCnt) {
    this.s_CANCnt = s_CANCnt;
    setS_CANCntIsSet(true);
    return this;
  }

  public void unsetS_CANCnt() {
    __isset_bit_vector.clear(__S_CANCNT_ISSET_ID);
  }

  /** Returns true if field s_CANCnt is set (has been assigned a value) and false otherwise */
  public boolean isSetS_CANCnt() {
    return __isset_bit_vector.get(__S_CANCNT_ISSET_ID);
  }

  public void setS_CANCntIsSet(boolean value) {
    __isset_bit_vector.set(__S_CANCNT_ISSET_ID, value);
  }

  public int getS_NAKCnt() {
    return this.s_NAKCnt;
  }

  public DriverData setS_NAKCnt(int s_NAKCnt) {
    this.s_NAKCnt = s_NAKCnt;
    setS_NAKCntIsSet(true);
    return this;
  }

  public void unsetS_NAKCnt() {
    __isset_bit_vector.clear(__S_NAKCNT_ISSET_ID);
  }

  /** Returns true if field s_NAKCnt is set (has been assigned a value) and false otherwise */
  public boolean isSetS_NAKCnt() {
    return __isset_bit_vector.get(__S_NAKCNT_ISSET_ID);
  }

  public void setS_NAKCntIsSet(boolean value) {
    __isset_bit_vector.set(__S_NAKCNT_ISSET_ID, value);
  }

  public int getS_ACKCnt() {
    return this.s_ACKCnt;
  }

  public DriverData setS_ACKCnt(int s_ACKCnt) {
    this.s_ACKCnt = s_ACKCnt;
    setS_ACKCntIsSet(true);
    return this;
  }

  public void unsetS_ACKCnt() {
    __isset_bit_vector.clear(__S_ACKCNT_ISSET_ID);
  }

  /** Returns true if field s_ACKCnt is set (has been assigned a value) and false otherwise */
  public boolean isSetS_ACKCnt() {
    return __isset_bit_vector.get(__S_ACKCNT_ISSET_ID);
  }

  public void setS_ACKCntIsSet(boolean value) {
    __isset_bit_vector.set(__S_ACKCNT_ISSET_ID, value);
  }

  public int getS_OOFCnt() {
    return this.s_OOFCnt;
  }

  public DriverData setS_OOFCnt(int s_OOFCnt) {
    this.s_OOFCnt = s_OOFCnt;
    setS_OOFCntIsSet(true);
    return this;
  }

  public void unsetS_OOFCnt() {
    __isset_bit_vector.clear(__S_OOFCNT_ISSET_ID);
  }

  /** Returns true if field s_OOFCnt is set (has been assigned a value) and false otherwise */
  public boolean isSetS_OOFCnt() {
    return __isset_bit_vector.get(__S_OOFCNT_ISSET_ID);
  }

  public void setS_OOFCntIsSet(boolean value) {
    __isset_bit_vector.set(__S_OOFCNT_ISSET_ID, value);
  }

  public int getS_dropped() {
    return this.s_dropped;
  }

  public DriverData setS_dropped(int s_dropped) {
    this.s_dropped = s_dropped;
    setS_droppedIsSet(true);
    return this;
  }

  public void unsetS_dropped() {
    __isset_bit_vector.clear(__S_DROPPED_ISSET_ID);
  }

  /** Returns true if field s_dropped is set (has been assigned a value) and false otherwise */
  public boolean isSetS_dropped() {
    return __isset_bit_vector.get(__S_DROPPED_ISSET_ID);
  }

  public void setS_droppedIsSet(boolean value) {
    __isset_bit_vector.set(__S_DROPPED_ISSET_ID, value);
  }

  public int getS_retries() {
    return this.s_retries;
  }

  public DriverData setS_retries(int s_retries) {
    this.s_retries = s_retries;
    setS_retriesIsSet(true);
    return this;
  }

  public void unsetS_retries() {
    __isset_bit_vector.clear(__S_RETRIES_ISSET_ID);
  }

  /** Returns true if field s_retries is set (has been assigned a value) and false otherwise */
  public boolean isSetS_retries() {
    return __isset_bit_vector.get(__S_RETRIES_ISSET_ID);
  }

  public void setS_retriesIsSet(boolean value) {
    __isset_bit_vector.set(__S_RETRIES_ISSET_ID, value);
  }

  public int getS_controllerReadCnt() {
    return this.s_controllerReadCnt;
  }

  public DriverData setS_controllerReadCnt(int s_controllerReadCnt) {
    this.s_controllerReadCnt = s_controllerReadCnt;
    setS_controllerReadCntIsSet(true);
    return this;
  }

  public void unsetS_controllerReadCnt() {
    __isset_bit_vector.clear(__S_CONTROLLERREADCNT_ISSET_ID);
  }

  /** Returns true if field s_controllerReadCnt is set (has been assigned a value) and false otherwise */
  public boolean isSetS_controllerReadCnt() {
    return __isset_bit_vector.get(__S_CONTROLLERREADCNT_ISSET_ID);
  }

  public void setS_controllerReadCntIsSet(boolean value) {
    __isset_bit_vector.set(__S_CONTROLLERREADCNT_ISSET_ID, value);
  }

  public int getS_controllerWriteCnt() {
    return this.s_controllerWriteCnt;
  }

  public DriverData setS_controllerWriteCnt(int s_controllerWriteCnt) {
    this.s_controllerWriteCnt = s_controllerWriteCnt;
    setS_controllerWriteCntIsSet(true);
    return this;
  }

  public void unsetS_controllerWriteCnt() {
    __isset_bit_vector.clear(__S_CONTROLLERWRITECNT_ISSET_ID);
  }

  /** Returns true if field s_controllerWriteCnt is set (has been assigned a value) and false otherwise */
  public boolean isSetS_controllerWriteCnt() {
    return __isset_bit_vector.get(__S_CONTROLLERWRITECNT_ISSET_ID);
  }

  public void setS_controllerWriteCntIsSet(boolean value) {
    __isset_bit_vector.set(__S_CONTROLLERWRITECNT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case S__SOFCNT:
      if (value == null) {
        unsetS_SOFCnt();
      } else {
        setS_SOFCnt((Integer)value);
      }
      break;

    case S__ACKWAITING:
      if (value == null) {
        unsetS_ACKWaiting();
      } else {
        setS_ACKWaiting((Integer)value);
      }
      break;

    case S_READ_ABORTS:
      if (value == null) {
        unsetS_readAborts();
      } else {
        setS_readAborts((Integer)value);
      }
      break;

    case S_BAD_CHECKSUM:
      if (value == null) {
        unsetS_badChecksum();
      } else {
        setS_badChecksum((Integer)value);
      }
      break;

    case S_READ_CNT:
      if (value == null) {
        unsetS_readCnt();
      } else {
        setS_readCnt((Integer)value);
      }
      break;

    case S_WRITE_CNT:
      if (value == null) {
        unsetS_writeCnt();
      } else {
        setS_writeCnt((Integer)value);
      }
      break;

    case S__CANCNT:
      if (value == null) {
        unsetS_CANCnt();
      } else {
        setS_CANCnt((Integer)value);
      }
      break;

    case S__NAKCNT:
      if (value == null) {
        unsetS_NAKCnt();
      } else {
        setS_NAKCnt((Integer)value);
      }
      break;

    case S__ACKCNT:
      if (value == null) {
        unsetS_ACKCnt();
      } else {
        setS_ACKCnt((Integer)value);
      }
      break;

    case S__OOFCNT:
      if (value == null) {
        unsetS_OOFCnt();
      } else {
        setS_OOFCnt((Integer)value);
      }
      break;

    case S_DROPPED:
      if (value == null) {
        unsetS_dropped();
      } else {
        setS_dropped((Integer)value);
      }
      break;

    case S_RETRIES:
      if (value == null) {
        unsetS_retries();
      } else {
        setS_retries((Integer)value);
      }
      break;

    case S_CONTROLLER_READ_CNT:
      if (value == null) {
        unsetS_controllerReadCnt();
      } else {
        setS_controllerReadCnt((Integer)value);
      }
      break;

    case S_CONTROLLER_WRITE_CNT:
      if (value == null) {
        unsetS_controllerWriteCnt();
      } else {
        setS_controllerWriteCnt((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case S__SOFCNT:
      return Integer.valueOf(getS_SOFCnt());

    case S__ACKWAITING:
      return Integer.valueOf(getS_ACKWaiting());

    case S_READ_ABORTS:
      return Integer.valueOf(getS_readAborts());

    case S_BAD_CHECKSUM:
      return Integer.valueOf(getS_badChecksum());

    case S_READ_CNT:
      return Integer.valueOf(getS_readCnt());

    case S_WRITE_CNT:
      return Integer.valueOf(getS_writeCnt());

    case S__CANCNT:
      return Integer.valueOf(getS_CANCnt());

    case S__NAKCNT:
      return Integer.valueOf(getS_NAKCnt());

    case S__ACKCNT:
      return Integer.valueOf(getS_ACKCnt());

    case S__OOFCNT:
      return Integer.valueOf(getS_OOFCnt());

    case S_DROPPED:
      return Integer.valueOf(getS_dropped());

    case S_RETRIES:
      return Integer.valueOf(getS_retries());

    case S_CONTROLLER_READ_CNT:
      return Integer.valueOf(getS_controllerReadCnt());

    case S_CONTROLLER_WRITE_CNT:
      return Integer.valueOf(getS_controllerWriteCnt());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case S__SOFCNT:
      return isSetS_SOFCnt();
    case S__ACKWAITING:
      return isSetS_ACKWaiting();
    case S_READ_ABORTS:
      return isSetS_readAborts();
    case S_BAD_CHECKSUM:
      return isSetS_badChecksum();
    case S_READ_CNT:
      return isSetS_readCnt();
    case S_WRITE_CNT:
      return isSetS_writeCnt();
    case S__CANCNT:
      return isSetS_CANCnt();
    case S__NAKCNT:
      return isSetS_NAKCnt();
    case S__ACKCNT:
      return isSetS_ACKCnt();
    case S__OOFCNT:
      return isSetS_OOFCnt();
    case S_DROPPED:
      return isSetS_dropped();
    case S_RETRIES:
      return isSetS_retries();
    case S_CONTROLLER_READ_CNT:
      return isSetS_controllerReadCnt();
    case S_CONTROLLER_WRITE_CNT:
      return isSetS_controllerWriteCnt();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DriverData)
      return this.equals((DriverData)that);
    return false;
  }

  public boolean equals(DriverData that) {
    if (that == null)
      return false;

    boolean this_present_s_SOFCnt = true;
    boolean that_present_s_SOFCnt = true;
    if (this_present_s_SOFCnt || that_present_s_SOFCnt) {
      if (!(this_present_s_SOFCnt && that_present_s_SOFCnt))
        return false;
      if (this.s_SOFCnt != that.s_SOFCnt)
        return false;
    }

    boolean this_present_s_ACKWaiting = true;
    boolean that_present_s_ACKWaiting = true;
    if (this_present_s_ACKWaiting || that_present_s_ACKWaiting) {
      if (!(this_present_s_ACKWaiting && that_present_s_ACKWaiting))
        return false;
      if (this.s_ACKWaiting != that.s_ACKWaiting)
        return false;
    }

    boolean this_present_s_readAborts = true;
    boolean that_present_s_readAborts = true;
    if (this_present_s_readAborts || that_present_s_readAborts) {
      if (!(this_present_s_readAborts && that_present_s_readAborts))
        return false;
      if (this.s_readAborts != that.s_readAborts)
        return false;
    }

    boolean this_present_s_badChecksum = true;
    boolean that_present_s_badChecksum = true;
    if (this_present_s_badChecksum || that_present_s_badChecksum) {
      if (!(this_present_s_badChecksum && that_present_s_badChecksum))
        return false;
      if (this.s_badChecksum != that.s_badChecksum)
        return false;
    }

    boolean this_present_s_readCnt = true;
    boolean that_present_s_readCnt = true;
    if (this_present_s_readCnt || that_present_s_readCnt) {
      if (!(this_present_s_readCnt && that_present_s_readCnt))
        return false;
      if (this.s_readCnt != that.s_readCnt)
        return false;
    }

    boolean this_present_s_writeCnt = true;
    boolean that_present_s_writeCnt = true;
    if (this_present_s_writeCnt || that_present_s_writeCnt) {
      if (!(this_present_s_writeCnt && that_present_s_writeCnt))
        return false;
      if (this.s_writeCnt != that.s_writeCnt)
        return false;
    }

    boolean this_present_s_CANCnt = true;
    boolean that_present_s_CANCnt = true;
    if (this_present_s_CANCnt || that_present_s_CANCnt) {
      if (!(this_present_s_CANCnt && that_present_s_CANCnt))
        return false;
      if (this.s_CANCnt != that.s_CANCnt)
        return false;
    }

    boolean this_present_s_NAKCnt = true;
    boolean that_present_s_NAKCnt = true;
    if (this_present_s_NAKCnt || that_present_s_NAKCnt) {
      if (!(this_present_s_NAKCnt && that_present_s_NAKCnt))
        return false;
      if (this.s_NAKCnt != that.s_NAKCnt)
        return false;
    }

    boolean this_present_s_ACKCnt = true;
    boolean that_present_s_ACKCnt = true;
    if (this_present_s_ACKCnt || that_present_s_ACKCnt) {
      if (!(this_present_s_ACKCnt && that_present_s_ACKCnt))
        return false;
      if (this.s_ACKCnt != that.s_ACKCnt)
        return false;
    }

    boolean this_present_s_OOFCnt = true;
    boolean that_present_s_OOFCnt = true;
    if (this_present_s_OOFCnt || that_present_s_OOFCnt) {
      if (!(this_present_s_OOFCnt && that_present_s_OOFCnt))
        return false;
      if (this.s_OOFCnt != that.s_OOFCnt)
        return false;
    }

    boolean this_present_s_dropped = true;
    boolean that_present_s_dropped = true;
    if (this_present_s_dropped || that_present_s_dropped) {
      if (!(this_present_s_dropped && that_present_s_dropped))
        return false;
      if (this.s_dropped != that.s_dropped)
        return false;
    }

    boolean this_present_s_retries = true;
    boolean that_present_s_retries = true;
    if (this_present_s_retries || that_present_s_retries) {
      if (!(this_present_s_retries && that_present_s_retries))
        return false;
      if (this.s_retries != that.s_retries)
        return false;
    }

    boolean this_present_s_controllerReadCnt = true;
    boolean that_present_s_controllerReadCnt = true;
    if (this_present_s_controllerReadCnt || that_present_s_controllerReadCnt) {
      if (!(this_present_s_controllerReadCnt && that_present_s_controllerReadCnt))
        return false;
      if (this.s_controllerReadCnt != that.s_controllerReadCnt)
        return false;
    }

    boolean this_present_s_controllerWriteCnt = true;
    boolean that_present_s_controllerWriteCnt = true;
    if (this_present_s_controllerWriteCnt || that_present_s_controllerWriteCnt) {
      if (!(this_present_s_controllerWriteCnt && that_present_s_controllerWriteCnt))
        return false;
      if (this.s_controllerWriteCnt != that.s_controllerWriteCnt)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(DriverData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    DriverData typedOther = (DriverData)other;

    lastComparison = Boolean.valueOf(isSetS_SOFCnt()).compareTo(typedOther.isSetS_SOFCnt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetS_SOFCnt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.s_SOFCnt, typedOther.s_SOFCnt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetS_ACKWaiting()).compareTo(typedOther.isSetS_ACKWaiting());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetS_ACKWaiting()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.s_ACKWaiting, typedOther.s_ACKWaiting);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetS_readAborts()).compareTo(typedOther.isSetS_readAborts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetS_readAborts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.s_readAborts, typedOther.s_readAborts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetS_badChecksum()).compareTo(typedOther.isSetS_badChecksum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetS_badChecksum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.s_badChecksum, typedOther.s_badChecksum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetS_readCnt()).compareTo(typedOther.isSetS_readCnt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetS_readCnt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.s_readCnt, typedOther.s_readCnt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetS_writeCnt()).compareTo(typedOther.isSetS_writeCnt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetS_writeCnt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.s_writeCnt, typedOther.s_writeCnt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetS_CANCnt()).compareTo(typedOther.isSetS_CANCnt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetS_CANCnt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.s_CANCnt, typedOther.s_CANCnt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetS_NAKCnt()).compareTo(typedOther.isSetS_NAKCnt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetS_NAKCnt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.s_NAKCnt, typedOther.s_NAKCnt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetS_ACKCnt()).compareTo(typedOther.isSetS_ACKCnt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetS_ACKCnt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.s_ACKCnt, typedOther.s_ACKCnt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetS_OOFCnt()).compareTo(typedOther.isSetS_OOFCnt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetS_OOFCnt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.s_OOFCnt, typedOther.s_OOFCnt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetS_dropped()).compareTo(typedOther.isSetS_dropped());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetS_dropped()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.s_dropped, typedOther.s_dropped);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetS_retries()).compareTo(typedOther.isSetS_retries());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetS_retries()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.s_retries, typedOther.s_retries);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetS_controllerReadCnt()).compareTo(typedOther.isSetS_controllerReadCnt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetS_controllerReadCnt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.s_controllerReadCnt, typedOther.s_controllerReadCnt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetS_controllerWriteCnt()).compareTo(typedOther.isSetS_controllerWriteCnt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetS_controllerWriteCnt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.s_controllerWriteCnt, typedOther.s_controllerWriteCnt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DriverData(");
    boolean first = true;

    sb.append("s_SOFCnt:");
    sb.append(this.s_SOFCnt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("s_ACKWaiting:");
    sb.append(this.s_ACKWaiting);
    first = false;
    if (!first) sb.append(", ");
    sb.append("s_readAborts:");
    sb.append(this.s_readAborts);
    first = false;
    if (!first) sb.append(", ");
    sb.append("s_badChecksum:");
    sb.append(this.s_badChecksum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("s_readCnt:");
    sb.append(this.s_readCnt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("s_writeCnt:");
    sb.append(this.s_writeCnt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("s_CANCnt:");
    sb.append(this.s_CANCnt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("s_NAKCnt:");
    sb.append(this.s_NAKCnt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("s_ACKCnt:");
    sb.append(this.s_ACKCnt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("s_OOFCnt:");
    sb.append(this.s_OOFCnt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("s_dropped:");
    sb.append(this.s_dropped);
    first = false;
    if (!first) sb.append(", ");
    sb.append("s_retries:");
    sb.append(this.s_retries);
    first = false;
    if (!first) sb.append(", ");
    sb.append("s_controllerReadCnt:");
    sb.append(this.s_controllerReadCnt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("s_controllerWriteCnt:");
    sb.append(this.s_controllerWriteCnt);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DriverDataStandardSchemeFactory implements SchemeFactory {
    public DriverDataStandardScheme getScheme() {
      return new DriverDataStandardScheme();
    }
  }

  private static class DriverDataStandardScheme extends StandardScheme<DriverData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DriverData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // S__SOFCNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.s_SOFCnt = iprot.readI32();
              struct.setS_SOFCntIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // S__ACKWAITING
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.s_ACKWaiting = iprot.readI32();
              struct.setS_ACKWaitingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // S_READ_ABORTS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.s_readAborts = iprot.readI32();
              struct.setS_readAbortsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // S_BAD_CHECKSUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.s_badChecksum = iprot.readI32();
              struct.setS_badChecksumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // S_READ_CNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.s_readCnt = iprot.readI32();
              struct.setS_readCntIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // S_WRITE_CNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.s_writeCnt = iprot.readI32();
              struct.setS_writeCntIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // S__CANCNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.s_CANCnt = iprot.readI32();
              struct.setS_CANCntIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // S__NAKCNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.s_NAKCnt = iprot.readI32();
              struct.setS_NAKCntIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // S__ACKCNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.s_ACKCnt = iprot.readI32();
              struct.setS_ACKCntIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // S__OOFCNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.s_OOFCnt = iprot.readI32();
              struct.setS_OOFCntIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // S_DROPPED
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.s_dropped = iprot.readI32();
              struct.setS_droppedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // S_RETRIES
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.s_retries = iprot.readI32();
              struct.setS_retriesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // S_CONTROLLER_READ_CNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.s_controllerReadCnt = iprot.readI32();
              struct.setS_controllerReadCntIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // S_CONTROLLER_WRITE_CNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.s_controllerWriteCnt = iprot.readI32();
              struct.setS_controllerWriteCntIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DriverData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(S__SOFCNT_FIELD_DESC);
      oprot.writeI32(struct.s_SOFCnt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(S__ACKWAITING_FIELD_DESC);
      oprot.writeI32(struct.s_ACKWaiting);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(S_READ_ABORTS_FIELD_DESC);
      oprot.writeI32(struct.s_readAborts);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(S_BAD_CHECKSUM_FIELD_DESC);
      oprot.writeI32(struct.s_badChecksum);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(S_READ_CNT_FIELD_DESC);
      oprot.writeI32(struct.s_readCnt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(S_WRITE_CNT_FIELD_DESC);
      oprot.writeI32(struct.s_writeCnt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(S__CANCNT_FIELD_DESC);
      oprot.writeI32(struct.s_CANCnt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(S__NAKCNT_FIELD_DESC);
      oprot.writeI32(struct.s_NAKCnt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(S__ACKCNT_FIELD_DESC);
      oprot.writeI32(struct.s_ACKCnt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(S__OOFCNT_FIELD_DESC);
      oprot.writeI32(struct.s_OOFCnt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(S_DROPPED_FIELD_DESC);
      oprot.writeI32(struct.s_dropped);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(S_RETRIES_FIELD_DESC);
      oprot.writeI32(struct.s_retries);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(S_CONTROLLER_READ_CNT_FIELD_DESC);
      oprot.writeI32(struct.s_controllerReadCnt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(S_CONTROLLER_WRITE_CNT_FIELD_DESC);
      oprot.writeI32(struct.s_controllerWriteCnt);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DriverDataTupleSchemeFactory implements SchemeFactory {
    public DriverDataTupleScheme getScheme() {
      return new DriverDataTupleScheme();
    }
  }

  private static class DriverDataTupleScheme extends TupleScheme<DriverData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DriverData struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetS_SOFCnt()) {
        optionals.set(0);
      }
      if (struct.isSetS_ACKWaiting()) {
        optionals.set(1);
      }
      if (struct.isSetS_readAborts()) {
        optionals.set(2);
      }
      if (struct.isSetS_badChecksum()) {
        optionals.set(3);
      }
      if (struct.isSetS_readCnt()) {
        optionals.set(4);
      }
      if (struct.isSetS_writeCnt()) {
        optionals.set(5);
      }
      if (struct.isSetS_CANCnt()) {
        optionals.set(6);
      }
      if (struct.isSetS_NAKCnt()) {
        optionals.set(7);
      }
      if (struct.isSetS_ACKCnt()) {
        optionals.set(8);
      }
      if (struct.isSetS_OOFCnt()) {
        optionals.set(9);
      }
      if (struct.isSetS_dropped()) {
        optionals.set(10);
      }
      if (struct.isSetS_retries()) {
        optionals.set(11);
      }
      if (struct.isSetS_controllerReadCnt()) {
        optionals.set(12);
      }
      if (struct.isSetS_controllerWriteCnt()) {
        optionals.set(13);
      }
      oprot.writeBitSet(optionals, 14);
      if (struct.isSetS_SOFCnt()) {
        oprot.writeI32(struct.s_SOFCnt);
      }
      if (struct.isSetS_ACKWaiting()) {
        oprot.writeI32(struct.s_ACKWaiting);
      }
      if (struct.isSetS_readAborts()) {
        oprot.writeI32(struct.s_readAborts);
      }
      if (struct.isSetS_badChecksum()) {
        oprot.writeI32(struct.s_badChecksum);
      }
      if (struct.isSetS_readCnt()) {
        oprot.writeI32(struct.s_readCnt);
      }
      if (struct.isSetS_writeCnt()) {
        oprot.writeI32(struct.s_writeCnt);
      }
      if (struct.isSetS_CANCnt()) {
        oprot.writeI32(struct.s_CANCnt);
      }
      if (struct.isSetS_NAKCnt()) {
        oprot.writeI32(struct.s_NAKCnt);
      }
      if (struct.isSetS_ACKCnt()) {
        oprot.writeI32(struct.s_ACKCnt);
      }
      if (struct.isSetS_OOFCnt()) {
        oprot.writeI32(struct.s_OOFCnt);
      }
      if (struct.isSetS_dropped()) {
        oprot.writeI32(struct.s_dropped);
      }
      if (struct.isSetS_retries()) {
        oprot.writeI32(struct.s_retries);
      }
      if (struct.isSetS_controllerReadCnt()) {
        oprot.writeI32(struct.s_controllerReadCnt);
      }
      if (struct.isSetS_controllerWriteCnt()) {
        oprot.writeI32(struct.s_controllerWriteCnt);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DriverData struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(14);
      if (incoming.get(0)) {
        struct.s_SOFCnt = iprot.readI32();
        struct.setS_SOFCntIsSet(true);
      }
      if (incoming.get(1)) {
        struct.s_ACKWaiting = iprot.readI32();
        struct.setS_ACKWaitingIsSet(true);
      }
      if (incoming.get(2)) {
        struct.s_readAborts = iprot.readI32();
        struct.setS_readAbortsIsSet(true);
      }
      if (incoming.get(3)) {
        struct.s_badChecksum = iprot.readI32();
        struct.setS_badChecksumIsSet(true);
      }
      if (incoming.get(4)) {
        struct.s_readCnt = iprot.readI32();
        struct.setS_readCntIsSet(true);
      }
      if (incoming.get(5)) {
        struct.s_writeCnt = iprot.readI32();
        struct.setS_writeCntIsSet(true);
      }
      if (incoming.get(6)) {
        struct.s_CANCnt = iprot.readI32();
        struct.setS_CANCntIsSet(true);
      }
      if (incoming.get(7)) {
        struct.s_NAKCnt = iprot.readI32();
        struct.setS_NAKCntIsSet(true);
      }
      if (incoming.get(8)) {
        struct.s_ACKCnt = iprot.readI32();
        struct.setS_ACKCntIsSet(true);
      }
      if (incoming.get(9)) {
        struct.s_OOFCnt = iprot.readI32();
        struct.setS_OOFCntIsSet(true);
      }
      if (incoming.get(10)) {
        struct.s_dropped = iprot.readI32();
        struct.setS_droppedIsSet(true);
      }
      if (incoming.get(11)) {
        struct.s_retries = iprot.readI32();
        struct.setS_retriesIsSet(true);
      }
      if (incoming.get(12)) {
        struct.s_controllerReadCnt = iprot.readI32();
        struct.setS_controllerReadCntIsSet(true);
      }
      if (incoming.get(13)) {
        struct.s_controllerWriteCnt = iprot.readI32();
        struct.setS_controllerWriteCntIsSet(true);
      }
    }
  }

}

