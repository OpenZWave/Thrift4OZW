/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package OpenZWave;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CommandClassData implements org.apache.thrift.TBase<CommandClassData, CommandClassData._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CommandClassData");

  private static final org.apache.thrift.protocol.TField M_COMMAND_CLASS_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("m_commandClassId", org.apache.thrift.protocol.TType.BYTE, (short)1);
  private static final org.apache.thrift.protocol.TField M_SENT_CNT_FIELD_DESC = new org.apache.thrift.protocol.TField("m_sentCnt", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField M_RECEIVED_CNT_FIELD_DESC = new org.apache.thrift.protocol.TField("m_receivedCnt", org.apache.thrift.protocol.TType.I32, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CommandClassDataStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CommandClassDataTupleSchemeFactory());
  }

  public byte m_commandClassId; // required
  public int m_sentCnt; // required
  public int m_receivedCnt; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    M_COMMAND_CLASS_ID((short)1, "m_commandClassId"),
    M_SENT_CNT((short)2, "m_sentCnt"),
    M_RECEIVED_CNT((short)3, "m_receivedCnt");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // M_COMMAND_CLASS_ID
          return M_COMMAND_CLASS_ID;
        case 2: // M_SENT_CNT
          return M_SENT_CNT;
        case 3: // M_RECEIVED_CNT
          return M_RECEIVED_CNT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __M_COMMANDCLASSID_ISSET_ID = 0;
  private static final int __M_SENTCNT_ISSET_ID = 1;
  private static final int __M_RECEIVEDCNT_ISSET_ID = 2;
  private BitSet __isset_bit_vector = new BitSet(3);
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.M_COMMAND_CLASS_ID, new org.apache.thrift.meta_data.FieldMetaData("m_commandClassId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.M_SENT_CNT, new org.apache.thrift.meta_data.FieldMetaData("m_sentCnt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.M_RECEIVED_CNT, new org.apache.thrift.meta_data.FieldMetaData("m_receivedCnt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CommandClassData.class, metaDataMap);
  }

  public CommandClassData() {
  }

  public CommandClassData(
    byte m_commandClassId,
    int m_sentCnt,
    int m_receivedCnt)
  {
    this();
    this.m_commandClassId = m_commandClassId;
    setM_commandClassIdIsSet(true);
    this.m_sentCnt = m_sentCnt;
    setM_sentCntIsSet(true);
    this.m_receivedCnt = m_receivedCnt;
    setM_receivedCntIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CommandClassData(CommandClassData other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.m_commandClassId = other.m_commandClassId;
    this.m_sentCnt = other.m_sentCnt;
    this.m_receivedCnt = other.m_receivedCnt;
  }

  public CommandClassData deepCopy() {
    return new CommandClassData(this);
  }

  @Override
  public void clear() {
    setM_commandClassIdIsSet(false);
    this.m_commandClassId = 0;
    setM_sentCntIsSet(false);
    this.m_sentCnt = 0;
    setM_receivedCntIsSet(false);
    this.m_receivedCnt = 0;
  }

  public byte getM_commandClassId() {
    return this.m_commandClassId;
  }

  public CommandClassData setM_commandClassId(byte m_commandClassId) {
    this.m_commandClassId = m_commandClassId;
    setM_commandClassIdIsSet(true);
    return this;
  }

  public void unsetM_commandClassId() {
    __isset_bit_vector.clear(__M_COMMANDCLASSID_ISSET_ID);
  }

  /** Returns true if field m_commandClassId is set (has been assigned a value) and false otherwise */
  public boolean isSetM_commandClassId() {
    return __isset_bit_vector.get(__M_COMMANDCLASSID_ISSET_ID);
  }

  public void setM_commandClassIdIsSet(boolean value) {
    __isset_bit_vector.set(__M_COMMANDCLASSID_ISSET_ID, value);
  }

  public int getM_sentCnt() {
    return this.m_sentCnt;
  }

  public CommandClassData setM_sentCnt(int m_sentCnt) {
    this.m_sentCnt = m_sentCnt;
    setM_sentCntIsSet(true);
    return this;
  }

  public void unsetM_sentCnt() {
    __isset_bit_vector.clear(__M_SENTCNT_ISSET_ID);
  }

  /** Returns true if field m_sentCnt is set (has been assigned a value) and false otherwise */
  public boolean isSetM_sentCnt() {
    return __isset_bit_vector.get(__M_SENTCNT_ISSET_ID);
  }

  public void setM_sentCntIsSet(boolean value) {
    __isset_bit_vector.set(__M_SENTCNT_ISSET_ID, value);
  }

  public int getM_receivedCnt() {
    return this.m_receivedCnt;
  }

  public CommandClassData setM_receivedCnt(int m_receivedCnt) {
    this.m_receivedCnt = m_receivedCnt;
    setM_receivedCntIsSet(true);
    return this;
  }

  public void unsetM_receivedCnt() {
    __isset_bit_vector.clear(__M_RECEIVEDCNT_ISSET_ID);
  }

  /** Returns true if field m_receivedCnt is set (has been assigned a value) and false otherwise */
  public boolean isSetM_receivedCnt() {
    return __isset_bit_vector.get(__M_RECEIVEDCNT_ISSET_ID);
  }

  public void setM_receivedCntIsSet(boolean value) {
    __isset_bit_vector.set(__M_RECEIVEDCNT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case M_COMMAND_CLASS_ID:
      if (value == null) {
        unsetM_commandClassId();
      } else {
        setM_commandClassId((Byte)value);
      }
      break;

    case M_SENT_CNT:
      if (value == null) {
        unsetM_sentCnt();
      } else {
        setM_sentCnt((Integer)value);
      }
      break;

    case M_RECEIVED_CNT:
      if (value == null) {
        unsetM_receivedCnt();
      } else {
        setM_receivedCnt((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case M_COMMAND_CLASS_ID:
      return Byte.valueOf(getM_commandClassId());

    case M_SENT_CNT:
      return Integer.valueOf(getM_sentCnt());

    case M_RECEIVED_CNT:
      return Integer.valueOf(getM_receivedCnt());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case M_COMMAND_CLASS_ID:
      return isSetM_commandClassId();
    case M_SENT_CNT:
      return isSetM_sentCnt();
    case M_RECEIVED_CNT:
      return isSetM_receivedCnt();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CommandClassData)
      return this.equals((CommandClassData)that);
    return false;
  }

  public boolean equals(CommandClassData that) {
    if (that == null)
      return false;

    boolean this_present_m_commandClassId = true;
    boolean that_present_m_commandClassId = true;
    if (this_present_m_commandClassId || that_present_m_commandClassId) {
      if (!(this_present_m_commandClassId && that_present_m_commandClassId))
        return false;
      if (this.m_commandClassId != that.m_commandClassId)
        return false;
    }

    boolean this_present_m_sentCnt = true;
    boolean that_present_m_sentCnt = true;
    if (this_present_m_sentCnt || that_present_m_sentCnt) {
      if (!(this_present_m_sentCnt && that_present_m_sentCnt))
        return false;
      if (this.m_sentCnt != that.m_sentCnt)
        return false;
    }

    boolean this_present_m_receivedCnt = true;
    boolean that_present_m_receivedCnt = true;
    if (this_present_m_receivedCnt || that_present_m_receivedCnt) {
      if (!(this_present_m_receivedCnt && that_present_m_receivedCnt))
        return false;
      if (this.m_receivedCnt != that.m_receivedCnt)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(CommandClassData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    CommandClassData typedOther = (CommandClassData)other;

    lastComparison = Boolean.valueOf(isSetM_commandClassId()).compareTo(typedOther.isSetM_commandClassId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetM_commandClassId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.m_commandClassId, typedOther.m_commandClassId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetM_sentCnt()).compareTo(typedOther.isSetM_sentCnt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetM_sentCnt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.m_sentCnt, typedOther.m_sentCnt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetM_receivedCnt()).compareTo(typedOther.isSetM_receivedCnt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetM_receivedCnt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.m_receivedCnt, typedOther.m_receivedCnt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CommandClassData(");
    boolean first = true;

    sb.append("m_commandClassId:");
    sb.append(this.m_commandClassId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("m_sentCnt:");
    sb.append(this.m_sentCnt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("m_receivedCnt:");
    sb.append(this.m_receivedCnt);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CommandClassDataStandardSchemeFactory implements SchemeFactory {
    public CommandClassDataStandardScheme getScheme() {
      return new CommandClassDataStandardScheme();
    }
  }

  private static class CommandClassDataStandardScheme extends StandardScheme<CommandClassData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CommandClassData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // M_COMMAND_CLASS_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.m_commandClassId = iprot.readByte();
              struct.setM_commandClassIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // M_SENT_CNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.m_sentCnt = iprot.readI32();
              struct.setM_sentCntIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // M_RECEIVED_CNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.m_receivedCnt = iprot.readI32();
              struct.setM_receivedCntIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CommandClassData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(M_COMMAND_CLASS_ID_FIELD_DESC);
      oprot.writeByte(struct.m_commandClassId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(M_SENT_CNT_FIELD_DESC);
      oprot.writeI32(struct.m_sentCnt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(M_RECEIVED_CNT_FIELD_DESC);
      oprot.writeI32(struct.m_receivedCnt);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CommandClassDataTupleSchemeFactory implements SchemeFactory {
    public CommandClassDataTupleScheme getScheme() {
      return new CommandClassDataTupleScheme();
    }
  }

  private static class CommandClassDataTupleScheme extends TupleScheme<CommandClassData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CommandClassData struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetM_commandClassId()) {
        optionals.set(0);
      }
      if (struct.isSetM_sentCnt()) {
        optionals.set(1);
      }
      if (struct.isSetM_receivedCnt()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetM_commandClassId()) {
        oprot.writeByte(struct.m_commandClassId);
      }
      if (struct.isSetM_sentCnt()) {
        oprot.writeI32(struct.m_sentCnt);
      }
      if (struct.isSetM_receivedCnt()) {
        oprot.writeI32(struct.m_receivedCnt);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CommandClassData struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.m_commandClassId = iprot.readByte();
        struct.setM_commandClassIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.m_sentCnt = iprot.readI32();
        struct.setM_sentCntIsSet(true);
      }
      if (incoming.get(2)) {
        struct.m_receivedCnt = iprot.readI32();
        struct.setM_receivedCntIsSet(true);
      }
    }
  }

}

